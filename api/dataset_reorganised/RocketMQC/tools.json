{
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.tools.monitor;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Iterator;\n",
      "import java.util.List;\n",
      "import java.util.Map.Entry;\n",
      "import java.util.Random;\n",
      "import java.util.TreeMap;\n",
      "import java.util.concurrent.Executors;\n",
      "import java.util.concurrent.ScheduledExecutorService;\n",
      "import java.util.concurrent.TimeUnit;\n",
      "import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\n",
      "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\n",
      "import org.apache.rocketmq.client.consumer.PullResult;\n",
      "import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\n",
      "import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\n",
      "import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.log.ClientLogger;\n",
      "import org.apache.rocketmq.common.MQVersion;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.ThreadFactoryImpl;\n",
      "import org.apache.rocketmq.common.admin.ConsumeStats;\n",
      "import org.apache.rocketmq.common.admin.OffsetWrapper;\n",
      "import org.apache.rocketmq.common.topic.TopicValidator;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.common.message.MessageExt;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.common.protocol.body.Connection;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumerConnection;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.TopicList;\n",
      "import org.apache.rocketmq.common.protocol.topic.OffsetMovedEvent;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "\n",
      "public class MonitorService {\n",
      "    private final InternalLogger log = ClientLogger.getLog();\n",
      "    private final ScheduledExecutorService scheduledExecutorService = Executors\n",
      "        .newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"MonitorService\"));\n",
      "\n",
      "    private final MonitorConfig monitorConfig;\n",
      "\n",
      "    private final MonitorListener monitorListener;\n",
      "\n",
      "    private final DefaultMQAdminExt defaultMQAdminExt;\n",
      "    private final DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(\n",
      "        MixAll.TOOLS_CONSUMER_GROUP);\n",
      "    private final DefaultMQPushConsumer defaultMQPushConsumer = new DefaultMQPushConsumer(\n",
      "        MixAll.MONITOR_CONSUMER_GROUP);\n",
      "\n",
      "    public MonitorService(MonitorConfig monitorConfig, MonitorListener monitorListener, RPCHook rpcHook) {\n",
      "        this.monitorConfig = monitorConfig;\n",
      "        this.monitorListener = monitorListener;\n",
      "\n",
      "        this.defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        this.defaultMQAdminExt.setInstanceName(instanceName());\n",
      "        this.defaultMQAdminExt.setNamesrvAddr(monitorConfig.getNamesrvAddr());\n",
      "\n",
      "        this.defaultMQPullConsumer.setInstanceName(instanceName());\n",
      "        this.defaultMQPullConsumer.setNamesrvAddr(monitorConfig.getNamesrvAddr());\n",
      "\n",
      "        this.defaultMQPushConsumer.setInstanceName(instanceName());\n",
      "        this.defaultMQPushConsumer.setNamesrvAddr(monitorConfig.getNamesrvAddr());\n",
      "        try {\n",
      "            this.defaultMQPushConsumer.setConsumeThreadMin(1);\n",
      "            this.defaultMQPushConsumer.setConsumeThreadMax(1);\n",
      "            this.defaultMQPushConsumer.subscribe(TopicValidator.RMQ_SYS_OFFSET_MOVED_EVENT, \"*\");\n",
      "            this.defaultMQPushConsumer.registerMessageListener(new MessageListenerConcurrently() {\n",
      "\n",
      "                @Override\n",
      "                public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n",
      "                    ConsumeConcurrentlyContext context) {\n",
      "                    try {\n",
      "                        OffsetMovedEvent ome =\n",
      "                            OffsetMovedEvent.decode(msgs.get(0).getBody(), OffsetMovedEvent.class);\n",
      "\n",
      "                        DeleteMsgsEvent deleteMsgsEvent = new DeleteMsgsEvent();\n",
      "                        deleteMsgsEvent.setOffsetMovedEvent(ome);\n",
      "                        deleteMsgsEvent.setEventTimestamp(msgs.get(0).getStoreTimestamp());\n",
      "\n",
      "                        MonitorService.this.monitorListener.reportDeleteMsgsEvent(deleteMsgsEvent);\n",
      "                    } catch (Exception e) {\n",
      "                    }\n",
      "\n",
      "                    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n",
      "                }\n",
      "            });\n",
      "        } catch (MQClientException e) {\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static void main(String[] args) throws MQClientException {\n",
      "        main0(args, null);\n",
      "    }\n",
      "\n",
      "    public static void main0(String[] args, RPCHook rpcHook) throws MQClientException {\n",
      "        final MonitorService monitorService =\n",
      "            new MonitorService(new MonitorConfig(), new DefaultMonitorListener(), rpcHook);\n",
      "        monitorService.start();\n",
      "\n",
      "        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {\n",
      "            private volatile boolean hasShutdown = false;\n",
      "\n",
      "            @Override\n",
      "            public void run() {\n",
      "                synchronized (this) {\n",
      "                    if (!this.hasShutdown) {\n",
      "                        this.hasShutdown = true;\n",
      "                        monitorService.shutdown();\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }, \"ShutdownHook\"));\n",
      "    }\n",
      "\n",
      "    private String instanceName() {\n",
      "        String name =\n",
      "            System.currentTimeMillis() + new Random().nextInt() + this.monitorConfig.getNamesrvAddr();\n",
      "\n",
      "        return \"MonitorService_\" + name.hashCode();\n",
      "    }\n",
      "\n",
      "    public void start() throws MQClientException {\n",
      "        this.defaultMQPullConsumer.start();\n",
      "        this.defaultMQAdminExt.start();\n",
      "        this.defaultMQPushConsumer.start();\n",
      "        this.startScheduleTask();\n",
      "    }\n",
      "\n",
      "    public void shutdown() {\n",
      "        this.defaultMQPullConsumer.shutdown();\n",
      "        this.defaultMQAdminExt.shutdown();\n",
      "        this.defaultMQPushConsumer.shutdown();\n",
      "    }\n",
      "\n",
      "    private void startScheduleTask() {\n",
      "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n",
      "            @Override\n",
      "            public void run() {\n",
      "                try {\n",
      "                    MonitorService.this.doMonitorWork();\n",
      "                } catch (Exception e) {\n",
      "                    log.error(\"doMonitorWork Exception\", e);\n",
      "                }\n",
      "            }\n",
      "        }, 1000 * 20, this.monitorConfig.getRoundInterval(), TimeUnit.MILLISECONDS);\n",
      "    }\n",
      "\n",
      "    public void doMonitorWork() throws RemotingException, MQClientException, InterruptedException {\n",
      "        long beginTime = System.currentTimeMillis();\n",
      "        this.monitorListener.beginRound();\n",
      "\n",
      "        TopicList topicList = defaultMQAdminExt.fetchAllTopicList();\n",
      "        for (String topic : topicList.getTopicList()) {\n",
      "            if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n",
      "                String consumerGroup = topic.substring(MixAll.RETRY_GROUP_TOPIC_PREFIX.length());\n",
      "\n",
      "                try {\n",
      "                    this.reportUndoneMsgs(consumerGroup);\n",
      "                } catch (Exception e) {\n",
      "                    // log.error(\"reportUndoneMsgs Exception\", e);\n",
      "                }\n",
      "\n",
      "                try {\n",
      "                    this.reportConsumerRunningInfo(consumerGroup);\n",
      "                } catch (Exception e) {\n",
      "                    // log.error(\"reportConsumerRunningInfo Exception\", e);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        this.monitorListener.endRound();\n",
      "        long spentTimeMills = System.currentTimeMillis() - beginTime;\n",
      "        log.info(\"Execute one round monitor work, spent timemills: {}\", spentTimeMills);\n",
      "    }\n",
      "\n",
      "    private void reportUndoneMsgs(final String consumerGroup) {\n",
      "        ConsumeStats cs = null;\n",
      "        try {\n",
      "            cs = defaultMQAdminExt.examineConsumeStats(consumerGroup);\n",
      "        } catch (Exception e) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        ConsumerConnection cc = null;\n",
      "        try {\n",
      "            cc = defaultMQAdminExt.examineConsumerConnectionInfo(consumerGroup);\n",
      "        } catch (Exception e) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        if (cs != null) {\n",
      "\n",
      "            HashMap<String/* Topic */, ConsumeStats> csByTopic = new HashMap<String, ConsumeStats>();\n",
      "            {\n",
      "                Iterator<Entry<MessageQueue, OffsetWrapper>> it = cs.getOffsetTable().entrySet().iterator();\n",
      "                while (it.hasNext()) {\n",
      "                    Entry<MessageQueue, OffsetWrapper> next = it.next();\n",
      "                    MessageQueue mq = next.getKey();\n",
      "                    OffsetWrapper ow = next.getValue();\n",
      "                    ConsumeStats csTmp = csByTopic.get(mq.getTopic());\n",
      "                    if (null == csTmp) {\n",
      "                        csTmp = new ConsumeStats();\n",
      "                        csByTopic.put(mq.getTopic(), csTmp);\n",
      "                    }\n",
      "\n",
      "                    csTmp.getOffsetTable().put(mq, ow);\n",
      "                }\n",
      "            }\n",
      "\n",
      "            {\n",
      "                Iterator<Entry<String, ConsumeStats>> it = csByTopic.entrySet().iterator();\n",
      "                while (it.hasNext()) {\n",
      "                    Entry<String, ConsumeStats> next = it.next();\n",
      "                    UndoneMsgs undoneMsgs = new UndoneMsgs();\n",
      "                    undoneMsgs.setConsumerGroup(consumerGroup);\n",
      "                    undoneMsgs.setTopic(next.getKey());\n",
      "                    this.computeUndoneMsgs(undoneMsgs, next.getValue());\n",
      "                    this.monitorListener.reportUndoneMsgs(undoneMsgs);\n",
      "                    this.reportFailedMsgs(consumerGroup, next.getKey());\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void reportConsumerRunningInfo(final String consumerGroup) throws InterruptedException,\n",
      "        MQBrokerException, RemotingException, MQClientException {\n",
      "        ConsumerConnection cc = defaultMQAdminExt.examineConsumerConnectionInfo(consumerGroup);\n",
      "        TreeMap<String, ConsumerRunningInfo> infoMap = new TreeMap<String, ConsumerRunningInfo>();\n",
      "        for (Connection c : cc.getConnectionSet()) {\n",
      "            String clientId = c.getClientId();\n",
      "\n",
      "            if (c.getVersion() < MQVersion.Version.V3_1_8_SNAPSHOT.ordinal()) {\n",
      "                continue;\n",
      "            }\n",
      "\n",
      "            try {\n",
      "                ConsumerRunningInfo info =\n",
      "                    defaultMQAdminExt.getConsumerRunningInfo(consumerGroup, clientId, false);\n",
      "                infoMap.put(clientId, info);\n",
      "            } catch (Exception e) {\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (!infoMap.isEmpty()) {\n",
      "            this.monitorListener.reportConsumerRunningInfo(infoMap);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void computeUndoneMsgs(final UndoneMsgs undoneMsgs, final ConsumeStats consumeStats) {\n",
      "        long total = 0;\n",
      "        long singleMax = 0;\n",
      "        long delayMax = 0;\n",
      "        Iterator<Entry<MessageQueue, OffsetWrapper>> it = consumeStats.getOffsetTable().entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Entry<MessageQueue, OffsetWrapper> next = it.next();\n",
      "            MessageQueue mq = next.getKey();\n",
      "            OffsetWrapper ow = next.getValue();\n",
      "            long diff = ow.getBrokerOffset() - ow.getConsumerOffset();\n",
      "\n",
      "            if (diff > singleMax) {\n",
      "                singleMax = diff;\n",
      "            }\n",
      "\n",
      "            if (diff > 0) {\n",
      "                total += diff;\n",
      "            }\n",
      "\n",
      "            // Delay\n",
      "            if (ow.getLastTimestamp() > 0) {\n",
      "                try {\n",
      "                    long maxOffset = this.defaultMQPullConsumer.maxOffset(mq);\n",
      "                    if (maxOffset > 0) {\n",
      "                        PullResult pull = this.defaultMQPullConsumer.pull(mq, \"*\", maxOffset - 1, 1);\n",
      "                        switch (pull.getPullStatus()) {\n",
      "                            case FOUND:\n",
      "                                long delay =\n",
      "                                    pull.getMsgFoundList().get(0).getStoreTimestamp() - ow.getLastTimestamp();\n",
      "                                if (delay > delayMax) {\n",
      "                                    delayMax = delay;\n",
      "                                }\n",
      "                                break;\n",
      "                            case NO_MATCHED_MSG:\n",
      "                            case NO_NEW_MSG:\n",
      "                            case OFFSET_ILLEGAL:\n",
      "                                break;\n",
      "                            default:\n",
      "                                break;\n",
      "                        }\n",
      "                    }\n",
      "                } catch (Exception e) {\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        undoneMsgs.setUndoneMsgsTotal(total);\n",
      "        undoneMsgs.setUndoneMsgsSingleMQ(singleMax);\n",
      "        undoneMsgs.setUndoneMsgsDelayTimeMills(delayMax);\n",
      "    }\n",
      "\n",
      "    private void reportFailedMsgs(final String consumerGroup, final String topic) {\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.monitor;\n",
      "\n",
      "import java.lang.reflect.Field;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.HashSet;\n",
      "import java.util.List;\n",
      "import java.util.Properties;\n",
      "import java.util.Set;\n",
      "import java.util.TreeMap;\n",
      "import java.util.TreeSet;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import org.apache.rocketmq.client.ClientConfig;\n",
      "import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\n",
      "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.impl.MQClientAPIImpl;\n",
      "import org.apache.rocketmq.client.impl.MQClientManager;\n",
      "import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n",
      "import org.apache.rocketmq.common.MQVersion;\n",
      "import org.apache.rocketmq.common.admin.ConsumeStats;\n",
      "import org.apache.rocketmq.common.admin.OffsetWrapper;\n",
      "import org.apache.rocketmq.common.consumer.ConsumeFromWhere;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.common.protocol.body.Connection;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumeStatus;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumerConnection;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.ProcessQueueInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.TopicList;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n",
      "import org.apache.rocketmq.common.protocol.route.BrokerData;\n",
      "import org.apache.rocketmq.common.protocol.route.QueueData;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.remoting.protocol.LanguageCode;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExtImpl;\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.apache.rocketmq.common.protocol.heartbeat.ConsumeType.CONSUME_ACTIVELY;\n",
      "import static org.mockito.ArgumentMatchers.anyLong;\n",
      "import static org.mockito.ArgumentMatchers.anyString;\n",
      "import static org.mockito.Mockito.anyBoolean;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class MonitorServiceTest {\n",
      "    private static DefaultMQAdminExt defaultMQAdminExt;\n",
      "    private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;\n",
      "    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());\n",
      "    private static MQClientAPIImpl mQClientAPIImpl;\n",
      "    private static MonitorConfig monitorConfig;\n",
      "    private static MonitorListener monitorListener;\n",
      "    private static DefaultMQPullConsumer defaultMQPullConsumer;\n",
      "    private static DefaultMQPushConsumer defaultMQPushConsumer;\n",
      "    private static MonitorService monitorService;\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void init() throws NoSuchFieldException, IllegalAccessException, RemotingException, MQClientException, InterruptedException, MQBrokerException {\n",
      "        monitorConfig = new MonitorConfig();\n",
      "        monitorListener = new DefaultMonitorListener();\n",
      "        defaultMQPullConsumer = mock(DefaultMQPullConsumer.class);\n",
      "        defaultMQPushConsumer = mock(DefaultMQPushConsumer.class);\n",
      "        mQClientAPIImpl = mock(MQClientAPIImpl.class);\n",
      "        defaultMQAdminExt = new DefaultMQAdminExt();\n",
      "        defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(defaultMQAdminExt, 1000);\n",
      "        monitorService = new MonitorService(monitorConfig, monitorListener, null);\n",
      "\n",
      "        Field field = DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExtImpl, mqClientInstance);\n",
      "        field = MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(mqClientInstance, mQClientAPIImpl);\n",
      "        field = DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExt, defaultMQAdminExtImpl);\n",
      "\n",
      "        field = MonitorService.class.getDeclaredField(\"defaultMQAdminExt\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(monitorService, defaultMQAdminExt);\n",
      "        field = MonitorService.class.getDeclaredField(\"defaultMQPullConsumer\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(monitorService, defaultMQPullConsumer);\n",
      "        field = MonitorService.class.getDeclaredField(\"defaultMQPushConsumer\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(monitorService, defaultMQPushConsumer);\n",
      "\n",
      "        TopicList topicList = new TopicList();\n",
      "        Set<String> topicSet = new HashSet<>();\n",
      "        topicSet.add(\"topic_one\");\n",
      "        topicSet.add(\"topic_two\");\n",
      "        topicList.setTopicList(topicSet);\n",
      "        when(mQClientAPIImpl.getTopicListFromNameServer(anyLong())).thenReturn(topicList);\n",
      "\n",
      "        TopicRouteData topicRouteData = new TopicRouteData();\n",
      "        List<BrokerData> brokerDatas = new ArrayList<>();\n",
      "        HashMap<Long, String> brokerAddrs = new HashMap<>();\n",
      "        brokerAddrs.put(1234l, \"127.0.0.1:10911\");\n",
      "        BrokerData brokerData = new BrokerData();\n",
      "        brokerData.setCluster(\"default-cluster\");\n",
      "        brokerData.setBrokerName(\"default-broker\");\n",
      "        brokerData.setBrokerAddrs(brokerAddrs);\n",
      "        brokerDatas.add(brokerData);\n",
      "        topicRouteData.setBrokerDatas(brokerDatas);\n",
      "        topicRouteData.setQueueDatas(new ArrayList<QueueData>());\n",
      "        topicRouteData.setFilterServerTable(new HashMap<String, List<String>>());\n",
      "        when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(topicRouteData);\n",
      "\n",
      "        ConsumeStats consumeStats = new ConsumeStats();\n",
      "        consumeStats.setConsumeTps(1234);\n",
      "        MessageQueue messageQueue = new MessageQueue();\n",
      "        OffsetWrapper offsetWrapper = new OffsetWrapper();\n",
      "        HashMap<MessageQueue, OffsetWrapper> stats = new HashMap<>();\n",
      "        stats.put(messageQueue, offsetWrapper);\n",
      "        consumeStats.setOffsetTable(stats);\n",
      "        when(mQClientAPIImpl.getConsumeStats(anyString(), anyString(), anyString(), anyLong())).thenReturn(consumeStats);\n",
      "\n",
      "        ConsumerConnection consumerConnection = new ConsumerConnection();\n",
      "        consumerConnection.setConsumeType(ConsumeType.CONSUME_PASSIVELY);\n",
      "        consumerConnection.setMessageModel(MessageModel.CLUSTERING);\n",
      "        HashSet<Connection> connections = new HashSet<>();\n",
      "        Connection connection = new Connection();\n",
      "        connection.setClientId(\"client_id\");\n",
      "        connection.setClientAddr(\"127.0.0.1:109111\");\n",
      "        connection.setLanguage(LanguageCode.JAVA);\n",
      "        connection.setVersion(MQVersion.Version.V4_0_0_SNAPSHOT.ordinal());\n",
      "        connections.add(connection);\n",
      "        consumerConnection.setConnectionSet(connections);\n",
      "        consumerConnection.setSubscriptionTable(new ConcurrentHashMap<String, SubscriptionData>());\n",
      "        consumerConnection.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n",
      "        when(mQClientAPIImpl.getConsumerConnectionList(anyString(), anyString(), anyLong())).thenReturn(consumerConnection);\n",
      "\n",
      "        ConsumerRunningInfo consumerRunningInfo = new ConsumerRunningInfo();\n",
      "        consumerRunningInfo.setJstack(\"test\");\n",
      "        consumerRunningInfo.setMqTable(new TreeMap<MessageQueue, ProcessQueueInfo>());\n",
      "        consumerRunningInfo.setStatusTable(new TreeMap<String, ConsumeStatus>());\n",
      "        consumerRunningInfo.setSubscriptionSet(new TreeSet<SubscriptionData>());\n",
      "        Properties properties = new Properties();\n",
      "        properties.put(ConsumerRunningInfo.PROP_CONSUME_TYPE, CONSUME_ACTIVELY);\n",
      "        properties.put(ConsumerRunningInfo.PROP_CONSUMER_START_TIMESTAMP, System.currentTimeMillis());\n",
      "        consumerRunningInfo.setProperties(properties);\n",
      "        when(mQClientAPIImpl.getConsumerRunningInfo(anyString(), anyString(), anyString(), anyBoolean(), anyLong())).thenReturn(consumerRunningInfo);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void terminate() {\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testDoMonitorWork() throws RemotingException, MQClientException, InterruptedException {\n",
      "        monitorService.doMonitorWork();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testReportConsumerRunningInfo() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n",
      "        monitorService.reportConsumerRunningInfo(\"test_group\");\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "MonitorService::::main(java.lang.String[])": [
        112,
        114
      ],
      "MonitorService::::instanceName()": [
        136,
        141
      ],
      "MonitorService::::start()": [
        143,
        148
      ],
      "MonitorService::::shutdown()": [
        150,
        154
      ],
      "MonitorService::::startScheduleTask()": [
        156,
        167
      ],
      "MonitorService::::doMonitorWork()": [
        169,
        194
      ],
      "MonitorService::::reportUndoneMsgs(java.lang.String)": [
        196,
        243
      ],
      "MonitorService::::reportConsumerRunningInfo(java.lang.String)": [
        245,
        267
      ],
      "MonitorService::::reportFailedMsgs(java.lang.String,java.lang.String)": [
        320,
        322
      ]
    },
    "test_method_lines_dic": {
      "MonitorServiceTest::::init()": [
        80,
        166
      ],
      "MonitorServiceTest::::terminate()": [
        168,
        170
      ],
      "MonitorServiceTest::::testDoMonitorWork()": [
        172,
        175
      ],
      "MonitorServiceTest::::testReportConsumerRunningInfo()": [
        177,
        180
      ]
    },
    "reverse_method_lines_dic": {
      "112": "MonitorService::::main(java.lang.String[])",
      "113": "MonitorService::::main(java.lang.String[])",
      "114": "MonitorService::::main(java.lang.String[])",
      "136": "MonitorService::::instanceName()",
      "137": "MonitorService::::instanceName()",
      "138": "MonitorService::::instanceName()",
      "139": "MonitorService::::instanceName()",
      "140": "MonitorService::::instanceName()",
      "141": "MonitorService::::instanceName()",
      "143": "MonitorService::::start()",
      "144": "MonitorService::::start()",
      "145": "MonitorService::::start()",
      "146": "MonitorService::::start()",
      "147": "MonitorService::::start()",
      "148": "MonitorService::::start()",
      "150": "MonitorService::::shutdown()",
      "151": "MonitorService::::shutdown()",
      "152": "MonitorService::::shutdown()",
      "153": "MonitorService::::shutdown()",
      "154": "MonitorService::::shutdown()",
      "156": "MonitorService::::startScheduleTask()",
      "157": "MonitorService::::startScheduleTask()",
      "158": "MonitorService::::startScheduleTask()",
      "159": "MonitorService::::startScheduleTask()",
      "160": "MonitorService::::startScheduleTask()",
      "161": "MonitorService::::startScheduleTask()",
      "162": "MonitorService::::startScheduleTask()",
      "163": "MonitorService::::startScheduleTask()",
      "164": "MonitorService::::startScheduleTask()",
      "165": "MonitorService::::startScheduleTask()",
      "166": "MonitorService::::startScheduleTask()",
      "167": "MonitorService::::startScheduleTask()",
      "169": "MonitorService::::doMonitorWork()",
      "170": "MonitorService::::doMonitorWork()",
      "171": "MonitorService::::doMonitorWork()",
      "172": "MonitorService::::doMonitorWork()",
      "173": "MonitorService::::doMonitorWork()",
      "174": "MonitorService::::doMonitorWork()",
      "175": "MonitorService::::doMonitorWork()",
      "176": "MonitorService::::doMonitorWork()",
      "177": "MonitorService::::doMonitorWork()",
      "178": "MonitorService::::doMonitorWork()",
      "179": "MonitorService::::doMonitorWork()",
      "180": "MonitorService::::doMonitorWork()",
      "181": "MonitorService::::doMonitorWork()",
      "182": "MonitorService::::doMonitorWork()",
      "183": "MonitorService::::doMonitorWork()",
      "184": "MonitorService::::doMonitorWork()",
      "185": "MonitorService::::doMonitorWork()",
      "186": "MonitorService::::doMonitorWork()",
      "187": "MonitorService::::doMonitorWork()",
      "188": "MonitorService::::doMonitorWork()",
      "189": "MonitorService::::doMonitorWork()",
      "190": "MonitorService::::doMonitorWork()",
      "191": "MonitorService::::doMonitorWork()",
      "192": "MonitorService::::doMonitorWork()",
      "193": "MonitorService::::doMonitorWork()",
      "194": "MonitorService::::doMonitorWork()",
      "196": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "197": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "198": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "199": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "200": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "201": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "202": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "203": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "204": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "205": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "206": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "207": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "208": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "209": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "210": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "211": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "212": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "213": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "214": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "215": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "216": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "217": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "218": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "219": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "220": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "221": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "222": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "223": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "224": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "225": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "226": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "227": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "228": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "229": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "230": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "231": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "232": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "233": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "234": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "235": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "236": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "237": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "238": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "239": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "240": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "241": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "242": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "243": "MonitorService::::reportUndoneMsgs(java.lang.String)",
      "245": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "246": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "247": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "248": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "249": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "250": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "251": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "252": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "253": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "254": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "255": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "256": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "257": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "258": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "259": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "260": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "261": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "262": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "263": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "264": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "265": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "266": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "267": "MonitorService::::reportConsumerRunningInfo(java.lang.String)",
      "320": "MonitorService::::reportFailedMsgs(java.lang.String,java.lang.String)",
      "321": "MonitorService::::reportFailedMsgs(java.lang.String,java.lang.String)",
      "322": "MonitorService::::reportFailedMsgs(java.lang.String,java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "80": "MonitorServiceTest::::init()",
      "81": "MonitorServiceTest::::init()",
      "82": "MonitorServiceTest::::init()",
      "83": "MonitorServiceTest::::init()",
      "84": "MonitorServiceTest::::init()",
      "85": "MonitorServiceTest::::init()",
      "86": "MonitorServiceTest::::init()",
      "87": "MonitorServiceTest::::init()",
      "88": "MonitorServiceTest::::init()",
      "89": "MonitorServiceTest::::init()",
      "90": "MonitorServiceTest::::init()",
      "91": "MonitorServiceTest::::init()",
      "92": "MonitorServiceTest::::init()",
      "93": "MonitorServiceTest::::init()",
      "94": "MonitorServiceTest::::init()",
      "95": "MonitorServiceTest::::init()",
      "96": "MonitorServiceTest::::init()",
      "97": "MonitorServiceTest::::init()",
      "98": "MonitorServiceTest::::init()",
      "99": "MonitorServiceTest::::init()",
      "100": "MonitorServiceTest::::init()",
      "101": "MonitorServiceTest::::init()",
      "102": "MonitorServiceTest::::init()",
      "103": "MonitorServiceTest::::init()",
      "104": "MonitorServiceTest::::init()",
      "105": "MonitorServiceTest::::init()",
      "106": "MonitorServiceTest::::init()",
      "107": "MonitorServiceTest::::init()",
      "108": "MonitorServiceTest::::init()",
      "109": "MonitorServiceTest::::init()",
      "110": "MonitorServiceTest::::init()",
      "111": "MonitorServiceTest::::init()",
      "112": "MonitorServiceTest::::init()",
      "113": "MonitorServiceTest::::init()",
      "114": "MonitorServiceTest::::init()",
      "115": "MonitorServiceTest::::init()",
      "116": "MonitorServiceTest::::init()",
      "117": "MonitorServiceTest::::init()",
      "118": "MonitorServiceTest::::init()",
      "119": "MonitorServiceTest::::init()",
      "120": "MonitorServiceTest::::init()",
      "121": "MonitorServiceTest::::init()",
      "122": "MonitorServiceTest::::init()",
      "123": "MonitorServiceTest::::init()",
      "124": "MonitorServiceTest::::init()",
      "125": "MonitorServiceTest::::init()",
      "126": "MonitorServiceTest::::init()",
      "127": "MonitorServiceTest::::init()",
      "128": "MonitorServiceTest::::init()",
      "129": "MonitorServiceTest::::init()",
      "130": "MonitorServiceTest::::init()",
      "131": "MonitorServiceTest::::init()",
      "132": "MonitorServiceTest::::init()",
      "133": "MonitorServiceTest::::init()",
      "134": "MonitorServiceTest::::init()",
      "135": "MonitorServiceTest::::init()",
      "136": "MonitorServiceTest::::init()",
      "137": "MonitorServiceTest::::init()",
      "138": "MonitorServiceTest::::init()",
      "139": "MonitorServiceTest::::init()",
      "140": "MonitorServiceTest::::init()",
      "141": "MonitorServiceTest::::init()",
      "142": "MonitorServiceTest::::init()",
      "143": "MonitorServiceTest::::init()",
      "144": "MonitorServiceTest::::init()",
      "145": "MonitorServiceTest::::init()",
      "146": "MonitorServiceTest::::init()",
      "147": "MonitorServiceTest::::init()",
      "148": "MonitorServiceTest::::init()",
      "149": "MonitorServiceTest::::init()",
      "150": "MonitorServiceTest::::init()",
      "151": "MonitorServiceTest::::init()",
      "152": "MonitorServiceTest::::init()",
      "153": "MonitorServiceTest::::init()",
      "154": "MonitorServiceTest::::init()",
      "155": "MonitorServiceTest::::init()",
      "156": "MonitorServiceTest::::init()",
      "157": "MonitorServiceTest::::init()",
      "158": "MonitorServiceTest::::init()",
      "159": "MonitorServiceTest::::init()",
      "160": "MonitorServiceTest::::init()",
      "161": "MonitorServiceTest::::init()",
      "162": "MonitorServiceTest::::init()",
      "163": "MonitorServiceTest::::init()",
      "164": "MonitorServiceTest::::init()",
      "165": "MonitorServiceTest::::init()",
      "166": "MonitorServiceTest::::init()",
      "168": "MonitorServiceTest::::terminate()",
      "169": "MonitorServiceTest::::terminate()",
      "170": "MonitorServiceTest::::terminate()",
      "172": "MonitorServiceTest::::testDoMonitorWork()",
      "173": "MonitorServiceTest::::testDoMonitorWork()",
      "174": "MonitorServiceTest::::testDoMonitorWork()",
      "175": "MonitorServiceTest::::testDoMonitorWork()",
      "177": "MonitorServiceTest::::testReportConsumerRunningInfo()",
      "178": "MonitorServiceTest::::testReportConsumerRunningInfo()",
      "179": "MonitorServiceTest::::testReportConsumerRunningInfo()",
      "180": "MonitorServiceTest::::testReportConsumerRunningInfo()"
    },
    "tests": [
      {
        "test_lines": [
          172,
          175
        ],
        "covered_lines": [
          57,
          58,
          59,
          66,
          68,
          71,
          72,
          73,
          75,
          76,
          77,
          79,
          80,
          82,
          83,
          85,
          86,
          87,
          88,
          109,
          110,
          137,
          138,
          140,
          170,
          171,
          173,
          174,
          175,
          190,
          191,
          192,
          193,
          194
        ]
      },
      {
        "test_lines": [
          177,
          180
        ],
        "covered_lines": [
          57,
          58,
          59,
          66,
          68,
          71,
          72,
          73,
          75,
          76,
          77,
          79,
          80,
          82,
          83,
          85,
          86,
          87,
          88,
          109,
          110,
          137,
          138,
          140,
          247,
          248,
          249,
          250,
          252,
          257,
          258,
          259,
          261,
          262,
          264,
          265,
          267
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.admin;\n",
      "\n",
      "import java.io.UnsupportedEncodingException;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Properties;\n",
      "import java.util.Set;\n",
      "import org.apache.rocketmq.client.ClientConfig;\n",
      "import org.apache.rocketmq.client.QueryResult;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.common.AclConfig;\n",
      "import org.apache.rocketmq.common.PlainAccessConfig;\n",
      "import org.apache.rocketmq.common.TopicConfig;\n",
      "import org.apache.rocketmq.common.admin.ConsumeStats;\n",
      "import org.apache.rocketmq.common.admin.RollbackStats;\n",
      "import org.apache.rocketmq.common.admin.TopicStatsTable;\n",
      "import org.apache.rocketmq.common.message.MessageExt;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.common.protocol.body.BrokerStatsData;\n",
      "import org.apache.rocketmq.common.protocol.body.ClusterAclVersionInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.ClusterInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumeMessageDirectlyResult;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumeStatsList;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumerConnection;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.GroupList;\n",
      "import org.apache.rocketmq.common.protocol.body.KVTable;\n",
      "import org.apache.rocketmq.common.protocol.body.ProducerConnection;\n",
      "import org.apache.rocketmq.common.protocol.body.QueryConsumeQueueResponseBody;\n",
      "import org.apache.rocketmq.common.protocol.body.QueueTimeSpan;\n",
      "import org.apache.rocketmq.common.protocol.body.SubscriptionGroupWrapper;\n",
      "import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;\n",
      "import org.apache.rocketmq.common.protocol.body.TopicList;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;\n",
      "import org.apache.rocketmq.common.topic.TopicValidator;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingConnectException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\n",
      "import org.apache.rocketmq.tools.admin.api.MessageTrack;\n",
      "\n",
      "public class DefaultMQAdminExt extends ClientConfig implements MQAdminExt {\n",
      "    private final DefaultMQAdminExtImpl defaultMQAdminExtImpl;\n",
      "    private String adminExtGroup = \"admin_ext_group\";\n",
      "    private String createTopicKey = TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC;\n",
      "    private long timeoutMillis = 5000;\n",
      "\n",
      "    public DefaultMQAdminExt() {\n",
      "        this.defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(this, null, timeoutMillis);\n",
      "    }\n",
      "\n",
      "    public DefaultMQAdminExt(long timeoutMillis) {\n",
      "        this.defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(this, null, timeoutMillis);\n",
      "    }\n",
      "\n",
      "    public DefaultMQAdminExt(RPCHook rpcHook) {\n",
      "        this.defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(this, rpcHook, timeoutMillis);\n",
      "    }\n",
      "\n",
      "    public DefaultMQAdminExt(RPCHook rpcHook, long timeoutMillis) {\n",
      "        this.defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(this, rpcHook, timeoutMillis);\n",
      "    }\n",
      "\n",
      "    public DefaultMQAdminExt(final String adminExtGroup) {\n",
      "        this.adminExtGroup = adminExtGroup;\n",
      "        this.defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(this, timeoutMillis);\n",
      "    }\n",
      "\n",
      "    public DefaultMQAdminExt(final String adminExtGroup, long timeoutMillis) {\n",
      "        this.adminExtGroup = adminExtGroup;\n",
      "        this.defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(this, timeoutMillis);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void createTopic(String key, String newTopic, int queueNum) throws MQClientException {\n",
      "        createTopic(key, newTopic, queueNum, 0);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {\n",
      "        defaultMQAdminExtImpl.createTopic(key, newTopic, queueNum, topicSysFlag);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public long searchOffset(MessageQueue mq, long timestamp) throws MQClientException {\n",
      "        return defaultMQAdminExtImpl.searchOffset(mq, timestamp);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public long maxOffset(MessageQueue mq) throws MQClientException {\n",
      "        return defaultMQAdminExtImpl.maxOffset(mq);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public long minOffset(MessageQueue mq) throws MQClientException {\n",
      "        return defaultMQAdminExtImpl.minOffset(mq);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public long earliestMsgStoreTime(MessageQueue mq) throws MQClientException {\n",
      "        return defaultMQAdminExtImpl.earliestMsgStoreTime(mq);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public MessageExt viewMessage(\n",
      "        String offsetMsgId) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        return defaultMQAdminExtImpl.viewMessage(offsetMsgId);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public QueryResult queryMessage(String topic, String key, int maxNum, long begin,\n",
      "        long end) throws MQClientException,\n",
      "        InterruptedException {\n",
      "        return defaultMQAdminExtImpl.queryMessage(topic, key, maxNum, begin, end);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void start() throws MQClientException {\n",
      "        defaultMQAdminExtImpl.start();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void shutdown() {\n",
      "        defaultMQAdminExtImpl.shutdown();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void updateBrokerConfig(String brokerAddr,\n",
      "        Properties properties) throws RemotingConnectException, RemotingSendRequestException,\n",
      "        RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException {\n",
      "        defaultMQAdminExtImpl.updateBrokerConfig(brokerAddr, properties);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Properties getBrokerConfig(final String brokerAddr) throws RemotingConnectException,\n",
      "        RemotingSendRequestException, RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException {\n",
      "        return defaultMQAdminExtImpl.getBrokerConfig(brokerAddr);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void createAndUpdateTopicConfig(String addr, TopicConfig config) throws RemotingException, MQBrokerException,\n",
      "        InterruptedException, MQClientException {\n",
      "        defaultMQAdminExtImpl.createAndUpdateTopicConfig(addr, config);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void createAndUpdatePlainAccessConfig(String addr,\n",
      "        PlainAccessConfig config) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        defaultMQAdminExtImpl.createAndUpdatePlainAccessConfig(addr, config);\n",
      "    }\n",
      "\n",
      "    @Override public void deletePlainAccessConfig(String addr,\n",
      "        String accessKey) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        defaultMQAdminExtImpl.deletePlainAccessConfig(addr, accessKey);\n",
      "    }\n",
      "\n",
      "    @Override public void updateGlobalWhiteAddrConfig(String addr,\n",
      "        String globalWhiteAddrs) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        defaultMQAdminExtImpl.updateGlobalWhiteAddrConfig(addr, globalWhiteAddrs);\n",
      "    }\n",
      "\n",
      "    @Override public ClusterAclVersionInfo examineBrokerClusterAclVersionInfo(\n",
      "        String addr) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        return defaultMQAdminExtImpl.examineBrokerClusterAclVersionInfo(addr);\n",
      "    }\n",
      "\n",
      "    @Override public AclConfig examineBrokerClusterAclConfig(\n",
      "        String addr) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        return defaultMQAdminExtImpl.examineBrokerClusterAclConfig(addr);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void createAndUpdateSubscriptionGroupConfig(String addr,\n",
      "        SubscriptionGroupConfig config) throws RemotingException,\n",
      "        MQBrokerException, InterruptedException, MQClientException {\n",
      "        defaultMQAdminExtImpl.createAndUpdateSubscriptionGroupConfig(addr, config);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public SubscriptionGroupConfig examineSubscriptionGroupConfig(String addr, String group) {\n",
      "        return defaultMQAdminExtImpl.examineSubscriptionGroupConfig(addr, group);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public TopicConfig examineTopicConfig(String addr, String topic) {\n",
      "        return defaultMQAdminExtImpl.examineTopicConfig(addr, topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public TopicStatsTable examineTopicStats(\n",
      "        String topic) throws RemotingException, MQClientException, InterruptedException,\n",
      "        MQBrokerException {\n",
      "        return defaultMQAdminExtImpl.examineTopicStats(topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public TopicList fetchAllTopicList() throws RemotingException, MQClientException, InterruptedException {\n",
      "        return this.defaultMQAdminExtImpl.fetchAllTopicList();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public TopicList fetchTopicsByCLuster(\n",
      "        String clusterName) throws RemotingException, MQClientException, InterruptedException {\n",
      "        return this.defaultMQAdminExtImpl.fetchTopicsByCLuster(clusterName);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public KVTable fetchBrokerRuntimeStats(\n",
      "        final String brokerAddr) throws RemotingConnectException, RemotingSendRequestException,\n",
      "        RemotingTimeoutException, InterruptedException, MQBrokerException {\n",
      "        return this.defaultMQAdminExtImpl.fetchBrokerRuntimeStats(brokerAddr);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ConsumeStats examineConsumeStats(\n",
      "        String consumerGroup) throws RemotingException, MQClientException, InterruptedException,\n",
      "        MQBrokerException {\n",
      "        return examineConsumeStats(consumerGroup, null);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ConsumeStats examineConsumeStats(String consumerGroup,\n",
      "        String topic) throws RemotingException, MQClientException,\n",
      "        InterruptedException, MQBrokerException {\n",
      "        return defaultMQAdminExtImpl.examineConsumeStats(consumerGroup, topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ClusterInfo examineBrokerClusterInfo() throws InterruptedException, RemotingConnectException, RemotingTimeoutException,\n",
      "        RemotingSendRequestException, MQBrokerException {\n",
      "        return defaultMQAdminExtImpl.examineBrokerClusterInfo();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public TopicRouteData examineTopicRouteInfo(\n",
      "        String topic) throws RemotingException, MQClientException, InterruptedException {\n",
      "        return defaultMQAdminExtImpl.examineTopicRouteInfo(topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ConsumerConnection examineConsumerConnectionInfo(\n",
      "        String consumerGroup) throws InterruptedException, MQBrokerException,\n",
      "        RemotingException, MQClientException {\n",
      "        return defaultMQAdminExtImpl.examineConsumerConnectionInfo(consumerGroup);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ProducerConnection examineProducerConnectionInfo(String producerGroup,\n",
      "        final String topic) throws RemotingException,\n",
      "        MQClientException, InterruptedException, MQBrokerException {\n",
      "        return defaultMQAdminExtImpl.examineProducerConnectionInfo(producerGroup, topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<String> getNameServerAddressList() {\n",
      "        return this.defaultMQAdminExtImpl.getNameServerAddressList();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int wipeWritePermOfBroker(final String namesrvAddr, String brokerName) throws RemotingCommandException,\n",
      "        RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQClientException {\n",
      "        return defaultMQAdminExtImpl.wipeWritePermOfBroker(namesrvAddr, brokerName);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void putKVConfig(String namespace, String key, String value) {\n",
      "        defaultMQAdminExtImpl.putKVConfig(namespace, key, value);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String getKVConfig(String namespace,\n",
      "        String key) throws RemotingException, MQClientException, InterruptedException {\n",
      "        return defaultMQAdminExtImpl.getKVConfig(namespace, key);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public KVTable getKVListByNamespace(\n",
      "        String namespace) throws RemotingException, MQClientException, InterruptedException {\n",
      "        return defaultMQAdminExtImpl.getKVListByNamespace(namespace);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void deleteTopicInBroker(Set<String> addrs,\n",
      "        String topic) throws RemotingException, MQBrokerException, InterruptedException,\n",
      "        MQClientException {\n",
      "        defaultMQAdminExtImpl.deleteTopicInBroker(addrs, topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void deleteTopicInNameServer(Set<String> addrs,\n",
      "        String topic) throws RemotingException, MQBrokerException, InterruptedException,\n",
      "        MQClientException {\n",
      "        defaultMQAdminExtImpl.deleteTopicInNameServer(addrs, topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void deleteSubscriptionGroup(String addr,\n",
      "        String groupName) throws RemotingException, MQBrokerException, InterruptedException,\n",
      "        MQClientException {\n",
      "        defaultMQAdminExtImpl.deleteSubscriptionGroup(addr, groupName);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void createAndUpdateKvConfig(String namespace, String key,\n",
      "        String value) throws RemotingException, MQBrokerException,\n",
      "        InterruptedException, MQClientException {\n",
      "        defaultMQAdminExtImpl.createAndUpdateKvConfig(namespace, key, value);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void deleteKvConfig(String namespace,\n",
      "        String key) throws RemotingException, MQBrokerException, InterruptedException,\n",
      "        MQClientException {\n",
      "        defaultMQAdminExtImpl.deleteKvConfig(namespace, key);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<RollbackStats> resetOffsetByTimestampOld(String consumerGroup, String topic, long timestamp,\n",
      "        boolean force)\n",
      "        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        return defaultMQAdminExtImpl.resetOffsetByTimestampOld(consumerGroup, topic, timestamp, force);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Map<MessageQueue, Long> resetOffsetByTimestamp(String topic, String group, long timestamp, boolean isForce)\n",
      "        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        return resetOffsetByTimestamp(topic, group, timestamp, isForce, false);\n",
      "    }\n",
      "\n",
      "    public Map<MessageQueue, Long> resetOffsetByTimestamp(String topic, String group, long timestamp, boolean isForce,\n",
      "        boolean isC)\n",
      "        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        return defaultMQAdminExtImpl.resetOffsetByTimestamp(topic, group, timestamp, isForce, isC);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void resetOffsetNew(String consumerGroup, String topic,\n",
      "        long timestamp) throws RemotingException, MQBrokerException,\n",
      "        InterruptedException, MQClientException {\n",
      "        this.defaultMQAdminExtImpl.resetOffsetNew(consumerGroup, topic, timestamp);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Map<String, Map<MessageQueue, Long>> getConsumeStatus(String topic, String group,\n",
      "        String clientAddr) throws RemotingException,\n",
      "        MQBrokerException, InterruptedException, MQClientException {\n",
      "        return defaultMQAdminExtImpl.getConsumeStatus(topic, group, clientAddr);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void createOrUpdateOrderConf(String key, String value,\n",
      "        boolean isCluster) throws RemotingException, MQBrokerException,\n",
      "        InterruptedException, MQClientException {\n",
      "        defaultMQAdminExtImpl.createOrUpdateOrderConf(key, value, isCluster);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public GroupList queryTopicConsumeByWho(\n",
      "        String topic) throws InterruptedException, MQBrokerException, RemotingException,\n",
      "        MQClientException {\n",
      "        return this.defaultMQAdminExtImpl.queryTopicConsumeByWho(topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<QueueTimeSpan> queryConsumeTimeSpan(final String topic,\n",
      "        final String group) throws InterruptedException, MQBrokerException,\n",
      "        RemotingException, MQClientException {\n",
      "        return this.defaultMQAdminExtImpl.queryConsumeTimeSpan(topic, group);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean cleanExpiredConsumerQueue(\n",
      "        String cluster) throws RemotingConnectException, RemotingSendRequestException,\n",
      "        RemotingTimeoutException, MQClientException, InterruptedException {\n",
      "        return defaultMQAdminExtImpl.cleanExpiredConsumerQueue(cluster);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean cleanExpiredConsumerQueueByAddr(\n",
      "        String addr) throws RemotingConnectException, RemotingSendRequestException,\n",
      "        RemotingTimeoutException, MQClientException, InterruptedException {\n",
      "        return defaultMQAdminExtImpl.cleanExpiredConsumerQueueByAddr(addr);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean cleanUnusedTopic(String cluster) throws RemotingConnectException, RemotingSendRequestException,\n",
      "        RemotingTimeoutException, MQClientException, InterruptedException {\n",
      "        return defaultMQAdminExtImpl.cleanUnusedTopicByAddr(cluster);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean cleanUnusedTopicByAddr(String addr) throws RemotingConnectException, RemotingSendRequestException,\n",
      "        RemotingTimeoutException, MQClientException, InterruptedException {\n",
      "        return defaultMQAdminExtImpl.cleanUnusedTopicByAddr(addr);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ConsumerRunningInfo getConsumerRunningInfo(String consumerGroup, String clientId,\n",
      "        boolean jstack) throws RemotingException,\n",
      "        MQClientException, InterruptedException {\n",
      "        return defaultMQAdminExtImpl.getConsumerRunningInfo(consumerGroup, clientId, jstack);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ConsumeMessageDirectlyResult consumeMessageDirectly(String consumerGroup, String clientId, String msgId)\n",
      "        throws RemotingException, MQClientException, InterruptedException, MQBrokerException {\n",
      "        return defaultMQAdminExtImpl.consumeMessageDirectly(consumerGroup, clientId, msgId);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ConsumeMessageDirectlyResult consumeMessageDirectly(final String consumerGroup, final String clientId,\n",
      "        final String topic,\n",
      "        final String msgId) throws RemotingException, MQClientException, InterruptedException, MQBrokerException {\n",
      "        return defaultMQAdminExtImpl.consumeMessageDirectly(consumerGroup, clientId, topic, msgId);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<MessageTrack> messageTrackDetail(\n",
      "        MessageExt msg) throws RemotingException, MQClientException, InterruptedException,\n",
      "        MQBrokerException {\n",
      "        return this.defaultMQAdminExtImpl.messageTrackDetail(msg);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void cloneGroupOffset(String srcGroup, String destGroup, String topic,\n",
      "        boolean isOffline) throws RemotingException,\n",
      "        MQClientException, InterruptedException, MQBrokerException {\n",
      "        this.defaultMQAdminExtImpl.cloneGroupOffset(srcGroup, destGroup, topic, isOffline);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public BrokerStatsData viewBrokerStatsData(String brokerAddr, String statsName,\n",
      "        String statsKey) throws RemotingConnectException,\n",
      "        RemotingSendRequestException, RemotingTimeoutException, MQClientException, InterruptedException {\n",
      "        return this.defaultMQAdminExtImpl.viewBrokerStatsData(brokerAddr, statsName, statsKey);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Set<String> getClusterList(String topic) throws RemotingConnectException, RemotingSendRequestException,\n",
      "        RemotingTimeoutException, MQClientException, InterruptedException {\n",
      "        return this.defaultMQAdminExtImpl.getClusterList(topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ConsumeStatsList fetchConsumeStatsInBroker(final String brokerAddr, boolean isOrder,\n",
      "        long timeoutMillis) throws RemotingConnectException, RemotingSendRequestException,\n",
      "        RemotingTimeoutException, MQClientException, InterruptedException {\n",
      "        return this.defaultMQAdminExtImpl.fetchConsumeStatsInBroker(brokerAddr, isOrder, timeoutMillis);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Set<String> getTopicClusterList(\n",
      "        final String topic) throws InterruptedException, MQBrokerException, MQClientException, RemotingException {\n",
      "        return this.defaultMQAdminExtImpl.getTopicClusterList(topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public SubscriptionGroupWrapper getAllSubscriptionGroup(final String brokerAddr,\n",
      "        long timeoutMillis) throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException,\n",
      "        RemotingConnectException, MQBrokerException {\n",
      "        return this.defaultMQAdminExtImpl.getAllSubscriptionGroup(brokerAddr, timeoutMillis);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public TopicConfigSerializeWrapper getAllTopicGroup(final String brokerAddr,\n",
      "        long timeoutMillis) throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException,\n",
      "        RemotingConnectException, MQBrokerException {\n",
      "        return this.defaultMQAdminExtImpl.getAllTopicGroup(brokerAddr, timeoutMillis);\n",
      "    }\n",
      "\n",
      "    /* (non-Javadoc)\n",
      "     * @see org.apache.rocketmq.client.MQAdmin#queryMessageByUniqKey(java.lang.String, java.lang.String)\n",
      "     */\n",
      "    @Override\n",
      "    public MessageExt viewMessage(String topic, String msgId)\n",
      "        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        return this.defaultMQAdminExtImpl.viewMessage(topic, msgId);\n",
      "    }\n",
      "\n",
      "    public String getAdminExtGroup() {\n",
      "        return adminExtGroup;\n",
      "    }\n",
      "\n",
      "    public void setAdminExtGroup(String adminExtGroup) {\n",
      "        this.adminExtGroup = adminExtGroup;\n",
      "    }\n",
      "\n",
      "    public String getCreateTopicKey() {\n",
      "        return createTopicKey;\n",
      "    }\n",
      "\n",
      "    public void setCreateTopicKey(String createTopicKey) {\n",
      "        this.createTopicKey = createTopicKey;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void updateConsumeOffset(String brokerAddr, String consumeGroup, MessageQueue mq,\n",
      "        long offset) throws RemotingException, InterruptedException, MQBrokerException {\n",
      "        this.defaultMQAdminExtImpl.updateConsumeOffset(brokerAddr, consumeGroup, mq, offset);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void updateNameServerConfig(final Properties properties, final List<String> nameServers)\n",
      "        throws InterruptedException, RemotingConnectException,\n",
      "        UnsupportedEncodingException, MQBrokerException, RemotingTimeoutException,\n",
      "        MQClientException, RemotingSendRequestException {\n",
      "        this.defaultMQAdminExtImpl.updateNameServerConfig(properties, nameServers);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Map<String, Properties> getNameServerConfig(final List<String> nameServers)\n",
      "        throws InterruptedException, RemotingTimeoutException,\n",
      "        RemotingSendRequestException, RemotingConnectException, MQClientException,\n",
      "        UnsupportedEncodingException {\n",
      "        return this.defaultMQAdminExtImpl.getNameServerConfig(nameServers);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public QueryConsumeQueueResponseBody queryConsumeQueue(String brokerAddr, String topic, int queueId, long index,\n",
      "        int count, String consumerGroup)\n",
      "        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQClientException {\n",
      "        return this.defaultMQAdminExtImpl.queryConsumeQueue(\n",
      "            brokerAddr, topic, queueId, index, count, consumerGroup\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean resumeCheckHalfMessage(String msgId)\n",
      "            throws RemotingException, MQClientException, InterruptedException, MQBrokerException {\n",
      "        return this.defaultMQAdminExtImpl.resumeCheckHalfMessage(msgId);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean resumeCheckHalfMessage(String topic,\n",
      "            String msgId)\n",
      "            throws RemotingException, MQClientException, InterruptedException, MQBrokerException {\n",
      "        return this.defaultMQAdminExtImpl.resumeCheckHalfMessage(topic, msgId);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.admin;\n",
      "\n",
      "import java.io.UnsupportedEncodingException;\n",
      "import java.lang.reflect.Field;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.HashSet;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Properties;\n",
      "import java.util.Set;\n",
      "import java.util.TreeMap;\n",
      "import java.util.TreeSet;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import org.apache.rocketmq.client.ClientConfig;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.impl.MQClientAPIImpl;\n",
      "import org.apache.rocketmq.client.impl.MQClientManager;\n",
      "import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n",
      "import org.apache.rocketmq.common.admin.ConsumeStats;\n",
      "import org.apache.rocketmq.common.admin.OffsetWrapper;\n",
      "import org.apache.rocketmq.common.admin.TopicOffset;\n",
      "import org.apache.rocketmq.common.admin.TopicStatsTable;\n",
      "import org.apache.rocketmq.common.consumer.ConsumeFromWhere;\n",
      "import org.apache.rocketmq.common.message.MessageExt;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.common.namesrv.NamesrvUtil;\n",
      "import org.apache.rocketmq.common.protocol.body.ClusterInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.Connection;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumeStatsList;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumeStatus;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumerConnection;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.GroupList;\n",
      "import org.apache.rocketmq.common.protocol.body.KVTable;\n",
      "import org.apache.rocketmq.common.protocol.body.ProcessQueueInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.ProducerConnection;\n",
      "import org.apache.rocketmq.common.protocol.body.QueueTimeSpan;\n",
      "import org.apache.rocketmq.common.protocol.body.SubscriptionGroupWrapper;\n",
      "import org.apache.rocketmq.common.protocol.body.TopicList;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n",
      "import org.apache.rocketmq.common.protocol.route.BrokerData;\n",
      "import org.apache.rocketmq.common.protocol.route.QueueData;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingConnectException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\n",
      "import org.apache.rocketmq.tools.admin.api.MessageTrack;\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.runner.RunWith;\n",
      "import org.mockito.junit.MockitoJUnitRunner;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "import static org.mockito.ArgumentMatchers.anyBoolean;\n",
      "import static org.mockito.ArgumentMatchers.anyLong;\n",
      "import static org.mockito.ArgumentMatchers.anyString;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "@RunWith(MockitoJUnitRunner.class)\n",
      "public class DefaultMQAdminExtTest {\n",
      "    private static DefaultMQAdminExt defaultMQAdminExt;\n",
      "    private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;\n",
      "    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());\n",
      "    private static MQClientAPIImpl mQClientAPIImpl;\n",
      "    private static Properties properties = new Properties();\n",
      "    private static TopicList topicList = new TopicList();\n",
      "    private static TopicRouteData topicRouteData = new TopicRouteData();\n",
      "    private static KVTable kvTable = new KVTable();\n",
      "    private static ClusterInfo clusterInfo = new ClusterInfo();\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void init() throws Exception {\n",
      "        mQClientAPIImpl = mock(MQClientAPIImpl.class);\n",
      "        defaultMQAdminExt = new DefaultMQAdminExt();\n",
      "        defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(defaultMQAdminExt, 1000);\n",
      "\n",
      "        Field field = DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExtImpl, mqClientInstance);\n",
      "        field = MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(mqClientInstance, mQClientAPIImpl);\n",
      "        field = DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExt, defaultMQAdminExtImpl);\n",
      "\n",
      "        properties.setProperty(\"maxMessageSize\", \"5000000\");\n",
      "        properties.setProperty(\"flushDelayOffsetInterval\", \"15000\");\n",
      "        properties.setProperty(\"serverSocketRcvBufSize\", \"655350\");\n",
      "        when(mQClientAPIImpl.getBrokerConfig(anyString(), anyLong())).thenReturn(properties);\n",
      "\n",
      "        Set<String> topicSet = new HashSet<>();\n",
      "        topicSet.add(\"topic_one\");\n",
      "        topicSet.add(\"topic_two\");\n",
      "        topicList.setTopicList(topicSet);\n",
      "        when(mQClientAPIImpl.getTopicListFromNameServer(anyLong())).thenReturn(topicList);\n",
      "\n",
      "        List<BrokerData> brokerDatas = new ArrayList<>();\n",
      "        HashMap<Long, String> brokerAddrs = new HashMap<>();\n",
      "        brokerAddrs.put(1234l, \"127.0.0.1:10911\");\n",
      "        BrokerData brokerData = new BrokerData();\n",
      "        brokerData.setCluster(\"default-cluster\");\n",
      "        brokerData.setBrokerName(\"default-broker\");\n",
      "        brokerData.setBrokerAddrs(brokerAddrs);\n",
      "        brokerDatas.add(brokerData);\n",
      "        topicRouteData.setBrokerDatas(brokerDatas);\n",
      "        topicRouteData.setQueueDatas(new ArrayList<QueueData>());\n",
      "        topicRouteData.setFilterServerTable(new HashMap<String, List<String>>());\n",
      "        when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(topicRouteData);\n",
      "\n",
      "        HashMap<String, String> result = new HashMap<>();\n",
      "        result.put(\"id\", \"1234\");\n",
      "        result.put(\"brokerName\", \"default-broker\");\n",
      "        kvTable.setTable(result);\n",
      "        when(mQClientAPIImpl.getBrokerRuntimeInfo(anyString(), anyLong())).thenReturn(kvTable);\n",
      "\n",
      "        HashMap<String, BrokerData> brokerAddrTable = new HashMap<>();\n",
      "        brokerAddrTable.put(\"default-broker\", brokerData);\n",
      "        brokerAddrTable.put(\"broker-test\", new BrokerData());\n",
      "        clusterInfo.setBrokerAddrTable(brokerAddrTable);\n",
      "        clusterInfo.setClusterAddrTable(new HashMap<String, Set<String>>());\n",
      "        when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n",
      "        when(mQClientAPIImpl.cleanExpiredConsumeQueue(anyString(), anyLong())).thenReturn(true);\n",
      "\n",
      "        Set<String> clusterList = new HashSet<>();\n",
      "        clusterList.add(\"default-cluster-one\");\n",
      "        clusterList.add(\"default-cluster-two\");\n",
      "        when(mQClientAPIImpl.getClusterList(anyString(), anyLong())).thenReturn(clusterList);\n",
      "\n",
      "        GroupList groupList = new GroupList();\n",
      "        HashSet<String> groups = new HashSet<>();\n",
      "        groups.add(\"consumer-group-one\");\n",
      "        groups.add(\"consumer-group-two\");\n",
      "        groupList.setGroupList(groups);\n",
      "        when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(topicRouteData);\n",
      "        when(mQClientAPIImpl.queryTopicConsumeByWho(anyString(), anyString(), anyLong())).thenReturn(groupList);\n",
      "\n",
      "        SubscriptionGroupWrapper subscriptionGroupWrapper = new SubscriptionGroupWrapper();\n",
      "        ConcurrentHashMap<String, SubscriptionGroupConfig> subscriptions = new ConcurrentHashMap<>();\n",
      "        SubscriptionGroupConfig subscriptionGroupConfig = new SubscriptionGroupConfig();\n",
      "        subscriptionGroupConfig.setConsumeBroadcastEnable(true);\n",
      "        subscriptionGroupConfig.setBrokerId(1234);\n",
      "        subscriptionGroupConfig.setGroupName(\"Consumer-group-one\");\n",
      "        subscriptions.put(\"Consumer-group-one\", subscriptionGroupConfig);\n",
      "        subscriptionGroupWrapper.setSubscriptionGroupTable(subscriptions);\n",
      "        when(mQClientAPIImpl.getAllSubscriptionGroup(anyString(), anyLong())).thenReturn(subscriptionGroupWrapper);\n",
      "\n",
      "        String topicListConfig = \"topicListConfig\";\n",
      "        when(mQClientAPIImpl.getKVConfigValue(anyString(), anyString(), anyLong())).thenReturn(topicListConfig);\n",
      "\n",
      "        KVTable kvTable = new KVTable();\n",
      "        HashMap<String, String> kv = new HashMap<>();\n",
      "        kv.put(\"broker-name\", \"broker-one\");\n",
      "        kv.put(\"cluster-name\", \"default-cluster\");\n",
      "        kvTable.setTable(kv);\n",
      "        when(mQClientAPIImpl.getKVListByNamespace(anyString(), anyLong())).thenReturn(kvTable);\n",
      "\n",
      "        ConsumeStats consumeStats = new ConsumeStats();\n",
      "        consumeStats.setConsumeTps(1234);\n",
      "        MessageQueue messageQueue = new MessageQueue();\n",
      "        OffsetWrapper offsetWrapper = new OffsetWrapper();\n",
      "        HashMap<MessageQueue, OffsetWrapper> stats = new HashMap<>();\n",
      "        stats.put(messageQueue, offsetWrapper);\n",
      "        consumeStats.setOffsetTable(stats);\n",
      "        when(mQClientAPIImpl.getConsumeStats(anyString(), anyString(), anyString(), anyLong())).thenReturn(consumeStats);\n",
      "\n",
      "        ConsumerConnection consumerConnection = new ConsumerConnection();\n",
      "        consumerConnection.setConsumeType(ConsumeType.CONSUME_PASSIVELY);\n",
      "        consumerConnection.setMessageModel(MessageModel.CLUSTERING);\n",
      "        HashSet<Connection> connections = new HashSet<>();\n",
      "        connections.add(new Connection());\n",
      "        consumerConnection.setConnectionSet(connections);\n",
      "        consumerConnection.setSubscriptionTable(new ConcurrentHashMap<String, SubscriptionData>());\n",
      "        consumerConnection.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n",
      "        when(mQClientAPIImpl.getConsumerConnectionList(anyString(), anyString(), anyLong())).thenReturn(consumerConnection);\n",
      "\n",
      "        ProducerConnection producerConnection = new ProducerConnection();\n",
      "        Connection connection = new Connection();\n",
      "        connection.setClientAddr(\"127.0.0.1:9898\");\n",
      "        connection.setClientId(\"PID_12345\");\n",
      "        HashSet<Connection> connectionSet = new HashSet<Connection>();\n",
      "        connectionSet.add(connection);\n",
      "        producerConnection.setConnectionSet(connectionSet);\n",
      "        when(mQClientAPIImpl.getProducerConnectionList(anyString(), anyString(), anyLong())).thenReturn(producerConnection);\n",
      "\n",
      "        when(mQClientAPIImpl.wipeWritePermOfBroker(anyString(), anyString(), anyLong())).thenReturn(6);\n",
      "\n",
      "        TopicStatsTable topicStatsTable = new TopicStatsTable();\n",
      "        topicStatsTable.setOffsetTable(new HashMap<MessageQueue, TopicOffset>());\n",
      "\n",
      "        Map<String, Map<MessageQueue, Long>> consumerStatus = new HashMap<>();\n",
      "        when(mQClientAPIImpl.invokeBrokerToGetConsumerStatus(anyString(), anyString(), anyString(), anyString(), anyLong())).thenReturn(consumerStatus);\n",
      "\n",
      "        List<QueueTimeSpan> queueTimeSpanList = new ArrayList<>();\n",
      "        when(mQClientAPIImpl.queryConsumeTimeSpan(anyString(), anyString(), anyString(), anyLong())).thenReturn(queueTimeSpanList);\n",
      "\n",
      "        ConsumerRunningInfo consumerRunningInfo = new ConsumerRunningInfo();\n",
      "        consumerRunningInfo.setJstack(\"test\");\n",
      "        consumerRunningInfo.setMqTable(new TreeMap<MessageQueue, ProcessQueueInfo>());\n",
      "        consumerRunningInfo.setStatusTable(new TreeMap<String, ConsumeStatus>());\n",
      "        consumerRunningInfo.setSubscriptionSet(new TreeSet<SubscriptionData>());\n",
      "        when(mQClientAPIImpl.getConsumerRunningInfo(anyString(), anyString(), anyString(), anyBoolean(), anyLong())).thenReturn(consumerRunningInfo);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void terminate() throws Exception {\n",
      "        if (defaultMQAdminExtImpl != null)\n",
      "            defaultMQAdminExt.shutdown();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testUpdateBrokerConfig() throws InterruptedException, RemotingConnectException, UnsupportedEncodingException, RemotingTimeoutException, MQBrokerException, RemotingSendRequestException {\n",
      "        Properties result = defaultMQAdminExt.getBrokerConfig(\"127.0.0.1:10911\");\n",
      "        assertThat(result.getProperty(\"maxMessageSize\")).isEqualTo(\"5000000\");\n",
      "        assertThat(result.getProperty(\"flushDelayOffsetInterval\")).isEqualTo(\"15000\");\n",
      "        assertThat(result.getProperty(\"serverSocketRcvBufSize\")).isEqualTo(\"655350\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFetchAllTopicList() throws RemotingException, MQClientException, InterruptedException {\n",
      "        TopicList topicList = defaultMQAdminExt.fetchAllTopicList();\n",
      "        assertThat(topicList.getTopicList().size()).isEqualTo(2);\n",
      "        assertThat(topicList.getTopicList()).contains(\"topic_one\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFetchBrokerRuntimeStats() throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {\n",
      "        KVTable brokerStats = defaultMQAdminExt.fetchBrokerRuntimeStats(\"127.0.0.1:10911\");\n",
      "        assertThat(brokerStats.getTable().get(\"id\")).isEqualTo(\"1234\");\n",
      "        assertThat(brokerStats.getTable().get(\"brokerName\")).isEqualTo(\"default-broker\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExamineBrokerClusterInfo() throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {\n",
      "        ClusterInfo clusterInfo = defaultMQAdminExt.examineBrokerClusterInfo();\n",
      "        HashMap<String, BrokerData> brokerList = clusterInfo.getBrokerAddrTable();\n",
      "        assertThat(brokerList.get(\"default-broker\").getBrokerName()).isEqualTo(\"default-broker\");\n",
      "        assertThat(brokerList.containsKey(\"broker-test\")).isTrue();\n",
      "\n",
      "        HashMap<String, Set<String>> clusterMap = new HashMap<>();\n",
      "        Set<String> brokers = new HashSet<>();\n",
      "        brokers.add(\"default-broker\");\n",
      "        brokers.add(\"broker-test\");\n",
      "        clusterMap.put(\"default-cluster\", brokers);\n",
      "        ClusterInfo cInfo = mock(ClusterInfo.class);\n",
      "        when(cInfo.getClusterAddrTable()).thenReturn(clusterMap);\n",
      "        HashMap<String, Set<String>> clusterAddress = cInfo.getClusterAddrTable();\n",
      "        assertThat(clusterAddress.containsKey(\"default-cluster\")).isTrue();\n",
      "        assertThat(clusterAddress.get(\"default-cluster\").size()).isEqualTo(2);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExamineConsumeStats() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n",
      "        ConsumeStats consumeStats = defaultMQAdminExt.examineConsumeStats(\"default-consumer-group\", \"unit-test\");\n",
      "        assertThat(consumeStats.getConsumeTps()).isEqualTo(1234);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExamineConsumerConnectionInfo() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n",
      "        ConsumerConnection consumerConnection = defaultMQAdminExt.examineConsumerConnectionInfo(\"default-consumer-group\");\n",
      "        assertThat(consumerConnection.getConsumeType()).isEqualTo(ConsumeType.CONSUME_PASSIVELY);\n",
      "        assertThat(consumerConnection.getMessageModel()).isEqualTo(MessageModel.CLUSTERING);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExamineProducerConnectionInfo() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n",
      "        ProducerConnection producerConnection = defaultMQAdminExt.examineProducerConnectionInfo(\"default-producer-group\", \"unit-test\");\n",
      "        assertThat(producerConnection.getConnectionSet().size()).isEqualTo(1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWipeWritePermOfBroker() throws InterruptedException, RemotingCommandException, RemotingSendRequestException, RemotingTimeoutException, MQClientException, RemotingConnectException {\n",
      "        int result = defaultMQAdminExt.wipeWritePermOfBroker(\"127.0.0.1:9876\", \"default-broker\");\n",
      "        assertThat(result).isEqualTo(6);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExamineTopicRouteInfo() throws RemotingException, MQClientException, InterruptedException {\n",
      "        TopicRouteData topicRouteData = defaultMQAdminExt.examineTopicRouteInfo(\"UnitTest\");\n",
      "        assertThat(topicRouteData.getBrokerDatas().get(0).getBrokerName()).isEqualTo(\"default-broker\");\n",
      "        assertThat(topicRouteData.getBrokerDatas().get(0).getCluster()).isEqualTo(\"default-cluster\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetNameServerAddressList() {\n",
      "        List<String> result = new ArrayList<>();\n",
      "        result.add(\"default-name-one\");\n",
      "        result.add(\"default-name-two\");\n",
      "        when(mqClientInstance.getMQClientAPIImpl().getNameServerAddressList()).thenReturn(result);\n",
      "        List<String> nameList = defaultMQAdminExt.getNameServerAddressList();\n",
      "        assertThat(nameList.get(0)).isEqualTo(\"default-name-one\");\n",
      "        assertThat(nameList.get(1)).isEqualTo(\"default-name-two\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testPutKVConfig() throws RemotingException, MQClientException, InterruptedException {\n",
      "        String topicConfig = defaultMQAdminExt.getKVConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, \"UnitTest\");\n",
      "        assertThat(topicConfig).isEqualTo(\"topicListConfig\");\n",
      "        KVTable kvs = defaultMQAdminExt.getKVListByNamespace(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG);\n",
      "        assertThat(kvs.getTable().get(\"broker-name\")).isEqualTo(\"broker-one\");\n",
      "        assertThat(kvs.getTable().get(\"cluster-name\")).isEqualTo(\"default-cluster\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testQueryTopicConsumeByWho() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n",
      "        GroupList groupList = defaultMQAdminExt.queryTopicConsumeByWho(\"UnitTest\");\n",
      "        assertThat(groupList.getGroupList().contains(\"consumer-group-two\")).isTrue();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testQueryConsumeTimeSpan() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n",
      "        List<QueueTimeSpan> result = defaultMQAdminExt.queryConsumeTimeSpan(\"unit-test\", \"default-broker-group\");\n",
      "        assertThat(result.size()).isEqualTo(0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCleanExpiredConsumerQueue() throws InterruptedException, RemotingTimeoutException, MQClientException, RemotingSendRequestException, RemotingConnectException {\n",
      "        boolean result = defaultMQAdminExt.cleanExpiredConsumerQueue(\"default-cluster\");\n",
      "        assertThat(result).isFalse();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCleanExpiredConsumerQueueByAddr() throws InterruptedException, RemotingTimeoutException, MQClientException, RemotingSendRequestException, RemotingConnectException {\n",
      "        boolean clean = defaultMQAdminExt.cleanExpiredConsumerQueueByAddr(\"127.0.0.1:10911\");\n",
      "        assertThat(clean).isTrue();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCleanUnusedTopic() throws InterruptedException, RemotingTimeoutException, MQClientException, RemotingSendRequestException, RemotingConnectException {\n",
      "        boolean result = defaultMQAdminExt.cleanUnusedTopic(\"default-cluster\");\n",
      "        assertThat(result).isFalse();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetConsumerRunningInfo() throws RemotingException, MQClientException, InterruptedException {\n",
      "        ConsumerRunningInfo consumerRunningInfo = defaultMQAdminExt.getConsumerRunningInfo(\"consumer-group\", \"cid_123\", false);\n",
      "        assertThat(consumerRunningInfo.getJstack()).isEqualTo(\"test\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMessageTrackDetail() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n",
      "        MessageExt messageExt = new MessageExt();\n",
      "        messageExt.setMsgId(\"msgId\");\n",
      "        messageExt.setTopic(\"unit-test\");\n",
      "        List<MessageTrack> messageTrackList = defaultMQAdminExt.messageTrackDetail(messageExt);\n",
      "        assertThat(messageTrackList.size()).isEqualTo(2);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetConsumeStatus() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n",
      "        Map<String, Map<MessageQueue, Long>> result = defaultMQAdminExt.getConsumeStatus(\"unit-test\", \"default-broker-group\", \"127.0.0.1:10911\");\n",
      "        assertThat(result.size()).isEqualTo(0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetTopicClusterList() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n",
      "        Set<String> result = defaultMQAdminExt.getTopicClusterList(\"unit-test\");\n",
      "        assertThat(result.size()).isEqualTo(0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetClusterList() throws InterruptedException, RemotingTimeoutException, MQClientException, RemotingSendRequestException, RemotingConnectException {\n",
      "        Set<String> clusterlist = defaultMQAdminExt.getClusterList(\"UnitTest\");\n",
      "        assertThat(clusterlist.contains(\"default-cluster-one\")).isTrue();\n",
      "        assertThat(clusterlist.contains(\"default-cluster-two\")).isTrue();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFetchConsumeStatsInBroker() throws InterruptedException, RemotingTimeoutException, MQClientException, RemotingSendRequestException, RemotingConnectException {\n",
      "        ConsumeStatsList result = new ConsumeStatsList();\n",
      "        result.setBrokerAddr(\"127.0.0.1:10911\");\n",
      "        when(mqClientInstance.getMQClientAPIImpl().fetchConsumeStatsInBroker(\"127.0.0.1:10911\", false, 10000)).thenReturn(result);\n",
      "        ConsumeStatsList consumeStatsList = defaultMQAdminExt.fetchConsumeStatsInBroker(\"127.0.0.1:10911\", false, 10000);\n",
      "        assertThat(consumeStatsList.getBrokerAddr()).isEqualTo(\"127.0.0.1:10911\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetAllSubscriptionGroup() throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {\n",
      "        SubscriptionGroupWrapper subscriptionGroupWrapper = defaultMQAdminExt.getAllSubscriptionGroup(\"127.0.0.1:10911\", 10000);\n",
      "        assertThat(subscriptionGroupWrapper.getSubscriptionGroupTable().get(\"Consumer-group-one\").getBrokerId()).isEqualTo(1234);\n",
      "        assertThat(subscriptionGroupWrapper.getSubscriptionGroupTable().get(\"Consumer-group-one\").getGroupName()).isEqualTo(\"Consumer-group-one\");\n",
      "        assertThat(subscriptionGroupWrapper.getSubscriptionGroupTable().get(\"Consumer-group-one\").isConsumeBroadcastEnable()).isTrue();\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "DefaultMQAdminExt::::createTopic(java.lang.String,java.lang.String,int)": [
        94,
        97
      ],
      "DefaultMQAdminExt::::createTopic(java.lang.String,java.lang.String,int,int)": [
        99,
        102
      ],
      "DefaultMQAdminExt::::viewMessage(java.lang.String)": [
        124,
        128
      ],
      "DefaultMQAdminExt::::queryMessage(java.lang.String,java.lang.String,int,long,long)": [
        130,
        135
      ],
      "DefaultMQAdminExt::::start()": [
        137,
        140
      ],
      "DefaultMQAdminExt::::shutdown()": [
        142,
        145
      ],
      "DefaultMQAdminExt::::updateBrokerConfig(java.lang.String,java.util.Properties)": [
        147,
        152
      ],
      "DefaultMQAdminExt::::getBrokerConfig(java.lang.String)": [
        154,
        158
      ],
      "DefaultMQAdminExt::::deletePlainAccessConfig(java.lang.String,java.lang.String)": [
        172,
        175
      ],
      "DefaultMQAdminExt::::updateGlobalWhiteAddrConfig(java.lang.String,java.lang.String)": [
        177,
        180
      ],
      "DefaultMQAdminExt::::examineBrokerClusterAclVersionInfo(java.lang.String)": [
        182,
        185
      ],
      "DefaultMQAdminExt::::examineBrokerClusterAclConfig(java.lang.String)": [
        187,
        190
      ],
      "DefaultMQAdminExt::::examineSubscriptionGroupConfig(java.lang.String,java.lang.String)": [
        199,
        202
      ],
      "DefaultMQAdminExt::::examineTopicConfig(java.lang.String,java.lang.String)": [
        204,
        207
      ],
      "DefaultMQAdminExt::::examineTopicStats(java.lang.String)": [
        209,
        214
      ],
      "DefaultMQAdminExt::::fetchAllTopicList()": [
        216,
        219
      ],
      "DefaultMQAdminExt::::fetchTopicsByCLuster(java.lang.String)": [
        221,
        225
      ],
      "DefaultMQAdminExt::::fetchBrokerRuntimeStats(java.lang.String)": [
        227,
        232
      ],
      "DefaultMQAdminExt::::examineConsumeStats(java.lang.String)": [
        234,
        239
      ],
      "DefaultMQAdminExt::::examineConsumeStats(java.lang.String,java.lang.String)": [
        241,
        246
      ],
      "DefaultMQAdminExt::::examineBrokerClusterInfo()": [
        248,
        252
      ],
      "DefaultMQAdminExt::::examineTopicRouteInfo(java.lang.String)": [
        254,
        258
      ],
      "DefaultMQAdminExt::::examineConsumerConnectionInfo(java.lang.String)": [
        260,
        265
      ],
      "DefaultMQAdminExt::::examineProducerConnectionInfo(java.lang.String,java.lang.String)": [
        267,
        272
      ],
      "DefaultMQAdminExt::::getNameServerAddressList()": [
        274,
        277
      ],
      "DefaultMQAdminExt::::wipeWritePermOfBroker(java.lang.String,java.lang.String)": [
        279,
        283
      ],
      "DefaultMQAdminExt::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)": [
        285,
        288
      ],
      "DefaultMQAdminExt::::getKVConfig(java.lang.String,java.lang.String)": [
        290,
        294
      ],
      "DefaultMQAdminExt::::getKVListByNamespace(java.lang.String)": [
        296,
        300
      ],
      "DefaultMQAdminExt::::deleteTopicInBroker(java.util.Set<java.lang.String>,java.lang.String)": [
        302,
        307
      ],
      "DefaultMQAdminExt::::deleteTopicInNameServer(java.util.Set<java.lang.String>,java.lang.String)": [
        309,
        314
      ],
      "DefaultMQAdminExt::::deleteSubscriptionGroup(java.lang.String,java.lang.String)": [
        316,
        321
      ],
      "DefaultMQAdminExt::::createAndUpdateKvConfig(java.lang.String,java.lang.String,java.lang.String)": [
        323,
        328
      ],
      "DefaultMQAdminExt::::deleteKvConfig(java.lang.String,java.lang.String)": [
        330,
        335
      ],
      "DefaultMQAdminExt::::resetOffsetByTimestampOld(java.lang.String,java.lang.String,long,boolean)": [
        337,
        342
      ],
      "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean)": [
        344,
        348
      ],
      "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean,boolean)": [
        350,
        354
      ],
      "DefaultMQAdminExt::::resetOffsetNew(java.lang.String,java.lang.String,long)": [
        356,
        361
      ],
      "DefaultMQAdminExt::::getConsumeStatus(java.lang.String,java.lang.String,java.lang.String)": [
        363,
        368
      ],
      "DefaultMQAdminExt::::createOrUpdateOrderConf(java.lang.String,java.lang.String,boolean)": [
        370,
        375
      ],
      "DefaultMQAdminExt::::queryTopicConsumeByWho(java.lang.String)": [
        377,
        382
      ],
      "DefaultMQAdminExt::::queryConsumeTimeSpan(java.lang.String,java.lang.String)": [
        384,
        389
      ],
      "DefaultMQAdminExt::::cleanExpiredConsumerQueue(java.lang.String)": [
        391,
        396
      ],
      "DefaultMQAdminExt::::cleanExpiredConsumerQueueByAddr(java.lang.String)": [
        398,
        403
      ],
      "DefaultMQAdminExt::::cleanUnusedTopic(java.lang.String)": [
        405,
        409
      ],
      "DefaultMQAdminExt::::cleanUnusedTopicByAddr(java.lang.String)": [
        411,
        415
      ],
      "DefaultMQAdminExt::::getConsumerRunningInfo(java.lang.String,java.lang.String,boolean)": [
        417,
        422
      ],
      "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String)": [
        424,
        428
      ],
      "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": [
        430,
        435
      ],
      "DefaultMQAdminExt::::cloneGroupOffset(java.lang.String,java.lang.String,java.lang.String,boolean)": [
        444,
        449
      ],
      "DefaultMQAdminExt::::viewBrokerStatsData(java.lang.String,java.lang.String,java.lang.String)": [
        451,
        456
      ],
      "DefaultMQAdminExt::::getClusterList(java.lang.String)": [
        458,
        462
      ],
      "DefaultMQAdminExt::::fetchConsumeStatsInBroker(java.lang.String,boolean,long)": [
        464,
        469
      ],
      "DefaultMQAdminExt::::getTopicClusterList(java.lang.String)": [
        471,
        475
      ],
      "DefaultMQAdminExt::::getAllSubscriptionGroup(java.lang.String,long)": [
        477,
        482
      ],
      "DefaultMQAdminExt::::getAllTopicGroup(java.lang.String,long)": [
        484,
        489
      ],
      "DefaultMQAdminExt::::viewMessage(java.lang.String,java.lang.String)": [
        494,
        498
      ],
      "DefaultMQAdminExt::::getAdminExtGroup()": [
        500,
        502
      ],
      "DefaultMQAdminExt::::setAdminExtGroup(java.lang.String)": [
        504,
        506
      ],
      "DefaultMQAdminExt::::getCreateTopicKey()": [
        508,
        510
      ],
      "DefaultMQAdminExt::::setCreateTopicKey(java.lang.String)": [
        512,
        514
      ],
      "DefaultMQAdminExt::::updateNameServerConfig(java.util.Properties,java.util.List<java.lang.String>)": [
        522,
        528
      ],
      "DefaultMQAdminExt::::getNameServerConfig(java.util.List<java.lang.String>)": [
        530,
        536
      ],
      "DefaultMQAdminExt::::queryConsumeQueue(java.lang.String,java.lang.String,int,long,int,java.lang.String)": [
        538,
        545
      ],
      "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String)": [
        547,
        551
      ],
      "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String,java.lang.String)": [
        553,
        558
      ]
    },
    "test_method_lines_dic": {
      "DefaultMQAdminExtTest::::init()": [
        96,
        228
      ],
      "DefaultMQAdminExtTest::::terminate()": [
        230,
        234
      ],
      "DefaultMQAdminExtTest::::testUpdateBrokerConfig()": [
        236,
        242
      ],
      "DefaultMQAdminExtTest::::testFetchAllTopicList()": [
        244,
        249
      ],
      "DefaultMQAdminExtTest::::testFetchBrokerRuntimeStats()": [
        251,
        256
      ],
      "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()": [
        258,
        275
      ],
      "DefaultMQAdminExtTest::::testExamineConsumeStats()": [
        277,
        281
      ],
      "DefaultMQAdminExtTest::::testExamineConsumerConnectionInfo()": [
        283,
        288
      ],
      "DefaultMQAdminExtTest::::testExamineProducerConnectionInfo()": [
        290,
        294
      ],
      "DefaultMQAdminExtTest::::testWipeWritePermOfBroker()": [
        296,
        300
      ],
      "DefaultMQAdminExtTest::::testExamineTopicRouteInfo()": [
        302,
        307
      ],
      "DefaultMQAdminExtTest::::testGetNameServerAddressList()": [
        309,
        318
      ],
      "DefaultMQAdminExtTest::::testPutKVConfig()": [
        320,
        327
      ],
      "DefaultMQAdminExtTest::::testQueryTopicConsumeByWho()": [
        329,
        333
      ],
      "DefaultMQAdminExtTest::::testQueryConsumeTimeSpan()": [
        335,
        339
      ],
      "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueue()": [
        341,
        345
      ],
      "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueueByAddr()": [
        347,
        351
      ],
      "DefaultMQAdminExtTest::::testCleanUnusedTopic()": [
        353,
        357
      ],
      "DefaultMQAdminExtTest::::testGetConsumerRunningInfo()": [
        359,
        363
      ],
      "DefaultMQAdminExtTest::::testMessageTrackDetail()": [
        365,
        372
      ],
      "DefaultMQAdminExtTest::::testGetConsumeStatus()": [
        374,
        378
      ],
      "DefaultMQAdminExtTest::::testGetTopicClusterList()": [
        380,
        384
      ],
      "DefaultMQAdminExtTest::::testGetClusterList()": [
        386,
        391
      ],
      "DefaultMQAdminExtTest::::testFetchConsumeStatsInBroker()": [
        393,
        400
      ],
      "DefaultMQAdminExtTest::::testGetAllSubscriptionGroup()": [
        402,
        408
      ]
    },
    "reverse_method_lines_dic": {
      "94": "DefaultMQAdminExt::::createTopic(java.lang.String,java.lang.String,int)",
      "95": "DefaultMQAdminExt::::createTopic(java.lang.String,java.lang.String,int)",
      "96": "DefaultMQAdminExt::::createTopic(java.lang.String,java.lang.String,int)",
      "97": "DefaultMQAdminExt::::createTopic(java.lang.String,java.lang.String,int)",
      "99": "DefaultMQAdminExt::::createTopic(java.lang.String,java.lang.String,int,int)",
      "100": "DefaultMQAdminExt::::createTopic(java.lang.String,java.lang.String,int,int)",
      "101": "DefaultMQAdminExt::::createTopic(java.lang.String,java.lang.String,int,int)",
      "102": "DefaultMQAdminExt::::createTopic(java.lang.String,java.lang.String,int,int)",
      "124": "DefaultMQAdminExt::::viewMessage(java.lang.String)",
      "125": "DefaultMQAdminExt::::viewMessage(java.lang.String)",
      "126": "DefaultMQAdminExt::::viewMessage(java.lang.String)",
      "127": "DefaultMQAdminExt::::viewMessage(java.lang.String)",
      "128": "DefaultMQAdminExt::::viewMessage(java.lang.String)",
      "130": "DefaultMQAdminExt::::queryMessage(java.lang.String,java.lang.String,int,long,long)",
      "131": "DefaultMQAdminExt::::queryMessage(java.lang.String,java.lang.String,int,long,long)",
      "132": "DefaultMQAdminExt::::queryMessage(java.lang.String,java.lang.String,int,long,long)",
      "133": "DefaultMQAdminExt::::queryMessage(java.lang.String,java.lang.String,int,long,long)",
      "134": "DefaultMQAdminExt::::queryMessage(java.lang.String,java.lang.String,int,long,long)",
      "135": "DefaultMQAdminExt::::queryMessage(java.lang.String,java.lang.String,int,long,long)",
      "137": "DefaultMQAdminExt::::start()",
      "138": "DefaultMQAdminExt::::start()",
      "139": "DefaultMQAdminExt::::start()",
      "140": "DefaultMQAdminExt::::start()",
      "142": "DefaultMQAdminExt::::shutdown()",
      "143": "DefaultMQAdminExt::::shutdown()",
      "144": "DefaultMQAdminExt::::shutdown()",
      "145": "DefaultMQAdminExt::::shutdown()",
      "147": "DefaultMQAdminExt::::updateBrokerConfig(java.lang.String,java.util.Properties)",
      "148": "DefaultMQAdminExt::::updateBrokerConfig(java.lang.String,java.util.Properties)",
      "149": "DefaultMQAdminExt::::updateBrokerConfig(java.lang.String,java.util.Properties)",
      "150": "DefaultMQAdminExt::::updateBrokerConfig(java.lang.String,java.util.Properties)",
      "151": "DefaultMQAdminExt::::updateBrokerConfig(java.lang.String,java.util.Properties)",
      "152": "DefaultMQAdminExt::::updateBrokerConfig(java.lang.String,java.util.Properties)",
      "154": "DefaultMQAdminExt::::getBrokerConfig(java.lang.String)",
      "155": "DefaultMQAdminExt::::getBrokerConfig(java.lang.String)",
      "156": "DefaultMQAdminExt::::getBrokerConfig(java.lang.String)",
      "157": "DefaultMQAdminExt::::getBrokerConfig(java.lang.String)",
      "158": "DefaultMQAdminExt::::getBrokerConfig(java.lang.String)",
      "172": "DefaultMQAdminExt::::deletePlainAccessConfig(java.lang.String,java.lang.String)",
      "173": "DefaultMQAdminExt::::deletePlainAccessConfig(java.lang.String,java.lang.String)",
      "174": "DefaultMQAdminExt::::deletePlainAccessConfig(java.lang.String,java.lang.String)",
      "175": "DefaultMQAdminExt::::deletePlainAccessConfig(java.lang.String,java.lang.String)",
      "177": "DefaultMQAdminExt::::updateGlobalWhiteAddrConfig(java.lang.String,java.lang.String)",
      "178": "DefaultMQAdminExt::::updateGlobalWhiteAddrConfig(java.lang.String,java.lang.String)",
      "179": "DefaultMQAdminExt::::updateGlobalWhiteAddrConfig(java.lang.String,java.lang.String)",
      "180": "DefaultMQAdminExt::::updateGlobalWhiteAddrConfig(java.lang.String,java.lang.String)",
      "182": "DefaultMQAdminExt::::examineBrokerClusterAclVersionInfo(java.lang.String)",
      "183": "DefaultMQAdminExt::::examineBrokerClusterAclVersionInfo(java.lang.String)",
      "184": "DefaultMQAdminExt::::examineBrokerClusterAclVersionInfo(java.lang.String)",
      "185": "DefaultMQAdminExt::::examineBrokerClusterAclVersionInfo(java.lang.String)",
      "187": "DefaultMQAdminExt::::examineBrokerClusterAclConfig(java.lang.String)",
      "188": "DefaultMQAdminExt::::examineBrokerClusterAclConfig(java.lang.String)",
      "189": "DefaultMQAdminExt::::examineBrokerClusterAclConfig(java.lang.String)",
      "190": "DefaultMQAdminExt::::examineBrokerClusterAclConfig(java.lang.String)",
      "199": "DefaultMQAdminExt::::examineSubscriptionGroupConfig(java.lang.String,java.lang.String)",
      "200": "DefaultMQAdminExt::::examineSubscriptionGroupConfig(java.lang.String,java.lang.String)",
      "201": "DefaultMQAdminExt::::examineSubscriptionGroupConfig(java.lang.String,java.lang.String)",
      "202": "DefaultMQAdminExt::::examineSubscriptionGroupConfig(java.lang.String,java.lang.String)",
      "204": "DefaultMQAdminExt::::examineTopicConfig(java.lang.String,java.lang.String)",
      "205": "DefaultMQAdminExt::::examineTopicConfig(java.lang.String,java.lang.String)",
      "206": "DefaultMQAdminExt::::examineTopicConfig(java.lang.String,java.lang.String)",
      "207": "DefaultMQAdminExt::::examineTopicConfig(java.lang.String,java.lang.String)",
      "209": "DefaultMQAdminExt::::examineTopicStats(java.lang.String)",
      "210": "DefaultMQAdminExt::::examineTopicStats(java.lang.String)",
      "211": "DefaultMQAdminExt::::examineTopicStats(java.lang.String)",
      "212": "DefaultMQAdminExt::::examineTopicStats(java.lang.String)",
      "213": "DefaultMQAdminExt::::examineTopicStats(java.lang.String)",
      "214": "DefaultMQAdminExt::::examineTopicStats(java.lang.String)",
      "216": "DefaultMQAdminExt::::fetchAllTopicList()",
      "217": "DefaultMQAdminExt::::fetchAllTopicList()",
      "218": "DefaultMQAdminExt::::fetchAllTopicList()",
      "219": "DefaultMQAdminExt::::fetchAllTopicList()",
      "221": "DefaultMQAdminExt::::fetchTopicsByCLuster(java.lang.String)",
      "222": "DefaultMQAdminExt::::fetchTopicsByCLuster(java.lang.String)",
      "223": "DefaultMQAdminExt::::fetchTopicsByCLuster(java.lang.String)",
      "224": "DefaultMQAdminExt::::fetchTopicsByCLuster(java.lang.String)",
      "225": "DefaultMQAdminExt::::fetchTopicsByCLuster(java.lang.String)",
      "227": "DefaultMQAdminExt::::fetchBrokerRuntimeStats(java.lang.String)",
      "228": "DefaultMQAdminExt::::fetchBrokerRuntimeStats(java.lang.String)",
      "229": "DefaultMQAdminExt::::fetchBrokerRuntimeStats(java.lang.String)",
      "230": "DefaultMQAdminExt::::fetchBrokerRuntimeStats(java.lang.String)",
      "231": "DefaultMQAdminExt::::fetchBrokerRuntimeStats(java.lang.String)",
      "232": "DefaultMQAdminExt::::fetchBrokerRuntimeStats(java.lang.String)",
      "234": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String)",
      "235": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String)",
      "236": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String)",
      "237": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String)",
      "238": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String)",
      "239": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String)",
      "241": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String,java.lang.String)",
      "242": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String,java.lang.String)",
      "243": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String,java.lang.String)",
      "244": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String,java.lang.String)",
      "245": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String,java.lang.String)",
      "246": "DefaultMQAdminExt::::examineConsumeStats(java.lang.String,java.lang.String)",
      "248": "DefaultMQAdminExt::::examineBrokerClusterInfo()",
      "249": "DefaultMQAdminExt::::examineBrokerClusterInfo()",
      "250": "DefaultMQAdminExt::::examineBrokerClusterInfo()",
      "251": "DefaultMQAdminExt::::examineBrokerClusterInfo()",
      "252": "DefaultMQAdminExt::::examineBrokerClusterInfo()",
      "254": "DefaultMQAdminExt::::examineTopicRouteInfo(java.lang.String)",
      "255": "DefaultMQAdminExt::::examineTopicRouteInfo(java.lang.String)",
      "256": "DefaultMQAdminExt::::examineTopicRouteInfo(java.lang.String)",
      "257": "DefaultMQAdminExt::::examineTopicRouteInfo(java.lang.String)",
      "258": "DefaultMQAdminExt::::examineTopicRouteInfo(java.lang.String)",
      "260": "DefaultMQAdminExt::::examineConsumerConnectionInfo(java.lang.String)",
      "261": "DefaultMQAdminExt::::examineConsumerConnectionInfo(java.lang.String)",
      "262": "DefaultMQAdminExt::::examineConsumerConnectionInfo(java.lang.String)",
      "263": "DefaultMQAdminExt::::examineConsumerConnectionInfo(java.lang.String)",
      "264": "DefaultMQAdminExt::::examineConsumerConnectionInfo(java.lang.String)",
      "265": "DefaultMQAdminExt::::examineConsumerConnectionInfo(java.lang.String)",
      "267": "DefaultMQAdminExt::::examineProducerConnectionInfo(java.lang.String,java.lang.String)",
      "268": "DefaultMQAdminExt::::examineProducerConnectionInfo(java.lang.String,java.lang.String)",
      "269": "DefaultMQAdminExt::::examineProducerConnectionInfo(java.lang.String,java.lang.String)",
      "270": "DefaultMQAdminExt::::examineProducerConnectionInfo(java.lang.String,java.lang.String)",
      "271": "DefaultMQAdminExt::::examineProducerConnectionInfo(java.lang.String,java.lang.String)",
      "272": "DefaultMQAdminExt::::examineProducerConnectionInfo(java.lang.String,java.lang.String)",
      "274": "DefaultMQAdminExt::::getNameServerAddressList()",
      "275": "DefaultMQAdminExt::::getNameServerAddressList()",
      "276": "DefaultMQAdminExt::::getNameServerAddressList()",
      "277": "DefaultMQAdminExt::::getNameServerAddressList()",
      "279": "DefaultMQAdminExt::::wipeWritePermOfBroker(java.lang.String,java.lang.String)",
      "280": "DefaultMQAdminExt::::wipeWritePermOfBroker(java.lang.String,java.lang.String)",
      "281": "DefaultMQAdminExt::::wipeWritePermOfBroker(java.lang.String,java.lang.String)",
      "282": "DefaultMQAdminExt::::wipeWritePermOfBroker(java.lang.String,java.lang.String)",
      "283": "DefaultMQAdminExt::::wipeWritePermOfBroker(java.lang.String,java.lang.String)",
      "285": "DefaultMQAdminExt::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "286": "DefaultMQAdminExt::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "287": "DefaultMQAdminExt::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "288": "DefaultMQAdminExt::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "290": "DefaultMQAdminExt::::getKVConfig(java.lang.String,java.lang.String)",
      "291": "DefaultMQAdminExt::::getKVConfig(java.lang.String,java.lang.String)",
      "292": "DefaultMQAdminExt::::getKVConfig(java.lang.String,java.lang.String)",
      "293": "DefaultMQAdminExt::::getKVConfig(java.lang.String,java.lang.String)",
      "294": "DefaultMQAdminExt::::getKVConfig(java.lang.String,java.lang.String)",
      "296": "DefaultMQAdminExt::::getKVListByNamespace(java.lang.String)",
      "297": "DefaultMQAdminExt::::getKVListByNamespace(java.lang.String)",
      "298": "DefaultMQAdminExt::::getKVListByNamespace(java.lang.String)",
      "299": "DefaultMQAdminExt::::getKVListByNamespace(java.lang.String)",
      "300": "DefaultMQAdminExt::::getKVListByNamespace(java.lang.String)",
      "302": "DefaultMQAdminExt::::deleteTopicInBroker(java.util.Set<java.lang.String>,java.lang.String)",
      "303": "DefaultMQAdminExt::::deleteTopicInBroker(java.util.Set<java.lang.String>,java.lang.String)",
      "304": "DefaultMQAdminExt::::deleteTopicInBroker(java.util.Set<java.lang.String>,java.lang.String)",
      "305": "DefaultMQAdminExt::::deleteTopicInBroker(java.util.Set<java.lang.String>,java.lang.String)",
      "306": "DefaultMQAdminExt::::deleteTopicInBroker(java.util.Set<java.lang.String>,java.lang.String)",
      "307": "DefaultMQAdminExt::::deleteTopicInBroker(java.util.Set<java.lang.String>,java.lang.String)",
      "309": "DefaultMQAdminExt::::deleteTopicInNameServer(java.util.Set<java.lang.String>,java.lang.String)",
      "310": "DefaultMQAdminExt::::deleteTopicInNameServer(java.util.Set<java.lang.String>,java.lang.String)",
      "311": "DefaultMQAdminExt::::deleteTopicInNameServer(java.util.Set<java.lang.String>,java.lang.String)",
      "312": "DefaultMQAdminExt::::deleteTopicInNameServer(java.util.Set<java.lang.String>,java.lang.String)",
      "313": "DefaultMQAdminExt::::deleteTopicInNameServer(java.util.Set<java.lang.String>,java.lang.String)",
      "314": "DefaultMQAdminExt::::deleteTopicInNameServer(java.util.Set<java.lang.String>,java.lang.String)",
      "316": "DefaultMQAdminExt::::deleteSubscriptionGroup(java.lang.String,java.lang.String)",
      "317": "DefaultMQAdminExt::::deleteSubscriptionGroup(java.lang.String,java.lang.String)",
      "318": "DefaultMQAdminExt::::deleteSubscriptionGroup(java.lang.String,java.lang.String)",
      "319": "DefaultMQAdminExt::::deleteSubscriptionGroup(java.lang.String,java.lang.String)",
      "320": "DefaultMQAdminExt::::deleteSubscriptionGroup(java.lang.String,java.lang.String)",
      "321": "DefaultMQAdminExt::::deleteSubscriptionGroup(java.lang.String,java.lang.String)",
      "323": "DefaultMQAdminExt::::createAndUpdateKvConfig(java.lang.String,java.lang.String,java.lang.String)",
      "324": "DefaultMQAdminExt::::createAndUpdateKvConfig(java.lang.String,java.lang.String,java.lang.String)",
      "325": "DefaultMQAdminExt::::createAndUpdateKvConfig(java.lang.String,java.lang.String,java.lang.String)",
      "326": "DefaultMQAdminExt::::createAndUpdateKvConfig(java.lang.String,java.lang.String,java.lang.String)",
      "327": "DefaultMQAdminExt::::createAndUpdateKvConfig(java.lang.String,java.lang.String,java.lang.String)",
      "328": "DefaultMQAdminExt::::createAndUpdateKvConfig(java.lang.String,java.lang.String,java.lang.String)",
      "330": "DefaultMQAdminExt::::deleteKvConfig(java.lang.String,java.lang.String)",
      "331": "DefaultMQAdminExt::::deleteKvConfig(java.lang.String,java.lang.String)",
      "332": "DefaultMQAdminExt::::deleteKvConfig(java.lang.String,java.lang.String)",
      "333": "DefaultMQAdminExt::::deleteKvConfig(java.lang.String,java.lang.String)",
      "334": "DefaultMQAdminExt::::deleteKvConfig(java.lang.String,java.lang.String)",
      "335": "DefaultMQAdminExt::::deleteKvConfig(java.lang.String,java.lang.String)",
      "337": "DefaultMQAdminExt::::resetOffsetByTimestampOld(java.lang.String,java.lang.String,long,boolean)",
      "338": "DefaultMQAdminExt::::resetOffsetByTimestampOld(java.lang.String,java.lang.String,long,boolean)",
      "339": "DefaultMQAdminExt::::resetOffsetByTimestampOld(java.lang.String,java.lang.String,long,boolean)",
      "340": "DefaultMQAdminExt::::resetOffsetByTimestampOld(java.lang.String,java.lang.String,long,boolean)",
      "341": "DefaultMQAdminExt::::resetOffsetByTimestampOld(java.lang.String,java.lang.String,long,boolean)",
      "342": "DefaultMQAdminExt::::resetOffsetByTimestampOld(java.lang.String,java.lang.String,long,boolean)",
      "344": "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean)",
      "345": "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean)",
      "346": "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean)",
      "347": "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean)",
      "348": "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean)",
      "350": "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean,boolean)",
      "351": "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean,boolean)",
      "352": "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean,boolean)",
      "353": "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean,boolean)",
      "354": "DefaultMQAdminExt::::resetOffsetByTimestamp(java.lang.String,java.lang.String,long,boolean,boolean)",
      "356": "DefaultMQAdminExt::::resetOffsetNew(java.lang.String,java.lang.String,long)",
      "357": "DefaultMQAdminExt::::resetOffsetNew(java.lang.String,java.lang.String,long)",
      "358": "DefaultMQAdminExt::::resetOffsetNew(java.lang.String,java.lang.String,long)",
      "359": "DefaultMQAdminExt::::resetOffsetNew(java.lang.String,java.lang.String,long)",
      "360": "DefaultMQAdminExt::::resetOffsetNew(java.lang.String,java.lang.String,long)",
      "361": "DefaultMQAdminExt::::resetOffsetNew(java.lang.String,java.lang.String,long)",
      "363": "DefaultMQAdminExt::::getConsumeStatus(java.lang.String,java.lang.String,java.lang.String)",
      "364": "DefaultMQAdminExt::::getConsumeStatus(java.lang.String,java.lang.String,java.lang.String)",
      "365": "DefaultMQAdminExt::::getConsumeStatus(java.lang.String,java.lang.String,java.lang.String)",
      "366": "DefaultMQAdminExt::::getConsumeStatus(java.lang.String,java.lang.String,java.lang.String)",
      "367": "DefaultMQAdminExt::::getConsumeStatus(java.lang.String,java.lang.String,java.lang.String)",
      "368": "DefaultMQAdminExt::::getConsumeStatus(java.lang.String,java.lang.String,java.lang.String)",
      "370": "DefaultMQAdminExt::::createOrUpdateOrderConf(java.lang.String,java.lang.String,boolean)",
      "371": "DefaultMQAdminExt::::createOrUpdateOrderConf(java.lang.String,java.lang.String,boolean)",
      "372": "DefaultMQAdminExt::::createOrUpdateOrderConf(java.lang.String,java.lang.String,boolean)",
      "373": "DefaultMQAdminExt::::createOrUpdateOrderConf(java.lang.String,java.lang.String,boolean)",
      "374": "DefaultMQAdminExt::::createOrUpdateOrderConf(java.lang.String,java.lang.String,boolean)",
      "375": "DefaultMQAdminExt::::createOrUpdateOrderConf(java.lang.String,java.lang.String,boolean)",
      "377": "DefaultMQAdminExt::::queryTopicConsumeByWho(java.lang.String)",
      "378": "DefaultMQAdminExt::::queryTopicConsumeByWho(java.lang.String)",
      "379": "DefaultMQAdminExt::::queryTopicConsumeByWho(java.lang.String)",
      "380": "DefaultMQAdminExt::::queryTopicConsumeByWho(java.lang.String)",
      "381": "DefaultMQAdminExt::::queryTopicConsumeByWho(java.lang.String)",
      "382": "DefaultMQAdminExt::::queryTopicConsumeByWho(java.lang.String)",
      "384": "DefaultMQAdminExt::::queryConsumeTimeSpan(java.lang.String,java.lang.String)",
      "385": "DefaultMQAdminExt::::queryConsumeTimeSpan(java.lang.String,java.lang.String)",
      "386": "DefaultMQAdminExt::::queryConsumeTimeSpan(java.lang.String,java.lang.String)",
      "387": "DefaultMQAdminExt::::queryConsumeTimeSpan(java.lang.String,java.lang.String)",
      "388": "DefaultMQAdminExt::::queryConsumeTimeSpan(java.lang.String,java.lang.String)",
      "389": "DefaultMQAdminExt::::queryConsumeTimeSpan(java.lang.String,java.lang.String)",
      "391": "DefaultMQAdminExt::::cleanExpiredConsumerQueue(java.lang.String)",
      "392": "DefaultMQAdminExt::::cleanExpiredConsumerQueue(java.lang.String)",
      "393": "DefaultMQAdminExt::::cleanExpiredConsumerQueue(java.lang.String)",
      "394": "DefaultMQAdminExt::::cleanExpiredConsumerQueue(java.lang.String)",
      "395": "DefaultMQAdminExt::::cleanExpiredConsumerQueue(java.lang.String)",
      "396": "DefaultMQAdminExt::::cleanExpiredConsumerQueue(java.lang.String)",
      "398": "DefaultMQAdminExt::::cleanExpiredConsumerQueueByAddr(java.lang.String)",
      "399": "DefaultMQAdminExt::::cleanExpiredConsumerQueueByAddr(java.lang.String)",
      "400": "DefaultMQAdminExt::::cleanExpiredConsumerQueueByAddr(java.lang.String)",
      "401": "DefaultMQAdminExt::::cleanExpiredConsumerQueueByAddr(java.lang.String)",
      "402": "DefaultMQAdminExt::::cleanExpiredConsumerQueueByAddr(java.lang.String)",
      "403": "DefaultMQAdminExt::::cleanExpiredConsumerQueueByAddr(java.lang.String)",
      "405": "DefaultMQAdminExt::::cleanUnusedTopic(java.lang.String)",
      "406": "DefaultMQAdminExt::::cleanUnusedTopic(java.lang.String)",
      "407": "DefaultMQAdminExt::::cleanUnusedTopic(java.lang.String)",
      "408": "DefaultMQAdminExt::::cleanUnusedTopic(java.lang.String)",
      "409": "DefaultMQAdminExt::::cleanUnusedTopic(java.lang.String)",
      "411": "DefaultMQAdminExt::::cleanUnusedTopicByAddr(java.lang.String)",
      "412": "DefaultMQAdminExt::::cleanUnusedTopicByAddr(java.lang.String)",
      "413": "DefaultMQAdminExt::::cleanUnusedTopicByAddr(java.lang.String)",
      "414": "DefaultMQAdminExt::::cleanUnusedTopicByAddr(java.lang.String)",
      "415": "DefaultMQAdminExt::::cleanUnusedTopicByAddr(java.lang.String)",
      "417": "DefaultMQAdminExt::::getConsumerRunningInfo(java.lang.String,java.lang.String,boolean)",
      "418": "DefaultMQAdminExt::::getConsumerRunningInfo(java.lang.String,java.lang.String,boolean)",
      "419": "DefaultMQAdminExt::::getConsumerRunningInfo(java.lang.String,java.lang.String,boolean)",
      "420": "DefaultMQAdminExt::::getConsumerRunningInfo(java.lang.String,java.lang.String,boolean)",
      "421": "DefaultMQAdminExt::::getConsumerRunningInfo(java.lang.String,java.lang.String,boolean)",
      "422": "DefaultMQAdminExt::::getConsumerRunningInfo(java.lang.String,java.lang.String,boolean)",
      "424": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String)",
      "425": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String)",
      "426": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String)",
      "427": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String)",
      "428": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String)",
      "430": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "431": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "432": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "433": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "434": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "435": "DefaultMQAdminExt::::consumeMessageDirectly(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "444": "DefaultMQAdminExt::::cloneGroupOffset(java.lang.String,java.lang.String,java.lang.String,boolean)",
      "445": "DefaultMQAdminExt::::cloneGroupOffset(java.lang.String,java.lang.String,java.lang.String,boolean)",
      "446": "DefaultMQAdminExt::::cloneGroupOffset(java.lang.String,java.lang.String,java.lang.String,boolean)",
      "447": "DefaultMQAdminExt::::cloneGroupOffset(java.lang.String,java.lang.String,java.lang.String,boolean)",
      "448": "DefaultMQAdminExt::::cloneGroupOffset(java.lang.String,java.lang.String,java.lang.String,boolean)",
      "449": "DefaultMQAdminExt::::cloneGroupOffset(java.lang.String,java.lang.String,java.lang.String,boolean)",
      "451": "DefaultMQAdminExt::::viewBrokerStatsData(java.lang.String,java.lang.String,java.lang.String)",
      "452": "DefaultMQAdminExt::::viewBrokerStatsData(java.lang.String,java.lang.String,java.lang.String)",
      "453": "DefaultMQAdminExt::::viewBrokerStatsData(java.lang.String,java.lang.String,java.lang.String)",
      "454": "DefaultMQAdminExt::::viewBrokerStatsData(java.lang.String,java.lang.String,java.lang.String)",
      "455": "DefaultMQAdminExt::::viewBrokerStatsData(java.lang.String,java.lang.String,java.lang.String)",
      "456": "DefaultMQAdminExt::::viewBrokerStatsData(java.lang.String,java.lang.String,java.lang.String)",
      "458": "DefaultMQAdminExt::::getClusterList(java.lang.String)",
      "459": "DefaultMQAdminExt::::getClusterList(java.lang.String)",
      "460": "DefaultMQAdminExt::::getClusterList(java.lang.String)",
      "461": "DefaultMQAdminExt::::getClusterList(java.lang.String)",
      "462": "DefaultMQAdminExt::::getClusterList(java.lang.String)",
      "464": "DefaultMQAdminExt::::fetchConsumeStatsInBroker(java.lang.String,boolean,long)",
      "465": "DefaultMQAdminExt::::fetchConsumeStatsInBroker(java.lang.String,boolean,long)",
      "466": "DefaultMQAdminExt::::fetchConsumeStatsInBroker(java.lang.String,boolean,long)",
      "467": "DefaultMQAdminExt::::fetchConsumeStatsInBroker(java.lang.String,boolean,long)",
      "468": "DefaultMQAdminExt::::fetchConsumeStatsInBroker(java.lang.String,boolean,long)",
      "469": "DefaultMQAdminExt::::fetchConsumeStatsInBroker(java.lang.String,boolean,long)",
      "471": "DefaultMQAdminExt::::getTopicClusterList(java.lang.String)",
      "472": "DefaultMQAdminExt::::getTopicClusterList(java.lang.String)",
      "473": "DefaultMQAdminExt::::getTopicClusterList(java.lang.String)",
      "474": "DefaultMQAdminExt::::getTopicClusterList(java.lang.String)",
      "475": "DefaultMQAdminExt::::getTopicClusterList(java.lang.String)",
      "477": "DefaultMQAdminExt::::getAllSubscriptionGroup(java.lang.String,long)",
      "478": "DefaultMQAdminExt::::getAllSubscriptionGroup(java.lang.String,long)",
      "479": "DefaultMQAdminExt::::getAllSubscriptionGroup(java.lang.String,long)",
      "480": "DefaultMQAdminExt::::getAllSubscriptionGroup(java.lang.String,long)",
      "481": "DefaultMQAdminExt::::getAllSubscriptionGroup(java.lang.String,long)",
      "482": "DefaultMQAdminExt::::getAllSubscriptionGroup(java.lang.String,long)",
      "484": "DefaultMQAdminExt::::getAllTopicGroup(java.lang.String,long)",
      "485": "DefaultMQAdminExt::::getAllTopicGroup(java.lang.String,long)",
      "486": "DefaultMQAdminExt::::getAllTopicGroup(java.lang.String,long)",
      "487": "DefaultMQAdminExt::::getAllTopicGroup(java.lang.String,long)",
      "488": "DefaultMQAdminExt::::getAllTopicGroup(java.lang.String,long)",
      "489": "DefaultMQAdminExt::::getAllTopicGroup(java.lang.String,long)",
      "494": "DefaultMQAdminExt::::viewMessage(java.lang.String,java.lang.String)",
      "495": "DefaultMQAdminExt::::viewMessage(java.lang.String,java.lang.String)",
      "496": "DefaultMQAdminExt::::viewMessage(java.lang.String,java.lang.String)",
      "497": "DefaultMQAdminExt::::viewMessage(java.lang.String,java.lang.String)",
      "498": "DefaultMQAdminExt::::viewMessage(java.lang.String,java.lang.String)",
      "500": "DefaultMQAdminExt::::getAdminExtGroup()",
      "501": "DefaultMQAdminExt::::getAdminExtGroup()",
      "502": "DefaultMQAdminExt::::getAdminExtGroup()",
      "504": "DefaultMQAdminExt::::setAdminExtGroup(java.lang.String)",
      "505": "DefaultMQAdminExt::::setAdminExtGroup(java.lang.String)",
      "506": "DefaultMQAdminExt::::setAdminExtGroup(java.lang.String)",
      "508": "DefaultMQAdminExt::::getCreateTopicKey()",
      "509": "DefaultMQAdminExt::::getCreateTopicKey()",
      "510": "DefaultMQAdminExt::::getCreateTopicKey()",
      "512": "DefaultMQAdminExt::::setCreateTopicKey(java.lang.String)",
      "513": "DefaultMQAdminExt::::setCreateTopicKey(java.lang.String)",
      "514": "DefaultMQAdminExt::::setCreateTopicKey(java.lang.String)",
      "522": "DefaultMQAdminExt::::updateNameServerConfig(java.util.Properties,java.util.List<java.lang.String>)",
      "523": "DefaultMQAdminExt::::updateNameServerConfig(java.util.Properties,java.util.List<java.lang.String>)",
      "524": "DefaultMQAdminExt::::updateNameServerConfig(java.util.Properties,java.util.List<java.lang.String>)",
      "525": "DefaultMQAdminExt::::updateNameServerConfig(java.util.Properties,java.util.List<java.lang.String>)",
      "526": "DefaultMQAdminExt::::updateNameServerConfig(java.util.Properties,java.util.List<java.lang.String>)",
      "527": "DefaultMQAdminExt::::updateNameServerConfig(java.util.Properties,java.util.List<java.lang.String>)",
      "528": "DefaultMQAdminExt::::updateNameServerConfig(java.util.Properties,java.util.List<java.lang.String>)",
      "530": "DefaultMQAdminExt::::getNameServerConfig(java.util.List<java.lang.String>)",
      "531": "DefaultMQAdminExt::::getNameServerConfig(java.util.List<java.lang.String>)",
      "532": "DefaultMQAdminExt::::getNameServerConfig(java.util.List<java.lang.String>)",
      "533": "DefaultMQAdminExt::::getNameServerConfig(java.util.List<java.lang.String>)",
      "534": "DefaultMQAdminExt::::getNameServerConfig(java.util.List<java.lang.String>)",
      "535": "DefaultMQAdminExt::::getNameServerConfig(java.util.List<java.lang.String>)",
      "536": "DefaultMQAdminExt::::getNameServerConfig(java.util.List<java.lang.String>)",
      "538": "DefaultMQAdminExt::::queryConsumeQueue(java.lang.String,java.lang.String,int,long,int,java.lang.String)",
      "539": "DefaultMQAdminExt::::queryConsumeQueue(java.lang.String,java.lang.String,int,long,int,java.lang.String)",
      "540": "DefaultMQAdminExt::::queryConsumeQueue(java.lang.String,java.lang.String,int,long,int,java.lang.String)",
      "541": "DefaultMQAdminExt::::queryConsumeQueue(java.lang.String,java.lang.String,int,long,int,java.lang.String)",
      "542": "DefaultMQAdminExt::::queryConsumeQueue(java.lang.String,java.lang.String,int,long,int,java.lang.String)",
      "543": "DefaultMQAdminExt::::queryConsumeQueue(java.lang.String,java.lang.String,int,long,int,java.lang.String)",
      "544": "DefaultMQAdminExt::::queryConsumeQueue(java.lang.String,java.lang.String,int,long,int,java.lang.String)",
      "545": "DefaultMQAdminExt::::queryConsumeQueue(java.lang.String,java.lang.String,int,long,int,java.lang.String)",
      "547": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String)",
      "548": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String)",
      "549": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String)",
      "550": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String)",
      "551": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String)",
      "553": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String,java.lang.String)",
      "554": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String,java.lang.String)",
      "555": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String,java.lang.String)",
      "556": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String,java.lang.String)",
      "557": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String,java.lang.String)",
      "558": "DefaultMQAdminExt::::resumeCheckHalfMessage(java.lang.String,java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "96": "DefaultMQAdminExtTest::::init()",
      "97": "DefaultMQAdminExtTest::::init()",
      "98": "DefaultMQAdminExtTest::::init()",
      "99": "DefaultMQAdminExtTest::::init()",
      "100": "DefaultMQAdminExtTest::::init()",
      "101": "DefaultMQAdminExtTest::::init()",
      "102": "DefaultMQAdminExtTest::::init()",
      "103": "DefaultMQAdminExtTest::::init()",
      "104": "DefaultMQAdminExtTest::::init()",
      "105": "DefaultMQAdminExtTest::::init()",
      "106": "DefaultMQAdminExtTest::::init()",
      "107": "DefaultMQAdminExtTest::::init()",
      "108": "DefaultMQAdminExtTest::::init()",
      "109": "DefaultMQAdminExtTest::::init()",
      "110": "DefaultMQAdminExtTest::::init()",
      "111": "DefaultMQAdminExtTest::::init()",
      "112": "DefaultMQAdminExtTest::::init()",
      "113": "DefaultMQAdminExtTest::::init()",
      "114": "DefaultMQAdminExtTest::::init()",
      "115": "DefaultMQAdminExtTest::::init()",
      "116": "DefaultMQAdminExtTest::::init()",
      "117": "DefaultMQAdminExtTest::::init()",
      "118": "DefaultMQAdminExtTest::::init()",
      "119": "DefaultMQAdminExtTest::::init()",
      "120": "DefaultMQAdminExtTest::::init()",
      "121": "DefaultMQAdminExtTest::::init()",
      "122": "DefaultMQAdminExtTest::::init()",
      "123": "DefaultMQAdminExtTest::::init()",
      "124": "DefaultMQAdminExtTest::::init()",
      "125": "DefaultMQAdminExtTest::::init()",
      "126": "DefaultMQAdminExtTest::::init()",
      "127": "DefaultMQAdminExtTest::::init()",
      "128": "DefaultMQAdminExtTest::::init()",
      "129": "DefaultMQAdminExtTest::::init()",
      "130": "DefaultMQAdminExtTest::::init()",
      "131": "DefaultMQAdminExtTest::::init()",
      "132": "DefaultMQAdminExtTest::::init()",
      "133": "DefaultMQAdminExtTest::::init()",
      "134": "DefaultMQAdminExtTest::::init()",
      "135": "DefaultMQAdminExtTest::::init()",
      "136": "DefaultMQAdminExtTest::::init()",
      "137": "DefaultMQAdminExtTest::::init()",
      "138": "DefaultMQAdminExtTest::::init()",
      "139": "DefaultMQAdminExtTest::::init()",
      "140": "DefaultMQAdminExtTest::::init()",
      "141": "DefaultMQAdminExtTest::::init()",
      "142": "DefaultMQAdminExtTest::::init()",
      "143": "DefaultMQAdminExtTest::::init()",
      "144": "DefaultMQAdminExtTest::::init()",
      "145": "DefaultMQAdminExtTest::::init()",
      "146": "DefaultMQAdminExtTest::::init()",
      "147": "DefaultMQAdminExtTest::::init()",
      "148": "DefaultMQAdminExtTest::::init()",
      "149": "DefaultMQAdminExtTest::::init()",
      "150": "DefaultMQAdminExtTest::::init()",
      "151": "DefaultMQAdminExtTest::::init()",
      "152": "DefaultMQAdminExtTest::::init()",
      "153": "DefaultMQAdminExtTest::::init()",
      "154": "DefaultMQAdminExtTest::::init()",
      "155": "DefaultMQAdminExtTest::::init()",
      "156": "DefaultMQAdminExtTest::::init()",
      "157": "DefaultMQAdminExtTest::::init()",
      "158": "DefaultMQAdminExtTest::::init()",
      "159": "DefaultMQAdminExtTest::::init()",
      "160": "DefaultMQAdminExtTest::::init()",
      "161": "DefaultMQAdminExtTest::::init()",
      "162": "DefaultMQAdminExtTest::::init()",
      "163": "DefaultMQAdminExtTest::::init()",
      "164": "DefaultMQAdminExtTest::::init()",
      "165": "DefaultMQAdminExtTest::::init()",
      "166": "DefaultMQAdminExtTest::::init()",
      "167": "DefaultMQAdminExtTest::::init()",
      "168": "DefaultMQAdminExtTest::::init()",
      "169": "DefaultMQAdminExtTest::::init()",
      "170": "DefaultMQAdminExtTest::::init()",
      "171": "DefaultMQAdminExtTest::::init()",
      "172": "DefaultMQAdminExtTest::::init()",
      "173": "DefaultMQAdminExtTest::::init()",
      "174": "DefaultMQAdminExtTest::::init()",
      "175": "DefaultMQAdminExtTest::::init()",
      "176": "DefaultMQAdminExtTest::::init()",
      "177": "DefaultMQAdminExtTest::::init()",
      "178": "DefaultMQAdminExtTest::::init()",
      "179": "DefaultMQAdminExtTest::::init()",
      "180": "DefaultMQAdminExtTest::::init()",
      "181": "DefaultMQAdminExtTest::::init()",
      "182": "DefaultMQAdminExtTest::::init()",
      "183": "DefaultMQAdminExtTest::::init()",
      "184": "DefaultMQAdminExtTest::::init()",
      "185": "DefaultMQAdminExtTest::::init()",
      "186": "DefaultMQAdminExtTest::::init()",
      "187": "DefaultMQAdminExtTest::::init()",
      "188": "DefaultMQAdminExtTest::::init()",
      "189": "DefaultMQAdminExtTest::::init()",
      "190": "DefaultMQAdminExtTest::::init()",
      "191": "DefaultMQAdminExtTest::::init()",
      "192": "DefaultMQAdminExtTest::::init()",
      "193": "DefaultMQAdminExtTest::::init()",
      "194": "DefaultMQAdminExtTest::::init()",
      "195": "DefaultMQAdminExtTest::::init()",
      "196": "DefaultMQAdminExtTest::::init()",
      "197": "DefaultMQAdminExtTest::::init()",
      "198": "DefaultMQAdminExtTest::::init()",
      "199": "DefaultMQAdminExtTest::::init()",
      "200": "DefaultMQAdminExtTest::::init()",
      "201": "DefaultMQAdminExtTest::::init()",
      "202": "DefaultMQAdminExtTest::::init()",
      "203": "DefaultMQAdminExtTest::::init()",
      "204": "DefaultMQAdminExtTest::::init()",
      "205": "DefaultMQAdminExtTest::::init()",
      "206": "DefaultMQAdminExtTest::::init()",
      "207": "DefaultMQAdminExtTest::::init()",
      "208": "DefaultMQAdminExtTest::::init()",
      "209": "DefaultMQAdminExtTest::::init()",
      "210": "DefaultMQAdminExtTest::::init()",
      "211": "DefaultMQAdminExtTest::::init()",
      "212": "DefaultMQAdminExtTest::::init()",
      "213": "DefaultMQAdminExtTest::::init()",
      "214": "DefaultMQAdminExtTest::::init()",
      "215": "DefaultMQAdminExtTest::::init()",
      "216": "DefaultMQAdminExtTest::::init()",
      "217": "DefaultMQAdminExtTest::::init()",
      "218": "DefaultMQAdminExtTest::::init()",
      "219": "DefaultMQAdminExtTest::::init()",
      "220": "DefaultMQAdminExtTest::::init()",
      "221": "DefaultMQAdminExtTest::::init()",
      "222": "DefaultMQAdminExtTest::::init()",
      "223": "DefaultMQAdminExtTest::::init()",
      "224": "DefaultMQAdminExtTest::::init()",
      "225": "DefaultMQAdminExtTest::::init()",
      "226": "DefaultMQAdminExtTest::::init()",
      "227": "DefaultMQAdminExtTest::::init()",
      "228": "DefaultMQAdminExtTest::::init()",
      "230": "DefaultMQAdminExtTest::::terminate()",
      "231": "DefaultMQAdminExtTest::::terminate()",
      "232": "DefaultMQAdminExtTest::::terminate()",
      "233": "DefaultMQAdminExtTest::::terminate()",
      "234": "DefaultMQAdminExtTest::::terminate()",
      "236": "DefaultMQAdminExtTest::::testUpdateBrokerConfig()",
      "237": "DefaultMQAdminExtTest::::testUpdateBrokerConfig()",
      "238": "DefaultMQAdminExtTest::::testUpdateBrokerConfig()",
      "239": "DefaultMQAdminExtTest::::testUpdateBrokerConfig()",
      "240": "DefaultMQAdminExtTest::::testUpdateBrokerConfig()",
      "241": "DefaultMQAdminExtTest::::testUpdateBrokerConfig()",
      "242": "DefaultMQAdminExtTest::::testUpdateBrokerConfig()",
      "244": "DefaultMQAdminExtTest::::testFetchAllTopicList()",
      "245": "DefaultMQAdminExtTest::::testFetchAllTopicList()",
      "246": "DefaultMQAdminExtTest::::testFetchAllTopicList()",
      "247": "DefaultMQAdminExtTest::::testFetchAllTopicList()",
      "248": "DefaultMQAdminExtTest::::testFetchAllTopicList()",
      "249": "DefaultMQAdminExtTest::::testFetchAllTopicList()",
      "251": "DefaultMQAdminExtTest::::testFetchBrokerRuntimeStats()",
      "252": "DefaultMQAdminExtTest::::testFetchBrokerRuntimeStats()",
      "253": "DefaultMQAdminExtTest::::testFetchBrokerRuntimeStats()",
      "254": "DefaultMQAdminExtTest::::testFetchBrokerRuntimeStats()",
      "255": "DefaultMQAdminExtTest::::testFetchBrokerRuntimeStats()",
      "256": "DefaultMQAdminExtTest::::testFetchBrokerRuntimeStats()",
      "258": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "259": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "260": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "261": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "262": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "263": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "264": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "265": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "266": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "267": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "268": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "269": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "270": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "271": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "272": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "273": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "274": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "275": "DefaultMQAdminExtTest::::testExamineBrokerClusterInfo()",
      "277": "DefaultMQAdminExtTest::::testExamineConsumeStats()",
      "278": "DefaultMQAdminExtTest::::testExamineConsumeStats()",
      "279": "DefaultMQAdminExtTest::::testExamineConsumeStats()",
      "280": "DefaultMQAdminExtTest::::testExamineConsumeStats()",
      "281": "DefaultMQAdminExtTest::::testExamineConsumeStats()",
      "283": "DefaultMQAdminExtTest::::testExamineConsumerConnectionInfo()",
      "284": "DefaultMQAdminExtTest::::testExamineConsumerConnectionInfo()",
      "285": "DefaultMQAdminExtTest::::testExamineConsumerConnectionInfo()",
      "286": "DefaultMQAdminExtTest::::testExamineConsumerConnectionInfo()",
      "287": "DefaultMQAdminExtTest::::testExamineConsumerConnectionInfo()",
      "288": "DefaultMQAdminExtTest::::testExamineConsumerConnectionInfo()",
      "290": "DefaultMQAdminExtTest::::testExamineProducerConnectionInfo()",
      "291": "DefaultMQAdminExtTest::::testExamineProducerConnectionInfo()",
      "292": "DefaultMQAdminExtTest::::testExamineProducerConnectionInfo()",
      "293": "DefaultMQAdminExtTest::::testExamineProducerConnectionInfo()",
      "294": "DefaultMQAdminExtTest::::testExamineProducerConnectionInfo()",
      "296": "DefaultMQAdminExtTest::::testWipeWritePermOfBroker()",
      "297": "DefaultMQAdminExtTest::::testWipeWritePermOfBroker()",
      "298": "DefaultMQAdminExtTest::::testWipeWritePermOfBroker()",
      "299": "DefaultMQAdminExtTest::::testWipeWritePermOfBroker()",
      "300": "DefaultMQAdminExtTest::::testWipeWritePermOfBroker()",
      "302": "DefaultMQAdminExtTest::::testExamineTopicRouteInfo()",
      "303": "DefaultMQAdminExtTest::::testExamineTopicRouteInfo()",
      "304": "DefaultMQAdminExtTest::::testExamineTopicRouteInfo()",
      "305": "DefaultMQAdminExtTest::::testExamineTopicRouteInfo()",
      "306": "DefaultMQAdminExtTest::::testExamineTopicRouteInfo()",
      "307": "DefaultMQAdminExtTest::::testExamineTopicRouteInfo()",
      "309": "DefaultMQAdminExtTest::::testGetNameServerAddressList()",
      "310": "DefaultMQAdminExtTest::::testGetNameServerAddressList()",
      "311": "DefaultMQAdminExtTest::::testGetNameServerAddressList()",
      "312": "DefaultMQAdminExtTest::::testGetNameServerAddressList()",
      "313": "DefaultMQAdminExtTest::::testGetNameServerAddressList()",
      "314": "DefaultMQAdminExtTest::::testGetNameServerAddressList()",
      "315": "DefaultMQAdminExtTest::::testGetNameServerAddressList()",
      "316": "DefaultMQAdminExtTest::::testGetNameServerAddressList()",
      "317": "DefaultMQAdminExtTest::::testGetNameServerAddressList()",
      "318": "DefaultMQAdminExtTest::::testGetNameServerAddressList()",
      "320": "DefaultMQAdminExtTest::::testPutKVConfig()",
      "321": "DefaultMQAdminExtTest::::testPutKVConfig()",
      "322": "DefaultMQAdminExtTest::::testPutKVConfig()",
      "323": "DefaultMQAdminExtTest::::testPutKVConfig()",
      "324": "DefaultMQAdminExtTest::::testPutKVConfig()",
      "325": "DefaultMQAdminExtTest::::testPutKVConfig()",
      "326": "DefaultMQAdminExtTest::::testPutKVConfig()",
      "327": "DefaultMQAdminExtTest::::testPutKVConfig()",
      "329": "DefaultMQAdminExtTest::::testQueryTopicConsumeByWho()",
      "330": "DefaultMQAdminExtTest::::testQueryTopicConsumeByWho()",
      "331": "DefaultMQAdminExtTest::::testQueryTopicConsumeByWho()",
      "332": "DefaultMQAdminExtTest::::testQueryTopicConsumeByWho()",
      "333": "DefaultMQAdminExtTest::::testQueryTopicConsumeByWho()",
      "335": "DefaultMQAdminExtTest::::testQueryConsumeTimeSpan()",
      "336": "DefaultMQAdminExtTest::::testQueryConsumeTimeSpan()",
      "337": "DefaultMQAdminExtTest::::testQueryConsumeTimeSpan()",
      "338": "DefaultMQAdminExtTest::::testQueryConsumeTimeSpan()",
      "339": "DefaultMQAdminExtTest::::testQueryConsumeTimeSpan()",
      "341": "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueue()",
      "342": "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueue()",
      "343": "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueue()",
      "344": "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueue()",
      "345": "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueue()",
      "347": "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueueByAddr()",
      "348": "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueueByAddr()",
      "349": "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueueByAddr()",
      "350": "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueueByAddr()",
      "351": "DefaultMQAdminExtTest::::testCleanExpiredConsumerQueueByAddr()",
      "353": "DefaultMQAdminExtTest::::testCleanUnusedTopic()",
      "354": "DefaultMQAdminExtTest::::testCleanUnusedTopic()",
      "355": "DefaultMQAdminExtTest::::testCleanUnusedTopic()",
      "356": "DefaultMQAdminExtTest::::testCleanUnusedTopic()",
      "357": "DefaultMQAdminExtTest::::testCleanUnusedTopic()",
      "359": "DefaultMQAdminExtTest::::testGetConsumerRunningInfo()",
      "360": "DefaultMQAdminExtTest::::testGetConsumerRunningInfo()",
      "361": "DefaultMQAdminExtTest::::testGetConsumerRunningInfo()",
      "362": "DefaultMQAdminExtTest::::testGetConsumerRunningInfo()",
      "363": "DefaultMQAdminExtTest::::testGetConsumerRunningInfo()",
      "365": "DefaultMQAdminExtTest::::testMessageTrackDetail()",
      "366": "DefaultMQAdminExtTest::::testMessageTrackDetail()",
      "367": "DefaultMQAdminExtTest::::testMessageTrackDetail()",
      "368": "DefaultMQAdminExtTest::::testMessageTrackDetail()",
      "369": "DefaultMQAdminExtTest::::testMessageTrackDetail()",
      "370": "DefaultMQAdminExtTest::::testMessageTrackDetail()",
      "371": "DefaultMQAdminExtTest::::testMessageTrackDetail()",
      "372": "DefaultMQAdminExtTest::::testMessageTrackDetail()",
      "374": "DefaultMQAdminExtTest::::testGetConsumeStatus()",
      "375": "DefaultMQAdminExtTest::::testGetConsumeStatus()",
      "376": "DefaultMQAdminExtTest::::testGetConsumeStatus()",
      "377": "DefaultMQAdminExtTest::::testGetConsumeStatus()",
      "378": "DefaultMQAdminExtTest::::testGetConsumeStatus()",
      "380": "DefaultMQAdminExtTest::::testGetTopicClusterList()",
      "381": "DefaultMQAdminExtTest::::testGetTopicClusterList()",
      "382": "DefaultMQAdminExtTest::::testGetTopicClusterList()",
      "383": "DefaultMQAdminExtTest::::testGetTopicClusterList()",
      "384": "DefaultMQAdminExtTest::::testGetTopicClusterList()",
      "386": "DefaultMQAdminExtTest::::testGetClusterList()",
      "387": "DefaultMQAdminExtTest::::testGetClusterList()",
      "388": "DefaultMQAdminExtTest::::testGetClusterList()",
      "389": "DefaultMQAdminExtTest::::testGetClusterList()",
      "390": "DefaultMQAdminExtTest::::testGetClusterList()",
      "391": "DefaultMQAdminExtTest::::testGetClusterList()",
      "393": "DefaultMQAdminExtTest::::testFetchConsumeStatsInBroker()",
      "394": "DefaultMQAdminExtTest::::testFetchConsumeStatsInBroker()",
      "395": "DefaultMQAdminExtTest::::testFetchConsumeStatsInBroker()",
      "396": "DefaultMQAdminExtTest::::testFetchConsumeStatsInBroker()",
      "397": "DefaultMQAdminExtTest::::testFetchConsumeStatsInBroker()",
      "398": "DefaultMQAdminExtTest::::testFetchConsumeStatsInBroker()",
      "399": "DefaultMQAdminExtTest::::testFetchConsumeStatsInBroker()",
      "400": "DefaultMQAdminExtTest::::testFetchConsumeStatsInBroker()",
      "402": "DefaultMQAdminExtTest::::testGetAllSubscriptionGroup()",
      "403": "DefaultMQAdminExtTest::::testGetAllSubscriptionGroup()",
      "404": "DefaultMQAdminExtTest::::testGetAllSubscriptionGroup()",
      "405": "DefaultMQAdminExtTest::::testGetAllSubscriptionGroup()",
      "406": "DefaultMQAdminExtTest::::testGetAllSubscriptionGroup()",
      "407": "DefaultMQAdminExtTest::::testGetAllSubscriptionGroup()",
      "408": "DefaultMQAdminExtTest::::testGetAllSubscriptionGroup()"
    },
    "tests": [
      {
        "test_lines": [
          236,
          242
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          157
        ]
      },
      {
        "test_lines": [
          244,
          249
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          218
        ]
      },
      {
        "test_lines": [
          251,
          256
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          231
        ]
      },
      {
        "test_lines": [
          258,
          275
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          251
        ]
      },
      {
        "test_lines": [
          277,
          281
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          245
        ]
      },
      {
        "test_lines": [
          283,
          288
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          264
        ]
      },
      {
        "test_lines": [
          290,
          294
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          271
        ]
      },
      {
        "test_lines": [
          296,
          300
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          282
        ]
      },
      {
        "test_lines": [
          302,
          307
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          257
        ]
      },
      {
        "test_lines": [
          309,
          318
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          276
        ]
      },
      {
        "test_lines": [
          320,
          327
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          293,
          299
        ]
      },
      {
        "test_lines": [
          329,
          333
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          381
        ]
      },
      {
        "test_lines": [
          335,
          339
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          388
        ]
      },
      {
        "test_lines": [
          341,
          345
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          395
        ]
      },
      {
        "test_lines": [
          347,
          351
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          402
        ]
      },
      {
        "test_lines": [
          353,
          357
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          408
        ]
      },
      {
        "test_lines": [
          359,
          363
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          421
        ]
      },
      {
        "test_lines": [
          365,
          372
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          441
        ]
      },
      {
        "test_lines": [
          374,
          378
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          367
        ]
      },
      {
        "test_lines": [
          380,
          384
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          474
        ]
      },
      {
        "test_lines": [
          386,
          391
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          461
        ]
      },
      {
        "test_lines": [
          393,
          400
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          468
        ]
      },
      {
        "test_lines": [
          402,
          408
        ],
        "covered_lines": [
          64,
          65,
          66,
          68,
          69,
          70,
          144,
          145,
          481
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/CommandUtil.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collection;\n",
      "import java.util.HashMap;\n",
      "import java.util.HashSet;\n",
      "import java.util.Iterator;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Set;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.protocol.body.ClusterInfo;\n",
      "import org.apache.rocketmq.common.protocol.route.BrokerData;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingConnectException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\n",
      "import org.apache.rocketmq.tools.admin.MQAdminExt;\n",
      "\n",
      "public class CommandUtil {\n",
      "\n",
      "    private static final String ERROR_MESSAGE = \"Make sure the specified clusterName exists or the name server \" +\n",
      "        \"connected to is correct.\";\n",
      "\n",
      "    public static Map<String/*master addr*/, List<String>/*slave addr*/> fetchMasterAndSlaveDistinguish(\n",
      "        final MQAdminExt adminExt, final String clusterName)\n",
      "        throws InterruptedException, RemotingConnectException,\n",
      "        RemotingTimeoutException, RemotingSendRequestException,\n",
      "        MQBrokerException {\n",
      "        Map<String, List<String>> masterAndSlaveMap = new HashMap<String, List<String>>(4);\n",
      "\n",
      "        ClusterInfo clusterInfoSerializeWrapper = adminExt.examineBrokerClusterInfo();\n",
      "        Set<String> brokerNameSet = clusterInfoSerializeWrapper.getClusterAddrTable().get(clusterName);\n",
      "\n",
      "        if (brokerNameSet == null) {\n",
      "            System.out.printf(\"[error] %s\", ERROR_MESSAGE);\n",
      "            return masterAndSlaveMap;\n",
      "        }\n",
      "\n",
      "        for (String brokerName : brokerNameSet) {\n",
      "            BrokerData brokerData = clusterInfoSerializeWrapper.getBrokerAddrTable().get(brokerName);\n",
      "\n",
      "            if (brokerData == null || brokerData.getBrokerAddrs() == null) {\n",
      "                continue;\n",
      "            }\n",
      "\n",
      "            String masterAddr = brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);\n",
      "            masterAndSlaveMap.put(masterAddr, new ArrayList<String>());\n",
      "\n",
      "            for (Long id : brokerData.getBrokerAddrs().keySet()) {\n",
      "                if (brokerData.getBrokerAddrs().get(id) == null || id == MixAll.MASTER_ID) {\n",
      "                    continue;\n",
      "                }\n",
      "\n",
      "                masterAndSlaveMap.get(masterAddr).add(brokerData.getBrokerAddrs().get(id));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return masterAndSlaveMap;\n",
      "    }\n",
      "\n",
      "    public static Set<String> fetchMasterAddrByClusterName(final MQAdminExt adminExt, final String clusterName)\n",
      "        throws InterruptedException, RemotingConnectException, RemotingTimeoutException,\n",
      "        RemotingSendRequestException, MQBrokerException {\n",
      "        Set<String> masterSet = new HashSet<String>();\n",
      "\n",
      "        ClusterInfo clusterInfoSerializeWrapper = adminExt.examineBrokerClusterInfo();\n",
      "\n",
      "        Set<String> brokerNameSet = clusterInfoSerializeWrapper.getClusterAddrTable().get(clusterName);\n",
      "\n",
      "        if (brokerNameSet != null) {\n",
      "            for (String brokerName : brokerNameSet) {\n",
      "                BrokerData brokerData = clusterInfoSerializeWrapper.getBrokerAddrTable().get(brokerName);\n",
      "                if (brokerData != null) {\n",
      "\n",
      "                    String addr = brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);\n",
      "                    if (addr != null) {\n",
      "                        masterSet.add(addr);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        } else {\n",
      "            System.out.printf(\"[error] %s\", ERROR_MESSAGE);\n",
      "        }\n",
      "\n",
      "        return masterSet;\n",
      "    }\n",
      "\n",
      "    public static Set<String> fetchMasterAndSlaveAddrByClusterName(final MQAdminExt adminExt, final String clusterName)\n",
      "        throws InterruptedException, RemotingConnectException, RemotingTimeoutException,\n",
      "        RemotingSendRequestException, MQBrokerException {\n",
      "        Set<String> brokerAddressSet = new HashSet<String>();\n",
      "        ClusterInfo clusterInfoSerializeWrapper = adminExt.examineBrokerClusterInfo();\n",
      "        Set<String> brokerNameSet = clusterInfoSerializeWrapper.getClusterAddrTable().get(clusterName);\n",
      "        if (brokerNameSet != null) {\n",
      "            for (String brokerName : brokerNameSet) {\n",
      "                BrokerData brokerData = clusterInfoSerializeWrapper.getBrokerAddrTable().get(brokerName);\n",
      "                if (brokerData != null) {\n",
      "                    final Collection<String> addrs = brokerData.getBrokerAddrs().values();\n",
      "                    brokerAddressSet.addAll(addrs);\n",
      "                }\n",
      "            }\n",
      "        } else {\n",
      "            System.out.printf(\"[error] %s\", ERROR_MESSAGE);\n",
      "        }\n",
      "\n",
      "        return brokerAddressSet;\n",
      "    }\n",
      "\n",
      "    public static Set<String> fetchBrokerNameByClusterName(final MQAdminExt adminExt, final String clusterName)\n",
      "        throws Exception {\n",
      "        ClusterInfo clusterInfoSerializeWrapper = adminExt.examineBrokerClusterInfo();\n",
      "        Set<String> brokerNameSet = clusterInfoSerializeWrapper.getClusterAddrTable().get(clusterName);\n",
      "        if (brokerNameSet.isEmpty()) {\n",
      "            throw new Exception(ERROR_MESSAGE);\n",
      "        }\n",
      "        return brokerNameSet;\n",
      "    }\n",
      "\n",
      "    public static String fetchBrokerNameByAddr(final MQAdminExt adminExt, final String addr) throws Exception {\n",
      "        ClusterInfo clusterInfoSerializeWrapper = adminExt.examineBrokerClusterInfo();\n",
      "        HashMap<String/* brokerName */, BrokerData> brokerAddrTable = clusterInfoSerializeWrapper.getBrokerAddrTable();\n",
      "        Iterator<Map.Entry<String, BrokerData>> it = brokerAddrTable.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Map.Entry<String, BrokerData> entry = it.next();\n",
      "            HashMap<Long, String> brokerAddrs = entry.getValue().getBrokerAddrs();\n",
      "            if (brokerAddrs.containsValue(addr)) {\n",
      "                return entry.getKey();\n",
      "            }\n",
      "        }\n",
      "        throw new Exception(ERROR_MESSAGE);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command;\n",
      "\n",
      "import java.lang.reflect.Field;\n",
      "import java.util.HashMap;\n",
      "import java.util.HashSet;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Set;\n",
      "import org.apache.rocketmq.client.ClientConfig;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.impl.MQClientAPIImpl;\n",
      "import org.apache.rocketmq.client.impl.MQClientManager;\n",
      "import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n",
      "import org.apache.rocketmq.common.protocol.body.ClusterInfo;\n",
      "import org.apache.rocketmq.common.protocol.route.BrokerData;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingConnectException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExtImpl;\n",
      "import org.junit.After;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "import static org.mockito.ArgumentMatchers.anyLong;\n",
      "import static org.mockito.ArgumentMatchers.anyString;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class CommandUtilTest {\n",
      "    private DefaultMQAdminExt defaultMQAdminExt;\n",
      "    private DefaultMQAdminExtImpl defaultMQAdminExtImpl;\n",
      "    private MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());\n",
      "    private MQClientAPIImpl mQClientAPIImpl;\n",
      "\n",
      "    @Before\n",
      "    public void setup() throws MQClientException, NoSuchFieldException, IllegalAccessException, InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {\n",
      "        defaultMQAdminExt = mock(DefaultMQAdminExt.class);\n",
      "        MQClientAPIImpl mQClientAPIImpl = mock(MQClientAPIImpl.class);\n",
      "        defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(defaultMQAdminExt, 3000);\n",
      "\n",
      "        Field field = DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExtImpl, mqClientInstance);\n",
      "        field = MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(mqClientInstance, mQClientAPIImpl);\n",
      "\n",
      "        ClusterInfo clusterInfo = new ClusterInfo();\n",
      "        HashMap<String, BrokerData> brokerAddrTable = new HashMap<>();\n",
      "        HashMap<String, Set<String>> clusterAddrTable = new HashMap<>();\n",
      "        HashMap<Long, String> brokerAddrs = new HashMap<>();\n",
      "        brokerAddrs.put(1234l, \"127.0.0.1:10911\");\n",
      "        BrokerData brokerData = new BrokerData();\n",
      "        brokerData.setBrokerName(\"default-broker\");\n",
      "        brokerData.setCluster(\"default-cluster\");\n",
      "        brokerData.setBrokerAddrs(brokerAddrs);\n",
      "        brokerAddrTable.put(\"default-broker\", brokerData);\n",
      "        brokerAddrTable.put(\"broker-test\", new BrokerData());\n",
      "        Set<String> brokerSet = new HashSet<>();\n",
      "        brokerSet.add(\"default-broker\");\n",
      "        brokerSet.add(\"default-broker-one\");\n",
      "        clusterAddrTable.put(\"default-cluster\", brokerSet);\n",
      "        clusterInfo.setBrokerAddrTable(brokerAddrTable);\n",
      "        clusterInfo.setClusterAddrTable(clusterAddrTable);\n",
      "        when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n",
      "        when(mQClientAPIImpl.cleanExpiredConsumeQueue(anyString(), anyLong())).thenReturn(true);\n",
      "    }\n",
      "\n",
      "    @After\n",
      "    public void shutdown() throws Exception {\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFetchMasterAndSlaveDistinguish() throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {\n",
      "        Map<String, List<String>> result = CommandUtil.fetchMasterAndSlaveDistinguish(defaultMQAdminExtImpl, \"default-cluster\");\n",
      "        assertThat(result.get(null).get(0)).isEqualTo(\"127.0.0.1:10911\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFetchMasterAddrByClusterName() throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {\n",
      "        Set<String> result = CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExtImpl, \"default-cluster\");\n",
      "        assertThat(result.size()).isEqualTo(0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFetchBrokerNameByClusterName() throws Exception {\n",
      "        Set<String> result = CommandUtil.fetchBrokerNameByClusterName(defaultMQAdminExtImpl, \"default-cluster\");\n",
      "        assertThat(result.contains(\"default-broker\")).isTrue();\n",
      "        assertThat(result.contains(\"default-broker-one\")).isTrue();\n",
      "        assertThat(result.size()).isEqualTo(2);\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)": [
        41,
        76
      ],
      "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)": [
        78,
        103
      ],
      "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)": [
        105,
        124
      ],
      "CommandUtil::::fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)": [
        126,
        134
      ],
      "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)": [
        136,
        148
      ]
    },
    "test_method_lines_dic": {
      "CommandUtilTest::::setup()": [
        54,
        86
      ],
      "CommandUtilTest::::shutdown()": [
        88,
        90
      ],
      "CommandUtilTest::::testFetchMasterAndSlaveDistinguish()": [
        92,
        96
      ],
      "CommandUtilTest::::testFetchMasterAddrByClusterName()": [
        98,
        102
      ],
      "CommandUtilTest::::testFetchBrokerNameByClusterName()": [
        104,
        110
      ]
    },
    "reverse_method_lines_dic": {
      "41": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "42": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "43": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "44": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "45": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "46": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "47": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "48": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "49": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "50": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "51": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "52": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "53": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "54": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "55": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "56": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "57": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "58": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "59": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "60": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "61": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "62": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "63": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "64": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "65": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "66": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "67": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "68": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "69": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "70": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "71": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "72": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "73": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "74": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "75": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "76": "CommandUtil::::fetchMasterAndSlaveDistinguish(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "78": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "79": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "80": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "81": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "82": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "83": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "84": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "85": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "86": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "87": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "88": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "89": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "90": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "91": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "92": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "93": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "94": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "95": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "96": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "97": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "98": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "99": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "100": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "101": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "102": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "103": "CommandUtil::::fetchMasterAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "105": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "106": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "107": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "108": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "109": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "110": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "111": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "112": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "113": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "114": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "115": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "116": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "117": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "118": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "119": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "120": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "121": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "122": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "123": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "124": "CommandUtil::::fetchMasterAndSlaveAddrByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "126": "CommandUtil::::fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "127": "CommandUtil::::fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "128": "CommandUtil::::fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "129": "CommandUtil::::fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "130": "CommandUtil::::fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "131": "CommandUtil::::fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "132": "CommandUtil::::fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "133": "CommandUtil::::fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "134": "CommandUtil::::fetchBrokerNameByClusterName(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "136": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "137": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "138": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "139": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "140": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "141": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "142": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "143": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "144": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "145": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "146": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "147": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)",
      "148": "CommandUtil::::fetchBrokerNameByAddr(org.apache.rocketmq.tools.admin.MQAdminExt,java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "54": "CommandUtilTest::::setup()",
      "55": "CommandUtilTest::::setup()",
      "56": "CommandUtilTest::::setup()",
      "57": "CommandUtilTest::::setup()",
      "58": "CommandUtilTest::::setup()",
      "59": "CommandUtilTest::::setup()",
      "60": "CommandUtilTest::::setup()",
      "61": "CommandUtilTest::::setup()",
      "62": "CommandUtilTest::::setup()",
      "63": "CommandUtilTest::::setup()",
      "64": "CommandUtilTest::::setup()",
      "65": "CommandUtilTest::::setup()",
      "66": "CommandUtilTest::::setup()",
      "67": "CommandUtilTest::::setup()",
      "68": "CommandUtilTest::::setup()",
      "69": "CommandUtilTest::::setup()",
      "70": "CommandUtilTest::::setup()",
      "71": "CommandUtilTest::::setup()",
      "72": "CommandUtilTest::::setup()",
      "73": "CommandUtilTest::::setup()",
      "74": "CommandUtilTest::::setup()",
      "75": "CommandUtilTest::::setup()",
      "76": "CommandUtilTest::::setup()",
      "77": "CommandUtilTest::::setup()",
      "78": "CommandUtilTest::::setup()",
      "79": "CommandUtilTest::::setup()",
      "80": "CommandUtilTest::::setup()",
      "81": "CommandUtilTest::::setup()",
      "82": "CommandUtilTest::::setup()",
      "83": "CommandUtilTest::::setup()",
      "84": "CommandUtilTest::::setup()",
      "85": "CommandUtilTest::::setup()",
      "86": "CommandUtilTest::::setup()",
      "88": "CommandUtilTest::::shutdown()",
      "89": "CommandUtilTest::::shutdown()",
      "90": "CommandUtilTest::::shutdown()",
      "92": "CommandUtilTest::::testFetchMasterAndSlaveDistinguish()",
      "93": "CommandUtilTest::::testFetchMasterAndSlaveDistinguish()",
      "94": "CommandUtilTest::::testFetchMasterAndSlaveDistinguish()",
      "95": "CommandUtilTest::::testFetchMasterAndSlaveDistinguish()",
      "96": "CommandUtilTest::::testFetchMasterAndSlaveDistinguish()",
      "98": "CommandUtilTest::::testFetchMasterAddrByClusterName()",
      "99": "CommandUtilTest::::testFetchMasterAddrByClusterName()",
      "100": "CommandUtilTest::::testFetchMasterAddrByClusterName()",
      "101": "CommandUtilTest::::testFetchMasterAddrByClusterName()",
      "102": "CommandUtilTest::::testFetchMasterAddrByClusterName()",
      "104": "CommandUtilTest::::testFetchBrokerNameByClusterName()",
      "105": "CommandUtilTest::::testFetchBrokerNameByClusterName()",
      "106": "CommandUtilTest::::testFetchBrokerNameByClusterName()",
      "107": "CommandUtilTest::::testFetchBrokerNameByClusterName()",
      "108": "CommandUtilTest::::testFetchBrokerNameByClusterName()",
      "109": "CommandUtilTest::::testFetchBrokerNameByClusterName()",
      "110": "CommandUtilTest::::testFetchBrokerNameByClusterName()"
    },
    "tests": [
      {
        "test_lines": [
          92,
          96
        ],
        "covered_lines": [
          46,
          48,
          49,
          51,
          56,
          57,
          59,
          63,
          64,
          66,
          67,
          71,
          72,
          73,
          75
        ]
      },
      {
        "test_lines": [
          98,
          102
        ],
        "covered_lines": [
          81,
          83,
          85,
          87,
          88,
          89,
          90,
          92,
          93,
          97,
          102
        ]
      },
      {
        "test_lines": [
          104,
          110
        ],
        "covered_lines": [
          128,
          129,
          130,
          133
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.acl;\n",
      "\n",
      "import java.util.Set;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.OptionGroup;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.CommandUtil;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class UpdateGlobalWhiteAddrSubCommand implements SubCommand {\n",
      "\n",
      "    @Override public String commandName() {\n",
      "        return \"updateGlobalWhiteAddr\";\n",
      "    }\n",
      "\n",
      "    @Override public String commandDesc() {\n",
      "        return \"Update global white address for acl Config File in broker\";\n",
      "    }\n",
      "\n",
      "    @Override public Options buildCommandlineOptions(Options options) {\n",
      "\n",
      "        OptionGroup optionGroup = new OptionGroup();\n",
      "\n",
      "        Option opt = new Option(\"b\", \"brokerAddr\", true, \"update global white address to which broker\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"clusterName\", true, \"update global white address to which cluster\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        optionGroup.setRequired(true);\n",
      "        options.addOptionGroup(optionGroup);\n",
      "\n",
      "        opt = new Option(\"g\", \"globalWhiteRemoteAddresses\", true, \"set globalWhiteRemoteAddress list,eg: 10.10.103.*,192.168.0.*\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override public void execute(CommandLine commandLine, Options options,\n",
      "        RPCHook rpcHook) throws SubCommandException {\n",
      "\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        try {\n",
      "            // GlobalWhiteRemoteAddresses list value\n",
      "            String globalWhiteRemoteAddresses = commandLine.getOptionValue('g').trim();\n",
      "\n",
      "\n",
      "            if (commandLine.hasOption('b')) {\n",
      "                String addr = commandLine.getOptionValue('b').trim();\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "                defaultMQAdminExt.updateGlobalWhiteAddrConfig(addr, globalWhiteRemoteAddresses);\n",
      "\n",
      "                System.out.printf(\"update global white remote addresses to %s success.%n\", addr);\n",
      "                return;\n",
      "\n",
      "            } else if (commandLine.hasOption('c')) {\n",
      "                String clusterName = commandLine.getOptionValue('c').trim();\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "                Set<String> masterSet =\n",
      "                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n",
      "                for (String addr : masterSet) {\n",
      "                    defaultMQAdminExt.updateGlobalWhiteAddrConfig(addr, globalWhiteRemoteAddresses);\n",
      "                    System.out.printf(\"update global white remote addresses to %s success.%n\", addr);\n",
      "                }\n",
      "                return;\n",
      "            }\n",
      "\n",
      "            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.acl;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class UpdateGlobalWhiteAddrSubCommandTest {\n",
      "\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        UpdateGlobalWhiteAddrSubCommand cmd = new UpdateGlobalWhiteAddrSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-g 10.10.103.*,192.168.0.*\", \"-c default-cluster\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('g').trim()).isEqualTo(\"10.10.103.*,192.168.0.*\");\n",
      "        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo(\"default-cluster\");\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "UpdateGlobalWhiteAddrSubCommand::::commandName()": [
        33,
        35
      ],
      "UpdateGlobalWhiteAddrSubCommand::::commandDesc()": [
        37,
        39
      ]
    },
    "test_method_lines_dic": {
      "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()": [
        29,
        38
      ]
    },
    "reverse_method_lines_dic": {
      "33": "UpdateGlobalWhiteAddrSubCommand::::commandName()",
      "34": "UpdateGlobalWhiteAddrSubCommand::::commandName()",
      "35": "UpdateGlobalWhiteAddrSubCommand::::commandName()",
      "37": "UpdateGlobalWhiteAddrSubCommand::::commandDesc()",
      "38": "UpdateGlobalWhiteAddrSubCommand::::commandDesc()",
      "39": "UpdateGlobalWhiteAddrSubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "29": "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()",
      "30": "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()",
      "31": "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()",
      "32": "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()",
      "33": "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()",
      "34": "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()",
      "35": "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()",
      "36": "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()",
      "37": "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()",
      "38": "UpdateGlobalWhiteAddrSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          29,
          38
        ],
        "covered_lines": [
          31,
          34,
          43,
          45,
          46,
          48,
          49,
          51,
          52,
          54,
          55,
          56,
          58
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/acl/GetAccessConfigSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.acl;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.OptionGroup;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.common.AclConfig;\n",
      "import org.apache.rocketmq.common.PlainAccessConfig;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.CommandUtil;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "import java.lang.reflect.Field;\n",
      "import java.util.List;\n",
      "import java.util.Set;\n",
      "\n",
      "public class GetAccessConfigSubCommand implements SubCommand {\n",
      "    @Override public String commandName() {\n",
      "        return \"getAccessConfigSubCommand\";\n",
      "    }\n",
      "\n",
      "    @Override public String commandDesc() {\n",
      "        return \"List all of acl config information in cluster\";\n",
      "    }\n",
      "\n",
      "    @Override public Options buildCommandlineOptions(Options options) {\n",
      "        OptionGroup optionGroup = new OptionGroup();\n",
      "\n",
      "        Option opt = new Option(\"b\", \"brokerAddr\", true, \"query acl config version for which broker\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"clusterName\", true, \"query acl config version for specified cluster\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        optionGroup.setRequired(true);\n",
      "        options.addOptionGroup(optionGroup);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override public void execute(CommandLine commandLine, Options options,\n",
      "                                  RPCHook rpcHook) throws SubCommandException {\n",
      "\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        try {\n",
      "\n",
      "            if (commandLine.hasOption('b')) {\n",
      "                String addr = commandLine.getOptionValue('b').trim();\n",
      "                defaultMQAdminExt.start();\n",
      "                printClusterBaseInfo(defaultMQAdminExt, addr);\n",
      "                return;\n",
      "\n",
      "            } else if (commandLine.hasOption('c')) {\n",
      "                String clusterName = commandLine.getOptionValue('c').trim();\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "\n",
      "                Set<String> masterSet =\n",
      "                        CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n",
      "                for (String addr : masterSet) {\n",
      "                    printClusterBaseInfo(defaultMQAdminExt, addr);\n",
      "                }\n",
      "                return;\n",
      "            }\n",
      "\n",
      "            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void printClusterBaseInfo(\n",
      "            final DefaultMQAdminExt defaultMQAdminExt, final String addr) throws\n",
      "            InterruptedException, MQBrokerException, RemotingException, MQClientException, IllegalAccessException {\n",
      "        AclConfig aclConfig = defaultMQAdminExt.examineBrokerClusterAclConfig(addr);\n",
      "        List<PlainAccessConfig> configs = aclConfig.getPlainAccessConfigs();\n",
      "        List<String> globalWhiteAddrs = aclConfig.getGlobalWhiteAddrs();\n",
      "        System.out.printf(\"\\n\");\n",
      "        System.out.printf(\"%-20s: %s\\n\", \"globalWhiteRemoteAddresses\", globalWhiteAddrs.toString());\n",
      "        System.out.printf(\"\\n\");\n",
      "        System.out.printf(\"accounts:\\n\");\n",
      "        if (configs != null && configs.size() > 0) {\n",
      "            for (PlainAccessConfig config : configs) {\n",
      "                Field[] fields = config.getClass().getDeclaredFields();\n",
      "                for (Field field : fields) {\n",
      "                    field.setAccessible(true);\n",
      "                    if (field.get(config) != null) {\n",
      "                        System.out.printf(\"%-1s %-18s: %s\\n\", \"\", field.getName(), field.get(config).toString());\n",
      "                    } else {\n",
      "                        System.out.printf(\"%-1s %-18s: %s\\n\", \"\", field.getName(), \"\");\n",
      "                    }\n",
      "                }\n",
      "                System.out.printf(\"\\n\");\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.acl;\n",
      "\n",
      "import org.apache.commons.cli.*;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class GetAccessConfigSubCommandTest {\n",
      "\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        GetAccessConfigSubCommand cmd = new GetAccessConfigSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-c default-cluster\"};\n",
      "        final CommandLine commandLine =\n",
      "                ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo(\"default-cluster\");\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "GetAccessConfigSubCommand::::commandName()": [
        40,
        42
      ],
      "GetAccessConfigSubCommand::::commandDesc()": [
        44,
        46
      ],
      "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)": [
        98,
        122
      ]
    },
    "test_method_lines_dic": {
      "GetAccessConfigSubCommandTest::::testExecute()": [
        27,
        35
      ]
    },
    "reverse_method_lines_dic": {
      "40": "GetAccessConfigSubCommand::::commandName()",
      "41": "GetAccessConfigSubCommand::::commandName()",
      "42": "GetAccessConfigSubCommand::::commandName()",
      "44": "GetAccessConfigSubCommand::::commandDesc()",
      "45": "GetAccessConfigSubCommand::::commandDesc()",
      "46": "GetAccessConfigSubCommand::::commandDesc()",
      "98": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "99": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "100": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "101": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "102": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "103": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "104": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "105": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "106": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "107": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "108": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "109": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "110": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "111": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "112": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "113": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "114": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "115": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "116": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "117": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "118": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "119": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "120": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "121": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "122": "GetAccessConfigSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "27": "GetAccessConfigSubCommandTest::::testExecute()",
      "28": "GetAccessConfigSubCommandTest::::testExecute()",
      "29": "GetAccessConfigSubCommandTest::::testExecute()",
      "30": "GetAccessConfigSubCommandTest::::testExecute()",
      "31": "GetAccessConfigSubCommandTest::::testExecute()",
      "32": "GetAccessConfigSubCommandTest::::testExecute()",
      "33": "GetAccessConfigSubCommandTest::::testExecute()",
      "34": "GetAccessConfigSubCommandTest::::testExecute()",
      "35": "GetAccessConfigSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          27,
          35
        ],
        "covered_lines": [
          39,
          41,
          49,
          51,
          52,
          54,
          55,
          57,
          58,
          60
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.acl;\n",
      "\n",
      "import java.sql.Timestamp;\n",
      "import java.text.DateFormat;\n",
      "import java.text.SimpleDateFormat;\n",
      "import java.util.Set;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.OptionGroup;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.common.DataVersion;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.protocol.body.ClusterAclVersionInfo;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.CommandUtil;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class ClusterAclConfigVersionListSubCommand implements SubCommand {\n",
      "\n",
      "    @Override public String commandName() {\n",
      "        return \"clusterAclConfigVersion\";\n",
      "    }\n",
      "\n",
      "    @Override public String commandDesc() {\n",
      "        return \"List all of acl config version information in cluster\";\n",
      "    }\n",
      "\n",
      "    @Override public Options buildCommandlineOptions(Options options) {\n",
      "        OptionGroup optionGroup = new OptionGroup();\n",
      "\n",
      "        Option opt = new Option(\"b\", \"brokerAddr\", true, \"query acl config version for which broker\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"clusterName\", true, \"query acl config version for specified cluster\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        optionGroup.setRequired(true);\n",
      "        options.addOptionGroup(optionGroup);\n",
      "        \n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override public void execute(CommandLine commandLine, Options options,\n",
      "        RPCHook rpcHook) throws SubCommandException {\n",
      "\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        try {\n",
      "\n",
      "            if (commandLine.hasOption('b')) {\n",
      "                String addr = commandLine.getOptionValue('b').trim();\n",
      "                defaultMQAdminExt.start();\n",
      "                printClusterBaseInfo(defaultMQAdminExt, addr);\n",
      "\n",
      "                System.out.printf(\"get broker's plain access config version success.%n\", addr);\n",
      "                return;\n",
      "\n",
      "            } else if (commandLine.hasOption('c')) {\n",
      "                String clusterName = commandLine.getOptionValue('c').trim();\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "\n",
      "                Set<String> masterSet =\n",
      "                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n",
      "                System.out.printf(\"%-16s  %-22s  %-22s  %-20s  %-22s%n\",\n",
      "                    \"#Cluster Name\",\n",
      "                    \"#Broker Name\",\n",
      "                    \"#Broker Addr\",\n",
      "                    \"#AclConfigVersionNum\",\n",
      "                    \"#AclLastUpdateTime\"\n",
      "                );\n",
      "                for (String addr : masterSet) {\n",
      "                    printClusterBaseInfo(defaultMQAdminExt, addr);\n",
      "                }\n",
      "                System.out.printf(\"get cluster's plain access config version success.%n\");\n",
      "\n",
      "                return;\n",
      "            }\n",
      "\n",
      "            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void printClusterBaseInfo(\n",
      "        final DefaultMQAdminExt defaultMQAdminExt, final String addr) throws\n",
      "        InterruptedException, MQBrokerException, RemotingException, MQClientException {\n",
      "\n",
      "\n",
      "        ClusterAclVersionInfo clusterAclVersionInfo = defaultMQAdminExt.examineBrokerClusterAclVersionInfo(addr);\n",
      "        DataVersion aclDataVersion = clusterAclVersionInfo.getAclConfigDataVersion();\n",
      "        String versionNum = String.valueOf(aclDataVersion.getCounter());\n",
      "\n",
      "        DateFormat sdf = new SimpleDateFormat(UtilAll.YYYY_MM_DD_HH_MM_SS);\n",
      "        String timeStampStr = sdf.format(new Timestamp(aclDataVersion.getTimestamp()));\n",
      "\n",
      "        System.out.printf(\"%-16s  %-22s  %-22s  %-20s  %-22s%n\",\n",
      "            clusterAclVersionInfo.getClusterName(),\n",
      "            clusterAclVersionInfo.getBrokerName(),\n",
      "            clusterAclVersionInfo.getBrokerAddr(),\n",
      "            versionNum,\n",
      "            timeStampStr\n",
      "        );\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.acl;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class ClusterAclConfigVersionListSubCommandTest {\n",
      "\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        ClusterAclConfigVersionListSubCommand cmd = new ClusterAclConfigVersionListSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-c default-cluster\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo(\"default-cluster\");\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ClusterAclConfigVersionListSubCommand::::commandName()": [
        42,
        44
      ],
      "ClusterAclConfigVersionListSubCommand::::commandDesc()": [
        46,
        48
      ],
      "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)": [
        111,
        130
      ]
    },
    "test_method_lines_dic": {
      "ClusterAclConfigVersionListSubCommandTest::::testExecute()": [
        29,
        37
      ]
    },
    "reverse_method_lines_dic": {
      "42": "ClusterAclConfigVersionListSubCommand::::commandName()",
      "43": "ClusterAclConfigVersionListSubCommand::::commandName()",
      "44": "ClusterAclConfigVersionListSubCommand::::commandName()",
      "46": "ClusterAclConfigVersionListSubCommand::::commandDesc()",
      "47": "ClusterAclConfigVersionListSubCommand::::commandDesc()",
      "48": "ClusterAclConfigVersionListSubCommand::::commandDesc()",
      "111": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "112": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "113": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "114": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "115": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "116": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "117": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "118": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "119": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "120": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "121": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "122": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "123": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "124": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "125": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "126": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "127": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "128": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "129": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)",
      "130": "ClusterAclConfigVersionListSubCommand::::printClusterBaseInfo(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "29": "ClusterAclConfigVersionListSubCommandTest::::testExecute()",
      "30": "ClusterAclConfigVersionListSubCommandTest::::testExecute()",
      "31": "ClusterAclConfigVersionListSubCommandTest::::testExecute()",
      "32": "ClusterAclConfigVersionListSubCommandTest::::testExecute()",
      "33": "ClusterAclConfigVersionListSubCommandTest::::testExecute()",
      "34": "ClusterAclConfigVersionListSubCommandTest::::testExecute()",
      "35": "ClusterAclConfigVersionListSubCommandTest::::testExecute()",
      "36": "ClusterAclConfigVersionListSubCommandTest::::testExecute()",
      "37": "ClusterAclConfigVersionListSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          29,
          37
        ],
        "covered_lines": [
          40,
          43,
          51,
          53,
          54,
          56,
          57,
          59,
          60,
          62
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.acl;\n",
      "\n",
      "import java.util.Set;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.OptionGroup;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.CommandUtil;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class DeleteAccessConfigSubCommand implements SubCommand {\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"deleteAccessConfig\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Delete Acl Config Account in broker\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        OptionGroup optionGroup = new OptionGroup();\n",
      "\n",
      "        Option opt = new Option(\"b\", \"brokerAddr\", true, \"delete acl config account to which broker\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"clusterName\", true, \"delete cl config account to which cluster\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        optionGroup.setRequired(true);\n",
      "        options.addOptionGroup(optionGroup);\n",
      "\n",
      "        opt = new Option(\"a\", \"accessKey\", true, \"set accessKey in acl config file for deleting which account\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override public void execute(CommandLine commandLine, Options options,\n",
      "        RPCHook rpcHook) throws SubCommandException {\n",
      "\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        try {\n",
      "\n",
      "            String accessKey = commandLine.getOptionValue('a').trim();\n",
      "\n",
      "            if (commandLine.hasOption('b')) {\n",
      "                String addr = commandLine.getOptionValue('b').trim();\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "                defaultMQAdminExt.deletePlainAccessConfig(addr, accessKey);\n",
      "\n",
      "                System.out.printf(\"delete plain access config account to %s success.%n\", addr);\n",
      "                System.out.printf(\"account's accesskey is:%s\", accessKey);\n",
      "                return;\n",
      "\n",
      "            } else if (commandLine.hasOption('c')) {\n",
      "                String clusterName = commandLine.getOptionValue('c').trim();\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "\n",
      "                Set<String> masterSet =\n",
      "                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n",
      "                for (String addr : masterSet) {\n",
      "                    defaultMQAdminExt.deletePlainAccessConfig(addr, accessKey);\n",
      "                    System.out.printf(\"delete plain access config account to %s success.%n\", addr);\n",
      "                }\n",
      "\n",
      "                System.out.printf(\"account's accesskey is:%s\", accessKey);\n",
      "                return;\n",
      "            }\n",
      "\n",
      "            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.acl;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class DeleteAccessConfigSubCommandTest {\n",
      "\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        DeleteAccessConfigSubCommand cmd = new DeleteAccessConfigSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-a unit-test\", \"-c default-cluster\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('a').trim()).isEqualTo(\"unit-test\");\n",
      "        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo(\"default-cluster\");\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "DeleteAccessConfigSubCommand::::commandName()": [
        33,
        36
      ],
      "DeleteAccessConfigSubCommand::::commandDesc()": [
        38,
        41
      ]
    },
    "test_method_lines_dic": {
      "DeleteAccessConfigSubCommandTest::::testExecute()": [
        29,
        38
      ]
    },
    "reverse_method_lines_dic": {
      "33": "DeleteAccessConfigSubCommand::::commandName()",
      "34": "DeleteAccessConfigSubCommand::::commandName()",
      "35": "DeleteAccessConfigSubCommand::::commandName()",
      "36": "DeleteAccessConfigSubCommand::::commandName()",
      "38": "DeleteAccessConfigSubCommand::::commandDesc()",
      "39": "DeleteAccessConfigSubCommand::::commandDesc()",
      "40": "DeleteAccessConfigSubCommand::::commandDesc()",
      "41": "DeleteAccessConfigSubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "29": "DeleteAccessConfigSubCommandTest::::testExecute()",
      "30": "DeleteAccessConfigSubCommandTest::::testExecute()",
      "31": "DeleteAccessConfigSubCommandTest::::testExecute()",
      "32": "DeleteAccessConfigSubCommandTest::::testExecute()",
      "33": "DeleteAccessConfigSubCommandTest::::testExecute()",
      "34": "DeleteAccessConfigSubCommandTest::::testExecute()",
      "35": "DeleteAccessConfigSubCommandTest::::testExecute()",
      "36": "DeleteAccessConfigSubCommandTest::::testExecute()",
      "37": "DeleteAccessConfigSubCommandTest::::testExecute()",
      "38": "DeleteAccessConfigSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          29,
          38
        ],
        "covered_lines": [
          31,
          35,
          45,
          47,
          48,
          50,
          51,
          53,
          54,
          56,
          57,
          58,
          60
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.acl;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import java.util.Set;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.OptionGroup;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.common.PlainAccessConfig;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.CommandUtil;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class UpdateAccessConfigSubCommand implements SubCommand {\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"updateAclConfig\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Update acl config yaml file in broker\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        OptionGroup optionGroup = new OptionGroup();\n",
      "\n",
      "        Option opt = new Option(\"b\", \"brokerAddr\", true, \"update acl config file to which broker\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"clusterName\", true, \"update cl config file to which cluster\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        optionGroup.setRequired(true);\n",
      "        options.addOptionGroup(optionGroup);\n",
      "\n",
      "        opt = new Option(\"a\", \"accessKey\", true, \"set accessKey in acl config file\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"s\", \"secretKey\", true, \"set secretKey in acl config file\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"w\", \"whiteRemoteAddress\", true, \"set white ip Address for account in acl config file\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"i\", \"defaultTopicPerm\", true, \"set default topicPerm in acl config file\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"u\", \"defaultGroupPerm\", true, \"set default GroupPerm in acl config file\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"t\", \"topicPerms\", true, \"set topicPerms list,eg: topicA=DENY,topicD=SUB\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"g\", \"groupPerms\", true, \"set groupPerms list,eg: groupD=DENY,groupD=SUB\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"m\", \"admin\", true, \"set admin flag in acl config file\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(CommandLine commandLine, Options options,\n",
      "        RPCHook rpcHook) throws SubCommandException {\n",
      "\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        try {\n",
      "            PlainAccessConfig accessConfig = new PlainAccessConfig();\n",
      "            accessConfig.setAccessKey(commandLine.getOptionValue('a').trim());\n",
      "            // Secretkey\n",
      "            if (commandLine.hasOption('s')) {\n",
      "                accessConfig.setSecretKey(commandLine.getOptionValue('s').trim());\n",
      "            }\n",
      "\n",
      "            // Admin\n",
      "            if (commandLine.hasOption('m')) {\n",
      "                accessConfig.setAdmin(Boolean.parseBoolean(commandLine.getOptionValue('m').trim()));\n",
      "            }\n",
      "\n",
      "            // DefaultTopicPerm\n",
      "            if (commandLine.hasOption('i')) {\n",
      "                accessConfig.setDefaultTopicPerm(commandLine.getOptionValue('i').trim());\n",
      "            }\n",
      "\n",
      "            // DefaultGroupPerm\n",
      "            if (commandLine.hasOption('u')) {\n",
      "                accessConfig.setDefaultGroupPerm(commandLine.getOptionValue('u').trim());\n",
      "            }\n",
      "\n",
      "            // WhiteRemoteAddress\n",
      "            if (commandLine.hasOption('w')) {\n",
      "                accessConfig.setWhiteRemoteAddress(commandLine.getOptionValue('w').trim());\n",
      "            }\n",
      "\n",
      "            // TopicPerms list value\n",
      "            if (commandLine.hasOption('t')) {\n",
      "                String[] topicPerms = commandLine.getOptionValue('t').trim().split(\",\");\n",
      "                List<String> topicPermList = new ArrayList<String>();\n",
      "                if (topicPerms != null) {\n",
      "                    for (String topicPerm : topicPerms) {\n",
      "                        topicPermList.add(topicPerm);\n",
      "                    }\n",
      "                }\n",
      "                accessConfig.setTopicPerms(topicPermList);\n",
      "            }\n",
      "\n",
      "            // GroupPerms list value\n",
      "            if (commandLine.hasOption('g')) {\n",
      "                String[] groupPerms = commandLine.getOptionValue('g').trim().split(\",\");\n",
      "                List<String> groupPermList = new ArrayList<String>();\n",
      "                if (groupPerms != null) {\n",
      "                    for (String groupPerm : groupPerms) {\n",
      "                        groupPermList.add(groupPerm);\n",
      "                    }\n",
      "                }\n",
      "                accessConfig.setGroupPerms(groupPermList);\n",
      "            }\n",
      "\n",
      "            if (commandLine.hasOption('b')) {\n",
      "                String addr = commandLine.getOptionValue('b').trim();\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "                defaultMQAdminExt.createAndUpdatePlainAccessConfig(addr, accessConfig);\n",
      "\n",
      "                System.out.printf(\"create or update plain access config to %s success.%n\", addr);\n",
      "                System.out.printf(\"%s\", accessConfig);\n",
      "                return;\n",
      "\n",
      "            } else if (commandLine.hasOption('c')) {\n",
      "                String clusterName = commandLine.getOptionValue('c').trim();\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "                Set<String> masterSet =\n",
      "                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n",
      "                for (String addr : masterSet) {\n",
      "                    defaultMQAdminExt.createAndUpdatePlainAccessConfig(addr, accessConfig);\n",
      "                    System.out.printf(\"create or update plain access config to %s success.%n\", addr);\n",
      "                }\n",
      "\n",
      "                System.out.printf(\"%s\", accessConfig);\n",
      "                return;\n",
      "            }\n",
      "\n",
      "            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.acl;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.common.PlainAccessConfig;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class UpdateAccessConfigSubCommandTest {\n",
      "\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        UpdateAccessConfigSubCommand cmd = new UpdateAccessConfigSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\n",
      "            \"-b 127.0.0.1:10911\",\n",
      "            \"-a RocketMQ\",\n",
      "            \"-s 12345678\",\n",
      "            \"-w 192.168.0.*\",\n",
      "            \"-i DENY\",\n",
      "            \"-u SUB\",\n",
      "            \"-t topicA=DENY;topicB=PUB|SUB\",\n",
      "            \"-g groupA=DENY;groupB=SUB\",\n",
      "            \"-m true\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('b').trim()).isEqualTo(\"127.0.0.1:10911\");\n",
      "        assertThat(commandLine.getOptionValue('a').trim()).isEqualTo(\"RocketMQ\");\n",
      "        assertThat(commandLine.getOptionValue('s').trim()).isEqualTo(\"12345678\");\n",
      "        assertThat(commandLine.getOptionValue('w').trim()).isEqualTo(\"192.168.0.*\");\n",
      "        assertThat(commandLine.getOptionValue('i').trim()).isEqualTo(\"DENY\");\n",
      "        assertThat(commandLine.getOptionValue('u').trim()).isEqualTo(\"SUB\");\n",
      "        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"topicA=DENY;topicB=PUB|SUB\");\n",
      "        assertThat(commandLine.getOptionValue('g').trim()).isEqualTo(\"groupA=DENY;groupB=SUB\");\n",
      "        assertThat(commandLine.getOptionValue('m').trim()).isEqualTo(\"true\");\n",
      "\n",
      "        PlainAccessConfig accessConfig = new PlainAccessConfig();\n",
      "\n",
      "        // topicPerms list value\n",
      "        if (commandLine.hasOption('t')) {\n",
      "            String[] topicPerms = commandLine.getOptionValue('t').trim().split(\";\");\n",
      "            List<String> topicPermList = new ArrayList<String>();\n",
      "            if (topicPerms != null) {\n",
      "                for (String topicPerm : topicPerms) {\n",
      "                    topicPermList.add(topicPerm);\n",
      "                }\n",
      "            }\n",
      "            accessConfig.setTopicPerms(topicPermList);\n",
      "        }\n",
      "\n",
      "        // groupPerms list value\n",
      "        if (commandLine.hasOption('g')) {\n",
      "            String[] groupPerms = commandLine.getOptionValue('g').trim().split(\";\");\n",
      "            List<String> groupPermList = new ArrayList<String>();\n",
      "            if (groupPerms != null) {\n",
      "                for (String groupPerm : groupPerms) {\n",
      "                    groupPermList.add(groupPerm);\n",
      "                }\n",
      "            }\n",
      "            accessConfig.setGroupPerms(groupPermList);\n",
      "        }\n",
      "\n",
      "        Assert.assertTrue(accessConfig.getTopicPerms().contains(\"topicB=PUB|SUB\"));\n",
      "        Assert.assertTrue(accessConfig.getGroupPerms().contains(\"groupB=SUB\"));\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "UpdateAccessConfigSubCommand::::commandName()": [
        36,
        39
      ],
      "UpdateAccessConfigSubCommand::::commandDesc()": [
        41,
        44
      ]
    },
    "test_method_lines_dic": {
      "UpdateAccessConfigSubCommandTest::::testExecute()": [
        33,
        88
      ]
    },
    "reverse_method_lines_dic": {
      "36": "UpdateAccessConfigSubCommand::::commandName()",
      "37": "UpdateAccessConfigSubCommand::::commandName()",
      "38": "UpdateAccessConfigSubCommand::::commandName()",
      "39": "UpdateAccessConfigSubCommand::::commandName()",
      "41": "UpdateAccessConfigSubCommand::::commandDesc()",
      "42": "UpdateAccessConfigSubCommand::::commandDesc()",
      "43": "UpdateAccessConfigSubCommand::::commandDesc()",
      "44": "UpdateAccessConfigSubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "33": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "34": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "35": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "36": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "37": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "38": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "39": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "40": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "41": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "42": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "43": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "44": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "45": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "46": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "47": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "48": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "49": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "50": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "51": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "52": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "53": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "54": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "55": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "56": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "57": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "58": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "59": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "60": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "61": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "62": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "63": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "64": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "65": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "66": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "67": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "68": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "69": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "70": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "71": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "72": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "73": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "74": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "75": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "76": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "77": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "78": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "79": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "80": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "81": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "82": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "83": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "84": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "85": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "86": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "87": "UpdateAccessConfigSubCommandTest::::testExecute()",
      "88": "UpdateAccessConfigSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          33,
          88
        ],
        "covered_lines": [
          34,
          38,
          48,
          50,
          51,
          53,
          54,
          56,
          57,
          59,
          60,
          61,
          63,
          64,
          65,
          67,
          68,
          69,
          71,
          72,
          73,
          75,
          76,
          77,
          79,
          80,
          81,
          83,
          84,
          85,
          87,
          88,
          89,
          91
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/broker/SendMsgStatusCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.broker;\n",
      "\n",
      "import java.io.UnsupportedEncodingException;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.client.producer.DefaultMQProducer;\n",
      "import org.apache.rocketmq.client.producer.SendResult;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.message.Message;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class SendMsgStatusCommand implements SubCommand {\n",
      "\n",
      "    private static Message buildMessage(final String topic, final int messageSize) throws UnsupportedEncodingException {\n",
      "        Message msg = new Message();\n",
      "        msg.setTopic(topic);\n",
      "\n",
      "        StringBuilder sb = new StringBuilder();\n",
      "        for (int i = 0; i < messageSize; i += 11) {\n",
      "            sb.append(\"hello jodie\");\n",
      "        }\n",
      "        msg.setBody(sb.toString().getBytes(MixAll.DEFAULT_CHARSET));\n",
      "        return msg;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"sendMsgStatus\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"send msg to broker.\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"b\", \"brokerName\", true, \"Broker Name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"s\", \"messageSize\", true, \"Message Size, Default: 128\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"count\", true, \"send message count, Default: 50\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {\n",
      "        final DefaultMQProducer producer = new DefaultMQProducer(\"PID_SMSC\", rpcHook);\n",
      "        producer.setInstanceName(\"PID_SMSC_\" + System.currentTimeMillis());\n",
      "\n",
      "        try {\n",
      "            producer.start();\n",
      "            String brokerName = commandLine.getOptionValue('b').trim();\n",
      "            int messageSize = commandLine.hasOption('s') ? Integer.parseInt(commandLine.getOptionValue('s')) : 128;\n",
      "            int count = commandLine.hasOption('c') ? Integer.parseInt(commandLine.getOptionValue('c')) : 50;\n",
      "\n",
      "            producer.send(buildMessage(brokerName, 16));\n",
      "\n",
      "            for (int i = 0; i < count; i++) {\n",
      "                long begin = System.currentTimeMillis();\n",
      "                SendResult result = producer.send(buildMessage(brokerName, messageSize));\n",
      "                System.out.printf(\"rt:\" + (System.currentTimeMillis() - begin) + \"ms, SendResult=%s\", result);\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            producer.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.broker;\n",
      "\n",
      "import java.lang.reflect.Field;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.client.ClientConfig;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.impl.MQClientAPIImpl;\n",
      "import org.apache.rocketmq.client.impl.MQClientManager;\n",
      "import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingConnectException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExtImpl;\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class SendMsgStatusCommandTest {\n",
      "    private static DefaultMQAdminExt defaultMQAdminExt;\n",
      "    private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;\n",
      "    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());\n",
      "    private static MQClientAPIImpl mQClientAPIImpl;\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void init() throws NoSuchFieldException, IllegalAccessException, InterruptedException, RemotingTimeoutException, MQClientException, RemotingSendRequestException, RemotingConnectException, MQBrokerException {\n",
      "        mQClientAPIImpl = mock(MQClientAPIImpl.class);\n",
      "        defaultMQAdminExt = new DefaultMQAdminExt();\n",
      "        defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(defaultMQAdminExt, 1000);\n",
      "\n",
      "        Field field = DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExtImpl, mqClientInstance);\n",
      "        field = MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(mqClientInstance, mQClientAPIImpl);\n",
      "        field = DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExt, defaultMQAdminExtImpl);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void terminate() {\n",
      "        defaultMQAdminExt.shutdown();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        SendMsgStatusCommand cmd = new SendMsgStatusCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-b 127.0.0.1:10911\", \"-s 1024 -c 10\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        //cmd.execute(commandLine, options, null);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "SendMsgStatusCommand::::buildMessage(java.lang.String,int)": [
        33,
        43
      ],
      "SendMsgStatusCommand::::commandName()": [
        45,
        48
      ],
      "SendMsgStatusCommand::::commandDesc()": [
        50,
        53
      ]
    },
    "test_method_lines_dic": {
      "SendMsgStatusCommandTest::::init()": [
        47,
        62
      ],
      "SendMsgStatusCommandTest::::terminate()": [
        64,
        67
      ],
      "SendMsgStatusCommandTest::::testExecute()": [
        69,
        77
      ]
    },
    "reverse_method_lines_dic": {
      "33": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "34": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "35": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "36": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "37": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "38": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "39": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "40": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "41": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "42": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "43": "SendMsgStatusCommand::::buildMessage(java.lang.String,int)",
      "45": "SendMsgStatusCommand::::commandName()",
      "46": "SendMsgStatusCommand::::commandName()",
      "47": "SendMsgStatusCommand::::commandName()",
      "48": "SendMsgStatusCommand::::commandName()",
      "50": "SendMsgStatusCommand::::commandDesc()",
      "51": "SendMsgStatusCommand::::commandDesc()",
      "52": "SendMsgStatusCommand::::commandDesc()",
      "53": "SendMsgStatusCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "47": "SendMsgStatusCommandTest::::init()",
      "48": "SendMsgStatusCommandTest::::init()",
      "49": "SendMsgStatusCommandTest::::init()",
      "50": "SendMsgStatusCommandTest::::init()",
      "51": "SendMsgStatusCommandTest::::init()",
      "52": "SendMsgStatusCommandTest::::init()",
      "53": "SendMsgStatusCommandTest::::init()",
      "54": "SendMsgStatusCommandTest::::init()",
      "55": "SendMsgStatusCommandTest::::init()",
      "56": "SendMsgStatusCommandTest::::init()",
      "57": "SendMsgStatusCommandTest::::init()",
      "58": "SendMsgStatusCommandTest::::init()",
      "59": "SendMsgStatusCommandTest::::init()",
      "60": "SendMsgStatusCommandTest::::init()",
      "61": "SendMsgStatusCommandTest::::init()",
      "62": "SendMsgStatusCommandTest::::init()",
      "64": "SendMsgStatusCommandTest::::terminate()",
      "65": "SendMsgStatusCommandTest::::terminate()",
      "66": "SendMsgStatusCommandTest::::terminate()",
      "67": "SendMsgStatusCommandTest::::terminate()",
      "69": "SendMsgStatusCommandTest::::testExecute()",
      "70": "SendMsgStatusCommandTest::::testExecute()",
      "71": "SendMsgStatusCommandTest::::testExecute()",
      "72": "SendMsgStatusCommandTest::::testExecute()",
      "73": "SendMsgStatusCommandTest::::testExecute()",
      "74": "SendMsgStatusCommandTest::::testExecute()",
      "75": "SendMsgStatusCommandTest::::testExecute()",
      "76": "SendMsgStatusCommandTest::::testExecute()",
      "77": "SendMsgStatusCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          69,
          77
        ],
        "covered_lines": [
          31,
          47,
          57,
          58,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommad.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.broker;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.Date;\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.admin.ConsumeStats;\n",
      "import org.apache.rocketmq.common.admin.OffsetWrapper;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumeStatsList;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class BrokerConsumeStatsSubCommad implements SubCommand {\n",
      "\n",
      "    private DefaultMQAdminExt defaultMQAdminExt;\n",
      "\n",
      "    private DefaultMQAdminExt createMQAdminExt(RPCHook rpcHook) throws SubCommandException {\n",
      "        if (this.defaultMQAdminExt != null) {\n",
      "            return defaultMQAdminExt;\n",
      "        } else {\n",
      "            defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "            defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "            try {\n",
      "                defaultMQAdminExt.start();\n",
      "            }\n",
      "            catch (Exception e) {\n",
      "                throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "            }\n",
      "            return defaultMQAdminExt;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"brokerConsumeStats\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Fetch broker consume stats data\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"b\", \"brokerAddr\", true, \"Broker address\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"t\", \"timeoutMillis\", true, \"request timeout Millis\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"l\", \"level\", true, \"threshold of print diff\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"o\", \"order\", true, \"order topic\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {\n",
      "        try {\n",
      "            defaultMQAdminExt =  createMQAdminExt(rpcHook);\n",
      "\n",
      "            String brokerAddr = commandLine.getOptionValue('b').trim();\n",
      "            boolean isOrder = false;\n",
      "            long timeoutMillis = 50000;\n",
      "            long diffLevel = 0;\n",
      "            if (commandLine.hasOption('o')) {\n",
      "                isOrder = Boolean.parseBoolean(commandLine.getOptionValue('o').trim());\n",
      "            }\n",
      "            if (commandLine.hasOption('t')) {\n",
      "                timeoutMillis = Long.parseLong(commandLine.getOptionValue('t').trim());\n",
      "            }\n",
      "            if (commandLine.hasOption('l')) {\n",
      "                diffLevel = Long.parseLong(commandLine.getOptionValue('l').trim());\n",
      "            }\n",
      "\n",
      "            ConsumeStatsList consumeStatsList = defaultMQAdminExt.fetchConsumeStatsInBroker(brokerAddr, isOrder, timeoutMillis);\n",
      "            System.out.printf(\"%-32s  %-32s  %-32s  %-4s  %-20s  %-20s  %-20s  %s%n\",\n",
      "                \"#Topic\",\n",
      "                \"#Group\",\n",
      "                \"#Broker Name\",\n",
      "                \"#QID\",\n",
      "                \"#Broker Offset\",\n",
      "                \"#Consumer Offset\",\n",
      "                \"#Diff\",\n",
      "                \"#LastTime\");\n",
      "            for (Map<String, List<ConsumeStats>> map : consumeStatsList.getConsumeStatsList()) {\n",
      "                for (Map.Entry<String, List<ConsumeStats>> entry : map.entrySet()) {\n",
      "                    String group = entry.getKey();\n",
      "                    List<ConsumeStats> consumeStatsArray = entry.getValue();\n",
      "                    for (ConsumeStats consumeStats : consumeStatsArray) {\n",
      "                        List<MessageQueue> mqList = new LinkedList<MessageQueue>();\n",
      "                        mqList.addAll(consumeStats.getOffsetTable().keySet());\n",
      "                        Collections.sort(mqList);\n",
      "                        for (MessageQueue mq : mqList) {\n",
      "                            OffsetWrapper offsetWrapper = consumeStats.getOffsetTable().get(mq);\n",
      "                            long diff = offsetWrapper.getBrokerOffset() - offsetWrapper.getConsumerOffset();\n",
      "\n",
      "                            if (diff < diffLevel) {\n",
      "                                continue;\n",
      "                            }\n",
      "                            String lastTime = \"-\";\n",
      "                            try {\n",
      "                                lastTime = UtilAll.formatDate(new Date(offsetWrapper.getLastTimestamp()), UtilAll.YYYY_MM_DD_HH_MM_SS);\n",
      "                            } catch (Exception ignored) {\n",
      "\n",
      "                            }\n",
      "                            if (offsetWrapper.getLastTimestamp() > 0)\n",
      "                                System.out.printf(\"%-32s  %-32s  %-32s  %-4d  %-20d  %-20d  %-20d  %s%n\",\n",
      "                                    UtilAll.frontStringAtLeast(mq.getTopic(), 32),\n",
      "                                    group,\n",
      "                                    UtilAll.frontStringAtLeast(mq.getBrokerName(), 32),\n",
      "                                    mq.getQueueId(),\n",
      "                                    offsetWrapper.getBrokerOffset(),\n",
      "                                    offsetWrapper.getConsumerOffset(),\n",
      "                                    diff,\n",
      "                                    lastTime\n",
      "                                );\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "            System.out.printf(\"%nDiff Total: %d%n\", consumeStatsList.getTotalDiff());\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.broker;\n",
      "\n",
      "import java.lang.reflect.Field;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.client.ClientConfig;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.impl.MQClientAPIImpl;\n",
      "import org.apache.rocketmq.client.impl.MQClientManager;\n",
      "import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n",
      "import org.apache.rocketmq.common.admin.ConsumeStats;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumeStatsList;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingConnectException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExtImpl;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.mockito.ArgumentMatchers.anyBoolean;\n",
      "import static org.mockito.ArgumentMatchers.anyLong;\n",
      "import static org.mockito.ArgumentMatchers.anyString;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class BrokerConsumeStatsSubCommadTest {\n",
      "\n",
      "    private static BrokerConsumeStatsSubCommad cmd = new BrokerConsumeStatsSubCommad();\n",
      "\n",
      "    private static DefaultMQAdminExt defaultMQAdminExt;\n",
      "    private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;\n",
      "    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());\n",
      "    private static MQClientAPIImpl mQClientAPIImpl;\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void init() throws NoSuchFieldException, IllegalAccessException, InterruptedException, RemotingTimeoutException, MQClientException, RemotingSendRequestException, RemotingConnectException {\n",
      "        mQClientAPIImpl = mock(MQClientAPIImpl.class);\n",
      "        defaultMQAdminExt = new DefaultMQAdminExt();\n",
      "        defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(defaultMQAdminExt, 1000);\n",
      "\n",
      "        Field field = DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExtImpl, mqClientInstance);\n",
      "        field = MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(mqClientInstance, mQClientAPIImpl);\n",
      "        field = DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExt, defaultMQAdminExtImpl);\n",
      "\n",
      "        ConsumeStatsList consumeStatsList = new ConsumeStatsList();\n",
      "        consumeStatsList.setBrokerAddr(\"127.0l.0.1:10911\");\n",
      "        consumeStatsList.setConsumeStatsList(new ArrayList<Map<String, List<ConsumeStats>>>());\n",
      "        consumeStatsList.setTotalDiff(123);\n",
      "        when(mQClientAPIImpl.fetchConsumeStatsInBroker(anyString(), anyBoolean(), anyLong())).thenReturn(consumeStatsList);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void terminate() {\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecute() throws SubCommandException, IllegalAccessException, NoSuchFieldException {\n",
      "\n",
      "        Field field = BrokerConsumeStatsSubCommad.class.getDeclaredField(\"defaultMQAdminExt\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(cmd, defaultMQAdminExt);\n",
      "\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-b 127.0.0.1:10911\", \"-t 3000\", \"-l 5\", \"-o true\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        cmd.execute(commandLine, options, null);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BrokerConsumeStatsSubCommad::::commandName()": [
        57,
        60
      ],
      "BrokerConsumeStatsSubCommad::::commandDesc()": [
        62,
        65
      ]
    },
    "test_method_lines_dic": {
      "BrokerConsumeStatsSubCommadTest::::init()": [
        59,
        80
      ],
      "BrokerConsumeStatsSubCommadTest::::terminate()": [
        82,
        84
      ],
      "BrokerConsumeStatsSubCommadTest::::testExecute()": [
        86,
        98
      ]
    },
    "reverse_method_lines_dic": {
      "57": "BrokerConsumeStatsSubCommad::::commandName()",
      "58": "BrokerConsumeStatsSubCommad::::commandName()",
      "59": "BrokerConsumeStatsSubCommad::::commandName()",
      "60": "BrokerConsumeStatsSubCommad::::commandName()",
      "62": "BrokerConsumeStatsSubCommad::::commandDesc()",
      "63": "BrokerConsumeStatsSubCommad::::commandDesc()",
      "64": "BrokerConsumeStatsSubCommad::::commandDesc()",
      "65": "BrokerConsumeStatsSubCommad::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "59": "BrokerConsumeStatsSubCommadTest::::init()",
      "60": "BrokerConsumeStatsSubCommadTest::::init()",
      "61": "BrokerConsumeStatsSubCommadTest::::init()",
      "62": "BrokerConsumeStatsSubCommadTest::::init()",
      "63": "BrokerConsumeStatsSubCommadTest::::init()",
      "64": "BrokerConsumeStatsSubCommadTest::::init()",
      "65": "BrokerConsumeStatsSubCommadTest::::init()",
      "66": "BrokerConsumeStatsSubCommadTest::::init()",
      "67": "BrokerConsumeStatsSubCommadTest::::init()",
      "68": "BrokerConsumeStatsSubCommadTest::::init()",
      "69": "BrokerConsumeStatsSubCommadTest::::init()",
      "70": "BrokerConsumeStatsSubCommadTest::::init()",
      "71": "BrokerConsumeStatsSubCommadTest::::init()",
      "72": "BrokerConsumeStatsSubCommadTest::::init()",
      "73": "BrokerConsumeStatsSubCommadTest::::init()",
      "74": "BrokerConsumeStatsSubCommadTest::::init()",
      "75": "BrokerConsumeStatsSubCommadTest::::init()",
      "76": "BrokerConsumeStatsSubCommadTest::::init()",
      "77": "BrokerConsumeStatsSubCommadTest::::init()",
      "78": "BrokerConsumeStatsSubCommadTest::::init()",
      "79": "BrokerConsumeStatsSubCommadTest::::init()",
      "80": "BrokerConsumeStatsSubCommadTest::::init()",
      "82": "BrokerConsumeStatsSubCommadTest::::terminate()",
      "83": "BrokerConsumeStatsSubCommadTest::::terminate()",
      "84": "BrokerConsumeStatsSubCommadTest::::terminate()",
      "86": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "87": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "88": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "89": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "90": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "91": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "92": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "93": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "94": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "95": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "96": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "97": "BrokerConsumeStatsSubCommadTest::::testExecute()",
      "98": "BrokerConsumeStatsSubCommadTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          86,
          98
        ],
        "covered_lines": [
          37,
          42,
          43,
          59,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          81,
          82,
          83,
          85,
          91,
          93,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          103,
          104,
          107,
          108,
          117,
          153,
          157,
          158,
          159
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/offset/ResetOffsetByTimeOldCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.tools.command.offset;\n",
      "\n",
      "import java.util.Date;\n",
      "import java.util.List;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.admin.RollbackStats;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class ResetOffsetByTimeOldCommand implements SubCommand {\n",
      "    public static void resetOffset(DefaultMQAdminExt defaultMQAdminExt, String consumerGroup, String topic,\n",
      "        long timestamp, boolean force,\n",
      "        String timeStampStr) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "        List<RollbackStats> rollbackStatsList = defaultMQAdminExt.resetOffsetByTimestampOld(consumerGroup, topic, timestamp, force);\n",
      "        System.out.printf(\n",
      "            \"rollback consumer offset by specified consumerGroup[%s], topic[%s], force[%s], timestamp(string)[%s], timestamp(long)[%s]%n\",\n",
      "            consumerGroup, topic, force, timeStampStr, timestamp);\n",
      "\n",
      "        System.out.printf(\"%-20s  %-20s  %-20s  %-20s  %-20s  %-20s%n\",\n",
      "            \"#brokerName\",\n",
      "            \"#queueId\",\n",
      "            \"#brokerOffset\",\n",
      "            \"#consumerOffset\",\n",
      "            \"#timestampOffset\",\n",
      "            \"#rollbackOffset\"\n",
      "        );\n",
      "\n",
      "        for (RollbackStats rollbackStats : rollbackStatsList) {\n",
      "            System.out.printf(\"%-20s  %-20d  %-20d  %-20d  %-20d  %-20d%n\",\n",
      "                UtilAll.frontStringAtLeast(rollbackStats.getBrokerName(), 32),\n",
      "                rollbackStats.getQueueId(),\n",
      "                rollbackStats.getBrokerOffset(),\n",
      "                rollbackStats.getConsumerOffset(),\n",
      "                rollbackStats.getTimestampOffset(),\n",
      "                rollbackStats.getRollbackOffset()\n",
      "            );\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"resetOffsetByTimeOld\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Reset consumer offset by timestamp(execute this command required client restart).\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"g\", \"group\", true, \"set the consumer group\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"t\", \"topic\", true, \"set the topic\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"s\", \"timestamp\", true, \"set the timestamp[currentTimeMillis|yyyy-MM-dd#HH:mm:ss:SSS]\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"f\", \"force\", true, \"set the force rollback by timestamp switch[true|false]\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "        try {\n",
      "            String consumerGroup = commandLine.getOptionValue(\"g\").trim();\n",
      "            String topic = commandLine.getOptionValue(\"t\").trim();\n",
      "            String timeStampStr = commandLine.getOptionValue(\"s\").trim();\n",
      "            long timestamp = 0;\n",
      "            try {\n",
      "                timestamp = Long.parseLong(timeStampStr);\n",
      "            } catch (NumberFormatException e) {\n",
      "\n",
      "                Date date = UtilAll.parseDate(timeStampStr, UtilAll.YYYY_MM_DD_HH_MM_SS_SSS);\n",
      "                if (date != null) {\n",
      "                    timestamp = UtilAll.parseDate(timeStampStr, UtilAll.YYYY_MM_DD_HH_MM_SS_SSS).getTime();\n",
      "                } else {\n",
      "                    System.out.printf(\"specified timestamp invalid.%n\");\n",
      "                    return;\n",
      "                }\n",
      "\n",
      "                boolean force = true;\n",
      "                if (commandLine.hasOption('f')) {\n",
      "                    force = Boolean.valueOf(commandLine.getOptionValue(\"f\").trim());\n",
      "                }\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "                resetOffset(defaultMQAdminExt, consumerGroup, topic, timestamp, force, timeStampStr);\n",
      "            }\n",
      "\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.offset;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class ResetOffsetByTimeOldCommandTest {\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        ResetOffsetByTimeOldCommand cmd = new ResetOffsetByTimeOldCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-g default-group\", \"-t unit-test\", \"-s 1412131213231\", \"-f false\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('g').trim()).isEqualTo(\"default-group\");\n",
      "        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"unit-test\");\n",
      "        assertThat(commandLine.getOptionValue('s').trim()).isEqualTo(\"1412131213231\");\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)": [
        36,
        63
      ],
      "ResetOffsetByTimeOldCommand::::commandName()": [
        65,
        68
      ],
      "ResetOffsetByTimeOldCommand::::commandDesc()": [
        70,
        73
      ]
    },
    "test_method_lines_dic": {
      "ResetOffsetByTimeOldCommandTest::::testExecute()": [
        28,
        38
      ]
    },
    "reverse_method_lines_dic": {
      "36": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "37": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "38": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "39": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "40": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "41": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "42": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "43": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "44": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "45": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "46": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "47": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "48": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "49": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "50": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "51": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "52": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "53": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "54": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "55": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "56": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "57": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "58": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "59": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "60": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "61": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "62": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "63": "ResetOffsetByTimeOldCommand::::resetOffset(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String,long,boolean,java.lang.String)",
      "65": "ResetOffsetByTimeOldCommand::::commandName()",
      "66": "ResetOffsetByTimeOldCommand::::commandName()",
      "67": "ResetOffsetByTimeOldCommand::::commandName()",
      "68": "ResetOffsetByTimeOldCommand::::commandName()",
      "70": "ResetOffsetByTimeOldCommand::::commandDesc()",
      "71": "ResetOffsetByTimeOldCommand::::commandDesc()",
      "72": "ResetOffsetByTimeOldCommand::::commandDesc()",
      "73": "ResetOffsetByTimeOldCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "28": "ResetOffsetByTimeOldCommandTest::::testExecute()",
      "29": "ResetOffsetByTimeOldCommandTest::::testExecute()",
      "30": "ResetOffsetByTimeOldCommandTest::::testExecute()",
      "31": "ResetOffsetByTimeOldCommandTest::::testExecute()",
      "32": "ResetOffsetByTimeOldCommandTest::::testExecute()",
      "33": "ResetOffsetByTimeOldCommandTest::::testExecute()",
      "34": "ResetOffsetByTimeOldCommandTest::::testExecute()",
      "35": "ResetOffsetByTimeOldCommandTest::::testExecute()",
      "36": "ResetOffsetByTimeOldCommandTest::::testExecute()",
      "37": "ResetOffsetByTimeOldCommandTest::::testExecute()",
      "38": "ResetOffsetByTimeOldCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          28,
          38
        ],
        "covered_lines": [
          35,
          67,
          77,
          78,
          79,
          81,
          82,
          83,
          85,
          86,
          87,
          89,
          90,
          91,
          92
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/topic/AllocateMQSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "import java.util.Set;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;\n",
      "import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class AllocateMQSubCommand implements SubCommand {\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"allocateMQ\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Allocate MQ\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"t\", \"topic\", true, \"topic name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"i\", \"ipList\", true, \"ipList\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {\n",
      "        DefaultMQAdminExt adminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        adminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "        try {\n",
      "            adminExt.start();\n",
      "\n",
      "            String topic = commandLine.getOptionValue('t').trim();\n",
      "            String ips = commandLine.getOptionValue('i').trim();\n",
      "            final String[] split = ips.split(\",\");\n",
      "            final List<String> ipList = new LinkedList<String>();\n",
      "            for (String ip : split) {\n",
      "                ipList.add(ip);\n",
      "            }\n",
      "\n",
      "            final TopicRouteData topicRouteData = adminExt.examineTopicRouteInfo(topic);\n",
      "            final Set<MessageQueue> mqs = MQClientInstance.topicRouteData2TopicSubscribeInfo(topic, topicRouteData);\n",
      "\n",
      "            final AllocateMessageQueueAveragely averagely = new AllocateMessageQueueAveragely();\n",
      "\n",
      "            RebalanceResult rr = new RebalanceResult();\n",
      "\n",
      "            for (String i : ipList) {\n",
      "                final List<MessageQueue> mqResult = averagely.allocate(\"aa\", i, new ArrayList<MessageQueue>(mqs), ipList);\n",
      "                rr.getResult().put(i, mqResult);\n",
      "            }\n",
      "\n",
      "            final String json = RemotingSerializable.toJson(rr, false);\n",
      "            System.out.printf(\"%s%n\", json);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            adminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class AllocateMQSubCommandTest {\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        AllocateMQSubCommand cmd = new AllocateMQSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-t unit-test\", \"-i 127.0.0.1:10911\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"unit-test\");\n",
      "        assertThat(commandLine.getOptionValue(\"i\").trim()).isEqualTo(\"127.0.0.1:10911\");\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "AllocateMQSubCommand::::commandName()": [
        37,
        40
      ],
      "AllocateMQSubCommand::::commandDesc()": [
        42,
        45
      ]
    },
    "test_method_lines_dic": {
      "AllocateMQSubCommandTest::::testExecute()": [
        28,
        37
      ]
    },
    "reverse_method_lines_dic": {
      "37": "AllocateMQSubCommand::::commandName()",
      "38": "AllocateMQSubCommand::::commandName()",
      "39": "AllocateMQSubCommand::::commandName()",
      "40": "AllocateMQSubCommand::::commandName()",
      "42": "AllocateMQSubCommand::::commandDesc()",
      "43": "AllocateMQSubCommand::::commandDesc()",
      "44": "AllocateMQSubCommand::::commandDesc()",
      "45": "AllocateMQSubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "28": "AllocateMQSubCommandTest::::testExecute()",
      "29": "AllocateMQSubCommandTest::::testExecute()",
      "30": "AllocateMQSubCommandTest::::testExecute()",
      "31": "AllocateMQSubCommandTest::::testExecute()",
      "32": "AllocateMQSubCommandTest::::testExecute()",
      "33": "AllocateMQSubCommandTest::::testExecute()",
      "34": "AllocateMQSubCommandTest::::testExecute()",
      "35": "AllocateMQSubCommandTest::::testExecute()",
      "36": "AllocateMQSubCommandTest::::testExecute()",
      "37": "AllocateMQSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          28,
          37
        ],
        "covered_lines": [
          36,
          39,
          49,
          50,
          51,
          53,
          54,
          55,
          57
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateOrderConfCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.namesrv.NamesrvUtil;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class UpdateOrderConfCommand implements SubCommand {\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"updateOrderConf\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Create or update or delete order conf\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"t\", \"topic\", true, \"topic name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"v\", \"orderConf\", true, \"set order conf [eg. brokerName1:num;brokerName2:num]\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"m\", \"method\", true, \"option type [eg. put|get|delete\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(final CommandLine commandLine, final Options options,\n",
      "        RPCHook rpcHook) throws SubCommandException {\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        try {\n",
      "            String topic = commandLine.getOptionValue('t').trim();\n",
      "            String type = commandLine.getOptionValue('m').trim();\n",
      "\n",
      "            if (\"get\".equals(type)) {\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "                String orderConf =\n",
      "                    defaultMQAdminExt.getKVConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, topic);\n",
      "                System.out.printf(\"get orderConf success. topic=[%s], orderConf=[%s] \", topic, orderConf);\n",
      "\n",
      "                return;\n",
      "            } else if (\"put\".equals(type)) {\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "                String orderConf = \"\";\n",
      "                if (commandLine.hasOption('v')) {\n",
      "                    orderConf = commandLine.getOptionValue('v').trim();\n",
      "                }\n",
      "                if (UtilAll.isBlank(orderConf)) {\n",
      "                    throw new Exception(\"please set orderConf with option -v.\");\n",
      "                }\n",
      "\n",
      "                defaultMQAdminExt.createOrUpdateOrderConf(topic, orderConf, true);\n",
      "                System.out.printf(\"update orderConf success. topic=[%s], orderConf=[%s]\", topic,\n",
      "                    orderConf.toString());\n",
      "                return;\n",
      "            } else if (\"delete\".equals(type)) {\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "                defaultMQAdminExt.deleteKvConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, topic);\n",
      "                System.out.printf(\"delete orderConf success. topic=[%s]\", topic);\n",
      "\n",
      "                return;\n",
      "            }\n",
      "\n",
      "            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class UpdateOrderConfCommandTest {\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        UpdateOrderConfCommand cmd = new UpdateOrderConfCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-t unit-test\", \"-v default-broker:8\", \"-m post\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"unit-test\");\n",
      "        assertThat(commandLine.getOptionValue('v').trim()).isEqualTo(\"default-broker:8\");\n",
      "        assertThat(commandLine.getOptionValue('m').trim()).isEqualTo(\"post\");\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "UpdateOrderConfCommand::::commandName()": [
        32,
        35
      ],
      "UpdateOrderConfCommand::::commandDesc()": [
        37,
        40
      ]
    },
    "test_method_lines_dic": {
      "UpdateOrderConfCommandTest::::testExecute()": [
        28,
        38
      ]
    },
    "reverse_method_lines_dic": {
      "32": "UpdateOrderConfCommand::::commandName()",
      "33": "UpdateOrderConfCommand::::commandName()",
      "34": "UpdateOrderConfCommand::::commandName()",
      "35": "UpdateOrderConfCommand::::commandName()",
      "37": "UpdateOrderConfCommand::::commandDesc()",
      "38": "UpdateOrderConfCommand::::commandDesc()",
      "39": "UpdateOrderConfCommand::::commandDesc()",
      "40": "UpdateOrderConfCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "28": "UpdateOrderConfCommandTest::::testExecute()",
      "29": "UpdateOrderConfCommandTest::::testExecute()",
      "30": "UpdateOrderConfCommandTest::::testExecute()",
      "31": "UpdateOrderConfCommandTest::::testExecute()",
      "32": "UpdateOrderConfCommandTest::::testExecute()",
      "33": "UpdateOrderConfCommandTest::::testExecute()",
      "34": "UpdateOrderConfCommandTest::::testExecute()",
      "35": "UpdateOrderConfCommandTest::::testExecute()",
      "36": "UpdateOrderConfCommandTest::::testExecute()",
      "37": "UpdateOrderConfCommandTest::::testExecute()",
      "38": "UpdateOrderConfCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          28,
          38
        ],
        "covered_lines": [
          30,
          34,
          44,
          45,
          46,
          48,
          49,
          50,
          52,
          53,
          54,
          56
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import java.util.Set;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.OptionGroup;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.common.TopicConfig;\n",
      "import org.apache.rocketmq.common.sysflag.TopicSysFlag;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.CommandUtil;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class UpdateTopicSubCommand implements SubCommand {\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"updateTopic\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Update or create topic\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        OptionGroup optionGroup = new OptionGroup();\n",
      "\n",
      "        Option opt = new Option(\"b\", \"brokerAddr\", true, \"create topic to which broker\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"clusterName\", true, \"create topic to which cluster\");\n",
      "        optionGroup.addOption(opt);\n",
      "\n",
      "        optionGroup.setRequired(true);\n",
      "        options.addOptionGroup(optionGroup);\n",
      "\n",
      "        opt = new Option(\"t\", \"topic\", true, \"topic name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"r\", \"readQueueNums\", true, \"set read queue nums\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"w\", \"writeQueueNums\", true, \"set write queue nums\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"p\", \"perm\", true, \"set topic's permission(2|4|6), intro[2:W 4:R; 6:RW]\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"o\", \"order\", true, \"set topic's order(true|false)\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"u\", \"unit\", true, \"is unit topic (true|false)\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"s\", \"hasUnitSub\", true, \"has unit sub (true|false)\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(final CommandLine commandLine, final Options options,\n",
      "        RPCHook rpcHook) throws SubCommandException {\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        try {\n",
      "            TopicConfig topicConfig = new TopicConfig();\n",
      "            topicConfig.setReadQueueNums(8);\n",
      "            topicConfig.setWriteQueueNums(8);\n",
      "            topicConfig.setTopicName(commandLine.getOptionValue('t').trim());\n",
      "\n",
      "            // readQueueNums\n",
      "            if (commandLine.hasOption('r')) {\n",
      "                topicConfig.setReadQueueNums(Integer.parseInt(commandLine.getOptionValue('r').trim()));\n",
      "            }\n",
      "\n",
      "            // writeQueueNums\n",
      "            if (commandLine.hasOption('w')) {\n",
      "                topicConfig.setWriteQueueNums(Integer.parseInt(commandLine.getOptionValue('w').trim()));\n",
      "            }\n",
      "\n",
      "            // perm\n",
      "            if (commandLine.hasOption('p')) {\n",
      "                topicConfig.setPerm(Integer.parseInt(commandLine.getOptionValue('p').trim()));\n",
      "            }\n",
      "\n",
      "            boolean isUnit = false;\n",
      "            if (commandLine.hasOption('u')) {\n",
      "                isUnit = Boolean.parseBoolean(commandLine.getOptionValue('u').trim());\n",
      "            }\n",
      "\n",
      "            boolean isCenterSync = false;\n",
      "            if (commandLine.hasOption('s')) {\n",
      "                isCenterSync = Boolean.parseBoolean(commandLine.getOptionValue('s').trim());\n",
      "            }\n",
      "\n",
      "            int topicCenterSync = TopicSysFlag.buildSysFlag(isUnit, isCenterSync);\n",
      "            topicConfig.setTopicSysFlag(topicCenterSync);\n",
      "\n",
      "            boolean isOrder = false;\n",
      "            if (commandLine.hasOption('o')) {\n",
      "                isOrder = Boolean.parseBoolean(commandLine.getOptionValue('o').trim());\n",
      "            }\n",
      "            topicConfig.setOrder(isOrder);\n",
      "\n",
      "            if (commandLine.hasOption('b')) {\n",
      "                String addr = commandLine.getOptionValue('b').trim();\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "                defaultMQAdminExt.createAndUpdateTopicConfig(addr, topicConfig);\n",
      "\n",
      "                if (isOrder) {\n",
      "                    String brokerName = CommandUtil.fetchBrokerNameByAddr(defaultMQAdminExt, addr);\n",
      "                    String orderConf = brokerName + \":\" + topicConfig.getWriteQueueNums();\n",
      "                    defaultMQAdminExt.createOrUpdateOrderConf(topicConfig.getTopicName(), orderConf, false);\n",
      "                    System.out.printf(\"%s\", String.format(\"set broker orderConf. isOrder=%s, orderConf=[%s]\",\n",
      "                        isOrder, orderConf.toString()));\n",
      "                }\n",
      "                System.out.printf(\"create topic to %s success.%n\", addr);\n",
      "                System.out.printf(\"%s\", topicConfig);\n",
      "                return;\n",
      "\n",
      "            } else if (commandLine.hasOption('c')) {\n",
      "                String clusterName = commandLine.getOptionValue('c').trim();\n",
      "\n",
      "                defaultMQAdminExt.start();\n",
      "\n",
      "                Set<String> masterSet =\n",
      "                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n",
      "                for (String addr : masterSet) {\n",
      "                    defaultMQAdminExt.createAndUpdateTopicConfig(addr, topicConfig);\n",
      "                    System.out.printf(\"create topic to %s success.%n\", addr);\n",
      "                }\n",
      "\n",
      "                if (isOrder) {\n",
      "                    Set<String> brokerNameSet =\n",
      "                        CommandUtil.fetchBrokerNameByClusterName(defaultMQAdminExt, clusterName);\n",
      "                    StringBuilder orderConf = new StringBuilder();\n",
      "                    String splitor = \"\";\n",
      "                    for (String s : brokerNameSet) {\n",
      "                        orderConf.append(splitor).append(s).append(\":\")\n",
      "                            .append(topicConfig.getWriteQueueNums());\n",
      "                        splitor = \";\";\n",
      "                    }\n",
      "                    defaultMQAdminExt.createOrUpdateOrderConf(topicConfig.getTopicName(),\n",
      "                        orderConf.toString(), true);\n",
      "                    System.out.printf(\"set cluster orderConf. isOrder=%s, orderConf=[%s]\", isOrder, orderConf);\n",
      "                }\n",
      "\n",
      "                System.out.printf(\"%s\", topicConfig);\n",
      "                return;\n",
      "            }\n",
      "\n",
      "            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class UpdateTopicSubCommandTest {\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        UpdateTopicSubCommand cmd = new UpdateTopicSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\n",
      "            \"-b 127.0.0.1:10911\",\n",
      "            \"-t unit-test\",\n",
      "            \"-r 8\",\n",
      "            \"-w 8\",\n",
      "            \"-p 6\",\n",
      "            \"-o false\",\n",
      "            \"-u false\",\n",
      "            \"-s false\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('b').trim()).isEqualTo(\"127.0.0.1:10911\");\n",
      "        assertThat(commandLine.getOptionValue('r').trim()).isEqualTo(\"8\");\n",
      "        assertThat(commandLine.getOptionValue('w').trim()).isEqualTo(\"8\");\n",
      "        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"unit-test\");\n",
      "        assertThat(commandLine.getOptionValue('p').trim()).isEqualTo(\"6\");\n",
      "        assertThat(commandLine.getOptionValue('o').trim()).isEqualTo(\"false\");\n",
      "        assertThat(commandLine.getOptionValue('u').trim()).isEqualTo(\"false\");\n",
      "        assertThat(commandLine.getOptionValue('s').trim()).isEqualTo(\"false\");\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "UpdateTopicSubCommand::::commandName()": [
        35,
        38
      ],
      "UpdateTopicSubCommand::::commandDesc()": [
        40,
        43
      ]
    },
    "test_method_lines_dic": {
      "UpdateTopicSubCommandTest::::testExecute()": [
        28,
        51
      ]
    },
    "reverse_method_lines_dic": {
      "35": "UpdateTopicSubCommand::::commandName()",
      "36": "UpdateTopicSubCommand::::commandName()",
      "37": "UpdateTopicSubCommand::::commandName()",
      "38": "UpdateTopicSubCommand::::commandName()",
      "40": "UpdateTopicSubCommand::::commandDesc()",
      "41": "UpdateTopicSubCommand::::commandDesc()",
      "42": "UpdateTopicSubCommand::::commandDesc()",
      "43": "UpdateTopicSubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "28": "UpdateTopicSubCommandTest::::testExecute()",
      "29": "UpdateTopicSubCommandTest::::testExecute()",
      "30": "UpdateTopicSubCommandTest::::testExecute()",
      "31": "UpdateTopicSubCommandTest::::testExecute()",
      "32": "UpdateTopicSubCommandTest::::testExecute()",
      "33": "UpdateTopicSubCommandTest::::testExecute()",
      "34": "UpdateTopicSubCommandTest::::testExecute()",
      "35": "UpdateTopicSubCommandTest::::testExecute()",
      "36": "UpdateTopicSubCommandTest::::testExecute()",
      "37": "UpdateTopicSubCommandTest::::testExecute()",
      "38": "UpdateTopicSubCommandTest::::testExecute()",
      "39": "UpdateTopicSubCommandTest::::testExecute()",
      "40": "UpdateTopicSubCommandTest::::testExecute()",
      "41": "UpdateTopicSubCommandTest::::testExecute()",
      "42": "UpdateTopicSubCommandTest::::testExecute()",
      "43": "UpdateTopicSubCommandTest::::testExecute()",
      "44": "UpdateTopicSubCommandTest::::testExecute()",
      "45": "UpdateTopicSubCommandTest::::testExecute()",
      "46": "UpdateTopicSubCommandTest::::testExecute()",
      "47": "UpdateTopicSubCommandTest::::testExecute()",
      "48": "UpdateTopicSubCommandTest::::testExecute()",
      "49": "UpdateTopicSubCommandTest::::testExecute()",
      "50": "UpdateTopicSubCommandTest::::testExecute()",
      "51": "UpdateTopicSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          28,
          51
        ],
        "covered_lines": [
          33,
          37,
          47,
          49,
          50,
          52,
          53,
          55,
          56,
          58,
          59,
          60,
          62,
          63,
          64,
          66,
          67,
          68,
          70,
          71,
          72,
          74,
          75,
          76,
          78,
          79,
          80,
          82,
          83,
          84,
          86
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicPermSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Set;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.TopicConfig;\n",
      "import org.apache.rocketmq.common.protocol.route.BrokerData;\n",
      "import org.apache.rocketmq.common.protocol.route.QueueData;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.CommandUtil;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class UpdateTopicPermSubCommand implements SubCommand {\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"updateTopicPerm\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Update topic perm\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"b\", \"brokerAddr\", true, \"create topic to which broker\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"clusterName\", true, \"create topic to which cluster\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"t\", \"topic\", true, \"topic name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"p\", \"perm\", true, \"set topic's permission(2|4|6), intro[2:W; 4:R; 6:RW]\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(final CommandLine commandLine, final Options options,\n",
      "        RPCHook rpcHook) throws SubCommandException {\n",
      "\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        try {\n",
      "            defaultMQAdminExt.start();\n",
      "\n",
      "            TopicConfig topicConfig = new TopicConfig();\n",
      "            String topic;\n",
      "            if (commandLine.hasOption('t')) {\n",
      "                topic = commandLine.getOptionValue('t').trim();\n",
      "            } else {\n",
      "                System.out.printf(\"topic parameter value must be need.%n\");\n",
      "                return;\n",
      "            }\n",
      "            TopicRouteData topicRouteData = defaultMQAdminExt.examineTopicRouteInfo(topic);\n",
      "            assert topicRouteData != null;\n",
      "            List<QueueData> queueDatas = topicRouteData.getQueueDatas();\n",
      "            assert queueDatas != null && queueDatas.size() > 0;\n",
      "            QueueData queueData = queueDatas.get(0);\n",
      "            topicConfig.setTopicName(topic);\n",
      "            topicConfig.setWriteQueueNums(queueData.getWriteQueueNums());\n",
      "            topicConfig.setReadQueueNums(queueData.getReadQueueNums());\n",
      "            topicConfig.setTopicSysFlag(queueData.getTopicSynFlag());\n",
      "            //new perm\n",
      "            int perm;\n",
      "            if (commandLine.hasOption('p')) {\n",
      "                perm = Integer.parseInt(commandLine.getOptionValue('p').trim());\n",
      "            } else {\n",
      "                System.out.printf(\"perm parameter value must be need.%n\");\n",
      "                return;\n",
      "            }\n",
      "            topicConfig.setPerm(perm);\n",
      "            if (commandLine.hasOption('b')) {\n",
      "                String brokerAddr = commandLine.getOptionValue('b').trim();\n",
      "                List<BrokerData> brokerDatas = topicRouteData.getBrokerDatas();\n",
      "                String brokerName = null;\n",
      "                for (BrokerData data : brokerDatas) {\n",
      "                    HashMap<Long, String> brokerAddrs = data.getBrokerAddrs();\n",
      "                    if (brokerAddrs == null || brokerAddrs.size() == 0) {\n",
      "                        continue;\n",
      "                    }\n",
      "                    for (Map.Entry<Long, String> entry : brokerAddrs.entrySet()) {\n",
      "                        if (brokerAddr.equals(entry.getValue()) && MixAll.MASTER_ID == entry.getKey()) {\n",
      "                            brokerName = data.getBrokerName();\n",
      "                            break;\n",
      "                        }\n",
      "                    }\n",
      "                    if (brokerName != null) {\n",
      "                        break;\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                if (brokerName != null) {\n",
      "                    List<QueueData> queueDataList = topicRouteData.getQueueDatas();\n",
      "                    assert queueDataList != null && queueDataList.size() > 0;\n",
      "                    int oldPerm = 0;\n",
      "                    for (QueueData data : queueDataList) {\n",
      "                        if (brokerName.equals(data.getBrokerName())) {\n",
      "                            oldPerm = data.getPerm();\n",
      "                            if (perm == oldPerm) {\n",
      "                                System.out.printf(\"new perm equals to the old one!%n\");\n",
      "                                return;\n",
      "                            }\n",
      "                            break;\n",
      "                        }\n",
      "                    }\n",
      "                    defaultMQAdminExt.createAndUpdateTopicConfig(brokerAddr, topicConfig);\n",
      "                    System.out.printf(\"update topic perm from %s to %s in %s success.%n\", oldPerm, perm, brokerAddr);\n",
      "                    System.out.printf(\"%s.%n\", topicConfig);\n",
      "                    return;\n",
      "                } else {\n",
      "                    System.out.printf(\"updateTopicPerm error broker not exit or broker is not master!.%n\");\n",
      "                    return;\n",
      "                }\n",
      "\n",
      "            } else if (commandLine.hasOption('c')) {\n",
      "                String clusterName = commandLine.getOptionValue('c').trim();\n",
      "                Set<String> masterSet =\n",
      "                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n",
      "                for (String addr : masterSet) {\n",
      "                    defaultMQAdminExt.createAndUpdateTopicConfig(addr, topicConfig);\n",
      "                    System.out.printf(\"update topic perm from %s to %s in %s success.%n\", queueData.getPerm(), perm, addr);\n",
      "                }\n",
      "                return;\n",
      "            }\n",
      "            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class UpdateTopicPermSubCommandTest {\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        UpdateTopicPermSubCommand cmd = new UpdateTopicPermSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-b 127.0.0.1:10911\", \"-c default-cluster\", \"-t unit-test\", \"-p 6\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('b').trim()).isEqualTo(\"127.0.0.1:10911\");\n",
      "        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo(\"default-cluster\");\n",
      "        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"unit-test\");\n",
      "        assertThat(commandLine.getOptionValue('p').trim()).isEqualTo(\"6\");\n",
      "\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "UpdateTopicPermSubCommand::::commandName()": [
        40,
        43
      ],
      "UpdateTopicPermSubCommand::::commandDesc()": [
        45,
        48
      ]
    },
    "test_method_lines_dic": {
      "UpdateTopicPermSubCommandTest::::testExecute()": [
        28,
        40
      ]
    },
    "reverse_method_lines_dic": {
      "40": "UpdateTopicPermSubCommand::::commandName()",
      "41": "UpdateTopicPermSubCommand::::commandName()",
      "42": "UpdateTopicPermSubCommand::::commandName()",
      "43": "UpdateTopicPermSubCommand::::commandName()",
      "45": "UpdateTopicPermSubCommand::::commandDesc()",
      "46": "UpdateTopicPermSubCommand::::commandDesc()",
      "47": "UpdateTopicPermSubCommand::::commandDesc()",
      "48": "UpdateTopicPermSubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "28": "UpdateTopicPermSubCommandTest::::testExecute()",
      "29": "UpdateTopicPermSubCommandTest::::testExecute()",
      "30": "UpdateTopicPermSubCommandTest::::testExecute()",
      "31": "UpdateTopicPermSubCommandTest::::testExecute()",
      "32": "UpdateTopicPermSubCommandTest::::testExecute()",
      "33": "UpdateTopicPermSubCommandTest::::testExecute()",
      "34": "UpdateTopicPermSubCommandTest::::testExecute()",
      "35": "UpdateTopicPermSubCommandTest::::testExecute()",
      "36": "UpdateTopicPermSubCommandTest::::testExecute()",
      "37": "UpdateTopicPermSubCommandTest::::testExecute()",
      "38": "UpdateTopicPermSubCommandTest::::testExecute()",
      "39": "UpdateTopicPermSubCommandTest::::testExecute()",
      "40": "UpdateTopicPermSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          28,
          40
        ],
        "covered_lines": [
          38,
          42,
          52,
          53,
          54,
          56,
          57,
          58,
          60,
          61,
          62,
          64,
          65,
          66,
          68
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class TopicRouteSubCommand implements SubCommand {\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"topicRoute\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Examine topic route info\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"t\", \"topic\", true, \"topic name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(final CommandLine commandLine, final Options options,\n",
      "        RPCHook rpcHook) throws SubCommandException {\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        try {\n",
      "            defaultMQAdminExt.start();\n",
      "\n",
      "            String topic = commandLine.getOptionValue('t').trim();\n",
      "            TopicRouteData topicRouteData = defaultMQAdminExt.examineTopicRouteInfo(topic);\n",
      "            String json = topicRouteData.toJson(true);\n",
      "            System.out.printf(\"%s%n\", json);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class TopicRouteSubCommandTest {\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        TopicRouteSubCommand cmd = new TopicRouteSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-t unit-test\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"unit-test\");\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "TopicRouteSubCommand::::commandName()": [
        30,
        33
      ],
      "TopicRouteSubCommand::::commandDesc()": [
        35,
        38
      ]
    },
    "test_method_lines_dic": {
      "TopicRouteSubCommandTest::::testExecute()": [
        28,
        36
      ]
    },
    "reverse_method_lines_dic": {
      "30": "TopicRouteSubCommand::::commandName()",
      "31": "TopicRouteSubCommand::::commandName()",
      "32": "TopicRouteSubCommand::::commandName()",
      "33": "TopicRouteSubCommand::::commandName()",
      "35": "TopicRouteSubCommand::::commandDesc()",
      "36": "TopicRouteSubCommand::::commandDesc()",
      "37": "TopicRouteSubCommand::::commandDesc()",
      "38": "TopicRouteSubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "28": "TopicRouteSubCommandTest::::testExecute()",
      "29": "TopicRouteSubCommandTest::::testExecute()",
      "30": "TopicRouteSubCommandTest::::testExecute()",
      "31": "TopicRouteSubCommandTest::::testExecute()",
      "32": "TopicRouteSubCommandTest::::testExecute()",
      "33": "TopicRouteSubCommandTest::::testExecute()",
      "34": "TopicRouteSubCommandTest::::testExecute()",
      "35": "TopicRouteSubCommandTest::::testExecute()",
      "36": "TopicRouteSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          28,
          36
        ],
        "covered_lines": [
          28,
          32,
          42,
          43,
          44,
          46
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicStatusSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.admin.TopicOffset;\n",
      "import org.apache.rocketmq.common.admin.TopicStatsTable;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class TopicStatusSubCommand implements SubCommand {\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"topicStatus\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Examine topic Status info\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"t\", \"topic\", true, \"topic name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(final CommandLine commandLine, final Options options,\n",
      "        RPCHook rpcHook) throws SubCommandException {\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        try {\n",
      "            defaultMQAdminExt.start();\n",
      "            String topic = commandLine.getOptionValue('t').trim();\n",
      "            TopicStatsTable topicStatsTable = defaultMQAdminExt.examineTopicStats(topic);\n",
      "\n",
      "            List<MessageQueue> mqList = new LinkedList<MessageQueue>();\n",
      "            mqList.addAll(topicStatsTable.getOffsetTable().keySet());\n",
      "            Collections.sort(mqList);\n",
      "\n",
      "            System.out.printf(\"%-32s  %-4s  %-20s  %-20s    %s%n\",\n",
      "                \"#Broker Name\",\n",
      "                \"#QID\",\n",
      "                \"#Min Offset\",\n",
      "                \"#Max Offset\",\n",
      "                \"#Last Updated\"\n",
      "            );\n",
      "\n",
      "            for (MessageQueue mq : mqList) {\n",
      "                TopicOffset topicOffset = topicStatsTable.getOffsetTable().get(mq);\n",
      "\n",
      "                String humanTimestamp = \"\";\n",
      "                if (topicOffset.getLastUpdateTimestamp() > 0) {\n",
      "                    humanTimestamp = UtilAll.timeMillisToHumanString2(topicOffset.getLastUpdateTimestamp());\n",
      "                }\n",
      "\n",
      "                System.out.printf(\"%-32s  %-4d  %-20d  %-20d    %s%n\",\n",
      "                    UtilAll.frontStringAtLeast(mq.getBrokerName(), 32),\n",
      "                    mq.getQueueId(),\n",
      "                    topicOffset.getMinOffset(),\n",
      "                    topicOffset.getMaxOffset(),\n",
      "                    humanTimestamp\n",
      "                );\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class TopicStatusSubCommandTest {\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        TopicStatusSubCommand cmd = new TopicStatusSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-t unit-test\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"unit-test\");\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "TopicStatusSubCommand::::commandName()": [
        36,
        39
      ],
      "TopicStatusSubCommand::::commandDesc()": [
        41,
        44
      ]
    },
    "test_method_lines_dic": {
      "TopicStatusSubCommandTest::::testExecute()": [
        28,
        36
      ]
    },
    "reverse_method_lines_dic": {
      "36": "TopicStatusSubCommand::::commandName()",
      "37": "TopicStatusSubCommand::::commandName()",
      "38": "TopicStatusSubCommand::::commandName()",
      "39": "TopicStatusSubCommand::::commandName()",
      "41": "TopicStatusSubCommand::::commandDesc()",
      "42": "TopicStatusSubCommand::::commandDesc()",
      "43": "TopicStatusSubCommand::::commandDesc()",
      "44": "TopicStatusSubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "28": "TopicStatusSubCommandTest::::testExecute()",
      "29": "TopicStatusSubCommandTest::::testExecute()",
      "30": "TopicStatusSubCommandTest::::testExecute()",
      "31": "TopicStatusSubCommandTest::::testExecute()",
      "32": "TopicStatusSubCommandTest::::testExecute()",
      "33": "TopicStatusSubCommandTest::::testExecute()",
      "34": "TopicStatusSubCommandTest::::testExecute()",
      "35": "TopicStatusSubCommandTest::::testExecute()",
      "36": "TopicStatusSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          28,
          36
        ],
        "covered_lines": [
          34,
          38,
          48,
          49,
          50,
          51
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/topic/DeleteTopicSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import java.util.Arrays;\n",
      "import java.util.HashSet;\n",
      "import java.util.Set;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.CommandUtil;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class DeleteTopicSubCommand implements SubCommand {\n",
      "    public static void deleteTopic(final DefaultMQAdminExt adminExt,\n",
      "        final String clusterName,\n",
      "        final String topic\n",
      "    ) throws InterruptedException, MQBrokerException, RemotingException, MQClientException {\n",
      "\n",
      "        Set<String> brokerAddressSet = CommandUtil.fetchMasterAndSlaveAddrByClusterName(adminExt, clusterName);\n",
      "        adminExt.deleteTopicInBroker(brokerAddressSet, topic);\n",
      "        System.out.printf(\"delete topic [%s] from cluster [%s] success.%n\", topic, clusterName);\n",
      "\n",
      "        Set<String> nameServerSet = null;\n",
      "        if (adminExt.getNamesrvAddr() != null) {\n",
      "            String[] ns = adminExt.getNamesrvAddr().trim().split(\";\");\n",
      "            nameServerSet = new HashSet(Arrays.asList(ns));\n",
      "        }\n",
      "\n",
      "        adminExt.deleteTopicInNameServer(nameServerSet, topic);\n",
      "        System.out.printf(\"delete topic [%s] from NameServer success.%n\", topic);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"deleteTopic\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Delete topic from broker and NameServer.\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"t\", \"topic\", true, \"topic name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"clusterName\", true, \"delete topic from which cluster\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {\n",
      "        DefaultMQAdminExt adminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        adminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "        try {\n",
      "            String topic = commandLine.getOptionValue('t').trim();\n",
      "\n",
      "            if (commandLine.hasOption('c')) {\n",
      "                String clusterName = commandLine.getOptionValue('c').trim();\n",
      "\n",
      "                adminExt.start();\n",
      "                deleteTopic(adminExt, clusterName, topic);\n",
      "                return;\n",
      "            }\n",
      "\n",
      "            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            adminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class DeleteTopicSubCommandTest {\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        DeleteTopicSubCommand cmd = new DeleteTopicSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-t unit-test\", \"-c default-cluster\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"unit-test\");\n",
      "        assertThat(commandLine.getOptionValue(\"c\").trim()).isEqualTo(\"default-cluster\");\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)": [
        36,
        53
      ],
      "DeleteTopicSubCommand::::commandName()": [
        55,
        58
      ],
      "DeleteTopicSubCommand::::commandDesc()": [
        60,
        63
      ]
    },
    "test_method_lines_dic": {
      "DeleteTopicSubCommandTest::::testExecute()": [
        28,
        37
      ]
    },
    "reverse_method_lines_dic": {
      "36": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "37": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "38": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "39": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "40": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "41": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "42": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "43": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "44": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "45": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "46": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "47": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "48": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "49": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "50": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "51": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "52": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "53": "DeleteTopicSubCommand::::deleteTopic(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "55": "DeleteTopicSubCommand::::commandName()",
      "56": "DeleteTopicSubCommand::::commandName()",
      "57": "DeleteTopicSubCommand::::commandName()",
      "58": "DeleteTopicSubCommand::::commandName()",
      "60": "DeleteTopicSubCommand::::commandDesc()",
      "61": "DeleteTopicSubCommand::::commandDesc()",
      "62": "DeleteTopicSubCommand::::commandDesc()",
      "63": "DeleteTopicSubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "28": "DeleteTopicSubCommandTest::::testExecute()",
      "29": "DeleteTopicSubCommandTest::::testExecute()",
      "30": "DeleteTopicSubCommandTest::::testExecute()",
      "31": "DeleteTopicSubCommandTest::::testExecute()",
      "32": "DeleteTopicSubCommandTest::::testExecute()",
      "33": "DeleteTopicSubCommandTest::::testExecute()",
      "34": "DeleteTopicSubCommandTest::::testExecute()",
      "35": "DeleteTopicSubCommandTest::::testExecute()",
      "36": "DeleteTopicSubCommandTest::::testExecute()",
      "37": "DeleteTopicSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          28,
          37
        ],
        "covered_lines": [
          35,
          57,
          67,
          68,
          69,
          71,
          72,
          73,
          75
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicClusterSubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import java.util.Set;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class TopicClusterSubCommand implements SubCommand {\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"topicClusterList\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"get cluster info for topic\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"t\", \"topic\", true, \"topic name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(final CommandLine commandLine, final Options options,\n",
      "        RPCHook rpcHook) throws SubCommandException {\n",
      "        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "        String topic = commandLine.getOptionValue('t').trim();\n",
      "        try {\n",
      "            defaultMQAdminExt.start();\n",
      "            Set<String> clusters = defaultMQAdminExt.getTopicClusterList(topic);\n",
      "            for (String value : clusters) {\n",
      "                System.out.printf(\"%s%n\", value);\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.topic;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class TopicClusterSubCommandTest {\n",
      "    @Test\n",
      "    public void testExecute() {\n",
      "        TopicClusterSubCommand cmd = new TopicClusterSubCommand();\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-t unit-test\"};\n",
      "        final CommandLine commandLine =\n",
      "            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"unit-test\");\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "TopicClusterSubCommand::::commandName()": [
        30,
        33
      ],
      "TopicClusterSubCommand::::commandDesc()": [
        35,
        38
      ]
    },
    "test_method_lines_dic": {
      "TopicClusterSubCommandTest::::testExecute()": [
        28,
        36
      ]
    },
    "reverse_method_lines_dic": {
      "30": "TopicClusterSubCommand::::commandName()",
      "31": "TopicClusterSubCommand::::commandName()",
      "32": "TopicClusterSubCommand::::commandName()",
      "33": "TopicClusterSubCommand::::commandName()",
      "35": "TopicClusterSubCommand::::commandDesc()",
      "36": "TopicClusterSubCommand::::commandDesc()",
      "37": "TopicClusterSubCommand::::commandDesc()",
      "38": "TopicClusterSubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "28": "TopicClusterSubCommandTest::::testExecute()",
      "29": "TopicClusterSubCommandTest::::testExecute()",
      "30": "TopicClusterSubCommandTest::::testExecute()",
      "31": "TopicClusterSubCommandTest::::testExecute()",
      "32": "TopicClusterSubCommandTest::::testExecute()",
      "33": "TopicClusterSubCommandTest::::testExecute()",
      "34": "TopicClusterSubCommandTest::::testExecute()",
      "35": "TopicClusterSubCommandTest::::testExecute()",
      "36": "TopicClusterSubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          28,
          36
        ],
        "covered_lines": [
          28,
          32,
          42,
          43,
          44,
          45
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByUniqueKeySubCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.message;\n",
      "\n",
      "import java.io.DataOutputStream;\n",
      "import java.io.File;\n",
      "import java.io.FileOutputStream;\n",
      "import java.io.IOException;\n",
      "import java.util.List;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.message.MessageExt;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumeMessageDirectlyResult;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.common.RemotingHelper;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.admin.api.MessageTrack;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class QueryMsgByUniqueKeySubCommand implements SubCommand {\n",
      "\n",
      "    private DefaultMQAdminExt defaultMQAdminExt;\n",
      "\n",
      "    private DefaultMQAdminExt createMQAdminExt(RPCHook rpcHook) throws SubCommandException {\n",
      "        if (this.defaultMQAdminExt != null) {\n",
      "            return defaultMQAdminExt;\n",
      "        } else {\n",
      "            defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n",
      "            defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "            try {\n",
      "                defaultMQAdminExt.start();\n",
      "            }\n",
      "            catch (Exception e) {\n",
      "                throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "            }\n",
      "            return defaultMQAdminExt;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static void queryById(final DefaultMQAdminExt admin, final String topic,\n",
      "        final String msgId) throws MQClientException,\n",
      "        RemotingException, MQBrokerException, InterruptedException, IOException {\n",
      "        MessageExt msg = admin.viewMessage(topic, msgId);\n",
      "\n",
      "        String bodyTmpFilePath = createBodyFile(msg);\n",
      "\n",
      "        System.out.printf(\"%-20s %s%n\",\n",
      "            \"Topic:\",\n",
      "            msg.getTopic()\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %s%n\",\n",
      "            \"Tags:\",\n",
      "            \"[\" + msg.getTags() + \"]\"\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %s%n\",\n",
      "            \"Keys:\",\n",
      "            \"[\" + msg.getKeys() + \"]\"\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %d%n\",\n",
      "            \"Queue ID:\",\n",
      "            msg.getQueueId()\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %d%n\",\n",
      "            \"Queue Offset:\",\n",
      "            msg.getQueueOffset()\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %d%n\",\n",
      "            \"CommitLog Offset:\",\n",
      "            msg.getCommitLogOffset()\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %d%n\",\n",
      "            \"Reconsume Times:\",\n",
      "            msg.getReconsumeTimes()\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %s%n\",\n",
      "            \"Born Timestamp:\",\n",
      "            UtilAll.timeMillisToHumanString2(msg.getBornTimestamp())\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %s%n\",\n",
      "            \"Store Timestamp:\",\n",
      "            UtilAll.timeMillisToHumanString2(msg.getStoreTimestamp())\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %s%n\",\n",
      "            \"Born Host:\",\n",
      "            RemotingHelper.parseSocketAddressAddr(msg.getBornHost())\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %s%n\",\n",
      "            \"Store Host:\",\n",
      "            RemotingHelper.parseSocketAddressAddr(msg.getStoreHost())\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %d%n\",\n",
      "            \"System Flag:\",\n",
      "            msg.getSysFlag()\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %s%n\",\n",
      "            \"Properties:\",\n",
      "            msg.getProperties() != null ? msg.getProperties().toString() : \"\"\n",
      "        );\n",
      "\n",
      "        System.out.printf(\"%-20s %s%n\",\n",
      "            \"Message Body Path:\",\n",
      "            bodyTmpFilePath\n",
      "        );\n",
      "\n",
      "        try {\n",
      "            List<MessageTrack> mtdList = admin.messageTrackDetail(msg);\n",
      "            if (mtdList.isEmpty()) {\n",
      "                System.out.printf(\"%n%nWARN: No Consumer\");\n",
      "            } else {\n",
      "                System.out.printf(\"%n%n\");\n",
      "                for (MessageTrack mt : mtdList) {\n",
      "                    System.out.printf(\"%s\", mt);\n",
      "                }\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            e.printStackTrace();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static String createBodyFile(MessageExt msg) throws IOException {\n",
      "        DataOutputStream dos = null;\n",
      "        try {\n",
      "            String bodyTmpFilePath = \"/tmp/rocketmq/msgbodys\";\n",
      "            File file = new File(bodyTmpFilePath);\n",
      "            if (!file.exists()) {\n",
      "                file.mkdirs();\n",
      "            }\n",
      "            bodyTmpFilePath = bodyTmpFilePath + \"/\" + msg.getMsgId();\n",
      "            dos = new DataOutputStream(new FileOutputStream(bodyTmpFilePath));\n",
      "            dos.write(msg.getBody());\n",
      "            return bodyTmpFilePath;\n",
      "        } finally {\n",
      "            if (dos != null)\n",
      "                dos.close();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"queryMsgByUniqueKey\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Query Message by Unique key\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"i\", \"msgId\", true, \"Message Id\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"g\", \"consumerGroup\", true, \"consumer group name\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"d\", \"clientId\", true, \"The consumer's client id\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"t\", \"topic\", true, \"The topic of msg\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {\n",
      "\n",
      "        try {\n",
      "\n",
      "            defaultMQAdminExt =  createMQAdminExt(rpcHook);\n",
      "\n",
      "            final String msgId = commandLine.getOptionValue('i').trim();\n",
      "            final String topic = commandLine.getOptionValue('t').trim();\n",
      "            if (commandLine.hasOption('g') && commandLine.hasOption('d')) {\n",
      "                final String consumerGroup = commandLine.getOptionValue('g').trim();\n",
      "                final String clientId = commandLine.getOptionValue('d').trim();\n",
      "                ConsumeMessageDirectlyResult result =\n",
      "                    defaultMQAdminExt.consumeMessageDirectly(consumerGroup, clientId, topic, msgId);\n",
      "                System.out.printf(\"%s\", result);\n",
      "            } else {\n",
      "                queryById(defaultMQAdminExt, topic, msgId);\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQAdminExt.shutdown();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.message;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.client.ClientConfig;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.impl.MQAdminImpl;\n",
      "import org.apache.rocketmq.client.impl.MQClientAPIImpl;\n",
      "import org.apache.rocketmq.client.impl.MQClientManager;\n",
      "import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.admin.ConsumeStats;\n",
      "import org.apache.rocketmq.common.admin.OffsetWrapper;\n",
      "import org.apache.rocketmq.common.message.MessageExt;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.common.protocol.body.*;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;\n",
      "import org.apache.rocketmq.common.protocol.route.BrokerData;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingConnectException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\n",
      "import org.apache.rocketmq.remoting.protocol.LanguageCode;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n",
      "import org.apache.rocketmq.tools.admin.DefaultMQAdminExtImpl;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import java.lang.reflect.Field;\n",
      "import java.net.InetSocketAddress;\n",
      "import java.util.*;\n",
      "\n",
      "import static org.mockito.ArgumentMatchers.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class QueryMsgByUniqueKeySubCommandTest {\n",
      "\n",
      "    private static QueryMsgByUniqueKeySubCommand cmd = new QueryMsgByUniqueKeySubCommand();\n",
      "\n",
      "    private static DefaultMQAdminExt defaultMQAdminExt;\n",
      "    private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;\n",
      "    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());\n",
      "\n",
      "    private static MQClientAPIImpl mQClientAPIImpl;\n",
      "    private static MQAdminImpl mQAdminImpl;\n",
      "\n",
      "    @Before\n",
      "    public void before() throws NoSuchFieldException, IllegalAccessException, InterruptedException, RemotingException, MQClientException, MQBrokerException {\n",
      "\n",
      "        mQClientAPIImpl = mock(MQClientAPIImpl.class);\n",
      "        mQAdminImpl = mock(MQAdminImpl.class);\n",
      "\n",
      "        defaultMQAdminExt = new DefaultMQAdminExt();\n",
      "        defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(defaultMQAdminExt, 1000);\n",
      "\n",
      "        Field field = DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExtImpl, mqClientInstance);\n",
      "\n",
      "        field = MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(mqClientInstance, mQClientAPIImpl);\n",
      "\n",
      "        field = MQClientInstance.class.getDeclaredField(\"mQAdminImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(mqClientInstance, mQAdminImpl);\n",
      "\n",
      "\n",
      "        field = DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(defaultMQAdminExt, defaultMQAdminExtImpl);\n",
      "\n",
      "        ConsumeMessageDirectlyResult result = new ConsumeMessageDirectlyResult();\n",
      "        result.setConsumeResult(CMResult.CR_SUCCESS);\n",
      "        result.setRemark(\"customRemark_122333444\");\n",
      "        when(mQClientAPIImpl.consumeMessageDirectly(anyString(), anyString(), anyString(), anyString(), anyLong())).thenReturn(result);\n",
      "\n",
      "        MessageExt retMsgExt = new MessageExt();\n",
      "        retMsgExt.setMsgId(\"0A3A54F7BF7D18B4AAC28A3FA2CF0000\");\n",
      "        retMsgExt.setBody(\"this is message ext body\".getBytes());\n",
      "        retMsgExt.setTopic(\"testTopic\");\n",
      "        retMsgExt.setTags(\"testTags\");\n",
      "        retMsgExt.setStoreHost(new InetSocketAddress(\"127.0.0.1\", 8899));\n",
      "        retMsgExt.setBornHost(new InetSocketAddress(\"127.0.0.1\", 7788));\n",
      "        retMsgExt.setQueueId(1);\n",
      "        retMsgExt.setQueueOffset(12L);\n",
      "        retMsgExt.setCommitLogOffset(123);\n",
      "        retMsgExt.setReconsumeTimes(2);\n",
      "        retMsgExt.setBornTimestamp(System.currentTimeMillis());\n",
      "        retMsgExt.setStoreTimestamp(System.currentTimeMillis());\n",
      "        when(mQAdminImpl.viewMessage(anyString())).thenReturn(retMsgExt);\n",
      "\n",
      "        when(mQAdminImpl.queryMessageByUniqKey(anyString(), anyString())).thenReturn(retMsgExt);\n",
      "\n",
      "        TopicRouteData topicRouteData = new TopicRouteData();\n",
      "        List<BrokerData> brokerDataList = new ArrayList<BrokerData>();\n",
      "        BrokerData brokerData = new BrokerData();\n",
      "        HashMap<Long, String> brokerAddrs = new HashMap<Long, String>();\n",
      "        brokerAddrs.put(MixAll.MASTER_ID, \"127.0.0.1:9876\");\n",
      "        brokerData.setBrokerAddrs(brokerAddrs);\n",
      "        brokerDataList.add(brokerData);\n",
      "        topicRouteData.setBrokerDatas(brokerDataList);\n",
      "        when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(topicRouteData);\n",
      "\n",
      "        GroupList groupList = new GroupList();\n",
      "        HashSet<String> groupSets = new HashSet<String>();\n",
      "        groupSets.add(\"testGroup\");\n",
      "        groupList.setGroupList(groupSets);\n",
      "        when(mQClientAPIImpl.queryTopicConsumeByWho(anyString(), anyString(), anyLong())).thenReturn(groupList);\n",
      "\n",
      "\n",
      "        ConsumeStats consumeStats = new ConsumeStats();\n",
      "        consumeStats.setConsumeTps(100*10000);\n",
      "        HashMap<MessageQueue, OffsetWrapper> offsetTable = new HashMap<MessageQueue, OffsetWrapper>();\n",
      "        MessageQueue messageQueue = new MessageQueue();\n",
      "        messageQueue.setBrokerName(\"messageQueue BrokerName testing\");\n",
      "        messageQueue.setTopic(\"messageQueue topic\");\n",
      "        messageQueue.setQueueId(1);\n",
      "        OffsetWrapper offsetWrapper = new OffsetWrapper();\n",
      "        offsetWrapper.setBrokerOffset(100);\n",
      "        offsetWrapper.setConsumerOffset(200);\n",
      "        offsetWrapper.setLastTimestamp(System.currentTimeMillis());\n",
      "        offsetTable.put(messageQueue, offsetWrapper);\n",
      "        consumeStats.setOffsetTable(offsetTable);\n",
      "        when(mQClientAPIImpl.getConsumeStats(anyString(), anyString(), (String)isNull(), anyLong())).thenReturn(consumeStats);\n",
      "\n",
      "        ClusterInfo clusterInfo = new ClusterInfo();\n",
      "        HashMap<String, BrokerData> brokerAddrTable = new HashMap<String, BrokerData>();\n",
      "        brokerAddrTable.put(\"key\", brokerData);\n",
      "        clusterInfo.setBrokerAddrTable(brokerAddrTable);\n",
      "        HashMap<String, Set<String>> clusterAddrTable = new HashMap<String, Set<String>>();\n",
      "        Set<String> addrSet = new HashSet<String>();\n",
      "        addrSet.add(\"127.0.0.1:9876\");\n",
      "        clusterAddrTable.put(\"key\", addrSet);\n",
      "        clusterInfo.setClusterAddrTable(clusterAddrTable);\n",
      "        when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n",
      "\n",
      "        field = QueryMsgByUniqueKeySubCommand.class.getDeclaredField(\"defaultMQAdminExt\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(cmd, defaultMQAdminExt);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecuteConsumeActively() throws SubCommandException, InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {\n",
      "\n",
      "        ConsumerConnection consumerConnection = new ConsumerConnection();\n",
      "        consumerConnection.setConsumeType(ConsumeType.CONSUME_ACTIVELY);\n",
      "        HashSet<Connection> connectionSet = new HashSet<>();\n",
      "        Connection conn = new Connection();\n",
      "        conn.setClientId(\"clientIdTest\");\n",
      "        conn.setClientAddr(\"clientAddrTest\");\n",
      "        conn.setLanguage(LanguageCode.JAVA);\n",
      "        conn.setVersion(1);\n",
      "        connectionSet.add(conn);\n",
      "        consumerConnection.setConnectionSet(connectionSet);\n",
      "        when(mQClientAPIImpl.getConsumerConnectionList(anyString(), anyString(), anyLong())).thenReturn(consumerConnection);\n",
      "\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "\n",
      "        String[] args = new String[]{\"-t myTopicTest\", \"-i msgId\"};\n",
      "        CommandLine commandLine = ServerUtil.parseCmdLine(\"mqadmin \", args, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        cmd.execute(commandLine, options, null);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecuteConsumePassively() throws SubCommandException, InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {\n",
      "\n",
      "        ConsumerConnection consumerConnection = new ConsumerConnection();\n",
      "        consumerConnection.setConsumeType(ConsumeType.CONSUME_PASSIVELY);\n",
      "        HashSet<Connection> connectionSet = new HashSet<>();\n",
      "        Connection conn = new Connection();\n",
      "        conn.setClientId(\"clientIdTestStr\");\n",
      "        conn.setClientAddr(\"clientAddrTestStr\");\n",
      "        conn.setLanguage(LanguageCode.JAVA);\n",
      "        conn.setVersion(2);\n",
      "        connectionSet.add(conn);\n",
      "        consumerConnection.setConnectionSet(connectionSet);\n",
      "        when(mQClientAPIImpl.getConsumerConnectionList(anyString(), anyString(), anyLong())).thenReturn(consumerConnection);\n",
      "\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "\n",
      "        String[] args = new String[]{\"-t myTopicTest\", \"-i 7F000001000004D20000000000000066\"};\n",
      "        CommandLine commandLine = ServerUtil.parseCmdLine(\"mqadmin \", args, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        cmd.execute(commandLine, options, null);\n",
      "\n",
      "\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecuteWithConsumerGroupAndClientId() throws SubCommandException {\n",
      "\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "\n",
      "        String[] args = new String[]{\"-t myTopicTest\", \"-i 0A3A54F7BF7D18B4AAC28A3FA2CF0000\", \"-g producerGroupName\", \"-d clientId\"};\n",
      "        CommandLine commandLine = ServerUtil.parseCmdLine(\"mqadmin \", args, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        cmd.execute(commandLine, options, null);\n",
      "\n",
      "        System.out.println();\n",
      "        System.out.println(\"commandName=\" + cmd.commandName());\n",
      "        System.out.println(\"commandDesc=\" + cmd.commandDesc());\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecute() throws SubCommandException {\n",
      "\n",
      "        System.setProperty(\"rocketmq.namesrv.addr\", \"127.0.0.1:9876\");\n",
      "\n",
      "        QueryMsgByUniqueKeySubCommand cmd = new QueryMsgByUniqueKeySubCommand();\n",
      "        String[] args = new String[]{\"-t myTopicTest\", \"-i 0A3A54F7BF7D18B4AAC28A3FA2CF0000\"};\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        CommandLine commandLine = ServerUtil.parseCmdLine(\"mqadmin \", args, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        cmd.execute(commandLine, options, null);\n",
      "\n",
      "        args = new String[]{\"-t myTopicTest\", \"-i 0A3A54F7BF7D18B4AAC28A3FA2CF0000\", \"-g producerGroupName\", \"-d clientId\"};\n",
      "        commandLine = ServerUtil.parseCmdLine(\"mqadmin \", args, cmd.buildCommandlineOptions(options), new PosixParser());\n",
      "        cmd.execute(commandLine, options, null);\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)": [
        60,
        150
      ],
      "QueryMsgByUniqueKeySubCommand::::commandName()": [
        170,
        173
      ],
      "QueryMsgByUniqueKeySubCommand::::commandDesc()": [
        175,
        178
      ]
    },
    "test_method_lines_dic": {
      "QueryMsgByUniqueKeySubCommandTest::::before()": [
        69,
        164
      ],
      "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()": [
        166,
        187
      ],
      "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()": [
        189,
        212
      ],
      "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()": [
        214,
        227
      ],
      "QueryMsgByUniqueKeySubCommandTest::::testExecute()": [
        229,
        244
      ]
    },
    "reverse_method_lines_dic": {
      "60": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "61": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "62": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "63": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "64": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "65": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "66": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "67": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "68": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "69": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "70": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "71": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "72": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "73": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "74": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "75": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "76": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "77": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "78": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "79": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "80": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "81": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "82": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "83": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "84": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "85": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "86": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "87": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "88": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "89": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "90": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "91": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "92": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "93": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "94": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "95": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "96": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "97": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "98": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "99": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "100": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "101": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "102": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "103": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "104": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "105": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "106": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "107": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "108": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "109": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "110": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "111": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "112": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "113": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "114": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "115": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "116": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "117": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "118": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "119": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "120": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "121": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "122": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "123": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "124": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "125": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "126": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "127": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "128": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "129": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "130": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "131": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "132": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "133": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "134": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "135": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "136": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "137": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "138": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "139": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "140": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "141": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "142": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "143": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "144": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "145": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "146": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "147": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "148": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "149": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "150": "QueryMsgByUniqueKeySubCommand::::queryById(org.apache.rocketmq.tools.admin.DefaultMQAdminExt,java.lang.String,java.lang.String)",
      "170": "QueryMsgByUniqueKeySubCommand::::commandName()",
      "171": "QueryMsgByUniqueKeySubCommand::::commandName()",
      "172": "QueryMsgByUniqueKeySubCommand::::commandName()",
      "173": "QueryMsgByUniqueKeySubCommand::::commandName()",
      "175": "QueryMsgByUniqueKeySubCommand::::commandDesc()",
      "176": "QueryMsgByUniqueKeySubCommand::::commandDesc()",
      "177": "QueryMsgByUniqueKeySubCommand::::commandDesc()",
      "178": "QueryMsgByUniqueKeySubCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "69": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "70": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "71": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "72": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "73": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "74": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "75": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "76": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "77": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "78": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "79": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "80": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "81": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "82": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "83": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "84": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "85": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "86": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "87": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "88": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "89": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "90": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "91": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "92": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "93": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "94": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "95": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "96": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "97": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "98": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "99": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "100": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "101": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "102": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "103": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "104": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "105": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "106": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "107": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "108": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "109": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "110": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "111": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "112": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "113": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "114": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "115": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "116": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "117": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "118": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "119": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "120": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "121": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "122": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "123": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "124": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "125": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "126": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "127": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "128": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "129": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "130": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "131": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "132": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "133": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "134": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "135": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "136": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "137": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "138": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "139": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "140": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "141": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "142": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "143": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "144": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "145": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "146": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "147": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "148": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "149": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "150": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "151": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "152": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "153": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "154": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "155": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "156": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "157": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "158": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "159": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "160": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "161": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "162": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "163": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "164": "QueryMsgByUniqueKeySubCommandTest::::before()",
      "166": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "167": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "168": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "169": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "170": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "171": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "172": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "173": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "174": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "175": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "176": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "177": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "178": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "179": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "180": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "181": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "182": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "183": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "184": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "185": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "186": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "187": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumeActively()",
      "189": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "190": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "191": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "192": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "193": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "194": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "195": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "196": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "197": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "198": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "199": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "200": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "201": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "202": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "203": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "204": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "205": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "206": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "207": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "208": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "209": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "210": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "211": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "212": "QueryMsgByUniqueKeySubCommandTest::::testExecuteConsumePassively()",
      "214": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "215": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "216": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "217": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "218": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "219": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "220": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "221": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "222": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "223": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "224": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "225": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "226": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "227": "QueryMsgByUniqueKeySubCommandTest::::testExecuteWithConsumerGroupAndClientId()",
      "229": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "230": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "231": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "232": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "233": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "234": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "235": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "236": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "237": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "238": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "239": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "240": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "241": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "242": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "243": "QueryMsgByUniqueKeySubCommandTest::::testExecute()",
      "244": "QueryMsgByUniqueKeySubCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          166,
          187
        ],
        "covered_lines": [
          40,
          45,
          46,
          63,
          65,
          67,
          69,
          72,
          74,
          77,
          79,
          82,
          84,
          87,
          89,
          92,
          94,
          97,
          99,
          102,
          104,
          107,
          109,
          112,
          114,
          117,
          119,
          122,
          124,
          127,
          129,
          132,
          138,
          139,
          142,
          143,
          144,
          145,
          149,
          150,
          153,
          155,
          156,
          157,
          158,
          160,
          161,
          162,
          163,
          165,
          166,
          182,
          183,
          184,
          186,
          187,
          188,
          190,
          191,
          192,
          194,
          195,
          196,
          198,
          206,
          208,
          209,
          210,
          217,
          222,
          223,
          224
        ]
      },
      {
        "test_lines": [
          189,
          212
        ],
        "covered_lines": [
          40,
          45,
          46,
          63,
          65,
          67,
          69,
          72,
          74,
          77,
          79,
          82,
          84,
          87,
          89,
          92,
          94,
          97,
          99,
          102,
          104,
          107,
          109,
          112,
          114,
          117,
          119,
          122,
          124,
          127,
          129,
          132,
          138,
          139,
          142,
          143,
          144,
          145,
          149,
          150,
          153,
          155,
          156,
          157,
          160,
          161,
          162,
          163,
          165,
          166,
          182,
          183,
          184,
          186,
          187,
          188,
          190,
          191,
          192,
          194,
          195,
          196,
          198,
          206,
          208,
          209,
          210,
          217,
          222,
          223,
          224
        ]
      },
      {
        "test_lines": [
          214,
          227
        ],
        "covered_lines": [
          40,
          45,
          46,
          172,
          177,
          182,
          183,
          184,
          186,
          187,
          188,
          190,
          191,
          192,
          194,
          195,
          196,
          198,
          206,
          208,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          222,
          223,
          224
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/message/SendMessageCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.tools.command.message;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.client.producer.DefaultMQProducer;\n",
      "import org.apache.rocketmq.client.producer.SendResult;\n",
      "import org.apache.rocketmq.common.message.Message;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "public class SendMessageCommand implements SubCommand {\n",
      "\n",
      "    private DefaultMQProducer producer;\n",
      "\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"sendMessage\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Send a message\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(Options options) {\n",
      "        Option opt = new Option(\"t\", \"topic\", true, \"Topic name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"p\", \"body\", true, \"UTF-8 string format of the message body\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"k\", \"key\", true, \"Message keys\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"tags\", true, \"Message tags\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"b\", \"broker\", true, \"Send message to target broker\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"i\", \"qid\", true, \"Send message to target queue\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "    private DefaultMQProducer createProducer(RPCHook rpcHook) {\n",
      "        if (this.producer != null) {\n",
      "            return producer;\n",
      "        } else {\n",
      "            producer = new DefaultMQProducer(rpcHook);\n",
      "            producer.setProducerGroup(Long.toString(System.currentTimeMillis()));\n",
      "            return producer;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {\n",
      "        Message msg = null;\n",
      "        String topic = commandLine.getOptionValue('t').trim();\n",
      "        String body = commandLine.getOptionValue('p').trim();\n",
      "        String tag = null;\n",
      "        String keys = null;\n",
      "        String brokerName = null;\n",
      "        int queueId = -1;\n",
      "        try {\n",
      "            if (commandLine.hasOption('k')) {\n",
      "                keys = commandLine.getOptionValue('k').trim();\n",
      "            }\n",
      "            if (commandLine.hasOption('c')) {\n",
      "                tag = commandLine.getOptionValue('c').trim();\n",
      "            }\n",
      "            if (commandLine.hasOption('b')) {\n",
      "                brokerName = commandLine.getOptionValue('b').trim();\n",
      "            }\n",
      "            if (commandLine.hasOption('i')) {\n",
      "                if (!commandLine.hasOption('b')) {\n",
      "                    System.out.print(\"Broker name must be set if the queue is chosen!\");\n",
      "                    return;\n",
      "                } else {\n",
      "                    queueId = Integer.parseInt(commandLine.getOptionValue('i').trim());\n",
      "                }\n",
      "            }\n",
      "            msg = new Message(topic, tag, keys, body.getBytes(\"utf-8\"));\n",
      "        } catch (Exception e) {\n",
      "            throw new RuntimeException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        }\n",
      "\n",
      "        DefaultMQProducer producer = this.createProducer(rpcHook);\n",
      "        SendResult result;\n",
      "        try {\n",
      "            producer.start();\n",
      "            if (brokerName != null && queueId > -1) {\n",
      "                MessageQueue messageQueue = new MessageQueue(topic, brokerName, queueId);\n",
      "                result = producer.send(msg, messageQueue);\n",
      "            } else {\n",
      "                result = producer.send(msg);\n",
      "            }\n",
      "\n",
      "        } catch (Exception e) {\n",
      "            throw new RuntimeException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            producer.shutdown();\n",
      "        }\n",
      "\n",
      "        System.out.printf(\"%-32s  %-4s  %-20s    %s%n\",\n",
      "            \"#Broker Name\",\n",
      "            \"#QID\",\n",
      "            \"#Send Result\",\n",
      "            \"#MsgId\"\n",
      "        );\n",
      "\n",
      "        if (result != null) {\n",
      "            System.out.printf(\"%-32s  %-4s  %-20s    %s%n\",\n",
      "                result.getMessageQueue().getBrokerName(),\n",
      "                result.getMessageQueue().getQueueId(),\n",
      "                result.getSendStatus(),\n",
      "                result.getMsgId()\n",
      "            );\n",
      "        } else {\n",
      "            System.out.printf(\"%-32s  %-4s  %-20s    %s%n\",\n",
      "                \"Unknown\",\n",
      "                \"Unknown\",\n",
      "                \"Failed\",\n",
      "                \"None\"\n",
      "            );\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.tools.command.message;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.producer.DefaultMQProducer;\n",
      "import org.apache.rocketmq.client.producer.SendResult;\n",
      "import org.apache.rocketmq.client.producer.SendStatus;\n",
      "import org.apache.rocketmq.common.message.Message;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.io.PrintStream;\n",
      "import java.lang.reflect.Field;\n",
      "\n",
      "import static org.mockito.ArgumentMatchers.any;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class SendMessageCommandTest {\n",
      "\n",
      "    private static SendMessageCommand sendMessageCommand = new SendMessageCommand();\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void init() throws MQClientException, RemotingException, InterruptedException, MQBrokerException, NoSuchFieldException, IllegalAccessException {\n",
      "\n",
      "        DefaultMQProducer defaultMQProducer = mock(DefaultMQProducer.class);\n",
      "        SendResult sendResult = new SendResult();\n",
      "        sendResult.setMessageQueue(new MessageQueue());\n",
      "        sendResult.getMessageQueue().setBrokerName(\"broker1\");\n",
      "        sendResult.getMessageQueue().setQueueId(1);\n",
      "        sendResult.setSendStatus(SendStatus.SEND_OK);\n",
      "        sendResult.setMsgId(\"fgwejigherughwueyutyu4t4343t43\");\n",
      "\n",
      "        when(defaultMQProducer.send(any(Message.class))).thenReturn(sendResult);\n",
      "        when(defaultMQProducer.send(any(Message.class), any(MessageQueue.class))).thenReturn(sendResult);\n",
      "\n",
      "        Field producerField = SendMessageCommand.class.getDeclaredField(\"producer\");\n",
      "        producerField.setAccessible(true);\n",
      "        producerField.set(sendMessageCommand, defaultMQProducer);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void terminate() {\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecute() throws SubCommandException {\n",
      "        PrintStream out = System.out;\n",
      "        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n",
      "        System.setOut(new PrintStream(bos));\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-t mytopic\",\"-p 'send message test'\",\"-c tagA\",\"-k order-16546745756\"};\n",
      "        CommandLine commandLine = ServerUtil.parseCmdLine(\"mqadmin \" + sendMessageCommand.commandName(), subargs, sendMessageCommand.buildCommandlineOptions(options), new PosixParser());\n",
      "        sendMessageCommand.execute(commandLine, options, null);\n",
      "\n",
      "        subargs = new String[] {\"-t mytopic\",\"-p 'send message test'\",\"-c tagA\",\"-k order-16546745756\",\"-b brokera\",\"-i 1\"};\n",
      "        commandLine = ServerUtil.parseCmdLine(\"mqadmin \" + sendMessageCommand.commandName(), subargs, sendMessageCommand.buildCommandlineOptions(options), new PosixParser());\n",
      "        sendMessageCommand.execute(commandLine, options, null);\n",
      "        System.setOut(out);\n",
      "        String s = new String(bos.toByteArray());\n",
      "        Assert.assertTrue(s.contains(\"SEND_OK\"));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "SendMessageCommand::::commandName()": [
        35,
        38
      ],
      "SendMessageCommand::::commandDesc()": [
        40,
        43
      ]
    },
    "test_method_lines_dic": {
      "SendMessageCommandTest::::init()": [
        50,
        67
      ],
      "SendMessageCommandTest::::terminate()": [
        69,
        71
      ],
      "SendMessageCommandTest::::testExecute()": [
        73,
        89
      ]
    },
    "reverse_method_lines_dic": {
      "35": "SendMessageCommand::::commandName()",
      "36": "SendMessageCommand::::commandName()",
      "37": "SendMessageCommand::::commandName()",
      "38": "SendMessageCommand::::commandName()",
      "40": "SendMessageCommand::::commandDesc()",
      "41": "SendMessageCommand::::commandDesc()",
      "42": "SendMessageCommand::::commandDesc()",
      "43": "SendMessageCommand::::commandDesc()"
    },
    "test_reverse_method_lines_dic": {
      "50": "SendMessageCommandTest::::init()",
      "51": "SendMessageCommandTest::::init()",
      "52": "SendMessageCommandTest::::init()",
      "53": "SendMessageCommandTest::::init()",
      "54": "SendMessageCommandTest::::init()",
      "55": "SendMessageCommandTest::::init()",
      "56": "SendMessageCommandTest::::init()",
      "57": "SendMessageCommandTest::::init()",
      "58": "SendMessageCommandTest::::init()",
      "59": "SendMessageCommandTest::::init()",
      "60": "SendMessageCommandTest::::init()",
      "61": "SendMessageCommandTest::::init()",
      "62": "SendMessageCommandTest::::init()",
      "63": "SendMessageCommandTest::::init()",
      "64": "SendMessageCommandTest::::init()",
      "65": "SendMessageCommandTest::::init()",
      "66": "SendMessageCommandTest::::init()",
      "67": "SendMessageCommandTest::::init()",
      "69": "SendMessageCommandTest::::terminate()",
      "70": "SendMessageCommandTest::::terminate()",
      "71": "SendMessageCommandTest::::terminate()",
      "73": "SendMessageCommandTest::::testExecute()",
      "74": "SendMessageCommandTest::::testExecute()",
      "75": "SendMessageCommandTest::::testExecute()",
      "76": "SendMessageCommandTest::::testExecute()",
      "77": "SendMessageCommandTest::::testExecute()",
      "78": "SendMessageCommandTest::::testExecute()",
      "79": "SendMessageCommandTest::::testExecute()",
      "80": "SendMessageCommandTest::::testExecute()",
      "81": "SendMessageCommandTest::::testExecute()",
      "82": "SendMessageCommandTest::::testExecute()",
      "83": "SendMessageCommandTest::::testExecute()",
      "84": "SendMessageCommandTest::::testExecute()",
      "85": "SendMessageCommandTest::::testExecute()",
      "86": "SendMessageCommandTest::::testExecute()",
      "87": "SendMessageCommandTest::::testExecute()",
      "88": "SendMessageCommandTest::::testExecute()",
      "89": "SendMessageCommandTest::::testExecute()"
    },
    "tests": [
      {
        "test_lines": [
          73,
          89
        ],
        "covered_lines": [
          31,
          37,
          47,
          48,
          49,
          51,
          52,
          53,
          55,
          56,
          57,
          59,
          60,
          61,
          63,
          64,
          65,
          67,
          68,
          69,
          71,
          75,
          76,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          94,
          95,
          97,
          98,
          100,
          101,
          103,
          104,
          108,
          111,
          114,
          116,
          119,
          120,
          121,
          122,
          123,
          124,
          130,
          131,
          133,
          140,
          141,
          142,
          143,
          144,
          145,
          155
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/tools/src/main/java/org/apache/rocketmq/tools/command/message/ConsumeMessageCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.tools.command.message;\n",
      "\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Option;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\n",
      "import org.apache.rocketmq.client.consumer.PullResult;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.tools.command.SubCommand;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "\n",
      "import java.util.Set;\n",
      "\n",
      "public class ConsumeMessageCommand implements SubCommand {\n",
      "\n",
      "    private String topic = null;\n",
      "    private long messageCount = 128;\n",
      "    private DefaultMQPullConsumer defaultMQPullConsumer;\n",
      "\n",
      "\n",
      "    public enum ConsumeType {\n",
      "        /**\n",
      "         * Topic only\n",
      "         */\n",
      "        DEFAULT,\n",
      "        /**\n",
      "         * Topic brokerName queueId set\n",
      "         */\n",
      "        BYQUEUE,\n",
      "        /**\n",
      "         * Topic brokerName queueId offset set\n",
      "         */\n",
      "        BYOFFSET\n",
      "    }\n",
      "\n",
      "    private static long timestampFormat(final String value) {\n",
      "        long timestamp;\n",
      "        try {\n",
      "            timestamp = Long.parseLong(value);\n",
      "        } catch (NumberFormatException e) {\n",
      "            timestamp = UtilAll.parseDate(value, UtilAll.YYYY_MM_DD_HH_MM_SS_SSS).getTime();\n",
      "        }\n",
      "\n",
      "        return timestamp;\n",
      "    }\n",
      "    @Override\n",
      "    public String commandName() {\n",
      "        return \"consumeMessage\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String commandDesc() {\n",
      "        return \"Consume message\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Options buildCommandlineOptions(final Options options) {\n",
      "        Option opt = new Option(\"t\", \"topic\", true, \"Topic name\");\n",
      "        opt.setRequired(true);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"b\", \"brokerName\", true, \"Broker name\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"i\", \"queueId\", true, \"Queue Id\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"o\", \"offset\", true, \"Queue offset\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"g\", \"consumerGroup\", true, \"Consumer group name\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"s\", \"beginTimestamp \", true,\n",
      "                \"Begin timestamp[currentTimeMillis|yyyy-MM-dd#HH:mm:ss:SSS]\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"e\", \"endTimestamp \", true,\n",
      "                \"End timestamp[currentTimeMillis|yyyy-MM-dd#HH:mm:ss:SSS]\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "        opt = new Option(\"c\", \"MessageNumber\", true, \"Number of message to be consumed\");\n",
      "        opt.setRequired(false);\n",
      "        options.addOption(opt);\n",
      "\n",
      "\n",
      "        return options;\n",
      "\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) throws SubCommandException {\n",
      "        if (defaultMQPullConsumer == null) {\n",
      "            defaultMQPullConsumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP, rpcHook);\n",
      "        }\n",
      "        defaultMQPullConsumer.setInstanceName(Long.toString(System.currentTimeMillis()));\n",
      "\n",
      "        long offset = 0;\n",
      "        long timeValueEnd = 0;\n",
      "        long timeValueBegin = 0;\n",
      "        String queueId = null;\n",
      "        String brokerName = null;\n",
      "        ConsumeType consumeType = ConsumeType.DEFAULT;\n",
      "\n",
      "        try {\n",
      "            /* Group name must be set before consumer start */\n",
      "            if (commandLine.hasOption('g')) {\n",
      "                String consumerGroup = commandLine.getOptionValue('g').trim();\n",
      "                defaultMQPullConsumer.setConsumerGroup(consumerGroup);\n",
      "            }\n",
      "\n",
      "            defaultMQPullConsumer.start();\n",
      "\n",
      "            topic = commandLine.getOptionValue('t').trim();\n",
      "\n",
      "            if (commandLine.hasOption('c')) {\n",
      "                messageCount = Long.parseLong(commandLine.getOptionValue('c').trim());\n",
      "                if (messageCount <= 0) {\n",
      "                    System.out.print(\"Please input a positive messageNumber!\");\n",
      "                    return;\n",
      "                }\n",
      "            }\n",
      "            if (commandLine.hasOption('b')) {\n",
      "                brokerName = commandLine.getOptionValue('b').trim();\n",
      "\n",
      "            }\n",
      "            if (commandLine.hasOption('i')) {\n",
      "                if (!commandLine.hasOption('b')) {\n",
      "                    System.out.print(\"Please set the brokerName before queueId!\");\n",
      "                    return;\n",
      "                }\n",
      "                queueId = commandLine.getOptionValue('i').trim();\n",
      "\n",
      "                consumeType = ConsumeType.BYQUEUE;\n",
      "            }\n",
      "            if (commandLine.hasOption('o')) {\n",
      "                if (consumeType != ConsumeType.BYQUEUE) {\n",
      "                    System.out.print(\"Please set queueId before offset!\");\n",
      "                    return;\n",
      "                }\n",
      "                offset = Long.parseLong(commandLine.getOptionValue('o').trim());\n",
      "                consumeType = ConsumeType.BYOFFSET;\n",
      "            }\n",
      "\n",
      "            long now = System.currentTimeMillis();\n",
      "            if (commandLine.hasOption('s')) {\n",
      "                String timestampStr = commandLine.getOptionValue('s').trim();\n",
      "                timeValueBegin = timestampFormat(timestampStr);\n",
      "                if (timeValueBegin > now) {\n",
      "                    System.out.print(\"Please set the beginTimestamp before now!\");\n",
      "                    return;\n",
      "                }\n",
      "            }\n",
      "            if (commandLine.hasOption('e')) {\n",
      "                String timestampStr = commandLine.getOptionValue('e').trim();\n",
      "                timeValueEnd = timestampFormat(timestampStr);\n",
      "                if (timeValueEnd > now) {\n",
      "                    System.out.print(\"Please set the endTimestamp before now!\");\n",
      "                    return;\n",
      "                }\n",
      "                if (timeValueBegin > timeValueEnd) {\n",
      "                    System.out.print(\"Please make sure that the beginTimestamp is less than or equal to the endTimestamp\");\n",
      "                    return;\n",
      "                }\n",
      "            }\n",
      "\n",
      "            switch (consumeType) {\n",
      "                case DEFAULT:\n",
      "                    executeDefault(timeValueBegin, timeValueEnd);\n",
      "                    break;\n",
      "                case BYOFFSET:\n",
      "                    executeByCondition(brokerName, queueId, offset, timeValueBegin, timeValueEnd);\n",
      "                    break;\n",
      "                case BYQUEUE:\n",
      "                    executeByCondition(brokerName, queueId, 0, timeValueBegin, timeValueEnd);\n",
      "                    break;\n",
      "                default:\n",
      "                    System.out.print(\"Unknown type of consume!\");\n",
      "                    break;\n",
      "            }\n",
      "\n",
      "        } catch (Exception e) {\n",
      "            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n",
      "        } finally {\n",
      "            defaultMQPullConsumer.shutdown();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void pullMessageByQueue(MessageQueue mq, long minOffset, long maxOffset) {\n",
      "        READQ:\n",
      "        for (long offset = minOffset; offset <= maxOffset; ) {\n",
      "            PullResult pullResult = null;\n",
      "            try {\n",
      "                pullResult = defaultMQPullConsumer.pull(mq, \"*\", offset, (int)(maxOffset - offset + 1));\n",
      "            } catch (Exception e) {\n",
      "                e.printStackTrace();\n",
      "                return;\n",
      "            }\n",
      "            if (pullResult != null) {\n",
      "                offset = pullResult.getNextBeginOffset();\n",
      "                switch (pullResult.getPullStatus()) {\n",
      "                    case FOUND:\n",
      "                        System.out.print(\"Consume ok\\n\");\n",
      "                        PrintMessageByQueueCommand.printMessage(pullResult.getMsgFoundList(), \"UTF-8\",\n",
      "                            true, true);\n",
      "                        break;\n",
      "                    case NO_MATCHED_MSG:\n",
      "                        System.out.printf(\"%s no matched msg. status=%s, offset=%s\\n\", mq, pullResult.getPullStatus(),\n",
      "                            offset);\n",
      "                        break;\n",
      "                    case NO_NEW_MSG:\n",
      "                    case OFFSET_ILLEGAL:\n",
      "                        System.out.printf(\"%s print msg finished. status=%s, offset=%s\\n\", mq,\n",
      "                            pullResult.getPullStatus(), offset);\n",
      "                        break READQ;\n",
      "                    default:\n",
      "                        break;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void executeDefault(long timeValueBegin, long timeValueEnd) {\n",
      "        try {\n",
      "            Set<MessageQueue> mqs = defaultMQPullConsumer.fetchSubscribeMessageQueues(topic);\n",
      "            long countLeft = messageCount;\n",
      "            for (MessageQueue mq : mqs) {\n",
      "                if (countLeft == 0) {\n",
      "                    return;\n",
      "                }\n",
      "                long minOffset = defaultMQPullConsumer.minOffset(mq);\n",
      "                long maxOffset = defaultMQPullConsumer.maxOffset(mq);\n",
      "                if (timeValueBegin > 0) {\n",
      "                    minOffset = defaultMQPullConsumer.searchOffset(mq, timeValueBegin);\n",
      "                }\n",
      "                if (timeValueEnd > 0) {\n",
      "                    maxOffset = defaultMQPullConsumer.searchOffset(mq, timeValueEnd);\n",
      "                }\n",
      "                if (maxOffset - minOffset > countLeft) {\n",
      "                    System.out.printf(\"The older %d message of the %d queue will be provided\\n\", countLeft, mq.getQueueId());\n",
      "                    maxOffset = minOffset + countLeft - 1;\n",
      "                    countLeft = 0;\n",
      "                } else {\n",
      "                    countLeft = countLeft - (maxOffset - minOffset) - 1;\n",
      "                }\n",
      "\n",
      "                pullMessageByQueue(mq, minOffset, maxOffset);\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            e.printStackTrace();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void executeByCondition(String brokerName, String queueId, long offset, long timeValueBegin, long timeValueEnd) {\n",
      "        MessageQueue mq = new MessageQueue(topic, brokerName, Integer.parseInt(queueId));\n",
      "        try {\n",
      "            long minOffset = defaultMQPullConsumer.minOffset(mq);\n",
      "            long maxOffset = defaultMQPullConsumer.maxOffset(mq);\n",
      "            if (timeValueBegin > 0) {\n",
      "                minOffset = defaultMQPullConsumer.searchOffset(mq, timeValueBegin);\n",
      "            }\n",
      "            if (timeValueEnd > 0) {\n",
      "                maxOffset = defaultMQPullConsumer.searchOffset(mq, timeValueEnd);\n",
      "            }\n",
      "            if (offset > maxOffset) {\n",
      "                System.out.printf(\"%s no matched msg, offset=%s\\n\", mq, offset);\n",
      "                return;\n",
      "            }\n",
      "            minOffset = minOffset > offset ? minOffset : offset;\n",
      "            if (maxOffset - minOffset > messageCount) {\n",
      "                System.out.printf(\"The oldler %d message will be provided\\n\", messageCount);\n",
      "                maxOffset = minOffset + messageCount - 1;\n",
      "            }\n",
      "\n",
      "            pullMessageByQueue(mq, minOffset, maxOffset);\n",
      "        } catch (Exception e) {\n",
      "            e.printStackTrace();\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.tools.command.message;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.io.PrintStream;\n",
      "import java.lang.reflect.Field;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashSet;\n",
      "import java.util.List;\n",
      "import java.util.Set;\n",
      "import org.apache.commons.cli.CommandLine;\n",
      "import org.apache.commons.cli.Options;\n",
      "import org.apache.commons.cli.PosixParser;\n",
      "import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\n",
      "import org.apache.rocketmq.client.consumer.PullResult;\n",
      "import org.apache.rocketmq.client.consumer.PullStatus;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.common.message.MessageExt;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.srvutil.ServerUtil;\n",
      "import org.apache.rocketmq.tools.command.SubCommandException;\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.mockito.ArgumentMatchers.any;\n",
      "import static org.mockito.ArgumentMatchers.anyInt;\n",
      "import static org.mockito.ArgumentMatchers.anyLong;\n",
      "import static org.mockito.ArgumentMatchers.anyString;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class ConsumeMessageCommandTest {\n",
      "    private static ConsumeMessageCommand consumeMessageCommand;\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void init() throws MQClientException, RemotingException, MQBrokerException, InterruptedException,\n",
      "        NoSuchFieldException, IllegalAccessException {\n",
      "        consumeMessageCommand = new ConsumeMessageCommand();\n",
      "        DefaultMQPullConsumer defaultMQPullConsumer = mock(DefaultMQPullConsumer.class);\n",
      "        MessageExt msg = new MessageExt();\n",
      "        msg.setBody(new byte[] {'a'});\n",
      "        List<MessageExt> msgFoundList = new ArrayList<>();\n",
      "        msgFoundList.add(msg);\n",
      "        final PullResult pullResult = new PullResult(PullStatus.FOUND, 2, 0, 1, msgFoundList);\n",
      "\n",
      "        when(defaultMQPullConsumer.pull(any(MessageQueue.class), anyString(), anyLong(), anyInt())).thenReturn(pullResult);\n",
      "        when(defaultMQPullConsumer.minOffset(any(MessageQueue.class))).thenReturn(Long.valueOf(0));\n",
      "        when(defaultMQPullConsumer.maxOffset(any(MessageQueue.class))).thenReturn(Long.valueOf(1));\n",
      "\n",
      "        final Set<MessageQueue> mqList = new HashSet<>();\n",
      "        mqList.add(new MessageQueue());\n",
      "        when(defaultMQPullConsumer.fetchSubscribeMessageQueues(anyString())).thenReturn(mqList);\n",
      "\n",
      "        Field producerField = ConsumeMessageCommand.class.getDeclaredField(\"defaultMQPullConsumer\");\n",
      "        producerField.setAccessible(true);\n",
      "        producerField.set(consumeMessageCommand, defaultMQPullConsumer);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void terminate() {\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecuteDefault() throws SubCommandException {\n",
      "        PrintStream out = System.out;\n",
      "        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n",
      "        System.setOut(new PrintStream(bos));\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-t mytopic\", \"-n localhost:9876\"};\n",
      "        CommandLine commandLine = ServerUtil.parseCmdLine(\"mqadmin \" + consumeMessageCommand.commandName(),\n",
      "            subargs, consumeMessageCommand.buildCommandlineOptions(options), new PosixParser());\n",
      "        consumeMessageCommand.execute(commandLine, options, null);\n",
      "\n",
      "        System.setOut(out);\n",
      "        String s = new String(bos.toByteArray());\n",
      "        Assert.assertTrue(s.contains(\"Consume ok\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecuteByCondition() throws SubCommandException {\n",
      "        PrintStream out = System.out;\n",
      "        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n",
      "        System.setOut(new PrintStream(bos));\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "\n",
      "        String[] subargs = new String[] {\"-t mytopic\", \"-b localhost\", \"-i 0\", \"-n localhost:9876\"};\n",
      "        CommandLine commandLine = ServerUtil.parseCmdLine(\"mqadmin \" + consumeMessageCommand.commandName(), subargs, consumeMessageCommand.buildCommandlineOptions(options), new PosixParser());\n",
      "        consumeMessageCommand.execute(commandLine, options, null);\n",
      "        System.setOut(out);\n",
      "        String s = new String(bos.toByteArray());\n",
      "        Assert.assertTrue(s.contains(\"Consume ok\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecuteDefaultWhenPullMessageByQueueGotException() throws SubCommandException, InterruptedException, RemotingException, MQClientException, MQBrokerException, NoSuchFieldException, IllegalAccessException {\n",
      "        DefaultMQPullConsumer defaultMQPullConsumer = mock(DefaultMQPullConsumer.class);\n",
      "        when(defaultMQPullConsumer.pull(any(MessageQueue.class), anyString(), anyLong(), anyInt())).thenThrow(Exception.class);\n",
      "        Field producerField = ConsumeMessageCommand.class.getDeclaredField(\"defaultMQPullConsumer\");\n",
      "        producerField.setAccessible(true);\n",
      "        producerField.set(consumeMessageCommand, defaultMQPullConsumer);\n",
      "\n",
      "        PrintStream out = System.out;\n",
      "        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n",
      "        System.setOut(new PrintStream(bos));\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "        String[] subargs = new String[] {\"-t topic-not-existu\", \"-n localhost:9876\"};\n",
      "        CommandLine commandLine = ServerUtil.parseCmdLine(\"mqadmin \" + consumeMessageCommand.commandName(),\n",
      "            subargs, consumeMessageCommand.buildCommandlineOptions(options), new PosixParser());\n",
      "        consumeMessageCommand.execute(commandLine, options, null);\n",
      "\n",
      "        System.setOut(out);\n",
      "        String s = new String(bos.toByteArray());\n",
      "        Assert.assertTrue(!s.contains(\"Consume ok\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExecuteByConditionWhenPullMessageByQueueGotException() throws IllegalAccessException, InterruptedException, RemotingException, MQClientException, MQBrokerException, NoSuchFieldException, SubCommandException {\n",
      "        DefaultMQPullConsumer defaultMQPullConsumer = mock(DefaultMQPullConsumer.class);\n",
      "        when(defaultMQPullConsumer.pull(any(MessageQueue.class), anyString(), anyLong(), anyInt())).thenThrow(Exception.class);\n",
      "        Field producerField = ConsumeMessageCommand.class.getDeclaredField(\"defaultMQPullConsumer\");\n",
      "        producerField.setAccessible(true);\n",
      "        producerField.set(consumeMessageCommand, defaultMQPullConsumer);\n",
      "\n",
      "        PrintStream out = System.out;\n",
      "        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n",
      "        System.setOut(new PrintStream(bos));\n",
      "        Options options = ServerUtil.buildCommandlineOptions(new Options());\n",
      "\n",
      "        String[] subargs = new String[] {\"-t mytopic\", \"-b localhost\", \"-i 0\", \"-n localhost:9876\"};\n",
      "        CommandLine commandLine = ServerUtil.parseCmdLine(\"mqadmin \" + consumeMessageCommand.commandName(), subargs, consumeMessageCommand.buildCommandlineOptions(options), new PosixParser());\n",
      "        consumeMessageCommand.execute(commandLine, options, null);\n",
      "\n",
      "        System.setOut(out);\n",
      "        String s = new String(bos.toByteArray());\n",
      "        Assert.assertTrue(!s.contains(\"Consume ok\"));\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "ConsumeMessageCommand::::timestampFormat(java.lang.String)": [
        56,
        65
      ],
      "ConsumeMessageCommand::::commandName()": [
        66,
        69
      ],
      "ConsumeMessageCommand::::commandDesc()": [
        71,
        74
      ],
      "ConsumeMessageCommand::::executeDefault(long,long)": [
        249,
        278
      ],
      "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)": [
        280,
        305
      ]
    },
    "test_method_lines_dic": {
      "ConsumeMessageCommandTest::::init()": [
        54,
        76
      ],
      "ConsumeMessageCommandTest::::terminate()": [
        78,
        80
      ],
      "ConsumeMessageCommandTest::::testExecuteDefault()": [
        82,
        96
      ],
      "ConsumeMessageCommandTest::::testExecuteByCondition()": [
        98,
        111
      ],
      "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()": [
        113,
        133
      ],
      "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()": [
        135,
        155
      ]
    },
    "reverse_method_lines_dic": {
      "56": "ConsumeMessageCommand::::timestampFormat(java.lang.String)",
      "57": "ConsumeMessageCommand::::timestampFormat(java.lang.String)",
      "58": "ConsumeMessageCommand::::timestampFormat(java.lang.String)",
      "59": "ConsumeMessageCommand::::timestampFormat(java.lang.String)",
      "60": "ConsumeMessageCommand::::timestampFormat(java.lang.String)",
      "61": "ConsumeMessageCommand::::timestampFormat(java.lang.String)",
      "62": "ConsumeMessageCommand::::timestampFormat(java.lang.String)",
      "63": "ConsumeMessageCommand::::timestampFormat(java.lang.String)",
      "64": "ConsumeMessageCommand::::timestampFormat(java.lang.String)",
      "65": "ConsumeMessageCommand::::timestampFormat(java.lang.String)",
      "66": "ConsumeMessageCommand::::commandName()",
      "67": "ConsumeMessageCommand::::commandName()",
      "68": "ConsumeMessageCommand::::commandName()",
      "69": "ConsumeMessageCommand::::commandName()",
      "71": "ConsumeMessageCommand::::commandDesc()",
      "72": "ConsumeMessageCommand::::commandDesc()",
      "73": "ConsumeMessageCommand::::commandDesc()",
      "74": "ConsumeMessageCommand::::commandDesc()",
      "249": "ConsumeMessageCommand::::executeDefault(long,long)",
      "250": "ConsumeMessageCommand::::executeDefault(long,long)",
      "251": "ConsumeMessageCommand::::executeDefault(long,long)",
      "252": "ConsumeMessageCommand::::executeDefault(long,long)",
      "253": "ConsumeMessageCommand::::executeDefault(long,long)",
      "254": "ConsumeMessageCommand::::executeDefault(long,long)",
      "255": "ConsumeMessageCommand::::executeDefault(long,long)",
      "256": "ConsumeMessageCommand::::executeDefault(long,long)",
      "257": "ConsumeMessageCommand::::executeDefault(long,long)",
      "258": "ConsumeMessageCommand::::executeDefault(long,long)",
      "259": "ConsumeMessageCommand::::executeDefault(long,long)",
      "260": "ConsumeMessageCommand::::executeDefault(long,long)",
      "261": "ConsumeMessageCommand::::executeDefault(long,long)",
      "262": "ConsumeMessageCommand::::executeDefault(long,long)",
      "263": "ConsumeMessageCommand::::executeDefault(long,long)",
      "264": "ConsumeMessageCommand::::executeDefault(long,long)",
      "265": "ConsumeMessageCommand::::executeDefault(long,long)",
      "266": "ConsumeMessageCommand::::executeDefault(long,long)",
      "267": "ConsumeMessageCommand::::executeDefault(long,long)",
      "268": "ConsumeMessageCommand::::executeDefault(long,long)",
      "269": "ConsumeMessageCommand::::executeDefault(long,long)",
      "270": "ConsumeMessageCommand::::executeDefault(long,long)",
      "271": "ConsumeMessageCommand::::executeDefault(long,long)",
      "272": "ConsumeMessageCommand::::executeDefault(long,long)",
      "273": "ConsumeMessageCommand::::executeDefault(long,long)",
      "274": "ConsumeMessageCommand::::executeDefault(long,long)",
      "275": "ConsumeMessageCommand::::executeDefault(long,long)",
      "276": "ConsumeMessageCommand::::executeDefault(long,long)",
      "277": "ConsumeMessageCommand::::executeDefault(long,long)",
      "278": "ConsumeMessageCommand::::executeDefault(long,long)",
      "280": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "281": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "282": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "283": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "284": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "285": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "286": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "287": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "288": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "289": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "290": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "291": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "292": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "293": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "294": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "295": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "296": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "297": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "298": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "299": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "300": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "301": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "302": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "303": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "304": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)",
      "305": "ConsumeMessageCommand::::executeByCondition(java.lang.String,java.lang.String,long,long,long)"
    },
    "test_reverse_method_lines_dic": {
      "54": "ConsumeMessageCommandTest::::init()",
      "55": "ConsumeMessageCommandTest::::init()",
      "56": "ConsumeMessageCommandTest::::init()",
      "57": "ConsumeMessageCommandTest::::init()",
      "58": "ConsumeMessageCommandTest::::init()",
      "59": "ConsumeMessageCommandTest::::init()",
      "60": "ConsumeMessageCommandTest::::init()",
      "61": "ConsumeMessageCommandTest::::init()",
      "62": "ConsumeMessageCommandTest::::init()",
      "63": "ConsumeMessageCommandTest::::init()",
      "64": "ConsumeMessageCommandTest::::init()",
      "65": "ConsumeMessageCommandTest::::init()",
      "66": "ConsumeMessageCommandTest::::init()",
      "67": "ConsumeMessageCommandTest::::init()",
      "68": "ConsumeMessageCommandTest::::init()",
      "69": "ConsumeMessageCommandTest::::init()",
      "70": "ConsumeMessageCommandTest::::init()",
      "71": "ConsumeMessageCommandTest::::init()",
      "72": "ConsumeMessageCommandTest::::init()",
      "73": "ConsumeMessageCommandTest::::init()",
      "74": "ConsumeMessageCommandTest::::init()",
      "75": "ConsumeMessageCommandTest::::init()",
      "76": "ConsumeMessageCommandTest::::init()",
      "78": "ConsumeMessageCommandTest::::terminate()",
      "79": "ConsumeMessageCommandTest::::terminate()",
      "80": "ConsumeMessageCommandTest::::terminate()",
      "82": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "83": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "84": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "85": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "86": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "87": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "88": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "89": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "90": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "91": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "92": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "93": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "94": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "95": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "96": "ConsumeMessageCommandTest::::testExecuteDefault()",
      "98": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "99": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "100": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "101": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "102": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "103": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "104": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "105": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "106": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "107": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "108": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "109": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "110": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "111": "ConsumeMessageCommandTest::::testExecuteByCondition()",
      "113": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "114": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "115": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "116": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "117": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "118": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "119": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "120": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "121": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "122": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "123": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "124": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "125": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "126": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "127": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "128": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "129": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "130": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "131": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "132": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "133": "ConsumeMessageCommandTest::::testExecuteDefaultWhenPullMessageByQueueGotException()",
      "135": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "136": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "137": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "138": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "139": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "140": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "141": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "142": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "143": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "144": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "145": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "146": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "147": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "148": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "149": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "150": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "151": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "152": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "153": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "154": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()",
      "155": "ConsumeMessageCommandTest::::testExecuteByConditionWhenPullMessageByQueueGotException()"
    },
    "tests": [
      {
        "test_lines": [
          82,
          96
        ],
        "covered_lines": [
          34,
          36,
          37,
          41,
          45,
          49,
          53,
          68,
          78,
          79,
          80,
          82,
          83,
          84,
          86,
          87,
          88,
          90,
          91,
          92,
          94,
          95,
          96,
          98,
          100,
          101,
          103,
          105,
          106,
          108,
          109,
          110,
          113,
          119,
          122,
          124,
          125,
          126,
          127,
          128,
          129,
          133,
          138,
          140,
          142,
          149,
          153,
          162,
          171,
          172,
          180,
          193,
          195,
          196,
          211,
          212,
          213,
          217,
          218,
          220,
          224,
          225,
          226,
          227,
          229,
          230,
          232,
          246,
          247,
          251,
          252,
          253,
          254,
          257,
          258,
          259,
          262,
          265,
          270,
          273,
          274,
          277,
          278
        ]
      },
      {
        "test_lines": [
          98,
          111
        ],
        "covered_lines": [
          34,
          36,
          37,
          41,
          45,
          49,
          53,
          68,
          78,
          79,
          80,
          82,
          83,
          84,
          86,
          87,
          88,
          90,
          91,
          92,
          94,
          95,
          96,
          98,
          100,
          101,
          103,
          105,
          106,
          108,
          109,
          110,
          113,
          119,
          122,
          124,
          125,
          126,
          127,
          128,
          129,
          133,
          138,
          140,
          142,
          149,
          150,
          153,
          154,
          158,
          160,
          162,
          171,
          172,
          180,
          193,
          201,
          202,
          211,
          212,
          213,
          217,
          218,
          220,
          224,
          225,
          226,
          227,
          229,
          230,
          232,
          246,
          247,
          281,
          283,
          284,
          285,
          288,
          291,
          295,
          296,
          301,
          304,
          305
        ]
      }
    ]
  }
}