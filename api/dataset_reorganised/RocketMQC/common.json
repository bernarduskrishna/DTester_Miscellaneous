{"/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/ConfigManager.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common;\n", "\n", "import java.io.IOException;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "\n", "public abstract class ConfigManager {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n", "\n", "    public abstract String encode();\n", "\n", "    public boolean load() {\n", "        String fileName = null;\n", "        try {\n", "            fileName = this.configFilePath();\n", "            String jsonString = MixAll.file2String(fileName);\n", "\n", "            if (null == jsonString || jsonString.length() == 0) {\n", "                return this.loadBak();\n", "            } else {\n", "                this.decode(jsonString);\n", "                log.info(\"load \" + fileName + \" OK\");\n", "                return true;\n", "            }\n", "        } catch (Exception e) {\n", "            log.error(\"load \" + fileName + \" failed, and try to load backup file\", e);\n", "            return this.loadBak();\n", "        }\n", "    }\n", "\n", "    public abstract String configFilePath();\n", "\n", "    private boolean loadBak() {\n", "        String fileName = null;\n", "        try {\n", "            fileName = this.configFilePath();\n", "            String jsonString = MixAll.file2String(fileName + \".bak\");\n", "            if (jsonString != null && jsonString.length() > 0) {\n", "                this.decode(jsonString);\n", "                log.info(\"load \" + fileName + \" OK\");\n", "                return true;\n", "            }\n", "        } catch (Exception e) {\n", "            log.error(\"load \" + fileName + \" Failed\", e);\n", "            return false;\n", "        }\n", "\n", "        return true;\n", "    }\n", "\n", "    public abstract void decode(final String jsonString);\n", "\n", "    public synchronized void persist() {\n", "        String jsonString = this.encode(true);\n", "        if (jsonString != null) {\n", "            String fileName = this.configFilePath();\n", "            try {\n", "                MixAll.string2File(jsonString, fileName);\n", "            } catch (IOException e) {\n", "                log.error(\"persist file \" + fileName + \" exception\", e);\n", "            }\n", "        }\n", "    }\n", "\n", "    public abstract String encode(final boolean prettyFormat);\n", "}\n"], "test_content": ["package org.apache.rocketmq.common;/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "import org.apache.rocketmq.common.ConfigManager;\n", "import org.apache.rocketmq.common.MixAll;\n", "import org.junit.Test;\n", "\n", "import java.io.File;\n", "import java.io.PrintWriter;\n", "import java.lang.reflect.Method;\n", "\n", "import static org.junit.Assert.assertEquals;\n", "import static org.junit.Assert.assertTrue;\n", "\n", "public class ConfigManagerTest {\n", "    private static final String PATH_FILE = System.getProperty(\"java.io.tmpdir\") + File.separator + \"org.apache.rocketmq.common.ConfigManagerTest\";\n", "    private static final String CONTENT_ENCODE = \"Encode content for ConfigManager\";\n", "\n", "    @Test\n", "    public void testLoad() throws Exception {\n", "        ConfigManager testConfigManager = buildTestConfigManager();\n", "        File file = createAndWriteFile(testConfigManager.configFilePath());\n", "        assertTrue(testConfigManager.load());\n", "        file.delete();\n", "        File fileBak = createAndWriteFile(testConfigManager.configFilePath() + \".bak\");\n", "        assertTrue(testConfigManager.load());\n", "        fileBak.delete();\n", "    }\n", "\n", "    @Test\n", "    public void testLoadBak() throws Exception {\n", "        ConfigManager testConfigManager = buildTestConfigManager();\n", "        File file = createAndWriteFile(testConfigManager.configFilePath() + \".bak\");\n", "        // invoke private method \"loadBak()\"\n", "        Method declaredMethod = ConfigManager.class.getDeclaredMethod(\"loadBak\");\n", "        declaredMethod.setAccessible(true);\n", "        Boolean loadBakResult = (Boolean) declaredMethod.invoke(testConfigManager);\n", "        assertTrue(loadBakResult);\n", "        file.delete();\n", "\n", "        Boolean loadBakResult2 = (Boolean) declaredMethod.invoke(testConfigManager);\n", "        assertTrue(loadBakResult2);\n", "        declaredMethod.setAccessible(false);\n", "    }\n", "\n", "    @Test\n", "    public void testPersist() throws Exception {\n", "        ConfigManager testConfigManager = buildTestConfigManager();\n", "        testConfigManager.persist();\n", "        File file = new File(testConfigManager.configFilePath());\n", "        assertEquals(CONTENT_ENCODE, MixAll.file2String(file));\n", "    }\n", "\n", "    private ConfigManager buildTestConfigManager() {\n", "        return new ConfigManager() {\n", "            @Override\n", "            public String encode() {\n", "                return encode(false);\n", "            }\n", "\n", "            @Override\n", "            public String configFilePath() {\n", "                return PATH_FILE;\n", "            }\n", "\n", "            @Override\n", "            public void decode(String jsonString) {\n", "\n", "            }\n", "\n", "            @Override\n", "            public String encode(boolean prettyFormat) {\n", "                return CONTENT_ENCODE;\n", "            }\n", "        };\n", "    }\n", "\n", "    private File createAndWriteFile(String fileName) throws Exception {\n", "        File file = new File(fileName);\n", "        if (file.exists()) {\n", "            file.delete();\n", "        }\n", "        file.createNewFile();\n", "        PrintWriter out = new PrintWriter(fileName);\n", "        out.write(\"TestForConfigManager\");\n", "        out.close();\n", "        return file;\n", "    }\n", "}"], "method_lines_dic": {"ConfigManager::::encode()": [27, 27], "ConfigManager::::load()": [29, 46], "ConfigManager::::configFilePath()": [48, 48], "ConfigManager::::loadBak()": [50, 66], "ConfigManager::::decode(java.lang.String)": [68, 68], "ConfigManager::::persist()": [70, 80], "ConfigManager::::encode(boolean)": [82, 82]}, "test_method_lines_dic": {"ConfigManagerTest::::testLoad()": [33, 42], "ConfigManagerTest::::testLoadBak()": [44, 58], "ConfigManagerTest::::testPersist()": [60, 66], "ConfigManagerTest::::buildTestConfigManager()": [68, 90], "ConfigManagerTest::::createAndWriteFile(java.lang.String)": [92, 102]}, "reverse_method_lines_dic": {"27": "ConfigManager::::encode()", "29": "ConfigManager::::load()", "30": "ConfigManager::::load()", "31": "ConfigManager::::load()", "32": "ConfigManager::::load()", "33": "ConfigManager::::load()", "34": "ConfigManager::::load()", "35": "ConfigManager::::load()", "36": "ConfigManager::::load()", "37": "ConfigManager::::load()", "38": "ConfigManager::::load()", "39": "ConfigManager::::load()", "40": "ConfigManager::::load()", "41": "ConfigManager::::load()", "42": "ConfigManager::::load()", "43": "ConfigManager::::load()", "44": "ConfigManager::::load()", "45": "ConfigManager::::load()", "46": "ConfigManager::::load()", "48": "ConfigManager::::configFilePath()", "50": "ConfigManager::::loadBak()", "51": "ConfigManager::::loadBak()", "52": "ConfigManager::::loadBak()", "53": "ConfigManager::::loadBak()", "54": "ConfigManager::::loadBak()", "55": "ConfigManager::::loadBak()", "56": "ConfigManager::::loadBak()", "57": "ConfigManager::::loadBak()", "58": "ConfigManager::::loadBak()", "59": "ConfigManager::::loadBak()", "60": "ConfigManager::::loadBak()", "61": "ConfigManager::::loadBak()", "62": "ConfigManager::::loadBak()", "63": "ConfigManager::::loadBak()", "64": "ConfigManager::::loadBak()", "65": "ConfigManager::::loadBak()", "66": "ConfigManager::::loadBak()", "68": "ConfigManager::::decode(java.lang.String)", "70": "ConfigManager::::persist()", "71": "ConfigManager::::persist()", "72": "ConfigManager::::persist()", "73": "ConfigManager::::persist()", "74": "ConfigManager::::persist()", "75": "ConfigManager::::persist()", "76": "ConfigManager::::persist()", "77": "ConfigManager::::persist()", "78": "ConfigManager::::persist()", "79": "ConfigManager::::persist()", "80": "ConfigManager::::persist()", "82": "ConfigManager::::encode(boolean)"}, "test_reverse_method_lines_dic": {"33": "ConfigManagerTest::::testLoad()", "34": "ConfigManagerTest::::testLoad()", "35": "ConfigManagerTest::::testLoad()", "36": "ConfigManagerTest::::testLoad()", "37": "ConfigManagerTest::::testLoad()", "38": "ConfigManagerTest::::testLoad()", "39": "ConfigManagerTest::::testLoad()", "40": "ConfigManagerTest::::testLoad()", "41": "ConfigManagerTest::::testLoad()", "42": "ConfigManagerTest::::testLoad()", "44": "ConfigManagerTest::::testLoadBak()", "45": "ConfigManagerTest::::testLoadBak()", "46": "ConfigManagerTest::::testLoadBak()", "47": "ConfigManagerTest::::testLoadBak()", "48": "ConfigManagerTest::::testLoadBak()", "49": "ConfigManagerTest::::testLoadBak()", "50": "ConfigManagerTest::::testLoadBak()", "51": "ConfigManagerTest::::testLoadBak()", "52": "ConfigManagerTest::::testLoadBak()", "53": "ConfigManagerTest::::testLoadBak()", "54": "ConfigManagerTest::::testLoadBak()", "55": "ConfigManagerTest::::testLoadBak()", "56": "ConfigManagerTest::::testLoadBak()", "57": "ConfigManagerTest::::testLoadBak()", "58": "ConfigManagerTest::::testLoadBak()", "60": "ConfigManagerTest::::testPersist()", "61": "ConfigManagerTest::::testPersist()", "62": "ConfigManagerTest::::testPersist()", "63": "ConfigManagerTest::::testPersist()", "64": "ConfigManagerTest::::testPersist()", "65": "ConfigManagerTest::::testPersist()", "66": "ConfigManagerTest::::testPersist()", "68": "ConfigManagerTest::::buildTestConfigManager()", "69": "ConfigManagerTest::::buildTestConfigManager()", "70": "ConfigManagerTest::::buildTestConfigManager()", "71": "ConfigManagerTest::::buildTestConfigManager()", "72": "ConfigManagerTest::::buildTestConfigManager()", "73": "ConfigManagerTest::::buildTestConfigManager()", "74": "ConfigManagerTest::::buildTestConfigManager()", "75": "ConfigManagerTest::::buildTestConfigManager()", "76": "ConfigManagerTest::::buildTestConfigManager()", "77": "ConfigManagerTest::::buildTestConfigManager()", "78": "ConfigManagerTest::::buildTestConfigManager()", "79": "ConfigManagerTest::::buildTestConfigManager()", "80": "ConfigManagerTest::::buildTestConfigManager()", "81": "ConfigManagerTest::::buildTestConfigManager()", "82": "ConfigManagerTest::::buildTestConfigManager()", "83": "ConfigManagerTest::::buildTestConfigManager()", "84": "ConfigManagerTest::::buildTestConfigManager()", "85": "ConfigManagerTest::::buildTestConfigManager()", "86": "ConfigManagerTest::::buildTestConfigManager()", "87": "ConfigManagerTest::::buildTestConfigManager()", "88": "ConfigManagerTest::::buildTestConfigManager()", "89": "ConfigManagerTest::::buildTestConfigManager()", "90": "ConfigManagerTest::::buildTestConfigManager()", "92": "ConfigManagerTest::::createAndWriteFile(java.lang.String)", "93": "ConfigManagerTest::::createAndWriteFile(java.lang.String)", "94": "ConfigManagerTest::::createAndWriteFile(java.lang.String)", "95": "ConfigManagerTest::::createAndWriteFile(java.lang.String)", "96": "ConfigManagerTest::::createAndWriteFile(java.lang.String)", "97": "ConfigManagerTest::::createAndWriteFile(java.lang.String)", "98": "ConfigManagerTest::::createAndWriteFile(java.lang.String)", "99": "ConfigManagerTest::::createAndWriteFile(java.lang.String)", "100": "ConfigManagerTest::::createAndWriteFile(java.lang.String)", "101": "ConfigManagerTest::::createAndWriteFile(java.lang.String)", "102": "ConfigManagerTest::::createAndWriteFile(java.lang.String)"}, "tests": [{"test_lines": [33, 42], "covered_lines": [24, 25, 30, 32, 33, 35, 36, 38, 39, 40, 51, 53, 54, 55, 56, 57, 58]}, {"test_lines": [44, 58], "covered_lines": [24, 25, 51, 53, 54, 55, 56, 57, 58, 63, 65]}, {"test_lines": [60, 66], "covered_lines": [24, 25, 71, 72, 73, 75, 78, 80]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/ServiceThread.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common;\n", "\n", "import java.util.concurrent.TimeUnit;\n", "import java.util.concurrent.atomic.AtomicBoolean;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "\n", "public abstract class ServiceThread implements Runnable {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n", "\n", "    private static final long JOIN_TIME = 90 * 1000;\n", "\n", "    private Thread thread;\n", "    protected final CountDownLatch2 waitPoint = new CountDownLatch2(1);\n", "    protected volatile AtomicBoolean hasNotified = new AtomicBoolean(false);\n", "    protected volatile boolean stopped = false;\n", "    protected boolean isDaemon = false;\n", "\n", "    //Make it able to restart the thread\n", "    private final AtomicBoolean started = new AtomicBoolean(false);\n", "\n", "    public ServiceThread() {\n", "\n", "    }\n", "\n", "    public abstract String getServiceName();\n", "\n", "    public void start() {\n", "        log.info(\"Try to start service thread:{} started:{} lastThread:{}\", getServiceName(), started.get(), thread);\n", "        if (!started.compareAndSet(false, true)) {\n", "            return;\n", "        }\n", "        stopped = false;\n", "        this.thread = new Thread(this, getServiceName());\n", "        this.thread.setDaemon(isDaemon);\n", "        this.thread.start();\n", "    }\n", "\n", "    public void shutdown() {\n", "        this.shutdown(false);\n", "    }\n", "\n", "    public void shutdown(final boolean interrupt) {\n", "        log.info(\"Try to shutdown service thread:{} started:{} lastThread:{}\", getServiceName(), started.get(), thread);\n", "        if (!started.compareAndSet(true, false)) {\n", "            return;\n", "        }\n", "        this.stopped = true;\n", "        log.info(\"shutdown thread \" + this.getServiceName() + \" interrupt \" + interrupt);\n", "\n", "        if (hasNotified.compareAndSet(false, true)) {\n", "            waitPoint.countDown(); // notify\n", "        }\n", "\n", "        try {\n", "            if (interrupt) {\n", "                this.thread.interrupt();\n", "            }\n", "\n", "            long beginTime = System.currentTimeMillis();\n", "            if (!this.thread.isDaemon()) {\n", "                this.thread.join(this.getJointime());\n", "            }\n", "            long elapsedTime = System.currentTimeMillis() - beginTime;\n", "            log.info(\"join thread \" + this.getServiceName() + \" elapsed time(ms) \" + elapsedTime + \" \"\n", "                + this.getJointime());\n", "        } catch (InterruptedException e) {\n", "            log.error(\"Interrupted\", e);\n", "        }\n", "    }\n", "\n", "    public long getJointime() {\n", "        return JOIN_TIME;\n", "    }\n", "\n", "    @Deprecated\n", "    public void stop() {\n", "        this.stop(false);\n", "    }\n", "\n", "    @Deprecated\n", "    public void stop(final boolean interrupt) {\n", "        if (!started.get()) {\n", "            return;\n", "        }\n", "        this.stopped = true;\n", "        log.info(\"stop thread \" + this.getServiceName() + \" interrupt \" + interrupt);\n", "\n", "        if (hasNotified.compareAndSet(false, true)) {\n", "            waitPoint.countDown(); // notify\n", "        }\n", "\n", "        if (interrupt) {\n", "            this.thread.interrupt();\n", "        }\n", "    }\n", "\n", "    public void makeStop() {\n", "        if (!started.get()) {\n", "            return;\n", "        }\n", "        this.stopped = true;\n", "        log.info(\"makestop thread \" + this.getServiceName());\n", "    }\n", "\n", "    public void wakeup() {\n", "        if (hasNotified.compareAndSet(false, true)) {\n", "            waitPoint.countDown(); // notify\n", "        }\n", "    }\n", "\n", "    protected void waitForRunning(long interval) {\n", "        if (hasNotified.compareAndSet(true, false)) {\n", "            this.onWaitEnd();\n", "            return;\n", "        }\n", "\n", "        //entry to wait\n", "        waitPoint.reset();\n", "\n", "        try {\n", "            waitPoint.await(interval, TimeUnit.MILLISECONDS);\n", "        } catch (InterruptedException e) {\n", "            log.error(\"Interrupted\", e);\n", "        } finally {\n", "            hasNotified.set(false);\n", "            this.onWaitEnd();\n", "        }\n", "    }\n", "\n", "    protected void onWaitEnd() {\n", "    }\n", "\n", "    public boolean isStopped() {\n", "        return stopped;\n", "    }\n", "\n", "    public boolean isDaemon() {\n", "        return isDaemon;\n", "    }\n", "\n", "    public void setDaemon(boolean daemon) {\n", "        isDaemon = daemon;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common;\n", "\n", "import static org.junit.Assert.assertEquals;\n", "\n", "import org.junit.Test;\n", "\n", "public class ServiceThreadTest {\n", "\n", "    @Test\n", "    public void testShutdown() {\n", "        shutdown(false, false);\n", "        shutdown(false, true);\n", "        shutdown(true, false);\n", "        shutdown(true, true);\n", "    }\n", "\n", "    @Test\n", "    public void testStop() {\n", "        stop(true);\n", "        stop(false);\n", "    }\n", "\n", "    @Test\n", "    public void testMakeStop() {\n", "        ServiceThread testServiceThread = startTestServiceThread();\n", "        testServiceThread.makeStop();\n", "        assertEquals(true, testServiceThread.isStopped());\n", "    }\n", "\n", "    @Test\n", "    public void testWakeup() {\n", "        ServiceThread testServiceThread = startTestServiceThread();\n", "        testServiceThread.wakeup();\n", "        assertEquals(true, testServiceThread.hasNotified.get());\n", "        assertEquals(0, testServiceThread.waitPoint.getCount());\n", "    }\n", "\n", "    @Test\n", "    public void testWaitForRunning() {\n", "        ServiceThread testServiceThread = startTestServiceThread();\n", "        // test waitForRunning\n", "        testServiceThread.waitForRunning(1000);\n", "        assertEquals(false, testServiceThread.hasNotified.get());\n", "        assertEquals(1, testServiceThread.waitPoint.getCount());\n", "        // test wake up\n", "        testServiceThread.wakeup();\n", "        assertEquals(true, testServiceThread.hasNotified.get());\n", "        assertEquals(0, testServiceThread.waitPoint.getCount());\n", "        // repeat waitForRunning\n", "        testServiceThread.waitForRunning(1000);\n", "        assertEquals(false, testServiceThread.hasNotified.get());\n", "        assertEquals(0, testServiceThread.waitPoint.getCount());\n", "        // repeat waitForRunning again\n", "        testServiceThread.waitForRunning(1000);\n", "        assertEquals(false, testServiceThread.hasNotified.get());\n", "        assertEquals(1, testServiceThread.waitPoint.getCount());\n", "    }\n", "\n", "    private ServiceThread startTestServiceThread() {\n", "        return startTestServiceThread(false);\n", "    }\n", "\n", "    private ServiceThread startTestServiceThread(boolean daemon) {\n", "        ServiceThread testServiceThread = new ServiceThread() {\n", "\n", "            @Override\n", "            public void run() {\n", "                doNothing();\n", "            }\n", "\n", "            private void doNothing() {}\n", "\n", "            @Override\n", "            public String getServiceName() {\n", "                return \"TestServiceThread\";\n", "            }\n", "        };\n", "        testServiceThread.setDaemon(daemon);\n", "        // test start\n", "        testServiceThread.start();\n", "        assertEquals(false, testServiceThread.isStopped());\n", "        return testServiceThread;\n", "    }\n", "\n", "    public void shutdown(boolean daemon, boolean interrupt) {\n", "        ServiceThread testServiceThread = startTestServiceThread(daemon);\n", "        shutdown0(interrupt, testServiceThread);\n", "        // repeat\n", "        shutdown0(interrupt, testServiceThread);\n", "    }\n", "\n", "    private void shutdown0(boolean interrupt, ServiceThread testServiceThread) {\n", "        if (interrupt) {\n", "            testServiceThread.shutdown(true);\n", "        } else {\n", "            testServiceThread.shutdown();\n", "        }\n", "        assertEquals(true, testServiceThread.isStopped());\n", "        assertEquals(true, testServiceThread.hasNotified.get());\n", "        assertEquals(0, testServiceThread.waitPoint.getCount());\n", "    }\n", "\n", "    public void stop(boolean interrupt) {\n", "        ServiceThread testServiceThread = startTestServiceThread();\n", "        stop0(interrupt, testServiceThread);\n", "        // repeat\n", "        stop0(interrupt, testServiceThread);\n", "    }\n", "\n", "    private void stop0(boolean interrupt, ServiceThread testServiceThread) {\n", "        if (interrupt) {\n", "            testServiceThread.stop(true);\n", "        } else {\n", "            testServiceThread.stop();\n", "        }\n", "        assertEquals(true, testServiceThread.isStopped());\n", "        assertEquals(true, testServiceThread.hasNotified.get());\n", "        assertEquals(0, testServiceThread.waitPoint.getCount());\n", "    }\n", "\n", "}\n"], "method_lines_dic": {"ServiceThread::::getServiceName()": [43, 43], "ServiceThread::::start()": [45, 54], "ServiceThread::::shutdown()": [56, 58], "ServiceThread::::shutdown(boolean)": [60, 87], "ServiceThread::::getJointime()": [89, 91], "ServiceThread::::stop()": [93, 96], "ServiceThread::::stop(boolean)": [98, 113], "ServiceThread::::makeStop()": [115, 121], "ServiceThread::::wakeup()": [123, 127], "ServiceThread::::waitForRunning(long)": [129, 146], "ServiceThread::::onWaitEnd()": [148, 149], "ServiceThread::::isStopped()": [151, 153], "ServiceThread::::isDaemon()": [155, 157], "ServiceThread::::setDaemon(boolean)": [159, 161]}, "test_method_lines_dic": {"ServiceThreadTest::::testShutdown()": [26, 32], "ServiceThreadTest::::testStop()": [34, 38], "ServiceThreadTest::::testMakeStop()": [40, 45], "ServiceThreadTest::::testWakeup()": [47, 53], "ServiceThreadTest::::testWaitForRunning()": [55, 74], "ServiceThreadTest::::startTestServiceThread()": [76, 78], "ServiceThreadTest::::startTestServiceThread(boolean)": [80, 100], "ServiceThreadTest::::shutdown(boolean,boolean)": [102, 107], "ServiceThreadTest::::stop(boolean)": [120, 125]}, "reverse_method_lines_dic": {"43": "ServiceThread::::getServiceName()", "45": "ServiceThread::::start()", "46": "ServiceThread::::start()", "47": "ServiceThread::::start()", "48": "ServiceThread::::start()", "49": "ServiceThread::::start()", "50": "ServiceThread::::start()", "51": "ServiceThread::::start()", "52": "ServiceThread::::start()", "53": "ServiceThread::::start()", "54": "ServiceThread::::start()", "56": "ServiceThread::::shutdown()", "57": "ServiceThread::::shutdown()", "58": "ServiceThread::::shutdown()", "60": "ServiceThread::::shutdown(boolean)", "61": "ServiceThread::::shutdown(boolean)", "62": "ServiceThread::::shutdown(boolean)", "63": "ServiceThread::::shutdown(boolean)", "64": "ServiceThread::::shutdown(boolean)", "65": "ServiceThread::::shutdown(boolean)", "66": "ServiceThread::::shutdown(boolean)", "67": "ServiceThread::::shutdown(boolean)", "68": "ServiceThread::::shutdown(boolean)", "69": "ServiceThread::::shutdown(boolean)", "70": "ServiceThread::::shutdown(boolean)", "71": "ServiceThread::::shutdown(boolean)", "72": "ServiceThread::::shutdown(boolean)", "73": "ServiceThread::::shutdown(boolean)", "74": "ServiceThread::::shutdown(boolean)", "75": "ServiceThread::::shutdown(boolean)", "76": "ServiceThread::::shutdown(boolean)", "77": "ServiceThread::::shutdown(boolean)", "78": "ServiceThread::::shutdown(boolean)", "79": "ServiceThread::::shutdown(boolean)", "80": "ServiceThread::::shutdown(boolean)", "81": "ServiceThread::::shutdown(boolean)", "82": "ServiceThread::::shutdown(boolean)", "83": "ServiceThread::::shutdown(boolean)", "84": "ServiceThread::::shutdown(boolean)", "85": "ServiceThread::::shutdown(boolean)", "86": "ServiceThread::::shutdown(boolean)", "87": "ServiceThread::::shutdown(boolean)", "89": "ServiceThread::::getJointime()", "90": "ServiceThread::::getJointime()", "91": "ServiceThread::::getJointime()", "93": "ServiceThread::::stop()", "94": "ServiceThread::::stop()", "95": "ServiceThread::::stop()", "96": "ServiceThread::::stop()", "98": "ServiceThread::::stop(boolean)", "99": "ServiceThread::::stop(boolean)", "100": "ServiceThread::::stop(boolean)", "101": "ServiceThread::::stop(boolean)", "102": "ServiceThread::::stop(boolean)", "103": "ServiceThread::::stop(boolean)", "104": "ServiceThread::::stop(boolean)", "105": "ServiceThread::::stop(boolean)", "106": "ServiceThread::::stop(boolean)", "107": "ServiceThread::::stop(boolean)", "108": "ServiceThread::::stop(boolean)", "109": "ServiceThread::::stop(boolean)", "110": "ServiceThread::::stop(boolean)", "111": "ServiceThread::::stop(boolean)", "112": "ServiceThread::::stop(boolean)", "113": "ServiceThread::::stop(boolean)", "115": "ServiceThread::::makeStop()", "116": "ServiceThread::::makeStop()", "117": "ServiceThread::::makeStop()", "118": "ServiceThread::::makeStop()", "119": "ServiceThread::::makeStop()", "120": "ServiceThread::::makeStop()", "121": "ServiceThread::::makeStop()", "123": "ServiceThread::::wakeup()", "124": "ServiceThread::::wakeup()", "125": "ServiceThread::::wakeup()", "126": "ServiceThread::::wakeup()", "127": "ServiceThread::::wakeup()", "129": "ServiceThread::::waitForRunning(long)", "130": "ServiceThread::::waitForRunning(long)", "131": "ServiceThread::::waitForRunning(long)", "132": "ServiceThread::::waitForRunning(long)", "133": "ServiceThread::::waitForRunning(long)", "134": "ServiceThread::::waitForRunning(long)", "135": "ServiceThread::::waitForRunning(long)", "136": "ServiceThread::::waitForRunning(long)", "137": "ServiceThread::::waitForRunning(long)", "138": "ServiceThread::::waitForRunning(long)", "139": "ServiceThread::::waitForRunning(long)", "140": "ServiceThread::::waitForRunning(long)", "141": "ServiceThread::::waitForRunning(long)", "142": "ServiceThread::::waitForRunning(long)", "143": "ServiceThread::::waitForRunning(long)", "144": "ServiceThread::::waitForRunning(long)", "145": "ServiceThread::::waitForRunning(long)", "146": "ServiceThread::::waitForRunning(long)", "148": "ServiceThread::::onWaitEnd()", "149": "ServiceThread::::onWaitEnd()", "151": "ServiceThread::::isStopped()", "152": "ServiceThread::::isStopped()", "153": "ServiceThread::::isStopped()", "155": "ServiceThread::::isDaemon()", "156": "ServiceThread::::isDaemon()", "157": "ServiceThread::::isDaemon()", "159": "ServiceThread::::setDaemon(boolean)", "160": "ServiceThread::::setDaemon(boolean)", "161": "ServiceThread::::setDaemon(boolean)"}, "test_reverse_method_lines_dic": {"26": "ServiceThreadTest::::testShutdown()", "27": "ServiceThreadTest::::testShutdown()", "28": "ServiceThreadTest::::testShutdown()", "29": "ServiceThreadTest::::testShutdown()", "30": "ServiceThreadTest::::testShutdown()", "31": "ServiceThreadTest::::testShutdown()", "32": "ServiceThreadTest::::testShutdown()", "34": "ServiceThreadTest::::testStop()", "35": "ServiceThreadTest::::testStop()", "36": "ServiceThreadTest::::testStop()", "37": "ServiceThreadTest::::testStop()", "38": "ServiceThreadTest::::testStop()", "40": "ServiceThreadTest::::testMakeStop()", "41": "ServiceThreadTest::::testMakeStop()", "42": "ServiceThreadTest::::testMakeStop()", "43": "ServiceThreadTest::::testMakeStop()", "44": "ServiceThreadTest::::testMakeStop()", "45": "ServiceThreadTest::::testMakeStop()", "47": "ServiceThreadTest::::testWakeup()", "48": "ServiceThreadTest::::testWakeup()", "49": "ServiceThreadTest::::testWakeup()", "50": "ServiceThreadTest::::testWakeup()", "51": "ServiceThreadTest::::testWakeup()", "52": "ServiceThreadTest::::testWakeup()", "53": "ServiceThreadTest::::testWakeup()", "55": "ServiceThreadTest::::testWaitForRunning()", "56": "ServiceThreadTest::::testWaitForRunning()", "57": "ServiceThreadTest::::testWaitForRunning()", "58": "ServiceThreadTest::::testWaitForRunning()", "59": "ServiceThreadTest::::testWaitForRunning()", "60": "ServiceThreadTest::::testWaitForRunning()", "61": "ServiceThreadTest::::testWaitForRunning()", "62": "ServiceThreadTest::::testWaitForRunning()", "63": "ServiceThreadTest::::testWaitForRunning()", "64": "ServiceThreadTest::::testWaitForRunning()", "65": "ServiceThreadTest::::testWaitForRunning()", "66": "ServiceThreadTest::::testWaitForRunning()", "67": "ServiceThreadTest::::testWaitForRunning()", "68": "ServiceThreadTest::::testWaitForRunning()", "69": "ServiceThreadTest::::testWaitForRunning()", "70": "ServiceThreadTest::::testWaitForRunning()", "71": "ServiceThreadTest::::testWaitForRunning()", "72": "ServiceThreadTest::::testWaitForRunning()", "73": "ServiceThreadTest::::testWaitForRunning()", "74": "ServiceThreadTest::::testWaitForRunning()", "76": "ServiceThreadTest::::startTestServiceThread()", "77": "ServiceThreadTest::::startTestServiceThread()", "78": "ServiceThreadTest::::startTestServiceThread()", "80": "ServiceThreadTest::::startTestServiceThread(boolean)", "81": "ServiceThreadTest::::startTestServiceThread(boolean)", "82": "ServiceThreadTest::::startTestServiceThread(boolean)", "83": "ServiceThreadTest::::startTestServiceThread(boolean)", "84": "ServiceThreadTest::::startTestServiceThread(boolean)", "85": "ServiceThreadTest::::startTestServiceThread(boolean)", "86": "ServiceThreadTest::::startTestServiceThread(boolean)", "87": "ServiceThreadTest::::startTestServiceThread(boolean)", "88": "ServiceThreadTest::::startTestServiceThread(boolean)", "89": "ServiceThreadTest::::startTestServiceThread(boolean)", "90": "ServiceThreadTest::::startTestServiceThread(boolean)", "91": "ServiceThreadTest::::startTestServiceThread(boolean)", "92": "ServiceThreadTest::::startTestServiceThread(boolean)", "93": "ServiceThreadTest::::startTestServiceThread(boolean)", "94": "ServiceThreadTest::::startTestServiceThread(boolean)", "95": "ServiceThreadTest::::startTestServiceThread(boolean)", "96": "ServiceThreadTest::::startTestServiceThread(boolean)", "97": "ServiceThreadTest::::startTestServiceThread(boolean)", "98": "ServiceThreadTest::::startTestServiceThread(boolean)", "99": "ServiceThreadTest::::startTestServiceThread(boolean)", "100": "ServiceThreadTest::::startTestServiceThread(boolean)", "102": "ServiceThreadTest::::shutdown(boolean,boolean)", "103": "ServiceThreadTest::::shutdown(boolean,boolean)", "104": "ServiceThreadTest::::shutdown(boolean,boolean)", "105": "ServiceThreadTest::::shutdown(boolean,boolean)", "106": "ServiceThreadTest::::shutdown(boolean,boolean)", "107": "ServiceThreadTest::::shutdown(boolean,boolean)", "120": "ServiceThreadTest::::stop(boolean)", "121": "ServiceThreadTest::::stop(boolean)", "122": "ServiceThreadTest::::stop(boolean)", "123": "ServiceThreadTest::::stop(boolean)", "124": "ServiceThreadTest::::stop(boolean)", "125": "ServiceThreadTest::::stop(boolean)"}, "tests": [{"test_lines": [26, 32], "covered_lines": [26, 31, 32, 33, 34, 37, 39, 41, 46, 47, 50, 51, 52, 53, 54, 57, 58, 61, 62, 63, 65, 66, 68, 69, 73, 74, 77, 78, 79, 81, 82, 83, 86, 87, 90, 152, 160, 161]}, {"test_lines": [34, 38], "covered_lines": [26, 31, 32, 33, 34, 37, 39, 41, 46, 47, 50, 51, 52, 53, 54, 95, 96, 100, 103, 104, 106, 107, 110, 111, 113, 152, 160, 161]}, {"test_lines": [40, 45], "covered_lines": [26, 31, 32, 33, 34, 37, 39, 41, 46, 47, 50, 51, 52, 53, 54, 116, 119, 120, 121, 152, 160, 161]}, {"test_lines": [47, 53], "covered_lines": [26, 31, 32, 33, 34, 37, 39, 41, 46, 47, 50, 51, 52, 53, 54, 124, 125, 127, 152, 160, 161]}, {"test_lines": [55, 74], "covered_lines": [26, 31, 32, 33, 34, 37, 39, 41, 46, 47, 50, 51, 52, 53, 54, 124, 125, 127, 130, 131, 132, 136, 139, 143, 144, 145, 146, 149, 152, 160, 161]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common;\n", "\n", "import java.net.InetAddress;\n", "import java.net.UnknownHostException;\n", "import org.apache.rocketmq.common.annotation.ImportantField;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.common.constant.PermName;\n", "import org.apache.rocketmq.common.topic.TopicValidator;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.remoting.common.RemotingUtil;\n", "\n", "public class BrokerConfig {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n", "\n", "    private String rocketmqHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY, System.getenv(MixAll.ROCKETMQ_HOME_ENV));\n", "    @ImportantField\n", "    private String namesrvAddr = System.getProperty(MixAll.NAMESRV_ADDR_PROPERTY, System.getenv(MixAll.NAMESRV_ADDR_ENV));\n", "    @ImportantField\n", "    private String brokerIP1 = RemotingUtil.getLocalAddress();\n", "    private String brokerIP2 = RemotingUtil.getLocalAddress();\n", "    @ImportantField\n", "    private String brokerName = localHostName();\n", "    @ImportantField\n", "    private String brokerClusterName = \"DefaultCluster\";\n", "    @ImportantField\n", "    private long brokerId = MixAll.MASTER_ID;\n", "    private int brokerPermission = PermName.PERM_READ | PermName.PERM_WRITE;\n", "    private int defaultTopicQueueNums = 8;\n", "    @ImportantField\n", "    private boolean autoCreateTopicEnable = true;\n", "\n", "    private boolean clusterTopicEnable = true;\n", "\n", "    private boolean brokerTopicEnable = true;\n", "    @ImportantField\n", "    private boolean autoCreateSubscriptionGroup = true;\n", "    private String messageStorePlugIn = \"\";\n", "    @ImportantField\n", "    private String msgTraceTopicName = TopicValidator.RMQ_SYS_TRACE_TOPIC;\n", "    @ImportantField\n", "    private boolean traceTopicEnable = false;\n", "    /**\n", "     * thread numbers for send message thread pool, since spin lock will be used by default since 4.0.x, the default\n", "     * value is 1.\n", "     */\n", "    private int sendMessageThreadPoolNums = 1; //16 + Runtime.getRuntime().availableProcessors() * 4;\n", "    private int pullMessageThreadPoolNums = 16 + Runtime.getRuntime().availableProcessors() * 2;\n", "    private int processReplyMessageThreadPoolNums = 16 + Runtime.getRuntime().availableProcessors() * 2;\n", "    private int queryMessageThreadPoolNums = 8 + Runtime.getRuntime().availableProcessors();\n", "\n", "    private int adminBrokerThreadPoolNums = 16;\n", "    private int clientManageThreadPoolNums = 32;\n", "    private int consumerManageThreadPoolNums = 32;\n", "    private int heartbeatThreadPoolNums = Math.min(32, Runtime.getRuntime().availableProcessors());\n", "\n", "    /**\n", "     * Thread numbers for EndTransactionProcessor\n", "     */\n", "    private int endTransactionThreadPoolNums = 8 + Runtime.getRuntime().availableProcessors() * 2;\n", "\n", "    private int flushConsumerOffsetInterval = 1000 * 5;\n", "\n", "    private int flushConsumerOffsetHistoryInterval = 1000 * 60;\n", "\n", "    @ImportantField\n", "    private boolean rejectTransactionMessage = false;\n", "    @ImportantField\n", "    private boolean fetchNamesrvAddrByAddressServer = false;\n", "    private int sendThreadPoolQueueCapacity = 10000;\n", "    private int pullThreadPoolQueueCapacity = 100000;\n", "    private int replyThreadPoolQueueCapacity = 10000;\n", "    private int queryThreadPoolQueueCapacity = 20000;\n", "    private int clientManagerThreadPoolQueueCapacity = 1000000;\n", "    private int consumerManagerThreadPoolQueueCapacity = 1000000;\n", "    private int heartbeatThreadPoolQueueCapacity = 50000;\n", "    private int endTransactionPoolQueueCapacity = 100000;\n", "\n", "    private int filterServerNums = 0;\n", "\n", "    private boolean longPollingEnable = true;\n", "\n", "    private long shortPollingTimeMills = 1000;\n", "\n", "    private boolean notifyConsumerIdsChangedEnable = true;\n", "\n", "    private boolean highSpeedMode = false;\n", "\n", "    private boolean commercialEnable = true;\n", "    private int commercialTimerCount = 1;\n", "    private int commercialTransCount = 1;\n", "    private int commercialBigCount = 1;\n", "    private int commercialBaseCount = 1;\n", "\n", "    private boolean transferMsgByHeap = true;\n", "    private int maxDelayTime = 40;\n", "\n", "    private String regionId = MixAll.DEFAULT_TRACE_REGION_ID;\n", "    private int registerBrokerTimeoutMills = 6000;\n", "\n", "    private boolean slaveReadEnable = false;\n", "\n", "    private boolean disableConsumeIfConsumerReadSlowly = false;\n", "    private long consumerFallbehindThreshold = 1024L * 1024 * 1024 * 16;\n", "\n", "    private boolean brokerFastFailureEnable = true;\n", "    private long waitTimeMillsInSendQueue = 200;\n", "    private long waitTimeMillsInPullQueue = 5 * 1000;\n", "    private long waitTimeMillsInHeartbeatQueue = 31 * 1000;\n", "    private long waitTimeMillsInTransactionQueue = 3 * 1000;\n", "\n", "    private long startAcceptSendRequestTimeStamp = 0L;\n", "\n", "    private boolean traceOn = true;\n", "\n", "    // Switch of filter bit map calculation.\n", "    // If switch on:\n", "    // 1. Calculate filter bit map when construct queue.\n", "    // 2. Filter bit map will be saved to consume queue extend file if allowed.\n", "    private boolean enableCalcFilterBitMap = false;\n", "\n", "    // Expect num of consumers will use filter.\n", "    private int expectConsumerNumUseFilter = 32;\n", "\n", "    // Error rate of bloom filter, 1~100.\n", "    private int maxErrorRateOfBloomFilter = 20;\n", "\n", "    //how long to clean filter data after dead.Default: 24h\n", "    private long filterDataCleanTimeSpan = 24 * 3600 * 1000;\n", "\n", "    // whether do filter when retry.\n", "    private boolean filterSupportRetry = false;\n", "    private boolean enablePropertyFilter = false;\n", "\n", "    private boolean compressedRegister = false;\n", "\n", "    private boolean forceRegister = true;\n", "\n", "    /**\n", "     * This configurable item defines interval of topics registration of broker to name server. Allowing values are\n", "     * between 10, 000 and 60, 000 milliseconds.\n", "     */\n", "    private int registerNameServerPeriod = 1000 * 30;\n", "\n", "    /**\n", "     * The minimum time of the transactional message  to be checked firstly, one message only exceed this time interval\n", "     * that can be checked.\n", "     */\n", "    @ImportantField\n", "    private long transactionTimeOut = 6 * 1000;\n", "\n", "    /**\n", "     * The maximum number of times the message was checked, if exceed this value, this message will be discarded.\n", "     */\n", "    @ImportantField\n", "    private int transactionCheckMax = 15;\n", "\n", "    /**\n", "     * Transaction message check interval.\n", "     */\n", "    @ImportantField\n", "    private long transactionCheckInterval = 60 * 1000;\n", "\n", "    /**\n", "     * Acl feature switch\n", "     */\n", "    @ImportantField\n", "    private boolean aclEnable = false;\n", "\n", "    private boolean storeReplyMessageEnable = true;\n", "\n", "    private boolean autoDeleteUnusedStats = false;\n", "\n", "    public static String localHostName() {\n", "        try {\n", "            return InetAddress.getLocalHost().getHostName();\n", "        } catch (UnknownHostException e) {\n", "            log.error(\"Failed to obtain the host name\", e);\n", "        }\n", "\n", "        return \"DEFAULT_BROKER\";\n", "    }\n", "\n", "    public boolean isTraceOn() {\n", "        return traceOn;\n", "    }\n", "\n", "    public void setTraceOn(final boolean traceOn) {\n", "        this.traceOn = traceOn;\n", "    }\n", "\n", "    public long getStartAcceptSendRequestTimeStamp() {\n", "        return startAcceptSendRequestTimeStamp;\n", "    }\n", "\n", "    public void setStartAcceptSendRequestTimeStamp(final long startAcceptSendRequestTimeStamp) {\n", "        this.startAcceptSendRequestTimeStamp = startAcceptSendRequestTimeStamp;\n", "    }\n", "\n", "    public long getWaitTimeMillsInSendQueue() {\n", "        return waitTimeMillsInSendQueue;\n", "    }\n", "\n", "    public void setWaitTimeMillsInSendQueue(final long waitTimeMillsInSendQueue) {\n", "        this.waitTimeMillsInSendQueue = waitTimeMillsInSendQueue;\n", "    }\n", "\n", "    public long getConsumerFallbehindThreshold() {\n", "        return consumerFallbehindThreshold;\n", "    }\n", "\n", "    public void setConsumerFallbehindThreshold(final long consumerFallbehindThreshold) {\n", "        this.consumerFallbehindThreshold = consumerFallbehindThreshold;\n", "    }\n", "\n", "    public boolean isBrokerFastFailureEnable() {\n", "        return brokerFastFailureEnable;\n", "    }\n", "\n", "    public void setBrokerFastFailureEnable(final boolean brokerFastFailureEnable) {\n", "        this.brokerFastFailureEnable = brokerFastFailureEnable;\n", "    }\n", "\n", "    public long getWaitTimeMillsInPullQueue() {\n", "        return waitTimeMillsInPullQueue;\n", "    }\n", "\n", "    public void setWaitTimeMillsInPullQueue(final long waitTimeMillsInPullQueue) {\n", "        this.waitTimeMillsInPullQueue = waitTimeMillsInPullQueue;\n", "    }\n", "\n", "    public boolean isDisableConsumeIfConsumerReadSlowly() {\n", "        return disableConsumeIfConsumerReadSlowly;\n", "    }\n", "\n", "    public void setDisableConsumeIfConsumerReadSlowly(final boolean disableConsumeIfConsumerReadSlowly) {\n", "        this.disableConsumeIfConsumerReadSlowly = disableConsumeIfConsumerReadSlowly;\n", "    }\n", "\n", "    public boolean isSlaveReadEnable() {\n", "        return slaveReadEnable;\n", "    }\n", "\n", "    public void setSlaveReadEnable(final boolean slaveReadEnable) {\n", "        this.slaveReadEnable = slaveReadEnable;\n", "    }\n", "\n", "    public int getRegisterBrokerTimeoutMills() {\n", "        return registerBrokerTimeoutMills;\n", "    }\n", "\n", "    public void setRegisterBrokerTimeoutMills(final int registerBrokerTimeoutMills) {\n", "        this.registerBrokerTimeoutMills = registerBrokerTimeoutMills;\n", "    }\n", "\n", "    public String getRegionId() {\n", "        return regionId;\n", "    }\n", "\n", "    public void setRegionId(final String regionId) {\n", "        this.regionId = regionId;\n", "    }\n", "\n", "    public boolean isTransferMsgByHeap() {\n", "        return transferMsgByHeap;\n", "    }\n", "\n", "    public void setTransferMsgByHeap(final boolean transferMsgByHeap) {\n", "        this.transferMsgByHeap = transferMsgByHeap;\n", "    }\n", "\n", "    public String getMessageStorePlugIn() {\n", "        return messageStorePlugIn;\n", "    }\n", "\n", "    public void setMessageStorePlugIn(String messageStorePlugIn) {\n", "        this.messageStorePlugIn = messageStorePlugIn;\n", "    }\n", "\n", "    public boolean isHighSpeedMode() {\n", "        return highSpeedMode;\n", "    }\n", "\n", "    public void setHighSpeedMode(final boolean highSpeedMode) {\n", "        this.highSpeedMode = highSpeedMode;\n", "    }\n", "\n", "    public String getRocketmqHome() {\n", "        return rocketmqHome;\n", "    }\n", "\n", "    public void setRocketmqHome(String rocketmqHome) {\n", "        this.rocketmqHome = rocketmqHome;\n", "    }\n", "\n", "    public String getBrokerName() {\n", "        return brokerName;\n", "    }\n", "\n", "    public void setBrokerName(String brokerName) {\n", "        this.brokerName = brokerName;\n", "    }\n", "\n", "    public int getBrokerPermission() {\n", "        return brokerPermission;\n", "    }\n", "\n", "    public void setBrokerPermission(int brokerPermission) {\n", "        this.brokerPermission = brokerPermission;\n", "    }\n", "\n", "    public int getDefaultTopicQueueNums() {\n", "        return defaultTopicQueueNums;\n", "    }\n", "\n", "    public void setDefaultTopicQueueNums(int defaultTopicQueueNums) {\n", "        this.defaultTopicQueueNums = defaultTopicQueueNums;\n", "    }\n", "\n", "    public boolean isAutoCreateTopicEnable() {\n", "        return autoCreateTopicEnable;\n", "    }\n", "\n", "    public void setAutoCreateTopicEnable(boolean autoCreateTopic) {\n", "        this.autoCreateTopicEnable = autoCreateTopic;\n", "    }\n", "\n", "    public String getBrokerClusterName() {\n", "        return brokerClusterName;\n", "    }\n", "\n", "    public void setBrokerClusterName(String brokerClusterName) {\n", "        this.brokerClusterName = brokerClusterName;\n", "    }\n", "\n", "    public String getBrokerIP1() {\n", "        return brokerIP1;\n", "    }\n", "\n", "    public void setBrokerIP1(String brokerIP1) {\n", "        this.brokerIP1 = brokerIP1;\n", "    }\n", "\n", "    public String getBrokerIP2() {\n", "        return brokerIP2;\n", "    }\n", "\n", "    public void setBrokerIP2(String brokerIP2) {\n", "        this.brokerIP2 = brokerIP2;\n", "    }\n", "\n", "    public int getSendMessageThreadPoolNums() {\n", "        return sendMessageThreadPoolNums;\n", "    }\n", "\n", "    public void setSendMessageThreadPoolNums(int sendMessageThreadPoolNums) {\n", "        this.sendMessageThreadPoolNums = sendMessageThreadPoolNums;\n", "    }\n", "\n", "    public int getPullMessageThreadPoolNums() {\n", "        return pullMessageThreadPoolNums;\n", "    }\n", "\n", "    public void setPullMessageThreadPoolNums(int pullMessageThreadPoolNums) {\n", "        this.pullMessageThreadPoolNums = pullMessageThreadPoolNums;\n", "    }\n", "\n", "    public int getProcessReplyMessageThreadPoolNums() {\n", "        return processReplyMessageThreadPoolNums;\n", "    }\n", "\n", "    public void setProcessReplyMessageThreadPoolNums(int processReplyMessageThreadPoolNums) {\n", "        this.processReplyMessageThreadPoolNums = processReplyMessageThreadPoolNums;\n", "    }\n", "\n", "    public int getQueryMessageThreadPoolNums() {\n", "        return queryMessageThreadPoolNums;\n", "    }\n", "\n", "    public void setQueryMessageThreadPoolNums(final int queryMessageThreadPoolNums) {\n", "        this.queryMessageThreadPoolNums = queryMessageThreadPoolNums;\n", "    }\n", "\n", "    public int getAdminBrokerThreadPoolNums() {\n", "        return adminBrokerThreadPoolNums;\n", "    }\n", "\n", "    public void setAdminBrokerThreadPoolNums(int adminBrokerThreadPoolNums) {\n", "        this.adminBrokerThreadPoolNums = adminBrokerThreadPoolNums;\n", "    }\n", "\n", "    public int getFlushConsumerOffsetInterval() {\n", "        return flushConsumerOffsetInterval;\n", "    }\n", "\n", "    public void setFlushConsumerOffsetInterval(int flushConsumerOffsetInterval) {\n", "        this.flushConsumerOffsetInterval = flushConsumerOffsetInterval;\n", "    }\n", "\n", "    public int getFlushConsumerOffsetHistoryInterval() {\n", "        return flushConsumerOffsetHistoryInterval;\n", "    }\n", "\n", "    public void setFlushConsumerOffsetHistoryInterval(int flushConsumerOffsetHistoryInterval) {\n", "        this.flushConsumerOffsetHistoryInterval = flushConsumerOffsetHistoryInterval;\n", "    }\n", "\n", "    public boolean isClusterTopicEnable() {\n", "        return clusterTopicEnable;\n", "    }\n", "\n", "    public void setClusterTopicEnable(boolean clusterTopicEnable) {\n", "        this.clusterTopicEnable = clusterTopicEnable;\n", "    }\n", "\n", "    public String getNamesrvAddr() {\n", "        return namesrvAddr;\n", "    }\n", "\n", "    public void setNamesrvAddr(String namesrvAddr) {\n", "        this.namesrvAddr = namesrvAddr;\n", "    }\n", "\n", "    public long getBrokerId() {\n", "        return brokerId;\n", "    }\n", "\n", "    public void setBrokerId(long brokerId) {\n", "        this.brokerId = brokerId;\n", "    }\n", "\n", "    public boolean isAutoCreateSubscriptionGroup() {\n", "        return autoCreateSubscriptionGroup;\n", "    }\n", "\n", "    public void setAutoCreateSubscriptionGroup(boolean autoCreateSubscriptionGroup) {\n", "        this.autoCreateSubscriptionGroup = autoCreateSubscriptionGroup;\n", "    }\n", "\n", "    public boolean isRejectTransactionMessage() {\n", "        return rejectTransactionMessage;\n", "    }\n", "\n", "    public void setRejectTransactionMessage(boolean rejectTransactionMessage) {\n", "        this.rejectTransactionMessage = rejectTransactionMessage;\n", "    }\n", "\n", "    public boolean isFetchNamesrvAddrByAddressServer() {\n", "        return fetchNamesrvAddrByAddressServer;\n", "    }\n", "\n", "    public void setFetchNamesrvAddrByAddressServer(boolean fetchNamesrvAddrByAddressServer) {\n", "        this.fetchNamesrvAddrByAddressServer = fetchNamesrvAddrByAddressServer;\n", "    }\n", "\n", "    public int getSendThreadPoolQueueCapacity() {\n", "        return sendThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public void setSendThreadPoolQueueCapacity(int sendThreadPoolQueueCapacity) {\n", "        this.sendThreadPoolQueueCapacity = sendThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public int getPullThreadPoolQueueCapacity() {\n", "        return pullThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public void setPullThreadPoolQueueCapacity(int pullThreadPoolQueueCapacity) {\n", "        this.pullThreadPoolQueueCapacity = pullThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public int getReplyThreadPoolQueueCapacity() {\n", "        return replyThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public void setReplyThreadPoolQueueCapacity(int replyThreadPoolQueueCapacity) {\n", "        this.replyThreadPoolQueueCapacity = replyThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public int getQueryThreadPoolQueueCapacity() {\n", "        return queryThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public void setQueryThreadPoolQueueCapacity(final int queryThreadPoolQueueCapacity) {\n", "        this.queryThreadPoolQueueCapacity = queryThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public boolean isBrokerTopicEnable() {\n", "        return brokerTopicEnable;\n", "    }\n", "\n", "    public void setBrokerTopicEnable(boolean brokerTopicEnable) {\n", "        this.brokerTopicEnable = brokerTopicEnable;\n", "    }\n", "\n", "    public int getFilterServerNums() {\n", "        return filterServerNums;\n", "    }\n", "\n", "    public void setFilterServerNums(int filterServerNums) {\n", "        this.filterServerNums = filterServerNums;\n", "    }\n", "\n", "    public boolean isLongPollingEnable() {\n", "        return longPollingEnable;\n", "    }\n", "\n", "    public void setLongPollingEnable(boolean longPollingEnable) {\n", "        this.longPollingEnable = longPollingEnable;\n", "    }\n", "\n", "    public boolean isNotifyConsumerIdsChangedEnable() {\n", "        return notifyConsumerIdsChangedEnable;\n", "    }\n", "\n", "    public void setNotifyConsumerIdsChangedEnable(boolean notifyConsumerIdsChangedEnable) {\n", "        this.notifyConsumerIdsChangedEnable = notifyConsumerIdsChangedEnable;\n", "    }\n", "\n", "    public long getShortPollingTimeMills() {\n", "        return shortPollingTimeMills;\n", "    }\n", "\n", "    public void setShortPollingTimeMills(long shortPollingTimeMills) {\n", "        this.shortPollingTimeMills = shortPollingTimeMills;\n", "    }\n", "\n", "    public int getClientManageThreadPoolNums() {\n", "        return clientManageThreadPoolNums;\n", "    }\n", "\n", "    public void setClientManageThreadPoolNums(int clientManageThreadPoolNums) {\n", "        this.clientManageThreadPoolNums = clientManageThreadPoolNums;\n", "    }\n", "\n", "    public boolean isCommercialEnable() {\n", "        return commercialEnable;\n", "    }\n", "\n", "    public void setCommercialEnable(final boolean commercialEnable) {\n", "        this.commercialEnable = commercialEnable;\n", "    }\n", "\n", "    public int getCommercialTimerCount() {\n", "        return commercialTimerCount;\n", "    }\n", "\n", "    public void setCommercialTimerCount(final int commercialTimerCount) {\n", "        this.commercialTimerCount = commercialTimerCount;\n", "    }\n", "\n", "    public int getCommercialTransCount() {\n", "        return commercialTransCount;\n", "    }\n", "\n", "    public void setCommercialTransCount(final int commercialTransCount) {\n", "        this.commercialTransCount = commercialTransCount;\n", "    }\n", "\n", "    public int getCommercialBigCount() {\n", "        return commercialBigCount;\n", "    }\n", "\n", "    public void setCommercialBigCount(final int commercialBigCount) {\n", "        this.commercialBigCount = commercialBigCount;\n", "    }\n", "\n", "    public int getMaxDelayTime() {\n", "        return maxDelayTime;\n", "    }\n", "\n", "    public void setMaxDelayTime(final int maxDelayTime) {\n", "        this.maxDelayTime = maxDelayTime;\n", "    }\n", "\n", "    public int getClientManagerThreadPoolQueueCapacity() {\n", "        return clientManagerThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public void setClientManagerThreadPoolQueueCapacity(int clientManagerThreadPoolQueueCapacity) {\n", "        this.clientManagerThreadPoolQueueCapacity = clientManagerThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public int getConsumerManagerThreadPoolQueueCapacity() {\n", "        return consumerManagerThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public void setConsumerManagerThreadPoolQueueCapacity(int consumerManagerThreadPoolQueueCapacity) {\n", "        this.consumerManagerThreadPoolQueueCapacity = consumerManagerThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public int getConsumerManageThreadPoolNums() {\n", "        return consumerManageThreadPoolNums;\n", "    }\n", "\n", "    public void setConsumerManageThreadPoolNums(int consumerManageThreadPoolNums) {\n", "        this.consumerManageThreadPoolNums = consumerManageThreadPoolNums;\n", "    }\n", "\n", "    public int getCommercialBaseCount() {\n", "        return commercialBaseCount;\n", "    }\n", "\n", "    public void setCommercialBaseCount(int commercialBaseCount) {\n", "        this.commercialBaseCount = commercialBaseCount;\n", "    }\n", "\n", "    public boolean isEnableCalcFilterBitMap() {\n", "        return enableCalcFilterBitMap;\n", "    }\n", "\n", "    public void setEnableCalcFilterBitMap(boolean enableCalcFilterBitMap) {\n", "        this.enableCalcFilterBitMap = enableCalcFilterBitMap;\n", "    }\n", "\n", "    public int getExpectConsumerNumUseFilter() {\n", "        return expectConsumerNumUseFilter;\n", "    }\n", "\n", "    public void setExpectConsumerNumUseFilter(int expectConsumerNumUseFilter) {\n", "        this.expectConsumerNumUseFilter = expectConsumerNumUseFilter;\n", "    }\n", "\n", "    public int getMaxErrorRateOfBloomFilter() {\n", "        return maxErrorRateOfBloomFilter;\n", "    }\n", "\n", "    public void setMaxErrorRateOfBloomFilter(int maxErrorRateOfBloomFilter) {\n", "        this.maxErrorRateOfBloomFilter = maxErrorRateOfBloomFilter;\n", "    }\n", "\n", "    public long getFilterDataCleanTimeSpan() {\n", "        return filterDataCleanTimeSpan;\n", "    }\n", "\n", "    public void setFilterDataCleanTimeSpan(long filterDataCleanTimeSpan) {\n", "        this.filterDataCleanTimeSpan = filterDataCleanTimeSpan;\n", "    }\n", "\n", "    public boolean isFilterSupportRetry() {\n", "        return filterSupportRetry;\n", "    }\n", "\n", "    public void setFilterSupportRetry(boolean filterSupportRetry) {\n", "        this.filterSupportRetry = filterSupportRetry;\n", "    }\n", "\n", "    public boolean isEnablePropertyFilter() {\n", "        return enablePropertyFilter;\n", "    }\n", "\n", "    public void setEnablePropertyFilter(boolean enablePropertyFilter) {\n", "        this.enablePropertyFilter = enablePropertyFilter;\n", "    }\n", "\n", "    public boolean isCompressedRegister() {\n", "        return compressedRegister;\n", "    }\n", "\n", "    public void setCompressedRegister(boolean compressedRegister) {\n", "        this.compressedRegister = compressedRegister;\n", "    }\n", "\n", "    public boolean isForceRegister() {\n", "        return forceRegister;\n", "    }\n", "\n", "    public void setForceRegister(boolean forceRegister) {\n", "        this.forceRegister = forceRegister;\n", "    }\n", "\n", "    public int getHeartbeatThreadPoolQueueCapacity() {\n", "        return heartbeatThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public void setHeartbeatThreadPoolQueueCapacity(int heartbeatThreadPoolQueueCapacity) {\n", "        this.heartbeatThreadPoolQueueCapacity = heartbeatThreadPoolQueueCapacity;\n", "    }\n", "\n", "    public int getHeartbeatThreadPoolNums() {\n", "        return heartbeatThreadPoolNums;\n", "    }\n", "\n", "    public void setHeartbeatThreadPoolNums(int heartbeatThreadPoolNums) {\n", "        this.heartbeatThreadPoolNums = heartbeatThreadPoolNums;\n", "    }\n", "\n", "    public long getWaitTimeMillsInHeartbeatQueue() {\n", "        return waitTimeMillsInHeartbeatQueue;\n", "    }\n", "\n", "    public void setWaitTimeMillsInHeartbeatQueue(long waitTimeMillsInHeartbeatQueue) {\n", "        this.waitTimeMillsInHeartbeatQueue = waitTimeMillsInHeartbeatQueue;\n", "    }\n", "\n", "    public int getRegisterNameServerPeriod() {\n", "        return registerNameServerPeriod;\n", "    }\n", "\n", "    public void setRegisterNameServerPeriod(int registerNameServerPeriod) {\n", "        this.registerNameServerPeriod = registerNameServerPeriod;\n", "    }\n", "\n", "    public long getTransactionTimeOut() {\n", "        return transactionTimeOut;\n", "    }\n", "\n", "    public void setTransactionTimeOut(long transactionTimeOut) {\n", "        this.transactionTimeOut = transactionTimeOut;\n", "    }\n", "\n", "    public int getTransactionCheckMax() {\n", "        return transactionCheckMax;\n", "    }\n", "\n", "    public void setTransactionCheckMax(int transactionCheckMax) {\n", "        this.transactionCheckMax = transactionCheckMax;\n", "    }\n", "\n", "    public long getTransactionCheckInterval() {\n", "        return transactionCheckInterval;\n", "    }\n", "\n", "    public void setTransactionCheckInterval(long transactionCheckInterval) {\n", "        this.transactionCheckInterval = transactionCheckInterval;\n", "    }\n", "\n", "    public int getEndTransactionThreadPoolNums() {\n", "        return endTransactionThreadPoolNums;\n", "    }\n", "\n", "    public void setEndTransactionThreadPoolNums(int endTransactionThreadPoolNums) {\n", "        this.endTransactionThreadPoolNums = endTransactionThreadPoolNums;\n", "    }\n", "\n", "    public int getEndTransactionPoolQueueCapacity() {\n", "        return endTransactionPoolQueueCapacity;\n", "    }\n", "\n", "    public void setEndTransactionPoolQueueCapacity(int endTransactionPoolQueueCapacity) {\n", "        this.endTransactionPoolQueueCapacity = endTransactionPoolQueueCapacity;\n", "    }\n", "\n", "    public long getWaitTimeMillsInTransactionQueue() {\n", "        return waitTimeMillsInTransactionQueue;\n", "    }\n", "\n", "    public void setWaitTimeMillsInTransactionQueue(long waitTimeMillsInTransactionQueue) {\n", "        this.waitTimeMillsInTransactionQueue = waitTimeMillsInTransactionQueue;\n", "    }\n", "\n", "    public String getMsgTraceTopicName() {\n", "        return msgTraceTopicName;\n", "    }\n", "\n", "    public void setMsgTraceTopicName(String msgTraceTopicName) {\n", "        this.msgTraceTopicName = msgTraceTopicName;\n", "    }\n", "\n", "    public boolean isTraceTopicEnable() {\n", "        return traceTopicEnable;\n", "    }\n", "\n", "    public void setTraceTopicEnable(boolean traceTopicEnable) {\n", "        this.traceTopicEnable = traceTopicEnable;\n", "    }\n", "\n", "    public boolean isAclEnable() {\n", "        return aclEnable;\n", "    }\n", "\n", "    public void setAclEnable(boolean aclEnable) {\n", "        this.aclEnable = aclEnable;\n", "    }\n", "\n", "    public boolean isStoreReplyMessageEnable() {\n", "        return storeReplyMessageEnable;\n", "    }\n", "\n", "    public void setStoreReplyMessageEnable(boolean storeReplyMessageEnable) {\n", "        this.storeReplyMessageEnable = storeReplyMessageEnable;\n", "    }\n", "\n", "    public boolean isAutoDeleteUnusedStats() {\n", "        return autoDeleteUnusedStats;\n", "    }\n", "\n", "    public void setAutoDeleteUnusedStats(boolean autoDeleteUnusedStats) {\n", "        this.autoDeleteUnusedStats = autoDeleteUnusedStats;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common;\n", "\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class BrokerConfigTest {\n", "\n", "    @Test\n", "    public void testConsumerFallBehindThresholdOverflow() {\n", "        long expect = 1024L * 1024 * 1024 * 16;\n", "        assertThat(new BrokerConfig().getConsumerFallbehindThreshold()).isEqualTo(expect);\n", "    }\n", "\n", "    @Test\n", "    public void testBrokerConfigAttribute() {\n", "        BrokerConfig brokerConfig = new BrokerConfig();\n", "        brokerConfig.setNamesrvAddr(\"127.0.0.1:9876\");\n", "        brokerConfig.setAutoCreateTopicEnable(false);\n", "        brokerConfig.setBrokerName(\"broker-a\");\n", "        brokerConfig.setBrokerId(0);\n", "        brokerConfig.setBrokerClusterName(\"DefaultCluster\");\n", "        brokerConfig.setMsgTraceTopicName(\"RMQ_SYS_TRACE_TOPIC4\");\n", "        brokerConfig.setAutoDeleteUnusedStats(true);\n", "        assertThat(brokerConfig.getBrokerClusterName()).isEqualTo(\"DefaultCluster\");\n", "        assertThat(brokerConfig.getNamesrvAddr()).isEqualTo(\"127.0.0.1:9876\");\n", "        assertThat(brokerConfig.getMsgTraceTopicName()).isEqualTo(\"RMQ_SYS_TRACE_TOPIC4\");\n", "        assertThat(brokerConfig.getBrokerId()).isEqualTo(0);\n", "        assertThat(brokerConfig.getBrokerName()).isEqualTo(\"broker-a\");\n", "        assertThat(brokerConfig.isAutoCreateTopicEnable()).isEqualTo(false);\n", "        assertThat(brokerConfig.isAutoDeleteUnusedStats()).isEqualTo(true);\n", "    }\n", "}"], "method_lines_dic": {"BrokerConfig::::localHostName()": [190, 198], "BrokerConfig::::isTraceOn()": [200, 202], "BrokerConfig::::setTraceOn(boolean)": [204, 206], "BrokerConfig::::getStartAcceptSendRequestTimeStamp()": [208, 210], "BrokerConfig::::setStartAcceptSendRequestTimeStamp(long)": [212, 214], "BrokerConfig::::getWaitTimeMillsInSendQueue()": [216, 218], "BrokerConfig::::setWaitTimeMillsInSendQueue(long)": [220, 222], "BrokerConfig::::getConsumerFallbehindThreshold()": [224, 226], "BrokerConfig::::setConsumerFallbehindThreshold(long)": [228, 230], "BrokerConfig::::isBrokerFastFailureEnable()": [232, 234], "BrokerConfig::::setBrokerFastFailureEnable(boolean)": [236, 238], "BrokerConfig::::getWaitTimeMillsInPullQueue()": [240, 242], "BrokerConfig::::setWaitTimeMillsInPullQueue(long)": [244, 246], "BrokerConfig::::isDisableConsumeIfConsumerReadSlowly()": [248, 250], "BrokerConfig::::setDisableConsumeIfConsumerReadSlowly(boolean)": [252, 254], "BrokerConfig::::isSlaveReadEnable()": [256, 258], "BrokerConfig::::setSlaveReadEnable(boolean)": [260, 262], "BrokerConfig::::getRegisterBrokerTimeoutMills()": [264, 266], "BrokerConfig::::setRegisterBrokerTimeoutMills(int)": [268, 270], "BrokerConfig::::getRegionId()": [272, 274], "BrokerConfig::::setRegionId(java.lang.String)": [276, 278], "BrokerConfig::::isTransferMsgByHeap()": [280, 282], "BrokerConfig::::setTransferMsgByHeap(boolean)": [284, 286], "BrokerConfig::::getMessageStorePlugIn()": [288, 290], "BrokerConfig::::setMessageStorePlugIn(java.lang.String)": [292, 294], "BrokerConfig::::isHighSpeedMode()": [296, 298], "BrokerConfig::::setHighSpeedMode(boolean)": [300, 302], "BrokerConfig::::getRocketmqHome()": [304, 306], "BrokerConfig::::setRocketmqHome(java.lang.String)": [308, 310], "BrokerConfig::::getBrokerName()": [312, 314], "BrokerConfig::::setBrokerName(java.lang.String)": [316, 318], "BrokerConfig::::getBrokerPermission()": [320, 322], "BrokerConfig::::setBrokerPermission(int)": [324, 326], "BrokerConfig::::getDefaultTopicQueueNums()": [328, 330], "BrokerConfig::::setDefaultTopicQueueNums(int)": [332, 334], "BrokerConfig::::isAutoCreateTopicEnable()": [336, 338], "BrokerConfig::::setAutoCreateTopicEnable(boolean)": [340, 342], "BrokerConfig::::getBrokerClusterName()": [344, 346], "BrokerConfig::::setBrokerClusterName(java.lang.String)": [348, 350], "BrokerConfig::::getBrokerIP1()": [352, 354], "BrokerConfig::::setBrokerIP1(java.lang.String)": [356, 358], "BrokerConfig::::getBrokerIP2()": [360, 362], "BrokerConfig::::setBrokerIP2(java.lang.String)": [364, 366], "BrokerConfig::::getSendMessageThreadPoolNums()": [368, 370], "BrokerConfig::::setSendMessageThreadPoolNums(int)": [372, 374], "BrokerConfig::::getPullMessageThreadPoolNums()": [376, 378], "BrokerConfig::::setPullMessageThreadPoolNums(int)": [380, 382], "BrokerConfig::::getProcessReplyMessageThreadPoolNums()": [384, 386], "BrokerConfig::::setProcessReplyMessageThreadPoolNums(int)": [388, 390], "BrokerConfig::::getQueryMessageThreadPoolNums()": [392, 394], "BrokerConfig::::setQueryMessageThreadPoolNums(int)": [396, 398], "BrokerConfig::::getAdminBrokerThreadPoolNums()": [400, 402], "BrokerConfig::::setAdminBrokerThreadPoolNums(int)": [404, 406], "BrokerConfig::::getFlushConsumerOffsetInterval()": [408, 410], "BrokerConfig::::setFlushConsumerOffsetInterval(int)": [412, 414], "BrokerConfig::::getFlushConsumerOffsetHistoryInterval()": [416, 418], "BrokerConfig::::setFlushConsumerOffsetHistoryInterval(int)": [420, 422], "BrokerConfig::::isClusterTopicEnable()": [424, 426], "BrokerConfig::::setClusterTopicEnable(boolean)": [428, 430], "BrokerConfig::::getNamesrvAddr()": [432, 434], "BrokerConfig::::setNamesrvAddr(java.lang.String)": [436, 438], "BrokerConfig::::getBrokerId()": [440, 442], "BrokerConfig::::setBrokerId(long)": [444, 446], "BrokerConfig::::isAutoCreateSubscriptionGroup()": [448, 450], "BrokerConfig::::setAutoCreateSubscriptionGroup(boolean)": [452, 454], "BrokerConfig::::isRejectTransactionMessage()": [456, 458], "BrokerConfig::::setRejectTransactionMessage(boolean)": [460, 462], "BrokerConfig::::isFetchNamesrvAddrByAddressServer()": [464, 466], "BrokerConfig::::setFetchNamesrvAddrByAddressServer(boolean)": [468, 470], "BrokerConfig::::getSendThreadPoolQueueCapacity()": [472, 474], "BrokerConfig::::setSendThreadPoolQueueCapacity(int)": [476, 478], "BrokerConfig::::getPullThreadPoolQueueCapacity()": [480, 482], "BrokerConfig::::setPullThreadPoolQueueCapacity(int)": [484, 486], "BrokerConfig::::getReplyThreadPoolQueueCapacity()": [488, 490], "BrokerConfig::::setReplyThreadPoolQueueCapacity(int)": [492, 494], "BrokerConfig::::getQueryThreadPoolQueueCapacity()": [496, 498], "BrokerConfig::::setQueryThreadPoolQueueCapacity(int)": [500, 502], "BrokerConfig::::isBrokerTopicEnable()": [504, 506], "BrokerConfig::::setBrokerTopicEnable(boolean)": [508, 510], "BrokerConfig::::getFilterServerNums()": [512, 514], "BrokerConfig::::setFilterServerNums(int)": [516, 518], "BrokerConfig::::isLongPollingEnable()": [520, 522], "BrokerConfig::::setLongPollingEnable(boolean)": [524, 526], "BrokerConfig::::isNotifyConsumerIdsChangedEnable()": [528, 530], "BrokerConfig::::setNotifyConsumerIdsChangedEnable(boolean)": [532, 534], "BrokerConfig::::getShortPollingTimeMills()": [536, 538], "BrokerConfig::::setShortPollingTimeMills(long)": [540, 542], "BrokerConfig::::getClientManageThreadPoolNums()": [544, 546], "BrokerConfig::::setClientManageThreadPoolNums(int)": [548, 550], "BrokerConfig::::isCommercialEnable()": [552, 554], "BrokerConfig::::setCommercialEnable(boolean)": [556, 558], "BrokerConfig::::getCommercialTimerCount()": [560, 562], "BrokerConfig::::setCommercialTimerCount(int)": [564, 566], "BrokerConfig::::getCommercialTransCount()": [568, 570], "BrokerConfig::::setCommercialTransCount(int)": [572, 574], "BrokerConfig::::getCommercialBigCount()": [576, 578], "BrokerConfig::::setCommercialBigCount(int)": [580, 582], "BrokerConfig::::getMaxDelayTime()": [584, 586], "BrokerConfig::::setMaxDelayTime(int)": [588, 590], "BrokerConfig::::getClientManagerThreadPoolQueueCapacity()": [592, 594], "BrokerConfig::::setClientManagerThreadPoolQueueCapacity(int)": [596, 598], "BrokerConfig::::getConsumerManagerThreadPoolQueueCapacity()": [600, 602], "BrokerConfig::::setConsumerManagerThreadPoolQueueCapacity(int)": [604, 606], "BrokerConfig::::getConsumerManageThreadPoolNums()": [608, 610], "BrokerConfig::::setConsumerManageThreadPoolNums(int)": [612, 614], "BrokerConfig::::getCommercialBaseCount()": [616, 618], "BrokerConfig::::setCommercialBaseCount(int)": [620, 622], "BrokerConfig::::isEnableCalcFilterBitMap()": [624, 626], "BrokerConfig::::setEnableCalcFilterBitMap(boolean)": [628, 630], "BrokerConfig::::getExpectConsumerNumUseFilter()": [632, 634], "BrokerConfig::::setExpectConsumerNumUseFilter(int)": [636, 638], "BrokerConfig::::getMaxErrorRateOfBloomFilter()": [640, 642], "BrokerConfig::::setMaxErrorRateOfBloomFilter(int)": [644, 646], "BrokerConfig::::getFilterDataCleanTimeSpan()": [648, 650], "BrokerConfig::::setFilterDataCleanTimeSpan(long)": [652, 654], "BrokerConfig::::isFilterSupportRetry()": [656, 658], "BrokerConfig::::setFilterSupportRetry(boolean)": [660, 662], "BrokerConfig::::isEnablePropertyFilter()": [664, 666], "BrokerConfig::::setEnablePropertyFilter(boolean)": [668, 670], "BrokerConfig::::isCompressedRegister()": [672, 674], "BrokerConfig::::setCompressedRegister(boolean)": [676, 678], "BrokerConfig::::isForceRegister()": [680, 682], "BrokerConfig::::setForceRegister(boolean)": [684, 686], "BrokerConfig::::getHeartbeatThreadPoolQueueCapacity()": [688, 690], "BrokerConfig::::setHeartbeatThreadPoolQueueCapacity(int)": [692, 694], "BrokerConfig::::getHeartbeatThreadPoolNums()": [696, 698], "BrokerConfig::::setHeartbeatThreadPoolNums(int)": [700, 702], "BrokerConfig::::getWaitTimeMillsInHeartbeatQueue()": [704, 706], "BrokerConfig::::setWaitTimeMillsInHeartbeatQueue(long)": [708, 710], "BrokerConfig::::getRegisterNameServerPeriod()": [712, 714], "BrokerConfig::::setRegisterNameServerPeriod(int)": [716, 718], "BrokerConfig::::getTransactionTimeOut()": [720, 722], "BrokerConfig::::setTransactionTimeOut(long)": [724, 726], "BrokerConfig::::getTransactionCheckMax()": [728, 730], "BrokerConfig::::setTransactionCheckMax(int)": [732, 734], "BrokerConfig::::getTransactionCheckInterval()": [736, 738], "BrokerConfig::::setTransactionCheckInterval(long)": [740, 742], "BrokerConfig::::getEndTransactionThreadPoolNums()": [744, 746], "BrokerConfig::::setEndTransactionThreadPoolNums(int)": [748, 750], "BrokerConfig::::getEndTransactionPoolQueueCapacity()": [752, 754], "BrokerConfig::::setEndTransactionPoolQueueCapacity(int)": [756, 758], "BrokerConfig::::getWaitTimeMillsInTransactionQueue()": [760, 762], "BrokerConfig::::setWaitTimeMillsInTransactionQueue(long)": [764, 766], "BrokerConfig::::getMsgTraceTopicName()": [768, 770], "BrokerConfig::::setMsgTraceTopicName(java.lang.String)": [772, 774], "BrokerConfig::::isTraceTopicEnable()": [776, 778], "BrokerConfig::::setTraceTopicEnable(boolean)": [780, 782], "BrokerConfig::::isAclEnable()": [784, 786], "BrokerConfig::::setAclEnable(boolean)": [788, 790], "BrokerConfig::::isStoreReplyMessageEnable()": [792, 794], "BrokerConfig::::setStoreReplyMessageEnable(boolean)": [796, 798], "BrokerConfig::::isAutoDeleteUnusedStats()": [800, 802], "BrokerConfig::::setAutoDeleteUnusedStats(boolean)": [804, 806]}, "test_method_lines_dic": {"BrokerConfigTest::::testConsumerFallBehindThresholdOverflow()": [25, 29], "BrokerConfigTest::::testBrokerConfigAttribute()": [31, 48]}, "reverse_method_lines_dic": {"190": "BrokerConfig::::localHostName()", "191": "BrokerConfig::::localHostName()", "192": "BrokerConfig::::localHostName()", "193": "BrokerConfig::::localHostName()", "194": "BrokerConfig::::localHostName()", "195": "BrokerConfig::::localHostName()", "196": "BrokerConfig::::localHostName()", "197": "BrokerConfig::::localHostName()", "198": "BrokerConfig::::localHostName()", "200": "BrokerConfig::::isTraceOn()", "201": "BrokerConfig::::isTraceOn()", "202": "BrokerConfig::::isTraceOn()", "204": "BrokerConfig::::setTraceOn(boolean)", "205": "BrokerConfig::::setTraceOn(boolean)", "206": "BrokerConfig::::setTraceOn(boolean)", "208": "BrokerConfig::::getStartAcceptSendRequestTimeStamp()", "209": "BrokerConfig::::getStartAcceptSendRequestTimeStamp()", "210": "BrokerConfig::::getStartAcceptSendRequestTimeStamp()", "212": "BrokerConfig::::setStartAcceptSendRequestTimeStamp(long)", "213": "BrokerConfig::::setStartAcceptSendRequestTimeStamp(long)", "214": "BrokerConfig::::setStartAcceptSendRequestTimeStamp(long)", "216": "BrokerConfig::::getWaitTimeMillsInSendQueue()", "217": "BrokerConfig::::getWaitTimeMillsInSendQueue()", "218": "BrokerConfig::::getWaitTimeMillsInSendQueue()", "220": "BrokerConfig::::setWaitTimeMillsInSendQueue(long)", "221": "BrokerConfig::::setWaitTimeMillsInSendQueue(long)", "222": "BrokerConfig::::setWaitTimeMillsInSendQueue(long)", "224": "BrokerConfig::::getConsumerFallbehindThreshold()", "225": "BrokerConfig::::getConsumerFallbehindThreshold()", "226": "BrokerConfig::::getConsumerFallbehindThreshold()", "228": "BrokerConfig::::setConsumerFallbehindThreshold(long)", "229": "BrokerConfig::::setConsumerFallbehindThreshold(long)", "230": "BrokerConfig::::setConsumerFallbehindThreshold(long)", "232": "BrokerConfig::::isBrokerFastFailureEnable()", "233": "BrokerConfig::::isBrokerFastFailureEnable()", "234": "BrokerConfig::::isBrokerFastFailureEnable()", "236": "BrokerConfig::::setBrokerFastFailureEnable(boolean)", "237": "BrokerConfig::::setBrokerFastFailureEnable(boolean)", "238": "BrokerConfig::::setBrokerFastFailureEnable(boolean)", "240": "BrokerConfig::::getWaitTimeMillsInPullQueue()", "241": "BrokerConfig::::getWaitTimeMillsInPullQueue()", "242": "BrokerConfig::::getWaitTimeMillsInPullQueue()", "244": "BrokerConfig::::setWaitTimeMillsInPullQueue(long)", "245": "BrokerConfig::::setWaitTimeMillsInPullQueue(long)", "246": "BrokerConfig::::setWaitTimeMillsInPullQueue(long)", "248": "BrokerConfig::::isDisableConsumeIfConsumerReadSlowly()", "249": "BrokerConfig::::isDisableConsumeIfConsumerReadSlowly()", "250": "BrokerConfig::::isDisableConsumeIfConsumerReadSlowly()", "252": "BrokerConfig::::setDisableConsumeIfConsumerReadSlowly(boolean)", "253": "BrokerConfig::::setDisableConsumeIfConsumerReadSlowly(boolean)", "254": "BrokerConfig::::setDisableConsumeIfConsumerReadSlowly(boolean)", "256": "BrokerConfig::::isSlaveReadEnable()", "257": "BrokerConfig::::isSlaveReadEnable()", "258": "BrokerConfig::::isSlaveReadEnable()", "260": "BrokerConfig::::setSlaveReadEnable(boolean)", "261": "BrokerConfig::::setSlaveReadEnable(boolean)", "262": "BrokerConfig::::setSlaveReadEnable(boolean)", "264": "BrokerConfig::::getRegisterBrokerTimeoutMills()", "265": "BrokerConfig::::getRegisterBrokerTimeoutMills()", "266": "BrokerConfig::::getRegisterBrokerTimeoutMills()", "268": "BrokerConfig::::setRegisterBrokerTimeoutMills(int)", "269": "BrokerConfig::::setRegisterBrokerTimeoutMills(int)", "270": "BrokerConfig::::setRegisterBrokerTimeoutMills(int)", "272": "BrokerConfig::::getRegionId()", "273": "BrokerConfig::::getRegionId()", "274": "BrokerConfig::::getRegionId()", "276": "BrokerConfig::::setRegionId(java.lang.String)", "277": "BrokerConfig::::setRegionId(java.lang.String)", "278": "BrokerConfig::::setRegionId(java.lang.String)", "280": "BrokerConfig::::isTransferMsgByHeap()", "281": "BrokerConfig::::isTransferMsgByHeap()", "282": "BrokerConfig::::isTransferMsgByHeap()", "284": "BrokerConfig::::setTransferMsgByHeap(boolean)", "285": "BrokerConfig::::setTransferMsgByHeap(boolean)", "286": "BrokerConfig::::setTransferMsgByHeap(boolean)", "288": "BrokerConfig::::getMessageStorePlugIn()", "289": "BrokerConfig::::getMessageStorePlugIn()", "290": "BrokerConfig::::getMessageStorePlugIn()", "292": "BrokerConfig::::setMessageStorePlugIn(java.lang.String)", "293": "BrokerConfig::::setMessageStorePlugIn(java.lang.String)", "294": "BrokerConfig::::setMessageStorePlugIn(java.lang.String)", "296": "BrokerConfig::::isHighSpeedMode()", "297": "BrokerConfig::::isHighSpeedMode()", "298": "BrokerConfig::::isHighSpeedMode()", "300": "BrokerConfig::::setHighSpeedMode(boolean)", "301": "BrokerConfig::::setHighSpeedMode(boolean)", "302": "BrokerConfig::::setHighSpeedMode(boolean)", "304": "BrokerConfig::::getRocketmqHome()", "305": "BrokerConfig::::getRocketmqHome()", "306": "BrokerConfig::::getRocketmqHome()", "308": "BrokerConfig::::setRocketmqHome(java.lang.String)", "309": "BrokerConfig::::setRocketmqHome(java.lang.String)", "310": "BrokerConfig::::setRocketmqHome(java.lang.String)", "312": "BrokerConfig::::getBrokerName()", "313": "BrokerConfig::::getBrokerName()", "314": "BrokerConfig::::getBrokerName()", "316": "BrokerConfig::::setBrokerName(java.lang.String)", "317": "BrokerConfig::::setBrokerName(java.lang.String)", "318": "BrokerConfig::::setBrokerName(java.lang.String)", "320": "BrokerConfig::::getBrokerPermission()", "321": "BrokerConfig::::getBrokerPermission()", "322": "BrokerConfig::::getBrokerPermission()", "324": "BrokerConfig::::setBrokerPermission(int)", "325": "BrokerConfig::::setBrokerPermission(int)", "326": "BrokerConfig::::setBrokerPermission(int)", "328": "BrokerConfig::::getDefaultTopicQueueNums()", "329": "BrokerConfig::::getDefaultTopicQueueNums()", "330": "BrokerConfig::::getDefaultTopicQueueNums()", "332": "BrokerConfig::::setDefaultTopicQueueNums(int)", "333": "BrokerConfig::::setDefaultTopicQueueNums(int)", "334": "BrokerConfig::::setDefaultTopicQueueNums(int)", "336": "BrokerConfig::::isAutoCreateTopicEnable()", "337": "BrokerConfig::::isAutoCreateTopicEnable()", "338": "BrokerConfig::::isAutoCreateTopicEnable()", "340": "BrokerConfig::::setAutoCreateTopicEnable(boolean)", "341": "BrokerConfig::::setAutoCreateTopicEnable(boolean)", "342": "BrokerConfig::::setAutoCreateTopicEnable(boolean)", "344": "BrokerConfig::::getBrokerClusterName()", "345": "BrokerConfig::::getBrokerClusterName()", "346": "BrokerConfig::::getBrokerClusterName()", "348": "BrokerConfig::::setBrokerClusterName(java.lang.String)", "349": "BrokerConfig::::setBrokerClusterName(java.lang.String)", "350": "BrokerConfig::::setBrokerClusterName(java.lang.String)", "352": "BrokerConfig::::getBrokerIP1()", "353": "BrokerConfig::::getBrokerIP1()", "354": "BrokerConfig::::getBrokerIP1()", "356": "BrokerConfig::::setBrokerIP1(java.lang.String)", "357": "BrokerConfig::::setBrokerIP1(java.lang.String)", "358": "BrokerConfig::::setBrokerIP1(java.lang.String)", "360": "BrokerConfig::::getBrokerIP2()", "361": "BrokerConfig::::getBrokerIP2()", "362": "BrokerConfig::::getBrokerIP2()", "364": "BrokerConfig::::setBrokerIP2(java.lang.String)", "365": "BrokerConfig::::setBrokerIP2(java.lang.String)", "366": "BrokerConfig::::setBrokerIP2(java.lang.String)", "368": "BrokerConfig::::getSendMessageThreadPoolNums()", "369": "BrokerConfig::::getSendMessageThreadPoolNums()", "370": "BrokerConfig::::getSendMessageThreadPoolNums()", "372": "BrokerConfig::::setSendMessageThreadPoolNums(int)", "373": "BrokerConfig::::setSendMessageThreadPoolNums(int)", "374": "BrokerConfig::::setSendMessageThreadPoolNums(int)", "376": "BrokerConfig::::getPullMessageThreadPoolNums()", "377": "BrokerConfig::::getPullMessageThreadPoolNums()", "378": "BrokerConfig::::getPullMessageThreadPoolNums()", "380": "BrokerConfig::::setPullMessageThreadPoolNums(int)", "381": "BrokerConfig::::setPullMessageThreadPoolNums(int)", "382": "BrokerConfig::::setPullMessageThreadPoolNums(int)", "384": "BrokerConfig::::getProcessReplyMessageThreadPoolNums()", "385": "BrokerConfig::::getProcessReplyMessageThreadPoolNums()", "386": "BrokerConfig::::getProcessReplyMessageThreadPoolNums()", "388": "BrokerConfig::::setProcessReplyMessageThreadPoolNums(int)", "389": "BrokerConfig::::setProcessReplyMessageThreadPoolNums(int)", "390": "BrokerConfig::::setProcessReplyMessageThreadPoolNums(int)", "392": "BrokerConfig::::getQueryMessageThreadPoolNums()", "393": "BrokerConfig::::getQueryMessageThreadPoolNums()", "394": "BrokerConfig::::getQueryMessageThreadPoolNums()", "396": "BrokerConfig::::setQueryMessageThreadPoolNums(int)", "397": "BrokerConfig::::setQueryMessageThreadPoolNums(int)", "398": "BrokerConfig::::setQueryMessageThreadPoolNums(int)", "400": "BrokerConfig::::getAdminBrokerThreadPoolNums()", "401": "BrokerConfig::::getAdminBrokerThreadPoolNums()", "402": "BrokerConfig::::getAdminBrokerThreadPoolNums()", "404": "BrokerConfig::::setAdminBrokerThreadPoolNums(int)", "405": "BrokerConfig::::setAdminBrokerThreadPoolNums(int)", "406": "BrokerConfig::::setAdminBrokerThreadPoolNums(int)", "408": "BrokerConfig::::getFlushConsumerOffsetInterval()", "409": "BrokerConfig::::getFlushConsumerOffsetInterval()", "410": "BrokerConfig::::getFlushConsumerOffsetInterval()", "412": "BrokerConfig::::setFlushConsumerOffsetInterval(int)", "413": "BrokerConfig::::setFlushConsumerOffsetInterval(int)", "414": "BrokerConfig::::setFlushConsumerOffsetInterval(int)", "416": "BrokerConfig::::getFlushConsumerOffsetHistoryInterval()", "417": "BrokerConfig::::getFlushConsumerOffsetHistoryInterval()", "418": "BrokerConfig::::getFlushConsumerOffsetHistoryInterval()", "420": "BrokerConfig::::setFlushConsumerOffsetHistoryInterval(int)", "421": "BrokerConfig::::setFlushConsumerOffsetHistoryInterval(int)", "422": "BrokerConfig::::setFlushConsumerOffsetHistoryInterval(int)", "424": "BrokerConfig::::isClusterTopicEnable()", "425": "BrokerConfig::::isClusterTopicEnable()", "426": "BrokerConfig::::isClusterTopicEnable()", "428": "BrokerConfig::::setClusterTopicEnable(boolean)", "429": "BrokerConfig::::setClusterTopicEnable(boolean)", "430": "BrokerConfig::::setClusterTopicEnable(boolean)", "432": "BrokerConfig::::getNamesrvAddr()", "433": "BrokerConfig::::getNamesrvAddr()", "434": "BrokerConfig::::getNamesrvAddr()", "436": "BrokerConfig::::setNamesrvAddr(java.lang.String)", "437": "BrokerConfig::::setNamesrvAddr(java.lang.String)", "438": "BrokerConfig::::setNamesrvAddr(java.lang.String)", "440": "BrokerConfig::::getBrokerId()", "441": "BrokerConfig::::getBrokerId()", "442": "BrokerConfig::::getBrokerId()", "444": "BrokerConfig::::setBrokerId(long)", "445": "BrokerConfig::::setBrokerId(long)", "446": "BrokerConfig::::setBrokerId(long)", "448": "BrokerConfig::::isAutoCreateSubscriptionGroup()", "449": "BrokerConfig::::isAutoCreateSubscriptionGroup()", "450": "BrokerConfig::::isAutoCreateSubscriptionGroup()", "452": "BrokerConfig::::setAutoCreateSubscriptionGroup(boolean)", "453": "BrokerConfig::::setAutoCreateSubscriptionGroup(boolean)", "454": "BrokerConfig::::setAutoCreateSubscriptionGroup(boolean)", "456": "BrokerConfig::::isRejectTransactionMessage()", "457": "BrokerConfig::::isRejectTransactionMessage()", "458": "BrokerConfig::::isRejectTransactionMessage()", "460": "BrokerConfig::::setRejectTransactionMessage(boolean)", "461": "BrokerConfig::::setRejectTransactionMessage(boolean)", "462": "BrokerConfig::::setRejectTransactionMessage(boolean)", "464": "BrokerConfig::::isFetchNamesrvAddrByAddressServer()", "465": "BrokerConfig::::isFetchNamesrvAddrByAddressServer()", "466": "BrokerConfig::::isFetchNamesrvAddrByAddressServer()", "468": "BrokerConfig::::setFetchNamesrvAddrByAddressServer(boolean)", "469": "BrokerConfig::::setFetchNamesrvAddrByAddressServer(boolean)", "470": "BrokerConfig::::setFetchNamesrvAddrByAddressServer(boolean)", "472": "BrokerConfig::::getSendThreadPoolQueueCapacity()", "473": "BrokerConfig::::getSendThreadPoolQueueCapacity()", "474": "BrokerConfig::::getSendThreadPoolQueueCapacity()", "476": "BrokerConfig::::setSendThreadPoolQueueCapacity(int)", "477": "BrokerConfig::::setSendThreadPoolQueueCapacity(int)", "478": "BrokerConfig::::setSendThreadPoolQueueCapacity(int)", "480": "BrokerConfig::::getPullThreadPoolQueueCapacity()", "481": "BrokerConfig::::getPullThreadPoolQueueCapacity()", "482": "BrokerConfig::::getPullThreadPoolQueueCapacity()", "484": "BrokerConfig::::setPullThreadPoolQueueCapacity(int)", "485": "BrokerConfig::::setPullThreadPoolQueueCapacity(int)", "486": "BrokerConfig::::setPullThreadPoolQueueCapacity(int)", "488": "BrokerConfig::::getReplyThreadPoolQueueCapacity()", "489": "BrokerConfig::::getReplyThreadPoolQueueCapacity()", "490": "BrokerConfig::::getReplyThreadPoolQueueCapacity()", "492": "BrokerConfig::::setReplyThreadPoolQueueCapacity(int)", "493": "BrokerConfig::::setReplyThreadPoolQueueCapacity(int)", "494": "BrokerConfig::::setReplyThreadPoolQueueCapacity(int)", "496": "BrokerConfig::::getQueryThreadPoolQueueCapacity()", "497": "BrokerConfig::::getQueryThreadPoolQueueCapacity()", "498": "BrokerConfig::::getQueryThreadPoolQueueCapacity()", "500": "BrokerConfig::::setQueryThreadPoolQueueCapacity(int)", "501": "BrokerConfig::::setQueryThreadPoolQueueCapacity(int)", "502": "BrokerConfig::::setQueryThreadPoolQueueCapacity(int)", "504": "BrokerConfig::::isBrokerTopicEnable()", "505": "BrokerConfig::::isBrokerTopicEnable()", "506": "BrokerConfig::::isBrokerTopicEnable()", "508": "BrokerConfig::::setBrokerTopicEnable(boolean)", "509": "BrokerConfig::::setBrokerTopicEnable(boolean)", "510": "BrokerConfig::::setBrokerTopicEnable(boolean)", "512": "BrokerConfig::::getFilterServerNums()", "513": "BrokerConfig::::getFilterServerNums()", "514": "BrokerConfig::::getFilterServerNums()", "516": "BrokerConfig::::setFilterServerNums(int)", "517": "BrokerConfig::::setFilterServerNums(int)", "518": "BrokerConfig::::setFilterServerNums(int)", "520": "BrokerConfig::::isLongPollingEnable()", "521": "BrokerConfig::::isLongPollingEnable()", "522": "BrokerConfig::::isLongPollingEnable()", "524": "BrokerConfig::::setLongPollingEnable(boolean)", "525": "BrokerConfig::::setLongPollingEnable(boolean)", "526": "BrokerConfig::::setLongPollingEnable(boolean)", "528": "BrokerConfig::::isNotifyConsumerIdsChangedEnable()", "529": "BrokerConfig::::isNotifyConsumerIdsChangedEnable()", "530": "BrokerConfig::::isNotifyConsumerIdsChangedEnable()", "532": "BrokerConfig::::setNotifyConsumerIdsChangedEnable(boolean)", "533": "BrokerConfig::::setNotifyConsumerIdsChangedEnable(boolean)", "534": "BrokerConfig::::setNotifyConsumerIdsChangedEnable(boolean)", "536": "BrokerConfig::::getShortPollingTimeMills()", "537": "BrokerConfig::::getShortPollingTimeMills()", "538": "BrokerConfig::::getShortPollingTimeMills()", "540": "BrokerConfig::::setShortPollingTimeMills(long)", "541": "BrokerConfig::::setShortPollingTimeMills(long)", "542": "BrokerConfig::::setShortPollingTimeMills(long)", "544": "BrokerConfig::::getClientManageThreadPoolNums()", "545": "BrokerConfig::::getClientManageThreadPoolNums()", "546": "BrokerConfig::::getClientManageThreadPoolNums()", "548": "BrokerConfig::::setClientManageThreadPoolNums(int)", "549": "BrokerConfig::::setClientManageThreadPoolNums(int)", "550": "BrokerConfig::::setClientManageThreadPoolNums(int)", "552": "BrokerConfig::::isCommercialEnable()", "553": "BrokerConfig::::isCommercialEnable()", "554": "BrokerConfig::::isCommercialEnable()", "556": "BrokerConfig::::setCommercialEnable(boolean)", "557": "BrokerConfig::::setCommercialEnable(boolean)", "558": "BrokerConfig::::setCommercialEnable(boolean)", "560": "BrokerConfig::::getCommercialTimerCount()", "561": "BrokerConfig::::getCommercialTimerCount()", "562": "BrokerConfig::::getCommercialTimerCount()", "564": "BrokerConfig::::setCommercialTimerCount(int)", "565": "BrokerConfig::::setCommercialTimerCount(int)", "566": "BrokerConfig::::setCommercialTimerCount(int)", "568": "BrokerConfig::::getCommercialTransCount()", "569": "BrokerConfig::::getCommercialTransCount()", "570": "BrokerConfig::::getCommercialTransCount()", "572": "BrokerConfig::::setCommercialTransCount(int)", "573": "BrokerConfig::::setCommercialTransCount(int)", "574": "BrokerConfig::::setCommercialTransCount(int)", "576": "BrokerConfig::::getCommercialBigCount()", "577": "BrokerConfig::::getCommercialBigCount()", "578": "BrokerConfig::::getCommercialBigCount()", "580": "BrokerConfig::::setCommercialBigCount(int)", "581": "BrokerConfig::::setCommercialBigCount(int)", "582": "BrokerConfig::::setCommercialBigCount(int)", "584": "BrokerConfig::::getMaxDelayTime()", "585": "BrokerConfig::::getMaxDelayTime()", "586": "BrokerConfig::::getMaxDelayTime()", "588": "BrokerConfig::::setMaxDelayTime(int)", "589": "BrokerConfig::::setMaxDelayTime(int)", "590": "BrokerConfig::::setMaxDelayTime(int)", "592": "BrokerConfig::::getClientManagerThreadPoolQueueCapacity()", "593": "BrokerConfig::::getClientManagerThreadPoolQueueCapacity()", "594": "BrokerConfig::::getClientManagerThreadPoolQueueCapacity()", "596": "BrokerConfig::::setClientManagerThreadPoolQueueCapacity(int)", "597": "BrokerConfig::::setClientManagerThreadPoolQueueCapacity(int)", "598": "BrokerConfig::::setClientManagerThreadPoolQueueCapacity(int)", "600": "BrokerConfig::::getConsumerManagerThreadPoolQueueCapacity()", "601": "BrokerConfig::::getConsumerManagerThreadPoolQueueCapacity()", "602": "BrokerConfig::::getConsumerManagerThreadPoolQueueCapacity()", "604": "BrokerConfig::::setConsumerManagerThreadPoolQueueCapacity(int)", "605": "BrokerConfig::::setConsumerManagerThreadPoolQueueCapacity(int)", "606": "BrokerConfig::::setConsumerManagerThreadPoolQueueCapacity(int)", "608": "BrokerConfig::::getConsumerManageThreadPoolNums()", "609": "BrokerConfig::::getConsumerManageThreadPoolNums()", "610": "BrokerConfig::::getConsumerManageThreadPoolNums()", "612": "BrokerConfig::::setConsumerManageThreadPoolNums(int)", "613": "BrokerConfig::::setConsumerManageThreadPoolNums(int)", "614": "BrokerConfig::::setConsumerManageThreadPoolNums(int)", "616": "BrokerConfig::::getCommercialBaseCount()", "617": "BrokerConfig::::getCommercialBaseCount()", "618": "BrokerConfig::::getCommercialBaseCount()", "620": "BrokerConfig::::setCommercialBaseCount(int)", "621": "BrokerConfig::::setCommercialBaseCount(int)", "622": "BrokerConfig::::setCommercialBaseCount(int)", "624": "BrokerConfig::::isEnableCalcFilterBitMap()", "625": "BrokerConfig::::isEnableCalcFilterBitMap()", "626": "BrokerConfig::::isEnableCalcFilterBitMap()", "628": "BrokerConfig::::setEnableCalcFilterBitMap(boolean)", "629": "BrokerConfig::::setEnableCalcFilterBitMap(boolean)", "630": "BrokerConfig::::setEnableCalcFilterBitMap(boolean)", "632": "BrokerConfig::::getExpectConsumerNumUseFilter()", "633": "BrokerConfig::::getExpectConsumerNumUseFilter()", "634": "BrokerConfig::::getExpectConsumerNumUseFilter()", "636": "BrokerConfig::::setExpectConsumerNumUseFilter(int)", "637": "BrokerConfig::::setExpectConsumerNumUseFilter(int)", "638": "BrokerConfig::::setExpectConsumerNumUseFilter(int)", "640": "BrokerConfig::::getMaxErrorRateOfBloomFilter()", "641": "BrokerConfig::::getMaxErrorRateOfBloomFilter()", "642": "BrokerConfig::::getMaxErrorRateOfBloomFilter()", "644": "BrokerConfig::::setMaxErrorRateOfBloomFilter(int)", "645": "BrokerConfig::::setMaxErrorRateOfBloomFilter(int)", "646": "BrokerConfig::::setMaxErrorRateOfBloomFilter(int)", "648": "BrokerConfig::::getFilterDataCleanTimeSpan()", "649": "BrokerConfig::::getFilterDataCleanTimeSpan()", "650": "BrokerConfig::::getFilterDataCleanTimeSpan()", "652": "BrokerConfig::::setFilterDataCleanTimeSpan(long)", "653": "BrokerConfig::::setFilterDataCleanTimeSpan(long)", "654": "BrokerConfig::::setFilterDataCleanTimeSpan(long)", "656": "BrokerConfig::::isFilterSupportRetry()", "657": "BrokerConfig::::isFilterSupportRetry()", "658": "BrokerConfig::::isFilterSupportRetry()", "660": "BrokerConfig::::setFilterSupportRetry(boolean)", "661": "BrokerConfig::::setFilterSupportRetry(boolean)", "662": "BrokerConfig::::setFilterSupportRetry(boolean)", "664": "BrokerConfig::::isEnablePropertyFilter()", "665": "BrokerConfig::::isEnablePropertyFilter()", "666": "BrokerConfig::::isEnablePropertyFilter()", "668": "BrokerConfig::::setEnablePropertyFilter(boolean)", "669": "BrokerConfig::::setEnablePropertyFilter(boolean)", "670": "BrokerConfig::::setEnablePropertyFilter(boolean)", "672": "BrokerConfig::::isCompressedRegister()", "673": "BrokerConfig::::isCompressedRegister()", "674": "BrokerConfig::::isCompressedRegister()", "676": "BrokerConfig::::setCompressedRegister(boolean)", "677": "BrokerConfig::::setCompressedRegister(boolean)", "678": "BrokerConfig::::setCompressedRegister(boolean)", "680": "BrokerConfig::::isForceRegister()", "681": "BrokerConfig::::isForceRegister()", "682": "BrokerConfig::::isForceRegister()", "684": "BrokerConfig::::setForceRegister(boolean)", "685": "BrokerConfig::::setForceRegister(boolean)", "686": "BrokerConfig::::setForceRegister(boolean)", "688": "BrokerConfig::::getHeartbeatThreadPoolQueueCapacity()", "689": "BrokerConfig::::getHeartbeatThreadPoolQueueCapacity()", "690": "BrokerConfig::::getHeartbeatThreadPoolQueueCapacity()", "692": "BrokerConfig::::setHeartbeatThreadPoolQueueCapacity(int)", "693": "BrokerConfig::::setHeartbeatThreadPoolQueueCapacity(int)", "694": "BrokerConfig::::setHeartbeatThreadPoolQueueCapacity(int)", "696": "BrokerConfig::::getHeartbeatThreadPoolNums()", "697": "BrokerConfig::::getHeartbeatThreadPoolNums()", "698": "BrokerConfig::::getHeartbeatThreadPoolNums()", "700": "BrokerConfig::::setHeartbeatThreadPoolNums(int)", "701": "BrokerConfig::::setHeartbeatThreadPoolNums(int)", "702": "BrokerConfig::::setHeartbeatThreadPoolNums(int)", "704": "BrokerConfig::::getWaitTimeMillsInHeartbeatQueue()", "705": "BrokerConfig::::getWaitTimeMillsInHeartbeatQueue()", "706": "BrokerConfig::::getWaitTimeMillsInHeartbeatQueue()", "708": "BrokerConfig::::setWaitTimeMillsInHeartbeatQueue(long)", "709": "BrokerConfig::::setWaitTimeMillsInHeartbeatQueue(long)", "710": "BrokerConfig::::setWaitTimeMillsInHeartbeatQueue(long)", "712": "BrokerConfig::::getRegisterNameServerPeriod()", "713": "BrokerConfig::::getRegisterNameServerPeriod()", "714": "BrokerConfig::::getRegisterNameServerPeriod()", "716": "BrokerConfig::::setRegisterNameServerPeriod(int)", "717": "BrokerConfig::::setRegisterNameServerPeriod(int)", "718": "BrokerConfig::::setRegisterNameServerPeriod(int)", "720": "BrokerConfig::::getTransactionTimeOut()", "721": "BrokerConfig::::getTransactionTimeOut()", "722": "BrokerConfig::::getTransactionTimeOut()", "724": "BrokerConfig::::setTransactionTimeOut(long)", "725": "BrokerConfig::::setTransactionTimeOut(long)", "726": "BrokerConfig::::setTransactionTimeOut(long)", "728": "BrokerConfig::::getTransactionCheckMax()", "729": "BrokerConfig::::getTransactionCheckMax()", "730": "BrokerConfig::::getTransactionCheckMax()", "732": "BrokerConfig::::setTransactionCheckMax(int)", "733": "BrokerConfig::::setTransactionCheckMax(int)", "734": "BrokerConfig::::setTransactionCheckMax(int)", "736": "BrokerConfig::::getTransactionCheckInterval()", "737": "BrokerConfig::::getTransactionCheckInterval()", "738": "BrokerConfig::::getTransactionCheckInterval()", "740": "BrokerConfig::::setTransactionCheckInterval(long)", "741": "BrokerConfig::::setTransactionCheckInterval(long)", "742": "BrokerConfig::::setTransactionCheckInterval(long)", "744": "BrokerConfig::::getEndTransactionThreadPoolNums()", "745": "BrokerConfig::::getEndTransactionThreadPoolNums()", "746": "BrokerConfig::::getEndTransactionThreadPoolNums()", "748": "BrokerConfig::::setEndTransactionThreadPoolNums(int)", "749": "BrokerConfig::::setEndTransactionThreadPoolNums(int)", "750": "BrokerConfig::::setEndTransactionThreadPoolNums(int)", "752": "BrokerConfig::::getEndTransactionPoolQueueCapacity()", "753": "BrokerConfig::::getEndTransactionPoolQueueCapacity()", "754": "BrokerConfig::::getEndTransactionPoolQueueCapacity()", "756": "BrokerConfig::::setEndTransactionPoolQueueCapacity(int)", "757": "BrokerConfig::::setEndTransactionPoolQueueCapacity(int)", "758": "BrokerConfig::::setEndTransactionPoolQueueCapacity(int)", "760": "BrokerConfig::::getWaitTimeMillsInTransactionQueue()", "761": "BrokerConfig::::getWaitTimeMillsInTransactionQueue()", "762": "BrokerConfig::::getWaitTimeMillsInTransactionQueue()", "764": "BrokerConfig::::setWaitTimeMillsInTransactionQueue(long)", "765": "BrokerConfig::::setWaitTimeMillsInTransactionQueue(long)", "766": "BrokerConfig::::setWaitTimeMillsInTransactionQueue(long)", "768": "BrokerConfig::::getMsgTraceTopicName()", "769": "BrokerConfig::::getMsgTraceTopicName()", "770": "BrokerConfig::::getMsgTraceTopicName()", "772": "BrokerConfig::::setMsgTraceTopicName(java.lang.String)", "773": "BrokerConfig::::setMsgTraceTopicName(java.lang.String)", "774": "BrokerConfig::::setMsgTraceTopicName(java.lang.String)", "776": "BrokerConfig::::isTraceTopicEnable()", "777": "BrokerConfig::::isTraceTopicEnable()", "778": "BrokerConfig::::isTraceTopicEnable()", "780": "BrokerConfig::::setTraceTopicEnable(boolean)", "781": "BrokerConfig::::setTraceTopicEnable(boolean)", "782": "BrokerConfig::::setTraceTopicEnable(boolean)", "784": "BrokerConfig::::isAclEnable()", "785": "BrokerConfig::::isAclEnable()", "786": "BrokerConfig::::isAclEnable()", "788": "BrokerConfig::::setAclEnable(boolean)", "789": "BrokerConfig::::setAclEnable(boolean)", "790": "BrokerConfig::::setAclEnable(boolean)", "792": "BrokerConfig::::isStoreReplyMessageEnable()", "793": "BrokerConfig::::isStoreReplyMessageEnable()", "794": "BrokerConfig::::isStoreReplyMessageEnable()", "796": "BrokerConfig::::setStoreReplyMessageEnable(boolean)", "797": "BrokerConfig::::setStoreReplyMessageEnable(boolean)", "798": "BrokerConfig::::setStoreReplyMessageEnable(boolean)", "800": "BrokerConfig::::isAutoDeleteUnusedStats()", "801": "BrokerConfig::::isAutoDeleteUnusedStats()", "802": "BrokerConfig::::isAutoDeleteUnusedStats()", "804": "BrokerConfig::::setAutoDeleteUnusedStats(boolean)", "805": "BrokerConfig::::setAutoDeleteUnusedStats(boolean)", "806": "BrokerConfig::::setAutoDeleteUnusedStats(boolean)"}, "test_reverse_method_lines_dic": {"25": "BrokerConfigTest::::testConsumerFallBehindThresholdOverflow()", "26": "BrokerConfigTest::::testConsumerFallBehindThresholdOverflow()", "27": "BrokerConfigTest::::testConsumerFallBehindThresholdOverflow()", "28": "BrokerConfigTest::::testConsumerFallBehindThresholdOverflow()", "29": "BrokerConfigTest::::testConsumerFallBehindThresholdOverflow()", "31": "BrokerConfigTest::::testBrokerConfigAttribute()", "32": "BrokerConfigTest::::testBrokerConfigAttribute()", "33": "BrokerConfigTest::::testBrokerConfigAttribute()", "34": "BrokerConfigTest::::testBrokerConfigAttribute()", "35": "BrokerConfigTest::::testBrokerConfigAttribute()", "36": "BrokerConfigTest::::testBrokerConfigAttribute()", "37": "BrokerConfigTest::::testBrokerConfigAttribute()", "38": "BrokerConfigTest::::testBrokerConfigAttribute()", "39": "BrokerConfigTest::::testBrokerConfigAttribute()", "40": "BrokerConfigTest::::testBrokerConfigAttribute()", "41": "BrokerConfigTest::::testBrokerConfigAttribute()", "42": "BrokerConfigTest::::testBrokerConfigAttribute()", "43": "BrokerConfigTest::::testBrokerConfigAttribute()", "44": "BrokerConfigTest::::testBrokerConfigAttribute()", "45": "BrokerConfigTest::::testBrokerConfigAttribute()", "46": "BrokerConfigTest::::testBrokerConfigAttribute()", "47": "BrokerConfigTest::::testBrokerConfigAttribute()", "48": "BrokerConfigTest::::testBrokerConfigAttribute()"}, "tests": [{"test_lines": [25, 29], "covered_lines": [29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 49, 51, 52, 54, 55, 57, 63, 64, 65, 66, 68, 69, 70, 71, 76, 78, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 99, 101, 103, 105, 106, 107, 108, 109, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 128, 130, 136, 139, 142, 145, 148, 149, 151, 153, 159, 165, 171, 177, 183, 186, 188, 192, 225]}, {"test_lines": [31, 48], "covered_lines": [29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 49, 51, 52, 54, 55, 57, 63, 64, 65, 66, 68, 69, 70, 71, 76, 78, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 99, 101, 103, 105, 106, 107, 108, 109, 111, 112, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 128, 130, 136, 139, 142, 145, 148, 149, 151, 153, 159, 165, 171, 177, 183, 186, 188, 192, 313, 317, 318, 337, 341, 342, 345, 349, 350, 433, 437, 438, 441, 445, 446, 769, 773, 774, 801, 805, 806]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/DataVersion.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common;\n", "\n", "import java.util.concurrent.atomic.AtomicLong;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class DataVersion extends RemotingSerializable {\n", "    private long timestamp = System.currentTimeMillis();\n", "    private AtomicLong counter = new AtomicLong(0);\n", "\n", "    public void assignNewOne(final DataVersion dataVersion) {\n", "        this.timestamp = dataVersion.timestamp;\n", "        this.counter.set(dataVersion.counter.get());\n", "    }\n", "\n", "    public void nextVersion() {\n", "        this.timestamp = System.currentTimeMillis();\n", "        this.counter.incrementAndGet();\n", "    }\n", "\n", "    public long getTimestamp() {\n", "        return timestamp;\n", "    }\n", "\n", "    public void setTimestamp(long timestamp) {\n", "        this.timestamp = timestamp;\n", "    }\n", "\n", "    public AtomicLong getCounter() {\n", "        return counter;\n", "    }\n", "\n", "    public void setCounter(AtomicLong counter) {\n", "        this.counter = counter;\n", "    }\n", "\n", "    @Override\n", "    public boolean equals(final Object o) {\n", "        if (this == o)\n", "            return true;\n", "        if (o == null || getClass() != o.getClass())\n", "            return false;\n", "\n", "        final DataVersion that = (DataVersion) o;\n", "\n", "        if (timestamp != that.timestamp) {\n", "            return false;\n", "        }\n", "\n", "        if (counter != null && that.counter != null) {\n", "            return counter.longValue() == that.counter.longValue();\n", "        }\n", "\n", "        return (null == counter) && (null == that.counter);\n", "    }\n", "\n", "    @Override\n", "    public int hashCode() {\n", "        int result = (int) (timestamp ^ (timestamp >>> 32));\n", "        if (null != counter) {\n", "            long l = counter.get();\n", "            result = 31 * result + (int) (l ^ (l >>> 32));\n", "        }\n", "        return result;\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "        final StringBuilder sb = new StringBuilder(\"DataVersion[\");\n", "        sb.append(\"timestamp=\").append(timestamp);\n", "        sb.append(\", counter=\").append(counter);\n", "        sb.append(']');\n", "        return sb.toString();\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common;\n", "\n", "import java.util.concurrent.atomic.AtomicLong;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "public class DataVersionTest {\n", "\n", "    @Test\n", "    public void testEquals() {\n", "        DataVersion dataVersion = new DataVersion();\n", "        DataVersion other = new DataVersion();\n", "        other.setTimestamp(dataVersion.getTimestamp());\n", "        Assert.assertTrue(dataVersion.equals(other));\n", "    }\n", "\n", "    @Test\n", "    public void testEquals_falseWhenCounterDifferent() {\n", "        DataVersion dataVersion = new DataVersion();\n", "        DataVersion other = new DataVersion();\n", "        other.setCounter(new AtomicLong(1L));\n", "        other.setTimestamp(dataVersion.getTimestamp());\n", "        Assert.assertFalse(dataVersion.equals(other));\n", "    }\n", "\n", "    @Test\n", "    public void testEquals_falseWhenCounterDifferent2() {\n", "        DataVersion dataVersion = new DataVersion();\n", "        DataVersion other = new DataVersion();\n", "        other.setCounter(null);\n", "        other.setTimestamp(dataVersion.getTimestamp());\n", "        Assert.assertFalse(dataVersion.equals(other));\n", "    }\n", "\n", "    @Test\n", "    public void testEquals_falseWhenCounterDifferent3() {\n", "        DataVersion dataVersion = new DataVersion();\n", "        dataVersion.setCounter(null);\n", "        DataVersion other = new DataVersion();\n", "        other.setTimestamp(dataVersion.getTimestamp());\n", "        Assert.assertFalse(dataVersion.equals(other));\n", "    }\n", "\n", "    @Test\n", "    public void testEquals_trueWhenCountersBothNull() {\n", "        DataVersion dataVersion = new DataVersion();\n", "        dataVersion.setCounter(null);\n", "        DataVersion other = new DataVersion();\n", "        other.setCounter(null);\n", "        other.setTimestamp(dataVersion.getTimestamp());\n", "        Assert.assertTrue(dataVersion.equals(other));\n", "    }\n", "}"], "method_lines_dic": {"DataVersion::::assignNewOne(org.apache.rocketmq.common.DataVersion)": [26, 29], "DataVersion::::nextVersion()": [31, 34], "DataVersion::::getTimestamp()": [36, 38], "DataVersion::::setTimestamp(long)": [40, 42], "DataVersion::::getCounter()": [44, 46], "DataVersion::::setCounter(java.util.concurrent.atomic.AtomicLong)": [48, 50], "DataVersion::::equals(java.lang.Object)": [52, 70], "DataVersion::::hashCode()": [72, 80], "DataVersion::::toString()": [82, 89]}, "test_method_lines_dic": {"DataVersionTest::::testEquals()": [26, 32], "DataVersionTest::::testEquals_falseWhenCounterDifferent()": [34, 41], "DataVersionTest::::testEquals_falseWhenCounterDifferent2()": [43, 50], "DataVersionTest::::testEquals_falseWhenCounterDifferent3()": [52, 59], "DataVersionTest::::testEquals_trueWhenCountersBothNull()": [61, 69]}, "reverse_method_lines_dic": {"26": "DataVersion::::assignNewOne(org.apache.rocketmq.common.DataVersion)", "27": "DataVersion::::assignNewOne(org.apache.rocketmq.common.DataVersion)", "28": "DataVersion::::assignNewOne(org.apache.rocketmq.common.DataVersion)", "29": "DataVersion::::assignNewOne(org.apache.rocketmq.common.DataVersion)", "31": "DataVersion::::nextVersion()", "32": "DataVersion::::nextVersion()", "33": "DataVersion::::nextVersion()", "34": "DataVersion::::nextVersion()", "36": "DataVersion::::getTimestamp()", "37": "DataVersion::::getTimestamp()", "38": "DataVersion::::getTimestamp()", "40": "DataVersion::::setTimestamp(long)", "41": "DataVersion::::setTimestamp(long)", "42": "DataVersion::::setTimestamp(long)", "44": "DataVersion::::getCounter()", "45": "DataVersion::::getCounter()", "46": "DataVersion::::getCounter()", "48": "DataVersion::::setCounter(java.util.concurrent.atomic.AtomicLong)", "49": "DataVersion::::setCounter(java.util.concurrent.atomic.AtomicLong)", "50": "DataVersion::::setCounter(java.util.concurrent.atomic.AtomicLong)", "52": "DataVersion::::equals(java.lang.Object)", "53": "DataVersion::::equals(java.lang.Object)", "54": "DataVersion::::equals(java.lang.Object)", "55": "DataVersion::::equals(java.lang.Object)", "56": "DataVersion::::equals(java.lang.Object)", "57": "DataVersion::::equals(java.lang.Object)", "58": "DataVersion::::equals(java.lang.Object)", "59": "DataVersion::::equals(java.lang.Object)", "60": "DataVersion::::equals(java.lang.Object)", "61": "DataVersion::::equals(java.lang.Object)", "62": "DataVersion::::equals(java.lang.Object)", "63": "DataVersion::::equals(java.lang.Object)", "64": "DataVersion::::equals(java.lang.Object)", "65": "DataVersion::::equals(java.lang.Object)", "66": "DataVersion::::equals(java.lang.Object)", "67": "DataVersion::::equals(java.lang.Object)", "68": "DataVersion::::equals(java.lang.Object)", "69": "DataVersion::::equals(java.lang.Object)", "70": "DataVersion::::equals(java.lang.Object)", "72": "DataVersion::::hashCode()", "73": "DataVersion::::hashCode()", "74": "DataVersion::::hashCode()", "75": "DataVersion::::hashCode()", "76": "DataVersion::::hashCode()", "77": "DataVersion::::hashCode()", "78": "DataVersion::::hashCode()", "79": "DataVersion::::hashCode()", "80": "DataVersion::::hashCode()", "82": "DataVersion::::toString()", "83": "DataVersion::::toString()", "84": "DataVersion::::toString()", "85": "DataVersion::::toString()", "86": "DataVersion::::toString()", "87": "DataVersion::::toString()", "88": "DataVersion::::toString()", "89": "DataVersion::::toString()"}, "test_reverse_method_lines_dic": {"26": "DataVersionTest::::testEquals()", "27": "DataVersionTest::::testEquals()", "28": "DataVersionTest::::testEquals()", "29": "DataVersionTest::::testEquals()", "30": "DataVersionTest::::testEquals()", "31": "DataVersionTest::::testEquals()", "32": "DataVersionTest::::testEquals()", "34": "DataVersionTest::::testEquals_falseWhenCounterDifferent()", "35": "DataVersionTest::::testEquals_falseWhenCounterDifferent()", "36": "DataVersionTest::::testEquals_falseWhenCounterDifferent()", "37": "DataVersionTest::::testEquals_falseWhenCounterDifferent()", "38": "DataVersionTest::::testEquals_falseWhenCounterDifferent()", "39": "DataVersionTest::::testEquals_falseWhenCounterDifferent()", "40": "DataVersionTest::::testEquals_falseWhenCounterDifferent()", "41": "DataVersionTest::::testEquals_falseWhenCounterDifferent()", "43": "DataVersionTest::::testEquals_falseWhenCounterDifferent2()", "44": "DataVersionTest::::testEquals_falseWhenCounterDifferent2()", "45": "DataVersionTest::::testEquals_falseWhenCounterDifferent2()", "46": "DataVersionTest::::testEquals_falseWhenCounterDifferent2()", "47": "DataVersionTest::::testEquals_falseWhenCounterDifferent2()", "48": "DataVersionTest::::testEquals_falseWhenCounterDifferent2()", "49": "DataVersionTest::::testEquals_falseWhenCounterDifferent2()", "50": "DataVersionTest::::testEquals_falseWhenCounterDifferent2()", "52": "DataVersionTest::::testEquals_falseWhenCounterDifferent3()", "53": "DataVersionTest::::testEquals_falseWhenCounterDifferent3()", "54": "DataVersionTest::::testEquals_falseWhenCounterDifferent3()", "55": "DataVersionTest::::testEquals_falseWhenCounterDifferent3()", "56": "DataVersionTest::::testEquals_falseWhenCounterDifferent3()", "57": "DataVersionTest::::testEquals_falseWhenCounterDifferent3()", "58": "DataVersionTest::::testEquals_falseWhenCounterDifferent3()", "59": "DataVersionTest::::testEquals_falseWhenCounterDifferent3()", "61": "DataVersionTest::::testEquals_trueWhenCountersBothNull()", "62": "DataVersionTest::::testEquals_trueWhenCountersBothNull()", "63": "DataVersionTest::::testEquals_trueWhenCountersBothNull()", "64": "DataVersionTest::::testEquals_trueWhenCountersBothNull()", "65": "DataVersionTest::::testEquals_trueWhenCountersBothNull()", "66": "DataVersionTest::::testEquals_trueWhenCountersBothNull()", "67": "DataVersionTest::::testEquals_trueWhenCountersBothNull()", "68": "DataVersionTest::::testEquals_trueWhenCountersBothNull()", "69": "DataVersionTest::::testEquals_trueWhenCountersBothNull()"}, "tests": [{"test_lines": [26, 32], "covered_lines": [22, 23, 24, 37, 41, 42, 54, 56, 59, 61, 65, 66]}, {"test_lines": [34, 41], "covered_lines": [22, 23, 24, 37, 41, 42, 49, 50, 54, 56, 59, 61, 65, 66]}, {"test_lines": [43, 50], "covered_lines": [22, 23, 24, 37, 41, 42, 49, 50, 54, 56, 59, 61, 65, 69]}, {"test_lines": [52, 59], "covered_lines": [22, 23, 24, 37, 41, 42, 49, 50, 54, 56, 59, 61, 65, 69]}, {"test_lines": [61, 69], "covered_lines": [22, 23, 24, 37, 41, 42, 49, 50, 54, 56, 59, 61, 65, 69]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/UtilAll.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.ByteArrayOutputStream;\n", "import java.io.File;\n", "import java.io.IOException;\n", "import java.lang.management.ManagementFactory;\n", "import java.lang.management.RuntimeMXBean;\n", "import java.net.Inet4Address;\n", "import java.net.Inet6Address;\n", "import java.net.InetAddress;\n", "import java.net.NetworkInterface;\n", "import java.text.NumberFormat;\n", "import java.text.ParseException;\n", "import java.text.SimpleDateFormat;\n", "import java.util.Arrays;\n", "import java.util.Calendar;\n", "import java.util.Date;\n", "import java.util.Enumeration;\n", "import java.util.Iterator;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.zip.CRC32;\n", "import java.util.zip.DeflaterOutputStream;\n", "import java.util.zip.InflaterInputStream;\n", "import org.apache.commons.lang3.StringUtils;\n", "import org.apache.commons.validator.routines.InetAddressValidator;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.remoting.common.RemotingHelper;\n", "\n", "public class UtilAll {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n", "\n", "    public static final String YYYY_MM_DD_HH_MM_SS = \"yyyy-MM-dd HH:mm:ss\";\n", "    public static final String YYYY_MM_DD_HH_MM_SS_SSS = \"yyyy-MM-dd#HH:mm:ss:SSS\";\n", "    public static final String YYYYMMDDHHMMSS = \"yyyyMMddHHmmss\";\n", "    final static char[] HEX_ARRAY = \"0123456789ABCDEF\".toCharArray();\n", "\n", "    public static int getPid() {\n", "        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n", "        String name = runtime.getName(); // format: \"pid@hostname\"\n", "        try {\n", "            return Integer.parseInt(name.substring(0, name.indexOf('@')));\n", "        } catch (Exception e) {\n", "            return -1;\n", "        }\n", "    }\n", "\n", "    public static void sleep(long sleepMs) {\n", "        if (sleepMs < 0) {\n", "            return;\n", "        }\n", "        try {\n", "            Thread.sleep(sleepMs);\n", "        } catch (Throwable ignored) {\n", "\n", "        }\n", "\n", "    }\n", "\n", "    public static String currentStackTrace() {\n", "        StringBuilder sb = new StringBuilder();\n", "        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n", "        for (StackTraceElement ste : stackTrace) {\n", "            sb.append(\"\\n\\t\");\n", "            sb.append(ste.toString());\n", "        }\n", "\n", "        return sb.toString();\n", "    }\n", "\n", "    public static String offset2FileName(final long offset) {\n", "        final NumberFormat nf = NumberFormat.getInstance();\n", "        nf.setMinimumIntegerDigits(20);\n", "        nf.setMaximumFractionDigits(0);\n", "        nf.setGroupingUsed(false);\n", "        return nf.format(offset);\n", "    }\n", "\n", "    public static long computeElapsedTimeMilliseconds(final long beginTime) {\n", "        return System.currentTimeMillis() - beginTime;\n", "    }\n", "\n", "    public static boolean isItTimeToDo(final String when) {\n", "        String[] whiles = when.split(\";\");\n", "        if (whiles.length > 0) {\n", "            Calendar now = Calendar.getInstance();\n", "            for (String w : whiles) {\n", "                int nowHour = Integer.parseInt(w);\n", "                if (nowHour == now.get(Calendar.HOUR_OF_DAY)) {\n", "                    return true;\n", "                }\n", "            }\n", "        }\n", "\n", "        return false;\n", "    }\n", "\n", "    public static String timeMillisToHumanString() {\n", "        return timeMillisToHumanString(System.currentTimeMillis());\n", "    }\n", "\n", "    public static String timeMillisToHumanString(final long t) {\n", "        Calendar cal = Calendar.getInstance();\n", "        cal.setTimeInMillis(t);\n", "        return String.format(\"%04d%02d%02d%02d%02d%02d%03d\", cal.get(Calendar.YEAR), cal.get(Calendar.MONTH) + 1,\n", "            cal.get(Calendar.DAY_OF_MONTH), cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE), cal.get(Calendar.SECOND),\n", "            cal.get(Calendar.MILLISECOND));\n", "    }\n", "\n", "    public static long computeNextMorningTimeMillis() {\n", "        Calendar cal = Calendar.getInstance();\n", "        cal.setTimeInMillis(System.currentTimeMillis());\n", "        cal.add(Calendar.DAY_OF_MONTH, 1);\n", "        cal.set(Calendar.HOUR_OF_DAY, 0);\n", "        cal.set(Calendar.MINUTE, 0);\n", "        cal.set(Calendar.SECOND, 0);\n", "        cal.set(Calendar.MILLISECOND, 0);\n", "\n", "        return cal.getTimeInMillis();\n", "    }\n", "\n", "    public static long computeNextMinutesTimeMillis() {\n", "        Calendar cal = Calendar.getInstance();\n", "        cal.setTimeInMillis(System.currentTimeMillis());\n", "        cal.add(Calendar.DAY_OF_MONTH, 0);\n", "        cal.add(Calendar.HOUR_OF_DAY, 0);\n", "        cal.add(Calendar.MINUTE, 1);\n", "        cal.set(Calendar.SECOND, 0);\n", "        cal.set(Calendar.MILLISECOND, 0);\n", "\n", "        return cal.getTimeInMillis();\n", "    }\n", "\n", "    public static long computeNextHourTimeMillis() {\n", "        Calendar cal = Calendar.getInstance();\n", "        cal.setTimeInMillis(System.currentTimeMillis());\n", "        cal.add(Calendar.DAY_OF_MONTH, 0);\n", "        cal.add(Calendar.HOUR_OF_DAY, 1);\n", "        cal.set(Calendar.MINUTE, 0);\n", "        cal.set(Calendar.SECOND, 0);\n", "        cal.set(Calendar.MILLISECOND, 0);\n", "\n", "        return cal.getTimeInMillis();\n", "    }\n", "\n", "    public static long computeNextHalfHourTimeMillis() {\n", "        Calendar cal = Calendar.getInstance();\n", "        cal.setTimeInMillis(System.currentTimeMillis());\n", "        cal.add(Calendar.DAY_OF_MONTH, 0);\n", "        cal.add(Calendar.HOUR_OF_DAY, 1);\n", "        cal.set(Calendar.MINUTE, 30);\n", "        cal.set(Calendar.SECOND, 0);\n", "        cal.set(Calendar.MILLISECOND, 0);\n", "\n", "        return cal.getTimeInMillis();\n", "    }\n", "\n", "    public static String timeMillisToHumanString2(final long t) {\n", "        Calendar cal = Calendar.getInstance();\n", "        cal.setTimeInMillis(t);\n", "        return String.format(\"%04d-%02d-%02d %02d:%02d:%02d,%03d\",\n", "            cal.get(Calendar.YEAR),\n", "            cal.get(Calendar.MONTH) + 1,\n", "            cal.get(Calendar.DAY_OF_MONTH),\n", "            cal.get(Calendar.HOUR_OF_DAY),\n", "            cal.get(Calendar.MINUTE),\n", "            cal.get(Calendar.SECOND),\n", "            cal.get(Calendar.MILLISECOND));\n", "    }\n", "\n", "    public static String timeMillisToHumanString3(final long t) {\n", "        Calendar cal = Calendar.getInstance();\n", "        cal.setTimeInMillis(t);\n", "        return String.format(\"%04d%02d%02d%02d%02d%02d\",\n", "            cal.get(Calendar.YEAR),\n", "            cal.get(Calendar.MONTH) + 1,\n", "            cal.get(Calendar.DAY_OF_MONTH),\n", "            cal.get(Calendar.HOUR_OF_DAY),\n", "            cal.get(Calendar.MINUTE),\n", "            cal.get(Calendar.SECOND));\n", "    }\n", "\n", "    public static double getDiskPartitionSpaceUsedPercent(final String path) {\n", "        if (null == path || path.isEmpty()) {\n", "            log.error(\"Error when measuring disk space usage, path is null or empty, path : {}\", path);\n", "            return -1;\n", "        }\n", "\n", "\n", "        try {\n", "            File file = new File(path);\n", "\n", "            if (!file.exists()) {\n", "                log.error(\"Error when measuring disk space usage, file doesn't exist on this path: {}\", path);\n", "                return -1;\n", "            }\n", "\n", "\n", "            long totalSpace = file.getTotalSpace();\n", "\n", "            if (totalSpace > 0) {\n", "                long freeSpace = file.getFreeSpace();\n", "                long usedSpace = totalSpace - freeSpace;\n", "\n", "                return usedSpace / (double) totalSpace;\n", "            }\n", "        } catch (Exception e) {\n", "            log.error(\"Error when measuring disk space usage, got exception: :\", e);\n", "            return -1;\n", "        }\n", "\n", "        return -1;\n", "    }\n", "\n", "    public static int crc32(byte[] array) {\n", "        if (array != null) {\n", "            return crc32(array, 0, array.length);\n", "        }\n", "\n", "        return 0;\n", "    }\n", "\n", "    public static int crc32(byte[] array, int offset, int length) {\n", "        CRC32 crc32 = new CRC32();\n", "        crc32.update(array, offset, length);\n", "        return (int) (crc32.getValue() & 0x7FFFFFFF);\n", "    }\n", "\n", "    public static String bytes2string(byte[] src) {\n", "        char[] hexChars = new char[src.length * 2];\n", "        for (int j = 0; j < src.length; j++) {\n", "            int v = src[j] & 0xFF;\n", "            hexChars[j * 2] = HEX_ARRAY[v >>> 4];\n", "            hexChars[j * 2 + 1] = HEX_ARRAY[v & 0x0F];\n", "        }\n", "        return new String(hexChars);\n", "    }\n", "\n", "    public static byte[] string2bytes(String hexString) {\n", "        if (hexString == null || hexString.equals(\"\")) {\n", "            return null;\n", "        }\n", "        hexString = hexString.toUpperCase();\n", "        int length = hexString.length() / 2;\n", "        char[] hexChars = hexString.toCharArray();\n", "        byte[] d = new byte[length];\n", "        for (int i = 0; i < length; i++) {\n", "            int pos = i * 2;\n", "            d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));\n", "        }\n", "        return d;\n", "    }\n", "\n", "    private static byte charToByte(char c) {\n", "        return (byte) \"0123456789ABCDEF\".indexOf(c);\n", "    }\n", "\n", "    public static byte[] uncompress(final byte[] src) throws IOException {\n", "        byte[] result = src;\n", "        byte[] uncompressData = new byte[src.length];\n", "        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(src);\n", "        InflaterInputStream inflaterInputStream = new InflaterInputStream(byteArrayInputStream);\n", "        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(src.length);\n", "\n", "        try {\n", "            while (true) {\n", "                int len = inflaterInputStream.read(uncompressData, 0, uncompressData.length);\n", "                if (len <= 0) {\n", "                    break;\n", "                }\n", "                byteArrayOutputStream.write(uncompressData, 0, len);\n", "            }\n", "            byteArrayOutputStream.flush();\n", "            result = byteArrayOutputStream.toByteArray();\n", "        } catch (IOException e) {\n", "            throw e;\n", "        } finally {\n", "            try {\n", "                byteArrayInputStream.close();\n", "            } catch (IOException e) {\n", "                log.error(\"Failed to close the stream\", e);\n", "            }\n", "            try {\n", "                inflaterInputStream.close();\n", "            } catch (IOException e) {\n", "                log.error(\"Failed to close the stream\", e);\n", "            }\n", "            try {\n", "                byteArrayOutputStream.close();\n", "            } catch (IOException e) {\n", "                log.error(\"Failed to close the stream\", e);\n", "            }\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    public static byte[] compress(final byte[] src, final int level) throws IOException {\n", "        byte[] result = src;\n", "        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(src.length);\n", "        java.util.zip.Deflater defeater = new java.util.zip.Deflater(level);\n", "        DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteArrayOutputStream, defeater);\n", "        try {\n", "            deflaterOutputStream.write(src);\n", "            deflaterOutputStream.finish();\n", "            deflaterOutputStream.close();\n", "            result = byteArrayOutputStream.toByteArray();\n", "        } catch (IOException e) {\n", "            defeater.end();\n", "            throw e;\n", "        } finally {\n", "            try {\n", "                byteArrayOutputStream.close();\n", "            } catch (IOException ignored) {\n", "            }\n", "\n", "            defeater.end();\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    public static int asInt(String str, int defaultValue) {\n", "        try {\n", "            return Integer.parseInt(str);\n", "        } catch (Exception e) {\n", "            return defaultValue;\n", "        }\n", "    }\n", "\n", "    public static long asLong(String str, long defaultValue) {\n", "        try {\n", "            return Long.parseLong(str);\n", "        } catch (Exception e) {\n", "            return defaultValue;\n", "        }\n", "    }\n", "\n", "    public static String formatDate(Date date, String pattern) {\n", "        SimpleDateFormat df = new SimpleDateFormat(pattern);\n", "        return df.format(date);\n", "    }\n", "\n", "    public static Date parseDate(String date, String pattern) {\n", "        SimpleDateFormat df = new SimpleDateFormat(pattern);\n", "        try {\n", "            return df.parse(date);\n", "        } catch (ParseException e) {\n", "            return null;\n", "        }\n", "    }\n", "\n", "    public static String responseCode2String(final int code) {\n", "        return Integer.toString(code);\n", "    }\n", "\n", "    public static String frontStringAtLeast(final String str, final int size) {\n", "        if (str != null) {\n", "            if (str.length() > size) {\n", "                return str.substring(0, size);\n", "            }\n", "        }\n", "\n", "        return str;\n", "    }\n", "\n", "    public static boolean isBlank(String str) {\n", "        int strLen;\n", "        if (str == null || (strLen = str.length()) == 0) {\n", "            return true;\n", "        }\n", "        for (int i = 0; i < strLen; i++) {\n", "            if (!Character.isWhitespace(str.charAt(i))) {\n", "                return false;\n", "            }\n", "        }\n", "        return true;\n", "    }\n", "\n", "    public static String jstack() {\n", "        return jstack(Thread.getAllStackTraces());\n", "    }\n", "\n", "    public static String jstack(Map<Thread, StackTraceElement[]> map) {\n", "        StringBuilder result = new StringBuilder();\n", "        try {\n", "            Iterator<Map.Entry<Thread, StackTraceElement[]>> ite = map.entrySet().iterator();\n", "            while (ite.hasNext()) {\n", "                Map.Entry<Thread, StackTraceElement[]> entry = ite.next();\n", "                StackTraceElement[] elements = entry.getValue();\n", "                Thread thread = entry.getKey();\n", "                if (elements != null && elements.length > 0) {\n", "                    String threadName = entry.getKey().getName();\n", "                    result.append(String.format(\"%-40sTID: %d STATE: %s%n\", threadName, thread.getId(), thread.getState()));\n", "                    for (StackTraceElement el : elements) {\n", "                        result.append(String.format(\"%-40s%s%n\", threadName, el.toString()));\n", "                    }\n", "                    result.append(\"\\n\");\n", "                }\n", "            }\n", "        } catch (Throwable e) {\n", "            result.append(RemotingHelper.exceptionSimpleDesc(e));\n", "        }\n", "\n", "        return result.toString();\n", "    }\n", "\n", "    public static boolean isInternalIP(byte[] ip) {\n", "        if (ip.length != 4) {\n", "            throw new RuntimeException(\"illegal ipv4 bytes\");\n", "        }\n", "\n", "        //10.0.0.0~10.255.255.255\n", "        //172.16.0.0~172.31.255.255\n", "        //192.168.0.0~192.168.255.255\n", "        if (ip[0] == (byte) 10) {\n", "\n", "            return true;\n", "        } else if (ip[0] == (byte) 172) {\n", "            if (ip[1] >= (byte) 16 && ip[1] <= (byte) 31) {\n", "                return true;\n", "            }\n", "        } else if (ip[0] == (byte) 192) {\n", "            if (ip[1] == (byte) 168) {\n", "                return true;\n", "            }\n", "        }\n", "        return false;\n", "    }\n", "\n", "    public static boolean isInternalV6IP(InetAddress inetAddr) {\n", "        if (inetAddr.isAnyLocalAddress() // Wild card ipv6\n", "            || inetAddr.isLinkLocalAddress() // Single broadcast ipv6 address: fe80:xx:xx...\n", "            || inetAddr.isLoopbackAddress() //Loopback ipv6 address\n", "            || inetAddr.isSiteLocalAddress()) { // Site local ipv6 address: fec0:xx:xx...\n", "            return true;\n", "        }\n", "        return false;\n", "    }\n", "\n", "    private static boolean ipCheck(byte[] ip) {\n", "        if (ip.length != 4) {\n", "            throw new RuntimeException(\"illegal ipv4 bytes\");\n", "        }\n", "    \n", "        InetAddressValidator validator = InetAddressValidator.getInstance();\n", "        return validator.isValidInet4Address(ipToIPv4Str(ip));\n", "    }\n", "\n", "    private static boolean ipV6Check(byte[] ip) {\n", "        if (ip.length != 16) {\n", "            throw new RuntimeException(\"illegal ipv6 bytes\");\n", "        }\n", "\n", "        InetAddressValidator validator = InetAddressValidator.getInstance();\n", "        return validator.isValidInet6Address(ipToIPv6Str(ip));\n", "    }\n", "\n", "    public static String ipToIPv4Str(byte[] ip) {\n", "        if (ip.length != 4) {\n", "            return null;\n", "        }\n", "        return new StringBuilder().append(ip[0] & 0xFF).append(\".\").append(\n", "            ip[1] & 0xFF).append(\".\").append(ip[2] & 0xFF)\n", "            .append(\".\").append(ip[3] & 0xFF).toString();\n", "    }\n", "\n", "    public static String ipToIPv6Str(byte[] ip) {\n", "        if (ip.length != 16) {\n", "            return null;\n", "        }\n", "\n", "        StringBuilder sb = new StringBuilder();\n", "        for (int i = 0; i < ip.length; i++) {\n", "            String hex = Integer.toHexString(ip[i] & 0xFF);\n", "            if (hex.length() < 2) {\n", "                sb.append(0);\n", "            }\n", "            sb.append(hex);\n", "            if (i % 2 == 1 && i < ip.length - 1) {\n", "                sb.append(\":\");\n", "            }\n", "        }\n", "        return sb.toString();\n", "    }\n", "\n", "    public static byte[] getIP() {\n", "        try {\n", "            Enumeration allNetInterfaces = NetworkInterface.getNetworkInterfaces();\n", "            InetAddress ip = null;\n", "            byte[] internalIP = null;\n", "            while (allNetInterfaces.hasMoreElements()) {\n", "                NetworkInterface netInterface = (NetworkInterface) allNetInterfaces.nextElement();\n", "                Enumeration addresses = netInterface.getInetAddresses();\n", "                while (addresses.hasMoreElements()) {\n", "                    ip = (InetAddress) addresses.nextElement();\n", "                    if (ip != null && ip instanceof Inet4Address) {\n", "                        byte[] ipByte = ip.getAddress();\n", "                        if (ipByte.length == 4) {\n", "                            if (ipCheck(ipByte)) {\n", "                                if (!isInternalIP(ipByte)) {\n", "                                    return ipByte;\n", "                                } else if (internalIP == null) {\n", "                                    internalIP = ipByte;\n", "                                }\n", "                            }\n", "                        }\n", "                    } else if (ip != null && ip instanceof Inet6Address) {\n", "                        byte[] ipByte = ip.getAddress();\n", "                        if (ipByte.length == 16) {\n", "                            if (ipV6Check(ipByte)) {\n", "                                if (!isInternalV6IP(ip)) {\n", "                                    return ipByte;\n", "                                }\n", "                            }\n", "                        }\n", "                    }\n", "                }\n", "            }\n", "            if (internalIP != null) {\n", "                return internalIP;\n", "            } else {\n", "                throw new RuntimeException(\"Can not get local ip\");\n", "            }\n", "        } catch (Exception e) {\n", "            throw new RuntimeException(\"Can not get local ip\", e);\n", "        }\n", "    }\n", "\n", "    public static void deleteFile(File file) {\n", "        if (!file.exists()) {\n", "            return;\n", "        }\n", "        if (file.isFile()) {\n", "            file.delete();\n", "        } else if (file.isDirectory()) {\n", "            File[] files = file.listFiles();\n", "            for (File file1 : files) {\n", "                deleteFile(file1);\n", "            }\n", "            file.delete();\n", "        }\n", "    }\n", "\n", "    public static String list2String(List<String> list, String splitor) {\n", "        if (list == null || list.size() == 0) {\n", "            return null;\n", "        }\n", "        StringBuffer str = new StringBuffer();\n", "        for (int i = 0; i < list.size(); i++) {\n", "            str.append(list.get(i));\n", "            if (i == list.size() - 1) {\n", "                continue;\n", "            }\n", "            str.append(splitor);\n", "        }\n", "        return str.toString();\n", "    }\n", "\n", "    public static List<String> string2List(String str, String splitor) {\n", "        if (StringUtils.isEmpty(str)) {\n", "            return null;\n", "        }\n", "\n", "        String[] addrArray = str.split(splitor);\n", "        return Arrays.asList(addrArray);\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common;\n", "\n", "import java.net.InetAddress;\n", "import java.net.UnknownHostException;\n", "import java.util.Properties;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.assertj.core.api.Assertions.within;\n", "\n", "public class UtilAllTest {\n", "\n", "    @Test\n", "    public void testCurrentStackTrace() {\n", "        String currentStackTrace = UtilAll.currentStackTrace();\n", "        assertThat(currentStackTrace).contains(\"UtilAll.currentStackTrace\");\n", "        assertThat(currentStackTrace).contains(\"UtilAllTest.testCurrentStackTrace(\");\n", "    }\n", "\n", "    @Test\n", "    public void testProperties2Object() {\n", "        DemoConfig demoConfig = new DemoConfig();\n", "        Properties properties = new Properties();\n", "        properties.setProperty(\"demoWidth\", \"123\");\n", "        properties.setProperty(\"demoLength\", \"456\");\n", "        properties.setProperty(\"demoOK\", \"true\");\n", "        properties.setProperty(\"demoName\", \"TestDemo\");\n", "        MixAll.properties2Object(properties, demoConfig);\n", "        assertThat(demoConfig.getDemoLength()).isEqualTo(456);\n", "        assertThat(demoConfig.getDemoWidth()).isEqualTo(123);\n", "        assertThat(demoConfig.isDemoOK()).isTrue();\n", "        assertThat(demoConfig.getDemoName()).isEqualTo(\"TestDemo\");\n", "    }\n", "\n", "    @Test\n", "    public void testProperties2String() {\n", "        DemoConfig demoConfig = new DemoConfig();\n", "        demoConfig.setDemoLength(123);\n", "        demoConfig.setDemoWidth(456);\n", "        demoConfig.setDemoName(\"TestDemo\");\n", "        demoConfig.setDemoOK(true);\n", "        Properties properties = MixAll.object2Properties(demoConfig);\n", "        assertThat(properties.getProperty(\"demoLength\")).isEqualTo(\"123\");\n", "        assertThat(properties.getProperty(\"demoWidth\")).isEqualTo(\"456\");\n", "        assertThat(properties.getProperty(\"demoOK\")).isEqualTo(\"true\");\n", "        assertThat(properties.getProperty(\"demoName\")).isEqualTo(\"TestDemo\");\n", "    }\n", "\n", "    @Test\n", "    public void testIsPropertiesEqual() {\n", "        final Properties p1 = new Properties();\n", "        final Properties p2 = new Properties();\n", "\n", "        p1.setProperty(\"a\", \"1\");\n", "        p1.setProperty(\"b\", \"2\");\n", "        p2.setProperty(\"a\", \"1\");\n", "        p2.setProperty(\"b\", \"2\");\n", "\n", "        assertThat(MixAll.isPropertiesEqual(p1, p2)).isTrue();\n", "    }\n", "\n", "    @Test\n", "    public void testGetPid() {\n", "        assertThat(UtilAll.getPid()).isGreaterThan(0);\n", "    }\n", "\n", "    @Test\n", "    public void testGetDiskPartitionSpaceUsedPercent() {\n", "        String tmpDir = System.getProperty(\"java.io.tmpdir\");\n", "\n", "        assertThat(UtilAll.getDiskPartitionSpaceUsedPercent(null)).isCloseTo(-1, within(0.000001));\n", "        assertThat(UtilAll.getDiskPartitionSpaceUsedPercent(\"\")).isCloseTo(-1, within(0.000001));\n", "        assertThat(UtilAll.getDiskPartitionSpaceUsedPercent(\"nonExistingPath\")).isCloseTo(-1, within(0.000001));\n", "        assertThat(UtilAll.getDiskPartitionSpaceUsedPercent(tmpDir)).isNotCloseTo(-1, within(0.000001));\n", "    }\n", "\n", "    @Test\n", "    public void testIsBlank() {\n", "        assertThat(UtilAll.isBlank(\"Hello \")).isFalse();\n", "        assertThat(UtilAll.isBlank(\" Hello\")).isFalse();\n", "        assertThat(UtilAll.isBlank(\"He llo\")).isFalse();\n", "        assertThat(UtilAll.isBlank(\"  \")).isTrue();\n", "        assertThat(UtilAll.isBlank(\"Hello\")).isFalse();\n", "    }\n", "\n", "    @Test\n", "    public void testIPv6Check() throws UnknownHostException {\n", "        InetAddress nonInternal = InetAddress.getByName(\"2408:4004:0180:8100:3FAA:1DDE:2B3F:898A\");\n", "        InetAddress internal = InetAddress.getByName(\"FE80:0000:0000:0000:0000:0000:0000:FFFF\");\n", "        assertThat(UtilAll.isInternalV6IP(nonInternal)).isFalse();\n", "        assertThat(UtilAll.isInternalV6IP(internal)).isTrue();\n", "        assertThat(UtilAll.ipToIPv6Str(nonInternal.getAddress()).toUpperCase()).isEqualTo(\"2408:4004:0180:8100:3FAA:1DDE:2B3F:898A\");\n", "    }\n", "\n", "    static class DemoConfig {\n", "        private int demoWidth = 0;\n", "        private int demoLength = 0;\n", "        private boolean demoOK = false;\n", "        private String demoName = \"haha\";\n", "\n", "        int getDemoWidth() {\n", "            return demoWidth;\n", "        }\n", "\n", "        public void setDemoWidth(int demoWidth) {\n", "            this.demoWidth = demoWidth;\n", "        }\n", "\n", "        public int getDemoLength() {\n", "            return demoLength;\n", "        }\n", "\n", "        public void setDemoLength(int demoLength) {\n", "            this.demoLength = demoLength;\n", "        }\n", "\n", "        public boolean isDemoOK() {\n", "            return demoOK;\n", "        }\n", "\n", "        public void setDemoOK(boolean demoOK) {\n", "            this.demoOK = demoOK;\n", "        }\n", "\n", "        public String getDemoName() {\n", "            return demoName;\n", "        }\n", "\n", "        public void setDemoName(String demoName) {\n", "            this.demoName = demoName;\n", "        }\n", "\n", "        @Override\n", "        public String toString() {\n", "            return \"DemoConfig{\" +\n", "                \"demoWidth=\" + demoWidth +\n", "                \", demoLength=\" + demoLength +\n", "                \", demoOK=\" + demoOK +\n", "                \", demoName='\" + demoName + '\\'' +\n", "                '}';\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"UtilAll::::getPid()": [57, 65], "UtilAll::::sleep(long)": [67, 77], "UtilAll::::currentStackTrace()": [79, 88], "UtilAll::::offset2FileName(long)": [90, 96], "UtilAll::::computeElapsedTimeMilliseconds(long)": [98, 100], "UtilAll::::isItTimeToDo(java.lang.String)": [102, 115], "UtilAll::::timeMillisToHumanString()": [117, 119], "UtilAll::::timeMillisToHumanString(long)": [121, 127], "UtilAll::::computeNextMorningTimeMillis()": [129, 139], "UtilAll::::computeNextMinutesTimeMillis()": [141, 151], "UtilAll::::computeNextHourTimeMillis()": [153, 163], "UtilAll::::computeNextHalfHourTimeMillis()": [165, 175], "UtilAll::::timeMillisToHumanString2(long)": [177, 188], "UtilAll::::timeMillisToHumanString3(long)": [190, 200], "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)": [202, 232], "UtilAll::::crc32(byte[])": [234, 240], "UtilAll::::crc32(byte[],int,int)": [242, 246], "UtilAll::::bytes2string(byte[])": [248, 256], "UtilAll::::string2bytes(java.lang.String)": [258, 271], "UtilAll::::charToByte(char)": [273, 275], "UtilAll::::uncompress(byte[])": [277, 315], "UtilAll::::compress(byte[],int)": [317, 340], "UtilAll::::asInt(java.lang.String,int)": [342, 348], "UtilAll::::asLong(java.lang.String,long)": [350, 356], "UtilAll::::formatDate(java.util.Date,java.lang.String)": [358, 361], "UtilAll::::parseDate(java.lang.String,java.lang.String)": [363, 370], "UtilAll::::responseCode2String(int)": [372, 374], "UtilAll::::frontStringAtLeast(java.lang.String,int)": [376, 384], "UtilAll::::isBlank(java.lang.String)": [386, 397], "UtilAll::::jstack()": [399, 401], "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)": [403, 425], "UtilAll::::isInternalIP(byte[])": [427, 448], "UtilAll::::isInternalV6IP(java.net.InetAddress)": [450, 458], "UtilAll::::ipCheck(byte[])": [460, 467], "UtilAll::::ipV6Check(byte[])": [469, 476], "UtilAll::::ipToIPv4Str(byte[])": [478, 485], "UtilAll::::ipToIPv6Str(byte[])": [487, 504], "UtilAll::::getIP()": [506, 547], "UtilAll::::deleteFile(java.io.File)": [549, 562], "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)": [564, 577], "UtilAll::::string2List(java.lang.String,java.lang.String)": [579, 586]}, "test_method_lines_dic": {"UtilAllTest::::testCurrentStackTrace()": [30, 35], "UtilAllTest::::testProperties2Object()": [37, 50], "UtilAllTest::::testProperties2String()": [52, 64], "UtilAllTest::::testIsPropertiesEqual()": [66, 77], "UtilAllTest::::testGetPid()": [79, 82], "UtilAllTest::::testGetDiskPartitionSpaceUsedPercent()": [84, 92], "UtilAllTest::::testIsBlank()": [94, 101], "UtilAllTest::::testIPv6Check()": [103, 110], "UtilAllTest.DemoConfig::::getDemoWidth()": [118, 120], "UtilAllTest.DemoConfig::::setDemoWidth(int)": [122, 124], "UtilAllTest.DemoConfig::::getDemoLength()": [126, 128], "UtilAllTest.DemoConfig::::setDemoLength(int)": [130, 132], "UtilAllTest.DemoConfig::::isDemoOK()": [134, 136], "UtilAllTest.DemoConfig::::setDemoOK(boolean)": [138, 140], "UtilAllTest.DemoConfig::::getDemoName()": [142, 144], "UtilAllTest.DemoConfig::::setDemoName(java.lang.String)": [146, 148], "UtilAllTest.DemoConfig::::toString()": [150, 158]}, "reverse_method_lines_dic": {"57": "UtilAll::::getPid()", "58": "UtilAll::::getPid()", "59": "UtilAll::::getPid()", "60": "UtilAll::::getPid()", "61": "UtilAll::::getPid()", "62": "UtilAll::::getPid()", "63": "UtilAll::::getPid()", "64": "UtilAll::::getPid()", "65": "UtilAll::::getPid()", "67": "UtilAll::::sleep(long)", "68": "UtilAll::::sleep(long)", "69": "UtilAll::::sleep(long)", "70": "UtilAll::::sleep(long)", "71": "UtilAll::::sleep(long)", "72": "UtilAll::::sleep(long)", "73": "UtilAll::::sleep(long)", "74": "UtilAll::::sleep(long)", "75": "UtilAll::::sleep(long)", "76": "UtilAll::::sleep(long)", "77": "UtilAll::::sleep(long)", "79": "UtilAll::::currentStackTrace()", "80": "UtilAll::::currentStackTrace()", "81": "UtilAll::::currentStackTrace()", "82": "UtilAll::::currentStackTrace()", "83": "UtilAll::::currentStackTrace()", "84": "UtilAll::::currentStackTrace()", "85": "UtilAll::::currentStackTrace()", "86": "UtilAll::::currentStackTrace()", "87": "UtilAll::::currentStackTrace()", "88": "UtilAll::::currentStackTrace()", "90": "UtilAll::::offset2FileName(long)", "91": "UtilAll::::offset2FileName(long)", "92": "UtilAll::::offset2FileName(long)", "93": "UtilAll::::offset2FileName(long)", "94": "UtilAll::::offset2FileName(long)", "95": "UtilAll::::offset2FileName(long)", "96": "UtilAll::::offset2FileName(long)", "98": "UtilAll::::computeElapsedTimeMilliseconds(long)", "99": "UtilAll::::computeElapsedTimeMilliseconds(long)", "100": "UtilAll::::computeElapsedTimeMilliseconds(long)", "102": "UtilAll::::isItTimeToDo(java.lang.String)", "103": "UtilAll::::isItTimeToDo(java.lang.String)", "104": "UtilAll::::isItTimeToDo(java.lang.String)", "105": "UtilAll::::isItTimeToDo(java.lang.String)", "106": "UtilAll::::isItTimeToDo(java.lang.String)", "107": "UtilAll::::isItTimeToDo(java.lang.String)", "108": "UtilAll::::isItTimeToDo(java.lang.String)", "109": "UtilAll::::isItTimeToDo(java.lang.String)", "110": "UtilAll::::isItTimeToDo(java.lang.String)", "111": "UtilAll::::isItTimeToDo(java.lang.String)", "112": "UtilAll::::isItTimeToDo(java.lang.String)", "113": "UtilAll::::isItTimeToDo(java.lang.String)", "114": "UtilAll::::isItTimeToDo(java.lang.String)", "115": "UtilAll::::isItTimeToDo(java.lang.String)", "117": "UtilAll::::timeMillisToHumanString()", "118": "UtilAll::::timeMillisToHumanString()", "119": "UtilAll::::timeMillisToHumanString()", "121": "UtilAll::::timeMillisToHumanString(long)", "122": "UtilAll::::timeMillisToHumanString(long)", "123": "UtilAll::::timeMillisToHumanString(long)", "124": "UtilAll::::timeMillisToHumanString(long)", "125": "UtilAll::::timeMillisToHumanString(long)", "126": "UtilAll::::timeMillisToHumanString(long)", "127": "UtilAll::::timeMillisToHumanString(long)", "129": "UtilAll::::computeNextMorningTimeMillis()", "130": "UtilAll::::computeNextMorningTimeMillis()", "131": "UtilAll::::computeNextMorningTimeMillis()", "132": "UtilAll::::computeNextMorningTimeMillis()", "133": "UtilAll::::computeNextMorningTimeMillis()", "134": "UtilAll::::computeNextMorningTimeMillis()", "135": "UtilAll::::computeNextMorningTimeMillis()", "136": "UtilAll::::computeNextMorningTimeMillis()", "137": "UtilAll::::computeNextMorningTimeMillis()", "138": "UtilAll::::computeNextMorningTimeMillis()", "139": "UtilAll::::computeNextMorningTimeMillis()", "141": "UtilAll::::computeNextMinutesTimeMillis()", "142": "UtilAll::::computeNextMinutesTimeMillis()", "143": "UtilAll::::computeNextMinutesTimeMillis()", "144": "UtilAll::::computeNextMinutesTimeMillis()", "145": "UtilAll::::computeNextMinutesTimeMillis()", "146": "UtilAll::::computeNextMinutesTimeMillis()", "147": "UtilAll::::computeNextMinutesTimeMillis()", "148": "UtilAll::::computeNextMinutesTimeMillis()", "149": "UtilAll::::computeNextMinutesTimeMillis()", "150": "UtilAll::::computeNextMinutesTimeMillis()", "151": "UtilAll::::computeNextMinutesTimeMillis()", "153": "UtilAll::::computeNextHourTimeMillis()", "154": "UtilAll::::computeNextHourTimeMillis()", "155": "UtilAll::::computeNextHourTimeMillis()", "156": "UtilAll::::computeNextHourTimeMillis()", "157": "UtilAll::::computeNextHourTimeMillis()", "158": "UtilAll::::computeNextHourTimeMillis()", "159": "UtilAll::::computeNextHourTimeMillis()", "160": "UtilAll::::computeNextHourTimeMillis()", "161": "UtilAll::::computeNextHourTimeMillis()", "162": "UtilAll::::computeNextHourTimeMillis()", "163": "UtilAll::::computeNextHourTimeMillis()", "165": "UtilAll::::computeNextHalfHourTimeMillis()", "166": "UtilAll::::computeNextHalfHourTimeMillis()", "167": "UtilAll::::computeNextHalfHourTimeMillis()", "168": "UtilAll::::computeNextHalfHourTimeMillis()", "169": "UtilAll::::computeNextHalfHourTimeMillis()", "170": "UtilAll::::computeNextHalfHourTimeMillis()", "171": "UtilAll::::computeNextHalfHourTimeMillis()", "172": "UtilAll::::computeNextHalfHourTimeMillis()", "173": "UtilAll::::computeNextHalfHourTimeMillis()", "174": "UtilAll::::computeNextHalfHourTimeMillis()", "175": "UtilAll::::computeNextHalfHourTimeMillis()", "177": "UtilAll::::timeMillisToHumanString2(long)", "178": "UtilAll::::timeMillisToHumanString2(long)", "179": "UtilAll::::timeMillisToHumanString2(long)", "180": "UtilAll::::timeMillisToHumanString2(long)", "181": "UtilAll::::timeMillisToHumanString2(long)", "182": "UtilAll::::timeMillisToHumanString2(long)", "183": "UtilAll::::timeMillisToHumanString2(long)", "184": "UtilAll::::timeMillisToHumanString2(long)", "185": "UtilAll::::timeMillisToHumanString2(long)", "186": "UtilAll::::timeMillisToHumanString2(long)", "187": "UtilAll::::timeMillisToHumanString2(long)", "188": "UtilAll::::timeMillisToHumanString2(long)", "190": "UtilAll::::timeMillisToHumanString3(long)", "191": "UtilAll::::timeMillisToHumanString3(long)", "192": "UtilAll::::timeMillisToHumanString3(long)", "193": "UtilAll::::timeMillisToHumanString3(long)", "194": "UtilAll::::timeMillisToHumanString3(long)", "195": "UtilAll::::timeMillisToHumanString3(long)", "196": "UtilAll::::timeMillisToHumanString3(long)", "197": "UtilAll::::timeMillisToHumanString3(long)", "198": "UtilAll::::timeMillisToHumanString3(long)", "199": "UtilAll::::timeMillisToHumanString3(long)", "200": "UtilAll::::timeMillisToHumanString3(long)", "202": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "203": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "204": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "205": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "206": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "207": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "208": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "209": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "210": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "211": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "212": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "213": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "214": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "215": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "216": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "217": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "218": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "219": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "220": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "221": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "222": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "223": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "224": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "225": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "226": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "227": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "228": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "229": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "230": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "231": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "232": "UtilAll::::getDiskPartitionSpaceUsedPercent(java.lang.String)", "234": "UtilAll::::crc32(byte[])", "235": "UtilAll::::crc32(byte[])", "236": "UtilAll::::crc32(byte[])", "237": "UtilAll::::crc32(byte[])", "238": "UtilAll::::crc32(byte[])", "239": "UtilAll::::crc32(byte[])", "240": "UtilAll::::crc32(byte[])", "242": "UtilAll::::crc32(byte[],int,int)", "243": "UtilAll::::crc32(byte[],int,int)", "244": "UtilAll::::crc32(byte[],int,int)", "245": "UtilAll::::crc32(byte[],int,int)", "246": "UtilAll::::crc32(byte[],int,int)", "248": "UtilAll::::bytes2string(byte[])", "249": "UtilAll::::bytes2string(byte[])", "250": "UtilAll::::bytes2string(byte[])", "251": "UtilAll::::bytes2string(byte[])", "252": "UtilAll::::bytes2string(byte[])", "253": "UtilAll::::bytes2string(byte[])", "254": "UtilAll::::bytes2string(byte[])", "255": "UtilAll::::bytes2string(byte[])", "256": "UtilAll::::bytes2string(byte[])", "258": "UtilAll::::string2bytes(java.lang.String)", "259": "UtilAll::::string2bytes(java.lang.String)", "260": "UtilAll::::string2bytes(java.lang.String)", "261": "UtilAll::::string2bytes(java.lang.String)", "262": "UtilAll::::string2bytes(java.lang.String)", "263": "UtilAll::::string2bytes(java.lang.String)", "264": "UtilAll::::string2bytes(java.lang.String)", "265": "UtilAll::::string2bytes(java.lang.String)", "266": "UtilAll::::string2bytes(java.lang.String)", "267": "UtilAll::::string2bytes(java.lang.String)", "268": "UtilAll::::string2bytes(java.lang.String)", "269": "UtilAll::::string2bytes(java.lang.String)", "270": "UtilAll::::string2bytes(java.lang.String)", "271": "UtilAll::::string2bytes(java.lang.String)", "273": "UtilAll::::charToByte(char)", "274": "UtilAll::::charToByte(char)", "275": "UtilAll::::charToByte(char)", "277": "UtilAll::::uncompress(byte[])", "278": "UtilAll::::uncompress(byte[])", "279": "UtilAll::::uncompress(byte[])", "280": "UtilAll::::uncompress(byte[])", "281": "UtilAll::::uncompress(byte[])", "282": "UtilAll::::uncompress(byte[])", "283": "UtilAll::::uncompress(byte[])", "284": "UtilAll::::uncompress(byte[])", "285": "UtilAll::::uncompress(byte[])", "286": "UtilAll::::uncompress(byte[])", "287": "UtilAll::::uncompress(byte[])", "288": "UtilAll::::uncompress(byte[])", "289": "UtilAll::::uncompress(byte[])", "290": "UtilAll::::uncompress(byte[])", "291": "UtilAll::::uncompress(byte[])", "292": "UtilAll::::uncompress(byte[])", "293": "UtilAll::::uncompress(byte[])", "294": "UtilAll::::uncompress(byte[])", "295": "UtilAll::::uncompress(byte[])", "296": "UtilAll::::uncompress(byte[])", "297": "UtilAll::::uncompress(byte[])", "298": "UtilAll::::uncompress(byte[])", "299": "UtilAll::::uncompress(byte[])", "300": "UtilAll::::uncompress(byte[])", "301": "UtilAll::::uncompress(byte[])", "302": "UtilAll::::uncompress(byte[])", "303": "UtilAll::::uncompress(byte[])", "304": "UtilAll::::uncompress(byte[])", "305": "UtilAll::::uncompress(byte[])", "306": "UtilAll::::uncompress(byte[])", "307": "UtilAll::::uncompress(byte[])", "308": "UtilAll::::uncompress(byte[])", "309": "UtilAll::::uncompress(byte[])", "310": "UtilAll::::uncompress(byte[])", "311": "UtilAll::::uncompress(byte[])", "312": "UtilAll::::uncompress(byte[])", "313": "UtilAll::::uncompress(byte[])", "314": "UtilAll::::uncompress(byte[])", "315": "UtilAll::::uncompress(byte[])", "317": "UtilAll::::compress(byte[],int)", "318": "UtilAll::::compress(byte[],int)", "319": "UtilAll::::compress(byte[],int)", "320": "UtilAll::::compress(byte[],int)", "321": "UtilAll::::compress(byte[],int)", "322": "UtilAll::::compress(byte[],int)", "323": "UtilAll::::compress(byte[],int)", "324": "UtilAll::::compress(byte[],int)", "325": "UtilAll::::compress(byte[],int)", "326": "UtilAll::::compress(byte[],int)", "327": "UtilAll::::compress(byte[],int)", "328": "UtilAll::::compress(byte[],int)", "329": "UtilAll::::compress(byte[],int)", "330": "UtilAll::::compress(byte[],int)", "331": "UtilAll::::compress(byte[],int)", "332": "UtilAll::::compress(byte[],int)", "333": "UtilAll::::compress(byte[],int)", "334": "UtilAll::::compress(byte[],int)", "335": "UtilAll::::compress(byte[],int)", "336": "UtilAll::::compress(byte[],int)", "337": "UtilAll::::compress(byte[],int)", "338": "UtilAll::::compress(byte[],int)", "339": "UtilAll::::compress(byte[],int)", "340": "UtilAll::::compress(byte[],int)", "342": "UtilAll::::asInt(java.lang.String,int)", "343": "UtilAll::::asInt(java.lang.String,int)", "344": "UtilAll::::asInt(java.lang.String,int)", "345": "UtilAll::::asInt(java.lang.String,int)", "346": "UtilAll::::asInt(java.lang.String,int)", "347": "UtilAll::::asInt(java.lang.String,int)", "348": "UtilAll::::asInt(java.lang.String,int)", "350": "UtilAll::::asLong(java.lang.String,long)", "351": "UtilAll::::asLong(java.lang.String,long)", "352": "UtilAll::::asLong(java.lang.String,long)", "353": "UtilAll::::asLong(java.lang.String,long)", "354": "UtilAll::::asLong(java.lang.String,long)", "355": "UtilAll::::asLong(java.lang.String,long)", "356": "UtilAll::::asLong(java.lang.String,long)", "358": "UtilAll::::formatDate(java.util.Date,java.lang.String)", "359": "UtilAll::::formatDate(java.util.Date,java.lang.String)", "360": "UtilAll::::formatDate(java.util.Date,java.lang.String)", "361": "UtilAll::::formatDate(java.util.Date,java.lang.String)", "363": "UtilAll::::parseDate(java.lang.String,java.lang.String)", "364": "UtilAll::::parseDate(java.lang.String,java.lang.String)", "365": "UtilAll::::parseDate(java.lang.String,java.lang.String)", "366": "UtilAll::::parseDate(java.lang.String,java.lang.String)", "367": "UtilAll::::parseDate(java.lang.String,java.lang.String)", "368": "UtilAll::::parseDate(java.lang.String,java.lang.String)", "369": "UtilAll::::parseDate(java.lang.String,java.lang.String)", "370": "UtilAll::::parseDate(java.lang.String,java.lang.String)", "372": "UtilAll::::responseCode2String(int)", "373": "UtilAll::::responseCode2String(int)", "374": "UtilAll::::responseCode2String(int)", "376": "UtilAll::::frontStringAtLeast(java.lang.String,int)", "377": "UtilAll::::frontStringAtLeast(java.lang.String,int)", "378": "UtilAll::::frontStringAtLeast(java.lang.String,int)", "379": "UtilAll::::frontStringAtLeast(java.lang.String,int)", "380": "UtilAll::::frontStringAtLeast(java.lang.String,int)", "381": "UtilAll::::frontStringAtLeast(java.lang.String,int)", "382": "UtilAll::::frontStringAtLeast(java.lang.String,int)", "383": "UtilAll::::frontStringAtLeast(java.lang.String,int)", "384": "UtilAll::::frontStringAtLeast(java.lang.String,int)", "386": "UtilAll::::isBlank(java.lang.String)", "387": "UtilAll::::isBlank(java.lang.String)", "388": "UtilAll::::isBlank(java.lang.String)", "389": "UtilAll::::isBlank(java.lang.String)", "390": "UtilAll::::isBlank(java.lang.String)", "391": "UtilAll::::isBlank(java.lang.String)", "392": "UtilAll::::isBlank(java.lang.String)", "393": "UtilAll::::isBlank(java.lang.String)", "394": "UtilAll::::isBlank(java.lang.String)", "395": "UtilAll::::isBlank(java.lang.String)", "396": "UtilAll::::isBlank(java.lang.String)", "397": "UtilAll::::isBlank(java.lang.String)", "399": "UtilAll::::jstack()", "400": "UtilAll::::jstack()", "401": "UtilAll::::jstack()", "403": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "404": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "405": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "406": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "407": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "408": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "409": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "410": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "411": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "412": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "413": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "414": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "415": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "416": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "417": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "418": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "419": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "420": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "421": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "422": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "423": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "424": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "425": "UtilAll::::jstack(java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]>)", "427": "UtilAll::::isInternalIP(byte[])", "428": "UtilAll::::isInternalIP(byte[])", "429": "UtilAll::::isInternalIP(byte[])", "430": "UtilAll::::isInternalIP(byte[])", "431": "UtilAll::::isInternalIP(byte[])", "432": "UtilAll::::isInternalIP(byte[])", "433": "UtilAll::::isInternalIP(byte[])", "434": "UtilAll::::isInternalIP(byte[])", "435": "UtilAll::::isInternalIP(byte[])", "436": "UtilAll::::isInternalIP(byte[])", "437": "UtilAll::::isInternalIP(byte[])", "438": "UtilAll::::isInternalIP(byte[])", "439": "UtilAll::::isInternalIP(byte[])", "440": "UtilAll::::isInternalIP(byte[])", "441": "UtilAll::::isInternalIP(byte[])", "442": "UtilAll::::isInternalIP(byte[])", "443": "UtilAll::::isInternalIP(byte[])", "444": "UtilAll::::isInternalIP(byte[])", "445": "UtilAll::::isInternalIP(byte[])", "446": "UtilAll::::isInternalIP(byte[])", "447": "UtilAll::::isInternalIP(byte[])", "448": "UtilAll::::isInternalIP(byte[])", "450": "UtilAll::::isInternalV6IP(java.net.InetAddress)", "451": "UtilAll::::isInternalV6IP(java.net.InetAddress)", "452": "UtilAll::::isInternalV6IP(java.net.InetAddress)", "453": "UtilAll::::isInternalV6IP(java.net.InetAddress)", "454": "UtilAll::::isInternalV6IP(java.net.InetAddress)", "455": "UtilAll::::isInternalV6IP(java.net.InetAddress)", "456": "UtilAll::::isInternalV6IP(java.net.InetAddress)", "457": "UtilAll::::isInternalV6IP(java.net.InetAddress)", "458": "UtilAll::::isInternalV6IP(java.net.InetAddress)", "460": "UtilAll::::ipCheck(byte[])", "461": "UtilAll::::ipCheck(byte[])", "462": "UtilAll::::ipCheck(byte[])", "463": "UtilAll::::ipCheck(byte[])", "464": "UtilAll::::ipCheck(byte[])", "465": "UtilAll::::ipCheck(byte[])", "466": "UtilAll::::ipCheck(byte[])", "467": "UtilAll::::ipCheck(byte[])", "469": "UtilAll::::ipV6Check(byte[])", "470": "UtilAll::::ipV6Check(byte[])", "471": "UtilAll::::ipV6Check(byte[])", "472": "UtilAll::::ipV6Check(byte[])", "473": "UtilAll::::ipV6Check(byte[])", "474": "UtilAll::::ipV6Check(byte[])", "475": "UtilAll::::ipV6Check(byte[])", "476": "UtilAll::::ipV6Check(byte[])", "478": "UtilAll::::ipToIPv4Str(byte[])", "479": "UtilAll::::ipToIPv4Str(byte[])", "480": "UtilAll::::ipToIPv4Str(byte[])", "481": "UtilAll::::ipToIPv4Str(byte[])", "482": "UtilAll::::ipToIPv4Str(byte[])", "483": "UtilAll::::ipToIPv4Str(byte[])", "484": "UtilAll::::ipToIPv4Str(byte[])", "485": "UtilAll::::ipToIPv4Str(byte[])", "487": "UtilAll::::ipToIPv6Str(byte[])", "488": "UtilAll::::ipToIPv6Str(byte[])", "489": "UtilAll::::ipToIPv6Str(byte[])", "490": "UtilAll::::ipToIPv6Str(byte[])", "491": "UtilAll::::ipToIPv6Str(byte[])", "492": "UtilAll::::ipToIPv6Str(byte[])", "493": "UtilAll::::ipToIPv6Str(byte[])", "494": "UtilAll::::ipToIPv6Str(byte[])", "495": "UtilAll::::ipToIPv6Str(byte[])", "496": "UtilAll::::ipToIPv6Str(byte[])", "497": "UtilAll::::ipToIPv6Str(byte[])", "498": "UtilAll::::ipToIPv6Str(byte[])", "499": "UtilAll::::ipToIPv6Str(byte[])", "500": "UtilAll::::ipToIPv6Str(byte[])", "501": "UtilAll::::ipToIPv6Str(byte[])", "502": "UtilAll::::ipToIPv6Str(byte[])", "503": "UtilAll::::ipToIPv6Str(byte[])", "504": "UtilAll::::ipToIPv6Str(byte[])", "506": "UtilAll::::getIP()", "507": "UtilAll::::getIP()", "508": "UtilAll::::getIP()", "509": "UtilAll::::getIP()", "510": "UtilAll::::getIP()", "511": "UtilAll::::getIP()", "512": "UtilAll::::getIP()", "513": "UtilAll::::getIP()", "514": "UtilAll::::getIP()", "515": "UtilAll::::getIP()", "516": "UtilAll::::getIP()", "517": "UtilAll::::getIP()", "518": "UtilAll::::getIP()", "519": "UtilAll::::getIP()", "520": "UtilAll::::getIP()", "521": "UtilAll::::getIP()", "522": "UtilAll::::getIP()", "523": "UtilAll::::getIP()", "524": "UtilAll::::getIP()", "525": "UtilAll::::getIP()", "526": "UtilAll::::getIP()", "527": "UtilAll::::getIP()", "528": "UtilAll::::getIP()", "529": "UtilAll::::getIP()", "530": "UtilAll::::getIP()", "531": "UtilAll::::getIP()", "532": "UtilAll::::getIP()", "533": "UtilAll::::getIP()", "534": "UtilAll::::getIP()", "535": "UtilAll::::getIP()", "536": "UtilAll::::getIP()", "537": "UtilAll::::getIP()", "538": "UtilAll::::getIP()", "539": "UtilAll::::getIP()", "540": "UtilAll::::getIP()", "541": "UtilAll::::getIP()", "542": "UtilAll::::getIP()", "543": "UtilAll::::getIP()", "544": "UtilAll::::getIP()", "545": "UtilAll::::getIP()", "546": "UtilAll::::getIP()", "547": "UtilAll::::getIP()", "549": "UtilAll::::deleteFile(java.io.File)", "550": "UtilAll::::deleteFile(java.io.File)", "551": "UtilAll::::deleteFile(java.io.File)", "552": "UtilAll::::deleteFile(java.io.File)", "553": "UtilAll::::deleteFile(java.io.File)", "554": "UtilAll::::deleteFile(java.io.File)", "555": "UtilAll::::deleteFile(java.io.File)", "556": "UtilAll::::deleteFile(java.io.File)", "557": "UtilAll::::deleteFile(java.io.File)", "558": "UtilAll::::deleteFile(java.io.File)", "559": "UtilAll::::deleteFile(java.io.File)", "560": "UtilAll::::deleteFile(java.io.File)", "561": "UtilAll::::deleteFile(java.io.File)", "562": "UtilAll::::deleteFile(java.io.File)", "564": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "565": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "566": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "567": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "568": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "569": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "570": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "571": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "572": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "573": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "574": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "575": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "576": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "577": "UtilAll::::list2String(java.util.List<java.lang.String>,java.lang.String)", "579": "UtilAll::::string2List(java.lang.String,java.lang.String)", "580": "UtilAll::::string2List(java.lang.String,java.lang.String)", "581": "UtilAll::::string2List(java.lang.String,java.lang.String)", "582": "UtilAll::::string2List(java.lang.String,java.lang.String)", "583": "UtilAll::::string2List(java.lang.String,java.lang.String)", "584": "UtilAll::::string2List(java.lang.String,java.lang.String)", "585": "UtilAll::::string2List(java.lang.String,java.lang.String)", "586": "UtilAll::::string2List(java.lang.String,java.lang.String)"}, "test_reverse_method_lines_dic": {"30": "UtilAllTest::::testCurrentStackTrace()", "31": "UtilAllTest::::testCurrentStackTrace()", "32": "UtilAllTest::::testCurrentStackTrace()", "33": "UtilAllTest::::testCurrentStackTrace()", "34": "UtilAllTest::::testCurrentStackTrace()", "35": "UtilAllTest::::testCurrentStackTrace()", "37": "UtilAllTest::::testProperties2Object()", "38": "UtilAllTest::::testProperties2Object()", "39": "UtilAllTest::::testProperties2Object()", "40": "UtilAllTest::::testProperties2Object()", "41": "UtilAllTest::::testProperties2Object()", "42": "UtilAllTest::::testProperties2Object()", "43": "UtilAllTest::::testProperties2Object()", "44": "UtilAllTest::::testProperties2Object()", "45": "UtilAllTest::::testProperties2Object()", "46": "UtilAllTest::::testProperties2Object()", "47": "UtilAllTest::::testProperties2Object()", "48": "UtilAllTest::::testProperties2Object()", "49": "UtilAllTest::::testProperties2Object()", "50": "UtilAllTest::::testProperties2Object()", "52": "UtilAllTest::::testProperties2String()", "53": "UtilAllTest::::testProperties2String()", "54": "UtilAllTest::::testProperties2String()", "55": "UtilAllTest::::testProperties2String()", "56": "UtilAllTest::::testProperties2String()", "57": "UtilAllTest::::testProperties2String()", "58": "UtilAllTest::::testProperties2String()", "59": "UtilAllTest::::testProperties2String()", "60": "UtilAllTest::::testProperties2String()", "61": "UtilAllTest::::testProperties2String()", "62": "UtilAllTest::::testProperties2String()", "63": "UtilAllTest::::testProperties2String()", "64": "UtilAllTest::::testProperties2String()", "66": "UtilAllTest::::testIsPropertiesEqual()", "67": "UtilAllTest::::testIsPropertiesEqual()", "68": "UtilAllTest::::testIsPropertiesEqual()", "69": "UtilAllTest::::testIsPropertiesEqual()", "70": "UtilAllTest::::testIsPropertiesEqual()", "71": "UtilAllTest::::testIsPropertiesEqual()", "72": "UtilAllTest::::testIsPropertiesEqual()", "73": "UtilAllTest::::testIsPropertiesEqual()", "74": "UtilAllTest::::testIsPropertiesEqual()", "75": "UtilAllTest::::testIsPropertiesEqual()", "76": "UtilAllTest::::testIsPropertiesEqual()", "77": "UtilAllTest::::testIsPropertiesEqual()", "79": "UtilAllTest::::testGetPid()", "80": "UtilAllTest::::testGetPid()", "81": "UtilAllTest::::testGetPid()", "82": "UtilAllTest::::testGetPid()", "84": "UtilAllTest::::testGetDiskPartitionSpaceUsedPercent()", "85": "UtilAllTest::::testGetDiskPartitionSpaceUsedPercent()", "86": "UtilAllTest::::testGetDiskPartitionSpaceUsedPercent()", "87": "UtilAllTest::::testGetDiskPartitionSpaceUsedPercent()", "88": "UtilAllTest::::testGetDiskPartitionSpaceUsedPercent()", "89": "UtilAllTest::::testGetDiskPartitionSpaceUsedPercent()", "90": "UtilAllTest::::testGetDiskPartitionSpaceUsedPercent()", "91": "UtilAllTest::::testGetDiskPartitionSpaceUsedPercent()", "92": "UtilAllTest::::testGetDiskPartitionSpaceUsedPercent()", "94": "UtilAllTest::::testIsBlank()", "95": "UtilAllTest::::testIsBlank()", "96": "UtilAllTest::::testIsBlank()", "97": "UtilAllTest::::testIsBlank()", "98": "UtilAllTest::::testIsBlank()", "99": "UtilAllTest::::testIsBlank()", "100": "UtilAllTest::::testIsBlank()", "101": "UtilAllTest::::testIsBlank()", "103": "UtilAllTest::::testIPv6Check()", "104": "UtilAllTest::::testIPv6Check()", "105": "UtilAllTest::::testIPv6Check()", "106": "UtilAllTest::::testIPv6Check()", "107": "UtilAllTest::::testIPv6Check()", "108": "UtilAllTest::::testIPv6Check()", "109": "UtilAllTest::::testIPv6Check()", "110": "UtilAllTest::::testIPv6Check()", "118": "UtilAllTest.DemoConfig::::getDemoWidth()", "119": "UtilAllTest.DemoConfig::::getDemoWidth()", "120": "UtilAllTest.DemoConfig::::getDemoWidth()", "122": "UtilAllTest.DemoConfig::::setDemoWidth(int)", "123": "UtilAllTest.DemoConfig::::setDemoWidth(int)", "124": "UtilAllTest.DemoConfig::::setDemoWidth(int)", "126": "UtilAllTest.DemoConfig::::getDemoLength()", "127": "UtilAllTest.DemoConfig::::getDemoLength()", "128": "UtilAllTest.DemoConfig::::getDemoLength()", "130": "UtilAllTest.DemoConfig::::setDemoLength(int)", "131": "UtilAllTest.DemoConfig::::setDemoLength(int)", "132": "UtilAllTest.DemoConfig::::setDemoLength(int)", "134": "UtilAllTest.DemoConfig::::isDemoOK()", "135": "UtilAllTest.DemoConfig::::isDemoOK()", "136": "UtilAllTest.DemoConfig::::isDemoOK()", "138": "UtilAllTest.DemoConfig::::setDemoOK(boolean)", "139": "UtilAllTest.DemoConfig::::setDemoOK(boolean)", "140": "UtilAllTest.DemoConfig::::setDemoOK(boolean)", "142": "UtilAllTest.DemoConfig::::getDemoName()", "143": "UtilAllTest.DemoConfig::::getDemoName()", "144": "UtilAllTest.DemoConfig::::getDemoName()", "146": "UtilAllTest.DemoConfig::::setDemoName(java.lang.String)", "147": "UtilAllTest.DemoConfig::::setDemoName(java.lang.String)", "148": "UtilAllTest.DemoConfig::::setDemoName(java.lang.String)", "150": "UtilAllTest.DemoConfig::::toString()", "151": "UtilAllTest.DemoConfig::::toString()", "152": "UtilAllTest.DemoConfig::::toString()", "153": "UtilAllTest.DemoConfig::::toString()", "154": "UtilAllTest.DemoConfig::::toString()", "155": "UtilAllTest.DemoConfig::::toString()", "156": "UtilAllTest.DemoConfig::::toString()", "157": "UtilAllTest.DemoConfig::::toString()", "158": "UtilAllTest.DemoConfig::::toString()"}, "tests": [{"test_lines": [30, 35], "covered_lines": [50, 55, 80, 81, 82, 83, 84, 87]}, {"test_lines": [79, 82], "covered_lines": [50, 55, 58, 59, 61]}, {"test_lines": [84, 92], "covered_lines": [50, 55, 203, 204, 205, 210, 212, 213, 214, 218, 220, 221, 222, 224]}, {"test_lines": [94, 101], "covered_lines": [50, 55, 388, 391, 392, 393, 396]}, {"test_lines": [103, 110], "covered_lines": [50, 55, 451, 452, 453, 454, 455, 457, 488, 492, 493, 494, 495, 496, 498, 499, 500, 503]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/CountDownLatch2.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common;\n", "\n", "import java.util.concurrent.TimeUnit;\n", "import java.util.concurrent.locks.AbstractQueuedSynchronizer;\n", "\n", "/**\n", " * Add reset feature for @see java.util.concurrent.CountDownLatch\n", " */\n", "public class CountDownLatch2 {\n", "    private final Sync sync;\n", "\n", "    /**\n", "     * Constructs a {@code CountDownLatch2} initialized with the given count.\n", "     *\n", "     * @param count the number of times {@link #countDown} must be invoked before threads can pass through {@link\n", "     * #await}\n", "     * @throws IllegalArgumentException if {@code count} is negative\n", "     */\n", "    public CountDownLatch2(int count) {\n", "        if (count < 0)\n", "            throw new IllegalArgumentException(\"count < 0\");\n", "        this.sync = new Sync(count);\n", "    }\n", "\n", "    /**\n", "     * Causes the current thread to wait until the latch has counted down to\n", "     * zero, unless the thread is {@linkplain Thread#interrupt interrupted}.\n", "     *\n", "     * <p>If the current count is zero then this method returns immediately.\n", "     *\n", "     * <p>If the current count is greater than zero then the current\n", "     * thread becomes disabled for thread scheduling purposes and lies\n", "     * dormant until one of two things happen:\n", "     * <ul>\n", "     * <li>The count reaches zero due to invocations of the\n", "     * {@link #countDown} method; or\n", "     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n", "     * the current thread.\n", "     * </ul>\n", "     *\n", "     * <p>If the current thread:\n", "     * <ul>\n", "     * <li>has its interrupted status set on entry to this method; or\n", "     * <li>is {@linkplain Thread#interrupt interrupted} while waiting,\n", "     * </ul>\n", "     * then {@link InterruptedException} is thrown and the current thread's\n", "     * interrupted status is cleared.\n", "     *\n", "     * @throws InterruptedException if the current thread is interrupted while waiting\n", "     */\n", "    public void await() throws InterruptedException {\n", "        sync.acquireSharedInterruptibly(1);\n", "    }\n", "\n", "    /**\n", "     * Causes the current thread to wait until the latch has counted down to\n", "     * zero, unless the thread is {@linkplain Thread#interrupt interrupted},\n", "     * or the specified waiting time elapses.\n", "     *\n", "     * <p>If the current count is zero then this method returns immediately\n", "     * with the value {@code true}.\n", "     *\n", "     * <p>If the current count is greater than zero then the current\n", "     * thread becomes disabled for thread scheduling purposes and lies\n", "     * dormant until one of three things happen:\n", "     * <ul>\n", "     * <li>The count reaches zero due to invocations of the\n", "     * {@link #countDown} method; or\n", "     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n", "     * the current thread; or\n", "     * <li>The specified waiting time elapses.\n", "     * </ul>\n", "     *\n", "     * <p>If the count reaches zero then the method returns with the\n", "     * value {@code true}.\n", "     *\n", "     * <p>If the current thread:\n", "     * <ul>\n", "     * <li>has its interrupted status set on entry to this method; or\n", "     * <li>is {@linkplain Thread#interrupt interrupted} while waiting,\n", "     * </ul>\n", "     * then {@link InterruptedException} is thrown and the current thread's\n", "     * interrupted status is cleared.\n", "     *\n", "     * <p>If the specified waiting time elapses then the value {@code false}\n", "     * is returned.  If the time is less than or equal to zero, the method\n", "     * will not wait at all.\n", "     *\n", "     * @param timeout the maximum time to wait\n", "     * @param unit the time unit of the {@code timeout} argument\n", "     * @return {@code true} if the count reached zero and {@code false} if the waiting time elapsed before the count\n", "     * reached zero\n", "     * @throws InterruptedException if the current thread is interrupted while waiting\n", "     */\n", "    public boolean await(long timeout, TimeUnit unit)\n", "        throws InterruptedException {\n", "        return sync.tryAcquireSharedNanos(1, unit.toNanos(timeout));\n", "    }\n", "\n", "    /**\n", "     * Decrements the count of the latch, releasing all waiting threads if\n", "     * the count reaches zero.\n", "     *\n", "     * <p>If the current count is greater than zero then it is decremented.\n", "     * If the new count is zero then all waiting threads are re-enabled for\n", "     * thread scheduling purposes.\n", "     *\n", "     * <p>If the current count equals zero then nothing happens.\n", "     */\n", "    public void countDown() {\n", "        sync.releaseShared(1);\n", "    }\n", "\n", "    /**\n", "     * Returns the current count.\n", "     *\n", "     * <p>This method is typically used for debugging and testing purposes.\n", "     *\n", "     * @return the current count\n", "     */\n", "    public long getCount() {\n", "        return sync.getCount();\n", "    }\n", "\n", "    public void reset() {\n", "        sync.reset();\n", "    }\n", "\n", "    /**\n", "     * Returns a string identifying this latch, as well as its state.\n", "     * The state, in brackets, includes the String {@code \"Count =\"}\n", "     * followed by the current count.\n", "     *\n", "     * @return a string identifying this latch, as well as its state\n", "     */\n", "    public String toString() {\n", "        return super.toString() + \"[Count = \" + sync.getCount() + \"]\";\n", "    }\n", "\n", "    /**\n", "     * Synchronization control For CountDownLatch2.\n", "     * Uses AQS state to represent count.\n", "     */\n", "    private static final class Sync extends AbstractQueuedSynchronizer {\n", "        private static final long serialVersionUID = 4982264981922014374L;\n", "\n", "        private final int startCount;\n", "\n", "        Sync(int count) {\n", "            this.startCount = count;\n", "            setState(count);\n", "        }\n", "\n", "        int getCount() {\n", "            return getState();\n", "        }\n", "\n", "        protected int tryAcquireShared(int acquires) {\n", "            return (getState() == 0) ? 1 : -1;\n", "        }\n", "\n", "        protected boolean tryReleaseShared(int releases) {\n", "            // Decrement count; signal when transition to zero\n", "            for (; ; ) {\n", "                int c = getState();\n", "                if (c == 0)\n", "                    return false;\n", "                int nextc = c - 1;\n", "                if (compareAndSetState(c, nextc))\n", "                    return nextc == 0;\n", "            }\n", "        }\n", "\n", "        protected void reset() {\n", "            setState(startCount);\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " *  Unless required by applicable law or agreed to in writing, software\n", " *  distributed under the License is distributed on an \"AS IS\" BASIS,\n", " *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " *  See the License for the specific language governing permissions and\n", " *  limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common;\n", "\n", "import org.junit.Test;\n", "\n", "import java.util.concurrent.TimeUnit;\n", "\n", "import static org.hamcrest.core.Is.is;\n", "import static org.hamcrest.core.StringContains.containsString;\n", "import static org.junit.Assert.assertEquals;\n", "import static org.junit.Assert.assertFalse;\n", "import static org.junit.Assert.assertThat;\n", "import static org.junit.Assert.assertTrue;\n", "\n", "/**\n", " * CountDownLatch2 Unit Test\n", " *\n", " * @see CountDownLatch2\n", " */\n", "public class CountDownLatch2Test {\n", "\n", "    /**\n", "     * test constructor with invalid init param\n", "     *\n", "     * @see CountDownLatch2#CountDownLatch2(int)\n", "     */\n", "    @Test\n", "    public void testConstructorError() {\n", "        int count = -1;\n", "        try {\n", "            CountDownLatch2 latch = new CountDownLatch2(count);\n", "        } catch (IllegalArgumentException e) {\n", "            assertThat(e.getMessage(), is(\"count < 0\"));\n", "        }\n", "    }\n", "\n", "    /**\n", "     * test constructor with valid init param\n", "     *\n", "     * @see CountDownLatch2#CountDownLatch2(int)\n", "     */\n", "    @Test\n", "    public void testConstructor() {\n", "        int count = 10;\n", "        CountDownLatch2 latch = new CountDownLatch2(count);\n", "        assertEquals(\"Expected equal\", count, latch.getCount());\n", "        assertThat(\"Expected contain\", latch.toString(), containsString(\"[Count = \" + count + \"]\"));\n", "    }\n", "\n", "    /**\n", "     * test await timeout\n", "     *\n", "     * @see CountDownLatch2#await(long, TimeUnit)\n", "     */\n", "    @Test\n", "    public void testAwaitTimeout() throws InterruptedException {\n", "        int count = 1;\n", "        CountDownLatch2 latch = new CountDownLatch2(count);\n", "        boolean await = latch.await(10, TimeUnit.MILLISECONDS);\n", "        assertFalse(\"Expected false\", await);\n", "\n", "        latch.countDown();\n", "        boolean await2 = latch.await(10, TimeUnit.MILLISECONDS);\n", "        assertTrue(\"Expected true\", await2);\n", "    }\n", "\n", "\n", "    /**\n", "     * test reset\n", "     *\n", "     * @see CountDownLatch2#countDown()\n", "     */\n", "    @Test(timeout = 1000)\n", "    public void testCountDownAndGetCount() throws InterruptedException {\n", "        int count = 2;\n", "        CountDownLatch2 latch = new CountDownLatch2(count);\n", "        assertEquals(\"Expected equal\", count, latch.getCount());\n", "        latch.countDown();\n", "        assertEquals(\"Expected equal\", count - 1, latch.getCount());\n", "        latch.countDown();\n", "        latch.await();\n", "        assertEquals(\"Expected equal\", 0, latch.getCount());\n", "    }\n", "\n", "\n", "    /**\n", "     * test reset\n", "     *\n", "     * @see CountDownLatch2#reset()\n", "     */\n", "    @Test\n", "    public void testReset() throws InterruptedException {\n", "        int count = 2;\n", "        CountDownLatch2 latch = new CountDownLatch2(count);\n", "        latch.countDown();\n", "        assertEquals(\"Expected equal\", count - 1, latch.getCount());\n", "        latch.reset();\n", "        assertEquals(\"Expected equal\", count, latch.getCount());\n", "        latch.countDown();\n", "        latch.countDown();\n", "        latch.await();\n", "        assertEquals(\"Expected equal\", 0, latch.getCount());\n", "        // coverage Sync#tryReleaseShared, c==0\n", "        latch.countDown();\n", "        assertEquals(\"Expected equal\", 0, latch.getCount());\n", "    }\n", "}\n"], "method_lines_dic": {"CountDownLatch2::::await()": [68, 70], "CountDownLatch2::::await(long,java.util.concurrent.TimeUnit)": [112, 115], "CountDownLatch2::::countDown()": [127, 129], "CountDownLatch2::::getCount()": [138, 140], "CountDownLatch2::::reset()": [142, 144], "CountDownLatch2::::toString()": [153, 155], "CountDownLatch2.Sync::::getCount()": [171, 173], "CountDownLatch2.Sync::::tryAcquireShared(int)": [175, 177], "CountDownLatch2.Sync::::tryReleaseShared(int)": [179, 189], "CountDownLatch2.Sync::::reset()": [191, 193]}, "test_method_lines_dic": {"CountDownLatch2Test::::testConstructorError()": [43, 51], "CountDownLatch2Test::::testConstructor()": [58, 64], "CountDownLatch2Test::::testAwaitTimeout()": [71, 81], "CountDownLatch2Test::::testCountDownAndGetCount()": [89, 99], "CountDownLatch2Test::::testReset()": [107, 122]}, "reverse_method_lines_dic": {"68": "CountDownLatch2::::await()", "69": "CountDownLatch2::::await()", "70": "CountDownLatch2::::await()", "112": "CountDownLatch2::::await(long,java.util.concurrent.TimeUnit)", "113": "CountDownLatch2::::await(long,java.util.concurrent.TimeUnit)", "114": "CountDownLatch2::::await(long,java.util.concurrent.TimeUnit)", "115": "CountDownLatch2::::await(long,java.util.concurrent.TimeUnit)", "127": "CountDownLatch2::::countDown()", "128": "CountDownLatch2::::countDown()", "129": "CountDownLatch2::::countDown()", "138": "CountDownLatch2::::getCount()", "139": "CountDownLatch2::::getCount()", "140": "CountDownLatch2::::getCount()", "142": "CountDownLatch2::::reset()", "143": "CountDownLatch2::::reset()", "144": "CountDownLatch2::::reset()", "153": "CountDownLatch2::::toString()", "154": "CountDownLatch2::::toString()", "155": "CountDownLatch2::::toString()", "171": "CountDownLatch2.Sync::::getCount()", "172": "CountDownLatch2.Sync::::getCount()", "173": "CountDownLatch2.Sync::::getCount()", "175": "CountDownLatch2.Sync::::tryAcquireShared(int)", "176": "CountDownLatch2.Sync::::tryAcquireShared(int)", "177": "CountDownLatch2.Sync::::tryAcquireShared(int)", "179": "CountDownLatch2.Sync::::tryReleaseShared(int)", "180": "CountDownLatch2.Sync::::tryReleaseShared(int)", "181": "CountDownLatch2.Sync::::tryReleaseShared(int)", "182": "CountDownLatch2.Sync::::tryReleaseShared(int)", "183": "CountDownLatch2.Sync::::tryReleaseShared(int)", "184": "CountDownLatch2.Sync::::tryReleaseShared(int)", "185": "CountDownLatch2.Sync::::tryReleaseShared(int)", "186": "CountDownLatch2.Sync::::tryReleaseShared(int)", "187": "CountDownLatch2.Sync::::tryReleaseShared(int)", "188": "CountDownLatch2.Sync::::tryReleaseShared(int)", "189": "CountDownLatch2.Sync::::tryReleaseShared(int)", "191": "CountDownLatch2.Sync::::reset()", "192": "CountDownLatch2.Sync::::reset()", "193": "CountDownLatch2.Sync::::reset()"}, "test_reverse_method_lines_dic": {"43": "CountDownLatch2Test::::testConstructorError()", "44": "CountDownLatch2Test::::testConstructorError()", "45": "CountDownLatch2Test::::testConstructorError()", "46": "CountDownLatch2Test::::testConstructorError()", "47": "CountDownLatch2Test::::testConstructorError()", "48": "CountDownLatch2Test::::testConstructorError()", "49": "CountDownLatch2Test::::testConstructorError()", "50": "CountDownLatch2Test::::testConstructorError()", "51": "CountDownLatch2Test::::testConstructorError()", "58": "CountDownLatch2Test::::testConstructor()", "59": "CountDownLatch2Test::::testConstructor()", "60": "CountDownLatch2Test::::testConstructor()", "61": "CountDownLatch2Test::::testConstructor()", "62": "CountDownLatch2Test::::testConstructor()", "63": "CountDownLatch2Test::::testConstructor()", "64": "CountDownLatch2Test::::testConstructor()", "71": "CountDownLatch2Test::::testAwaitTimeout()", "72": "CountDownLatch2Test::::testAwaitTimeout()", "73": "CountDownLatch2Test::::testAwaitTimeout()", "74": "CountDownLatch2Test::::testAwaitTimeout()", "75": "CountDownLatch2Test::::testAwaitTimeout()", "76": "CountDownLatch2Test::::testAwaitTimeout()", "77": "CountDownLatch2Test::::testAwaitTimeout()", "78": "CountDownLatch2Test::::testAwaitTimeout()", "79": "CountDownLatch2Test::::testAwaitTimeout()", "80": "CountDownLatch2Test::::testAwaitTimeout()", "81": "CountDownLatch2Test::::testAwaitTimeout()", "89": "CountDownLatch2Test::::testCountDownAndGetCount()", "90": "CountDownLatch2Test::::testCountDownAndGetCount()", "91": "CountDownLatch2Test::::testCountDownAndGetCount()", "92": "CountDownLatch2Test::::testCountDownAndGetCount()", "93": "CountDownLatch2Test::::testCountDownAndGetCount()", "94": "CountDownLatch2Test::::testCountDownAndGetCount()", "95": "CountDownLatch2Test::::testCountDownAndGetCount()", "96": "CountDownLatch2Test::::testCountDownAndGetCount()", "97": "CountDownLatch2Test::::testCountDownAndGetCount()", "98": "CountDownLatch2Test::::testCountDownAndGetCount()", "99": "CountDownLatch2Test::::testCountDownAndGetCount()", "107": "CountDownLatch2Test::::testReset()", "108": "CountDownLatch2Test::::testReset()", "109": "CountDownLatch2Test::::testReset()", "110": "CountDownLatch2Test::::testReset()", "111": "CountDownLatch2Test::::testReset()", "112": "CountDownLatch2Test::::testReset()", "113": "CountDownLatch2Test::::testReset()", "114": "CountDownLatch2Test::::testReset()", "115": "CountDownLatch2Test::::testReset()", "116": "CountDownLatch2Test::::testReset()", "117": "CountDownLatch2Test::::testReset()", "118": "CountDownLatch2Test::::testReset()", "119": "CountDownLatch2Test::::testReset()", "120": "CountDownLatch2Test::::testReset()", "121": "CountDownLatch2Test::::testReset()", "122": "CountDownLatch2Test::::testReset()"}, "tests": [{"test_lines": [43, 51], "covered_lines": [36, 37, 38]}, {"test_lines": [58, 64], "covered_lines": [36, 37, 39, 40, 139, 154, 166, 167, 168, 169, 172]}, {"test_lines": [71, 81], "covered_lines": [36, 37, 39, 40, 114, 128, 129, 166, 167, 168, 169, 176, 182, 183, 185, 186, 187]}, {"test_lines": [89, 99], "covered_lines": [36, 37, 39, 40, 69, 70, 128, 129, 139, 166, 167, 168, 169, 172, 176, 182, 183, 185, 186, 187]}, {"test_lines": [107, 122], "covered_lines": [36, 37, 39, 40, 69, 70, 128, 129, 139, 143, 144, 166, 167, 168, 169, 172, 176, 182, 183, 184, 185, 186, 187, 192, 193]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/MixAll.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.File;\n", "import java.io.FileInputStream;\n", "import java.io.FileWriter;\n", "import java.io.IOException;\n", "import java.io.InputStream;\n", "import java.lang.annotation.Annotation;\n", "import java.lang.reflect.Field;\n", "import java.lang.reflect.Method;\n", "import java.lang.reflect.Modifier;\n", "import java.net.Inet6Address;\n", "import java.net.InetAddress;\n", "import java.net.NetworkInterface;\n", "import java.net.SocketException;\n", "import java.net.URL;\n", "import java.net.URLConnection;\n", "import java.util.ArrayList;\n", "import java.util.Enumeration;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.Properties;\n", "import java.util.concurrent.atomic.AtomicLong;\n", "import org.apache.rocketmq.common.annotation.ImportantField;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.common.help.FAQUrl;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "\n", "public class MixAll {\n", "    public static final String ROCKETMQ_HOME_ENV = \"ROCKETMQ_HOME\";\n", "    public static final String ROCKETMQ_HOME_PROPERTY = \"rocketmq.home.dir\";\n", "    public static final String NAMESRV_ADDR_ENV = \"NAMESRV_ADDR\";\n", "    public static final String NAMESRV_ADDR_PROPERTY = \"rocketmq.namesrv.addr\";\n", "    public static final String MESSAGE_COMPRESS_LEVEL = \"rocketmq.message.compressLevel\";\n", "    public static final String DEFAULT_NAMESRV_ADDR_LOOKUP = \"jmenv.tbsite.net\";\n", "    public static final String WS_DOMAIN_NAME = System.getProperty(\"rocketmq.namesrv.domain\", DEFAULT_NAMESRV_ADDR_LOOKUP);\n", "    public static final String WS_DOMAIN_SUBGROUP = System.getProperty(\"rocketmq.namesrv.domain.subgroup\", \"nsaddr\");\n", "    //http://jmenv.tbsite.net:8080/rocketmq/nsaddr\n", "    //public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/\" + WS_DOMAIN_SUBGROUP;\n", "    public static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER\";\n", "    public static final String DEFAULT_CONSUMER_GROUP = \"DEFAULT_CONSUMER\";\n", "    public static final String TOOLS_CONSUMER_GROUP = \"TOOLS_CONSUMER\";\n", "    public static final String FILTERSRV_CONSUMER_GROUP = \"FILTERSRV_CONSUMER\";\n", "    public static final String MONITOR_CONSUMER_GROUP = \"__MONITOR_CONSUMER\";\n", "    public static final String CLIENT_INNER_PRODUCER_GROUP = \"CLIENT_INNER_PRODUCER\";\n", "    public static final String SELF_TEST_PRODUCER_GROUP = \"SELF_TEST_P_GROUP\";\n", "    public static final String SELF_TEST_CONSUMER_GROUP = \"SELF_TEST_C_GROUP\";\n", "    public static final String ONS_HTTP_PROXY_GROUP = \"CID_ONS-HTTP-PROXY\";\n", "    public static final String CID_ONSAPI_PERMISSION_GROUP = \"CID_ONSAPI_PERMISSION\";\n", "    public static final String CID_ONSAPI_OWNER_GROUP = \"CID_ONSAPI_OWNER\";\n", "    public static final String CID_ONSAPI_PULL_GROUP = \"CID_ONSAPI_PULL\";\n", "    public static final String CID_RMQ_SYS_PREFIX = \"CID_RMQ_SYS_\";\n", "    public static final List<String> LOCAL_INET_ADDRESS = getLocalInetAddress();\n", "    public static final String LOCALHOST = localhost();\n", "    public static final String DEFAULT_CHARSET = \"UTF-8\";\n", "    public static final long MASTER_ID = 0L;\n", "    public static final long CURRENT_JVM_PID = getPID();\n", "    public static final String RETRY_GROUP_TOPIC_PREFIX = \"%RETRY%\";\n", "    public static final String DLQ_GROUP_TOPIC_PREFIX = \"%DLQ%\";\n", "    public static final String REPLY_TOPIC_POSTFIX = \"REPLY_TOPIC\";\n", "    public static final String UNIQUE_MSG_QUERY_FLAG = \"_UNIQUE_KEY_QUERY\";\n", "    public static final String DEFAULT_TRACE_REGION_ID = \"DefaultRegion\";\n", "    public static final String CONSUME_CONTEXT_TYPE = \"ConsumeContextType\";\n", "    public static final String CID_SYS_RMQ_TRANS = \"CID_RMQ_SYS_TRANS\";\n", "    public static final String ACL_CONF_TOOLS_FILE = \"/conf/tools.yml\";\n", "    public static final String REPLY_MESSAGE_FLAG = \"reply\";\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n", "\n", "    public static String getWSAddr() {\n", "        String wsDomainName = System.getProperty(\"rocketmq.namesrv.domain\", DEFAULT_NAMESRV_ADDR_LOOKUP);\n", "        String wsDomainSubgroup = System.getProperty(\"rocketmq.namesrv.domain.subgroup\", \"nsaddr\");\n", "        String wsAddr = \"http://\" + wsDomainName + \":8080/rocketmq/\" + wsDomainSubgroup;\n", "        if (wsDomainName.indexOf(\":\") > 0) {\n", "            wsAddr = \"http://\" + wsDomainName + \"/rocketmq/\" + wsDomainSubgroup;\n", "        }\n", "        return wsAddr;\n", "    }\n", "\n", "    public static String getRetryTopic(final String consumerGroup) {\n", "        return RETRY_GROUP_TOPIC_PREFIX + consumerGroup;\n", "    }\n", "\n", "    public static String getReplyTopic(final String clusterName) {\n", "        return clusterName + \"_\" + REPLY_TOPIC_POSTFIX;\n", "    }\n", "\n", "    public static boolean isSysConsumerGroup(final String consumerGroup) {\n", "        return consumerGroup.startsWith(CID_RMQ_SYS_PREFIX);\n", "    }\n", "\n", "    public static String getDLQTopic(final String consumerGroup) {\n", "        return DLQ_GROUP_TOPIC_PREFIX + consumerGroup;\n", "    }\n", "\n", "    public static String brokerVIPChannel(final boolean isChange, final String brokerAddr) {\n", "        if (isChange) {\n", "            int split = brokerAddr.lastIndexOf(\":\");\n", "            String ip = brokerAddr.substring(0, split);\n", "            String port = brokerAddr.substring(split + 1);\n", "            String brokerAddrNew = ip + \":\" + (Integer.parseInt(port) - 2);\n", "            return brokerAddrNew;\n", "        } else {\n", "            return brokerAddr;\n", "        }\n", "    }\n", "\n", "    public static long getPID() {\n", "        String processName = java.lang.management.ManagementFactory.getRuntimeMXBean().getName();\n", "        if (processName != null && processName.length() > 0) {\n", "            try {\n", "                return Long.parseLong(processName.split(\"@\")[0]);\n", "            } catch (Exception e) {\n", "                return 0;\n", "            }\n", "        }\n", "\n", "        return 0;\n", "    }\n", "\n", "    public static void string2File(final String str, final String fileName) throws IOException {\n", "\n", "        String tmpFile = fileName + \".tmp\";\n", "        string2FileNotSafe(str, tmpFile);\n", "\n", "        String bakFile = fileName + \".bak\";\n", "        String prevContent = file2String(fileName);\n", "        if (prevContent != null) {\n", "            string2FileNotSafe(prevContent, bakFile);\n", "        }\n", "\n", "        File file = new File(fileName);\n", "        file.delete();\n", "\n", "        file = new File(tmpFile);\n", "        file.renameTo(new File(fileName));\n", "    }\n", "\n", "    public static void string2FileNotSafe(final String str, final String fileName) throws IOException {\n", "        File file = new File(fileName);\n", "        File fileParent = file.getParentFile();\n", "        if (fileParent != null) {\n", "            fileParent.mkdirs();\n", "        }\n", "        FileWriter fileWriter = null;\n", "\n", "        try {\n", "            fileWriter = new FileWriter(file);\n", "            fileWriter.write(str);\n", "        } catch (IOException e) {\n", "            throw e;\n", "        } finally {\n", "            if (fileWriter != null) {\n", "                fileWriter.close();\n", "            }\n", "        }\n", "    }\n", "\n", "    public static String file2String(final String fileName) throws IOException {\n", "        File file = new File(fileName);\n", "        return file2String(file);\n", "    }\n", "\n", "    public static String file2String(final File file) throws IOException {\n", "        if (file.exists()) {\n", "            byte[] data = new byte[(int) file.length()];\n", "            boolean result;\n", "\n", "            FileInputStream inputStream = null;\n", "            try {\n", "                inputStream = new FileInputStream(file);\n", "                int len = inputStream.read(data);\n", "                result = len == data.length;\n", "            } finally {\n", "                if (inputStream != null) {\n", "                    inputStream.close();\n", "                }\n", "            }\n", "\n", "            if (result) {\n", "                return new String(data);\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    public static String file2String(final URL url) {\n", "        InputStream in = null;\n", "        try {\n", "            URLConnection urlConnection = url.openConnection();\n", "            urlConnection.setUseCaches(false);\n", "            in = urlConnection.getInputStream();\n", "            int len = in.available();\n", "            byte[] data = new byte[len];\n", "            in.read(data, 0, len);\n", "            return new String(data, \"UTF-8\");\n", "        } catch (Exception ignored) {\n", "        } finally {\n", "            if (null != in) {\n", "                try {\n", "                    in.close();\n", "                } catch (IOException ignored) {\n", "                }\n", "            }\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    public static void printObjectProperties(final InternalLogger logger, final Object object) {\n", "        printObjectProperties(logger, object, false);\n", "    }\n", "\n", "    public static void printObjectProperties(final InternalLogger logger, final Object object,\n", "        final boolean onlyImportantField) {\n", "        Field[] fields = object.getClass().getDeclaredFields();\n", "        for (Field field : fields) {\n", "            if (!Modifier.isStatic(field.getModifiers())) {\n", "                String name = field.getName();\n", "                if (!name.startsWith(\"this\")) {\n", "                    Object value = null;\n", "                    try {\n", "                        field.setAccessible(true);\n", "                        value = field.get(object);\n", "                        if (null == value) {\n", "                            value = \"\";\n", "                        }\n", "                    } catch (IllegalAccessException e) {\n", "                        log.error(\"Failed to obtain object properties\", e);\n", "                    }\n", "\n", "                    if (onlyImportantField) {\n", "                        Annotation annotation = field.getAnnotation(ImportantField.class);\n", "                        if (null == annotation) {\n", "                            continue;\n", "                        }\n", "                    }\n", "\n", "                    if (logger != null) {\n", "                        logger.info(name + \"=\" + value);\n", "                    } else {\n", "                    }\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    public static String properties2String(final Properties properties) {\n", "        StringBuilder sb = new StringBuilder();\n", "        for (Map.Entry<Object, Object> entry : properties.entrySet()) {\n", "            if (entry.getValue() != null) {\n", "                sb.append(entry.getKey().toString() + \"=\" + entry.getValue().toString() + \"\\n\");\n", "            }\n", "        }\n", "        return sb.toString();\n", "    }\n", "\n", "    public static Properties string2Properties(final String str) {\n", "        Properties properties = new Properties();\n", "        try {\n", "            InputStream in = new ByteArrayInputStream(str.getBytes(DEFAULT_CHARSET));\n", "            properties.load(in);\n", "        } catch (Exception e) {\n", "            log.error(\"Failed to handle properties\", e);\n", "            return null;\n", "        }\n", "\n", "        return properties;\n", "    }\n", "\n", "    public static Properties object2Properties(final Object object) {\n", "        Properties properties = new Properties();\n", "\n", "        Field[] fields = object.getClass().getDeclaredFields();\n", "        for (Field field : fields) {\n", "            if (!Modifier.isStatic(field.getModifiers())) {\n", "                String name = field.getName();\n", "                if (!name.startsWith(\"this\")) {\n", "                    Object value = null;\n", "                    try {\n", "                        field.setAccessible(true);\n", "                        value = field.get(object);\n", "                    } catch (IllegalAccessException e) {\n", "                        log.error(\"Failed to handle properties\", e);\n", "                    }\n", "\n", "                    if (value != null) {\n", "                        properties.setProperty(name, value.toString());\n", "                    }\n", "                }\n", "            }\n", "        }\n", "\n", "        return properties;\n", "    }\n", "\n", "    public static void properties2Object(final Properties p, final Object object) {\n", "        Method[] methods = object.getClass().getMethods();\n", "        for (Method method : methods) {\n", "            String mn = method.getName();\n", "            if (mn.startsWith(\"set\")) {\n", "                try {\n", "                    String tmp = mn.substring(4);\n", "                    String first = mn.substring(3, 4);\n", "\n", "                    String key = first.toLowerCase() + tmp;\n", "                    String property = p.getProperty(key);\n", "                    if (property != null) {\n", "                        Class<?>[] pt = method.getParameterTypes();\n", "                        if (pt != null && pt.length > 0) {\n", "                            String cn = pt[0].getSimpleName();\n", "                            Object arg = null;\n", "                            if (cn.equals(\"int\") || cn.equals(\"Integer\")) {\n", "                                arg = Integer.parseInt(property);\n", "                            } else if (cn.equals(\"long\") || cn.equals(\"Long\")) {\n", "                                arg = Long.parseLong(property);\n", "                            } else if (cn.equals(\"double\") || cn.equals(\"Double\")) {\n", "                                arg = Double.parseDouble(property);\n", "                            } else if (cn.equals(\"boolean\") || cn.equals(\"Boolean\")) {\n", "                                arg = Boolean.parseBoolean(property);\n", "                            } else if (cn.equals(\"float\") || cn.equals(\"Float\")) {\n", "                                arg = Float.parseFloat(property);\n", "                            } else if (cn.equals(\"String\")) {\n", "                                arg = property;\n", "                            } else {\n", "                                continue;\n", "                            }\n", "                            method.invoke(object, arg);\n", "                        }\n", "                    }\n", "                } catch (Throwable ignored) {\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    public static boolean isPropertiesEqual(final Properties p1, final Properties p2) {\n", "        return p1.equals(p2);\n", "    }\n", "\n", "    public static List<String> getLocalInetAddress() {\n", "        List<String> inetAddressList = new ArrayList<String>();\n", "        try {\n", "            Enumeration<NetworkInterface> enumeration = NetworkInterface.getNetworkInterfaces();\n", "            while (enumeration.hasMoreElements()) {\n", "                NetworkInterface networkInterface = enumeration.nextElement();\n", "                Enumeration<InetAddress> addrs = networkInterface.getInetAddresses();\n", "                while (addrs.hasMoreElements()) {\n", "                    inetAddressList.add(addrs.nextElement().getHostAddress());\n", "                }\n", "            }\n", "        } catch (SocketException e) {\n", "            throw new RuntimeException(\"get local inet address fail\", e);\n", "        }\n", "\n", "        return inetAddressList;\n", "    }\n", "\n", "    private static String localhost() {\n", "        try {\n", "            return InetAddress.getLocalHost().getHostAddress();\n", "        } catch (Throwable e) {\n", "            try {\n", "                String candidatesHost = getLocalhostByNetworkInterface();\n", "                if (candidatesHost != null)\n", "                    return candidatesHost;\n", "\n", "            } catch (Exception ignored) {\n", "            }\n", "\n", "            throw new RuntimeException(\"InetAddress java.net.InetAddress.getLocalHost() throws UnknownHostException\" + FAQUrl.suggestTodo(FAQUrl.UNKNOWN_HOST_EXCEPTION), e);\n", "        }\n", "    }\n", "\n", "    //Reverse logic comparing to RemotingUtil method, consider refactor in RocketMQ 5.0\n", "    public static String getLocalhostByNetworkInterface() throws SocketException {\n", "        List<String> candidatesHost = new ArrayList<String>();\n", "        Enumeration<NetworkInterface> enumeration = NetworkInterface.getNetworkInterfaces();\n", "\n", "        while (enumeration.hasMoreElements()) {\n", "            NetworkInterface networkInterface = enumeration.nextElement();\n", "            // Workaround for docker0 bridge\n", "            if (\"docker0\".equals(networkInterface.getName()) || !networkInterface.isUp()) {\n", "                continue;\n", "            }\n", "            Enumeration<InetAddress> addrs = networkInterface.getInetAddresses();\n", "            while (addrs.hasMoreElements()) {\n", "                InetAddress address = addrs.nextElement();\n", "                if (address.isLoopbackAddress()) {\n", "                    continue;\n", "                }\n", "                //ip4 higher priority\n", "                if (address instanceof Inet6Address) {\n", "                    candidatesHost.add(address.getHostAddress());\n", "                    continue;\n", "                }\n", "                return address.getHostAddress();\n", "            }\n", "        }\n", "\n", "        if (!candidatesHost.isEmpty()) {\n", "            return candidatesHost.get(0);\n", "        }\n", "        return null;\n", "    }\n", "\n", "    public static boolean compareAndIncreaseOnly(final AtomicLong target, final long value) {\n", "        long prev = target.get();\n", "        while (value > prev) {\n", "            boolean updated = target.compareAndSet(prev, value);\n", "            if (updated)\n", "                return true;\n", "\n", "            prev = target.get();\n", "        }\n", "\n", "        return false;\n", "    }\n", "\n", "    public static String humanReadableByteCount(long bytes, boolean si) {\n", "        int unit = si ? 1000 : 1024;\n", "        if (bytes < unit)\n", "            return bytes + \" B\";\n", "        int exp = (int) (Math.log(bytes) / Math.log(unit));\n", "        String pre = (si ? \"kMGTPE\" : \"KMGTPE\").charAt(exp - 1) + (si ? \"\" : \"i\");\n", "        return String.format(\"%.1f %sB\", bytes / Math.pow(unit, exp), pre);\n", "    }\n", "\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common;\n", "\n", "import java.io.File;\n", "import java.io.IOException;\n", "import java.io.PrintWriter;\n", "import java.net.InetAddress;\n", "import java.util.List;\n", "import java.util.concurrent.atomic.AtomicLong;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class MixAllTest {\n", "    @Test\n", "    public void testGetLocalInetAddress() throws Exception {\n", "        List<String> localInetAddress = MixAll.getLocalInetAddress();\n", "        String local = InetAddress.getLocalHost().getHostAddress();\n", "        assertThat(localInetAddress).contains(\"127.0.0.1\");\n", "        assertThat(local).isNotNull();\n", "    }\n", "\n", "    @Test\n", "    public void testBrokerVIPChannel() {\n", "        assertThat(MixAll.brokerVIPChannel(true, \"127.0.0.1:10911\")).isEqualTo(\"127.0.0.1:10909\");\n", "    }\n", "\n", "    @Test\n", "    public void testCompareAndIncreaseOnly() {\n", "        AtomicLong target = new AtomicLong(5);\n", "        assertThat(MixAll.compareAndIncreaseOnly(target, 6)).isTrue();\n", "        assertThat(target.get()).isEqualTo(6);\n", "\n", "        assertThat(MixAll.compareAndIncreaseOnly(target, 4)).isFalse();\n", "        assertThat(target.get()).isEqualTo(6);\n", "    }\n", "\n", "    @Test\n", "    public void testFile2String() throws IOException {\n", "        String fileName = System.getProperty(\"java.io.tmpdir\") + File.separator + \"MixAllTest\" + System.currentTimeMillis();\n", "        File file = new File(fileName);\n", "        if (file.exists()) {\n", "            file.delete();\n", "        }\n", "        file.createNewFile();\n", "        PrintWriter out = new PrintWriter(fileName);\n", "        out.write(\"TestForMixAll\");\n", "        out.close();\n", "        String string = MixAll.file2String(fileName);\n", "        assertThat(string).isEqualTo(\"TestForMixAll\");\n", "        file.delete();\n", "    }\n", "\n", "    @Test\n", "    public void testFile2String_WithChinese() throws IOException {\n", "        String fileName = System.getProperty(\"java.io.tmpdir\") + File.separator + \"MixAllTest\" + System.currentTimeMillis();\n", "        File file = new File(fileName);\n", "        if (file.exists()) {\n", "            file.delete();\n", "        }\n", "        file.createNewFile();\n", "        PrintWriter out = new PrintWriter(fileName);\n", "        out.write(\"TestForMixAll_\u4e2d\u6587\");\n", "        out.close();\n", "        String string = MixAll.file2String(fileName);\n", "        assertThat(string).isEqualTo(\"TestForMixAll_\u4e2d\u6587\");\n", "        file.delete();\n", "    }\n", "\n", "    @Test\n", "    public void testString2File() throws IOException {\n", "        String fileName = System.getProperty(\"java.io.tmpdir\") + File.separator + \"MixAllTest\" + System.currentTimeMillis();\n", "        MixAll.string2File(\"MixAll_testString2File\", fileName);\n", "        assertThat(MixAll.file2String(fileName)).isEqualTo(\"MixAll_testString2File\");\n", "    }\n", "\n", "    @Test\n", "    public void testGetLocalhostByNetworkInterface() throws Exception {\n", "        assertThat(MixAll.LOCALHOST).isNotNull();\n", "        assertThat(MixAll.getLocalhostByNetworkInterface()).isNotNull();\n", "    }\n", "}\n"], "method_lines_dic": {"MixAll::::getWSAddr()": [87, 95], "MixAll::::getRetryTopic(java.lang.String)": [97, 99], "MixAll::::getReplyTopic(java.lang.String)": [101, 103], "MixAll::::isSysConsumerGroup(java.lang.String)": [105, 107], "MixAll::::getDLQTopic(java.lang.String)": [109, 111], "MixAll::::brokerVIPChannel(boolean,java.lang.String)": [113, 123], "MixAll::::getPID()": [125, 136], "MixAll::::string2File(java.lang.String,java.lang.String)": [138, 154], "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)": [156, 174], "MixAll::::file2String(java.lang.String)": [176, 179], "MixAll::::file2String(java.io.File)": [181, 202], "MixAll::::file2String(java.net.URL)": [204, 225], "MixAll::::properties2String(java.util.Properties)": [265, 273], "MixAll::::string2Properties(java.lang.String)": [275, 286], "MixAll::::object2Properties(java.lang.Object)": [288, 312], "MixAll::::properties2Object(java.util.Properties,java.lang.Object)": [314, 352], "MixAll::::isPropertiesEqual(java.util.Properties,java.util.Properties)": [354, 356], "MixAll::::getLocalInetAddress()": [358, 374], "MixAll::::localhost()": [376, 390], "MixAll::::getLocalhostByNetworkInterface()": [393, 422], "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)": [424, 435], "MixAll::::humanReadableByteCount(long,boolean)": [437, 444]}, "test_method_lines_dic": {"MixAllTest::::testGetLocalInetAddress()": [31, 37], "MixAllTest::::testBrokerVIPChannel()": [39, 42], "MixAllTest::::testCompareAndIncreaseOnly()": [44, 52], "MixAllTest::::testFile2String()": [54, 68], "MixAllTest::::testFile2String_WithChinese()": [70, 84], "MixAllTest::::testString2File()": [86, 91], "MixAllTest::::testGetLocalhostByNetworkInterface()": [93, 97]}, "reverse_method_lines_dic": {"87": "MixAll::::getWSAddr()", "88": "MixAll::::getWSAddr()", "89": "MixAll::::getWSAddr()", "90": "MixAll::::getWSAddr()", "91": "MixAll::::getWSAddr()", "92": "MixAll::::getWSAddr()", "93": "MixAll::::getWSAddr()", "94": "MixAll::::getWSAddr()", "95": "MixAll::::getWSAddr()", "97": "MixAll::::getRetryTopic(java.lang.String)", "98": "MixAll::::getRetryTopic(java.lang.String)", "99": "MixAll::::getRetryTopic(java.lang.String)", "101": "MixAll::::getReplyTopic(java.lang.String)", "102": "MixAll::::getReplyTopic(java.lang.String)", "103": "MixAll::::getReplyTopic(java.lang.String)", "105": "MixAll::::isSysConsumerGroup(java.lang.String)", "106": "MixAll::::isSysConsumerGroup(java.lang.String)", "107": "MixAll::::isSysConsumerGroup(java.lang.String)", "109": "MixAll::::getDLQTopic(java.lang.String)", "110": "MixAll::::getDLQTopic(java.lang.String)", "111": "MixAll::::getDLQTopic(java.lang.String)", "113": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "114": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "115": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "116": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "117": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "118": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "119": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "120": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "121": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "122": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "123": "MixAll::::brokerVIPChannel(boolean,java.lang.String)", "125": "MixAll::::getPID()", "126": "MixAll::::getPID()", "127": "MixAll::::getPID()", "128": "MixAll::::getPID()", "129": "MixAll::::getPID()", "130": "MixAll::::getPID()", "131": "MixAll::::getPID()", "132": "MixAll::::getPID()", "133": "MixAll::::getPID()", "134": "MixAll::::getPID()", "135": "MixAll::::getPID()", "136": "MixAll::::getPID()", "138": "MixAll::::string2File(java.lang.String,java.lang.String)", "139": "MixAll::::string2File(java.lang.String,java.lang.String)", "140": "MixAll::::string2File(java.lang.String,java.lang.String)", "141": "MixAll::::string2File(java.lang.String,java.lang.String)", "142": "MixAll::::string2File(java.lang.String,java.lang.String)", "143": "MixAll::::string2File(java.lang.String,java.lang.String)", "144": "MixAll::::string2File(java.lang.String,java.lang.String)", "145": "MixAll::::string2File(java.lang.String,java.lang.String)", "146": "MixAll::::string2File(java.lang.String,java.lang.String)", "147": "MixAll::::string2File(java.lang.String,java.lang.String)", "148": "MixAll::::string2File(java.lang.String,java.lang.String)", "149": "MixAll::::string2File(java.lang.String,java.lang.String)", "150": "MixAll::::string2File(java.lang.String,java.lang.String)", "151": "MixAll::::string2File(java.lang.String,java.lang.String)", "152": "MixAll::::string2File(java.lang.String,java.lang.String)", "153": "MixAll::::string2File(java.lang.String,java.lang.String)", "154": "MixAll::::string2File(java.lang.String,java.lang.String)", "156": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "157": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "158": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "159": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "160": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "161": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "162": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "163": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "164": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "165": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "166": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "167": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "168": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "169": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "170": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "171": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "172": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "173": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "174": "MixAll::::string2FileNotSafe(java.lang.String,java.lang.String)", "176": "MixAll::::file2String(java.lang.String)", "177": "MixAll::::file2String(java.lang.String)", "178": "MixAll::::file2String(java.lang.String)", "179": "MixAll::::file2String(java.lang.String)", "181": "MixAll::::file2String(java.io.File)", "182": "MixAll::::file2String(java.io.File)", "183": "MixAll::::file2String(java.io.File)", "184": "MixAll::::file2String(java.io.File)", "185": "MixAll::::file2String(java.io.File)", "186": "MixAll::::file2String(java.io.File)", "187": "MixAll::::file2String(java.io.File)", "188": "MixAll::::file2String(java.io.File)", "189": "MixAll::::file2String(java.io.File)", "190": "MixAll::::file2String(java.io.File)", "191": "MixAll::::file2String(java.io.File)", "192": "MixAll::::file2String(java.io.File)", "193": "MixAll::::file2String(java.io.File)", "194": "MixAll::::file2String(java.io.File)", "195": "MixAll::::file2String(java.io.File)", "196": "MixAll::::file2String(java.io.File)", "197": "MixAll::::file2String(java.io.File)", "198": "MixAll::::file2String(java.io.File)", "199": "MixAll::::file2String(java.io.File)", "200": "MixAll::::file2String(java.io.File)", "201": "MixAll::::file2String(java.io.File)", "202": "MixAll::::file2String(java.io.File)", "204": "MixAll::::file2String(java.net.URL)", "205": "MixAll::::file2String(java.net.URL)", "206": "MixAll::::file2String(java.net.URL)", "207": "MixAll::::file2String(java.net.URL)", "208": "MixAll::::file2String(java.net.URL)", "209": "MixAll::::file2String(java.net.URL)", "210": "MixAll::::file2String(java.net.URL)", "211": "MixAll::::file2String(java.net.URL)", "212": "MixAll::::file2String(java.net.URL)", "213": "MixAll::::file2String(java.net.URL)", "214": "MixAll::::file2String(java.net.URL)", "215": "MixAll::::file2String(java.net.URL)", "216": "MixAll::::file2String(java.net.URL)", "217": "MixAll::::file2String(java.net.URL)", "218": "MixAll::::file2String(java.net.URL)", "219": "MixAll::::file2String(java.net.URL)", "220": "MixAll::::file2String(java.net.URL)", "221": "MixAll::::file2String(java.net.URL)", "222": "MixAll::::file2String(java.net.URL)", "223": "MixAll::::file2String(java.net.URL)", "224": "MixAll::::file2String(java.net.URL)", "225": "MixAll::::file2String(java.net.URL)", "265": "MixAll::::properties2String(java.util.Properties)", "266": "MixAll::::properties2String(java.util.Properties)", "267": "MixAll::::properties2String(java.util.Properties)", "268": "MixAll::::properties2String(java.util.Properties)", "269": "MixAll::::properties2String(java.util.Properties)", "270": "MixAll::::properties2String(java.util.Properties)", "271": "MixAll::::properties2String(java.util.Properties)", "272": "MixAll::::properties2String(java.util.Properties)", "273": "MixAll::::properties2String(java.util.Properties)", "275": "MixAll::::string2Properties(java.lang.String)", "276": "MixAll::::string2Properties(java.lang.String)", "277": "MixAll::::string2Properties(java.lang.String)", "278": "MixAll::::string2Properties(java.lang.String)", "279": "MixAll::::string2Properties(java.lang.String)", "280": "MixAll::::string2Properties(java.lang.String)", "281": "MixAll::::string2Properties(java.lang.String)", "282": "MixAll::::string2Properties(java.lang.String)", "283": "MixAll::::string2Properties(java.lang.String)", "284": "MixAll::::string2Properties(java.lang.String)", "285": "MixAll::::string2Properties(java.lang.String)", "286": "MixAll::::string2Properties(java.lang.String)", "288": "MixAll::::object2Properties(java.lang.Object)", "289": "MixAll::::object2Properties(java.lang.Object)", "290": "MixAll::::object2Properties(java.lang.Object)", "291": "MixAll::::object2Properties(java.lang.Object)", "292": "MixAll::::object2Properties(java.lang.Object)", "293": "MixAll::::object2Properties(java.lang.Object)", "294": "MixAll::::object2Properties(java.lang.Object)", "295": "MixAll::::object2Properties(java.lang.Object)", "296": "MixAll::::object2Properties(java.lang.Object)", "297": "MixAll::::object2Properties(java.lang.Object)", "298": "MixAll::::object2Properties(java.lang.Object)", "299": "MixAll::::object2Properties(java.lang.Object)", "300": "MixAll::::object2Properties(java.lang.Object)", "301": "MixAll::::object2Properties(java.lang.Object)", "302": "MixAll::::object2Properties(java.lang.Object)", "303": "MixAll::::object2Properties(java.lang.Object)", "304": "MixAll::::object2Properties(java.lang.Object)", "305": "MixAll::::object2Properties(java.lang.Object)", "306": "MixAll::::object2Properties(java.lang.Object)", "307": "MixAll::::object2Properties(java.lang.Object)", "308": "MixAll::::object2Properties(java.lang.Object)", "309": "MixAll::::object2Properties(java.lang.Object)", "310": "MixAll::::object2Properties(java.lang.Object)", "311": "MixAll::::object2Properties(java.lang.Object)", "312": "MixAll::::object2Properties(java.lang.Object)", "314": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "315": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "316": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "317": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "318": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "319": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "320": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "321": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "322": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "323": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "324": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "325": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "326": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "327": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "328": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "329": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "330": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "331": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "332": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "333": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "334": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "335": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "336": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "337": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "338": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "339": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "340": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "341": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "342": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "343": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "344": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "345": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "346": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "347": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "348": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "349": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "350": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "351": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "352": "MixAll::::properties2Object(java.util.Properties,java.lang.Object)", "354": "MixAll::::isPropertiesEqual(java.util.Properties,java.util.Properties)", "355": "MixAll::::isPropertiesEqual(java.util.Properties,java.util.Properties)", "356": "MixAll::::isPropertiesEqual(java.util.Properties,java.util.Properties)", "358": "MixAll::::getLocalInetAddress()", "359": "MixAll::::getLocalInetAddress()", "360": "MixAll::::getLocalInetAddress()", "361": "MixAll::::getLocalInetAddress()", "362": "MixAll::::getLocalInetAddress()", "363": "MixAll::::getLocalInetAddress()", "364": "MixAll::::getLocalInetAddress()", "365": "MixAll::::getLocalInetAddress()", "366": "MixAll::::getLocalInetAddress()", "367": "MixAll::::getLocalInetAddress()", "368": "MixAll::::getLocalInetAddress()", "369": "MixAll::::getLocalInetAddress()", "370": "MixAll::::getLocalInetAddress()", "371": "MixAll::::getLocalInetAddress()", "372": "MixAll::::getLocalInetAddress()", "373": "MixAll::::getLocalInetAddress()", "374": "MixAll::::getLocalInetAddress()", "376": "MixAll::::localhost()", "377": "MixAll::::localhost()", "378": "MixAll::::localhost()", "379": "MixAll::::localhost()", "380": "MixAll::::localhost()", "381": "MixAll::::localhost()", "382": "MixAll::::localhost()", "383": "MixAll::::localhost()", "384": "MixAll::::localhost()", "385": "MixAll::::localhost()", "386": "MixAll::::localhost()", "387": "MixAll::::localhost()", "388": "MixAll::::localhost()", "389": "MixAll::::localhost()", "390": "MixAll::::localhost()", "393": "MixAll::::getLocalhostByNetworkInterface()", "394": "MixAll::::getLocalhostByNetworkInterface()", "395": "MixAll::::getLocalhostByNetworkInterface()", "396": "MixAll::::getLocalhostByNetworkInterface()", "397": "MixAll::::getLocalhostByNetworkInterface()", "398": "MixAll::::getLocalhostByNetworkInterface()", "399": "MixAll::::getLocalhostByNetworkInterface()", "400": "MixAll::::getLocalhostByNetworkInterface()", "401": "MixAll::::getLocalhostByNetworkInterface()", "402": "MixAll::::getLocalhostByNetworkInterface()", "403": "MixAll::::getLocalhostByNetworkInterface()", "404": "MixAll::::getLocalhostByNetworkInterface()", "405": "MixAll::::getLocalhostByNetworkInterface()", "406": "MixAll::::getLocalhostByNetworkInterface()", "407": "MixAll::::getLocalhostByNetworkInterface()", "408": "MixAll::::getLocalhostByNetworkInterface()", "409": "MixAll::::getLocalhostByNetworkInterface()", "410": "MixAll::::getLocalhostByNetworkInterface()", "411": "MixAll::::getLocalhostByNetworkInterface()", "412": "MixAll::::getLocalhostByNetworkInterface()", "413": "MixAll::::getLocalhostByNetworkInterface()", "414": "MixAll::::getLocalhostByNetworkInterface()", "415": "MixAll::::getLocalhostByNetworkInterface()", "416": "MixAll::::getLocalhostByNetworkInterface()", "417": "MixAll::::getLocalhostByNetworkInterface()", "418": "MixAll::::getLocalhostByNetworkInterface()", "419": "MixAll::::getLocalhostByNetworkInterface()", "420": "MixAll::::getLocalhostByNetworkInterface()", "421": "MixAll::::getLocalhostByNetworkInterface()", "422": "MixAll::::getLocalhostByNetworkInterface()", "424": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "425": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "426": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "427": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "428": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "429": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "430": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "431": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "432": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "433": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "434": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "435": "MixAll::::compareAndIncreaseOnly(java.util.concurrent.atomic.AtomicLong,long)", "437": "MixAll::::humanReadableByteCount(long,boolean)", "438": "MixAll::::humanReadableByteCount(long,boolean)", "439": "MixAll::::humanReadableByteCount(long,boolean)", "440": "MixAll::::humanReadableByteCount(long,boolean)", "441": "MixAll::::humanReadableByteCount(long,boolean)", "442": "MixAll::::humanReadableByteCount(long,boolean)", "443": "MixAll::::humanReadableByteCount(long,boolean)", "444": "MixAll::::humanReadableByteCount(long,boolean)"}, "test_reverse_method_lines_dic": {"31": "MixAllTest::::testGetLocalInetAddress()", "32": "MixAllTest::::testGetLocalInetAddress()", "33": "MixAllTest::::testGetLocalInetAddress()", "34": "MixAllTest::::testGetLocalInetAddress()", "35": "MixAllTest::::testGetLocalInetAddress()", "36": "MixAllTest::::testGetLocalInetAddress()", "37": "MixAllTest::::testGetLocalInetAddress()", "39": "MixAllTest::::testBrokerVIPChannel()", "40": "MixAllTest::::testBrokerVIPChannel()", "41": "MixAllTest::::testBrokerVIPChannel()", "42": "MixAllTest::::testBrokerVIPChannel()", "44": "MixAllTest::::testCompareAndIncreaseOnly()", "45": "MixAllTest::::testCompareAndIncreaseOnly()", "46": "MixAllTest::::testCompareAndIncreaseOnly()", "47": "MixAllTest::::testCompareAndIncreaseOnly()", "48": "MixAllTest::::testCompareAndIncreaseOnly()", "49": "MixAllTest::::testCompareAndIncreaseOnly()", "50": "MixAllTest::::testCompareAndIncreaseOnly()", "51": "MixAllTest::::testCompareAndIncreaseOnly()", "52": "MixAllTest::::testCompareAndIncreaseOnly()", "54": "MixAllTest::::testFile2String()", "55": "MixAllTest::::testFile2String()", "56": "MixAllTest::::testFile2String()", "57": "MixAllTest::::testFile2String()", "58": "MixAllTest::::testFile2String()", "59": "MixAllTest::::testFile2String()", "60": "MixAllTest::::testFile2String()", "61": "MixAllTest::::testFile2String()", "62": "MixAllTest::::testFile2String()", "63": "MixAllTest::::testFile2String()", "64": "MixAllTest::::testFile2String()", "65": "MixAllTest::::testFile2String()", "66": "MixAllTest::::testFile2String()", "67": "MixAllTest::::testFile2String()", "68": "MixAllTest::::testFile2String()", "70": "MixAllTest::::testFile2String_WithChinese()", "71": "MixAllTest::::testFile2String_WithChinese()", "72": "MixAllTest::::testFile2String_WithChinese()", "73": "MixAllTest::::testFile2String_WithChinese()", "74": "MixAllTest::::testFile2String_WithChinese()", "75": "MixAllTest::::testFile2String_WithChinese()", "76": "MixAllTest::::testFile2String_WithChinese()", "77": "MixAllTest::::testFile2String_WithChinese()", "78": "MixAllTest::::testFile2String_WithChinese()", "79": "MixAllTest::::testFile2String_WithChinese()", "80": "MixAllTest::::testFile2String_WithChinese()", "81": "MixAllTest::::testFile2String_WithChinese()", "82": "MixAllTest::::testFile2String_WithChinese()", "83": "MixAllTest::::testFile2String_WithChinese()", "84": "MixAllTest::::testFile2String_WithChinese()", "86": "MixAllTest::::testString2File()", "87": "MixAllTest::::testString2File()", "88": "MixAllTest::::testString2File()", "89": "MixAllTest::::testString2File()", "90": "MixAllTest::::testString2File()", "91": "MixAllTest::::testString2File()", "93": "MixAllTest::::testGetLocalhostByNetworkInterface()", "94": "MixAllTest::::testGetLocalhostByNetworkInterface()", "95": "MixAllTest::::testGetLocalhostByNetworkInterface()", "96": "MixAllTest::::testGetLocalhostByNetworkInterface()", "97": "MixAllTest::::testGetLocalhostByNetworkInterface()"}, "tests": [{"test_lines": [31, 37], "covered_lines": [54, 55, 71, 72, 75, 85, 126, 127, 129, 359, 361, 362, 363, 364, 365, 366, 368, 371, 373, 378]}, {"test_lines": [39, 42], "covered_lines": [54, 55, 71, 72, 75, 85, 114, 115, 116, 117, 118, 119, 126, 127, 129, 359, 361, 362, 363, 364, 365, 366, 368, 371, 373, 378]}, {"test_lines": [44, 52], "covered_lines": [54, 55, 71, 72, 75, 85, 126, 127, 129, 359, 361, 362, 363, 364, 365, 366, 368, 371, 373, 378, 425, 426, 427, 428, 429, 434]}, {"test_lines": [54, 68], "covered_lines": [54, 55, 71, 72, 75, 85, 126, 127, 129, 177, 178, 182, 183, 186, 188, 189, 190, 192, 193, 197, 198, 359, 361, 362, 363, 364, 365, 366, 368, 371, 373, 378]}, {"test_lines": [70, 84], "covered_lines": [54, 55, 71, 72, 75, 85, 126, 127, 129, 177, 178, 182, 183, 186, 188, 189, 190, 192, 193, 197, 198, 359, 361, 362, 363, 364, 365, 366, 368, 371, 373, 378]}, {"test_lines": [86, 91], "covered_lines": [54, 55, 71, 72, 75, 85, 126, 127, 129, 140, 141, 143, 144, 145, 149, 150, 152, 153, 154, 157, 158, 159, 160, 162, 165, 166, 170, 171, 174, 177, 178, 182, 183, 186, 188, 189, 190, 192, 193, 197, 198, 201, 359, 361, 362, 363, 364, 365, 366, 368, 371, 373, 378]}, {"test_lines": [93, 97], "covered_lines": [54, 55, 71, 72, 75, 85, 126, 127, 129, 359, 361, 362, 363, 364, 365, 366, 368, 371, 373, 378, 394, 395, 397, 398, 400, 403, 404, 405, 406, 410, 411, 412, 414]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/MQVersion.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common;\n", "\n", "public class MQVersion {\n", "\n", "    public static final int CURRENT_VERSION = Version.V4_8_0.ordinal();\n", "\n", "    public static String getVersionDesc(int value) {\n", "        int length = Version.values().length;\n", "        if (value >= length) {\n", "            return Version.values()[length - 1].name();\n", "        }\n", "\n", "        return Version.values()[value].name();\n", "    }\n", "\n", "    public static Version value2Version(int value) {\n", "        int length = Version.values().length;\n", "        if (value >= length) {\n", "            return Version.values()[length - 1];\n", "        }\n", "\n", "        return Version.values()[value];\n", "    }\n", "\n", "    public enum Version {\n", "        V3_0_0_SNAPSHOT,\n", "        V3_0_0_ALPHA1,\n", "        V3_0_0_BETA1,\n", "        V3_0_0_BETA2,\n", "        V3_0_0_BETA3,\n", "        V3_0_0_BETA4,\n", "        V3_0_0_BETA5,\n", "        V3_0_0_BETA6_SNAPSHOT,\n", "        V3_0_0_BETA6,\n", "        V3_0_0_BETA7_SNAPSHOT,\n", "        V3_0_0_BETA7,\n", "        V3_0_0_BETA8_SNAPSHOT,\n", "        V3_0_0_BETA8,\n", "        V3_0_0_BETA9_SNAPSHOT,\n", "        V3_0_0_BETA9,\n", "        V3_0_0_FINAL,\n", "        V3_0_1_SNAPSHOT,\n", "        V3_0_1,\n", "        V3_0_2_SNAPSHOT,\n", "        V3_0_2,\n", "        V3_0_3_SNAPSHOT,\n", "        V3_0_3,\n", "        V3_0_4_SNAPSHOT,\n", "        V3_0_4,\n", "        V3_0_5_SNAPSHOT,\n", "        V3_0_5,\n", "        V3_0_6_SNAPSHOT,\n", "        V3_0_6,\n", "        V3_0_7_SNAPSHOT,\n", "        V3_0_7,\n", "        V3_0_8_SNAPSHOT,\n", "        V3_0_8,\n", "        V3_0_9_SNAPSHOT,\n", "        V3_0_9,\n", "\n", "        V3_0_10_SNAPSHOT,\n", "        V3_0_10,\n", "\n", "        V3_0_11_SNAPSHOT,\n", "        V3_0_11,\n", "\n", "        V3_0_12_SNAPSHOT,\n", "        V3_0_12,\n", "\n", "        V3_0_13_SNAPSHOT,\n", "        V3_0_13,\n", "\n", "        V3_0_14_SNAPSHOT,\n", "        V3_0_14,\n", "\n", "        V3_0_15_SNAPSHOT,\n", "        V3_0_15,\n", "\n", "        V3_1_0_SNAPSHOT,\n", "        V3_1_0,\n", "\n", "        V3_1_1_SNAPSHOT,\n", "        V3_1_1,\n", "\n", "        V3_1_2_SNAPSHOT,\n", "        V3_1_2,\n", "\n", "        V3_1_3_SNAPSHOT,\n", "        V3_1_3,\n", "\n", "        V3_1_4_SNAPSHOT,\n", "        V3_1_4,\n", "\n", "        V3_1_5_SNAPSHOT,\n", "        V3_1_5,\n", "\n", "        V3_1_6_SNAPSHOT,\n", "        V3_1_6,\n", "\n", "        V3_1_7_SNAPSHOT,\n", "        V3_1_7,\n", "\n", "        V3_1_8_SNAPSHOT,\n", "        V3_1_8,\n", "\n", "        V3_1_9_SNAPSHOT,\n", "        V3_1_9,\n", "\n", "        V3_2_0_SNAPSHOT,\n", "        V3_2_0,\n", "\n", "        V3_2_1_SNAPSHOT,\n", "        V3_2_1,\n", "\n", "        V3_2_2_SNAPSHOT,\n", "        V3_2_2,\n", "\n", "        V3_2_3_SNAPSHOT,\n", "        V3_2_3,\n", "\n", "        V3_2_4_SNAPSHOT,\n", "        V3_2_4,\n", "\n", "        V3_2_5_SNAPSHOT,\n", "        V3_2_5,\n", "\n", "        V3_2_6_SNAPSHOT,\n", "        V3_2_6,\n", "\n", "        V3_2_7_SNAPSHOT,\n", "        V3_2_7,\n", "\n", "        V3_2_8_SNAPSHOT,\n", "        V3_2_8,\n", "\n", "        V3_2_9_SNAPSHOT,\n", "        V3_2_9,\n", "\n", "        V3_3_1_SNAPSHOT,\n", "        V3_3_1,\n", "\n", "        V3_3_2_SNAPSHOT,\n", "        V3_3_2,\n", "\n", "        V3_3_3_SNAPSHOT,\n", "        V3_3_3,\n", "\n", "        V3_3_4_SNAPSHOT,\n", "        V3_3_4,\n", "\n", "        V3_3_5_SNAPSHOT,\n", "        V3_3_5,\n", "\n", "        V3_3_6_SNAPSHOT,\n", "        V3_3_6,\n", "\n", "        V3_3_7_SNAPSHOT,\n", "        V3_3_7,\n", "\n", "        V3_3_8_SNAPSHOT,\n", "        V3_3_8,\n", "\n", "        V3_3_9_SNAPSHOT,\n", "        V3_3_9,\n", "\n", "        V3_4_1_SNAPSHOT,\n", "        V3_4_1,\n", "\n", "        V3_4_2_SNAPSHOT,\n", "        V3_4_2,\n", "\n", "        V3_4_3_SNAPSHOT,\n", "        V3_4_3,\n", "\n", "        V3_4_4_SNAPSHOT,\n", "        V3_4_4,\n", "\n", "        V3_4_5_SNAPSHOT,\n", "        V3_4_5,\n", "\n", "        V3_4_6_SNAPSHOT,\n", "        V3_4_6,\n", "\n", "        V3_4_7_SNAPSHOT,\n", "        V3_4_7,\n", "\n", "        V3_4_8_SNAPSHOT,\n", "        V3_4_8,\n", "\n", "        V3_4_9_SNAPSHOT,\n", "        V3_4_9,\n", "        V3_5_1_SNAPSHOT,\n", "        V3_5_1,\n", "\n", "        V3_5_2_SNAPSHOT,\n", "        V3_5_2,\n", "\n", "        V3_5_3_SNAPSHOT,\n", "        V3_5_3,\n", "\n", "        V3_5_4_SNAPSHOT,\n", "        V3_5_4,\n", "\n", "        V3_5_5_SNAPSHOT,\n", "        V3_5_5,\n", "\n", "        V3_5_6_SNAPSHOT,\n", "        V3_5_6,\n", "\n", "        V3_5_7_SNAPSHOT,\n", "        V3_5_7,\n", "\n", "        V3_5_8_SNAPSHOT,\n", "        V3_5_8,\n", "\n", "        V3_5_9_SNAPSHOT,\n", "        V3_5_9,\n", "\n", "        V3_6_1_SNAPSHOT,\n", "        V3_6_1,\n", "\n", "        V3_6_2_SNAPSHOT,\n", "        V3_6_2,\n", "\n", "        V3_6_3_SNAPSHOT,\n", "        V3_6_3,\n", "\n", "        V3_6_4_SNAPSHOT,\n", "        V3_6_4,\n", "\n", "        V3_6_5_SNAPSHOT,\n", "        V3_6_5,\n", "\n", "        V3_6_6_SNAPSHOT,\n", "        V3_6_6,\n", "\n", "        V3_6_7_SNAPSHOT,\n", "        V3_6_7,\n", "\n", "        V3_6_8_SNAPSHOT,\n", "        V3_6_8,\n", "\n", "        V3_6_9_SNAPSHOT,\n", "        V3_6_9,\n", "\n", "        V3_7_1_SNAPSHOT,\n", "        V3_7_1,\n", "\n", "        V3_7_2_SNAPSHOT,\n", "        V3_7_2,\n", "\n", "        V3_7_3_SNAPSHOT,\n", "        V3_7_3,\n", "\n", "        V3_7_4_SNAPSHOT,\n", "        V3_7_4,\n", "\n", "        V3_7_5_SNAPSHOT,\n", "        V3_7_5,\n", "\n", "        V3_7_6_SNAPSHOT,\n", "        V3_7_6,\n", "\n", "        V3_7_7_SNAPSHOT,\n", "        V3_7_7,\n", "\n", "        V3_7_8_SNAPSHOT,\n", "        V3_7_8,\n", "\n", "        V3_7_9_SNAPSHOT,\n", "        V3_7_9,\n", "\n", "        V3_8_1_SNAPSHOT,\n", "        V3_8_1,\n", "\n", "        V3_8_2_SNAPSHOT,\n", "        V3_8_2,\n", "\n", "        V3_8_3_SNAPSHOT,\n", "        V3_8_3,\n", "\n", "        V3_8_4_SNAPSHOT,\n", "        V3_8_4,\n", "\n", "        V3_8_5_SNAPSHOT,\n", "        V3_8_5,\n", "\n", "        V3_8_6_SNAPSHOT,\n", "        V3_8_6,\n", "\n", "        V3_8_7_SNAPSHOT,\n", "        V3_8_7,\n", "\n", "        V3_8_8_SNAPSHOT,\n", "        V3_8_8,\n", "\n", "        V3_8_9_SNAPSHOT,\n", "        V3_8_9,\n", "\n", "        V3_9_1_SNAPSHOT,\n", "        V3_9_1,\n", "\n", "        V3_9_2_SNAPSHOT,\n", "        V3_9_2,\n", "\n", "        V3_9_3_SNAPSHOT,\n", "        V3_9_3,\n", "\n", "        V3_9_4_SNAPSHOT,\n", "        V3_9_4,\n", "\n", "        V3_9_5_SNAPSHOT,\n", "        V3_9_5,\n", "\n", "        V3_9_6_SNAPSHOT,\n", "        V3_9_6,\n", "\n", "        V3_9_7_SNAPSHOT,\n", "        V3_9_7,\n", "\n", "        V3_9_8_SNAPSHOT,\n", "        V3_9_8,\n", "\n", "        V3_9_9_SNAPSHOT,\n", "        V3_9_9,\n", "\n", "        V4_0_0_SNAPSHOT,\n", "        V4_0_0,\n", "\n", "        V4_0_1_SNAPSHOT,\n", "        V4_0_1,\n", "\n", "        V4_0_2_SNAPSHOT,\n", "        V4_0_2,\n", "\n", "        V4_0_3_SNAPSHOT,\n", "        V4_0_3,\n", "\n", "        V4_0_4_SNAPSHOT,\n", "        V4_0_4,\n", "\n", "        V4_0_5_SNAPSHOT,\n", "        V4_0_5,\n", "\n", "        V4_0_6_SNAPSHOT,\n", "        V4_0_6,\n", "\n", "        V4_0_7_SNAPSHOT,\n", "        V4_0_7,\n", "\n", "        V4_0_8_SNAPSHOT,\n", "        V4_0_8,\n", "\n", "        V4_0_9_SNAPSHOT,\n", "        V4_0_9,\n", "\n", "        V4_1_0_SNAPSHOT,\n", "        V4_1_0,\n", "\n", "        V4_1_1_SNAPSHOT,\n", "        V4_1_1,\n", "\n", "        V4_1_2_SNAPSHOT,\n", "        V4_1_2,\n", "\n", "        V4_1_3_SNAPSHOT,\n", "        V4_1_3,\n", "\n", "        V4_1_4_SNAPSHOT,\n", "        V4_1_4,\n", "\n", "        V4_1_5_SNAPSHOT,\n", "        V4_1_5,\n", "\n", "        V4_1_6_SNAPSHOT,\n", "        V4_1_6,\n", "\n", "        V4_1_7_SNAPSHOT,\n", "        V4_1_7,\n", "\n", "        V4_1_8_SNAPSHOT,\n", "        V4_1_8,\n", "\n", "        V4_1_9_SNAPSHOT,\n", "        V4_1_9,\n", "\n", "        V4_2_0_SNAPSHOT,\n", "        V4_2_0,\n", "\n", "        V4_2_1_SNAPSHOT,\n", "        V4_2_1,\n", "\n", "        V4_2_2_SNAPSHOT,\n", "        V4_2_2,\n", "\n", "        V4_2_3_SNAPSHOT,\n", "        V4_2_3,\n", "\n", "        V4_2_4_SNAPSHOT,\n", "        V4_2_4,\n", "\n", "        V4_2_5_SNAPSHOT,\n", "        V4_2_5,\n", "\n", "        V4_2_6_SNAPSHOT,\n", "        V4_2_6,\n", "\n", "        V4_2_7_SNAPSHOT,\n", "        V4_2_7,\n", "\n", "        V4_2_8_SNAPSHOT,\n", "        V4_2_8,\n", "\n", "        V4_2_9_SNAPSHOT,\n", "        V4_2_9,\n", "\n", "        V4_3_0_SNAPSHOT,\n", "        V4_3_0,\n", "\n", "        V4_3_1_SNAPSHOT,\n", "        V4_3_1,\n", "\n", "        V4_3_2_SNAPSHOT,\n", "        V4_3_2,\n", "\n", "        V4_3_3_SNAPSHOT,\n", "        V4_3_3,\n", "\n", "        V4_3_4_SNAPSHOT,\n", "        V4_3_4,\n", "\n", "        V4_3_5_SNAPSHOT,\n", "        V4_3_5,\n", "\n", "        V4_3_6_SNAPSHOT,\n", "        V4_3_6,\n", "\n", "        V4_3_7_SNAPSHOT,\n", "        V4_3_7,\n", "\n", "        V4_3_8_SNAPSHOT,\n", "        V4_3_8,\n", "\n", "        V4_3_9_SNAPSHOT,\n", "        V4_3_9,\n", "\n", "        V4_4_0_SNAPSHOT,\n", "        V4_4_0,\n", "\n", "        V4_4_1_SNAPSHOT,\n", "        V4_4_1,\n", "\n", "        V4_4_2_SNAPSHOT,\n", "        V4_4_2,\n", "\n", "        V4_4_3_SNAPSHOT,\n", "        V4_4_3,\n", "\n", "        V4_4_4_SNAPSHOT,\n", "        V4_4_4,\n", "\n", "        V4_4_5_SNAPSHOT,\n", "        V4_4_5,\n", "\n", "        V4_4_6_SNAPSHOT,\n", "        V4_4_6,\n", "\n", "        V4_4_7_SNAPSHOT,\n", "        V4_4_7,\n", "\n", "        V4_4_8_SNAPSHOT,\n", "        V4_4_8,\n", "\n", "        V4_4_9_SNAPSHOT,\n", "        V4_4_9,\n", "\n", "        V4_5_0_SNAPSHOT,\n", "        V4_5_0,\n", "\n", "        V4_5_1_SNAPSHOT,\n", "        V4_5_1,\n", "\n", "        V4_5_2_SNAPSHOT,\n", "        V4_5_2,\n", "\n", "        V4_5_3_SNAPSHOT,\n", "        V4_5_3,\n", "\n", "        V4_5_4_SNAPSHOT,\n", "        V4_5_4,\n", "\n", "        V4_5_5_SNAPSHOT,\n", "        V4_5_5,\n", "\n", "        V4_5_6_SNAPSHOT,\n", "        V4_5_6,\n", "\n", "        V4_5_7_SNAPSHOT,\n", "        V4_5_7,\n", "\n", "        V4_5_8_SNAPSHOT,\n", "        V4_5_8,\n", "\n", "        V4_5_9_SNAPSHOT,\n", "        V4_5_9,\n", "\n", "        V4_6_0_SNAPSHOT,\n", "        V4_6_0,\n", "\n", "        V4_6_1_SNAPSHOT,\n", "        V4_6_1,\n", "\n", "        V4_6_2_SNAPSHOT,\n", "        V4_6_2,\n", "\n", "        V4_6_3_SNAPSHOT,\n", "        V4_6_3,\n", "\n", "        V4_6_4_SNAPSHOT,\n", "        V4_6_4,\n", "\n", "        V4_6_5_SNAPSHOT,\n", "        V4_6_5,\n", "\n", "        V4_6_6_SNAPSHOT,\n", "        V4_6_6,\n", "\n", "        V4_6_7_SNAPSHOT,\n", "        V4_6_7,\n", "\n", "        V4_6_8_SNAPSHOT,\n", "        V4_6_8,\n", "\n", "        V4_6_9_SNAPSHOT,\n", "        V4_6_9,\n", "\n", "        V4_7_0_SNAPSHOT,\n", "        V4_7_0,\n", "\n", "        V4_7_1_SNAPSHOT,\n", "        V4_7_1,\n", "\n", "        V4_7_2_SNAPSHOT,\n", "        V4_7_2,\n", "\n", "        V4_7_3_SNAPSHOT,\n", "        V4_7_3,\n", "\n", "        V4_7_4_SNAPSHOT,\n", "        V4_7_4,\n", "\n", "        V4_7_5_SNAPSHOT,\n", "        V4_7_5,\n", "\n", "        V4_7_6_SNAPSHOT,\n", "        V4_7_6,\n", "\n", "        V4_7_7_SNAPSHOT,\n", "        V4_7_7,\n", "\n", "        V4_7_8_SNAPSHOT,\n", "        V4_7_8,\n", "\n", "        V4_7_9_SNAPSHOT,\n", "        V4_7_9,\n", "\n", "        V4_8_0_SNAPSHOT,\n", "        V4_8_0,\n", "\n", "        V4_8_1_SNAPSHOT,\n", "        V4_8_1,\n", "\n", "        V4_8_2_SNAPSHOT,\n", "        V4_8_2,\n", "\n", "        V4_8_3_SNAPSHOT,\n", "        V4_8_3,\n", "\n", "        V4_8_4_SNAPSHOT,\n", "        V4_8_4,\n", "\n", "        V4_8_5_SNAPSHOT,\n", "        V4_8_5,\n", "\n", "        V4_8_6_SNAPSHOT,\n", "        V4_8_6,\n", "\n", "        V4_8_7_SNAPSHOT,\n", "        V4_8_7,\n", "\n", "        V4_8_8_SNAPSHOT,\n", "        V4_8_8,\n", "\n", "        V4_8_9_SNAPSHOT,\n", "        V4_8_9,\n", "\n", "        V4_9_0_SNAPSHOT,\n", "        V4_9_0,\n", "\n", "        V4_9_1_SNAPSHOT,\n", "        V4_9_1,\n", "\n", "        V4_9_2_SNAPSHOT,\n", "        V4_9_2,\n", "\n", "        V4_9_3_SNAPSHOT,\n", "        V4_9_3,\n", "\n", "        V4_9_4_SNAPSHOT,\n", "        V4_9_4,\n", "\n", "        V4_9_5_SNAPSHOT,\n", "        V4_9_5,\n", "\n", "        V4_9_6_SNAPSHOT,\n", "        V4_9_6,\n", "\n", "        V4_9_7_SNAPSHOT,\n", "        V4_9_7,\n", "\n", "        V4_9_8_SNAPSHOT,\n", "        V4_9_8,\n", "\n", "        V4_9_9_SNAPSHOT,\n", "        V4_9_9,\n", "\n", "        V5_0_0_SNAPSHOT,\n", "        V5_0_0,\n", "\n", "        V5_0_1_SNAPSHOT,\n", "        V5_0_1,\n", "\n", "        V5_0_2_SNAPSHOT,\n", "        V5_0_2,\n", "\n", "        V5_0_3_SNAPSHOT,\n", "        V5_0_3,\n", "\n", "        V5_0_4_SNAPSHOT,\n", "        V5_0_4,\n", "\n", "        V5_0_5_SNAPSHOT,\n", "        V5_0_5,\n", "\n", "        V5_0_6_SNAPSHOT,\n", "        V5_0_6,\n", "\n", "        V5_0_7_SNAPSHOT,\n", "        V5_0_7,\n", "\n", "        V5_0_8_SNAPSHOT,\n", "        V5_0_8,\n", "\n", "        V5_0_9_SNAPSHOT,\n", "        V5_0_9,\n", "\n", "        V5_1_0_SNAPSHOT,\n", "        V5_1_0,\n", "\n", "        V5_1_1_SNAPSHOT,\n", "        V5_1_1,\n", "\n", "        V5_1_2_SNAPSHOT,\n", "        V5_1_2,\n", "\n", "        V5_1_3_SNAPSHOT,\n", "        V5_1_3,\n", "\n", "        V5_1_4_SNAPSHOT,\n", "        V5_1_4,\n", "\n", "        V5_1_5_SNAPSHOT,\n", "        V5_1_5,\n", "\n", "        V5_1_6_SNAPSHOT,\n", "        V5_1_6,\n", "\n", "        V5_1_7_SNAPSHOT,\n", "        V5_1_7,\n", "\n", "        V5_1_8_SNAPSHOT,\n", "        V5_1_8,\n", "\n", "        V5_1_9_SNAPSHOT,\n", "        V5_1_9,\n", "\n", "        V5_2_0_SNAPSHOT,\n", "        V5_2_0,\n", "\n", "        V5_2_1_SNAPSHOT,\n", "        V5_2_1,\n", "\n", "        V5_2_2_SNAPSHOT,\n", "        V5_2_2,\n", "\n", "        V5_2_3_SNAPSHOT,\n", "        V5_2_3,\n", "\n", "        V5_2_4_SNAPSHOT,\n", "        V5_2_4,\n", "\n", "        V5_2_5_SNAPSHOT,\n", "        V5_2_5,\n", "\n", "        V5_2_6_SNAPSHOT,\n", "        V5_2_6,\n", "\n", "        V5_2_7_SNAPSHOT,\n", "        V5_2_7,\n", "\n", "        V5_2_8_SNAPSHOT,\n", "        V5_2_8,\n", "\n", "        V5_2_9_SNAPSHOT,\n", "        V5_2_9,\n", "\n", "        V5_3_0_SNAPSHOT,\n", "        V5_3_0,\n", "\n", "        V5_3_1_SNAPSHOT,\n", "        V5_3_1,\n", "\n", "        V5_3_2_SNAPSHOT,\n", "        V5_3_2,\n", "\n", "        V5_3_3_SNAPSHOT,\n", "        V5_3_3,\n", "\n", "        V5_3_4_SNAPSHOT,\n", "        V5_3_4,\n", "\n", "        V5_3_5_SNAPSHOT,\n", "        V5_3_5,\n", "\n", "        V5_3_6_SNAPSHOT,\n", "        V5_3_6,\n", "\n", "        V5_3_7_SNAPSHOT,\n", "        V5_3_7,\n", "\n", "        V5_3_8_SNAPSHOT,\n", "        V5_3_8,\n", "\n", "        V5_3_9_SNAPSHOT,\n", "        V5_3_9,\n", "\n", "        V5_4_0_SNAPSHOT,\n", "        V5_4_0,\n", "\n", "        V5_4_1_SNAPSHOT,\n", "        V5_4_1,\n", "\n", "        V5_4_2_SNAPSHOT,\n", "        V5_4_2,\n", "\n", "        V5_4_3_SNAPSHOT,\n", "        V5_4_3,\n", "\n", "        V5_4_4_SNAPSHOT,\n", "        V5_4_4,\n", "\n", "        V5_4_5_SNAPSHOT,\n", "        V5_4_5,\n", "\n", "        V5_4_6_SNAPSHOT,\n", "        V5_4_6,\n", "\n", "        V5_4_7_SNAPSHOT,\n", "        V5_4_7,\n", "\n", "        V5_4_8_SNAPSHOT,\n", "        V5_4_8,\n", "\n", "        V5_4_9_SNAPSHOT,\n", "        V5_4_9,\n", "\n", "        V5_5_0_SNAPSHOT,\n", "        V5_5_0,\n", "\n", "        V5_5_1_SNAPSHOT,\n", "        V5_5_1,\n", "\n", "        V5_5_2_SNAPSHOT,\n", "        V5_5_2,\n", "\n", "        V5_5_3_SNAPSHOT,\n", "        V5_5_3,\n", "\n", "        V5_5_4_SNAPSHOT,\n", "        V5_5_4,\n", "\n", "        V5_5_5_SNAPSHOT,\n", "        V5_5_5,\n", "\n", "        V5_5_6_SNAPSHOT,\n", "        V5_5_6,\n", "\n", "        V5_5_7_SNAPSHOT,\n", "        V5_5_7,\n", "\n", "        V5_5_8_SNAPSHOT,\n", "        V5_5_8,\n", "\n", "        V5_5_9_SNAPSHOT,\n", "        V5_5_9,\n", "\n", "        V5_6_0_SNAPSHOT,\n", "        V5_6_0,\n", "\n", "        V5_6_1_SNAPSHOT,\n", "        V5_6_1,\n", "\n", "        V5_6_2_SNAPSHOT,\n", "        V5_6_2,\n", "\n", "        V5_6_3_SNAPSHOT,\n", "        V5_6_3,\n", "\n", "        V5_6_4_SNAPSHOT,\n", "        V5_6_4,\n", "\n", "        V5_6_5_SNAPSHOT,\n", "        V5_6_5,\n", "\n", "        V5_6_6_SNAPSHOT,\n", "        V5_6_6,\n", "\n", "        V5_6_7_SNAPSHOT,\n", "        V5_6_7,\n", "\n", "        V5_6_8_SNAPSHOT,\n", "        V5_6_8,\n", "\n", "        V5_6_9_SNAPSHOT,\n", "        V5_6_9,\n", "\n", "        V5_7_0_SNAPSHOT,\n", "        V5_7_0,\n", "\n", "        V5_7_1_SNAPSHOT,\n", "        V5_7_1,\n", "\n", "        V5_7_2_SNAPSHOT,\n", "        V5_7_2,\n", "\n", "        V5_7_3_SNAPSHOT,\n", "        V5_7_3,\n", "\n", "        V5_7_4_SNAPSHOT,\n", "        V5_7_4,\n", "\n", "        V5_7_5_SNAPSHOT,\n", "        V5_7_5,\n", "\n", "        V5_7_6_SNAPSHOT,\n", "        V5_7_6,\n", "\n", "        V5_7_7_SNAPSHOT,\n", "        V5_7_7,\n", "\n", "        V5_7_8_SNAPSHOT,\n", "        V5_7_8,\n", "\n", "        V5_7_9_SNAPSHOT,\n", "        V5_7_9,\n", "\n", "        V5_8_0_SNAPSHOT,\n", "        V5_8_0,\n", "\n", "        V5_8_1_SNAPSHOT,\n", "        V5_8_1,\n", "\n", "        V5_8_2_SNAPSHOT,\n", "        V5_8_2,\n", "\n", "        V5_8_3_SNAPSHOT,\n", "        V5_8_3,\n", "\n", "        V5_8_4_SNAPSHOT,\n", "        V5_8_4,\n", "\n", "        V5_8_5_SNAPSHOT,\n", "        V5_8_5,\n", "\n", "        V5_8_6_SNAPSHOT,\n", "        V5_8_6,\n", "\n", "        V5_8_7_SNAPSHOT,\n", "        V5_8_7,\n", "\n", "        V5_8_8_SNAPSHOT,\n", "        V5_8_8,\n", "\n", "        V5_8_9_SNAPSHOT,\n", "        V5_8_9,\n", "\n", "        V5_9_0_SNAPSHOT,\n", "        V5_9_0,\n", "\n", "        V5_9_1_SNAPSHOT,\n", "        V5_9_1,\n", "\n", "        V5_9_2_SNAPSHOT,\n", "        V5_9_2,\n", "\n", "        V5_9_3_SNAPSHOT,\n", "        V5_9_3,\n", "\n", "        V5_9_4_SNAPSHOT,\n", "        V5_9_4,\n", "\n", "        V5_9_5_SNAPSHOT,\n", "        V5_9_5,\n", "\n", "        V5_9_6_SNAPSHOT,\n", "        V5_9_6,\n", "\n", "        V5_9_7_SNAPSHOT,\n", "        V5_9_7,\n", "\n", "        V5_9_8_SNAPSHOT,\n", "        V5_9_8,\n", "\n", "        V5_9_9_SNAPSHOT,\n", "        V5_9_9,\n", "\n", "        HIGHER_VERSION\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common;\n", "\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class MQVersionTest {\n", "\n", "    @Test\n", "    public void testGetVersionDesc() throws Exception {\n", "        String desc = \"V3_0_0_SNAPSHOT\";\n", "        assertThat(MQVersion.getVersionDesc(0)).isEqualTo(desc);\n", "    }\n", "\n", "    @Test\n", "    public void testGetVersionDesc_higherVersion() throws Exception {\n", "        String desc = \"HIGHER_VERSION\";\n", "        assertThat(MQVersion.getVersionDesc(Integer.MAX_VALUE)).isEqualTo(desc);\n", "    }\n", "\n", "    @Test\n", "    public void testValue2Version() throws Exception {\n", "        assertThat(MQVersion.value2Version(0)).isEqualTo(MQVersion.Version.V3_0_0_SNAPSHOT);\n", "    }\n", "\n", "    @Test\n", "    public void testValue2Version_HigherVersion() throws Exception {\n", "        assertThat(MQVersion.value2Version(Integer.MAX_VALUE)).isEqualTo(MQVersion.Version.HIGHER_VERSION);\n", "    }\n", "}"], "method_lines_dic": {"MQVersion::::getVersionDesc(int)": [23, 30], "MQVersion::::value2Version(int)": [32, 39]}, "test_method_lines_dic": {"MQVersionTest::::testGetVersionDesc()": [26, 30], "MQVersionTest::::testGetVersionDesc_higherVersion()": [32, 36], "MQVersionTest::::testValue2Version()": [38, 41], "MQVersionTest::::testValue2Version_HigherVersion()": [43, 46]}, "reverse_method_lines_dic": {"23": "MQVersion::::getVersionDesc(int)", "24": "MQVersion::::getVersionDesc(int)", "25": "MQVersion::::getVersionDesc(int)", "26": "MQVersion::::getVersionDesc(int)", "27": "MQVersion::::getVersionDesc(int)", "28": "MQVersion::::getVersionDesc(int)", "29": "MQVersion::::getVersionDesc(int)", "30": "MQVersion::::getVersionDesc(int)", "32": "MQVersion::::value2Version(int)", "33": "MQVersion::::value2Version(int)", "34": "MQVersion::::value2Version(int)", "35": "MQVersion::::value2Version(int)", "36": "MQVersion::::value2Version(int)", "37": "MQVersion::::value2Version(int)", "38": "MQVersion::::value2Version(int)", "39": "MQVersion::::value2Version(int)"}, "test_reverse_method_lines_dic": {"26": "MQVersionTest::::testGetVersionDesc()", "27": "MQVersionTest::::testGetVersionDesc()", "28": "MQVersionTest::::testGetVersionDesc()", "29": "MQVersionTest::::testGetVersionDesc()", "30": "MQVersionTest::::testGetVersionDesc()", "32": "MQVersionTest::::testGetVersionDesc_higherVersion()", "33": "MQVersionTest::::testGetVersionDesc_higherVersion()", "34": "MQVersionTest::::testGetVersionDesc_higherVersion()", "35": "MQVersionTest::::testGetVersionDesc_higherVersion()", "36": "MQVersionTest::::testGetVersionDesc_higherVersion()", "38": "MQVersionTest::::testValue2Version()", "39": "MQVersionTest::::testValue2Version()", "40": "MQVersionTest::::testValue2Version()", "41": "MQVersionTest::::testValue2Version()", "43": "MQVersionTest::::testValue2Version_HigherVersion()", "44": "MQVersionTest::::testValue2Version_HigherVersion()", "45": "MQVersionTest::::testValue2Version_HigherVersion()", "46": "MQVersionTest::::testValue2Version_HigherVersion()"}, "tests": [{"test_lines": [26, 30], "covered_lines": [21, 24, 25, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 149, 150, 152, 153, 155, 156, 158, 159, 161, 162, 164, 165, 167, 168, 170, 171, 173, 174, 176, 177, 179, 180, 182, 183, 185, 186, 188, 189, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 211, 212, 214, 215, 217, 218, 220, 221, 223, 224, 226, 227, 229, 230, 232, 233, 235, 236, 238, 239, 241, 242, 244, 245, 247, 248, 250, 251, 253, 254, 256, 257, 259, 260, 262, 263, 265, 266, 268, 269, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 346, 347, 349, 350, 352, 353, 355, 356, 358, 359, 361, 362, 364, 365, 367, 368, 370, 371, 373, 374, 376, 377, 379, 380, 382, 383, 385, 386, 388, 389, 391, 392, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 424, 425, 427, 428, 430, 431, 433, 434, 436, 437, 439, 440, 442, 443, 445, 446, 448, 449, 451, 452, 454, 455, 457, 458, 460, 461, 463, 464, 466, 467, 469, 470, 472, 473, 475, 476, 478, 479, 481, 482, 484, 485, 487, 488, 490, 491, 493, 494, 496, 497, 499, 500, 502, 503, 505, 506, 508, 509, 511, 512, 514, 515, 517, 518, 520, 521, 523, 524, 526, 527, 529, 530, 532, 533, 535, 536, 538, 539, 541, 542, 544, 545, 547, 548, 550, 551, 553, 554, 556, 557, 559, 560, 562, 563, 565, 566, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 583, 584, 586, 587, 589, 590, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 626, 628, 629, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 646, 647, 649, 650, 652, 653, 655, 656, 658, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 814, 815, 817, 818, 820, 821, 823, 824, 826, 827, 829, 830, 832, 833, 835, 836, 838, 839, 841, 842, 844, 845, 847, 848, 850, 851, 853, 854, 856, 857, 859, 860, 862, 863, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943]}, {"test_lines": [32, 36], "covered_lines": [21, 24, 25, 26, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 149, 150, 152, 153, 155, 156, 158, 159, 161, 162, 164, 165, 167, 168, 170, 171, 173, 174, 176, 177, 179, 180, 182, 183, 185, 186, 188, 189, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 211, 212, 214, 215, 217, 218, 220, 221, 223, 224, 226, 227, 229, 230, 232, 233, 235, 236, 238, 239, 241, 242, 244, 245, 247, 248, 250, 251, 253, 254, 256, 257, 259, 260, 262, 263, 265, 266, 268, 269, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 346, 347, 349, 350, 352, 353, 355, 356, 358, 359, 361, 362, 364, 365, 367, 368, 370, 371, 373, 374, 376, 377, 379, 380, 382, 383, 385, 386, 388, 389, 391, 392, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 424, 425, 427, 428, 430, 431, 433, 434, 436, 437, 439, 440, 442, 443, 445, 446, 448, 449, 451, 452, 454, 455, 457, 458, 460, 461, 463, 464, 466, 467, 469, 470, 472, 473, 475, 476, 478, 479, 481, 482, 484, 485, 487, 488, 490, 491, 493, 494, 496, 497, 499, 500, 502, 503, 505, 506, 508, 509, 511, 512, 514, 515, 517, 518, 520, 521, 523, 524, 526, 527, 529, 530, 532, 533, 535, 536, 538, 539, 541, 542, 544, 545, 547, 548, 550, 551, 553, 554, 556, 557, 559, 560, 562, 563, 565, 566, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 583, 584, 586, 587, 589, 590, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 626, 628, 629, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 646, 647, 649, 650, 652, 653, 655, 656, 658, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 814, 815, 817, 818, 820, 821, 823, 824, 826, 827, 829, 830, 832, 833, 835, 836, 838, 839, 841, 842, 844, 845, 847, 848, 850, 851, 853, 854, 856, 857, 859, 860, 862, 863, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943]}, {"test_lines": [38, 41], "covered_lines": [21, 33, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 149, 150, 152, 153, 155, 156, 158, 159, 161, 162, 164, 165, 167, 168, 170, 171, 173, 174, 176, 177, 179, 180, 182, 183, 185, 186, 188, 189, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 211, 212, 214, 215, 217, 218, 220, 221, 223, 224, 226, 227, 229, 230, 232, 233, 235, 236, 238, 239, 241, 242, 244, 245, 247, 248, 250, 251, 253, 254, 256, 257, 259, 260, 262, 263, 265, 266, 268, 269, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 346, 347, 349, 350, 352, 353, 355, 356, 358, 359, 361, 362, 364, 365, 367, 368, 370, 371, 373, 374, 376, 377, 379, 380, 382, 383, 385, 386, 388, 389, 391, 392, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 424, 425, 427, 428, 430, 431, 433, 434, 436, 437, 439, 440, 442, 443, 445, 446, 448, 449, 451, 452, 454, 455, 457, 458, 460, 461, 463, 464, 466, 467, 469, 470, 472, 473, 475, 476, 478, 479, 481, 482, 484, 485, 487, 488, 490, 491, 493, 494, 496, 497, 499, 500, 502, 503, 505, 506, 508, 509, 511, 512, 514, 515, 517, 518, 520, 521, 523, 524, 526, 527, 529, 530, 532, 533, 535, 536, 538, 539, 541, 542, 544, 545, 547, 548, 550, 551, 553, 554, 556, 557, 559, 560, 562, 563, 565, 566, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 583, 584, 586, 587, 589, 590, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 626, 628, 629, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 646, 647, 649, 650, 652, 653, 655, 656, 658, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 814, 815, 817, 818, 820, 821, 823, 824, 826, 827, 829, 830, 832, 833, 835, 836, 838, 839, 841, 842, 844, 845, 847, 848, 850, 851, 853, 854, 856, 857, 859, 860, 862, 863, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943]}, {"test_lines": [43, 46], "covered_lines": [21, 33, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 149, 150, 152, 153, 155, 156, 158, 159, 161, 162, 164, 165, 167, 168, 170, 171, 173, 174, 176, 177, 179, 180, 182, 183, 185, 186, 188, 189, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 211, 212, 214, 215, 217, 218, 220, 221, 223, 224, 226, 227, 229, 230, 232, 233, 235, 236, 238, 239, 241, 242, 244, 245, 247, 248, 250, 251, 253, 254, 256, 257, 259, 260, 262, 263, 265, 266, 268, 269, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 346, 347, 349, 350, 352, 353, 355, 356, 358, 359, 361, 362, 364, 365, 367, 368, 370, 371, 373, 374, 376, 377, 379, 380, 382, 383, 385, 386, 388, 389, 391, 392, 394, 395, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 424, 425, 427, 428, 430, 431, 433, 434, 436, 437, 439, 440, 442, 443, 445, 446, 448, 449, 451, 452, 454, 455, 457, 458, 460, 461, 463, 464, 466, 467, 469, 470, 472, 473, 475, 476, 478, 479, 481, 482, 484, 485, 487, 488, 490, 491, 493, 494, 496, 497, 499, 500, 502, 503, 505, 506, 508, 509, 511, 512, 514, 515, 517, 518, 520, 521, 523, 524, 526, 527, 529, 530, 532, 533, 535, 536, 538, 539, 541, 542, 544, 545, 547, 548, 550, 551, 553, 554, 556, 557, 559, 560, 562, 563, 565, 566, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 583, 584, 586, 587, 589, 590, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 626, 628, 629, 631, 632, 634, 635, 637, 638, 640, 641, 643, 644, 646, 647, 649, 650, 652, 653, 655, 656, 658, 659, 661, 662, 664, 665, 667, 668, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 814, 815, 817, 818, 820, 821, 823, 824, 826, 827, 829, 830, 832, 833, 835, 836, 838, 839, 841, 842, 844, 845, 847, 848, 850, 851, 853, 854, 856, 857, 859, 860, 862, 863, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/sysflag/PullSysFlag.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.sysflag;\n", "\n", "public class PullSysFlag {\n", "    private final static int FLAG_COMMIT_OFFSET = 0x1;\n", "    private final static int FLAG_SUSPEND = 0x1 << 1;\n", "    private final static int FLAG_SUBSCRIPTION = 0x1 << 2;\n", "    private final static int FLAG_CLASS_FILTER = 0x1 << 3;\n", "    private final static int FLAG_LITE_PULL_MESSAGE = 0x1 << 4;\n", "\n", "    public static int buildSysFlag(final boolean commitOffset, final boolean suspend,\n", "        final boolean subscription, final boolean classFilter) {\n", "        int flag = 0;\n", "\n", "        if (commitOffset) {\n", "            flag |= FLAG_COMMIT_OFFSET;\n", "        }\n", "\n", "        if (suspend) {\n", "            flag |= FLAG_SUSPEND;\n", "        }\n", "\n", "        if (subscription) {\n", "            flag |= FLAG_SUBSCRIPTION;\n", "        }\n", "\n", "        if (classFilter) {\n", "            flag |= FLAG_CLASS_FILTER;\n", "        }\n", "\n", "        return flag;\n", "    }\n", "\n", "    public static int buildSysFlag(final boolean commitOffset, final boolean suspend,\n", "        final boolean subscription, final boolean classFilter, final boolean litePull) {\n", "        int flag = buildSysFlag(commitOffset, suspend, subscription, classFilter);\n", "\n", "        if (litePull) {\n", "            flag |= FLAG_LITE_PULL_MESSAGE;\n", "        }\n", "\n", "        return flag;\n", "    }\n", "\n", "    public static int clearCommitOffsetFlag(final int sysFlag) {\n", "        return sysFlag & (~FLAG_COMMIT_OFFSET);\n", "    }\n", "\n", "    public static boolean hasCommitOffsetFlag(final int sysFlag) {\n", "        return (sysFlag & FLAG_COMMIT_OFFSET) == FLAG_COMMIT_OFFSET;\n", "    }\n", "\n", "    public static boolean hasSuspendFlag(final int sysFlag) {\n", "        return (sysFlag & FLAG_SUSPEND) == FLAG_SUSPEND;\n", "    }\n", "\n", "    public static boolean hasSubscriptionFlag(final int sysFlag) {\n", "        return (sysFlag & FLAG_SUBSCRIPTION) == FLAG_SUBSCRIPTION;\n", "    }\n", "\n", "    public static boolean hasClassFilterFlag(final int sysFlag) {\n", "        return (sysFlag & FLAG_CLASS_FILTER) == FLAG_CLASS_FILTER;\n", "    }\n", "\n", "    public static boolean hasLitePullFlag(final int sysFlag) {\n", "        return (sysFlag & FLAG_LITE_PULL_MESSAGE) == FLAG_LITE_PULL_MESSAGE;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.sysflag;\n", "\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class PullSysFlagTest {\n", "\n", "    @Test\n", "    public void testLitePullFlag() {\n", "        int flag = PullSysFlag.buildSysFlag(false, false, false, false, true);\n", "        assertThat(PullSysFlag.hasLitePullFlag(flag)).isTrue();\n", "    }\n", "\n", "    @Test\n", "    public void testLitePullFlagFalse() {\n", "        int flag = PullSysFlag.buildSysFlag(false, false, false, false, false);\n", "        assertThat(PullSysFlag.hasLitePullFlag(flag)).isFalse();\n", "    }\n", "}\n"], "method_lines_dic": {"PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)": [26, 47], "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)": [49, 58], "PullSysFlag::::clearCommitOffsetFlag(int)": [60, 62], "PullSysFlag::::hasCommitOffsetFlag(int)": [64, 66], "PullSysFlag::::hasSuspendFlag(int)": [68, 70], "PullSysFlag::::hasSubscriptionFlag(int)": [72, 74], "PullSysFlag::::hasClassFilterFlag(int)": [76, 78], "PullSysFlag::::hasLitePullFlag(int)": [80, 82]}, "test_method_lines_dic": {"PullSysFlagTest::::testLitePullFlag()": [25, 29], "PullSysFlagTest::::testLitePullFlagFalse()": [31, 35]}, "reverse_method_lines_dic": {"26": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "27": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "28": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "29": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "30": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "31": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "32": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "33": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "34": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "35": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "36": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "37": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "38": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "39": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "40": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "41": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "42": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "43": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "44": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "45": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "46": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "47": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean)", "49": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)", "50": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)", "51": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)", "52": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)", "53": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)", "54": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)", "55": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)", "56": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)", "57": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)", "58": "PullSysFlag::::buildSysFlag(boolean,boolean,boolean,boolean,boolean)", "60": "PullSysFlag::::clearCommitOffsetFlag(int)", "61": "PullSysFlag::::clearCommitOffsetFlag(int)", "62": "PullSysFlag::::clearCommitOffsetFlag(int)", "64": "PullSysFlag::::hasCommitOffsetFlag(int)", "65": "PullSysFlag::::hasCommitOffsetFlag(int)", "66": "PullSysFlag::::hasCommitOffsetFlag(int)", "68": "PullSysFlag::::hasSuspendFlag(int)", "69": "PullSysFlag::::hasSuspendFlag(int)", "70": "PullSysFlag::::hasSuspendFlag(int)", "72": "PullSysFlag::::hasSubscriptionFlag(int)", "73": "PullSysFlag::::hasSubscriptionFlag(int)", "74": "PullSysFlag::::hasSubscriptionFlag(int)", "76": "PullSysFlag::::hasClassFilterFlag(int)", "77": "PullSysFlag::::hasClassFilterFlag(int)", "78": "PullSysFlag::::hasClassFilterFlag(int)", "80": "PullSysFlag::::hasLitePullFlag(int)", "81": "PullSysFlag::::hasLitePullFlag(int)", "82": "PullSysFlag::::hasLitePullFlag(int)"}, "test_reverse_method_lines_dic": {"25": "PullSysFlagTest::::testLitePullFlag()", "26": "PullSysFlagTest::::testLitePullFlag()", "27": "PullSysFlagTest::::testLitePullFlag()", "28": "PullSysFlagTest::::testLitePullFlag()", "29": "PullSysFlagTest::::testLitePullFlag()", "31": "PullSysFlagTest::::testLitePullFlagFalse()", "32": "PullSysFlagTest::::testLitePullFlagFalse()", "33": "PullSysFlagTest::::testLitePullFlagFalse()", "34": "PullSysFlagTest::::testLitePullFlagFalse()", "35": "PullSysFlagTest::::testLitePullFlagFalse()"}, "tests": [{"test_lines": [25, 29], "covered_lines": [28, 30, 34, 38, 42, 46, 51, 53, 54, 57, 81]}, {"test_lines": [31, 35], "covered_lines": [28, 30, 34, 38, 42, 46, 51, 53, 57, 81]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/admin/TopicStatsTable.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.admin;\n", "\n", "import java.util.HashMap;\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class TopicStatsTable extends RemotingSerializable {\n", "    private HashMap<MessageQueue, TopicOffset> offsetTable = new HashMap<MessageQueue, TopicOffset>();\n", "\n", "    public HashMap<MessageQueue, TopicOffset> getOffsetTable() {\n", "        return offsetTable;\n", "    }\n", "\n", "    public void setOffsetTable(HashMap<MessageQueue, TopicOffset> offsetTable) {\n", "        this.offsetTable = offsetTable;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.admin;\n", "\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "\n", "\n", "public class TopicStatsTableTest {\n", "\n", "    private volatile TopicStatsTable topicStatsTable;\n", "\n", "    private static final String TEST_TOPIC = \"test_topic\";\n", "\n", "    private static final String TEST_BROKER = \"test_broker\";\n", "\n", "    private static final int QUEUE_ID = 1;\n", "\n", "    private static final long CURRENT_TIME_MILLIS = System.currentTimeMillis();\n", "\n", "    private static final long MAX_OFFSET = CURRENT_TIME_MILLIS + 100;\n", "\n", "    private static final long MIN_OFFSET = CURRENT_TIME_MILLIS - 100;\n", "\n", "    @Before\n", "    public void buildTopicStatsTable() {\n", "        HashMap<MessageQueue, TopicOffset> offsetTableMap = new HashMap<MessageQueue, TopicOffset>();\n", "\n", "        MessageQueue messageQueue = new MessageQueue(TEST_TOPIC, TEST_BROKER, QUEUE_ID);\n", "\n", "        TopicOffset topicOffset = new TopicOffset();\n", "        topicOffset.setLastUpdateTimestamp(CURRENT_TIME_MILLIS);\n", "        topicOffset.setMinOffset(MIN_OFFSET);\n", "        topicOffset.setMaxOffset(MAX_OFFSET);\n", "\n", "        offsetTableMap.put(messageQueue, topicOffset);\n", "\n", "        topicStatsTable = new TopicStatsTable();\n", "        topicStatsTable.setOffsetTable(offsetTableMap);\n", "    }\n", "\n", "    @Test\n", "    public void testGetOffsetTable() throws Exception {\n", "        validateTopicStatsTable(topicStatsTable);\n", "    }\n", "\n", "    @Test\n", "    public void testFromJson() throws Exception {\n", "        String json = RemotingSerializable.toJson(topicStatsTable, true);\n", "        TopicStatsTable fromJson = RemotingSerializable.fromJson(json, TopicStatsTable.class);\n", "\n", "        validateTopicStatsTable(fromJson);\n", "    }\n", "\n", "    private static void validateTopicStatsTable(TopicStatsTable topicStatsTable) throws Exception {\n", "        Map.Entry<MessageQueue, TopicOffset> savedTopicStatsTableMap = topicStatsTable.getOffsetTable().entrySet().iterator().next();\n", "        MessageQueue savedMessageQueue = savedTopicStatsTableMap.getKey();\n", "        TopicOffset savedTopicOffset = savedTopicStatsTableMap.getValue();\n", "\n", "        Assert.assertTrue(savedMessageQueue.getTopic().equals(TEST_TOPIC));\n", "        Assert.assertTrue(savedMessageQueue.getBrokerName().equals(TEST_BROKER));\n", "        Assert.assertTrue(savedMessageQueue.getQueueId() == QUEUE_ID);\n", "\n", "        Assert.assertTrue(savedTopicOffset.getLastUpdateTimestamp() == CURRENT_TIME_MILLIS);\n", "        Assert.assertTrue(savedTopicOffset.getMaxOffset() == MAX_OFFSET);\n", "        Assert.assertTrue(savedTopicOffset.getMinOffset() == MIN_OFFSET);\n", "    }\n", "\n", "}\n"], "method_lines_dic": {"TopicStatsTable::::getOffsetTable()": [26, 28], "TopicStatsTable::::setOffsetTable(java.util.HashMap<org.apache.rocketmq.common.message.MessageQueue, org.apache.rocketmq.common.admin.TopicOffset>)": [30, 32]}, "test_method_lines_dic": {"TopicStatsTableTest::::buildTopicStatsTable()": [45, 60], "TopicStatsTableTest::::testGetOffsetTable()": [62, 65], "TopicStatsTableTest::::testFromJson()": [67, 73]}, "reverse_method_lines_dic": {"26": "TopicStatsTable::::getOffsetTable()", "27": "TopicStatsTable::::getOffsetTable()", "28": "TopicStatsTable::::getOffsetTable()", "30": "TopicStatsTable::::setOffsetTable(java.util.HashMap<org.apache.rocketmq.common.message.MessageQueue, org.apache.rocketmq.common.admin.TopicOffset>)", "31": "TopicStatsTable::::setOffsetTable(java.util.HashMap<org.apache.rocketmq.common.message.MessageQueue, org.apache.rocketmq.common.admin.TopicOffset>)", "32": "TopicStatsTable::::setOffsetTable(java.util.HashMap<org.apache.rocketmq.common.message.MessageQueue, org.apache.rocketmq.common.admin.TopicOffset>)"}, "test_reverse_method_lines_dic": {"45": "TopicStatsTableTest::::buildTopicStatsTable()", "46": "TopicStatsTableTest::::buildTopicStatsTable()", "47": "TopicStatsTableTest::::buildTopicStatsTable()", "48": "TopicStatsTableTest::::buildTopicStatsTable()", "49": "TopicStatsTableTest::::buildTopicStatsTable()", "50": "TopicStatsTableTest::::buildTopicStatsTable()", "51": "TopicStatsTableTest::::buildTopicStatsTable()", "52": "TopicStatsTableTest::::buildTopicStatsTable()", "53": "TopicStatsTableTest::::buildTopicStatsTable()", "54": "TopicStatsTableTest::::buildTopicStatsTable()", "55": "TopicStatsTableTest::::buildTopicStatsTable()", "56": "TopicStatsTableTest::::buildTopicStatsTable()", "57": "TopicStatsTableTest::::buildTopicStatsTable()", "58": "TopicStatsTableTest::::buildTopicStatsTable()", "59": "TopicStatsTableTest::::buildTopicStatsTable()", "60": "TopicStatsTableTest::::buildTopicStatsTable()", "62": "TopicStatsTableTest::::testGetOffsetTable()", "63": "TopicStatsTableTest::::testGetOffsetTable()", "64": "TopicStatsTableTest::::testGetOffsetTable()", "65": "TopicStatsTableTest::::testGetOffsetTable()", "67": "TopicStatsTableTest::::testFromJson()", "68": "TopicStatsTableTest::::testFromJson()", "69": "TopicStatsTableTest::::testFromJson()", "70": "TopicStatsTableTest::::testFromJson()", "71": "TopicStatsTableTest::::testFromJson()", "72": "TopicStatsTableTest::::testFromJson()", "73": "TopicStatsTableTest::::testFromJson()"}, "tests": [{"test_lines": [62, 65], "covered_lines": [23, 24, 27, 31, 32]}, {"test_lines": [67, 73], "covered_lines": [23, 24, 27, 31, 32]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/stats/StatsItemSet.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.stats;\n", "\n", "import java.util.Iterator;\n", "import java.util.Map.Entry;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "import java.util.concurrent.ConcurrentMap;\n", "import java.util.concurrent.ScheduledExecutorService;\n", "import java.util.concurrent.TimeUnit;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "\n", "public class StatsItemSet {\n", "    private final ConcurrentMap<String/* key */, StatsItem> statsItemTable =\n", "        new ConcurrentHashMap<String, StatsItem>(128);\n", "\n", "    private final String statsName;\n", "    private final ScheduledExecutorService scheduledExecutorService;\n", "    private final InternalLogger log;\n", "\n", "    public StatsItemSet(String statsName, ScheduledExecutorService scheduledExecutorService, InternalLogger log) {\n", "        this.statsName = statsName;\n", "        this.scheduledExecutorService = scheduledExecutorService;\n", "        this.log = log;\n", "        this.init();\n", "    }\n", "\n", "    public void init() {\n", "\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                try {\n", "                    samplingInSeconds();\n", "                } catch (Throwable ignored) {\n", "                }\n", "            }\n", "        }, 0, 10, TimeUnit.SECONDS);\n", "\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                try {\n", "                    samplingInMinutes();\n", "                } catch (Throwable ignored) {\n", "                }\n", "            }\n", "        }, 0, 10, TimeUnit.MINUTES);\n", "\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                try {\n", "                    samplingInHour();\n", "                } catch (Throwable ignored) {\n", "                }\n", "            }\n", "        }, 0, 1, TimeUnit.HOURS);\n", "\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                try {\n", "                    printAtMinutes();\n", "                } catch (Throwable ignored) {\n", "                }\n", "            }\n", "        }, Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis()), 1000 * 60, TimeUnit.MILLISECONDS);\n", "\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                try {\n", "                    printAtHour();\n", "                } catch (Throwable ignored) {\n", "                }\n", "            }\n", "        }, Math.abs(UtilAll.computeNextHourTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 60, TimeUnit.MILLISECONDS);\n", "\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                try {\n", "                    printAtDay();\n", "                } catch (Throwable ignored) {\n", "                }\n", "            }\n", "        }, Math.abs(UtilAll.computeNextMorningTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 60 * 24, TimeUnit.MILLISECONDS);\n", "    }\n", "\n", "    private void samplingInSeconds() {\n", "        Iterator<Entry<String, StatsItem>> it = this.statsItemTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, StatsItem> next = it.next();\n", "            next.getValue().samplingInSeconds();\n", "        }\n", "    }\n", "\n", "    private void samplingInMinutes() {\n", "        Iterator<Entry<String, StatsItem>> it = this.statsItemTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, StatsItem> next = it.next();\n", "            next.getValue().samplingInMinutes();\n", "        }\n", "    }\n", "\n", "    private void samplingInHour() {\n", "        Iterator<Entry<String, StatsItem>> it = this.statsItemTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, StatsItem> next = it.next();\n", "            next.getValue().samplingInHour();\n", "        }\n", "    }\n", "\n", "    private void printAtMinutes() {\n", "        Iterator<Entry<String, StatsItem>> it = this.statsItemTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, StatsItem> next = it.next();\n", "            next.getValue().printAtMinutes();\n", "        }\n", "    }\n", "\n", "    private void printAtHour() {\n", "        Iterator<Entry<String, StatsItem>> it = this.statsItemTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, StatsItem> next = it.next();\n", "            next.getValue().printAtHour();\n", "        }\n", "    }\n", "\n", "    private void printAtDay() {\n", "        Iterator<Entry<String, StatsItem>> it = this.statsItemTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, StatsItem> next = it.next();\n", "            next.getValue().printAtDay();\n", "        }\n", "    }\n", "\n", "    public void addValue(final String statsKey, final int incValue, final int incTimes) {\n", "        StatsItem statsItem = this.getAndCreateStatsItem(statsKey);\n", "        statsItem.getValue().addAndGet(incValue);\n", "        statsItem.getTimes().addAndGet(incTimes);\n", "    }\n", "\n", "    public void addRTValue(final String statsKey, final int incValue, final int incTimes) {\n", "        StatsItem statsItem = this.getAndCreateRTStatsItem(statsKey);\n", "        statsItem.getValue().addAndGet(incValue);\n", "        statsItem.getTimes().addAndGet(incTimes);\n", "    }\n", "\n", "    public void delValue(final String statsKey) {\n", "        StatsItem statsItem = this.statsItemTable.get(statsKey);\n", "        if (null != statsItem) {\n", "            this.statsItemTable.remove(statsKey);\n", "        }\n", "    }\n", "\n", "    public void delValueByPrefixKey(final String statsKey, String separator) {\n", "        Iterator<Entry<String, StatsItem>> it = this.statsItemTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, StatsItem> next = it.next();\n", "            if (next.getKey().startsWith(statsKey + separator)) {\n", "                it.remove();\n", "            }\n", "        }\n", "    }\n", "\n", "    public void delValueByInfixKey(final String statsKey, String separator) {\n", "        Iterator<Entry<String, StatsItem>> it = this.statsItemTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, StatsItem> next = it.next();\n", "            if (next.getKey().contains(separator + statsKey + separator)) {\n", "                it.remove();\n", "            }\n", "        }\n", "    }\n", "\n", "    public void delValueBySuffixKey(final String statsKey, String separator) {\n", "        Iterator<Entry<String, StatsItem>> it = this.statsItemTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, StatsItem> next = it.next();\n", "            if (next.getKey().endsWith(separator + statsKey)) {\n", "                it.remove();\n", "            }\n", "        }\n", "    }\n", "\n", "    public StatsItem getAndCreateStatsItem(final String statsKey) {\n", "        return getAndCreateItem(statsKey, false);\n", "    }\n", "\n", "    public StatsItem getAndCreateRTStatsItem(final String statsKey) {\n", "        return getAndCreateItem(statsKey, true);\n", "    }\n", "\n", "    public StatsItem getAndCreateItem(final String statsKey, boolean rtItem) {\n", "        StatsItem statsItem = this.statsItemTable.get(statsKey);\n", "        if (null == statsItem) {\n", "            if (rtItem) {\n", "                statsItem = new RTStatsItem(this.statsName, statsKey, this.scheduledExecutorService, this.log);\n", "            } else {\n", "                statsItem = new StatsItem(this.statsName, statsKey, this.scheduledExecutorService, this.log);\n", "            }\n", "            StatsItem prev = this.statsItemTable.putIfAbsent(statsKey, statsItem);\n", "\n", "            if (null != prev) {\n", "                statsItem = prev;\n", "                // statsItem.init();\n", "            }\n", "        }\n", "\n", "        return statsItem;\n", "    }\n", "\n", "    public StatsSnapshot getStatsDataInMinute(final String statsKey) {\n", "        StatsItem statsItem = this.statsItemTable.get(statsKey);\n", "        if (null != statsItem) {\n", "            return statsItem.getStatsDataInMinute();\n", "        }\n", "        return new StatsSnapshot();\n", "    }\n", "\n", "    public StatsSnapshot getStatsDataInHour(final String statsKey) {\n", "        StatsItem statsItem = this.statsItemTable.get(statsKey);\n", "        if (null != statsItem) {\n", "            return statsItem.getStatsDataInHour();\n", "        }\n", "        return new StatsSnapshot();\n", "    }\n", "\n", "    public StatsSnapshot getStatsDataInDay(final String statsKey) {\n", "        StatsItem statsItem = this.statsItemTable.get(statsKey);\n", "        if (null != statsItem) {\n", "            return statsItem.getStatsDataInDay();\n", "        }\n", "        return new StatsSnapshot();\n", "    }\n", "\n", "    public StatsItem getStatsItem(final String statsKey) {\n", "        return this.statsItemTable.get(statsKey);\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.stats;\n", "\n", "import java.util.concurrent.ArrayBlockingQueue;\n", "import java.util.concurrent.Executors;\n", "import java.util.concurrent.ScheduledExecutorService;\n", "import java.util.concurrent.ThreadPoolExecutor;\n", "import java.util.concurrent.TimeUnit;\n", "import java.util.concurrent.atomic.AtomicLong;\n", "import org.apache.rocketmq.common.ThreadFactoryImpl;\n", "import org.junit.After;\n", "import org.junit.Test;\n", "\n", "import static org.junit.Assert.assertEquals;\n", "\n", "public class StatsItemSetTest {\n", "\n", "    private ThreadPoolExecutor executor;\n", "    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n", "\n", "    @Test\n", "    public void test_getAndCreateStatsItem_multiThread() throws InterruptedException {\n", "        assertEquals(20L, test_unit().longValue());\n", "    }\n", "\n", "    @Test\n", "    public void test_getAndCreateMomentStatsItem_multiThread() throws InterruptedException {\n", "        assertEquals(10, test_unit_moment().longValue());\n", "    }\n", "\n", "    @Test\n", "    public void test_statsOfFirstStatisticsCycle() throws InterruptedException {\n", "        final String tpsStatKey = \"tpsTest\";\n", "        final String rtStatKey = \"rtTest\";\n", "        final StatsItemSet statsItemSet = new StatsItemSet(tpsStatKey, scheduler, null);\n", "        executor = new ThreadPoolExecutor(10, 20, 10, TimeUnit.SECONDS,\n", "            new ArrayBlockingQueue<Runnable>(100), new ThreadFactoryImpl(\"testMultiThread\"));\n", "        for (int i = 0; i < 10; i++) {\n", "            executor.submit(new Runnable() {\n", "                @Override\n", "                public void run() {\n", "                    statsItemSet.addValue(tpsStatKey, 2, 1);\n", "                    statsItemSet.addRTValue(rtStatKey, 2, 1);\n", "                }\n", "            });\n", "        }\n", "        while (true) {\n", "            if (executor.getCompletedTaskCount() == 10) {\n", "                break;\n", "            }\n", "            Thread.sleep(1000);\n", "        }\n", "        // simulate schedule task execution , tps stat\n", "        {\n", "            statsItemSet.getStatsItem(tpsStatKey).samplingInSeconds();\n", "            statsItemSet.getStatsItem(tpsStatKey).samplingInMinutes();\n", "            statsItemSet.getStatsItem(tpsStatKey).samplingInHour();\n", "\n", "            assertEquals(20L, statsItemSet.getStatsDataInMinute(tpsStatKey).getSum());\n", "            assertEquals(20L, statsItemSet.getStatsDataInHour(tpsStatKey).getSum());\n", "            assertEquals(20L, statsItemSet.getStatsDataInDay(tpsStatKey).getSum());\n", "            assertEquals(10L, statsItemSet.getStatsDataInDay(tpsStatKey).getTimes());\n", "            assertEquals(10L, statsItemSet.getStatsDataInHour(tpsStatKey).getTimes());\n", "            assertEquals(10L, statsItemSet.getStatsDataInDay(tpsStatKey).getTimes());\n", "        }\n", "\n", "        // simulate schedule task execution , rt stat\n", "        {\n", "            statsItemSet.getStatsItem(rtStatKey).samplingInSeconds();\n", "            statsItemSet.getStatsItem(rtStatKey).samplingInMinutes();\n", "            statsItemSet.getStatsItem(rtStatKey).samplingInHour();\n", "\n", "            assertEquals(20L, statsItemSet.getStatsDataInMinute(rtStatKey).getSum());\n", "            assertEquals(20L, statsItemSet.getStatsDataInHour(rtStatKey).getSum());\n", "            assertEquals(20L, statsItemSet.getStatsDataInDay(rtStatKey).getSum());\n", "            assertEquals(10L, statsItemSet.getStatsDataInDay(rtStatKey).getTimes());\n", "            assertEquals(10L, statsItemSet.getStatsDataInHour(rtStatKey).getTimes());\n", "            assertEquals(10L, statsItemSet.getStatsDataInDay(rtStatKey).getTimes());\n", "        }\n", "    }\n", "\n", "    private AtomicLong test_unit() throws InterruptedException {\n", "        final StatsItemSet statsItemSet = new StatsItemSet(\"topicTest\", scheduler, null);\n", "        executor = new ThreadPoolExecutor(10, 20, 10, TimeUnit.SECONDS,\n", "            new ArrayBlockingQueue<Runnable>(100), new ThreadFactoryImpl(\"testMultiThread\"));\n", "        for (int i = 0; i < 10; i++) {\n", "            executor.submit(new Runnable() {\n", "                @Override\n", "                public void run() {\n", "                    statsItemSet.addValue(\"topicTest\", 2, 1);\n", "                }\n", "            });\n", "        }\n", "        while (true) {\n", "            if (executor.getCompletedTaskCount() == 10) {\n", "                break;\n", "            }\n", "            Thread.sleep(1000);\n", "        }\n", "        return statsItemSet.getStatsItem(\"topicTest\").getValue();\n", "    }\n", "\n", "    private AtomicLong test_unit_moment() throws InterruptedException {\n", "        final MomentStatsItemSet statsItemSet = new MomentStatsItemSet(\"topicTest\", scheduler, null);\n", "        executor = new ThreadPoolExecutor(10, 20, 10, TimeUnit.SECONDS,\n", "            new ArrayBlockingQueue<Runnable>(100), new ThreadFactoryImpl(\"testMultiThread\"));\n", "        for (int i = 0; i < 10; i++) {\n", "            executor.submit(new Runnable() {\n", "                @Override\n", "                public void run() {\n", "                    statsItemSet.setValue(\"test\", 10);\n", "                }\n", "            });\n", "        }\n", "        while (true) {\n", "            if (executor.getCompletedTaskCount() == 10) {\n", "                break;\n", "            }\n", "            Thread.sleep(1000);\n", "        }\n", "        return statsItemSet.getAndCreateStatsItem(\"test\").getValue();\n", "    }\n", "\n", "    @After\n", "    public void shutdown() {\n", "        executor.shutdown();\n", "    }\n", "}"], "method_lines_dic": {"StatsItemSet::::init()": [44, 105], "StatsItemSet::::samplingInSeconds()": [107, 113], "StatsItemSet::::samplingInMinutes()": [115, 121], "StatsItemSet::::samplingInHour()": [123, 129], "StatsItemSet::::printAtMinutes()": [131, 137], "StatsItemSet::::printAtHour()": [139, 145], "StatsItemSet::::printAtDay()": [147, 153], "StatsItemSet::::addValue(java.lang.String,int,int)": [155, 159], "StatsItemSet::::addRTValue(java.lang.String,int,int)": [161, 165], "StatsItemSet::::delValue(java.lang.String)": [167, 172], "StatsItemSet::::delValueByPrefixKey(java.lang.String,java.lang.String)": [174, 182], "StatsItemSet::::delValueByInfixKey(java.lang.String,java.lang.String)": [184, 192], "StatsItemSet::::delValueBySuffixKey(java.lang.String,java.lang.String)": [194, 202], "StatsItemSet::::getAndCreateStatsItem(java.lang.String)": [204, 206], "StatsItemSet::::getAndCreateRTStatsItem(java.lang.String)": [208, 210], "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)": [212, 229], "StatsItemSet::::getStatsDataInMinute(java.lang.String)": [231, 237], "StatsItemSet::::getStatsDataInHour(java.lang.String)": [239, 245], "StatsItemSet::::getStatsDataInDay(java.lang.String)": [247, 253], "StatsItemSet::::getStatsItem(java.lang.String)": [255, 257]}, "test_method_lines_dic": {"StatsItemSetTest::::test_getAndCreateStatsItem_multiThread()": [37, 40], "StatsItemSetTest::::test_getAndCreateMomentStatsItem_multiThread()": [42, 45], "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()": [47, 96], "StatsItemSetTest::::test_unit()": [98, 117], "StatsItemSetTest::::test_unit_moment()": [119, 138], "StatsItemSetTest::::shutdown()": [140, 143]}, "reverse_method_lines_dic": {"44": "StatsItemSet::::init()", "45": "StatsItemSet::::init()", "46": "StatsItemSet::::init()", "47": "StatsItemSet::::init()", "48": "StatsItemSet::::init()", "49": "StatsItemSet::::init()", "50": "StatsItemSet::::init()", "51": "StatsItemSet::::init()", "52": "StatsItemSet::::init()", "53": "StatsItemSet::::init()", "54": "StatsItemSet::::init()", "55": "StatsItemSet::::init()", "56": "StatsItemSet::::init()", "57": "StatsItemSet::::init()", "58": "StatsItemSet::::init()", "59": "StatsItemSet::::init()", "60": "StatsItemSet::::init()", "61": "StatsItemSet::::init()", "62": "StatsItemSet::::init()", "63": "StatsItemSet::::init()", "64": "StatsItemSet::::init()", "65": "StatsItemSet::::init()", "66": "StatsItemSet::::init()", "67": "StatsItemSet::::init()", "68": "StatsItemSet::::init()", "69": "StatsItemSet::::init()", "70": "StatsItemSet::::init()", "71": "StatsItemSet::::init()", "72": "StatsItemSet::::init()", "73": "StatsItemSet::::init()", "74": "StatsItemSet::::init()", "75": "StatsItemSet::::init()", "76": "StatsItemSet::::init()", "77": "StatsItemSet::::init()", "78": "StatsItemSet::::init()", "79": "StatsItemSet::::init()", "80": "StatsItemSet::::init()", "81": "StatsItemSet::::init()", "82": "StatsItemSet::::init()", "83": "StatsItemSet::::init()", "84": "StatsItemSet::::init()", "85": "StatsItemSet::::init()", "86": "StatsItemSet::::init()", "87": "StatsItemSet::::init()", "88": "StatsItemSet::::init()", "89": "StatsItemSet::::init()", "90": "StatsItemSet::::init()", "91": "StatsItemSet::::init()", "92": "StatsItemSet::::init()", "93": "StatsItemSet::::init()", "94": "StatsItemSet::::init()", "95": "StatsItemSet::::init()", "96": "StatsItemSet::::init()", "97": "StatsItemSet::::init()", "98": "StatsItemSet::::init()", "99": "StatsItemSet::::init()", "100": "StatsItemSet::::init()", "101": "StatsItemSet::::init()", "102": "StatsItemSet::::init()", "103": "StatsItemSet::::init()", "104": "StatsItemSet::::init()", "105": "StatsItemSet::::init()", "107": "StatsItemSet::::samplingInSeconds()", "108": "StatsItemSet::::samplingInSeconds()", "109": "StatsItemSet::::samplingInSeconds()", "110": "StatsItemSet::::samplingInSeconds()", "111": "StatsItemSet::::samplingInSeconds()", "112": "StatsItemSet::::samplingInSeconds()", "113": "StatsItemSet::::samplingInSeconds()", "115": "StatsItemSet::::samplingInMinutes()", "116": "StatsItemSet::::samplingInMinutes()", "117": "StatsItemSet::::samplingInMinutes()", "118": "StatsItemSet::::samplingInMinutes()", "119": "StatsItemSet::::samplingInMinutes()", "120": "StatsItemSet::::samplingInMinutes()", "121": "StatsItemSet::::samplingInMinutes()", "123": "StatsItemSet::::samplingInHour()", "124": "StatsItemSet::::samplingInHour()", "125": "StatsItemSet::::samplingInHour()", "126": "StatsItemSet::::samplingInHour()", "127": "StatsItemSet::::samplingInHour()", "128": "StatsItemSet::::samplingInHour()", "129": "StatsItemSet::::samplingInHour()", "131": "StatsItemSet::::printAtMinutes()", "132": "StatsItemSet::::printAtMinutes()", "133": "StatsItemSet::::printAtMinutes()", "134": "StatsItemSet::::printAtMinutes()", "135": "StatsItemSet::::printAtMinutes()", "136": "StatsItemSet::::printAtMinutes()", "137": "StatsItemSet::::printAtMinutes()", "139": "StatsItemSet::::printAtHour()", "140": "StatsItemSet::::printAtHour()", "141": "StatsItemSet::::printAtHour()", "142": "StatsItemSet::::printAtHour()", "143": "StatsItemSet::::printAtHour()", "144": "StatsItemSet::::printAtHour()", "145": "StatsItemSet::::printAtHour()", "147": "StatsItemSet::::printAtDay()", "148": "StatsItemSet::::printAtDay()", "149": "StatsItemSet::::printAtDay()", "150": "StatsItemSet::::printAtDay()", "151": "StatsItemSet::::printAtDay()", "152": "StatsItemSet::::printAtDay()", "153": "StatsItemSet::::printAtDay()", "155": "StatsItemSet::::addValue(java.lang.String,int,int)", "156": "StatsItemSet::::addValue(java.lang.String,int,int)", "157": "StatsItemSet::::addValue(java.lang.String,int,int)", "158": "StatsItemSet::::addValue(java.lang.String,int,int)", "159": "StatsItemSet::::addValue(java.lang.String,int,int)", "161": "StatsItemSet::::addRTValue(java.lang.String,int,int)", "162": "StatsItemSet::::addRTValue(java.lang.String,int,int)", "163": "StatsItemSet::::addRTValue(java.lang.String,int,int)", "164": "StatsItemSet::::addRTValue(java.lang.String,int,int)", "165": "StatsItemSet::::addRTValue(java.lang.String,int,int)", "167": "StatsItemSet::::delValue(java.lang.String)", "168": "StatsItemSet::::delValue(java.lang.String)", "169": "StatsItemSet::::delValue(java.lang.String)", "170": "StatsItemSet::::delValue(java.lang.String)", "171": "StatsItemSet::::delValue(java.lang.String)", "172": "StatsItemSet::::delValue(java.lang.String)", "174": "StatsItemSet::::delValueByPrefixKey(java.lang.String,java.lang.String)", "175": "StatsItemSet::::delValueByPrefixKey(java.lang.String,java.lang.String)", "176": "StatsItemSet::::delValueByPrefixKey(java.lang.String,java.lang.String)", "177": "StatsItemSet::::delValueByPrefixKey(java.lang.String,java.lang.String)", "178": "StatsItemSet::::delValueByPrefixKey(java.lang.String,java.lang.String)", "179": "StatsItemSet::::delValueByPrefixKey(java.lang.String,java.lang.String)", "180": "StatsItemSet::::delValueByPrefixKey(java.lang.String,java.lang.String)", "181": "StatsItemSet::::delValueByPrefixKey(java.lang.String,java.lang.String)", "182": "StatsItemSet::::delValueByPrefixKey(java.lang.String,java.lang.String)", "184": "StatsItemSet::::delValueByInfixKey(java.lang.String,java.lang.String)", "185": "StatsItemSet::::delValueByInfixKey(java.lang.String,java.lang.String)", "186": "StatsItemSet::::delValueByInfixKey(java.lang.String,java.lang.String)", "187": "StatsItemSet::::delValueByInfixKey(java.lang.String,java.lang.String)", "188": "StatsItemSet::::delValueByInfixKey(java.lang.String,java.lang.String)", "189": "StatsItemSet::::delValueByInfixKey(java.lang.String,java.lang.String)", "190": "StatsItemSet::::delValueByInfixKey(java.lang.String,java.lang.String)", "191": "StatsItemSet::::delValueByInfixKey(java.lang.String,java.lang.String)", "192": "StatsItemSet::::delValueByInfixKey(java.lang.String,java.lang.String)", "194": "StatsItemSet::::delValueBySuffixKey(java.lang.String,java.lang.String)", "195": "StatsItemSet::::delValueBySuffixKey(java.lang.String,java.lang.String)", "196": "StatsItemSet::::delValueBySuffixKey(java.lang.String,java.lang.String)", "197": "StatsItemSet::::delValueBySuffixKey(java.lang.String,java.lang.String)", "198": "StatsItemSet::::delValueBySuffixKey(java.lang.String,java.lang.String)", "199": "StatsItemSet::::delValueBySuffixKey(java.lang.String,java.lang.String)", "200": "StatsItemSet::::delValueBySuffixKey(java.lang.String,java.lang.String)", "201": "StatsItemSet::::delValueBySuffixKey(java.lang.String,java.lang.String)", "202": "StatsItemSet::::delValueBySuffixKey(java.lang.String,java.lang.String)", "204": "StatsItemSet::::getAndCreateStatsItem(java.lang.String)", "205": "StatsItemSet::::getAndCreateStatsItem(java.lang.String)", "206": "StatsItemSet::::getAndCreateStatsItem(java.lang.String)", "208": "StatsItemSet::::getAndCreateRTStatsItem(java.lang.String)", "209": "StatsItemSet::::getAndCreateRTStatsItem(java.lang.String)", "210": "StatsItemSet::::getAndCreateRTStatsItem(java.lang.String)", "212": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "213": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "214": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "215": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "216": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "217": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "218": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "219": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "220": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "221": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "222": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "223": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "224": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "225": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "226": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "227": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "228": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "229": "StatsItemSet::::getAndCreateItem(java.lang.String,boolean)", "231": "StatsItemSet::::getStatsDataInMinute(java.lang.String)", "232": "StatsItemSet::::getStatsDataInMinute(java.lang.String)", "233": "StatsItemSet::::getStatsDataInMinute(java.lang.String)", "234": "StatsItemSet::::getStatsDataInMinute(java.lang.String)", "235": "StatsItemSet::::getStatsDataInMinute(java.lang.String)", "236": "StatsItemSet::::getStatsDataInMinute(java.lang.String)", "237": "StatsItemSet::::getStatsDataInMinute(java.lang.String)", "239": "StatsItemSet::::getStatsDataInHour(java.lang.String)", "240": "StatsItemSet::::getStatsDataInHour(java.lang.String)", "241": "StatsItemSet::::getStatsDataInHour(java.lang.String)", "242": "StatsItemSet::::getStatsDataInHour(java.lang.String)", "243": "StatsItemSet::::getStatsDataInHour(java.lang.String)", "244": "StatsItemSet::::getStatsDataInHour(java.lang.String)", "245": "StatsItemSet::::getStatsDataInHour(java.lang.String)", "247": "StatsItemSet::::getStatsDataInDay(java.lang.String)", "248": "StatsItemSet::::getStatsDataInDay(java.lang.String)", "249": "StatsItemSet::::getStatsDataInDay(java.lang.String)", "250": "StatsItemSet::::getStatsDataInDay(java.lang.String)", "251": "StatsItemSet::::getStatsDataInDay(java.lang.String)", "252": "StatsItemSet::::getStatsDataInDay(java.lang.String)", "253": "StatsItemSet::::getStatsDataInDay(java.lang.String)", "255": "StatsItemSet::::getStatsItem(java.lang.String)", "256": "StatsItemSet::::getStatsItem(java.lang.String)", "257": "StatsItemSet::::getStatsItem(java.lang.String)"}, "test_reverse_method_lines_dic": {"37": "StatsItemSetTest::::test_getAndCreateStatsItem_multiThread()", "38": "StatsItemSetTest::::test_getAndCreateStatsItem_multiThread()", "39": "StatsItemSetTest::::test_getAndCreateStatsItem_multiThread()", "40": "StatsItemSetTest::::test_getAndCreateStatsItem_multiThread()", "42": "StatsItemSetTest::::test_getAndCreateMomentStatsItem_multiThread()", "43": "StatsItemSetTest::::test_getAndCreateMomentStatsItem_multiThread()", "44": "StatsItemSetTest::::test_getAndCreateMomentStatsItem_multiThread()", "45": "StatsItemSetTest::::test_getAndCreateMomentStatsItem_multiThread()", "47": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "48": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "49": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "50": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "51": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "52": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "53": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "54": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "55": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "56": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "57": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "58": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "59": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "60": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "61": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "62": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "63": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "64": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "65": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "66": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "67": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "68": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "69": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "70": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "71": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "72": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "73": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "74": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "75": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "76": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "77": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "78": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "79": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "80": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "81": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "82": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "83": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "84": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "85": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "86": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "87": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "88": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "89": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "90": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "91": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "92": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "93": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "94": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "95": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "96": "StatsItemSetTest::::test_statsOfFirstStatisticsCycle()", "98": "StatsItemSetTest::::test_unit()", "99": "StatsItemSetTest::::test_unit()", "100": "StatsItemSetTest::::test_unit()", "101": "StatsItemSetTest::::test_unit()", "102": "StatsItemSetTest::::test_unit()", "103": "StatsItemSetTest::::test_unit()", "104": "StatsItemSetTest::::test_unit()", "105": "StatsItemSetTest::::test_unit()", "106": "StatsItemSetTest::::test_unit()", "107": "StatsItemSetTest::::test_unit()", "108": "StatsItemSetTest::::test_unit()", "109": "StatsItemSetTest::::test_unit()", "110": "StatsItemSetTest::::test_unit()", "111": "StatsItemSetTest::::test_unit()", "112": "StatsItemSetTest::::test_unit()", "113": "StatsItemSetTest::::test_unit()", "114": "StatsItemSetTest::::test_unit()", "115": "StatsItemSetTest::::test_unit()", "116": "StatsItemSetTest::::test_unit()", "117": "StatsItemSetTest::::test_unit()", "119": "StatsItemSetTest::::test_unit_moment()", "120": "StatsItemSetTest::::test_unit_moment()", "121": "StatsItemSetTest::::test_unit_moment()", "122": "StatsItemSetTest::::test_unit_moment()", "123": "StatsItemSetTest::::test_unit_moment()", "124": "StatsItemSetTest::::test_unit_moment()", "125": "StatsItemSetTest::::test_unit_moment()", "126": "StatsItemSetTest::::test_unit_moment()", "127": "StatsItemSetTest::::test_unit_moment()", "128": "StatsItemSetTest::::test_unit_moment()", "129": "StatsItemSetTest::::test_unit_moment()", "130": "StatsItemSetTest::::test_unit_moment()", "131": "StatsItemSetTest::::test_unit_moment()", "132": "StatsItemSetTest::::test_unit_moment()", "133": "StatsItemSetTest::::test_unit_moment()", "134": "StatsItemSetTest::::test_unit_moment()", "135": "StatsItemSetTest::::test_unit_moment()", "136": "StatsItemSetTest::::test_unit_moment()", "137": "StatsItemSetTest::::test_unit_moment()", "138": "StatsItemSetTest::::test_unit_moment()", "140": "StatsItemSetTest::::shutdown()", "141": "StatsItemSetTest::::shutdown()", "142": "StatsItemSetTest::::shutdown()", "143": "StatsItemSetTest::::shutdown()"}, "tests": [{"test_lines": [37, 40], "covered_lines": [30, 37, 38, 39, 40, 41, 42, 46, 50, 52, 53, 56, 60, 62, 63, 66, 70, 72, 73, 76, 84, 86, 94, 96, 104, 105, 108, 109, 113, 116, 117, 121, 124, 125, 129, 156, 157, 158, 159, 205, 213, 214, 215, 218, 220, 222, 223, 228, 256]}, {"test_lines": [47, 96], "covered_lines": [30, 37, 38, 39, 40, 41, 42, 46, 50, 52, 53, 56, 60, 62, 63, 66, 70, 72, 73, 76, 84, 86, 94, 96, 104, 105, 108, 109, 113, 116, 117, 121, 124, 125, 129, 156, 157, 158, 159, 162, 163, 164, 165, 205, 209, 213, 214, 215, 216, 218, 220, 222, 223, 228, 232, 233, 234, 240, 241, 242, 248, 249, 250, 256]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/utils/IOTinyUtils.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.utils;\n", "\n", "import java.io.BufferedReader;\n", "import java.io.CharArrayWriter;\n", "import java.io.File;\n", "import java.io.FileInputStream;\n", "import java.io.FileOutputStream;\n", "import java.io.IOException;\n", "import java.io.InputStream;\n", "import java.io.InputStreamReader;\n", "import java.io.OutputStream;\n", "import java.io.Reader;\n", "import java.io.Writer;\n", "import java.nio.channels.FileChannel;\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "import org.apache.rocketmq.remoting.common.RemotingHelper;\n", "\n", "public class IOTinyUtils {\n", "\n", "    static public String toString(InputStream input, String encoding) throws IOException {\n", "        return (null == encoding) ? toString(new InputStreamReader(input, RemotingHelper.DEFAULT_CHARSET)) : toString(new InputStreamReader(\n", "            input, encoding));\n", "    }\n", "\n", "    static public String toString(Reader reader) throws IOException {\n", "        CharArrayWriter sw = new CharArrayWriter();\n", "        copy(reader, sw);\n", "        return sw.toString();\n", "    }\n", "\n", "    static public long copy(Reader input, Writer output) throws IOException {\n", "        char[] buffer = new char[1 << 12];\n", "        long count = 0;\n", "        for (int n = 0; (n = input.read(buffer)) >= 0; ) {\n", "            output.write(buffer, 0, n);\n", "            count += n;\n", "        }\n", "        return count;\n", "    }\n", "\n", "    static public List<String> readLines(Reader input) throws IOException {\n", "        BufferedReader reader = toBufferedReader(input);\n", "        List<String> list = new ArrayList<String>();\n", "        String line;\n", "        for (; ; ) {\n", "            line = reader.readLine();\n", "            if (null != line) {\n", "                list.add(line);\n", "            } else {\n", "                break;\n", "            }\n", "        }\n", "        return list;\n", "    }\n", "\n", "    static private BufferedReader toBufferedReader(Reader reader) {\n", "        return reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);\n", "    }\n", "\n", "    static public void copyFile(String source, String target) throws IOException {\n", "        File sf = new File(source);\n", "        if (!sf.exists()) {\n", "            throw new IllegalArgumentException(\"source file does not exist.\");\n", "        }\n", "        File tf = new File(target);\n", "        tf.getParentFile().mkdirs();\n", "        if (!tf.exists() && !tf.createNewFile()) {\n", "            throw new RuntimeException(\"failed to create target file.\");\n", "        }\n", "\n", "        FileChannel sc = null;\n", "        FileChannel tc = null;\n", "        try {\n", "            tc = new FileOutputStream(tf).getChannel();\n", "            sc = new FileInputStream(sf).getChannel();\n", "            sc.transferTo(0, sc.size(), tc);\n", "        } finally {\n", "            if (null != sc) {\n", "                sc.close();\n", "            }\n", "            if (null != tc) {\n", "                tc.close();\n", "            }\n", "        }\n", "    }\n", "\n", "    public static void delete(File fileOrDir) throws IOException {\n", "        if (fileOrDir == null) {\n", "            return;\n", "        }\n", "\n", "        if (fileOrDir.isDirectory()) {\n", "            cleanDirectory(fileOrDir);\n", "        }\n", "\n", "        fileOrDir.delete();\n", "    }\n", "\n", "    public static void cleanDirectory(File directory) throws IOException {\n", "        if (!directory.exists()) {\n", "            String message = directory + \" does not exist\";\n", "            throw new IllegalArgumentException(message);\n", "        }\n", "\n", "        if (!directory.isDirectory()) {\n", "            String message = directory + \" is not a directory\";\n", "            throw new IllegalArgumentException(message);\n", "        }\n", "\n", "        File[] files = directory.listFiles();\n", "        if (files == null) { // null if security restricted\n", "            throw new IOException(\"Failed to list contents of \" + directory);\n", "        }\n", "\n", "        IOException exception = null;\n", "        for (File file : files) {\n", "            try {\n", "                delete(file);\n", "            } catch (IOException ioe) {\n", "                exception = ioe;\n", "            }\n", "        }\n", "\n", "        if (null != exception) {\n", "            throw exception;\n", "        }\n", "    }\n", "\n", "    public static void writeStringToFile(File file, String data, String encoding) throws IOException {\n", "        OutputStream os = null;\n", "        try {\n", "            os = new FileOutputStream(file);\n", "            os.write(data.getBytes(encoding));\n", "        } finally {\n", "            if (null != os) {\n", "                os.close();\n", "            }\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.utils;\n", "\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.remoting.common.RemotingHelper;\n", "\n", "import static org.junit.Assert.*;\n", "\n", "import org.junit.After;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "\n", "import java.io.*;\n", "import java.lang.reflect.Method;\n", "import java.util.List;\n", "\n", "public class IOTinyUtilsTest {\n", "\n", "    private String testRootDir = System.getProperty(\"user.home\") + File.separator + \"iotinyutilstest\";\n", "\n", "    @Before\n", "    public void init() {\n", "        File dir = new File(testRootDir);\n", "        if (dir.exists()) {\n", "            UtilAll.deleteFile(dir);\n", "        }\n", "\n", "        dir.mkdirs();\n", "    }\n", "\n", "    @After\n", "    public void destory() {\n", "        File file = new File(testRootDir);\n", "        UtilAll.deleteFile(file);\n", "    }\n", "\n", "\n", "    @Test\n", "    public void testToString() throws Exception {\n", "        byte[] b = \"testToString\".getBytes(RemotingHelper.DEFAULT_CHARSET);\n", "        InputStream is = new ByteArrayInputStream(b);\n", "\n", "        String str = IOTinyUtils.toString(is, null);\n", "        assertEquals(\"testToString\", str);\n", "\n", "        is = new ByteArrayInputStream(b);\n", "        str = IOTinyUtils.toString(is, RemotingHelper.DEFAULT_CHARSET);\n", "        assertEquals(\"testToString\", str);\n", "\n", "        is = new ByteArrayInputStream(b);\n", "        Reader isr = new InputStreamReader(is, RemotingHelper.DEFAULT_CHARSET);\n", "        str = IOTinyUtils.toString(isr);\n", "        assertEquals(\"testToString\", str);\n", "    }\n", "\n", "\n", "    @Test\n", "    public void testCopy() throws Exception {\n", "        char[] arr = \"testToString\".toCharArray();\n", "        Reader reader = new CharArrayReader(arr);\n", "        Writer writer = new CharArrayWriter();\n", "\n", "        long count = IOTinyUtils.copy(reader, writer);\n", "        assertEquals(arr.length, count);\n", "    }\n", "\n", "    @Test\n", "    public void testReadLines() throws Exception {\n", "        StringBuffer sb = new StringBuffer();\n", "        for (int i = 0; i < 10; i++) {\n", "            sb.append(\"testReadLines\").append(\"\\n\");\n", "        }\n", "\n", "        StringReader reader = new StringReader(sb.toString());\n", "        List<String> lines = IOTinyUtils.readLines(reader);\n", "\n", "        assertEquals(10, lines.size());\n", "    }\n", "\n", "    @Test\n", "    public void testToBufferedReader() throws Exception {\n", "        StringBuffer sb = new StringBuffer();\n", "        for (int i = 0; i < 10; i++) {\n", "            sb.append(\"testToBufferedReader\").append(\"\\n\");\n", "        }\n", "\n", "        StringReader reader = new StringReader(sb.toString());\n", "        Method method = IOTinyUtils.class.getDeclaredMethod(\"toBufferedReader\", new Class[]{Reader.class});\n", "        method.setAccessible(true);\n", "        Object bReader = method.invoke(IOTinyUtils.class, reader);\n", "\n", "        assertTrue(bReader instanceof BufferedReader);\n", "    }\n", "\n", "    @Test\n", "    public void testWriteStringToFile() throws Exception {\n", "        File file = new File(testRootDir, \"testWriteStringToFile\");\n", "        assertTrue(!file.exists());\n", "\n", "        IOTinyUtils.writeStringToFile(file, \"testWriteStringToFile\", RemotingHelper.DEFAULT_CHARSET);\n", "\n", "        assertTrue(file.exists());\n", "    }\n", "\n", "    @Test\n", "    public void testCleanDirectory() throws Exception {\n", "        for (int i = 0; i < 10; i++) {\n", "            IOTinyUtils.writeStringToFile(new File(testRootDir, \"testCleanDirectory\" + i), \"testCleanDirectory\", RemotingHelper.DEFAULT_CHARSET);\n", "        }\n", "\n", "        File dir = new File(testRootDir);\n", "        assertTrue(dir.exists() && dir.isDirectory());\n", "        assertTrue(dir.listFiles().length > 0);\n", "\n", "        IOTinyUtils.cleanDirectory(new File(testRootDir));\n", "\n", "        assertTrue(dir.listFiles().length == 0);\n", "    }\n", "\n", "    @Test\n", "    public void testDelete() throws Exception {\n", "        for (int i = 0; i < 10; i++) {\n", "            IOTinyUtils.writeStringToFile(new File(testRootDir, \"testDelete\" + i), \"testCleanDirectory\", RemotingHelper.DEFAULT_CHARSET);\n", "        }\n", "\n", "        File dir = new File(testRootDir);\n", "        assertTrue(dir.exists() && dir.isDirectory());\n", "        assertTrue(dir.listFiles().length > 0);\n", "\n", "        IOTinyUtils.delete(new File(testRootDir));\n", "\n", "        assertTrue(!dir.exists());\n", "    }\n", "\n", "    @Test\n", "    public void testCopyFile() throws Exception {\n", "        File source = new File(testRootDir, \"soruce\");\n", "        String target = testRootDir + File.separator + \"dest\";\n", "\n", "        IOTinyUtils.writeStringToFile(source, \"testCopyFile\", RemotingHelper.DEFAULT_CHARSET);\n", "\n", "        IOTinyUtils.copyFile(source.getCanonicalPath(), target);\n", "\n", "        File dest = new File(target);\n", "        assertTrue(dest.exists());\n", "    }\n", "}\n"], "method_lines_dic": {"IOTinyUtils::::toString(java.io.InputStream,java.lang.String)": [38, 41], "IOTinyUtils::::toString(java.io.Reader)": [43, 47], "IOTinyUtils::::copy(java.io.Reader,java.io.Writer)": [49, 57], "IOTinyUtils::::readLines(java.io.Reader)": [59, 72], "IOTinyUtils::::toBufferedReader(java.io.Reader)": [74, 76], "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)": [78, 103], "IOTinyUtils::::delete(java.io.File)": [105, 115], "IOTinyUtils::::cleanDirectory(java.io.File)": [117, 145], "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)": [147, 157]}, "test_method_lines_dic": {"IOTinyUtilsTest::::init()": [37, 45], "IOTinyUtilsTest::::destory()": [47, 51], "IOTinyUtilsTest::::testToString()": [54, 70], "IOTinyUtilsTest::::testCopy()": [73, 81], "IOTinyUtilsTest::::testReadLines()": [83, 94], "IOTinyUtilsTest::::testToBufferedReader()": [96, 109], "IOTinyUtilsTest::::testWriteStringToFile()": [111, 119], "IOTinyUtilsTest::::testCleanDirectory()": [121, 134], "IOTinyUtilsTest::::testDelete()": [136, 149], "IOTinyUtilsTest::::testCopyFile()": [151, 162]}, "reverse_method_lines_dic": {"38": "IOTinyUtils::::toString(java.io.InputStream,java.lang.String)", "39": "IOTinyUtils::::toString(java.io.InputStream,java.lang.String)", "40": "IOTinyUtils::::toString(java.io.InputStream,java.lang.String)", "41": "IOTinyUtils::::toString(java.io.InputStream,java.lang.String)", "43": "IOTinyUtils::::toString(java.io.Reader)", "44": "IOTinyUtils::::toString(java.io.Reader)", "45": "IOTinyUtils::::toString(java.io.Reader)", "46": "IOTinyUtils::::toString(java.io.Reader)", "47": "IOTinyUtils::::toString(java.io.Reader)", "49": "IOTinyUtils::::copy(java.io.Reader,java.io.Writer)", "50": "IOTinyUtils::::copy(java.io.Reader,java.io.Writer)", "51": "IOTinyUtils::::copy(java.io.Reader,java.io.Writer)", "52": "IOTinyUtils::::copy(java.io.Reader,java.io.Writer)", "53": "IOTinyUtils::::copy(java.io.Reader,java.io.Writer)", "54": "IOTinyUtils::::copy(java.io.Reader,java.io.Writer)", "55": "IOTinyUtils::::copy(java.io.Reader,java.io.Writer)", "56": "IOTinyUtils::::copy(java.io.Reader,java.io.Writer)", "57": "IOTinyUtils::::copy(java.io.Reader,java.io.Writer)", "59": "IOTinyUtils::::readLines(java.io.Reader)", "60": "IOTinyUtils::::readLines(java.io.Reader)", "61": "IOTinyUtils::::readLines(java.io.Reader)", "62": "IOTinyUtils::::readLines(java.io.Reader)", "63": "IOTinyUtils::::readLines(java.io.Reader)", "64": "IOTinyUtils::::readLines(java.io.Reader)", "65": "IOTinyUtils::::readLines(java.io.Reader)", "66": "IOTinyUtils::::readLines(java.io.Reader)", "67": "IOTinyUtils::::readLines(java.io.Reader)", "68": "IOTinyUtils::::readLines(java.io.Reader)", "69": "IOTinyUtils::::readLines(java.io.Reader)", "70": "IOTinyUtils::::readLines(java.io.Reader)", "71": "IOTinyUtils::::readLines(java.io.Reader)", "72": "IOTinyUtils::::readLines(java.io.Reader)", "74": "IOTinyUtils::::toBufferedReader(java.io.Reader)", "75": "IOTinyUtils::::toBufferedReader(java.io.Reader)", "76": "IOTinyUtils::::toBufferedReader(java.io.Reader)", "78": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "79": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "80": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "81": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "82": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "83": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "84": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "85": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "86": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "87": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "88": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "89": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "90": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "91": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "92": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "93": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "94": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "95": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "96": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "97": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "98": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "99": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "100": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "101": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "102": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "103": "IOTinyUtils::::copyFile(java.lang.String,java.lang.String)", "105": "IOTinyUtils::::delete(java.io.File)", "106": "IOTinyUtils::::delete(java.io.File)", "107": "IOTinyUtils::::delete(java.io.File)", "108": "IOTinyUtils::::delete(java.io.File)", "109": "IOTinyUtils::::delete(java.io.File)", "110": "IOTinyUtils::::delete(java.io.File)", "111": "IOTinyUtils::::delete(java.io.File)", "112": "IOTinyUtils::::delete(java.io.File)", "113": "IOTinyUtils::::delete(java.io.File)", "114": "IOTinyUtils::::delete(java.io.File)", "115": "IOTinyUtils::::delete(java.io.File)", "117": "IOTinyUtils::::cleanDirectory(java.io.File)", "118": "IOTinyUtils::::cleanDirectory(java.io.File)", "119": "IOTinyUtils::::cleanDirectory(java.io.File)", "120": "IOTinyUtils::::cleanDirectory(java.io.File)", "121": "IOTinyUtils::::cleanDirectory(java.io.File)", "122": "IOTinyUtils::::cleanDirectory(java.io.File)", "123": "IOTinyUtils::::cleanDirectory(java.io.File)", "124": "IOTinyUtils::::cleanDirectory(java.io.File)", "125": "IOTinyUtils::::cleanDirectory(java.io.File)", "126": "IOTinyUtils::::cleanDirectory(java.io.File)", "127": "IOTinyUtils::::cleanDirectory(java.io.File)", "128": "IOTinyUtils::::cleanDirectory(java.io.File)", "129": "IOTinyUtils::::cleanDirectory(java.io.File)", "130": "IOTinyUtils::::cleanDirectory(java.io.File)", "131": "IOTinyUtils::::cleanDirectory(java.io.File)", "132": "IOTinyUtils::::cleanDirectory(java.io.File)", "133": "IOTinyUtils::::cleanDirectory(java.io.File)", "134": "IOTinyUtils::::cleanDirectory(java.io.File)", "135": "IOTinyUtils::::cleanDirectory(java.io.File)", "136": "IOTinyUtils::::cleanDirectory(java.io.File)", "137": "IOTinyUtils::::cleanDirectory(java.io.File)", "138": "IOTinyUtils::::cleanDirectory(java.io.File)", "139": "IOTinyUtils::::cleanDirectory(java.io.File)", "140": "IOTinyUtils::::cleanDirectory(java.io.File)", "141": "IOTinyUtils::::cleanDirectory(java.io.File)", "142": "IOTinyUtils::::cleanDirectory(java.io.File)", "143": "IOTinyUtils::::cleanDirectory(java.io.File)", "144": "IOTinyUtils::::cleanDirectory(java.io.File)", "145": "IOTinyUtils::::cleanDirectory(java.io.File)", "147": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "148": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "149": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "150": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "151": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "152": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "153": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "154": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "155": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "156": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "157": "IOTinyUtils::::writeStringToFile(java.io.File,java.lang.String,java.lang.String)"}, "test_reverse_method_lines_dic": {"37": "IOTinyUtilsTest::::init()", "38": "IOTinyUtilsTest::::init()", "39": "IOTinyUtilsTest::::init()", "40": "IOTinyUtilsTest::::init()", "41": "IOTinyUtilsTest::::init()", "42": "IOTinyUtilsTest::::init()", "43": "IOTinyUtilsTest::::init()", "44": "IOTinyUtilsTest::::init()", "45": "IOTinyUtilsTest::::init()", "47": "IOTinyUtilsTest::::destory()", "48": "IOTinyUtilsTest::::destory()", "49": "IOTinyUtilsTest::::destory()", "50": "IOTinyUtilsTest::::destory()", "51": "IOTinyUtilsTest::::destory()", "54": "IOTinyUtilsTest::::testToString()", "55": "IOTinyUtilsTest::::testToString()", "56": "IOTinyUtilsTest::::testToString()", "57": "IOTinyUtilsTest::::testToString()", "58": "IOTinyUtilsTest::::testToString()", "59": "IOTinyUtilsTest::::testToString()", "60": "IOTinyUtilsTest::::testToString()", "61": "IOTinyUtilsTest::::testToString()", "62": "IOTinyUtilsTest::::testToString()", "63": "IOTinyUtilsTest::::testToString()", "64": "IOTinyUtilsTest::::testToString()", "65": "IOTinyUtilsTest::::testToString()", "66": "IOTinyUtilsTest::::testToString()", "67": "IOTinyUtilsTest::::testToString()", "68": "IOTinyUtilsTest::::testToString()", "69": "IOTinyUtilsTest::::testToString()", "70": "IOTinyUtilsTest::::testToString()", "73": "IOTinyUtilsTest::::testCopy()", "74": "IOTinyUtilsTest::::testCopy()", "75": "IOTinyUtilsTest::::testCopy()", "76": "IOTinyUtilsTest::::testCopy()", "77": "IOTinyUtilsTest::::testCopy()", "78": "IOTinyUtilsTest::::testCopy()", "79": "IOTinyUtilsTest::::testCopy()", "80": "IOTinyUtilsTest::::testCopy()", "81": "IOTinyUtilsTest::::testCopy()", "83": "IOTinyUtilsTest::::testReadLines()", "84": "IOTinyUtilsTest::::testReadLines()", "85": "IOTinyUtilsTest::::testReadLines()", "86": "IOTinyUtilsTest::::testReadLines()", "87": "IOTinyUtilsTest::::testReadLines()", "88": "IOTinyUtilsTest::::testReadLines()", "89": "IOTinyUtilsTest::::testReadLines()", "90": "IOTinyUtilsTest::::testReadLines()", "91": "IOTinyUtilsTest::::testReadLines()", "92": "IOTinyUtilsTest::::testReadLines()", "93": "IOTinyUtilsTest::::testReadLines()", "94": "IOTinyUtilsTest::::testReadLines()", "96": "IOTinyUtilsTest::::testToBufferedReader()", "97": "IOTinyUtilsTest::::testToBufferedReader()", "98": "IOTinyUtilsTest::::testToBufferedReader()", "99": "IOTinyUtilsTest::::testToBufferedReader()", "100": "IOTinyUtilsTest::::testToBufferedReader()", "101": "IOTinyUtilsTest::::testToBufferedReader()", "102": "IOTinyUtilsTest::::testToBufferedReader()", "103": "IOTinyUtilsTest::::testToBufferedReader()", "104": "IOTinyUtilsTest::::testToBufferedReader()", "105": "IOTinyUtilsTest::::testToBufferedReader()", "106": "IOTinyUtilsTest::::testToBufferedReader()", "107": "IOTinyUtilsTest::::testToBufferedReader()", "108": "IOTinyUtilsTest::::testToBufferedReader()", "109": "IOTinyUtilsTest::::testToBufferedReader()", "111": "IOTinyUtilsTest::::testWriteStringToFile()", "112": "IOTinyUtilsTest::::testWriteStringToFile()", "113": "IOTinyUtilsTest::::testWriteStringToFile()", "114": "IOTinyUtilsTest::::testWriteStringToFile()", "115": "IOTinyUtilsTest::::testWriteStringToFile()", "116": "IOTinyUtilsTest::::testWriteStringToFile()", "117": "IOTinyUtilsTest::::testWriteStringToFile()", "118": "IOTinyUtilsTest::::testWriteStringToFile()", "119": "IOTinyUtilsTest::::testWriteStringToFile()", "121": "IOTinyUtilsTest::::testCleanDirectory()", "122": "IOTinyUtilsTest::::testCleanDirectory()", "123": "IOTinyUtilsTest::::testCleanDirectory()", "124": "IOTinyUtilsTest::::testCleanDirectory()", "125": "IOTinyUtilsTest::::testCleanDirectory()", "126": "IOTinyUtilsTest::::testCleanDirectory()", "127": "IOTinyUtilsTest::::testCleanDirectory()", "128": "IOTinyUtilsTest::::testCleanDirectory()", "129": "IOTinyUtilsTest::::testCleanDirectory()", "130": "IOTinyUtilsTest::::testCleanDirectory()", "131": "IOTinyUtilsTest::::testCleanDirectory()", "132": "IOTinyUtilsTest::::testCleanDirectory()", "133": "IOTinyUtilsTest::::testCleanDirectory()", "134": "IOTinyUtilsTest::::testCleanDirectory()", "136": "IOTinyUtilsTest::::testDelete()", "137": "IOTinyUtilsTest::::testDelete()", "138": "IOTinyUtilsTest::::testDelete()", "139": "IOTinyUtilsTest::::testDelete()", "140": "IOTinyUtilsTest::::testDelete()", "141": "IOTinyUtilsTest::::testDelete()", "142": "IOTinyUtilsTest::::testDelete()", "143": "IOTinyUtilsTest::::testDelete()", "144": "IOTinyUtilsTest::::testDelete()", "145": "IOTinyUtilsTest::::testDelete()", "146": "IOTinyUtilsTest::::testDelete()", "147": "IOTinyUtilsTest::::testDelete()", "148": "IOTinyUtilsTest::::testDelete()", "149": "IOTinyUtilsTest::::testDelete()", "151": "IOTinyUtilsTest::::testCopyFile()", "152": "IOTinyUtilsTest::::testCopyFile()", "153": "IOTinyUtilsTest::::testCopyFile()", "154": "IOTinyUtilsTest::::testCopyFile()", "155": "IOTinyUtilsTest::::testCopyFile()", "156": "IOTinyUtilsTest::::testCopyFile()", "157": "IOTinyUtilsTest::::testCopyFile()", "158": "IOTinyUtilsTest::::testCopyFile()", "159": "IOTinyUtilsTest::::testCopyFile()", "160": "IOTinyUtilsTest::::testCopyFile()", "161": "IOTinyUtilsTest::::testCopyFile()", "162": "IOTinyUtilsTest::::testCopyFile()"}, "tests": [{"test_lines": [54, 70], "covered_lines": [39, 44, 45, 46, 50, 51, 52, 53, 54, 56]}, {"test_lines": [73, 81], "covered_lines": [50, 51, 52, 53, 54, 56]}, {"test_lines": [83, 94], "covered_lines": [60, 61, 64, 65, 66, 71, 75]}, {"test_lines": [96, 109], "covered_lines": [75]}, {"test_lines": [111, 119], "covered_lines": [148, 150, 151, 153, 154, 157]}, {"test_lines": [121, 134], "covered_lines": [106, 110, 114, 115, 118, 123, 128, 129, 133, 134, 136, 139, 142, 145, 148, 150, 151, 153, 154, 157]}, {"test_lines": [136, 149], "covered_lines": [106, 110, 111, 114, 115, 118, 123, 128, 129, 133, 134, 136, 139, 142, 145, 148, 150, 151, 153, 154, 157]}, {"test_lines": [151, 162], "covered_lines": [79, 80, 83, 84, 85, 89, 90, 92, 93, 94, 96, 97, 99, 100, 103, 148, 150, 151, 153, 154, 157]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/filter/FilterAPI.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.filter;\n", "\n", "import java.net.URL;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "\n", "public class FilterAPI {\n", "    public static URL classFile(final String className) {\n", "        final String javaSource = simpleClassName(className) + \".java\";\n", "        URL url = FilterAPI.class.getClassLoader().getResource(javaSource);\n", "        return url;\n", "    }\n", "\n", "    public static String simpleClassName(final String className) {\n", "        String simple = className;\n", "        int index = className.lastIndexOf(\".\");\n", "        if (index >= 0) {\n", "            simple = className.substring(index + 1);\n", "        }\n", "\n", "        return simple;\n", "    }\n", "\n", "    public static SubscriptionData buildSubscriptionData(final String consumerGroup, String topic,\n", "        String subString) throws Exception {\n", "        SubscriptionData subscriptionData = new SubscriptionData();\n", "        subscriptionData.setTopic(topic);\n", "        subscriptionData.setSubString(subString);\n", "\n", "        if (null == subString || subString.equals(SubscriptionData.SUB_ALL) || subString.length() == 0) {\n", "            subscriptionData.setSubString(SubscriptionData.SUB_ALL);\n", "        } else {\n", "            String[] tags = subString.split(\"\\\\|\\\\|\");\n", "            if (tags.length > 0) {\n", "                for (String tag : tags) {\n", "                    if (tag.length() > 0) {\n", "                        String trimString = tag.trim();\n", "                        if (trimString.length() > 0) {\n", "                            subscriptionData.getTagsSet().add(trimString);\n", "                            subscriptionData.getCodeSet().add(trimString.hashCode());\n", "                        }\n", "                    }\n", "                }\n", "            } else {\n", "                throw new Exception(\"subString split error\");\n", "            }\n", "        }\n", "\n", "        return subscriptionData;\n", "    }\n", "\n", "    public static SubscriptionData build(final String topic, final String subString,\n", "        final String type) throws Exception {\n", "        if (ExpressionType.TAG.equals(type) || type == null) {\n", "            return buildSubscriptionData(null, topic, subString);\n", "        }\n", "\n", "        if (subString == null || subString.length() < 1) {\n", "            throw new IllegalArgumentException(\"Expression can't be null! \" + type);\n", "        }\n", "\n", "        SubscriptionData subscriptionData = new SubscriptionData();\n", "        subscriptionData.setTopic(topic);\n", "        subscriptionData.setSubString(subString);\n", "        subscriptionData.setExpressionType(type);\n", "\n", "        return subscriptionData;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.filter;\n", "\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.junit.Test;\n", "\n", "import java.util.HashSet;\n", "import java.util.Set;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class FilterAPITest {\n", "    private String topic = \"FooBar\";\n", "    private String group = \"FooBarGroup\";\n", "    private String subString = \"TAG1 || Tag2 || tag3\";\n", "\n", "    @Test\n", "    public void testBuildSubscriptionData() throws Exception {\n", "        SubscriptionData subscriptionData =\n", "                FilterAPI.buildSubscriptionData(group, topic, subString);\n", "        assertThat(subscriptionData.getTopic()).isEqualTo(topic);\n", "        assertThat(subscriptionData.getSubString()).isEqualTo(subString);\n", "        String[] tags = subString.split(\"\\\\|\\\\|\");\n", "        Set<String> tagSet = new HashSet<String>();\n", "        for (String tag : tags) {\n", "            tagSet.add(tag.trim());\n", "        }\n", "        assertThat(subscriptionData.getTagsSet()).isEqualTo(tagSet);\n", "    }\n", "\n", "    @Test\n", "    public void testBuildTagSome() {\n", "        try {\n", "            SubscriptionData subscriptionData = FilterAPI.build(\n", "                    \"TOPIC\", \"A || B\", ExpressionType.TAG\n", "            );\n", "\n", "            assertThat(subscriptionData).isNotNull();\n", "            assertThat(subscriptionData.getTopic()).isEqualTo(\"TOPIC\");\n", "            assertThat(subscriptionData.getSubString()).isEqualTo(\"A || B\");\n", "            assertThat(ExpressionType.isTagType(subscriptionData.getExpressionType())).isTrue();\n", "\n", "            assertThat(subscriptionData.getTagsSet()).isNotNull();\n", "            assertThat(subscriptionData.getTagsSet()).containsExactly(\"A\", \"B\");\n", "        } catch (Exception e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testBuildSQL() {\n", "        try {\n", "            SubscriptionData subscriptionData = FilterAPI.build(\n", "                    \"TOPIC\", \"a is not null\", ExpressionType.SQL92\n", "            );\n", "\n", "            assertThat(subscriptionData).isNotNull();\n", "            assertThat(subscriptionData.getTopic()).isEqualTo(\"TOPIC\");\n", "            assertThat(subscriptionData.getExpressionType()).isEqualTo(ExpressionType.SQL92);\n", "        } catch (Exception e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "    }\n", "\n", "    @Test(expected = IllegalArgumentException.class)\n", "    public void testBuildSQLWithNullSubString() throws Exception {\n", "        FilterAPI.build(\"TOPIC\", null, ExpressionType.SQL92);\n", "    }\n", "}\n"], "method_lines_dic": {"FilterAPI::::classFile(java.lang.String)": [23, 27], "FilterAPI::::simpleClassName(java.lang.String)": [29, 37], "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)": [39, 65], "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)": [67, 83]}, "test_method_lines_dic": {"FilterAPITest::::testBuildSubscriptionData()": [33, 45], "FilterAPITest::::testBuildTagSome()": [47, 65], "FilterAPITest::::testBuildSQL()": [67, 81], "FilterAPITest::::testBuildSQLWithNullSubString()": [83, 86]}, "reverse_method_lines_dic": {"23": "FilterAPI::::classFile(java.lang.String)", "24": "FilterAPI::::classFile(java.lang.String)", "25": "FilterAPI::::classFile(java.lang.String)", "26": "FilterAPI::::classFile(java.lang.String)", "27": "FilterAPI::::classFile(java.lang.String)", "29": "FilterAPI::::simpleClassName(java.lang.String)", "30": "FilterAPI::::simpleClassName(java.lang.String)", "31": "FilterAPI::::simpleClassName(java.lang.String)", "32": "FilterAPI::::simpleClassName(java.lang.String)", "33": "FilterAPI::::simpleClassName(java.lang.String)", "34": "FilterAPI::::simpleClassName(java.lang.String)", "35": "FilterAPI::::simpleClassName(java.lang.String)", "36": "FilterAPI::::simpleClassName(java.lang.String)", "37": "FilterAPI::::simpleClassName(java.lang.String)", "39": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "40": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "41": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "42": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "43": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "44": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "45": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "46": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "47": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "48": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "49": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "50": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "51": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "52": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "53": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "54": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "55": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "56": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "57": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "58": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "59": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "60": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "61": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "62": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "63": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "64": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "65": "FilterAPI::::buildSubscriptionData(java.lang.String,java.lang.String,java.lang.String)", "67": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "68": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "69": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "70": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "71": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "72": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "73": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "74": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "75": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "76": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "77": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "78": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "79": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "80": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "81": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "82": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)", "83": "FilterAPI::::build(java.lang.String,java.lang.String,java.lang.String)"}, "test_reverse_method_lines_dic": {"33": "FilterAPITest::::testBuildSubscriptionData()", "34": "FilterAPITest::::testBuildSubscriptionData()", "35": "FilterAPITest::::testBuildSubscriptionData()", "36": "FilterAPITest::::testBuildSubscriptionData()", "37": "FilterAPITest::::testBuildSubscriptionData()", "38": "FilterAPITest::::testBuildSubscriptionData()", "39": "FilterAPITest::::testBuildSubscriptionData()", "40": "FilterAPITest::::testBuildSubscriptionData()", "41": "FilterAPITest::::testBuildSubscriptionData()", "42": "FilterAPITest::::testBuildSubscriptionData()", "43": "FilterAPITest::::testBuildSubscriptionData()", "44": "FilterAPITest::::testBuildSubscriptionData()", "45": "FilterAPITest::::testBuildSubscriptionData()", "47": "FilterAPITest::::testBuildTagSome()", "48": "FilterAPITest::::testBuildTagSome()", "49": "FilterAPITest::::testBuildTagSome()", "50": "FilterAPITest::::testBuildTagSome()", "51": "FilterAPITest::::testBuildTagSome()", "52": "FilterAPITest::::testBuildTagSome()", "53": "FilterAPITest::::testBuildTagSome()", "54": "FilterAPITest::::testBuildTagSome()", "55": "FilterAPITest::::testBuildTagSome()", "56": "FilterAPITest::::testBuildTagSome()", "57": "FilterAPITest::::testBuildTagSome()", "58": "FilterAPITest::::testBuildTagSome()", "59": "FilterAPITest::::testBuildTagSome()", "60": "FilterAPITest::::testBuildTagSome()", "61": "FilterAPITest::::testBuildTagSome()", "62": "FilterAPITest::::testBuildTagSome()", "63": "FilterAPITest::::testBuildTagSome()", "64": "FilterAPITest::::testBuildTagSome()", "65": "FilterAPITest::::testBuildTagSome()", "67": "FilterAPITest::::testBuildSQL()", "68": "FilterAPITest::::testBuildSQL()", "69": "FilterAPITest::::testBuildSQL()", "70": "FilterAPITest::::testBuildSQL()", "71": "FilterAPITest::::testBuildSQL()", "72": "FilterAPITest::::testBuildSQL()", "73": "FilterAPITest::::testBuildSQL()", "74": "FilterAPITest::::testBuildSQL()", "75": "FilterAPITest::::testBuildSQL()", "76": "FilterAPITest::::testBuildSQL()", "77": "FilterAPITest::::testBuildSQL()", "78": "FilterAPITest::::testBuildSQL()", "79": "FilterAPITest::::testBuildSQL()", "80": "FilterAPITest::::testBuildSQL()", "81": "FilterAPITest::::testBuildSQL()", "83": "FilterAPITest::::testBuildSQLWithNullSubString()", "84": "FilterAPITest::::testBuildSQLWithNullSubString()", "85": "FilterAPITest::::testBuildSQLWithNullSubString()", "86": "FilterAPITest::::testBuildSQLWithNullSubString()"}, "tests": [{"test_lines": [33, 45], "covered_lines": [41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 64]}, {"test_lines": [47, 65], "covered_lines": [41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 64, 69, 70]}, {"test_lines": [67, 81], "covered_lines": [69, 73, 77, 78, 79, 80, 82]}, {"test_lines": [83, 86], "covered_lines": [69, 73, 74]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/NamespaceUtil.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.protocol;\n", "\n", "import org.apache.commons.lang3.StringUtils;\n", "import org.apache.rocketmq.common.MixAll;\n", "import org.apache.rocketmq.common.topic.TopicValidator;\n", "\n", "public class NamespaceUtil {\n", "    public static final char NAMESPACE_SEPARATOR = '%';\n", "    public static final String STRING_BLANK = \"\";\n", "    public static final int RETRY_PREFIX_LENGTH = MixAll.RETRY_GROUP_TOPIC_PREFIX.length();\n", "    public static final int DLQ_PREFIX_LENGTH = MixAll.DLQ_GROUP_TOPIC_PREFIX.length();\n", "\n", "    /**\n", "     * Unpack namespace from resource, just like:\n", "     * (1) MQ_INST_XX%Topic_XXX --> Topic_XXX\n", "     * (2) %RETRY%MQ_INST_XX%GID_XXX --> %RETRY%GID_XXX\n", "     *\n", "     * @param resourceWithNamespace, topic/groupId with namespace.\n", "     * @return topic/groupId without namespace.\n", "     */\n", "    public static String withoutNamespace(String resourceWithNamespace) {\n", "        if (StringUtils.isEmpty(resourceWithNamespace) || isSystemResource(resourceWithNamespace)) {\n", "            return resourceWithNamespace;\n", "        }\n", "\n", "        StringBuilder stringBuilder = new StringBuilder();\n", "        if (isRetryTopic(resourceWithNamespace)) {\n", "            stringBuilder.append(MixAll.RETRY_GROUP_TOPIC_PREFIX);\n", "        }\n", "        if (isDLQTopic(resourceWithNamespace)) {\n", "            stringBuilder.append(MixAll.DLQ_GROUP_TOPIC_PREFIX);\n", "        }\n", "\n", "        String resourceWithoutRetryAndDLQ = withOutRetryAndDLQ(resourceWithNamespace);\n", "        int index = resourceWithoutRetryAndDLQ.indexOf(NAMESPACE_SEPARATOR);\n", "        if (index > 0) {\n", "            String resourceWithoutNamespace = resourceWithoutRetryAndDLQ.substring(index + 1);\n", "            return stringBuilder.append(resourceWithoutNamespace).toString();\n", "        }\n", "\n", "        return resourceWithNamespace;\n", "    }\n", "\n", "    /**\n", "     * If resource contains the namespace, unpack namespace from resource, just like:\n", "     * (1) (MQ_INST_XX1%Topic_XXX1, MQ_INST_XX1) --> Topic_XXX1\n", "     * (2) (MQ_INST_XX2%Topic_XXX2, NULL) --> MQ_INST_XX2%Topic_XXX2\n", "     * (3) (%RETRY%MQ_INST_XX1%GID_XXX1, MQ_INST_XX1) --> %RETRY%GID_XXX1\n", "     * (4) (%RETRY%MQ_INST_XX2%GID_XXX2, MQ_INST_XX3) --> %RETRY%MQ_INST_XX2%GID_XXX2\n", "     *\n", "     * @param resourceWithNamespace, topic/groupId with namespace.\n", "     * @param namespace, namespace to be unpacked.\n", "     * @return topic/groupId without namespace.\n", "     */\n", "    public static String withoutNamespace(String resourceWithNamespace, String namespace) {\n", "        if (StringUtils.isEmpty(resourceWithNamespace) || StringUtils.isEmpty(namespace)) {\n", "            return resourceWithNamespace;\n", "        }\n", "\n", "        String resourceWithoutRetryAndDLQ = withOutRetryAndDLQ(resourceWithNamespace);\n", "        if (resourceWithoutRetryAndDLQ.startsWith(namespace + NAMESPACE_SEPARATOR)) {\n", "            return withoutNamespace(resourceWithNamespace);\n", "        }\n", "\n", "        return resourceWithNamespace;\n", "    }\n", "\n", "    public static String wrapNamespace(String namespace, String resourceWithOutNamespace) {\n", "        if (StringUtils.isEmpty(namespace) || StringUtils.isEmpty(resourceWithOutNamespace)) {\n", "            return resourceWithOutNamespace;\n", "        }\n", "\n", "        if (isSystemResource(resourceWithOutNamespace) || isAlreadyWithNamespace(resourceWithOutNamespace, namespace)) {\n", "            return resourceWithOutNamespace;\n", "        }\n", "\n", "        String resourceWithoutRetryAndDLQ = withOutRetryAndDLQ(resourceWithOutNamespace);\n", "        StringBuilder stringBuilder = new StringBuilder();\n", "\n", "        if (isRetryTopic(resourceWithOutNamespace)) {\n", "            stringBuilder.append(MixAll.RETRY_GROUP_TOPIC_PREFIX);\n", "        }\n", "\n", "        if (isDLQTopic(resourceWithOutNamespace)) {\n", "            stringBuilder.append(MixAll.DLQ_GROUP_TOPIC_PREFIX);\n", "        }\n", "\n", "        return stringBuilder.append(namespace).append(NAMESPACE_SEPARATOR).append(resourceWithoutRetryAndDLQ).toString();\n", "\n", "    }\n", "\n", "    public static boolean isAlreadyWithNamespace(String resource, String namespace) {\n", "        if (StringUtils.isEmpty(namespace) || StringUtils.isEmpty(resource) || isSystemResource(resource)) {\n", "            return false;\n", "        }\n", "\n", "        String resourceWithoutRetryAndDLQ = withOutRetryAndDLQ(resource);\n", "\n", "        return resourceWithoutRetryAndDLQ.startsWith(namespace + NAMESPACE_SEPARATOR);\n", "    }\n", "\n", "    public static String wrapNamespaceAndRetry(String namespace, String consumerGroup) {\n", "        if (StringUtils.isEmpty(consumerGroup)) {\n", "            return null;\n", "        }\n", "\n", "        return new StringBuffer()\n", "            .append(MixAll.RETRY_GROUP_TOPIC_PREFIX)\n", "            .append(wrapNamespace(namespace, consumerGroup))\n", "            .toString();\n", "    }\n", "\n", "    public static String getNamespaceFromResource(String resource) {\n", "        if (StringUtils.isEmpty(resource) || isSystemResource(resource)) {\n", "            return STRING_BLANK;\n", "        }\n", "        String resourceWithoutRetryAndDLQ = withOutRetryAndDLQ(resource);\n", "        int index = resourceWithoutRetryAndDLQ.indexOf(NAMESPACE_SEPARATOR);\n", "\n", "        return index > 0 ? resourceWithoutRetryAndDLQ.substring(0, index) : STRING_BLANK;\n", "    }\n", "\n", "    private static String withOutRetryAndDLQ(String originalResource) {\n", "        if (StringUtils.isEmpty(originalResource)) {\n", "            return STRING_BLANK;\n", "        }\n", "        if (isRetryTopic(originalResource)) {\n", "            return originalResource.substring(RETRY_PREFIX_LENGTH);\n", "        }\n", "\n", "        if (isDLQTopic(originalResource)) {\n", "            return originalResource.substring(DLQ_PREFIX_LENGTH);\n", "        }\n", "\n", "        return originalResource;\n", "    }\n", "\n", "    private static boolean isSystemResource(String resource) {\n", "        if (StringUtils.isEmpty(resource)) {\n", "            return false;\n", "        }\n", "\n", "        if (TopicValidator.isSystemTopic(resource) || MixAll.isSysConsumerGroup(resource)) {\n", "            return true;\n", "        }\n", "\n", "        return false;\n", "    }\n", "\n", "    public static boolean isRetryTopic(String resource) {\n", "        return StringUtils.isNotBlank(resource) && resource.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX);\n", "    }\n", "\n", "    public static boolean isDLQTopic(String resource) {\n", "        return StringUtils.isNotBlank(resource) && resource.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX);\n", "    }\n", "}"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol;\n", "\n", "import org.apache.rocketmq.common.MixAll;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "/**\n", " * @author MQDevelopers\n", " */\n", "public class NamespaceUtilTest {\n", "\n", "    private static final String INSTANCE_ID = \"MQ_INST_XXX\";\n", "    private static final String INSTANCE_ID_WRONG = \"MQ_INST_XXX1\";\n", "    private static final String TOPIC = \"TOPIC_XXX\";\n", "    private static final String GROUP_ID = \"GID_XXX\";\n", "    private static final String SYSTEM_TOPIC = \"rmq_sys_topic\";\n", "    private static final String GROUP_ID_WITH_NAMESPACE = INSTANCE_ID + NamespaceUtil.NAMESPACE_SEPARATOR + GROUP_ID;\n", "    private static final String TOPIC_WITH_NAMESPACE = INSTANCE_ID + NamespaceUtil.NAMESPACE_SEPARATOR + TOPIC;\n", "    private static final String RETRY_TOPIC = MixAll.RETRY_GROUP_TOPIC_PREFIX + GROUP_ID;\n", "    private static final String RETRY_TOPIC_WITH_NAMESPACE =\n", "        MixAll.RETRY_GROUP_TOPIC_PREFIX + INSTANCE_ID + NamespaceUtil.NAMESPACE_SEPARATOR + GROUP_ID;\n", "    private static final String DLQ_TOPIC = MixAll.DLQ_GROUP_TOPIC_PREFIX + GROUP_ID;\n", "    private static final String DLQ_TOPIC_WITH_NAMESPACE =\n", "        MixAll.DLQ_GROUP_TOPIC_PREFIX + INSTANCE_ID + NamespaceUtil.NAMESPACE_SEPARATOR + GROUP_ID;\n", "\n", "    @Test\n", "    public void testWithoutNamespace() {\n", "        String topic = NamespaceUtil.withoutNamespace(TOPIC_WITH_NAMESPACE, INSTANCE_ID);\n", "        Assert.assertEquals(topic, TOPIC);\n", "        String topic1 = NamespaceUtil.withoutNamespace(TOPIC_WITH_NAMESPACE);\n", "        Assert.assertEquals(topic1, TOPIC);\n", "        String groupId = NamespaceUtil.withoutNamespace(GROUP_ID_WITH_NAMESPACE, INSTANCE_ID);\n", "        Assert.assertEquals(groupId, GROUP_ID);\n", "        String groupId1 = NamespaceUtil.withoutNamespace(GROUP_ID_WITH_NAMESPACE);\n", "        Assert.assertEquals(groupId1, GROUP_ID);\n", "        String consumerId = NamespaceUtil.withoutNamespace(RETRY_TOPIC_WITH_NAMESPACE, INSTANCE_ID);\n", "        Assert.assertEquals(consumerId, RETRY_TOPIC);\n", "        String consumerId1 = NamespaceUtil.withoutNamespace(RETRY_TOPIC_WITH_NAMESPACE);\n", "        Assert.assertEquals(consumerId1, RETRY_TOPIC);\n", "        String consumerId2 = NamespaceUtil.withoutNamespace(RETRY_TOPIC_WITH_NAMESPACE, INSTANCE_ID_WRONG);\n", "        Assert.assertEquals(consumerId2, RETRY_TOPIC_WITH_NAMESPACE);\n", "        Assert.assertNotEquals(consumerId2, RETRY_TOPIC);\n", "    }\n", "\n", "    @Test\n", "    public void testWrapNamespace() {\n", "        String topic1 = NamespaceUtil.wrapNamespace(INSTANCE_ID, TOPIC);\n", "        Assert.assertEquals(topic1, TOPIC_WITH_NAMESPACE);\n", "        String topicWithNamespaceAgain = NamespaceUtil.wrapNamespace(INSTANCE_ID, topic1);\n", "        Assert.assertEquals(topicWithNamespaceAgain, TOPIC_WITH_NAMESPACE);\n", "        //Wrap retry topic\n", "        String retryTopicWithNamespace = NamespaceUtil.wrapNamespace(INSTANCE_ID, RETRY_TOPIC);\n", "        Assert.assertEquals(retryTopicWithNamespace, RETRY_TOPIC_WITH_NAMESPACE);\n", "        String retryTopicWithNamespaceAgain = NamespaceUtil.wrapNamespace(INSTANCE_ID, retryTopicWithNamespace);\n", "        Assert.assertEquals(retryTopicWithNamespaceAgain, retryTopicWithNamespace);\n", "        //Wrap DLQ topic\n", "        String dlqTopicWithNamespace = NamespaceUtil.wrapNamespace(INSTANCE_ID, DLQ_TOPIC);\n", "        Assert.assertEquals(dlqTopicWithNamespace, DLQ_TOPIC_WITH_NAMESPACE);\n", "        String dlqTopicWithNamespaceAgain = NamespaceUtil.wrapNamespace(INSTANCE_ID, dlqTopicWithNamespace);\n", "        Assert.assertEquals(dlqTopicWithNamespaceAgain, dlqTopicWithNamespace);\n", "        Assert.assertEquals(dlqTopicWithNamespaceAgain, DLQ_TOPIC_WITH_NAMESPACE );\n", "        //test system topic\n", "        String systemTopic = NamespaceUtil.wrapNamespace(INSTANCE_ID, SYSTEM_TOPIC);\n", "        Assert.assertEquals(systemTopic, SYSTEM_TOPIC);\n", "    }\n", "\n", "    @Test\n", "    public void testGetNamespaceFromResource(){\n", "        String namespaceExpectBlank = NamespaceUtil.getNamespaceFromResource(TOPIC);\n", "        Assert.assertEquals(namespaceExpectBlank, NamespaceUtil.STRING_BLANK);\n", "        String namespace =  NamespaceUtil.getNamespaceFromResource(TOPIC_WITH_NAMESPACE);\n", "        Assert.assertEquals(namespace, INSTANCE_ID);\n", "        String namespaceFromRetryTopic = NamespaceUtil.getNamespaceFromResource(RETRY_TOPIC_WITH_NAMESPACE);\n", "        Assert.assertEquals(namespaceFromRetryTopic, INSTANCE_ID);\n", "    }\n", "}"], "method_lines_dic": {"NamespaceUtil::::withoutNamespace(java.lang.String)": [37, 58], "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)": [71, 82], "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)": [84, 106], "NamespaceUtil::::isAlreadyWithNamespace(java.lang.String,java.lang.String)": [108, 116], "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)": [118, 127], "NamespaceUtil::::getNamespaceFromResource(java.lang.String)": [129, 137], "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)": [139, 152], "NamespaceUtil::::isSystemResource(java.lang.String)": [154, 164], "NamespaceUtil::::isRetryTopic(java.lang.String)": [166, 168], "NamespaceUtil::::isDLQTopic(java.lang.String)": [170, 172]}, "test_method_lines_dic": {"NamespaceUtilTest::::testWithoutNamespace()": [43, 60], "NamespaceUtilTest::::testWrapNamespace()": [62, 82], "NamespaceUtilTest::::testGetNamespaceFromResource()": [84, 92]}, "reverse_method_lines_dic": {"37": "NamespaceUtil::::withoutNamespace(java.lang.String)", "38": "NamespaceUtil::::withoutNamespace(java.lang.String)", "39": "NamespaceUtil::::withoutNamespace(java.lang.String)", "40": "NamespaceUtil::::withoutNamespace(java.lang.String)", "41": "NamespaceUtil::::withoutNamespace(java.lang.String)", "42": "NamespaceUtil::::withoutNamespace(java.lang.String)", "43": "NamespaceUtil::::withoutNamespace(java.lang.String)", "44": "NamespaceUtil::::withoutNamespace(java.lang.String)", "45": "NamespaceUtil::::withoutNamespace(java.lang.String)", "46": "NamespaceUtil::::withoutNamespace(java.lang.String)", "47": "NamespaceUtil::::withoutNamespace(java.lang.String)", "48": "NamespaceUtil::::withoutNamespace(java.lang.String)", "49": "NamespaceUtil::::withoutNamespace(java.lang.String)", "50": "NamespaceUtil::::withoutNamespace(java.lang.String)", "51": "NamespaceUtil::::withoutNamespace(java.lang.String)", "52": "NamespaceUtil::::withoutNamespace(java.lang.String)", "53": "NamespaceUtil::::withoutNamespace(java.lang.String)", "54": "NamespaceUtil::::withoutNamespace(java.lang.String)", "55": "NamespaceUtil::::withoutNamespace(java.lang.String)", "56": "NamespaceUtil::::withoutNamespace(java.lang.String)", "57": "NamespaceUtil::::withoutNamespace(java.lang.String)", "58": "NamespaceUtil::::withoutNamespace(java.lang.String)", "71": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "72": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "73": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "74": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "75": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "76": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "77": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "78": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "79": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "80": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "81": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "82": "NamespaceUtil::::withoutNamespace(java.lang.String,java.lang.String)", "84": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "85": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "86": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "87": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "88": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "89": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "90": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "91": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "92": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "93": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "94": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "95": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "96": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "97": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "98": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "99": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "100": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "101": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "102": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "103": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "104": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "105": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "106": "NamespaceUtil::::wrapNamespace(java.lang.String,java.lang.String)", "108": "NamespaceUtil::::isAlreadyWithNamespace(java.lang.String,java.lang.String)", "109": "NamespaceUtil::::isAlreadyWithNamespace(java.lang.String,java.lang.String)", "110": "NamespaceUtil::::isAlreadyWithNamespace(java.lang.String,java.lang.String)", "111": "NamespaceUtil::::isAlreadyWithNamespace(java.lang.String,java.lang.String)", "112": "NamespaceUtil::::isAlreadyWithNamespace(java.lang.String,java.lang.String)", "113": "NamespaceUtil::::isAlreadyWithNamespace(java.lang.String,java.lang.String)", "114": "NamespaceUtil::::isAlreadyWithNamespace(java.lang.String,java.lang.String)", "115": "NamespaceUtil::::isAlreadyWithNamespace(java.lang.String,java.lang.String)", "116": "NamespaceUtil::::isAlreadyWithNamespace(java.lang.String,java.lang.String)", "118": "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)", "119": "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)", "120": "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)", "121": "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)", "122": "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)", "123": "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)", "124": "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)", "125": "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)", "126": "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)", "127": "NamespaceUtil::::wrapNamespaceAndRetry(java.lang.String,java.lang.String)", "129": "NamespaceUtil::::getNamespaceFromResource(java.lang.String)", "130": "NamespaceUtil::::getNamespaceFromResource(java.lang.String)", "131": "NamespaceUtil::::getNamespaceFromResource(java.lang.String)", "132": "NamespaceUtil::::getNamespaceFromResource(java.lang.String)", "133": "NamespaceUtil::::getNamespaceFromResource(java.lang.String)", "134": "NamespaceUtil::::getNamespaceFromResource(java.lang.String)", "135": "NamespaceUtil::::getNamespaceFromResource(java.lang.String)", "136": "NamespaceUtil::::getNamespaceFromResource(java.lang.String)", "137": "NamespaceUtil::::getNamespaceFromResource(java.lang.String)", "139": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "140": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "141": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "142": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "143": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "144": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "145": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "146": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "147": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "148": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "149": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "150": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "151": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "152": "NamespaceUtil::::withOutRetryAndDLQ(java.lang.String)", "154": "NamespaceUtil::::isSystemResource(java.lang.String)", "155": "NamespaceUtil::::isSystemResource(java.lang.String)", "156": "NamespaceUtil::::isSystemResource(java.lang.String)", "157": "NamespaceUtil::::isSystemResource(java.lang.String)", "158": "NamespaceUtil::::isSystemResource(java.lang.String)", "159": "NamespaceUtil::::isSystemResource(java.lang.String)", "160": "NamespaceUtil::::isSystemResource(java.lang.String)", "161": "NamespaceUtil::::isSystemResource(java.lang.String)", "162": "NamespaceUtil::::isSystemResource(java.lang.String)", "163": "NamespaceUtil::::isSystemResource(java.lang.String)", "164": "NamespaceUtil::::isSystemResource(java.lang.String)", "166": "NamespaceUtil::::isRetryTopic(java.lang.String)", "167": "NamespaceUtil::::isRetryTopic(java.lang.String)", "168": "NamespaceUtil::::isRetryTopic(java.lang.String)", "170": "NamespaceUtil::::isDLQTopic(java.lang.String)", "171": "NamespaceUtil::::isDLQTopic(java.lang.String)", "172": "NamespaceUtil::::isDLQTopic(java.lang.String)"}, "test_reverse_method_lines_dic": {"43": "NamespaceUtilTest::::testWithoutNamespace()", "44": "NamespaceUtilTest::::testWithoutNamespace()", "45": "NamespaceUtilTest::::testWithoutNamespace()", "46": "NamespaceUtilTest::::testWithoutNamespace()", "47": "NamespaceUtilTest::::testWithoutNamespace()", "48": "NamespaceUtilTest::::testWithoutNamespace()", "49": "NamespaceUtilTest::::testWithoutNamespace()", "50": "NamespaceUtilTest::::testWithoutNamespace()", "51": "NamespaceUtilTest::::testWithoutNamespace()", "52": "NamespaceUtilTest::::testWithoutNamespace()", "53": "NamespaceUtilTest::::testWithoutNamespace()", "54": "NamespaceUtilTest::::testWithoutNamespace()", "55": "NamespaceUtilTest::::testWithoutNamespace()", "56": "NamespaceUtilTest::::testWithoutNamespace()", "57": "NamespaceUtilTest::::testWithoutNamespace()", "58": "NamespaceUtilTest::::testWithoutNamespace()", "59": "NamespaceUtilTest::::testWithoutNamespace()", "60": "NamespaceUtilTest::::testWithoutNamespace()", "62": "NamespaceUtilTest::::testWrapNamespace()", "63": "NamespaceUtilTest::::testWrapNamespace()", "64": "NamespaceUtilTest::::testWrapNamespace()", "65": "NamespaceUtilTest::::testWrapNamespace()", "66": "NamespaceUtilTest::::testWrapNamespace()", "67": "NamespaceUtilTest::::testWrapNamespace()", "68": "NamespaceUtilTest::::testWrapNamespace()", "69": "NamespaceUtilTest::::testWrapNamespace()", "70": "NamespaceUtilTest::::testWrapNamespace()", "71": "NamespaceUtilTest::::testWrapNamespace()", "72": "NamespaceUtilTest::::testWrapNamespace()", "73": "NamespaceUtilTest::::testWrapNamespace()", "74": "NamespaceUtilTest::::testWrapNamespace()", "75": "NamespaceUtilTest::::testWrapNamespace()", "76": "NamespaceUtilTest::::testWrapNamespace()", "77": "NamespaceUtilTest::::testWrapNamespace()", "78": "NamespaceUtilTest::::testWrapNamespace()", "79": "NamespaceUtilTest::::testWrapNamespace()", "80": "NamespaceUtilTest::::testWrapNamespace()", "81": "NamespaceUtilTest::::testWrapNamespace()", "82": "NamespaceUtilTest::::testWrapNamespace()", "84": "NamespaceUtilTest::::testGetNamespaceFromResource()", "85": "NamespaceUtilTest::::testGetNamespaceFromResource()", "86": "NamespaceUtilTest::::testGetNamespaceFromResource()", "87": "NamespaceUtilTest::::testGetNamespaceFromResource()", "88": "NamespaceUtilTest::::testGetNamespaceFromResource()", "89": "NamespaceUtilTest::::testGetNamespaceFromResource()", "90": "NamespaceUtilTest::::testGetNamespaceFromResource()", "91": "NamespaceUtilTest::::testGetNamespaceFromResource()", "92": "NamespaceUtilTest::::testGetNamespaceFromResource()"}, "tests": [{"test_lines": [43, 60], "covered_lines": [26, 27, 38, 42, 43, 44, 46, 50, 51, 52, 53, 54, 72, 76, 77, 78, 81, 140, 143, 144, 147, 151, 155, 159, 163, 167, 171]}, {"test_lines": [62, 82], "covered_lines": [26, 27, 85, 89, 90, 93, 94, 96, 97, 100, 101, 104, 109, 113, 115, 140, 143, 144, 147, 148, 151, 155, 159, 160, 163, 167, 171]}, {"test_lines": [84, 92], "covered_lines": [26, 27, 130, 133, 134, 136, 140, 143, 144, 147, 151, 155, 159, 163, 167, 171]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumerRunningInfo.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import java.util.Iterator;\n", "import java.util.Map.Entry;\n", "import java.util.Properties;\n", "import java.util.TreeMap;\n", "import java.util.TreeSet;\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class ConsumerRunningInfo extends RemotingSerializable {\n", "    public static final String PROP_NAMESERVER_ADDR = \"PROP_NAMESERVER_ADDR\";\n", "    public static final String PROP_THREADPOOL_CORE_SIZE = \"PROP_THREADPOOL_CORE_SIZE\";\n", "    public static final String PROP_CONSUME_ORDERLY = \"PROP_CONSUMEORDERLY\";\n", "    public static final String PROP_CONSUME_TYPE = \"PROP_CONSUME_TYPE\";\n", "    public static final String PROP_CLIENT_VERSION = \"PROP_CLIENT_VERSION\";\n", "    public static final String PROP_CONSUMER_START_TIMESTAMP = \"PROP_CONSUMER_START_TIMESTAMP\";\n", "\n", "    private Properties properties = new Properties();\n", "\n", "    private TreeSet<SubscriptionData> subscriptionSet = new TreeSet<SubscriptionData>();\n", "\n", "    private TreeMap<MessageQueue, ProcessQueueInfo> mqTable = new TreeMap<MessageQueue, ProcessQueueInfo>();\n", "\n", "    private TreeMap<String/* Topic */, ConsumeStatus> statusTable = new TreeMap<String, ConsumeStatus>();\n", "\n", "    private String jstack;\n", "\n", "    public static boolean analyzeSubscription(final TreeMap<String/* clientId */, ConsumerRunningInfo> criTable) {\n", "        ConsumerRunningInfo prev = criTable.firstEntry().getValue();\n", "\n", "        boolean push = false;\n", "        {\n", "            String property = prev.getProperties().getProperty(ConsumerRunningInfo.PROP_CONSUME_TYPE);\n", "\n", "            if (property == null) {\n", "                property = ((ConsumeType) prev.getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE)).name();\n", "            }\n", "            push = ConsumeType.valueOf(property) == ConsumeType.CONSUME_PASSIVELY;\n", "        }\n", "\n", "        boolean startForAWhile = false;\n", "        {\n", "\n", "            String property = prev.getProperties().getProperty(ConsumerRunningInfo.PROP_CONSUMER_START_TIMESTAMP);\n", "            if (property == null) {\n", "                property = String.valueOf(prev.getProperties().get(ConsumerRunningInfo.PROP_CONSUMER_START_TIMESTAMP));\n", "            }\n", "            startForAWhile = (System.currentTimeMillis() - Long.parseLong(property)) > (1000 * 60 * 2);\n", "        }\n", "\n", "        if (push && startForAWhile) {\n", "\n", "            {\n", "                Iterator<Entry<String, ConsumerRunningInfo>> it = criTable.entrySet().iterator();\n", "                while (it.hasNext()) {\n", "                    Entry<String, ConsumerRunningInfo> next = it.next();\n", "                    ConsumerRunningInfo current = next.getValue();\n", "                    boolean equals = current.getSubscriptionSet().equals(prev.getSubscriptionSet());\n", "\n", "                    if (!equals) {\n", "                        // Different subscription in the same group of consumer\n", "                        return false;\n", "                    }\n", "\n", "                    prev = next.getValue();\n", "                }\n", "\n", "                if (prev != null) {\n", "\n", "                    if (prev.getSubscriptionSet().isEmpty()) {\n", "                        // Subscription empty!\n", "                        return false;\n", "                    }\n", "                }\n", "            }\n", "        }\n", "\n", "        return true;\n", "    }\n", "\n", "    public static boolean analyzeRebalance(final TreeMap<String/* clientId */, ConsumerRunningInfo> criTable) {\n", "        return true;\n", "    }\n", "\n", "    public static String analyzeProcessQueue(final String clientId, ConsumerRunningInfo info) {\n", "        StringBuilder sb = new StringBuilder();\n", "        boolean push = false;\n", "        {\n", "            String property = info.getProperties().getProperty(ConsumerRunningInfo.PROP_CONSUME_TYPE);\n", "\n", "            if (property == null) {\n", "                property = ((ConsumeType) info.getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE)).name();\n", "            }\n", "            push = ConsumeType.valueOf(property) == ConsumeType.CONSUME_PASSIVELY;\n", "        }\n", "\n", "        boolean orderMsg = false;\n", "        {\n", "            String property = info.getProperties().getProperty(ConsumerRunningInfo.PROP_CONSUME_ORDERLY);\n", "            orderMsg = Boolean.parseBoolean(property);\n", "        }\n", "\n", "        if (push) {\n", "            Iterator<Entry<MessageQueue, ProcessQueueInfo>> it = info.getMqTable().entrySet().iterator();\n", "            while (it.hasNext()) {\n", "                Entry<MessageQueue, ProcessQueueInfo> next = it.next();\n", "                MessageQueue mq = next.getKey();\n", "                ProcessQueueInfo pq = next.getValue();\n", "\n", "                if (orderMsg) {\n", "\n", "                    if (!pq.isLocked()) {\n", "                        sb.append(String.format(\"%s %s can't lock for a while, %dms%n\",\n", "                            clientId,\n", "                            mq,\n", "                            System.currentTimeMillis() - pq.getLastLockTimestamp()));\n", "                    } else {\n", "                        if (pq.isDroped() && (pq.getTryUnlockTimes() > 0)) {\n", "                            sb.append(String.format(\"%s %s unlock %d times, still failed%n\",\n", "                                clientId,\n", "                                mq,\n", "                                pq.getTryUnlockTimes()));\n", "                        }\n", "                    }\n", "\n", "                } else {\n", "                    long diff = System.currentTimeMillis() - pq.getLastConsumeTimestamp();\n", "\n", "                    if (diff > (1000 * 60) && pq.getCachedMsgCount() > 0) {\n", "                        sb.append(String.format(\"%s %s can't consume for a while, maybe blocked, %dms%n\",\n", "                            clientId,\n", "                            mq,\n", "                            diff));\n", "                    }\n", "                }\n", "            }\n", "        }\n", "\n", "        return sb.toString();\n", "    }\n", "\n", "    public Properties getProperties() {\n", "        return properties;\n", "    }\n", "\n", "    public void setProperties(Properties properties) {\n", "        this.properties = properties;\n", "    }\n", "\n", "    public TreeSet<SubscriptionData> getSubscriptionSet() {\n", "        return subscriptionSet;\n", "    }\n", "\n", "    public void setSubscriptionSet(TreeSet<SubscriptionData> subscriptionSet) {\n", "        this.subscriptionSet = subscriptionSet;\n", "    }\n", "\n", "    public TreeMap<MessageQueue, ProcessQueueInfo> getMqTable() {\n", "        return mqTable;\n", "    }\n", "\n", "    public void setMqTable(TreeMap<MessageQueue, ProcessQueueInfo> mqTable) {\n", "        this.mqTable = mqTable;\n", "    }\n", "\n", "    public TreeMap<String, ConsumeStatus> getStatusTable() {\n", "        return statusTable;\n", "    }\n", "\n", "    public void setStatusTable(TreeMap<String, ConsumeStatus> statusTable) {\n", "        this.statusTable = statusTable;\n", "    }\n", "\n", "    public String formatString() {\n", "        StringBuilder sb = new StringBuilder();\n", "\n", "        {\n", "            sb.append(\"#Consumer Properties#\\n\");\n", "            Iterator<Entry<Object, Object>> it = this.properties.entrySet().iterator();\n", "            while (it.hasNext()) {\n", "                Entry<Object, Object> next = it.next();\n", "                String item = String.format(\"%-40s: %s%n\", next.getKey().toString(), next.getValue().toString());\n", "                sb.append(item);\n", "            }\n", "        }\n", "\n", "        {\n", "            sb.append(\"\\n\\n#Consumer Subscription#\\n\");\n", "\n", "            Iterator<SubscriptionData> it = this.subscriptionSet.iterator();\n", "            int i = 0;\n", "            while (it.hasNext()) {\n", "                SubscriptionData next = it.next();\n", "                String item = String.format(\"%03d Topic: %-40s ClassFilter: %-8s SubExpression: %s%n\",\n", "                    ++i,\n", "                    next.getTopic(),\n", "                    next.isClassFilterMode(),\n", "                    next.getSubString());\n", "\n", "                sb.append(item);\n", "            }\n", "        }\n", "\n", "        {\n", "            sb.append(\"\\n\\n#Consumer Offset#\\n\");\n", "            sb.append(String.format(\"%-32s  %-32s  %-4s  %-20s%n\",\n", "                \"#Topic\",\n", "                \"#Broker Name\",\n", "                \"#QID\",\n", "                \"#Consumer Offset\"\n", "            ));\n", "\n", "            Iterator<Entry<MessageQueue, ProcessQueueInfo>> it = this.mqTable.entrySet().iterator();\n", "            while (it.hasNext()) {\n", "                Entry<MessageQueue, ProcessQueueInfo> next = it.next();\n", "                String item = String.format(\"%-32s  %-32s  %-4d  %-20d%n\",\n", "                    next.getKey().getTopic(),\n", "                    next.getKey().getBrokerName(),\n", "                    next.getKey().getQueueId(),\n", "                    next.getValue().getCommitOffset());\n", "\n", "                sb.append(item);\n", "            }\n", "        }\n", "\n", "        {\n", "            sb.append(\"\\n\\n#Consumer MQ Detail#\\n\");\n", "            sb.append(String.format(\"%-32s  %-32s  %-4s  %-20s%n\",\n", "                \"#Topic\",\n", "                \"#Broker Name\",\n", "                \"#QID\",\n", "                \"#ProcessQueueInfo\"\n", "            ));\n", "\n", "            Iterator<Entry<MessageQueue, ProcessQueueInfo>> it = this.mqTable.entrySet().iterator();\n", "            while (it.hasNext()) {\n", "                Entry<MessageQueue, ProcessQueueInfo> next = it.next();\n", "                String item = String.format(\"%-32s  %-32s  %-4d  %s%n\",\n", "                    next.getKey().getTopic(),\n", "                    next.getKey().getBrokerName(),\n", "                    next.getKey().getQueueId(),\n", "                    next.getValue().toString());\n", "\n", "                sb.append(item);\n", "            }\n", "        }\n", "\n", "        {\n", "            sb.append(\"\\n\\n#Consumer RT&TPS#\\n\");\n", "            sb.append(String.format(\"%-32s  %14s %14s %14s %14s %18s %25s%n\",\n", "                \"#Topic\",\n", "                \"#Pull RT\",\n", "                \"#Pull TPS\",\n", "                \"#Consume RT\",\n", "                \"#ConsumeOK TPS\",\n", "                \"#ConsumeFailed TPS\",\n", "                \"#ConsumeFailedMsgsInHour\"\n", "            ));\n", "\n", "            Iterator<Entry<String, ConsumeStatus>> it = this.statusTable.entrySet().iterator();\n", "            while (it.hasNext()) {\n", "                Entry<String, ConsumeStatus> next = it.next();\n", "                String item = String.format(\"%-32s  %14.2f %14.2f %14.2f %14.2f %18.2f %25d%n\",\n", "                    next.getKey(),\n", "                    next.getValue().getPullRT(),\n", "                    next.getValue().getPullTPS(),\n", "                    next.getValue().getConsumeRT(),\n", "                    next.getValue().getConsumeOKTPS(),\n", "                    next.getValue().getConsumeFailedTPS(),\n", "                    next.getValue().getConsumeFailedMsgs()\n", "                );\n", "\n", "                sb.append(item);\n", "            }\n", "        }\n", "\n", "        if (this.jstack != null) {\n", "            sb.append(\"\\n\\n#Consumer jstack#\\n\");\n", "            sb.append(this.jstack);\n", "        }\n", "\n", "        return sb.toString();\n", "    }\n", "\n", "    public String getJstack() {\n", "        return jstack;\n", "    }\n", "\n", "    public void setJstack(String jstack) {\n", "        this.jstack = jstack;\n", "    }\n", "\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "\n", "import java.util.Properties;\n", "import java.util.TreeMap;\n", "import java.util.TreeSet;\n", "\n", "import static org.apache.rocketmq.common.protocol.heartbeat.ConsumeType.CONSUME_ACTIVELY;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class ConsumerRunningInfoTest {\n", "\n", "    private ConsumerRunningInfo consumerRunningInfo;\n", "\n", "    private TreeMap<String, ConsumerRunningInfo> criTable;\n", "\n", "    private MessageQueue messageQueue;\n", "\n", "    @Before\n", "    public void init() {\n", "        consumerRunningInfo = new ConsumerRunningInfo();\n", "        consumerRunningInfo.setJstack(\"test\");\n", "\n", "        TreeMap<MessageQueue, ProcessQueueInfo> mqTable = new TreeMap<MessageQueue, ProcessQueueInfo>();\n", "        messageQueue = new MessageQueue(\"topicA\",\"broker\", 1);\n", "        mqTable.put(messageQueue, new ProcessQueueInfo());\n", "        consumerRunningInfo.setMqTable(mqTable);\n", "\n", "        TreeMap<String, ConsumeStatus> statusTable = new TreeMap<String, ConsumeStatus>();\n", "        statusTable.put(\"topicA\", new ConsumeStatus());\n", "        consumerRunningInfo.setStatusTable(statusTable);\n", "\n", "        TreeSet<SubscriptionData> subscriptionSet = new TreeSet<SubscriptionData>();\n", "        subscriptionSet.add(new SubscriptionData());\n", "        consumerRunningInfo.setSubscriptionSet(subscriptionSet);\n", "\n", "        Properties properties = new Properties();\n", "        properties.put(ConsumerRunningInfo.PROP_CONSUME_TYPE, CONSUME_ACTIVELY);\n", "        properties.put(ConsumerRunningInfo.PROP_CONSUMER_START_TIMESTAMP, System.currentTimeMillis());\n", "        consumerRunningInfo.setProperties(properties);\n", "\n", "        criTable = new TreeMap<String, ConsumerRunningInfo>();\n", "        criTable.put(\"client_id\", consumerRunningInfo);\n", "    }\n", "\n", "    @Test\n", "    public void testFromJson() {\n", "        String toJson = RemotingSerializable.toJson(consumerRunningInfo, true);\n", "        ConsumerRunningInfo fromJson = RemotingSerializable.fromJson(toJson, ConsumerRunningInfo.class);\n", "\n", "        assertThat(fromJson.getJstack()).isEqualTo(\"test\");\n", "        assertThat(fromJson.getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE)).isEqualTo(ConsumeType.CONSUME_ACTIVELY.name());\n", "\n", "        ConsumeStatus consumeStatus = fromJson.getStatusTable().get(\"topicA\");\n", "        assertThat(consumeStatus).isExactlyInstanceOf(ConsumeStatus.class);\n", "\n", "        SubscriptionData subscription = fromJson.getSubscriptionSet().first();\n", "        assertThat(subscription).isExactlyInstanceOf(SubscriptionData.class);\n", "\n", "        ProcessQueueInfo processQueueInfo = fromJson.getMqTable().get(messageQueue);\n", "        assertThat(processQueueInfo).isExactlyInstanceOf(ProcessQueueInfo.class);\n", "    }\n", "\n", "    @Test\n", "    public void testAnalyzeRebalance(){\n", "        boolean result = ConsumerRunningInfo.analyzeRebalance(criTable);\n", "        assertThat(result).isTrue();\n", "    }\n", "\n", "    @Test\n", "    public void testAnalyzeProcessQueue(){\n", "        String result = ConsumerRunningInfo.analyzeProcessQueue(\"client_id\", consumerRunningInfo);\n", "        assertThat(result).isEmpty();\n", "\n", "    }\n", "\n", "    @Test\n", "    public void testAnalyzeSubscription(){\n", "        boolean result = ConsumerRunningInfo.analyzeSubscription(criTable);\n", "        assertThat(result).isTrue();\n", "    }\n", "\n", "\n", "}\n"], "method_lines_dic": {"ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)": [48, 99], "ConsumerRunningInfo::::analyzeRebalance(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)": [101, 103], "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)": [105, 160], "ConsumerRunningInfo::::getProperties()": [162, 164], "ConsumerRunningInfo::::setProperties(java.util.Properties)": [166, 168], "ConsumerRunningInfo::::getSubscriptionSet()": [170, 172], "ConsumerRunningInfo::::setSubscriptionSet(java.util.TreeSet<org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData>)": [174, 176], "ConsumerRunningInfo::::getMqTable()": [178, 180], "ConsumerRunningInfo::::setMqTable(java.util.TreeMap<org.apache.rocketmq.common.message.MessageQueue, org.apache.rocketmq.common.protocol.body.ProcessQueueInfo>)": [182, 184], "ConsumerRunningInfo::::getStatusTable()": [186, 188], "ConsumerRunningInfo::::setStatusTable(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumeStatus>)": [190, 192], "ConsumerRunningInfo::::formatString()": [194, 303], "ConsumerRunningInfo::::getJstack()": [305, 307], "ConsumerRunningInfo::::setJstack(java.lang.String)": [309, 311]}, "test_method_lines_dic": {"ConsumerRunningInfoTest::::init()": [43, 68], "ConsumerRunningInfoTest::::testFromJson()": [70, 86], "ConsumerRunningInfoTest::::testAnalyzeRebalance()": [88, 92], "ConsumerRunningInfoTest::::testAnalyzeProcessQueue()": [94, 99], "ConsumerRunningInfoTest::::testAnalyzeSubscription()": [101, 105]}, "reverse_method_lines_dic": {"48": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "49": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "50": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "51": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "52": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "53": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "54": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "55": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "56": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "57": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "58": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "59": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "60": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "61": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "62": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "63": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "64": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "65": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "66": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "67": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "68": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "69": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "70": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "71": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "72": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "73": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "74": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "75": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "76": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "77": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "78": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "79": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "80": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "81": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "82": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "83": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "84": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "85": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "86": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "87": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "88": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "89": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "90": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "91": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "92": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "93": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "94": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "95": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "96": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "97": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "98": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "99": "ConsumerRunningInfo::::analyzeSubscription(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "101": "ConsumerRunningInfo::::analyzeRebalance(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "102": "ConsumerRunningInfo::::analyzeRebalance(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "103": "ConsumerRunningInfo::::analyzeRebalance(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo>)", "105": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "106": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "107": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "108": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "109": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "110": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "111": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "112": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "113": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "114": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "115": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "116": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "117": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "118": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "119": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "120": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "121": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "122": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "123": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "124": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "125": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "126": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "127": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "128": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "129": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "130": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "131": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "132": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "133": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "134": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "135": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "136": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "137": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "138": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "139": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "140": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "141": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "142": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "143": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "144": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "145": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "146": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "147": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "148": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "149": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "150": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "151": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "152": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "153": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "154": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "155": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "156": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "157": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "158": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "159": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "160": "ConsumerRunningInfo::::analyzeProcessQueue(java.lang.String,org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo)", "162": "ConsumerRunningInfo::::getProperties()", "163": "ConsumerRunningInfo::::getProperties()", "164": "ConsumerRunningInfo::::getProperties()", "166": "ConsumerRunningInfo::::setProperties(java.util.Properties)", "167": "ConsumerRunningInfo::::setProperties(java.util.Properties)", "168": "ConsumerRunningInfo::::setProperties(java.util.Properties)", "170": "ConsumerRunningInfo::::getSubscriptionSet()", "171": "ConsumerRunningInfo::::getSubscriptionSet()", "172": "ConsumerRunningInfo::::getSubscriptionSet()", "174": "ConsumerRunningInfo::::setSubscriptionSet(java.util.TreeSet<org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData>)", "175": "ConsumerRunningInfo::::setSubscriptionSet(java.util.TreeSet<org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData>)", "176": "ConsumerRunningInfo::::setSubscriptionSet(java.util.TreeSet<org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData>)", "178": "ConsumerRunningInfo::::getMqTable()", "179": "ConsumerRunningInfo::::getMqTable()", "180": "ConsumerRunningInfo::::getMqTable()", "182": "ConsumerRunningInfo::::setMqTable(java.util.TreeMap<org.apache.rocketmq.common.message.MessageQueue, org.apache.rocketmq.common.protocol.body.ProcessQueueInfo>)", "183": "ConsumerRunningInfo::::setMqTable(java.util.TreeMap<org.apache.rocketmq.common.message.MessageQueue, org.apache.rocketmq.common.protocol.body.ProcessQueueInfo>)", "184": "ConsumerRunningInfo::::setMqTable(java.util.TreeMap<org.apache.rocketmq.common.message.MessageQueue, org.apache.rocketmq.common.protocol.body.ProcessQueueInfo>)", "186": "ConsumerRunningInfo::::getStatusTable()", "187": "ConsumerRunningInfo::::getStatusTable()", "188": "ConsumerRunningInfo::::getStatusTable()", "190": "ConsumerRunningInfo::::setStatusTable(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumeStatus>)", "191": "ConsumerRunningInfo::::setStatusTable(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumeStatus>)", "192": "ConsumerRunningInfo::::setStatusTable(java.util.TreeMap<java.lang.String, org.apache.rocketmq.common.protocol.body.ConsumeStatus>)", "194": "ConsumerRunningInfo::::formatString()", "195": "ConsumerRunningInfo::::formatString()", "196": "ConsumerRunningInfo::::formatString()", "197": "ConsumerRunningInfo::::formatString()", "198": "ConsumerRunningInfo::::formatString()", "199": "ConsumerRunningInfo::::formatString()", "200": "ConsumerRunningInfo::::formatString()", "201": "ConsumerRunningInfo::::formatString()", "202": "ConsumerRunningInfo::::formatString()", "203": "ConsumerRunningInfo::::formatString()", "204": "ConsumerRunningInfo::::formatString()", "205": "ConsumerRunningInfo::::formatString()", "206": "ConsumerRunningInfo::::formatString()", "207": "ConsumerRunningInfo::::formatString()", "208": "ConsumerRunningInfo::::formatString()", "209": "ConsumerRunningInfo::::formatString()", "210": "ConsumerRunningInfo::::formatString()", "211": "ConsumerRunningInfo::::formatString()", "212": "ConsumerRunningInfo::::formatString()", "213": "ConsumerRunningInfo::::formatString()", "214": "ConsumerRunningInfo::::formatString()", "215": "ConsumerRunningInfo::::formatString()", "216": "ConsumerRunningInfo::::formatString()", "217": "ConsumerRunningInfo::::formatString()", "218": "ConsumerRunningInfo::::formatString()", "219": "ConsumerRunningInfo::::formatString()", "220": "ConsumerRunningInfo::::formatString()", "221": "ConsumerRunningInfo::::formatString()", "222": "ConsumerRunningInfo::::formatString()", "223": "ConsumerRunningInfo::::formatString()", "224": "ConsumerRunningInfo::::formatString()", "225": "ConsumerRunningInfo::::formatString()", "226": "ConsumerRunningInfo::::formatString()", "227": "ConsumerRunningInfo::::formatString()", "228": "ConsumerRunningInfo::::formatString()", "229": "ConsumerRunningInfo::::formatString()", "230": "ConsumerRunningInfo::::formatString()", "231": "ConsumerRunningInfo::::formatString()", "232": "ConsumerRunningInfo::::formatString()", "233": "ConsumerRunningInfo::::formatString()", "234": "ConsumerRunningInfo::::formatString()", "235": "ConsumerRunningInfo::::formatString()", "236": "ConsumerRunningInfo::::formatString()", "237": "ConsumerRunningInfo::::formatString()", "238": "ConsumerRunningInfo::::formatString()", "239": "ConsumerRunningInfo::::formatString()", "240": "ConsumerRunningInfo::::formatString()", "241": "ConsumerRunningInfo::::formatString()", "242": "ConsumerRunningInfo::::formatString()", "243": "ConsumerRunningInfo::::formatString()", "244": "ConsumerRunningInfo::::formatString()", "245": "ConsumerRunningInfo::::formatString()", "246": "ConsumerRunningInfo::::formatString()", "247": "ConsumerRunningInfo::::formatString()", "248": "ConsumerRunningInfo::::formatString()", "249": "ConsumerRunningInfo::::formatString()", "250": "ConsumerRunningInfo::::formatString()", "251": "ConsumerRunningInfo::::formatString()", "252": "ConsumerRunningInfo::::formatString()", "253": "ConsumerRunningInfo::::formatString()", "254": "ConsumerRunningInfo::::formatString()", "255": "ConsumerRunningInfo::::formatString()", "256": "ConsumerRunningInfo::::formatString()", "257": "ConsumerRunningInfo::::formatString()", "258": "ConsumerRunningInfo::::formatString()", "259": "ConsumerRunningInfo::::formatString()", "260": "ConsumerRunningInfo::::formatString()", "261": "ConsumerRunningInfo::::formatString()", "262": "ConsumerRunningInfo::::formatString()", "263": "ConsumerRunningInfo::::formatString()", "264": "ConsumerRunningInfo::::formatString()", "265": "ConsumerRunningInfo::::formatString()", "266": "ConsumerRunningInfo::::formatString()", "267": "ConsumerRunningInfo::::formatString()", "268": "ConsumerRunningInfo::::formatString()", "269": "ConsumerRunningInfo::::formatString()", "270": "ConsumerRunningInfo::::formatString()", "271": "ConsumerRunningInfo::::formatString()", "272": "ConsumerRunningInfo::::formatString()", "273": "ConsumerRunningInfo::::formatString()", "274": "ConsumerRunningInfo::::formatString()", "275": "ConsumerRunningInfo::::formatString()", "276": "ConsumerRunningInfo::::formatString()", "277": "ConsumerRunningInfo::::formatString()", "278": "ConsumerRunningInfo::::formatString()", "279": "ConsumerRunningInfo::::formatString()", "280": "ConsumerRunningInfo::::formatString()", "281": "ConsumerRunningInfo::::formatString()", "282": "ConsumerRunningInfo::::formatString()", "283": "ConsumerRunningInfo::::formatString()", "284": "ConsumerRunningInfo::::formatString()", "285": "ConsumerRunningInfo::::formatString()", "286": "ConsumerRunningInfo::::formatString()", "287": "ConsumerRunningInfo::::formatString()", "288": "ConsumerRunningInfo::::formatString()", "289": "ConsumerRunningInfo::::formatString()", "290": "ConsumerRunningInfo::::formatString()", "291": "ConsumerRunningInfo::::formatString()", "292": "ConsumerRunningInfo::::formatString()", "293": "ConsumerRunningInfo::::formatString()", "294": "ConsumerRunningInfo::::formatString()", "295": "ConsumerRunningInfo::::formatString()", "296": "ConsumerRunningInfo::::formatString()", "297": "ConsumerRunningInfo::::formatString()", "298": "ConsumerRunningInfo::::formatString()", "299": "ConsumerRunningInfo::::formatString()", "300": "ConsumerRunningInfo::::formatString()", "301": "ConsumerRunningInfo::::formatString()", "302": "ConsumerRunningInfo::::formatString()", "303": "ConsumerRunningInfo::::formatString()", "305": "ConsumerRunningInfo::::getJstack()", "306": "ConsumerRunningInfo::::getJstack()", "307": "ConsumerRunningInfo::::getJstack()", "309": "ConsumerRunningInfo::::setJstack(java.lang.String)", "310": "ConsumerRunningInfo::::setJstack(java.lang.String)", "311": "ConsumerRunningInfo::::setJstack(java.lang.String)"}, "test_reverse_method_lines_dic": {"43": "ConsumerRunningInfoTest::::init()", "44": "ConsumerRunningInfoTest::::init()", "45": "ConsumerRunningInfoTest::::init()", "46": "ConsumerRunningInfoTest::::init()", "47": "ConsumerRunningInfoTest::::init()", "48": "ConsumerRunningInfoTest::::init()", "49": "ConsumerRunningInfoTest::::init()", "50": "ConsumerRunningInfoTest::::init()", "51": "ConsumerRunningInfoTest::::init()", "52": "ConsumerRunningInfoTest::::init()", "53": "ConsumerRunningInfoTest::::init()", "54": "ConsumerRunningInfoTest::::init()", "55": "ConsumerRunningInfoTest::::init()", "56": "ConsumerRunningInfoTest::::init()", "57": "ConsumerRunningInfoTest::::init()", "58": "ConsumerRunningInfoTest::::init()", "59": "ConsumerRunningInfoTest::::init()", "60": "ConsumerRunningInfoTest::::init()", "61": "ConsumerRunningInfoTest::::init()", "62": "ConsumerRunningInfoTest::::init()", "63": "ConsumerRunningInfoTest::::init()", "64": "ConsumerRunningInfoTest::::init()", "65": "ConsumerRunningInfoTest::::init()", "66": "ConsumerRunningInfoTest::::init()", "67": "ConsumerRunningInfoTest::::init()", "68": "ConsumerRunningInfoTest::::init()", "70": "ConsumerRunningInfoTest::::testFromJson()", "71": "ConsumerRunningInfoTest::::testFromJson()", "72": "ConsumerRunningInfoTest::::testFromJson()", "73": "ConsumerRunningInfoTest::::testFromJson()", "74": "ConsumerRunningInfoTest::::testFromJson()", "75": "ConsumerRunningInfoTest::::testFromJson()", "76": "ConsumerRunningInfoTest::::testFromJson()", "77": "ConsumerRunningInfoTest::::testFromJson()", "78": "ConsumerRunningInfoTest::::testFromJson()", "79": "ConsumerRunningInfoTest::::testFromJson()", "80": "ConsumerRunningInfoTest::::testFromJson()", "81": "ConsumerRunningInfoTest::::testFromJson()", "82": "ConsumerRunningInfoTest::::testFromJson()", "83": "ConsumerRunningInfoTest::::testFromJson()", "84": "ConsumerRunningInfoTest::::testFromJson()", "85": "ConsumerRunningInfoTest::::testFromJson()", "86": "ConsumerRunningInfoTest::::testFromJson()", "88": "ConsumerRunningInfoTest::::testAnalyzeRebalance()", "89": "ConsumerRunningInfoTest::::testAnalyzeRebalance()", "90": "ConsumerRunningInfoTest::::testAnalyzeRebalance()", "91": "ConsumerRunningInfoTest::::testAnalyzeRebalance()", "92": "ConsumerRunningInfoTest::::testAnalyzeRebalance()", "94": "ConsumerRunningInfoTest::::testAnalyzeProcessQueue()", "95": "ConsumerRunningInfoTest::::testAnalyzeProcessQueue()", "96": "ConsumerRunningInfoTest::::testAnalyzeProcessQueue()", "97": "ConsumerRunningInfoTest::::testAnalyzeProcessQueue()", "98": "ConsumerRunningInfoTest::::testAnalyzeProcessQueue()", "99": "ConsumerRunningInfoTest::::testAnalyzeProcessQueue()", "101": "ConsumerRunningInfoTest::::testAnalyzeSubscription()", "102": "ConsumerRunningInfoTest::::testAnalyzeSubscription()", "103": "ConsumerRunningInfoTest::::testAnalyzeSubscription()", "104": "ConsumerRunningInfoTest::::testAnalyzeSubscription()", "105": "ConsumerRunningInfoTest::::testAnalyzeSubscription()"}, "tests": [{"test_lines": [70, 86], "covered_lines": [30, 38, 40, 42, 44, 163, 167, 168, 171, 175, 176, 179, 183, 184, 187, 191, 192, 306, 310, 311]}, {"test_lines": [88, 92], "covered_lines": [30, 38, 40, 42, 44, 102, 167, 168, 175, 176, 183, 184, 191, 192, 310, 311]}, {"test_lines": [94, 99], "covered_lines": [30, 38, 40, 42, 44, 106, 107, 109, 111, 112, 114, 117, 119, 120, 123, 159, 163, 167, 168, 175, 176, 183, 184, 191, 192, 310, 311]}, {"test_lines": [101, 105], "covered_lines": [30, 38, 40, 42, 44, 49, 51, 53, 55, 56, 58, 61, 64, 65, 66, 68, 71, 98, 163, 167, 168, 175, 176, 183, 184, 191, 192, 310, 311]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/QueryConsumeQueueResponseBody.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "import java.util.List;\n", "\n", "public class QueryConsumeQueueResponseBody extends RemotingSerializable {\n", "\n", "    private SubscriptionData subscriptionData;\n", "    private String filterData;\n", "    private List<ConsumeQueueData> queueData;\n", "    private long maxQueueIndex;\n", "    private long minQueueIndex;\n", "\n", "    public SubscriptionData getSubscriptionData() {\n", "        return subscriptionData;\n", "    }\n", "\n", "    public void setSubscriptionData(SubscriptionData subscriptionData) {\n", "        this.subscriptionData = subscriptionData;\n", "    }\n", "\n", "    public String getFilterData() {\n", "        return filterData;\n", "    }\n", "\n", "    public void setFilterData(String filterData) {\n", "        this.filterData = filterData;\n", "    }\n", "\n", "    public List<ConsumeQueueData> getQueueData() {\n", "        return queueData;\n", "    }\n", "\n", "    public void setQueueData(List<ConsumeQueueData> queueData) {\n", "        this.queueData = queueData;\n", "    }\n", "\n", "    public long getMaxQueueIndex() {\n", "        return maxQueueIndex;\n", "    }\n", "\n", "    public void setMaxQueueIndex(long maxQueueIndex) {\n", "        this.maxQueueIndex = maxQueueIndex;\n", "    }\n", "\n", "    public long getMinQueueIndex() {\n", "        return minQueueIndex;\n", "    }\n", "\n", "    public void setMinQueueIndex(long minQueueIndex) {\n", "        this.minQueueIndex = minQueueIndex;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class QueryConsumeQueueResponseBodyTest {\n", "\n", "    @Test\n", "    public void test(){\n", "        QueryConsumeQueueResponseBody body = new QueryConsumeQueueResponseBody();\n", "\n", "        SubscriptionData subscriptionData = new SubscriptionData();\n", "        ConsumeQueueData data = new ConsumeQueueData();\n", "        data.setBitMap(\"defaultBitMap\");\n", "        data.setEval(false);\n", "        data.setMsg(\"this is default msg\");\n", "        data.setPhysicOffset(10L);\n", "        data.setPhysicSize(1);\n", "        data.setTagsCode(1L);\n", "        List<ConsumeQueueData> list = new ArrayList<ConsumeQueueData>();\n", "        list.add(data);\n", "\n", "        body.setQueueData(list);\n", "        body.setFilterData(\"default filter data\");\n", "        body.setMaxQueueIndex(100L);\n", "        body.setMinQueueIndex(1L);\n", "        body.setSubscriptionData(subscriptionData);\n", "\n", "        String json = RemotingSerializable.toJson(body, true);\n", "        QueryConsumeQueueResponseBody fromJson = RemotingSerializable.fromJson(json, QueryConsumeQueueResponseBody.class);\n", "        System.out.println(json);\n", "        //test ConsumeQueue\n", "        ConsumeQueueData jsonData = fromJson.getQueueData().get(0);\n", "        assertThat(jsonData.getMsg()).isEqualTo(\"this is default msg\");\n", "        assertThat(jsonData.getPhysicSize()).isEqualTo(1);\n", "        assertThat(jsonData.getBitMap()).isEqualTo(\"defaultBitMap\");\n", "        assertThat(jsonData.getTagsCode()).isEqualTo(1L);\n", "        assertThat(jsonData.getPhysicSize()).isEqualTo(1);\n", "\n", "        //test QueryConsumeQueueResponseBody\n", "        assertThat(fromJson.getFilterData()).isEqualTo(\"default filter data\");\n", "        assertThat(fromJson.getMaxQueueIndex()).isEqualTo(100L);\n", "        assertThat(fromJson.getMinQueueIndex()).isEqualTo(1L);\n", "        assertThat(fromJson.getSubscriptionData()).isEqualTo(subscriptionData);\n", "\n", "    }\n", "}\n"], "method_lines_dic": {"QueryConsumeQueueResponseBody::::getSubscriptionData()": [33, 35], "QueryConsumeQueueResponseBody::::setSubscriptionData(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)": [37, 39], "QueryConsumeQueueResponseBody::::getFilterData()": [41, 43], "QueryConsumeQueueResponseBody::::setFilterData(java.lang.String)": [45, 47], "QueryConsumeQueueResponseBody::::getQueueData()": [49, 51], "QueryConsumeQueueResponseBody::::setQueueData(java.util.List<org.apache.rocketmq.common.protocol.body.ConsumeQueueData>)": [53, 55], "QueryConsumeQueueResponseBody::::getMaxQueueIndex()": [57, 59], "QueryConsumeQueueResponseBody::::setMaxQueueIndex(long)": [61, 63], "QueryConsumeQueueResponseBody::::getMinQueueIndex()": [65, 67], "QueryConsumeQueueResponseBody::::setMinQueueIndex(long)": [69, 71]}, "test_method_lines_dic": {"QueryConsumeQueueResponseBodyTest::::test()": [31, 69]}, "reverse_method_lines_dic": {"33": "QueryConsumeQueueResponseBody::::getSubscriptionData()", "34": "QueryConsumeQueueResponseBody::::getSubscriptionData()", "35": "QueryConsumeQueueResponseBody::::getSubscriptionData()", "37": "QueryConsumeQueueResponseBody::::setSubscriptionData(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)", "38": "QueryConsumeQueueResponseBody::::setSubscriptionData(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)", "39": "QueryConsumeQueueResponseBody::::setSubscriptionData(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)", "41": "QueryConsumeQueueResponseBody::::getFilterData()", "42": "QueryConsumeQueueResponseBody::::getFilterData()", "43": "QueryConsumeQueueResponseBody::::getFilterData()", "45": "QueryConsumeQueueResponseBody::::setFilterData(java.lang.String)", "46": "QueryConsumeQueueResponseBody::::setFilterData(java.lang.String)", "47": "QueryConsumeQueueResponseBody::::setFilterData(java.lang.String)", "49": "QueryConsumeQueueResponseBody::::getQueueData()", "50": "QueryConsumeQueueResponseBody::::getQueueData()", "51": "QueryConsumeQueueResponseBody::::getQueueData()", "53": "QueryConsumeQueueResponseBody::::setQueueData(java.util.List<org.apache.rocketmq.common.protocol.body.ConsumeQueueData>)", "54": "QueryConsumeQueueResponseBody::::setQueueData(java.util.List<org.apache.rocketmq.common.protocol.body.ConsumeQueueData>)", "55": "QueryConsumeQueueResponseBody::::setQueueData(java.util.List<org.apache.rocketmq.common.protocol.body.ConsumeQueueData>)", "57": "QueryConsumeQueueResponseBody::::getMaxQueueIndex()", "58": "QueryConsumeQueueResponseBody::::getMaxQueueIndex()", "59": "QueryConsumeQueueResponseBody::::getMaxQueueIndex()", "61": "QueryConsumeQueueResponseBody::::setMaxQueueIndex(long)", "62": "QueryConsumeQueueResponseBody::::setMaxQueueIndex(long)", "63": "QueryConsumeQueueResponseBody::::setMaxQueueIndex(long)", "65": "QueryConsumeQueueResponseBody::::getMinQueueIndex()", "66": "QueryConsumeQueueResponseBody::::getMinQueueIndex()", "67": "QueryConsumeQueueResponseBody::::getMinQueueIndex()", "69": "QueryConsumeQueueResponseBody::::setMinQueueIndex(long)", "70": "QueryConsumeQueueResponseBody::::setMinQueueIndex(long)", "71": "QueryConsumeQueueResponseBody::::setMinQueueIndex(long)"}, "test_reverse_method_lines_dic": {"31": "QueryConsumeQueueResponseBodyTest::::test()", "32": "QueryConsumeQueueResponseBodyTest::::test()", "33": "QueryConsumeQueueResponseBodyTest::::test()", "34": "QueryConsumeQueueResponseBodyTest::::test()", "35": "QueryConsumeQueueResponseBodyTest::::test()", "36": "QueryConsumeQueueResponseBodyTest::::test()", "37": "QueryConsumeQueueResponseBodyTest::::test()", "38": "QueryConsumeQueueResponseBodyTest::::test()", "39": "QueryConsumeQueueResponseBodyTest::::test()", "40": "QueryConsumeQueueResponseBodyTest::::test()", "41": "QueryConsumeQueueResponseBodyTest::::test()", "42": "QueryConsumeQueueResponseBodyTest::::test()", "43": "QueryConsumeQueueResponseBodyTest::::test()", "44": "QueryConsumeQueueResponseBodyTest::::test()", "45": "QueryConsumeQueueResponseBodyTest::::test()", "46": "QueryConsumeQueueResponseBodyTest::::test()", "47": "QueryConsumeQueueResponseBodyTest::::test()", "48": "QueryConsumeQueueResponseBodyTest::::test()", "49": "QueryConsumeQueueResponseBodyTest::::test()", "50": "QueryConsumeQueueResponseBodyTest::::test()", "51": "QueryConsumeQueueResponseBodyTest::::test()", "52": "QueryConsumeQueueResponseBodyTest::::test()", "53": "QueryConsumeQueueResponseBodyTest::::test()", "54": "QueryConsumeQueueResponseBodyTest::::test()", "55": "QueryConsumeQueueResponseBodyTest::::test()", "56": "QueryConsumeQueueResponseBodyTest::::test()", "57": "QueryConsumeQueueResponseBodyTest::::test()", "58": "QueryConsumeQueueResponseBodyTest::::test()", "59": "QueryConsumeQueueResponseBodyTest::::test()", "60": "QueryConsumeQueueResponseBodyTest::::test()", "61": "QueryConsumeQueueResponseBodyTest::::test()", "62": "QueryConsumeQueueResponseBodyTest::::test()", "63": "QueryConsumeQueueResponseBodyTest::::test()", "64": "QueryConsumeQueueResponseBodyTest::::test()", "65": "QueryConsumeQueueResponseBodyTest::::test()", "66": "QueryConsumeQueueResponseBodyTest::::test()", "67": "QueryConsumeQueueResponseBodyTest::::test()", "68": "QueryConsumeQueueResponseBodyTest::::test()", "69": "QueryConsumeQueueResponseBodyTest::::test()"}, "tests": [{"test_lines": [31, 69], "covered_lines": [25, 34, 38, 39, 42, 46, 47, 50, 54, 55, 58, 62, 63, 66, 70, 71]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumeStatsList.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "import java.util.Map;\n", "import org.apache.rocketmq.common.admin.ConsumeStats;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class ConsumeStatsList extends RemotingSerializable {\n", "    private List<Map<String/*subscriptionGroupName*/, List<ConsumeStats>>> consumeStatsList = new ArrayList<Map<String/*subscriptionGroupName*/, List<ConsumeStats>>>();\n", "    private String brokerAddr;\n", "    private long totalDiff;\n", "\n", "    public List<Map<String, List<ConsumeStats>>> getConsumeStatsList() {\n", "        return consumeStatsList;\n", "    }\n", "\n", "    public void setConsumeStatsList(List<Map<String, List<ConsumeStats>>> consumeStatsList) {\n", "        this.consumeStatsList = consumeStatsList;\n", "    }\n", "\n", "    public String getBrokerAddr() {\n", "        return brokerAddr;\n", "    }\n", "\n", "    public void setBrokerAddr(String brokerAddr) {\n", "        this.brokerAddr = brokerAddr;\n", "    }\n", "\n", "    public long getTotalDiff() {\n", "        return totalDiff;\n", "    }\n", "\n", "    public void setTotalDiff(long totalDiff) {\n", "        this.totalDiff = totalDiff;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.common.admin.ConsumeStats;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "\n", "import java.util.ArrayList;\n", "import java.util.HashMap;\n", "import java.util.List;\n", "import java.util.Map;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class ConsumeStatsListTest {\n", "\n", "    @Test\n", "    public void testFromJson() {\n", "        ConsumeStats consumeStats = new ConsumeStats();\n", "        ArrayList<ConsumeStats> consumeStatsListValue = new ArrayList<ConsumeStats>();\n", "        consumeStatsListValue.add(consumeStats);\n", "        HashMap<String, List<ConsumeStats>> map = new HashMap<String, List<ConsumeStats>>();\n", "        map.put(\"subscriptionGroupName\", consumeStatsListValue);\n", "        List<Map<String/*subscriptionGroupName*/, List<ConsumeStats>>> consumeStatsListValue2 = new ArrayList<Map<String, List<ConsumeStats>>>();\n", "        consumeStatsListValue2.add(map);\n", "\n", "        String brokerAddr = \"brokerAddr\";\n", "        long totalDiff = 12352L;\n", "        ConsumeStatsList consumeStatsList = new ConsumeStatsList();\n", "        consumeStatsList.setBrokerAddr(brokerAddr);\n", "        consumeStatsList.setTotalDiff(totalDiff);\n", "        consumeStatsList.setConsumeStatsList(consumeStatsListValue2);\n", "\n", "        String toJson = RemotingSerializable.toJson(consumeStatsList, true);\n", "        ConsumeStatsList fromJson = RemotingSerializable.fromJson(toJson, ConsumeStatsList.class);\n", "\n", "        assertThat(fromJson.getBrokerAddr()).isEqualTo(brokerAddr);\n", "        assertThat(fromJson.getTotalDiff()).isEqualTo(totalDiff);\n", "\n", "        List<Map<String, List<ConsumeStats>>> fromJsonConsumeStatsList = fromJson.getConsumeStatsList();\n", "        assertThat(fromJsonConsumeStatsList).isInstanceOf(List.class);\n", "\n", "        ConsumeStats fromJsonConsumeStats = fromJsonConsumeStatsList.get(0).get(\"subscriptionGroupName\").get(0);\n", "        assertThat(fromJsonConsumeStats).isExactlyInstanceOf(ConsumeStats.class);\n", "    }\n", "}"], "method_lines_dic": {"ConsumeStatsList::::getConsumeStatsList()": [30, 32], "ConsumeStatsList::::setConsumeStatsList(java.util.List<java.util.Map<java.lang.String, java.util.List<org.apache.rocketmq.common.admin.ConsumeStats>>>)": [34, 36], "ConsumeStatsList::::getBrokerAddr()": [38, 40], "ConsumeStatsList::::setBrokerAddr(java.lang.String)": [42, 44], "ConsumeStatsList::::getTotalDiff()": [46, 48], "ConsumeStatsList::::setTotalDiff(long)": [50, 52]}, "test_method_lines_dic": {"ConsumeStatsListTest::::testFromJson()": [33, 61]}, "reverse_method_lines_dic": {"30": "ConsumeStatsList::::getConsumeStatsList()", "31": "ConsumeStatsList::::getConsumeStatsList()", "32": "ConsumeStatsList::::getConsumeStatsList()", "34": "ConsumeStatsList::::setConsumeStatsList(java.util.List<java.util.Map<java.lang.String, java.util.List<org.apache.rocketmq.common.admin.ConsumeStats>>>)", "35": "ConsumeStatsList::::setConsumeStatsList(java.util.List<java.util.Map<java.lang.String, java.util.List<org.apache.rocketmq.common.admin.ConsumeStats>>>)", "36": "ConsumeStatsList::::setConsumeStatsList(java.util.List<java.util.Map<java.lang.String, java.util.List<org.apache.rocketmq.common.admin.ConsumeStats>>>)", "38": "ConsumeStatsList::::getBrokerAddr()", "39": "ConsumeStatsList::::getBrokerAddr()", "40": "ConsumeStatsList::::getBrokerAddr()", "42": "ConsumeStatsList::::setBrokerAddr(java.lang.String)", "43": "ConsumeStatsList::::setBrokerAddr(java.lang.String)", "44": "ConsumeStatsList::::setBrokerAddr(java.lang.String)", "46": "ConsumeStatsList::::getTotalDiff()", "47": "ConsumeStatsList::::getTotalDiff()", "48": "ConsumeStatsList::::getTotalDiff()", "50": "ConsumeStatsList::::setTotalDiff(long)", "51": "ConsumeStatsList::::setTotalDiff(long)", "52": "ConsumeStatsList::::setTotalDiff(long)"}, "test_reverse_method_lines_dic": {"33": "ConsumeStatsListTest::::testFromJson()", "34": "ConsumeStatsListTest::::testFromJson()", "35": "ConsumeStatsListTest::::testFromJson()", "36": "ConsumeStatsListTest::::testFromJson()", "37": "ConsumeStatsListTest::::testFromJson()", "38": "ConsumeStatsListTest::::testFromJson()", "39": "ConsumeStatsListTest::::testFromJson()", "40": "ConsumeStatsListTest::::testFromJson()", "41": "ConsumeStatsListTest::::testFromJson()", "42": "ConsumeStatsListTest::::testFromJson()", "43": "ConsumeStatsListTest::::testFromJson()", "44": "ConsumeStatsListTest::::testFromJson()", "45": "ConsumeStatsListTest::::testFromJson()", "46": "ConsumeStatsListTest::::testFromJson()", "47": "ConsumeStatsListTest::::testFromJson()", "48": "ConsumeStatsListTest::::testFromJson()", "49": "ConsumeStatsListTest::::testFromJson()", "50": "ConsumeStatsListTest::::testFromJson()", "51": "ConsumeStatsListTest::::testFromJson()", "52": "ConsumeStatsListTest::::testFromJson()", "53": "ConsumeStatsListTest::::testFromJson()", "54": "ConsumeStatsListTest::::testFromJson()", "55": "ConsumeStatsListTest::::testFromJson()", "56": "ConsumeStatsListTest::::testFromJson()", "57": "ConsumeStatsListTest::::testFromJson()", "58": "ConsumeStatsListTest::::testFromJson()", "59": "ConsumeStatsListTest::::testFromJson()", "60": "ConsumeStatsListTest::::testFromJson()", "61": "ConsumeStatsListTest::::testFromJson()"}, "tests": [{"test_lines": [33, 61], "covered_lines": [25, 26, 31, 35, 36, 39, 43, 44, 47, 51, 52]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/BrokerStatsData.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class BrokerStatsData extends RemotingSerializable {\n", "\n", "    private BrokerStatsItem statsMinute;\n", "\n", "    private BrokerStatsItem statsHour;\n", "\n", "    private BrokerStatsItem statsDay;\n", "\n", "    public BrokerStatsItem getStatsMinute() {\n", "        return statsMinute;\n", "    }\n", "\n", "    public void setStatsMinute(BrokerStatsItem statsMinute) {\n", "        this.statsMinute = statsMinute;\n", "    }\n", "\n", "    public BrokerStatsItem getStatsHour() {\n", "        return statsHour;\n", "    }\n", "\n", "    public void setStatsHour(BrokerStatsItem statsHour) {\n", "        this.statsHour = statsHour;\n", "    }\n", "\n", "    public BrokerStatsItem getStatsDay() {\n", "        return statsDay;\n", "    }\n", "\n", "    public void setStatsDay(BrokerStatsItem statsDay) {\n", "        this.statsDay = statsDay;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.assertj.core.api.Assertions.within;\n", "\n", "public class BrokerStatsDataTest {\n", "\n", "    @Test\n", "    public void testFromJson() throws Exception {\n", "        BrokerStatsData brokerStatsData = new BrokerStatsData();\n", "\n", "        {\n", "            BrokerStatsItem brokerStatsItem = new BrokerStatsItem();\n", "            brokerStatsItem.setAvgpt(10.0);\n", "            brokerStatsItem.setSum(100L);\n", "            brokerStatsItem.setTps(100.0);\n", "            brokerStatsData.setStatsDay(brokerStatsItem);\n", "        }\n", "\n", "        {\n", "            BrokerStatsItem brokerStatsItem = new BrokerStatsItem();\n", "            brokerStatsItem.setAvgpt(10.0);\n", "            brokerStatsItem.setSum(100L);\n", "            brokerStatsItem.setTps(100.0);\n", "            brokerStatsData.setStatsHour(brokerStatsItem);\n", "        }\n", "\n", "        {\n", "            BrokerStatsItem brokerStatsItem = new BrokerStatsItem();\n", "            brokerStatsItem.setAvgpt(10.0);\n", "            brokerStatsItem.setSum(100L);\n", "            brokerStatsItem.setTps(100.0);\n", "            brokerStatsData.setStatsMinute(brokerStatsItem);\n", "        }\n", "\n", "        String json = RemotingSerializable.toJson(brokerStatsData, true);\n", "        BrokerStatsData brokerStatsDataResult = RemotingSerializable.fromJson(json, BrokerStatsData.class);\n", "\n", "        assertThat(brokerStatsDataResult.getStatsMinute().getAvgpt()).isCloseTo(brokerStatsData.getStatsMinute().getAvgpt(), within(0.0001));\n", "        assertThat(brokerStatsDataResult.getStatsMinute().getTps()).isCloseTo(brokerStatsData.getStatsMinute().getTps(), within(0.0001));\n", "        assertThat(brokerStatsDataResult.getStatsMinute().getSum()).isEqualTo(brokerStatsData.getStatsMinute().getSum());\n", "\n", "        assertThat(brokerStatsDataResult.getStatsHour().getAvgpt()).isCloseTo(brokerStatsData.getStatsHour().getAvgpt(), within(0.0001));\n", "        assertThat(brokerStatsDataResult.getStatsHour().getTps()).isCloseTo(brokerStatsData.getStatsHour().getTps(), within(0.0001));\n", "        assertThat(brokerStatsDataResult.getStatsHour().getSum()).isEqualTo(brokerStatsData.getStatsHour().getSum());\n", "\n", "        assertThat(brokerStatsDataResult.getStatsDay().getAvgpt()).isCloseTo(brokerStatsData.getStatsDay().getAvgpt(), within(0.0001));\n", "        assertThat(brokerStatsDataResult.getStatsDay().getTps()).isCloseTo(brokerStatsData.getStatsDay().getTps(), within(0.0001));\n", "        assertThat(brokerStatsDataResult.getStatsDay().getSum()).isEqualTo(brokerStatsData.getStatsDay().getSum());\n", "    }\n", "}\n"], "method_lines_dic": {"BrokerStatsData::::getStatsMinute()": [30, 32], "BrokerStatsData::::setStatsMinute(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)": [34, 36], "BrokerStatsData::::getStatsHour()": [38, 40], "BrokerStatsData::::setStatsHour(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)": [42, 44], "BrokerStatsData::::getStatsDay()": [46, 48], "BrokerStatsData::::setStatsDay(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)": [50, 52]}, "test_method_lines_dic": {"BrokerStatsDataTest::::testFromJson()": [28, 70]}, "reverse_method_lines_dic": {"30": "BrokerStatsData::::getStatsMinute()", "31": "BrokerStatsData::::getStatsMinute()", "32": "BrokerStatsData::::getStatsMinute()", "34": "BrokerStatsData::::setStatsMinute(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)", "35": "BrokerStatsData::::setStatsMinute(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)", "36": "BrokerStatsData::::setStatsMinute(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)", "38": "BrokerStatsData::::getStatsHour()", "39": "BrokerStatsData::::getStatsHour()", "40": "BrokerStatsData::::getStatsHour()", "42": "BrokerStatsData::::setStatsHour(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)", "43": "BrokerStatsData::::setStatsHour(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)", "44": "BrokerStatsData::::setStatsHour(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)", "46": "BrokerStatsData::::getStatsDay()", "47": "BrokerStatsData::::getStatsDay()", "48": "BrokerStatsData::::getStatsDay()", "50": "BrokerStatsData::::setStatsDay(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)", "51": "BrokerStatsData::::setStatsDay(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)", "52": "BrokerStatsData::::setStatsDay(org.apache.rocketmq.common.protocol.body.BrokerStatsItem)"}, "test_reverse_method_lines_dic": {"28": "BrokerStatsDataTest::::testFromJson()", "29": "BrokerStatsDataTest::::testFromJson()", "30": "BrokerStatsDataTest::::testFromJson()", "31": "BrokerStatsDataTest::::testFromJson()", "32": "BrokerStatsDataTest::::testFromJson()", "33": "BrokerStatsDataTest::::testFromJson()", "34": "BrokerStatsDataTest::::testFromJson()", "35": "BrokerStatsDataTest::::testFromJson()", "36": "BrokerStatsDataTest::::testFromJson()", "37": "BrokerStatsDataTest::::testFromJson()", "38": "BrokerStatsDataTest::::testFromJson()", "39": "BrokerStatsDataTest::::testFromJson()", "40": "BrokerStatsDataTest::::testFromJson()", "41": "BrokerStatsDataTest::::testFromJson()", "42": "BrokerStatsDataTest::::testFromJson()", "43": "BrokerStatsDataTest::::testFromJson()", "44": "BrokerStatsDataTest::::testFromJson()", "45": "BrokerStatsDataTest::::testFromJson()", "46": "BrokerStatsDataTest::::testFromJson()", "47": "BrokerStatsDataTest::::testFromJson()", "48": "BrokerStatsDataTest::::testFromJson()", "49": "BrokerStatsDataTest::::testFromJson()", "50": "BrokerStatsDataTest::::testFromJson()", "51": "BrokerStatsDataTest::::testFromJson()", "52": "BrokerStatsDataTest::::testFromJson()", "53": "BrokerStatsDataTest::::testFromJson()", "54": "BrokerStatsDataTest::::testFromJson()", "55": "BrokerStatsDataTest::::testFromJson()", "56": "BrokerStatsDataTest::::testFromJson()", "57": "BrokerStatsDataTest::::testFromJson()", "58": "BrokerStatsDataTest::::testFromJson()", "59": "BrokerStatsDataTest::::testFromJson()", "60": "BrokerStatsDataTest::::testFromJson()", "61": "BrokerStatsDataTest::::testFromJson()", "62": "BrokerStatsDataTest::::testFromJson()", "63": "BrokerStatsDataTest::::testFromJson()", "64": "BrokerStatsDataTest::::testFromJson()", "65": "BrokerStatsDataTest::::testFromJson()", "66": "BrokerStatsDataTest::::testFromJson()", "67": "BrokerStatsDataTest::::testFromJson()", "68": "BrokerStatsDataTest::::testFromJson()", "69": "BrokerStatsDataTest::::testFromJson()", "70": "BrokerStatsDataTest::::testFromJson()"}, "tests": [{"test_lines": [28, 70], "covered_lines": [22, 31, 35, 36, 39, 43, 44, 47, 51, 52]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/SubscriptionGroupWrapper.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import java.util.concurrent.ConcurrentHashMap;\n", "import java.util.concurrent.ConcurrentMap;\n", "import org.apache.rocketmq.common.DataVersion;\n", "import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class SubscriptionGroupWrapper extends RemotingSerializable {\n", "    private ConcurrentMap<String, SubscriptionGroupConfig> subscriptionGroupTable =\n", "        new ConcurrentHashMap<String, SubscriptionGroupConfig>(1024);\n", "    private DataVersion dataVersion = new DataVersion();\n", "\n", "    public ConcurrentMap<String, SubscriptionGroupConfig> getSubscriptionGroupTable() {\n", "        return subscriptionGroupTable;\n", "    }\n", "\n", "    public void setSubscriptionGroupTable(\n", "        ConcurrentMap<String, SubscriptionGroupConfig> subscriptionGroupTable) {\n", "        this.subscriptionGroupTable = subscriptionGroupTable;\n", "    }\n", "\n", "    public DataVersion getDataVersion() {\n", "        return dataVersion;\n", "    }\n", "\n", "    public void setDataVersion(DataVersion dataVersion) {\n", "        this.dataVersion = dataVersion;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.common.DataVersion;\n", "import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class SubscriptionGroupWrapperTest {\n", "\n", "    @Test\n", "    public void testFromJson(){\n", "        SubscriptionGroupWrapper subscriptionGroupWrapper = new SubscriptionGroupWrapper();\n", "        ConcurrentHashMap<String, SubscriptionGroupConfig> subscriptions = new ConcurrentHashMap<String, SubscriptionGroupConfig>();\n", "        SubscriptionGroupConfig subscriptionGroupConfig = new SubscriptionGroupConfig();\n", "        subscriptionGroupConfig.setConsumeBroadcastEnable(true);\n", "        subscriptionGroupConfig.setBrokerId(1234);\n", "        subscriptionGroupConfig.setGroupName(\"Consumer-group-one\");\n", "        subscriptions.put(\"Consumer-group-one\", subscriptionGroupConfig);\n", "        subscriptionGroupWrapper.setSubscriptionGroupTable(subscriptions);\n", "        DataVersion dataVersion = new DataVersion();\n", "        dataVersion.nextVersion();\n", "        subscriptionGroupWrapper.setDataVersion(dataVersion);\n", "        String json = RemotingSerializable.toJson(subscriptionGroupWrapper, true);\n", "        SubscriptionGroupWrapper fromJson = RemotingSerializable.fromJson(json, SubscriptionGroupWrapper.class);\n", "        assertThat(fromJson.getSubscriptionGroupTable()).containsKey(\"Consumer-group-one\");\n", "        assertThat(fromJson.getSubscriptionGroupTable().get(\"Consumer-group-one\").getGroupName()).isEqualTo(\"Consumer-group-one\");\n", "        assertThat(fromJson.getSubscriptionGroupTable().get(\"Consumer-group-one\").getBrokerId()).isEqualTo(1234);\n", "    }\n", "\n", "}\n"], "method_lines_dic": {"SubscriptionGroupWrapper::::getSubscriptionGroupTable()": [31, 33], "SubscriptionGroupWrapper::::setSubscriptionGroupTable(java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.rocketmq.common.subscription.SubscriptionGroupConfig>)": [35, 38], "SubscriptionGroupWrapper::::getDataVersion()": [40, 42], "SubscriptionGroupWrapper::::setDataVersion(org.apache.rocketmq.common.DataVersion)": [44, 46]}, "test_method_lines_dic": {"SubscriptionGroupWrapperTest::::testFromJson()": [29, 47]}, "reverse_method_lines_dic": {"31": "SubscriptionGroupWrapper::::getSubscriptionGroupTable()", "32": "SubscriptionGroupWrapper::::getSubscriptionGroupTable()", "33": "SubscriptionGroupWrapper::::getSubscriptionGroupTable()", "35": "SubscriptionGroupWrapper::::setSubscriptionGroupTable(java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.rocketmq.common.subscription.SubscriptionGroupConfig>)", "36": "SubscriptionGroupWrapper::::setSubscriptionGroupTable(java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.rocketmq.common.subscription.SubscriptionGroupConfig>)", "37": "SubscriptionGroupWrapper::::setSubscriptionGroupTable(java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.rocketmq.common.subscription.SubscriptionGroupConfig>)", "38": "SubscriptionGroupWrapper::::setSubscriptionGroupTable(java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.rocketmq.common.subscription.SubscriptionGroupConfig>)", "40": "SubscriptionGroupWrapper::::getDataVersion()", "41": "SubscriptionGroupWrapper::::getDataVersion()", "42": "SubscriptionGroupWrapper::::getDataVersion()", "44": "SubscriptionGroupWrapper::::setDataVersion(org.apache.rocketmq.common.DataVersion)", "45": "SubscriptionGroupWrapper::::setDataVersion(org.apache.rocketmq.common.DataVersion)", "46": "SubscriptionGroupWrapper::::setDataVersion(org.apache.rocketmq.common.DataVersion)"}, "test_reverse_method_lines_dic": {"29": "SubscriptionGroupWrapperTest::::testFromJson()", "30": "SubscriptionGroupWrapperTest::::testFromJson()", "31": "SubscriptionGroupWrapperTest::::testFromJson()", "32": "SubscriptionGroupWrapperTest::::testFromJson()", "33": "SubscriptionGroupWrapperTest::::testFromJson()", "34": "SubscriptionGroupWrapperTest::::testFromJson()", "35": "SubscriptionGroupWrapperTest::::testFromJson()", "36": "SubscriptionGroupWrapperTest::::testFromJson()", "37": "SubscriptionGroupWrapperTest::::testFromJson()", "38": "SubscriptionGroupWrapperTest::::testFromJson()", "39": "SubscriptionGroupWrapperTest::::testFromJson()", "40": "SubscriptionGroupWrapperTest::::testFromJson()", "41": "SubscriptionGroupWrapperTest::::testFromJson()", "42": "SubscriptionGroupWrapperTest::::testFromJson()", "43": "SubscriptionGroupWrapperTest::::testFromJson()", "44": "SubscriptionGroupWrapperTest::::testFromJson()", "45": "SubscriptionGroupWrapperTest::::testFromJson()", "46": "SubscriptionGroupWrapperTest::::testFromJson()", "47": "SubscriptionGroupWrapperTest::::testFromJson()"}, "tests": [{"test_lines": [29, 47], "covered_lines": [26, 27, 29, 32, 37, 38, 41, 45, 46]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumeMessageDirectlyResult.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class ConsumeMessageDirectlyResult extends RemotingSerializable {\n", "    private boolean order = false;\n", "    private boolean autoCommit = true;\n", "    private CMResult consumeResult;\n", "    private String remark;\n", "    private long spentTimeMills;\n", "\n", "    public boolean isOrder() {\n", "        return order;\n", "    }\n", "\n", "    public void setOrder(boolean order) {\n", "        this.order = order;\n", "    }\n", "\n", "    public boolean isAutoCommit() {\n", "        return autoCommit;\n", "    }\n", "\n", "    public void setAutoCommit(boolean autoCommit) {\n", "        this.autoCommit = autoCommit;\n", "    }\n", "\n", "    public String getRemark() {\n", "        return remark;\n", "    }\n", "\n", "    public void setRemark(String remark) {\n", "        this.remark = remark;\n", "    }\n", "\n", "    public CMResult getConsumeResult() {\n", "        return consumeResult;\n", "    }\n", "\n", "    public void setConsumeResult(CMResult consumeResult) {\n", "        this.consumeResult = consumeResult;\n", "    }\n", "\n", "    public long getSpentTimeMills() {\n", "        return spentTimeMills;\n", "    }\n", "\n", "    public void setSpentTimeMills(long spentTimeMills) {\n", "        this.spentTimeMills = spentTimeMills;\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "        return \"ConsumeMessageDirectlyResult [order=\" + order + \", autoCommit=\" + autoCommit\n", "            + \", consumeResult=\" + consumeResult + \", remark=\" + remark + \", spentTimeMills=\"\n", "            + spentTimeMills + \"]\";\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "\n", "public class ConsumeMessageDirectlyResultTest {\n", "    @Test\n", "    public void testFromJson() throws Exception {\n", "        ConsumeMessageDirectlyResult result = new ConsumeMessageDirectlyResult();\n", "        boolean defaultAutoCommit = true;\n", "        boolean defaultOrder = false;\n", "        long defaultSpentTimeMills = 1234567L;\n", "        String defaultRemark = \"defaultMark\";\n", "        CMResult defaultCMResult = CMResult.CR_COMMIT;\n", "\n", "        result.setAutoCommit(defaultAutoCommit);\n", "        result.setOrder(defaultOrder);\n", "        result.setRemark(defaultRemark);\n", "        result.setSpentTimeMills(defaultSpentTimeMills);\n", "        result.setConsumeResult(defaultCMResult);\n", "\n", "        String json = RemotingSerializable.toJson(result, true);\n", "        ConsumeMessageDirectlyResult fromJson = RemotingSerializable.fromJson(json, ConsumeMessageDirectlyResult.class);\n", "        assertThat(fromJson).isNotNull();\n", "\n", "        assertThat(fromJson.getRemark()).isEqualTo(defaultRemark);\n", "        assertThat(fromJson.getSpentTimeMills()).isEqualTo(defaultSpentTimeMills);\n", "        assertThat(fromJson.getConsumeResult()).isEqualTo(defaultCMResult);\n", "        assertThat(fromJson.isOrder()).isEqualTo(defaultOrder);\n", "\n", "    }\n", "}\n"], "method_lines_dic": {"ConsumeMessageDirectlyResult::::isOrder()": [29, 31], "ConsumeMessageDirectlyResult::::setOrder(boolean)": [33, 35], "ConsumeMessageDirectlyResult::::isAutoCommit()": [37, 39], "ConsumeMessageDirectlyResult::::setAutoCommit(boolean)": [41, 43], "ConsumeMessageDirectlyResult::::getRemark()": [45, 47], "ConsumeMessageDirectlyResult::::setRemark(java.lang.String)": [49, 51], "ConsumeMessageDirectlyResult::::getConsumeResult()": [53, 55], "ConsumeMessageDirectlyResult::::setConsumeResult(org.apache.rocketmq.common.protocol.body.CMResult)": [57, 59], "ConsumeMessageDirectlyResult::::getSpentTimeMills()": [61, 63], "ConsumeMessageDirectlyResult::::setSpentTimeMills(long)": [65, 67], "ConsumeMessageDirectlyResult::::toString()": [69, 74]}, "test_method_lines_dic": {"ConsumeMessageDirectlyResultTest::::testFromJson()": [27, 51]}, "reverse_method_lines_dic": {"29": "ConsumeMessageDirectlyResult::::isOrder()", "30": "ConsumeMessageDirectlyResult::::isOrder()", "31": "ConsumeMessageDirectlyResult::::isOrder()", "33": "ConsumeMessageDirectlyResult::::setOrder(boolean)", "34": "ConsumeMessageDirectlyResult::::setOrder(boolean)", "35": "ConsumeMessageDirectlyResult::::setOrder(boolean)", "37": "ConsumeMessageDirectlyResult::::isAutoCommit()", "38": "ConsumeMessageDirectlyResult::::isAutoCommit()", "39": "ConsumeMessageDirectlyResult::::isAutoCommit()", "41": "ConsumeMessageDirectlyResult::::setAutoCommit(boolean)", "42": "ConsumeMessageDirectlyResult::::setAutoCommit(boolean)", "43": "ConsumeMessageDirectlyResult::::setAutoCommit(boolean)", "45": "ConsumeMessageDirectlyResult::::getRemark()", "46": "ConsumeMessageDirectlyResult::::getRemark()", "47": "ConsumeMessageDirectlyResult::::getRemark()", "49": "ConsumeMessageDirectlyResult::::setRemark(java.lang.String)", "50": "ConsumeMessageDirectlyResult::::setRemark(java.lang.String)", "51": "ConsumeMessageDirectlyResult::::setRemark(java.lang.String)", "53": "ConsumeMessageDirectlyResult::::getConsumeResult()", "54": "ConsumeMessageDirectlyResult::::getConsumeResult()", "55": "ConsumeMessageDirectlyResult::::getConsumeResult()", "57": "ConsumeMessageDirectlyResult::::setConsumeResult(org.apache.rocketmq.common.protocol.body.CMResult)", "58": "ConsumeMessageDirectlyResult::::setConsumeResult(org.apache.rocketmq.common.protocol.body.CMResult)", "59": "ConsumeMessageDirectlyResult::::setConsumeResult(org.apache.rocketmq.common.protocol.body.CMResult)", "61": "ConsumeMessageDirectlyResult::::getSpentTimeMills()", "62": "ConsumeMessageDirectlyResult::::getSpentTimeMills()", "63": "ConsumeMessageDirectlyResult::::getSpentTimeMills()", "65": "ConsumeMessageDirectlyResult::::setSpentTimeMills(long)", "66": "ConsumeMessageDirectlyResult::::setSpentTimeMills(long)", "67": "ConsumeMessageDirectlyResult::::setSpentTimeMills(long)", "69": "ConsumeMessageDirectlyResult::::toString()", "70": "ConsumeMessageDirectlyResult::::toString()", "71": "ConsumeMessageDirectlyResult::::toString()", "72": "ConsumeMessageDirectlyResult::::toString()", "73": "ConsumeMessageDirectlyResult::::toString()", "74": "ConsumeMessageDirectlyResult::::toString()"}, "test_reverse_method_lines_dic": {"27": "ConsumeMessageDirectlyResultTest::::testFromJson()", "28": "ConsumeMessageDirectlyResultTest::::testFromJson()", "29": "ConsumeMessageDirectlyResultTest::::testFromJson()", "30": "ConsumeMessageDirectlyResultTest::::testFromJson()", "31": "ConsumeMessageDirectlyResultTest::::testFromJson()", "32": "ConsumeMessageDirectlyResultTest::::testFromJson()", "33": "ConsumeMessageDirectlyResultTest::::testFromJson()", "34": "ConsumeMessageDirectlyResultTest::::testFromJson()", "35": "ConsumeMessageDirectlyResultTest::::testFromJson()", "36": "ConsumeMessageDirectlyResultTest::::testFromJson()", "37": "ConsumeMessageDirectlyResultTest::::testFromJson()", "38": "ConsumeMessageDirectlyResultTest::::testFromJson()", "39": "ConsumeMessageDirectlyResultTest::::testFromJson()", "40": "ConsumeMessageDirectlyResultTest::::testFromJson()", "41": "ConsumeMessageDirectlyResultTest::::testFromJson()", "42": "ConsumeMessageDirectlyResultTest::::testFromJson()", "43": "ConsumeMessageDirectlyResultTest::::testFromJson()", "44": "ConsumeMessageDirectlyResultTest::::testFromJson()", "45": "ConsumeMessageDirectlyResultTest::::testFromJson()", "46": "ConsumeMessageDirectlyResultTest::::testFromJson()", "47": "ConsumeMessageDirectlyResultTest::::testFromJson()", "48": "ConsumeMessageDirectlyResultTest::::testFromJson()", "49": "ConsumeMessageDirectlyResultTest::::testFromJson()", "50": "ConsumeMessageDirectlyResultTest::::testFromJson()", "51": "ConsumeMessageDirectlyResultTest::::testFromJson()"}, "tests": [{"test_lines": [27, 51], "covered_lines": [22, 23, 24, 30, 34, 35, 38, 42, 43, 46, 50, 51, 54, 58, 59, 62, 66, 67]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/KVTable.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import java.util.HashMap;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class KVTable extends RemotingSerializable {\n", "    private HashMap<String, String> table = new HashMap<String, String>();\n", "\n", "    public HashMap<String, String> getTable() {\n", "        return table;\n", "    }\n", "\n", "    public void setTable(HashMap<String, String> table) {\n", "        this.table = table;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "import java.util.HashMap;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class KVTableTest {\n", "\n", "    @Test\n", "    public void testFromJson() throws Exception {\n", "        HashMap<String, String> table = new HashMap<String, String>();\n", "        table.put(\"key1\", \"value1\");\n", "        table.put(\"key2\", \"value2\");\n", "\n", "        KVTable kvTable = new KVTable();\n", "        kvTable.setTable(table);\n", "\n", "        String json = RemotingSerializable.toJson(kvTable, true);\n", "        KVTable fromJson = RemotingSerializable.fromJson(json, KVTable.class);\n", "\n", "        assertThat(fromJson).isNotEqualTo(kvTable);\n", "        assertThat(fromJson.getTable().get(\"key1\")).isEqualTo(kvTable.getTable().get(\"key1\"));\n", "        assertThat(fromJson.getTable().get(\"key2\")).isEqualTo(kvTable.getTable().get(\"key2\"));\n", "    }\n", "\n", "}\n"], "method_lines_dic": {"KVTable::::getTable()": [25, 27], "KVTable::::setTable(java.util.HashMap<java.lang.String, java.lang.String>)": [29, 31]}, "test_method_lines_dic": {"KVTableTest::::testFromJson()": [30, 45]}, "reverse_method_lines_dic": {"25": "KVTable::::getTable()", "26": "KVTable::::getTable()", "27": "KVTable::::getTable()", "29": "KVTable::::setTable(java.util.HashMap<java.lang.String, java.lang.String>)", "30": "KVTable::::setTable(java.util.HashMap<java.lang.String, java.lang.String>)", "31": "KVTable::::setTable(java.util.HashMap<java.lang.String, java.lang.String>)"}, "test_reverse_method_lines_dic": {"30": "KVTableTest::::testFromJson()", "31": "KVTableTest::::testFromJson()", "32": "KVTableTest::::testFromJson()", "33": "KVTableTest::::testFromJson()", "34": "KVTableTest::::testFromJson()", "35": "KVTableTest::::testFromJson()", "36": "KVTableTest::::testFromJson()", "37": "KVTableTest::::testFromJson()", "38": "KVTableTest::::testFromJson()", "39": "KVTableTest::::testFromJson()", "40": "KVTableTest::::testFromJson()", "41": "KVTableTest::::testFromJson()", "42": "KVTableTest::::testFromJson()", "43": "KVTableTest::::testFromJson()", "44": "KVTableTest::::testFromJson()", "45": "KVTableTest::::testFromJson()"}, "tests": [{"test_lines": [30, 45], "covered_lines": [22, 23, 26, 30, 31]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/CheckClientRequestBody.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class CheckClientRequestBody extends RemotingSerializable {\n", "\n", "    private String clientId;\n", "    private String group;\n", "    private SubscriptionData subscriptionData;\n", "\n", "    public String getClientId() {\n", "        return clientId;\n", "    }\n", "\n", "    public void setClientId(String clientId) {\n", "        this.clientId = clientId;\n", "    }\n", "\n", "    public String getGroup() {\n", "        return group;\n", "    }\n", "\n", "    public void setGroup(String group) {\n", "        this.group = group;\n", "    }\n", "\n", "    public SubscriptionData getSubscriptionData() {\n", "        return subscriptionData;\n", "    }\n", "\n", "    public void setSubscriptionData(SubscriptionData subscriptionData) {\n", "        this.subscriptionData = subscriptionData;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class CheckClientRequestBodyTest {\n", "\n", "    @Test\n", "    public void testFromJson() {\n", "        SubscriptionData subscriptionData = new SubscriptionData();\n", "        String expectedClientId = \"defalutId\";\n", "        String expectedGroup = \"defaultGroup\";\n", "        CheckClientRequestBody checkClientRequestBody = new CheckClientRequestBody();\n", "        checkClientRequestBody.setClientId(expectedClientId);\n", "        checkClientRequestBody.setGroup(expectedGroup);\n", "        checkClientRequestBody.setSubscriptionData(subscriptionData);\n", "        String json = RemotingSerializable.toJson(checkClientRequestBody, true);\n", "        CheckClientRequestBody fromJson = RemotingSerializable.fromJson(json, CheckClientRequestBody.class);\n", "        assertThat(fromJson.getClientId()).isEqualTo(expectedClientId);\n", "        assertThat(fromJson.getGroup()).isEqualTo(expectedGroup);\n", "        assertThat(fromJson.getSubscriptionData()).isEqualTo(subscriptionData);\n", "    }\n", "}"], "method_lines_dic": {"CheckClientRequestBody::::getClientId()": [29, 31], "CheckClientRequestBody::::setClientId(java.lang.String)": [33, 35], "CheckClientRequestBody::::getGroup()": [37, 39], "CheckClientRequestBody::::setGroup(java.lang.String)": [41, 43], "CheckClientRequestBody::::getSubscriptionData()": [45, 47], "CheckClientRequestBody::::setSubscriptionData(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)": [49, 51]}, "test_method_lines_dic": {"CheckClientRequestBodyTest::::testFromJson()": [28, 42]}, "reverse_method_lines_dic": {"29": "CheckClientRequestBody::::getClientId()", "30": "CheckClientRequestBody::::getClientId()", "31": "CheckClientRequestBody::::getClientId()", "33": "CheckClientRequestBody::::setClientId(java.lang.String)", "34": "CheckClientRequestBody::::setClientId(java.lang.String)", "35": "CheckClientRequestBody::::setClientId(java.lang.String)", "37": "CheckClientRequestBody::::getGroup()", "38": "CheckClientRequestBody::::getGroup()", "39": "CheckClientRequestBody::::getGroup()", "41": "CheckClientRequestBody::::setGroup(java.lang.String)", "42": "CheckClientRequestBody::::setGroup(java.lang.String)", "43": "CheckClientRequestBody::::setGroup(java.lang.String)", "45": "CheckClientRequestBody::::getSubscriptionData()", "46": "CheckClientRequestBody::::getSubscriptionData()", "47": "CheckClientRequestBody::::getSubscriptionData()", "49": "CheckClientRequestBody::::setSubscriptionData(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)", "50": "CheckClientRequestBody::::setSubscriptionData(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)", "51": "CheckClientRequestBody::::setSubscriptionData(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)"}, "test_reverse_method_lines_dic": {"28": "CheckClientRequestBodyTest::::testFromJson()", "29": "CheckClientRequestBodyTest::::testFromJson()", "30": "CheckClientRequestBodyTest::::testFromJson()", "31": "CheckClientRequestBodyTest::::testFromJson()", "32": "CheckClientRequestBodyTest::::testFromJson()", "33": "CheckClientRequestBodyTest::::testFromJson()", "34": "CheckClientRequestBodyTest::::testFromJson()", "35": "CheckClientRequestBodyTest::::testFromJson()", "36": "CheckClientRequestBodyTest::::testFromJson()", "37": "CheckClientRequestBodyTest::::testFromJson()", "38": "CheckClientRequestBodyTest::::testFromJson()", "39": "CheckClientRequestBodyTest::::testFromJson()", "40": "CheckClientRequestBodyTest::::testFromJson()", "41": "CheckClientRequestBodyTest::::testFromJson()", "42": "CheckClientRequestBodyTest::::testFromJson()"}, "tests": [{"test_lines": [28, 42], "covered_lines": [23, 30, 34, 35, 38, 42, 43, 46, 50, 51]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/QueryCorrectionOffsetBody.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class QueryCorrectionOffsetBody extends RemotingSerializable {\n", "    private Map<Integer, Long> correctionOffsets = new HashMap<Integer, Long>();\n", "\n", "    public Map<Integer, Long> getCorrectionOffsets() {\n", "        return correctionOffsets;\n", "    }\n", "\n", "    public void setCorrectionOffsets(Map<Integer, Long> correctionOffsets) {\n", "        this.correctionOffsets = correctionOffsets;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class QueryCorrectionOffsetBodyTest {\n", "\n", "    @Test\n", "    public void testFromJson() throws Exception {\n", "        QueryCorrectionOffsetBody qcob = new QueryCorrectionOffsetBody();\n", "        Map<Integer, Long> offsetMap = new HashMap<Integer, Long>();\n", "        offsetMap.put(1, 100L);\n", "        offsetMap.put(2, 200L);\n", "        qcob.setCorrectionOffsets(offsetMap);\n", "        String json = RemotingSerializable.toJson(qcob, true);\n", "        QueryCorrectionOffsetBody fromJson = RemotingSerializable.fromJson(json, QueryCorrectionOffsetBody.class);\n", "        assertThat(fromJson.getCorrectionOffsets().get(1)).isEqualTo(100L);\n", "        assertThat(fromJson.getCorrectionOffsets().get(2)).isEqualTo(200L);\n", "        assertThat(fromJson.getCorrectionOffsets().size()).isEqualTo(2);\n", "    }\n", "}\n"], "method_lines_dic": {"QueryCorrectionOffsetBody::::getCorrectionOffsets()": [26, 28], "QueryCorrectionOffsetBody::::setCorrectionOffsets(java.util.Map<java.lang.Integer, java.lang.Long>)": [30, 32]}, "test_method_lines_dic": {"QueryCorrectionOffsetBodyTest::::testFromJson()": [30, 42]}, "reverse_method_lines_dic": {"26": "QueryCorrectionOffsetBody::::getCorrectionOffsets()", "27": "QueryCorrectionOffsetBody::::getCorrectionOffsets()", "28": "QueryCorrectionOffsetBody::::getCorrectionOffsets()", "30": "QueryCorrectionOffsetBody::::setCorrectionOffsets(java.util.Map<java.lang.Integer, java.lang.Long>)", "31": "QueryCorrectionOffsetBody::::setCorrectionOffsets(java.util.Map<java.lang.Integer, java.lang.Long>)", "32": "QueryCorrectionOffsetBody::::setCorrectionOffsets(java.util.Map<java.lang.Integer, java.lang.Long>)"}, "test_reverse_method_lines_dic": {"30": "QueryCorrectionOffsetBodyTest::::testFromJson()", "31": "QueryCorrectionOffsetBodyTest::::testFromJson()", "32": "QueryCorrectionOffsetBodyTest::::testFromJson()", "33": "QueryCorrectionOffsetBodyTest::::testFromJson()", "34": "QueryCorrectionOffsetBodyTest::::testFromJson()", "35": "QueryCorrectionOffsetBodyTest::::testFromJson()", "36": "QueryCorrectionOffsetBodyTest::::testFromJson()", "37": "QueryCorrectionOffsetBodyTest::::testFromJson()", "38": "QueryCorrectionOffsetBodyTest::::testFromJson()", "39": "QueryCorrectionOffsetBodyTest::::testFromJson()", "40": "QueryCorrectionOffsetBodyTest::::testFromJson()", "41": "QueryCorrectionOffsetBodyTest::::testFromJson()", "42": "QueryCorrectionOffsetBodyTest::::testFromJson()"}, "tests": [{"test_lines": [30, 42], "covered_lines": [23, 24, 27, 31, 32]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/ResetOffsetBody.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import java.util.Map;\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class ResetOffsetBody extends RemotingSerializable {\n", "    private Map<MessageQueue, Long> offsetTable;\n", "\n", "    public Map<MessageQueue, Long> getOffsetTable() {\n", "        return offsetTable;\n", "    }\n", "\n", "    public void setOffsetTable(Map<MessageQueue, Long> offsetTable) {\n", "        this.offsetTable = offsetTable;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class ResetOffsetBodyTest {\n", "\n", "    @Test\n", "    public void testFromJson() throws Exception {\n", "        ResetOffsetBody rob = new ResetOffsetBody();\n", "        Map<MessageQueue, Long> offsetMap = new HashMap<MessageQueue, Long>();\n", "        MessageQueue queue = new MessageQueue();\n", "        queue.setQueueId(1);\n", "        queue.setBrokerName(\"brokerName\");\n", "        queue.setTopic(\"topic\");\n", "        offsetMap.put(queue, 100L);\n", "        rob.setOffsetTable(offsetMap);\n", "        String json = RemotingSerializable.toJson(rob, true);\n", "        ResetOffsetBody fromJson = RemotingSerializable.fromJson(json, ResetOffsetBody.class);\n", "        assertThat(fromJson.getOffsetTable().get(queue)).isEqualTo(100L);\n", "        assertThat(fromJson.getOffsetTable().size()).isEqualTo(1);\n", "    }\n", "}\n"], "method_lines_dic": {"ResetOffsetBody::::getOffsetTable()": [27, 29], "ResetOffsetBody::::setOffsetTable(java.util.Map<org.apache.rocketmq.common.message.MessageQueue, java.lang.Long>)": [31, 33]}, "test_method_lines_dic": {"ResetOffsetBodyTest::::testFromJson()": [31, 45]}, "reverse_method_lines_dic": {"27": "ResetOffsetBody::::getOffsetTable()", "28": "ResetOffsetBody::::getOffsetTable()", "29": "ResetOffsetBody::::getOffsetTable()", "31": "ResetOffsetBody::::setOffsetTable(java.util.Map<org.apache.rocketmq.common.message.MessageQueue, java.lang.Long>)", "32": "ResetOffsetBody::::setOffsetTable(java.util.Map<org.apache.rocketmq.common.message.MessageQueue, java.lang.Long>)", "33": "ResetOffsetBody::::setOffsetTable(java.util.Map<org.apache.rocketmq.common.message.MessageQueue, java.lang.Long>)"}, "test_reverse_method_lines_dic": {"31": "ResetOffsetBodyTest::::testFromJson()", "32": "ResetOffsetBodyTest::::testFromJson()", "33": "ResetOffsetBodyTest::::testFromJson()", "34": "ResetOffsetBodyTest::::testFromJson()", "35": "ResetOffsetBodyTest::::testFromJson()", "36": "ResetOffsetBodyTest::::testFromJson()", "37": "ResetOffsetBodyTest::::testFromJson()", "38": "ResetOffsetBodyTest::::testFromJson()", "39": "ResetOffsetBodyTest::::testFromJson()", "40": "ResetOffsetBodyTest::::testFromJson()", "41": "ResetOffsetBodyTest::::testFromJson()", "42": "ResetOffsetBodyTest::::testFromJson()", "43": "ResetOffsetBodyTest::::testFromJson()", "44": "ResetOffsetBodyTest::::testFromJson()", "45": "ResetOffsetBodyTest::::testFromJson()"}, "tests": [{"test_lines": [31, 45], "covered_lines": [24, 28, 32, 33]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumerConnection.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import java.util.HashSet;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "import java.util.concurrent.ConcurrentMap;\n", "import org.apache.rocketmq.common.consumer.ConsumeFromWhere;\n", "import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;\n", "import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class ConsumerConnection extends RemotingSerializable {\n", "    private HashSet<Connection> connectionSet = new HashSet<Connection>();\n", "    private ConcurrentMap<String/* Topic */, SubscriptionData> subscriptionTable =\n", "        new ConcurrentHashMap<String, SubscriptionData>();\n", "    private ConsumeType consumeType;\n", "    private MessageModel messageModel;\n", "    private ConsumeFromWhere consumeFromWhere;\n", "\n", "    public int computeMinVersion() {\n", "        int minVersion = Integer.MAX_VALUE;\n", "        for (Connection c : this.connectionSet) {\n", "            if (c.getVersion() < minVersion) {\n", "                minVersion = c.getVersion();\n", "            }\n", "        }\n", "\n", "        return minVersion;\n", "    }\n", "\n", "    public HashSet<Connection> getConnectionSet() {\n", "        return connectionSet;\n", "    }\n", "\n", "    public void setConnectionSet(HashSet<Connection> connectionSet) {\n", "        this.connectionSet = connectionSet;\n", "    }\n", "\n", "    public ConcurrentMap<String, SubscriptionData> getSubscriptionTable() {\n", "        return subscriptionTable;\n", "    }\n", "\n", "    public void setSubscriptionTable(ConcurrentHashMap<String, SubscriptionData> subscriptionTable) {\n", "        this.subscriptionTable = subscriptionTable;\n", "    }\n", "\n", "    public ConsumeType getConsumeType() {\n", "        return consumeType;\n", "    }\n", "\n", "    public void setConsumeType(ConsumeType consumeType) {\n", "        this.consumeType = consumeType;\n", "    }\n", "\n", "    public MessageModel getMessageModel() {\n", "        return messageModel;\n", "    }\n", "\n", "    public void setMessageModel(MessageModel messageModel) {\n", "        this.messageModel = messageModel;\n", "    }\n", "\n", "    public ConsumeFromWhere getConsumeFromWhere() {\n", "        return consumeFromWhere;\n", "    }\n", "\n", "    public void setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) {\n", "        this.consumeFromWhere = consumeFromWhere;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.body;\n", "\n", "import org.apache.rocketmq.common.consumer.ConsumeFromWhere;\n", "import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;\n", "import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "\n", "import java.util.HashSet;\n", "import java.util.Set;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class ConsumerConnectionTest {\n", "\n", "    @Test\n", "    public void testFromJson() {\n", "        ConsumerConnection consumerConnection = new ConsumerConnection();\n", "        HashSet<Connection> connections = new HashSet<Connection>();\n", "        Connection conn = new Connection();\n", "        connections.add(conn);\n", "\n", "        ConcurrentHashMap<String/* Topic */, SubscriptionData> subscriptionTable = new ConcurrentHashMap<String, SubscriptionData>();\n", "        SubscriptionData subscriptionData = new SubscriptionData();\n", "        subscriptionTable.put(\"topicA\", subscriptionData);\n", "\n", "        ConsumeType consumeType = ConsumeType.CONSUME_ACTIVELY;\n", "        MessageModel messageModel = MessageModel.CLUSTERING;\n", "        ConsumeFromWhere consumeFromWhere = ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET;\n", "\n", "        consumerConnection.setConnectionSet(connections);\n", "        consumerConnection.setSubscriptionTable(subscriptionTable);\n", "        consumerConnection.setConsumeType(consumeType);\n", "        consumerConnection.setMessageModel(messageModel);\n", "        consumerConnection.setConsumeFromWhere(consumeFromWhere);\n", "\n", "        String json = RemotingSerializable.toJson(consumerConnection, true);\n", "        ConsumerConnection fromJson = RemotingSerializable.fromJson(json, ConsumerConnection.class);\n", "        assertThat(fromJson.getConsumeType()).isEqualTo(ConsumeType.CONSUME_ACTIVELY);\n", "        assertThat(fromJson.getMessageModel()).isEqualTo(MessageModel.CLUSTERING);\n", "\n", "        HashSet<Connection> connectionSet = fromJson.getConnectionSet();\n", "        assertThat(connectionSet).isInstanceOf(Set.class);\n", "\n", "        SubscriptionData data = fromJson.getSubscriptionTable().get(\"topicA\");\n", "        assertThat(data).isExactlyInstanceOf(SubscriptionData.class);\n", "    }\n", "\n", "    @Test\n", "    public void testComputeMinVersion() {\n", "        ConsumerConnection consumerConnection = new ConsumerConnection();\n", "        HashSet<Connection> connections = new HashSet<Connection>();\n", "        Connection conn1 = new Connection();\n", "        conn1.setVersion(1);\n", "        connections.add(conn1);\n", "        Connection conn2 = new Connection();\n", "        conn2.setVersion(10);\n", "        connections.add(conn2);\n", "        consumerConnection.setConnectionSet(connections);\n", "\n", "        int version = consumerConnection.computeMinVersion();\n", "        assertThat(version).isEqualTo(1);\n", "    }\n", "}\n"], "method_lines_dic": {"ConsumerConnection::::computeMinVersion()": [37, 46], "ConsumerConnection::::getConnectionSet()": [48, 50], "ConsumerConnection::::setConnectionSet(java.util.HashSet<org.apache.rocketmq.common.protocol.body.Connection>)": [52, 54], "ConsumerConnection::::getSubscriptionTable()": [56, 58], "ConsumerConnection::::setSubscriptionTable(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData>)": [60, 62], "ConsumerConnection::::getConsumeType()": [64, 66], "ConsumerConnection::::setConsumeType(org.apache.rocketmq.common.protocol.heartbeat.ConsumeType)": [68, 70], "ConsumerConnection::::getMessageModel()": [72, 74], "ConsumerConnection::::setMessageModel(org.apache.rocketmq.common.protocol.heartbeat.MessageModel)": [76, 78], "ConsumerConnection::::getConsumeFromWhere()": [80, 82], "ConsumerConnection::::setConsumeFromWhere(org.apache.rocketmq.common.consumer.ConsumeFromWhere)": [84, 86]}, "test_method_lines_dic": {"ConsumerConnectionTest::::testFromJson()": [35, 66], "ConsumerConnectionTest::::testComputeMinVersion()": [68, 82]}, "reverse_method_lines_dic": {"37": "ConsumerConnection::::computeMinVersion()", "38": "ConsumerConnection::::computeMinVersion()", "39": "ConsumerConnection::::computeMinVersion()", "40": "ConsumerConnection::::computeMinVersion()", "41": "ConsumerConnection::::computeMinVersion()", "42": "ConsumerConnection::::computeMinVersion()", "43": "ConsumerConnection::::computeMinVersion()", "44": "ConsumerConnection::::computeMinVersion()", "45": "ConsumerConnection::::computeMinVersion()", "46": "ConsumerConnection::::computeMinVersion()", "48": "ConsumerConnection::::getConnectionSet()", "49": "ConsumerConnection::::getConnectionSet()", "50": "ConsumerConnection::::getConnectionSet()", "52": "ConsumerConnection::::setConnectionSet(java.util.HashSet<org.apache.rocketmq.common.protocol.body.Connection>)", "53": "ConsumerConnection::::setConnectionSet(java.util.HashSet<org.apache.rocketmq.common.protocol.body.Connection>)", "54": "ConsumerConnection::::setConnectionSet(java.util.HashSet<org.apache.rocketmq.common.protocol.body.Connection>)", "56": "ConsumerConnection::::getSubscriptionTable()", "57": "ConsumerConnection::::getSubscriptionTable()", "58": "ConsumerConnection::::getSubscriptionTable()", "60": "ConsumerConnection::::setSubscriptionTable(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData>)", "61": "ConsumerConnection::::setSubscriptionTable(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData>)", "62": "ConsumerConnection::::setSubscriptionTable(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData>)", "64": "ConsumerConnection::::getConsumeType()", "65": "ConsumerConnection::::getConsumeType()", "66": "ConsumerConnection::::getConsumeType()", "68": "ConsumerConnection::::setConsumeType(org.apache.rocketmq.common.protocol.heartbeat.ConsumeType)", "69": "ConsumerConnection::::setConsumeType(org.apache.rocketmq.common.protocol.heartbeat.ConsumeType)", "70": "ConsumerConnection::::setConsumeType(org.apache.rocketmq.common.protocol.heartbeat.ConsumeType)", "72": "ConsumerConnection::::getMessageModel()", "73": "ConsumerConnection::::getMessageModel()", "74": "ConsumerConnection::::getMessageModel()", "76": "ConsumerConnection::::setMessageModel(org.apache.rocketmq.common.protocol.heartbeat.MessageModel)", "77": "ConsumerConnection::::setMessageModel(org.apache.rocketmq.common.protocol.heartbeat.MessageModel)", "78": "ConsumerConnection::::setMessageModel(org.apache.rocketmq.common.protocol.heartbeat.MessageModel)", "80": "ConsumerConnection::::getConsumeFromWhere()", "81": "ConsumerConnection::::getConsumeFromWhere()", "82": "ConsumerConnection::::getConsumeFromWhere()", "84": "ConsumerConnection::::setConsumeFromWhere(org.apache.rocketmq.common.consumer.ConsumeFromWhere)", "85": "ConsumerConnection::::setConsumeFromWhere(org.apache.rocketmq.common.consumer.ConsumeFromWhere)", "86": "ConsumerConnection::::setConsumeFromWhere(org.apache.rocketmq.common.consumer.ConsumeFromWhere)"}, "test_reverse_method_lines_dic": {"35": "ConsumerConnectionTest::::testFromJson()", "36": "ConsumerConnectionTest::::testFromJson()", "37": "ConsumerConnectionTest::::testFromJson()", "38": "ConsumerConnectionTest::::testFromJson()", "39": "ConsumerConnectionTest::::testFromJson()", "40": "ConsumerConnectionTest::::testFromJson()", "41": "ConsumerConnectionTest::::testFromJson()", "42": "ConsumerConnectionTest::::testFromJson()", "43": "ConsumerConnectionTest::::testFromJson()", "44": "ConsumerConnectionTest::::testFromJson()", "45": "ConsumerConnectionTest::::testFromJson()", "46": "ConsumerConnectionTest::::testFromJson()", "47": "ConsumerConnectionTest::::testFromJson()", "48": "ConsumerConnectionTest::::testFromJson()", "49": "ConsumerConnectionTest::::testFromJson()", "50": "ConsumerConnectionTest::::testFromJson()", "51": "ConsumerConnectionTest::::testFromJson()", "52": "ConsumerConnectionTest::::testFromJson()", "53": "ConsumerConnectionTest::::testFromJson()", "54": "ConsumerConnectionTest::::testFromJson()", "55": "ConsumerConnectionTest::::testFromJson()", "56": "ConsumerConnectionTest::::testFromJson()", "57": "ConsumerConnectionTest::::testFromJson()", "58": "ConsumerConnectionTest::::testFromJson()", "59": "ConsumerConnectionTest::::testFromJson()", "60": "ConsumerConnectionTest::::testFromJson()", "61": "ConsumerConnectionTest::::testFromJson()", "62": "ConsumerConnectionTest::::testFromJson()", "63": "ConsumerConnectionTest::::testFromJson()", "64": "ConsumerConnectionTest::::testFromJson()", "65": "ConsumerConnectionTest::::testFromJson()", "66": "ConsumerConnectionTest::::testFromJson()", "68": "ConsumerConnectionTest::::testComputeMinVersion()", "69": "ConsumerConnectionTest::::testComputeMinVersion()", "70": "ConsumerConnectionTest::::testComputeMinVersion()", "71": "ConsumerConnectionTest::::testComputeMinVersion()", "72": "ConsumerConnectionTest::::testComputeMinVersion()", "73": "ConsumerConnectionTest::::testComputeMinVersion()", "74": "ConsumerConnectionTest::::testComputeMinVersion()", "75": "ConsumerConnectionTest::::testComputeMinVersion()", "76": "ConsumerConnectionTest::::testComputeMinVersion()", "77": "ConsumerConnectionTest::::testComputeMinVersion()", "78": "ConsumerConnectionTest::::testComputeMinVersion()", "79": "ConsumerConnectionTest::::testComputeMinVersion()", "80": "ConsumerConnectionTest::::testComputeMinVersion()", "81": "ConsumerConnectionTest::::testComputeMinVersion()", "82": "ConsumerConnectionTest::::testComputeMinVersion()"}, "tests": [{"test_lines": [35, 66], "covered_lines": [29, 30, 31, 49, 53, 54, 57, 61, 62, 65, 69, 70, 73, 77, 78, 81, 85, 86]}, {"test_lines": [68, 82], "covered_lines": [29, 30, 31, 38, 39, 40, 41, 43, 45, 53, 54]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/route/TopicRouteData.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "/**\n", " * $Id: TopicRouteData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $\n", " */\n", "package org.apache.rocketmq.common.protocol.route;\n", "\n", "import java.util.ArrayList;\n", "import java.util.HashMap;\n", "import java.util.List;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "/**\n", " * \u4e3b\u8981\u5305\u542bbroker\u4fe1\u606f\u548cqueue\u4fe1\u606f\n", " */\n", "public class TopicRouteData extends RemotingSerializable {\n", "    private String orderTopicConf;\n", "    private List<QueueData> queueDatas;\n", "    private List<BrokerData> brokerDatas;\n", "    private HashMap<String/* brokerAddr */, List<String>/* Filter Server */> filterServerTable;\n", "\n", "    public TopicRouteData cloneTopicRouteData() {\n", "        TopicRouteData topicRouteData = new TopicRouteData();\n", "        topicRouteData.setQueueDatas(new ArrayList<QueueData>());\n", "        topicRouteData.setBrokerDatas(new ArrayList<BrokerData>());\n", "        topicRouteData.setFilterServerTable(new HashMap<String, List<String>>());\n", "        topicRouteData.setOrderTopicConf(this.orderTopicConf);\n", "\n", "        if (this.queueDatas != null) {\n", "            topicRouteData.getQueueDatas().addAll(this.queueDatas);\n", "        }\n", "\n", "        if (this.brokerDatas != null) {\n", "            topicRouteData.getBrokerDatas().addAll(this.brokerDatas);\n", "        }\n", "\n", "        if (this.filterServerTable != null) {\n", "            topicRouteData.getFilterServerTable().putAll(this.filterServerTable);\n", "        }\n", "\n", "        return topicRouteData;\n", "    }\n", "\n", "    public List<QueueData> getQueueDatas() {\n", "        return queueDatas;\n", "    }\n", "\n", "    public void setQueueDatas(List<QueueData> queueDatas) {\n", "        this.queueDatas = queueDatas;\n", "    }\n", "\n", "    public List<BrokerData> getBrokerDatas() {\n", "        return brokerDatas;\n", "    }\n", "\n", "    public void setBrokerDatas(List<BrokerData> brokerDatas) {\n", "        this.brokerDatas = brokerDatas;\n", "    }\n", "\n", "    public HashMap<String, List<String>> getFilterServerTable() {\n", "        return filterServerTable;\n", "    }\n", "\n", "    public void setFilterServerTable(HashMap<String, List<String>> filterServerTable) {\n", "        this.filterServerTable = filterServerTable;\n", "    }\n", "\n", "    public String getOrderTopicConf() {\n", "        return orderTopicConf;\n", "    }\n", "\n", "    public void setOrderTopicConf(String orderTopicConf) {\n", "        this.orderTopicConf = orderTopicConf;\n", "    }\n", "\n", "    @Override\n", "    public int hashCode() {\n", "        final int prime = 31;\n", "        int result = 1;\n", "        result = prime * result + ((brokerDatas == null) ? 0 : brokerDatas.hashCode());\n", "        result = prime * result + ((orderTopicConf == null) ? 0 : orderTopicConf.hashCode());\n", "        result = prime * result + ((queueDatas == null) ? 0 : queueDatas.hashCode());\n", "        result = prime * result + ((filterServerTable == null) ? 0 : filterServerTable.hashCode());\n", "        return result;\n", "    }\n", "\n", "    @Override\n", "    public boolean equals(Object obj) {\n", "        if (this == obj)\n", "            return true;\n", "        if (obj == null)\n", "            return false;\n", "        if (getClass() != obj.getClass())\n", "            return false;\n", "        TopicRouteData other = (TopicRouteData) obj;\n", "        if (brokerDatas == null) {\n", "            if (other.brokerDatas != null)\n", "                return false;\n", "        } else if (!brokerDatas.equals(other.brokerDatas))\n", "            return false;\n", "        if (orderTopicConf == null) {\n", "            if (other.orderTopicConf != null)\n", "                return false;\n", "        } else if (!orderTopicConf.equals(other.orderTopicConf))\n", "            return false;\n", "        if (queueDatas == null) {\n", "            if (other.queueDatas != null)\n", "                return false;\n", "        } else if (!queueDatas.equals(other.queueDatas))\n", "            return false;\n", "        if (filterServerTable == null) {\n", "            if (other.filterServerTable != null)\n", "                return false;\n", "        } else if (!filterServerTable.equals(other.filterServerTable))\n", "            return false;\n", "        return true;\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "        return \"TopicRouteData [orderTopicConf=\" + orderTopicConf + \", queueDatas=\" + queueDatas\n", "            + \", brokerDatas=\" + brokerDatas + \", filterServerTable=\" + filterServerTable + \"]\";\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.route;\n", "\n", "\n", "import org.apache.rocketmq.common.protocol.route.BrokerData;\n", "import org.apache.rocketmq.common.protocol.route.QueueData;\n", "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "\n", "import java.util.ArrayList;\n", "import java.util.HashMap;\n", "import java.util.List;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.assertj.core.api.Assertions.within;\n", "\n", "\n", "public class TopicRouteDataTest {\n", "    @Test\n", "    public void testTopicRouteDataClone() throws Exception {\n", "\n", "        TopicRouteData topicRouteData = new TopicRouteData();\n", "\n", "        QueueData queueData = new QueueData();\n", "        queueData.setBrokerName(\"broker-a\");\n", "        queueData.setPerm(6);\n", "        queueData.setReadQueueNums(8);\n", "        queueData.setWriteQueueNums(8);\n", "        queueData.setTopicSynFlag(0);\n", "\n", "        List<QueueData> queueDataList = new ArrayList<QueueData>();\n", "        queueDataList.add(queueData);\n", "\n", "        HashMap<Long, String> brokerAddrs = new HashMap<Long, String>();\n", "        brokerAddrs.put(0L, \"192.168.0.47:10911\");\n", "        brokerAddrs.put(1L, \"192.168.0.47:10921\");\n", "\n", "        BrokerData brokerData = new BrokerData();\n", "        brokerData.setBrokerAddrs(brokerAddrs);\n", "        brokerData.setBrokerName(\"broker-a\");\n", "        brokerData.setCluster(\"TestCluster\");\n", "\n", "        List<BrokerData> brokerDataList = new ArrayList<BrokerData>();\n", "        brokerDataList.add(brokerData);\n", "\n", "        topicRouteData.setBrokerDatas(brokerDataList);\n", "        topicRouteData.setFilterServerTable(new HashMap<String, List<String>>());\n", "        topicRouteData.setQueueDatas(queueDataList);\n", "\n", "        assertThat(topicRouteData.cloneTopicRouteData()).isEqualTo(topicRouteData);\n", "\n", "    }\n", "\n", "    @Test\n", "    public void testTopicRouteDataJsonSerialize() throws Exception {\n", "\n", "        TopicRouteData topicRouteData = new TopicRouteData();\n", "\n", "        QueueData queueData = new QueueData();\n", "        queueData.setBrokerName(\"broker-a\");\n", "        queueData.setPerm(6);\n", "        queueData.setReadQueueNums(8);\n", "        queueData.setWriteQueueNums(8);\n", "        queueData.setTopicSynFlag(0);\n", "\n", "        List<QueueData> queueDataList = new ArrayList<QueueData>();\n", "        queueDataList.add(queueData);\n", "\n", "        HashMap<Long, String> brokerAddrs = new HashMap<Long, String>();\n", "        brokerAddrs.put(0L, \"192.168.0.47:10911\");\n", "        brokerAddrs.put(1L, \"192.168.0.47:10921\");\n", "\n", "        BrokerData brokerData = new BrokerData();\n", "        brokerData.setBrokerAddrs(brokerAddrs);\n", "        brokerData.setBrokerName(\"broker-a\");\n", "        brokerData.setCluster(\"TestCluster\");\n", "\n", "        List<BrokerData> brokerDataList = new ArrayList<BrokerData>();\n", "        brokerDataList.add(brokerData);\n", "\n", "        topicRouteData.setBrokerDatas(brokerDataList);\n", "        topicRouteData.setFilterServerTable(new HashMap<String, List<String>>());\n", "        topicRouteData.setQueueDatas(queueDataList);\n", "\n", "        String topicRouteDataJsonStr = RemotingSerializable.toJson(topicRouteData, true);\n", "        TopicRouteData topicRouteDataFromJson = RemotingSerializable.fromJson(topicRouteDataJsonStr, TopicRouteData.class);\n", "\n", "        assertThat(topicRouteDataJsonStr).isNotEqualTo(topicRouteDataFromJson);\n", "        assertThat(topicRouteDataFromJson.getBrokerDatas()).isEqualTo(topicRouteData.getBrokerDatas());\n", "        assertThat(topicRouteDataFromJson.getFilterServerTable()).isEqualTo(topicRouteData.getFilterServerTable());\n", "        assertThat(topicRouteDataFromJson.getQueueDatas()).isEqualTo(topicRouteData.getQueueDatas());\n", "\n", "    }\n", "}\n"], "method_lines_dic": {"TopicRouteData::::cloneTopicRouteData()": [37, 57], "TopicRouteData::::getQueueDatas()": [59, 61], "TopicRouteData::::setQueueDatas(java.util.List<org.apache.rocketmq.common.protocol.route.QueueData>)": [63, 65], "TopicRouteData::::getBrokerDatas()": [67, 69], "TopicRouteData::::setBrokerDatas(java.util.List<org.apache.rocketmq.common.protocol.route.BrokerData>)": [71, 73], "TopicRouteData::::getFilterServerTable()": [75, 77], "TopicRouteData::::setFilterServerTable(java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>)": [79, 81], "TopicRouteData::::getOrderTopicConf()": [83, 85], "TopicRouteData::::setOrderTopicConf(java.lang.String)": [87, 89], "TopicRouteData::::hashCode()": [91, 100], "TopicRouteData::::equals(java.lang.Object)": [102, 132], "TopicRouteData::::toString()": [134, 138]}, "test_method_lines_dic": {"TopicRouteDataTest::::testTopicRouteDataClone()": [36, 69], "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()": [71, 110]}, "reverse_method_lines_dic": {"37": "TopicRouteData::::cloneTopicRouteData()", "38": "TopicRouteData::::cloneTopicRouteData()", "39": "TopicRouteData::::cloneTopicRouteData()", "40": "TopicRouteData::::cloneTopicRouteData()", "41": "TopicRouteData::::cloneTopicRouteData()", "42": "TopicRouteData::::cloneTopicRouteData()", "43": "TopicRouteData::::cloneTopicRouteData()", "44": "TopicRouteData::::cloneTopicRouteData()", "45": "TopicRouteData::::cloneTopicRouteData()", "46": "TopicRouteData::::cloneTopicRouteData()", "47": "TopicRouteData::::cloneTopicRouteData()", "48": "TopicRouteData::::cloneTopicRouteData()", "49": "TopicRouteData::::cloneTopicRouteData()", "50": "TopicRouteData::::cloneTopicRouteData()", "51": "TopicRouteData::::cloneTopicRouteData()", "52": "TopicRouteData::::cloneTopicRouteData()", "53": "TopicRouteData::::cloneTopicRouteData()", "54": "TopicRouteData::::cloneTopicRouteData()", "55": "TopicRouteData::::cloneTopicRouteData()", "56": "TopicRouteData::::cloneTopicRouteData()", "57": "TopicRouteData::::cloneTopicRouteData()", "59": "TopicRouteData::::getQueueDatas()", "60": "TopicRouteData::::getQueueDatas()", "61": "TopicRouteData::::getQueueDatas()", "63": "TopicRouteData::::setQueueDatas(java.util.List<org.apache.rocketmq.common.protocol.route.QueueData>)", "64": "TopicRouteData::::setQueueDatas(java.util.List<org.apache.rocketmq.common.protocol.route.QueueData>)", "65": "TopicRouteData::::setQueueDatas(java.util.List<org.apache.rocketmq.common.protocol.route.QueueData>)", "67": "TopicRouteData::::getBrokerDatas()", "68": "TopicRouteData::::getBrokerDatas()", "69": "TopicRouteData::::getBrokerDatas()", "71": "TopicRouteData::::setBrokerDatas(java.util.List<org.apache.rocketmq.common.protocol.route.BrokerData>)", "72": "TopicRouteData::::setBrokerDatas(java.util.List<org.apache.rocketmq.common.protocol.route.BrokerData>)", "73": "TopicRouteData::::setBrokerDatas(java.util.List<org.apache.rocketmq.common.protocol.route.BrokerData>)", "75": "TopicRouteData::::getFilterServerTable()", "76": "TopicRouteData::::getFilterServerTable()", "77": "TopicRouteData::::getFilterServerTable()", "79": "TopicRouteData::::setFilterServerTable(java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>)", "80": "TopicRouteData::::setFilterServerTable(java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>)", "81": "TopicRouteData::::setFilterServerTable(java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>)", "83": "TopicRouteData::::getOrderTopicConf()", "84": "TopicRouteData::::getOrderTopicConf()", "85": "TopicRouteData::::getOrderTopicConf()", "87": "TopicRouteData::::setOrderTopicConf(java.lang.String)", "88": "TopicRouteData::::setOrderTopicConf(java.lang.String)", "89": "TopicRouteData::::setOrderTopicConf(java.lang.String)", "91": "TopicRouteData::::hashCode()", "92": "TopicRouteData::::hashCode()", "93": "TopicRouteData::::hashCode()", "94": "TopicRouteData::::hashCode()", "95": "TopicRouteData::::hashCode()", "96": "TopicRouteData::::hashCode()", "97": "TopicRouteData::::hashCode()", "98": "TopicRouteData::::hashCode()", "99": "TopicRouteData::::hashCode()", "100": "TopicRouteData::::hashCode()", "102": "TopicRouteData::::equals(java.lang.Object)", "103": "TopicRouteData::::equals(java.lang.Object)", "104": "TopicRouteData::::equals(java.lang.Object)", "105": "TopicRouteData::::equals(java.lang.Object)", "106": "TopicRouteData::::equals(java.lang.Object)", "107": "TopicRouteData::::equals(java.lang.Object)", "108": "TopicRouteData::::equals(java.lang.Object)", "109": "TopicRouteData::::equals(java.lang.Object)", "110": "TopicRouteData::::equals(java.lang.Object)", "111": "TopicRouteData::::equals(java.lang.Object)", "112": "TopicRouteData::::equals(java.lang.Object)", "113": "TopicRouteData::::equals(java.lang.Object)", "114": "TopicRouteData::::equals(java.lang.Object)", "115": "TopicRouteData::::equals(java.lang.Object)", "116": "TopicRouteData::::equals(java.lang.Object)", "117": "TopicRouteData::::equals(java.lang.Object)", "118": "TopicRouteData::::equals(java.lang.Object)", "119": "TopicRouteData::::equals(java.lang.Object)", "120": "TopicRouteData::::equals(java.lang.Object)", "121": "TopicRouteData::::equals(java.lang.Object)", "122": "TopicRouteData::::equals(java.lang.Object)", "123": "TopicRouteData::::equals(java.lang.Object)", "124": "TopicRouteData::::equals(java.lang.Object)", "125": "TopicRouteData::::equals(java.lang.Object)", "126": "TopicRouteData::::equals(java.lang.Object)", "127": "TopicRouteData::::equals(java.lang.Object)", "128": "TopicRouteData::::equals(java.lang.Object)", "129": "TopicRouteData::::equals(java.lang.Object)", "130": "TopicRouteData::::equals(java.lang.Object)", "131": "TopicRouteData::::equals(java.lang.Object)", "132": "TopicRouteData::::equals(java.lang.Object)", "134": "TopicRouteData::::toString()", "135": "TopicRouteData::::toString()", "136": "TopicRouteData::::toString()", "137": "TopicRouteData::::toString()", "138": "TopicRouteData::::toString()"}, "test_reverse_method_lines_dic": {"36": "TopicRouteDataTest::::testTopicRouteDataClone()", "37": "TopicRouteDataTest::::testTopicRouteDataClone()", "38": "TopicRouteDataTest::::testTopicRouteDataClone()", "39": "TopicRouteDataTest::::testTopicRouteDataClone()", "40": "TopicRouteDataTest::::testTopicRouteDataClone()", "41": "TopicRouteDataTest::::testTopicRouteDataClone()", "42": "TopicRouteDataTest::::testTopicRouteDataClone()", "43": "TopicRouteDataTest::::testTopicRouteDataClone()", "44": "TopicRouteDataTest::::testTopicRouteDataClone()", "45": "TopicRouteDataTest::::testTopicRouteDataClone()", "46": "TopicRouteDataTest::::testTopicRouteDataClone()", "47": "TopicRouteDataTest::::testTopicRouteDataClone()", "48": "TopicRouteDataTest::::testTopicRouteDataClone()", "49": "TopicRouteDataTest::::testTopicRouteDataClone()", "50": "TopicRouteDataTest::::testTopicRouteDataClone()", "51": "TopicRouteDataTest::::testTopicRouteDataClone()", "52": "TopicRouteDataTest::::testTopicRouteDataClone()", "53": "TopicRouteDataTest::::testTopicRouteDataClone()", "54": "TopicRouteDataTest::::testTopicRouteDataClone()", "55": "TopicRouteDataTest::::testTopicRouteDataClone()", "56": "TopicRouteDataTest::::testTopicRouteDataClone()", "57": "TopicRouteDataTest::::testTopicRouteDataClone()", "58": "TopicRouteDataTest::::testTopicRouteDataClone()", "59": "TopicRouteDataTest::::testTopicRouteDataClone()", "60": "TopicRouteDataTest::::testTopicRouteDataClone()", "61": "TopicRouteDataTest::::testTopicRouteDataClone()", "62": "TopicRouteDataTest::::testTopicRouteDataClone()", "63": "TopicRouteDataTest::::testTopicRouteDataClone()", "64": "TopicRouteDataTest::::testTopicRouteDataClone()", "65": "TopicRouteDataTest::::testTopicRouteDataClone()", "66": "TopicRouteDataTest::::testTopicRouteDataClone()", "67": "TopicRouteDataTest::::testTopicRouteDataClone()", "68": "TopicRouteDataTest::::testTopicRouteDataClone()", "69": "TopicRouteDataTest::::testTopicRouteDataClone()", "71": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "72": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "73": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "74": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "75": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "76": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "77": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "78": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "79": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "80": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "81": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "82": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "83": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "84": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "85": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "86": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "87": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "88": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "89": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "90": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "91": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "92": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "93": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "94": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "95": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "96": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "97": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "98": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "99": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "100": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "101": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "102": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "103": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "104": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "105": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "106": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "107": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "108": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "109": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()", "110": "TopicRouteDataTest::::testTopicRouteDataJsonSerialize()"}, "tests": [{"test_lines": [36, 69], "covered_lines": [31, 38, 39, 40, 41, 42, 44, 45, 48, 49, 52, 53, 56, 60, 64, 65, 68, 72, 73, 76, 80, 81, 88, 89, 104, 106, 108, 110, 111, 114, 116, 117, 121, 124, 126, 129, 131]}, {"test_lines": [71, 110], "covered_lines": [31, 60, 64, 65, 68, 72, 73, 76, 80, 81, 84]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/SubscriptionData.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "/**\n", " * $Id: SubscriptionData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $\n", " */\n", "package org.apache.rocketmq.common.protocol.heartbeat;\n", "\n", "import com.alibaba.fastjson.annotation.JSONField;\n", "import org.apache.rocketmq.common.filter.ExpressionType;\n", "\n", "import java.util.HashSet;\n", "import java.util.Set;\n", "\n", "public class SubscriptionData implements Comparable<SubscriptionData> {\n", "    public final static String SUB_ALL = \"*\";\n", "    private boolean classFilterMode = false;\n", "    private String topic;\n", "    private String subString;\n", "    private Set<String> tagsSet = new HashSet<String>();\n", "    private Set<Integer> codeSet = new HashSet<Integer>();\n", "    private long subVersion = System.currentTimeMillis();\n", "    private String expressionType = ExpressionType.TAG;\n", "\n", "    @JSONField(serialize = false)\n", "    private String filterClassSource;\n", "\n", "    public SubscriptionData() {\n", "\n", "    }\n", "\n", "    public SubscriptionData(String topic, String subString) {\n", "        super();\n", "        this.topic = topic;\n", "        this.subString = subString;\n", "    }\n", "\n", "    public String getFilterClassSource() {\n", "        return filterClassSource;\n", "    }\n", "\n", "    public void setFilterClassSource(String filterClassSource) {\n", "        this.filterClassSource = filterClassSource;\n", "    }\n", "\n", "    public String getTopic() {\n", "        return topic;\n", "    }\n", "\n", "    public void setTopic(String topic) {\n", "        this.topic = topic;\n", "    }\n", "\n", "    public String getSubString() {\n", "        return subString;\n", "    }\n", "\n", "    public void setSubString(String subString) {\n", "        this.subString = subString;\n", "    }\n", "\n", "    public Set<String> getTagsSet() {\n", "        return tagsSet;\n", "    }\n", "\n", "    public void setTagsSet(Set<String> tagsSet) {\n", "        this.tagsSet = tagsSet;\n", "    }\n", "\n", "    public long getSubVersion() {\n", "        return subVersion;\n", "    }\n", "\n", "    public void setSubVersion(long subVersion) {\n", "        this.subVersion = subVersion;\n", "    }\n", "\n", "    public Set<Integer> getCodeSet() {\n", "        return codeSet;\n", "    }\n", "\n", "    public void setCodeSet(Set<Integer> codeSet) {\n", "        this.codeSet = codeSet;\n", "    }\n", "\n", "    public boolean isClassFilterMode() {\n", "        return classFilterMode;\n", "    }\n", "\n", "    public void setClassFilterMode(boolean classFilterMode) {\n", "        this.classFilterMode = classFilterMode;\n", "    }\n", "\n", "    public String getExpressionType() {\n", "        return expressionType;\n", "    }\n", "\n", "    public void setExpressionType(String expressionType) {\n", "        this.expressionType = expressionType;\n", "    }\n", "\n", "    @Override\n", "    public int hashCode() {\n", "        final int prime = 31;\n", "        int result = 1;\n", "        result = prime * result + (classFilterMode ? 1231 : 1237);\n", "        result = prime * result + ((codeSet == null) ? 0 : codeSet.hashCode());\n", "        result = prime * result + ((subString == null) ? 0 : subString.hashCode());\n", "        result = prime * result + ((tagsSet == null) ? 0 : tagsSet.hashCode());\n", "        result = prime * result + ((topic == null) ? 0 : topic.hashCode());\n", "        result = prime * result + ((expressionType == null) ? 0 : expressionType.hashCode());\n", "        return result;\n", "    }\n", "\n", "    @Override\n", "    public boolean equals(Object obj) {\n", "        if (this == obj)\n", "            return true;\n", "        if (obj == null)\n", "            return false;\n", "        if (getClass() != obj.getClass())\n", "            return false;\n", "        SubscriptionData other = (SubscriptionData) obj;\n", "        if (classFilterMode != other.classFilterMode)\n", "            return false;\n", "        if (codeSet == null) {\n", "            if (other.codeSet != null)\n", "                return false;\n", "        } else if (!codeSet.equals(other.codeSet))\n", "            return false;\n", "        if (subString == null) {\n", "            if (other.subString != null)\n", "                return false;\n", "        } else if (!subString.equals(other.subString))\n", "            return false;\n", "        if (subVersion != other.subVersion)\n", "            return false;\n", "        if (tagsSet == null) {\n", "            if (other.tagsSet != null)\n", "                return false;\n", "        } else if (!tagsSet.equals(other.tagsSet))\n", "            return false;\n", "        if (topic == null) {\n", "            if (other.topic != null)\n", "                return false;\n", "        } else if (!topic.equals(other.topic))\n", "            return false;\n", "        if (expressionType == null) {\n", "            if (other.expressionType != null)\n", "                return false;\n", "        } else if (!expressionType.equals(other.expressionType))\n", "            return false;\n", "        return true;\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "        return \"SubscriptionData [classFilterMode=\" + classFilterMode + \", topic=\" + topic + \", subString=\"\n", "            + subString + \", tagsSet=\" + tagsSet + \", codeSet=\" + codeSet + \", subVersion=\" + subVersion\n", "            + \", expressionType=\" + expressionType + \"]\";\n", "    }\n", "\n", "    @Override\n", "    public int compareTo(SubscriptionData other) {\n", "        String thisValue = this.topic + \"@\" + this.subString;\n", "        String otherValue = other.topic + \"@\" + other.subString;\n", "        return thisValue.compareTo(otherValue);\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.heartbeat;\n", "\n", "import org.apache.rocketmq.common.filter.ExpressionType;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.assertj.core.util.Sets;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class SubscriptionDataTest {\n", "\n", "    @Test\n", "    public void testConstructor1() {\n", "        SubscriptionData subscriptionData = new SubscriptionData();\n", "        assertThat(subscriptionData.getTopic()).isNull();\n", "        assertThat(subscriptionData.getSubString()).isNull();\n", "        assertThat(subscriptionData.getSubVersion()).isLessThanOrEqualTo(System.currentTimeMillis());\n", "        assertThat(subscriptionData.getExpressionType()).isEqualTo(ExpressionType.TAG);\n", "        assertThat(subscriptionData.getFilterClassSource()).isNull();\n", "        assertThat(subscriptionData.getCodeSet()).isEmpty();\n", "        assertThat(subscriptionData.getTagsSet()).isEmpty();\n", "        assertThat(subscriptionData.isClassFilterMode()).isFalse();\n", "    }\n", "\n", "    @Test\n", "    public void testConstructor2() {\n", "        SubscriptionData subscriptionData = new SubscriptionData(\"TOPICA\", \"*\");\n", "        assertThat(subscriptionData.getTopic()).isEqualTo(\"TOPICA\");\n", "        assertThat(subscriptionData.getSubString()).isEqualTo(\"*\");\n", "        assertThat(subscriptionData.getSubVersion()).isLessThanOrEqualTo(System.currentTimeMillis());\n", "        assertThat(subscriptionData.getExpressionType()).isEqualTo(ExpressionType.TAG);\n", "        assertThat(subscriptionData.getFilterClassSource()).isNull();\n", "        assertThat(subscriptionData.getCodeSet()).isEmpty();\n", "        assertThat(subscriptionData.getTagsSet()).isEmpty();\n", "        assertThat(subscriptionData.isClassFilterMode()).isFalse();\n", "    }\n", "\n", "\n", "    @Test\n", "    public void testHashCodeNotEquals() {\n", "        SubscriptionData subscriptionData = new SubscriptionData(\"TOPICA\", \"*\");\n", "        subscriptionData.setCodeSet(Sets.newLinkedHashSet(1, 2, 3));\n", "        subscriptionData.setTagsSet(Sets.newLinkedHashSet(\"TAGA\", \"TAGB\", \"TAG3\"));\n", "        assertThat(subscriptionData.hashCode()).isNotEqualTo(System.identityHashCode(subscriptionData));\n", "    }\n", "\n", "    @Test\n", "    public void testFromJson() throws Exception {\n", "        SubscriptionData subscriptionData = new SubscriptionData(\"TOPICA\", \"*\");\n", "        subscriptionData.setFilterClassSource(\"TestFilterClassSource\");\n", "        subscriptionData.setCodeSet(Sets.newLinkedHashSet(1, 2, 3));\n", "        subscriptionData.setTagsSet(Sets.newLinkedHashSet(\"TAGA\", \"TAGB\", \"TAG3\"));\n", "        String json = RemotingSerializable.toJson(subscriptionData, true);\n", "        SubscriptionData fromJson = RemotingSerializable.fromJson(json, SubscriptionData.class);\n", "        assertThat(subscriptionData).isEqualTo(fromJson);\n", "        assertThat(subscriptionData).isEqualByComparingTo(fromJson);\n", "        assertThat(subscriptionData.getFilterClassSource()).isEqualTo(\"TestFilterClassSource\");\n", "        assertThat(fromJson.getFilterClassSource()).isNull();\n", "    }\n", "\n", "\n", "    @Test\n", "    public void testCompareTo() {\n", "        SubscriptionData subscriptionData = new SubscriptionData(\"TOPICA\", \"*\");\n", "        SubscriptionData subscriptionData1 = new SubscriptionData(\"TOPICBA\", \"*\");\n", "        assertThat(subscriptionData.compareTo(subscriptionData1)).isEqualTo(\"TOPICA@*\".compareTo(\"TOPICB@*\"));\n", "    }\n", "}\n"], "method_lines_dic": {"SubscriptionData::::getFilterClassSource()": [52, 54], "SubscriptionData::::setFilterClassSource(java.lang.String)": [56, 58], "SubscriptionData::::getTopic()": [60, 62], "SubscriptionData::::setTopic(java.lang.String)": [64, 66], "SubscriptionData::::getSubString()": [68, 70], "SubscriptionData::::setSubString(java.lang.String)": [72, 74], "SubscriptionData::::getTagsSet()": [76, 78], "SubscriptionData::::setTagsSet(java.util.Set<java.lang.String>)": [80, 82], "SubscriptionData::::getSubVersion()": [84, 86], "SubscriptionData::::setSubVersion(long)": [88, 90], "SubscriptionData::::getCodeSet()": [92, 94], "SubscriptionData::::setCodeSet(java.util.Set<java.lang.Integer>)": [96, 98], "SubscriptionData::::isClassFilterMode()": [100, 102], "SubscriptionData::::setClassFilterMode(boolean)": [104, 106], "SubscriptionData::::getExpressionType()": [108, 110], "SubscriptionData::::setExpressionType(java.lang.String)": [112, 114], "SubscriptionData::::hashCode()": [116, 127], "SubscriptionData::::equals(java.lang.Object)": [129, 168], "SubscriptionData::::toString()": [170, 175], "SubscriptionData::::compareTo(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)": [177, 182]}, "test_method_lines_dic": {"SubscriptionDataTest::::testConstructor1()": [29, 40], "SubscriptionDataTest::::testConstructor2()": [42, 53], "SubscriptionDataTest::::testHashCodeNotEquals()": [56, 62], "SubscriptionDataTest::::testFromJson()": [64, 76], "SubscriptionDataTest::::testCompareTo()": [79, 84]}, "reverse_method_lines_dic": {"52": "SubscriptionData::::getFilterClassSource()", "53": "SubscriptionData::::getFilterClassSource()", "54": "SubscriptionData::::getFilterClassSource()", "56": "SubscriptionData::::setFilterClassSource(java.lang.String)", "57": "SubscriptionData::::setFilterClassSource(java.lang.String)", "58": "SubscriptionData::::setFilterClassSource(java.lang.String)", "60": "SubscriptionData::::getTopic()", "61": "SubscriptionData::::getTopic()", "62": "SubscriptionData::::getTopic()", "64": "SubscriptionData::::setTopic(java.lang.String)", "65": "SubscriptionData::::setTopic(java.lang.String)", "66": "SubscriptionData::::setTopic(java.lang.String)", "68": "SubscriptionData::::getSubString()", "69": "SubscriptionData::::getSubString()", "70": "SubscriptionData::::getSubString()", "72": "SubscriptionData::::setSubString(java.lang.String)", "73": "SubscriptionData::::setSubString(java.lang.String)", "74": "SubscriptionData::::setSubString(java.lang.String)", "76": "SubscriptionData::::getTagsSet()", "77": "SubscriptionData::::getTagsSet()", "78": "SubscriptionData::::getTagsSet()", "80": "SubscriptionData::::setTagsSet(java.util.Set<java.lang.String>)", "81": "SubscriptionData::::setTagsSet(java.util.Set<java.lang.String>)", "82": "SubscriptionData::::setTagsSet(java.util.Set<java.lang.String>)", "84": "SubscriptionData::::getSubVersion()", "85": "SubscriptionData::::getSubVersion()", "86": "SubscriptionData::::getSubVersion()", "88": "SubscriptionData::::setSubVersion(long)", "89": "SubscriptionData::::setSubVersion(long)", "90": "SubscriptionData::::setSubVersion(long)", "92": "SubscriptionData::::getCodeSet()", "93": "SubscriptionData::::getCodeSet()", "94": "SubscriptionData::::getCodeSet()", "96": "SubscriptionData::::setCodeSet(java.util.Set<java.lang.Integer>)", "97": "SubscriptionData::::setCodeSet(java.util.Set<java.lang.Integer>)", "98": "SubscriptionData::::setCodeSet(java.util.Set<java.lang.Integer>)", "100": "SubscriptionData::::isClassFilterMode()", "101": "SubscriptionData::::isClassFilterMode()", "102": "SubscriptionData::::isClassFilterMode()", "104": "SubscriptionData::::setClassFilterMode(boolean)", "105": "SubscriptionData::::setClassFilterMode(boolean)", "106": "SubscriptionData::::setClassFilterMode(boolean)", "108": "SubscriptionData::::getExpressionType()", "109": "SubscriptionData::::getExpressionType()", "110": "SubscriptionData::::getExpressionType()", "112": "SubscriptionData::::setExpressionType(java.lang.String)", "113": "SubscriptionData::::setExpressionType(java.lang.String)", "114": "SubscriptionData::::setExpressionType(java.lang.String)", "116": "SubscriptionData::::hashCode()", "117": "SubscriptionData::::hashCode()", "118": "SubscriptionData::::hashCode()", "119": "SubscriptionData::::hashCode()", "120": "SubscriptionData::::hashCode()", "121": "SubscriptionData::::hashCode()", "122": "SubscriptionData::::hashCode()", "123": "SubscriptionData::::hashCode()", "124": "SubscriptionData::::hashCode()", "125": "SubscriptionData::::hashCode()", "126": "SubscriptionData::::hashCode()", "127": "SubscriptionData::::hashCode()", "129": "SubscriptionData::::equals(java.lang.Object)", "130": "SubscriptionData::::equals(java.lang.Object)", "131": "SubscriptionData::::equals(java.lang.Object)", "132": "SubscriptionData::::equals(java.lang.Object)", "133": "SubscriptionData::::equals(java.lang.Object)", "134": "SubscriptionData::::equals(java.lang.Object)", "135": "SubscriptionData::::equals(java.lang.Object)", "136": "SubscriptionData::::equals(java.lang.Object)", "137": "SubscriptionData::::equals(java.lang.Object)", "138": "SubscriptionData::::equals(java.lang.Object)", "139": "SubscriptionData::::equals(java.lang.Object)", "140": "SubscriptionData::::equals(java.lang.Object)", "141": "SubscriptionData::::equals(java.lang.Object)", "142": "SubscriptionData::::equals(java.lang.Object)", "143": "SubscriptionData::::equals(java.lang.Object)", "144": "SubscriptionData::::equals(java.lang.Object)", "145": "SubscriptionData::::equals(java.lang.Object)", "146": "SubscriptionData::::equals(java.lang.Object)", "147": "SubscriptionData::::equals(java.lang.Object)", "148": "SubscriptionData::::equals(java.lang.Object)", "149": "SubscriptionData::::equals(java.lang.Object)", "150": "SubscriptionData::::equals(java.lang.Object)", "151": "SubscriptionData::::equals(java.lang.Object)", "152": "SubscriptionData::::equals(java.lang.Object)", "153": "SubscriptionData::::equals(java.lang.Object)", "154": "SubscriptionData::::equals(java.lang.Object)", "155": "SubscriptionData::::equals(java.lang.Object)", "156": "SubscriptionData::::equals(java.lang.Object)", "157": "SubscriptionData::::equals(java.lang.Object)", "158": "SubscriptionData::::equals(java.lang.Object)", "159": "SubscriptionData::::equals(java.lang.Object)", "160": "SubscriptionData::::equals(java.lang.Object)", "161": "SubscriptionData::::equals(java.lang.Object)", "162": "SubscriptionData::::equals(java.lang.Object)", "163": "SubscriptionData::::equals(java.lang.Object)", "164": "SubscriptionData::::equals(java.lang.Object)", "165": "SubscriptionData::::equals(java.lang.Object)", "166": "SubscriptionData::::equals(java.lang.Object)", "167": "SubscriptionData::::equals(java.lang.Object)", "168": "SubscriptionData::::equals(java.lang.Object)", "170": "SubscriptionData::::toString()", "171": "SubscriptionData::::toString()", "172": "SubscriptionData::::toString()", "173": "SubscriptionData::::toString()", "174": "SubscriptionData::::toString()", "175": "SubscriptionData::::toString()", "177": "SubscriptionData::::compareTo(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)", "178": "SubscriptionData::::compareTo(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)", "179": "SubscriptionData::::compareTo(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)", "180": "SubscriptionData::::compareTo(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)", "181": "SubscriptionData::::compareTo(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)", "182": "SubscriptionData::::compareTo(org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData)"}, "test_reverse_method_lines_dic": {"29": "SubscriptionDataTest::::testConstructor1()", "30": "SubscriptionDataTest::::testConstructor1()", "31": "SubscriptionDataTest::::testConstructor1()", "32": "SubscriptionDataTest::::testConstructor1()", "33": "SubscriptionDataTest::::testConstructor1()", "34": "SubscriptionDataTest::::testConstructor1()", "35": "SubscriptionDataTest::::testConstructor1()", "36": "SubscriptionDataTest::::testConstructor1()", "37": "SubscriptionDataTest::::testConstructor1()", "38": "SubscriptionDataTest::::testConstructor1()", "39": "SubscriptionDataTest::::testConstructor1()", "40": "SubscriptionDataTest::::testConstructor1()", "42": "SubscriptionDataTest::::testConstructor2()", "43": "SubscriptionDataTest::::testConstructor2()", "44": "SubscriptionDataTest::::testConstructor2()", "45": "SubscriptionDataTest::::testConstructor2()", "46": "SubscriptionDataTest::::testConstructor2()", "47": "SubscriptionDataTest::::testConstructor2()", "48": "SubscriptionDataTest::::testConstructor2()", "49": "SubscriptionDataTest::::testConstructor2()", "50": "SubscriptionDataTest::::testConstructor2()", "51": "SubscriptionDataTest::::testConstructor2()", "52": "SubscriptionDataTest::::testConstructor2()", "53": "SubscriptionDataTest::::testConstructor2()", "56": "SubscriptionDataTest::::testHashCodeNotEquals()", "57": "SubscriptionDataTest::::testHashCodeNotEquals()", "58": "SubscriptionDataTest::::testHashCodeNotEquals()", "59": "SubscriptionDataTest::::testHashCodeNotEquals()", "60": "SubscriptionDataTest::::testHashCodeNotEquals()", "61": "SubscriptionDataTest::::testHashCodeNotEquals()", "62": "SubscriptionDataTest::::testHashCodeNotEquals()", "64": "SubscriptionDataTest::::testFromJson()", "65": "SubscriptionDataTest::::testFromJson()", "66": "SubscriptionDataTest::::testFromJson()", "67": "SubscriptionDataTest::::testFromJson()", "68": "SubscriptionDataTest::::testFromJson()", "69": "SubscriptionDataTest::::testFromJson()", "70": "SubscriptionDataTest::::testFromJson()", "71": "SubscriptionDataTest::::testFromJson()", "72": "SubscriptionDataTest::::testFromJson()", "73": "SubscriptionDataTest::::testFromJson()", "74": "SubscriptionDataTest::::testFromJson()", "75": "SubscriptionDataTest::::testFromJson()", "76": "SubscriptionDataTest::::testFromJson()", "79": "SubscriptionDataTest::::testCompareTo()", "80": "SubscriptionDataTest::::testCompareTo()", "81": "SubscriptionDataTest::::testCompareTo()", "82": "SubscriptionDataTest::::testCompareTo()", "83": "SubscriptionDataTest::::testCompareTo()", "84": "SubscriptionDataTest::::testCompareTo()"}, "tests": [{"test_lines": [29, 40], "covered_lines": [31, 34, 35, 36, 37, 42, 44, 53, 61, 69, 77, 85, 93, 101, 109]}, {"test_lines": [42, 53], "covered_lines": [31, 34, 35, 36, 37, 47, 48, 49, 50, 53, 61, 69, 77, 85, 93, 101, 109]}, {"test_lines": [56, 62], "covered_lines": [31, 34, 35, 36, 37, 47, 48, 49, 50, 81, 82, 97, 98, 118, 119, 120, 121, 122, 123, 124, 125, 126]}, {"test_lines": [64, 76], "covered_lines": [31, 34, 35, 36, 37, 42, 44, 47, 48, 49, 50, 53, 57, 58, 61, 65, 66, 69, 73, 74, 77, 81, 82, 85, 89, 90, 93, 97, 98, 101, 105, 106, 109, 113, 114, 131, 133, 135, 137, 138, 140, 143, 145, 148, 150, 152, 155, 157, 160, 162, 165, 167, 179, 180, 181]}, {"test_lines": [79, 84], "covered_lines": [31, 34, 35, 36, 37, 47, 48, 49, 50, 179, 180, 181]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/protocol/topic/OffsetMovedEvent.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.topic;\n", "\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "public class OffsetMovedEvent extends RemotingSerializable {\n", "    private String consumerGroup;\n", "    private MessageQueue messageQueue;\n", "    private long offsetRequest;\n", "    private long offsetNew;\n", "\n", "    public String getConsumerGroup() {\n", "        return consumerGroup;\n", "    }\n", "\n", "    public void setConsumerGroup(String consumerGroup) {\n", "        this.consumerGroup = consumerGroup;\n", "    }\n", "\n", "    public MessageQueue getMessageQueue() {\n", "        return messageQueue;\n", "    }\n", "\n", "    public void setMessageQueue(MessageQueue messageQueue) {\n", "        this.messageQueue = messageQueue;\n", "    }\n", "\n", "    public long getOffsetRequest() {\n", "        return offsetRequest;\n", "    }\n", "\n", "    public void setOffsetRequest(long offsetRequest) {\n", "        this.offsetRequest = offsetRequest;\n", "    }\n", "\n", "    public long getOffsetNew() {\n", "        return offsetNew;\n", "    }\n", "\n", "    public void setOffsetNew(long offsetNew) {\n", "        this.offsetNew = offsetNew;\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "        return \"OffsetMovedEvent [consumerGroup=\" + consumerGroup + \", messageQueue=\" + messageQueue\n", "            + \", offsetRequest=\" + offsetRequest + \", offsetNew=\" + offsetNew + \"]\";\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.protocol.topic;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.junit.Test;\n", "\n", "public class OffsetMovedEventTest {\n", "\n", "  @Test\n", "  public void testFromJson() throws Exception {\n", "    OffsetMovedEvent event = mockOffsetMovedEvent();\n", "\n", "    String json = event.toJson();\n", "    OffsetMovedEvent fromJson = RemotingSerializable.fromJson(json, OffsetMovedEvent.class);\n", "\n", "    assertEquals(event, fromJson);\n", "  }\n", "\n", "  @Test\n", "  public void testFromBytes() throws Exception {\n", "    OffsetMovedEvent event = mockOffsetMovedEvent();\n", "\n", "    byte[] encodeData = event.encode();\n", "    OffsetMovedEvent decodeData = RemotingSerializable.decode(encodeData, OffsetMovedEvent.class);\n", "\n", "    assertEquals(event, decodeData);\n", "  }\n", "\n", "  private void assertEquals(OffsetMovedEvent srcData, OffsetMovedEvent decodeData) {\n", "    assertThat(decodeData.getConsumerGroup()).isEqualTo(srcData.getConsumerGroup());\n", "    assertThat(decodeData.getMessageQueue().getTopic())\n", "        .isEqualTo(srcData.getMessageQueue().getTopic());\n", "    assertThat(decodeData.getMessageQueue().getBrokerName())\n", "        .isEqualTo(srcData.getMessageQueue().getBrokerName());\n", "    assertThat(decodeData.getMessageQueue().getQueueId())\n", "        .isEqualTo(srcData.getMessageQueue().getQueueId());\n", "    assertThat(decodeData.getOffsetRequest()).isEqualTo(srcData.getOffsetRequest());\n", "    assertThat(decodeData.getOffsetNew()).isEqualTo(srcData.getOffsetNew());\n", "  }\n", "\n", "  private OffsetMovedEvent mockOffsetMovedEvent() {\n", "    OffsetMovedEvent event = new OffsetMovedEvent();\n", "    event.setConsumerGroup(\"test-group\");\n", "    event.setMessageQueue(new MessageQueue(\"test-topic\", \"test-broker\", 0));\n", "    event.setOffsetRequest(3000L);\n", "    event.setOffsetNew(1000L);\n", "    return event;\n", "  }\n", "}\n"], "method_lines_dic": {"OffsetMovedEvent::::getConsumerGroup()": [29, 31], "OffsetMovedEvent::::setConsumerGroup(java.lang.String)": [33, 35], "OffsetMovedEvent::::getMessageQueue()": [37, 39], "OffsetMovedEvent::::setMessageQueue(org.apache.rocketmq.common.message.MessageQueue)": [41, 43], "OffsetMovedEvent::::getOffsetRequest()": [45, 47], "OffsetMovedEvent::::setOffsetRequest(long)": [49, 51], "OffsetMovedEvent::::getOffsetNew()": [53, 55], "OffsetMovedEvent::::setOffsetNew(long)": [57, 59], "OffsetMovedEvent::::toString()": [61, 65]}, "test_method_lines_dic": {"OffsetMovedEventTest::::testFromJson()": [28, 36], "OffsetMovedEventTest::::testFromBytes()": [38, 46], "OffsetMovedEventTest::::mockOffsetMovedEvent()": [60, 67]}, "reverse_method_lines_dic": {"29": "OffsetMovedEvent::::getConsumerGroup()", "30": "OffsetMovedEvent::::getConsumerGroup()", "31": "OffsetMovedEvent::::getConsumerGroup()", "33": "OffsetMovedEvent::::setConsumerGroup(java.lang.String)", "34": "OffsetMovedEvent::::setConsumerGroup(java.lang.String)", "35": "OffsetMovedEvent::::setConsumerGroup(java.lang.String)", "37": "OffsetMovedEvent::::getMessageQueue()", "38": "OffsetMovedEvent::::getMessageQueue()", "39": "OffsetMovedEvent::::getMessageQueue()", "41": "OffsetMovedEvent::::setMessageQueue(org.apache.rocketmq.common.message.MessageQueue)", "42": "OffsetMovedEvent::::setMessageQueue(org.apache.rocketmq.common.message.MessageQueue)", "43": "OffsetMovedEvent::::setMessageQueue(org.apache.rocketmq.common.message.MessageQueue)", "45": "OffsetMovedEvent::::getOffsetRequest()", "46": "OffsetMovedEvent::::getOffsetRequest()", "47": "OffsetMovedEvent::::getOffsetRequest()", "49": "OffsetMovedEvent::::setOffsetRequest(long)", "50": "OffsetMovedEvent::::setOffsetRequest(long)", "51": "OffsetMovedEvent::::setOffsetRequest(long)", "53": "OffsetMovedEvent::::getOffsetNew()", "54": "OffsetMovedEvent::::getOffsetNew()", "55": "OffsetMovedEvent::::getOffsetNew()", "57": "OffsetMovedEvent::::setOffsetNew(long)", "58": "OffsetMovedEvent::::setOffsetNew(long)", "59": "OffsetMovedEvent::::setOffsetNew(long)", "61": "OffsetMovedEvent::::toString()", "62": "OffsetMovedEvent::::toString()", "63": "OffsetMovedEvent::::toString()", "64": "OffsetMovedEvent::::toString()", "65": "OffsetMovedEvent::::toString()"}, "test_reverse_method_lines_dic": {"28": "OffsetMovedEventTest::::testFromJson()", "29": "OffsetMovedEventTest::::testFromJson()", "30": "OffsetMovedEventTest::::testFromJson()", "31": "OffsetMovedEventTest::::testFromJson()", "32": "OffsetMovedEventTest::::testFromJson()", "33": "OffsetMovedEventTest::::testFromJson()", "34": "OffsetMovedEventTest::::testFromJson()", "35": "OffsetMovedEventTest::::testFromJson()", "36": "OffsetMovedEventTest::::testFromJson()", "38": "OffsetMovedEventTest::::testFromBytes()", "39": "OffsetMovedEventTest::::testFromBytes()", "40": "OffsetMovedEventTest::::testFromBytes()", "41": "OffsetMovedEventTest::::testFromBytes()", "42": "OffsetMovedEventTest::::testFromBytes()", "43": "OffsetMovedEventTest::::testFromBytes()", "44": "OffsetMovedEventTest::::testFromBytes()", "45": "OffsetMovedEventTest::::testFromBytes()", "46": "OffsetMovedEventTest::::testFromBytes()", "60": "OffsetMovedEventTest::::mockOffsetMovedEvent()", "61": "OffsetMovedEventTest::::mockOffsetMovedEvent()", "62": "OffsetMovedEventTest::::mockOffsetMovedEvent()", "63": "OffsetMovedEventTest::::mockOffsetMovedEvent()", "64": "OffsetMovedEventTest::::mockOffsetMovedEvent()", "65": "OffsetMovedEventTest::::mockOffsetMovedEvent()", "66": "OffsetMovedEventTest::::mockOffsetMovedEvent()", "67": "OffsetMovedEventTest::::mockOffsetMovedEvent()"}, "tests": [{"test_lines": [28, 36], "covered_lines": [23, 30, 34, 35, 38, 42, 43, 46, 50, 51, 54, 58, 59]}, {"test_lines": [38, 46], "covered_lines": [23, 30, 34, 35, 38, 42, 43, 46, 50, 51, 54, 58, 59]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/message/Message.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.message;\n", "\n", "import java.io.Serializable;\n", "import java.util.Arrays;\n", "import java.util.Collection;\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "\n", "public class Message implements Serializable {\n", "    private static final long serialVersionUID = 8445773977080406428L;\n", "\n", "    private String topic;\n", "    private int flag;\n", "    private Map<String, String> properties;\n", "    private byte[] body;\n", "    private String transactionId;\n", "\n", "    public Message() {\n", "    }\n", "\n", "    public Message(String topic, byte[] body) {\n", "        this(topic, \"\", \"\", 0, body, true);\n", "    }\n", "\n", "    public Message(String topic, String tags, String keys, int flag, byte[] body, boolean waitStoreMsgOK) {\n", "        this.topic = topic;\n", "        this.flag = flag;\n", "        this.body = body;\n", "\n", "        if (tags != null && tags.length() > 0)\n", "            this.setTags(tags);\n", "\n", "        if (keys != null && keys.length() > 0)\n", "            this.setKeys(keys);\n", "\n", "        this.setWaitStoreMsgOK(waitStoreMsgOK);\n", "    }\n", "\n", "    public Message(String topic, String tags, byte[] body) {\n", "        this(topic, tags, \"\", 0, body, true);\n", "    }\n", "\n", "    public Message(String topic, String tags, String keys, byte[] body) {\n", "        this(topic, tags, keys, 0, body, true);\n", "    }\n", "\n", "    public void setKeys(String keys) {\n", "        this.putProperty(MessageConst.PROPERTY_KEYS, keys);\n", "    }\n", "\n", "    void putProperty(final String name, final String value) {\n", "        if (null == this.properties) {\n", "            this.properties = new HashMap<String, String>();\n", "        }\n", "\n", "        this.properties.put(name, value);\n", "    }\n", "\n", "    void clearProperty(final String name) {\n", "        if (null != this.properties) {\n", "            this.properties.remove(name);\n", "        }\n", "    }\n", "\n", "    public void putUserProperty(final String name, final String value) {\n", "        if (MessageConst.STRING_HASH_SET.contains(name)) {\n", "            throw new RuntimeException(String.format(\n", "                \"The Property<%s> is used by system, input another please\", name));\n", "        }\n", "\n", "        if (value == null || value.trim().isEmpty()\n", "            || name == null || name.trim().isEmpty()) {\n", "            throw new IllegalArgumentException(\n", "                \"The name or value of property can not be null or blank string!\"\n", "            );\n", "        }\n", "\n", "        this.putProperty(name, value);\n", "    }\n", "\n", "    public String getUserProperty(final String name) {\n", "        return this.getProperty(name);\n", "    }\n", "\n", "    public String getProperty(final String name) {\n", "        if (null == this.properties) {\n", "            this.properties = new HashMap<String, String>();\n", "        }\n", "\n", "        return this.properties.get(name);\n", "    }\n", "\n", "    public String getTopic() {\n", "        return topic;\n", "    }\n", "\n", "    public void setTopic(String topic) {\n", "        this.topic = topic;\n", "    }\n", "\n", "    public String getTags() {\n", "        return this.getProperty(MessageConst.PROPERTY_TAGS);\n", "    }\n", "\n", "    public void setTags(String tags) {\n", "        this.putProperty(MessageConst.PROPERTY_TAGS, tags);\n", "    }\n", "\n", "    public String getKeys() {\n", "        return this.getProperty(MessageConst.PROPERTY_KEYS);\n", "    }\n", "\n", "    public void setKeys(Collection<String> keys) {\n", "        StringBuffer sb = new StringBuffer();\n", "        for (String k : keys) {\n", "            sb.append(k);\n", "            sb.append(MessageConst.KEY_SEPARATOR);\n", "        }\n", "\n", "        this.setKeys(sb.toString().trim());\n", "    }\n", "\n", "    public int getDelayTimeLevel() {\n", "        String t = this.getProperty(MessageConst.PROPERTY_DELAY_TIME_LEVEL);\n", "        if (t != null) {\n", "            return Integer.parseInt(t);\n", "        }\n", "\n", "        return 0;\n", "    }\n", "\n", "    public void setDelayTimeLevel(int level) {\n", "        this.putProperty(MessageConst.PROPERTY_DELAY_TIME_LEVEL, String.valueOf(level));\n", "    }\n", "\n", "    public boolean isWaitStoreMsgOK() {\n", "        String result = this.getProperty(MessageConst.PROPERTY_WAIT_STORE_MSG_OK);\n", "        if (null == result)\n", "            return true;\n", "\n", "        return Boolean.parseBoolean(result);\n", "    }\n", "\n", "    public void setWaitStoreMsgOK(boolean waitStoreMsgOK) {\n", "        this.putProperty(MessageConst.PROPERTY_WAIT_STORE_MSG_OK, Boolean.toString(waitStoreMsgOK));\n", "    }\n", "\n", "    public void setInstanceId(String instanceId) {\n", "        this.putProperty(MessageConst.PROPERTY_INSTANCE_ID, instanceId);\n", "    }\n", "\n", "    public int getFlag() {\n", "        return flag;\n", "    }\n", "\n", "    public void setFlag(int flag) {\n", "        this.flag = flag;\n", "    }\n", "\n", "    public byte[] getBody() {\n", "        return body;\n", "    }\n", "\n", "    public void setBody(byte[] body) {\n", "        this.body = body;\n", "    }\n", "\n", "    public Map<String, String> getProperties() {\n", "        return properties;\n", "    }\n", "\n", "    void setProperties(Map<String, String> properties) {\n", "        this.properties = properties;\n", "    }\n", "\n", "    public String getBuyerId() {\n", "        return getProperty(MessageConst.PROPERTY_BUYER_ID);\n", "    }\n", "\n", "    public void setBuyerId(String buyerId) {\n", "        putProperty(MessageConst.PROPERTY_BUYER_ID, buyerId);\n", "    }\n", "\n", "    public String getTransactionId() {\n", "        return transactionId;\n", "    }\n", "\n", "    public void setTransactionId(String transactionId) {\n", "        this.transactionId = transactionId;\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "        return \"Message{\" +\n", "            \"topic='\" + topic + '\\'' +\n", "            \", flag=\" + flag +\n", "            \", properties=\" + properties +\n", "            \", body=\" + Arrays.toString(body) +\n", "            \", transactionId='\" + transactionId + '\\'' +\n", "            '}';\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.message;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "import static org.apache.rocketmq.common.message.MessageConst.PROPERTY_TRACE_SWITCH;\n", "import static org.junit.Assert.*;\n", "\n", "public class MessageTest {\n", "    @Test(expected = RuntimeException.class)\n", "    public void putUserPropertyWithRuntimeException() throws Exception {\n", "        Message m = new Message();\n", "\n", "        m.putUserProperty(PROPERTY_TRACE_SWITCH, \"\");\n", "    }\n", "\n", "    @Test(expected = IllegalArgumentException.class)\n", "    public void putUserNullValuePropertyWithException() throws Exception {\n", "        Message m = new Message();\n", "\n", "        m.putUserProperty(\"prop1\", null);\n", "    }\n", "\n", "    @Test(expected = IllegalArgumentException.class)\n", "    public void putUserEmptyValuePropertyWithException() throws Exception {\n", "        Message m = new Message();\n", "\n", "        m.putUserProperty(\"prop1\", \"   \");\n", "    }\n", "\n", "    @Test(expected = IllegalArgumentException.class)\n", "    public void putUserNullNamePropertyWithException() throws Exception {\n", "        Message m = new Message();\n", "\n", "        m.putUserProperty(null, \"val1\");\n", "    }\n", "\n", "    @Test(expected = IllegalArgumentException.class)\n", "    public void putUserEmptyNamePropertyWithException() throws Exception {\n", "        Message m = new Message();\n", "\n", "        m.putUserProperty(\"   \", \"val1\");\n", "    }\n", "\n", "    @Test\n", "    public void putUserProperty() throws Exception {\n", "        Message m = new Message();\n", "\n", "        m.putUserProperty(\"prop1\", \"val1\");\n", "        Assert.assertEquals(\"val1\", m.getUserProperty(\"prop1\"));\n", "    }\n", "}\n"], "method_lines_dic": {"Message::::setKeys(java.lang.String)": [63, 65], "Message::::putProperty(java.lang.String,java.lang.String)": [67, 73], "Message::::clearProperty(java.lang.String)": [75, 79], "Message::::putUserProperty(java.lang.String,java.lang.String)": [81, 95], "Message::::getUserProperty(java.lang.String)": [97, 99], "Message::::getProperty(java.lang.String)": [101, 107], "Message::::getTopic()": [109, 111], "Message::::setTopic(java.lang.String)": [113, 115], "Message::::getTags()": [117, 119], "Message::::setTags(java.lang.String)": [121, 123], "Message::::getKeys()": [125, 127], "Message::::setKeys(java.util.Collection<java.lang.String>)": [129, 137], "Message::::getDelayTimeLevel()": [139, 146], "Message::::setDelayTimeLevel(int)": [148, 150], "Message::::isWaitStoreMsgOK()": [152, 158], "Message::::setWaitStoreMsgOK(boolean)": [160, 162], "Message::::setInstanceId(java.lang.String)": [164, 166], "Message::::getFlag()": [168, 170], "Message::::setFlag(int)": [172, 174], "Message::::getBody()": [176, 178], "Message::::setBody(byte[])": [180, 182], "Message::::getProperties()": [184, 186], "Message::::setProperties(java.util.Map<java.lang.String, java.lang.String>)": [188, 190], "Message::::getBuyerId()": [192, 194], "Message::::setBuyerId(java.lang.String)": [196, 198], "Message::::getTransactionId()": [200, 202], "Message::::setTransactionId(java.lang.String)": [204, 206], "Message::::toString()": [208, 217]}, "test_method_lines_dic": {"MessageTest::::putUserPropertyWithRuntimeException()": [26, 31], "MessageTest::::putUserNullValuePropertyWithException()": [33, 38], "MessageTest::::putUserEmptyValuePropertyWithException()": [40, 45], "MessageTest::::putUserNullNamePropertyWithException()": [47, 52], "MessageTest::::putUserEmptyNamePropertyWithException()": [54, 59], "MessageTest::::putUserProperty()": [61, 67]}, "reverse_method_lines_dic": {"63": "Message::::setKeys(java.lang.String)", "64": "Message::::setKeys(java.lang.String)", "65": "Message::::setKeys(java.lang.String)", "67": "Message::::putProperty(java.lang.String,java.lang.String)", "68": "Message::::putProperty(java.lang.String,java.lang.String)", "69": "Message::::putProperty(java.lang.String,java.lang.String)", "70": "Message::::putProperty(java.lang.String,java.lang.String)", "71": "Message::::putProperty(java.lang.String,java.lang.String)", "72": "Message::::putProperty(java.lang.String,java.lang.String)", "73": "Message::::putProperty(java.lang.String,java.lang.String)", "75": "Message::::clearProperty(java.lang.String)", "76": "Message::::clearProperty(java.lang.String)", "77": "Message::::clearProperty(java.lang.String)", "78": "Message::::clearProperty(java.lang.String)", "79": "Message::::clearProperty(java.lang.String)", "81": "Message::::putUserProperty(java.lang.String,java.lang.String)", "82": "Message::::putUserProperty(java.lang.String,java.lang.String)", "83": "Message::::putUserProperty(java.lang.String,java.lang.String)", "84": "Message::::putUserProperty(java.lang.String,java.lang.String)", "85": "Message::::putUserProperty(java.lang.String,java.lang.String)", "86": "Message::::putUserProperty(java.lang.String,java.lang.String)", "87": "Message::::putUserProperty(java.lang.String,java.lang.String)", "88": "Message::::putUserProperty(java.lang.String,java.lang.String)", "89": "Message::::putUserProperty(java.lang.String,java.lang.String)", "90": "Message::::putUserProperty(java.lang.String,java.lang.String)", "91": "Message::::putUserProperty(java.lang.String,java.lang.String)", "92": "Message::::putUserProperty(java.lang.String,java.lang.String)", "93": "Message::::putUserProperty(java.lang.String,java.lang.String)", "94": "Message::::putUserProperty(java.lang.String,java.lang.String)", "95": "Message::::putUserProperty(java.lang.String,java.lang.String)", "97": "Message::::getUserProperty(java.lang.String)", "98": "Message::::getUserProperty(java.lang.String)", "99": "Message::::getUserProperty(java.lang.String)", "101": "Message::::getProperty(java.lang.String)", "102": "Message::::getProperty(java.lang.String)", "103": "Message::::getProperty(java.lang.String)", "104": "Message::::getProperty(java.lang.String)", "105": "Message::::getProperty(java.lang.String)", "106": "Message::::getProperty(java.lang.String)", "107": "Message::::getProperty(java.lang.String)", "109": "Message::::getTopic()", "110": "Message::::getTopic()", "111": "Message::::getTopic()", "113": "Message::::setTopic(java.lang.String)", "114": "Message::::setTopic(java.lang.String)", "115": "Message::::setTopic(java.lang.String)", "117": "Message::::getTags()", "118": "Message::::getTags()", "119": "Message::::getTags()", "121": "Message::::setTags(java.lang.String)", "122": "Message::::setTags(java.lang.String)", "123": "Message::::setTags(java.lang.String)", "125": "Message::::getKeys()", "126": "Message::::getKeys()", "127": "Message::::getKeys()", "129": "Message::::setKeys(java.util.Collection<java.lang.String>)", "130": "Message::::setKeys(java.util.Collection<java.lang.String>)", "131": "Message::::setKeys(java.util.Collection<java.lang.String>)", "132": "Message::::setKeys(java.util.Collection<java.lang.String>)", "133": "Message::::setKeys(java.util.Collection<java.lang.String>)", "134": "Message::::setKeys(java.util.Collection<java.lang.String>)", "135": "Message::::setKeys(java.util.Collection<java.lang.String>)", "136": "Message::::setKeys(java.util.Collection<java.lang.String>)", "137": "Message::::setKeys(java.util.Collection<java.lang.String>)", "139": "Message::::getDelayTimeLevel()", "140": "Message::::getDelayTimeLevel()", "141": "Message::::getDelayTimeLevel()", "142": "Message::::getDelayTimeLevel()", "143": "Message::::getDelayTimeLevel()", "144": "Message::::getDelayTimeLevel()", "145": "Message::::getDelayTimeLevel()", "146": "Message::::getDelayTimeLevel()", "148": "Message::::setDelayTimeLevel(int)", "149": "Message::::setDelayTimeLevel(int)", "150": "Message::::setDelayTimeLevel(int)", "152": "Message::::isWaitStoreMsgOK()", "153": "Message::::isWaitStoreMsgOK()", "154": "Message::::isWaitStoreMsgOK()", "155": "Message::::isWaitStoreMsgOK()", "156": "Message::::isWaitStoreMsgOK()", "157": "Message::::isWaitStoreMsgOK()", "158": "Message::::isWaitStoreMsgOK()", "160": "Message::::setWaitStoreMsgOK(boolean)", "161": "Message::::setWaitStoreMsgOK(boolean)", "162": "Message::::setWaitStoreMsgOK(boolean)", "164": "Message::::setInstanceId(java.lang.String)", "165": "Message::::setInstanceId(java.lang.String)", "166": "Message::::setInstanceId(java.lang.String)", "168": "Message::::getFlag()", "169": "Message::::getFlag()", "170": "Message::::getFlag()", "172": "Message::::setFlag(int)", "173": "Message::::setFlag(int)", "174": "Message::::setFlag(int)", "176": "Message::::getBody()", "177": "Message::::getBody()", "178": "Message::::getBody()", "180": "Message::::setBody(byte[])", "181": "Message::::setBody(byte[])", "182": "Message::::setBody(byte[])", "184": "Message::::getProperties()", "185": "Message::::getProperties()", "186": "Message::::getProperties()", "188": "Message::::setProperties(java.util.Map<java.lang.String, java.lang.String>)", "189": "Message::::setProperties(java.util.Map<java.lang.String, java.lang.String>)", "190": "Message::::setProperties(java.util.Map<java.lang.String, java.lang.String>)", "192": "Message::::getBuyerId()", "193": "Message::::getBuyerId()", "194": "Message::::getBuyerId()", "196": "Message::::setBuyerId(java.lang.String)", "197": "Message::::setBuyerId(java.lang.String)", "198": "Message::::setBuyerId(java.lang.String)", "200": "Message::::getTransactionId()", "201": "Message::::getTransactionId()", "202": "Message::::getTransactionId()", "204": "Message::::setTransactionId(java.lang.String)", "205": "Message::::setTransactionId(java.lang.String)", "206": "Message::::setTransactionId(java.lang.String)", "208": "Message::::toString()", "209": "Message::::toString()", "210": "Message::::toString()", "211": "Message::::toString()", "212": "Message::::toString()", "213": "Message::::toString()", "214": "Message::::toString()", "215": "Message::::toString()", "216": "Message::::toString()", "217": "Message::::toString()"}, "test_reverse_method_lines_dic": {"26": "MessageTest::::putUserPropertyWithRuntimeException()", "27": "MessageTest::::putUserPropertyWithRuntimeException()", "28": "MessageTest::::putUserPropertyWithRuntimeException()", "29": "MessageTest::::putUserPropertyWithRuntimeException()", "30": "MessageTest::::putUserPropertyWithRuntimeException()", "31": "MessageTest::::putUserPropertyWithRuntimeException()", "33": "MessageTest::::putUserNullValuePropertyWithException()", "34": "MessageTest::::putUserNullValuePropertyWithException()", "35": "MessageTest::::putUserNullValuePropertyWithException()", "36": "MessageTest::::putUserNullValuePropertyWithException()", "37": "MessageTest::::putUserNullValuePropertyWithException()", "38": "MessageTest::::putUserNullValuePropertyWithException()", "40": "MessageTest::::putUserEmptyValuePropertyWithException()", "41": "MessageTest::::putUserEmptyValuePropertyWithException()", "42": "MessageTest::::putUserEmptyValuePropertyWithException()", "43": "MessageTest::::putUserEmptyValuePropertyWithException()", "44": "MessageTest::::putUserEmptyValuePropertyWithException()", "45": "MessageTest::::putUserEmptyValuePropertyWithException()", "47": "MessageTest::::putUserNullNamePropertyWithException()", "48": "MessageTest::::putUserNullNamePropertyWithException()", "49": "MessageTest::::putUserNullNamePropertyWithException()", "50": "MessageTest::::putUserNullNamePropertyWithException()", "51": "MessageTest::::putUserNullNamePropertyWithException()", "52": "MessageTest::::putUserNullNamePropertyWithException()", "54": "MessageTest::::putUserEmptyNamePropertyWithException()", "55": "MessageTest::::putUserEmptyNamePropertyWithException()", "56": "MessageTest::::putUserEmptyNamePropertyWithException()", "57": "MessageTest::::putUserEmptyNamePropertyWithException()", "58": "MessageTest::::putUserEmptyNamePropertyWithException()", "59": "MessageTest::::putUserEmptyNamePropertyWithException()", "61": "MessageTest::::putUserProperty()", "62": "MessageTest::::putUserProperty()", "63": "MessageTest::::putUserProperty()", "64": "MessageTest::::putUserProperty()", "65": "MessageTest::::putUserProperty()", "66": "MessageTest::::putUserProperty()", "67": "MessageTest::::putUserProperty()"}, "tests": [{"test_lines": [26, 31], "covered_lines": [34, 35, 82, 83]}, {"test_lines": [33, 38], "covered_lines": [34, 35, 82, 87, 89]}, {"test_lines": [40, 45], "covered_lines": [34, 35, 82, 87, 89]}, {"test_lines": [47, 52], "covered_lines": [34, 35, 82, 87, 89]}, {"test_lines": [54, 59], "covered_lines": [34, 35, 82, 87, 88, 89]}, {"test_lines": [61, 67], "covered_lines": [34, 35, 68, 69, 72, 73, 82, 87, 88, 94, 95, 98, 102, 106]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/message/MessageClientIDSetter.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.message;\n", "\n", "import java.nio.ByteBuffer;\n", "import java.util.Calendar;\n", "import java.util.Date;\n", "import java.util.concurrent.atomic.AtomicInteger;\n", "import org.apache.rocketmq.common.UtilAll;\n", "\n", "public class MessageClientIDSetter {\n", "    private static final String TOPIC_KEY_SPLITTER = \"#\";\n", "    private static final int LEN;\n", "    private static final String FIX_STRING;\n", "    private static final AtomicInteger COUNTER;\n", "    private static long startTime;\n", "    private static long nextStartTime;\n", "\n", "    static {\n", "        byte[] ip;\n", "        try {\n", "            ip = UtilAll.getIP();\n", "        } catch (Exception e) {\n", "            ip = createFakeIP();\n", "        }\n", "        LEN = ip.length + 2 + 4 + 4 + 2;\n", "        ByteBuffer tempBuffer = ByteBuffer.allocate(ip.length + 2 + 4);\n", "        tempBuffer.put(ip);\n", "        tempBuffer.putShort((short) UtilAll.getPid());\n", "        tempBuffer.putInt(MessageClientIDSetter.class.getClassLoader().hashCode());\n", "        FIX_STRING = UtilAll.bytes2string(tempBuffer.array());\n", "        setStartTime(System.currentTimeMillis());\n", "        COUNTER = new AtomicInteger(0);\n", "    }\n", "\n", "    private synchronized static void setStartTime(long millis) {\n", "        Calendar cal = Calendar.getInstance();\n", "        cal.setTimeInMillis(millis);\n", "        cal.set(Calendar.DAY_OF_MONTH, 1);\n", "        cal.set(Calendar.HOUR_OF_DAY, 0);\n", "        cal.set(Calendar.MINUTE, 0);\n", "        cal.set(Calendar.SECOND, 0);\n", "        cal.set(Calendar.MILLISECOND, 0);\n", "        startTime = cal.getTimeInMillis();\n", "        cal.add(Calendar.MONTH, 1);\n", "        nextStartTime = cal.getTimeInMillis();\n", "    }\n", "\n", "    public static Date getNearlyTimeFromID(String msgID) {\n", "        ByteBuffer buf = ByteBuffer.allocate(8);\n", "        byte[] bytes = UtilAll.string2bytes(msgID);\n", "        int ipLength = bytes.length == 28 ? 16 : 4;\n", "        buf.put((byte) 0);\n", "        buf.put((byte) 0);\n", "        buf.put((byte) 0);\n", "        buf.put((byte) 0);\n", "        buf.put(bytes, ipLength + 2 + 4, 4);\n", "        buf.position(0);\n", "        long spanMS = buf.getLong();\n", "        Calendar cal = Calendar.getInstance();\n", "        long now = cal.getTimeInMillis();\n", "        cal.set(Calendar.DAY_OF_MONTH, 1);\n", "        cal.set(Calendar.HOUR_OF_DAY, 0);\n", "        cal.set(Calendar.MINUTE, 0);\n", "        cal.set(Calendar.SECOND, 0);\n", "        cal.set(Calendar.MILLISECOND, 0);\n", "        long monStartTime = cal.getTimeInMillis();\n", "        if (monStartTime + spanMS >= now) {\n", "            cal.add(Calendar.MONTH, -1);\n", "            monStartTime = cal.getTimeInMillis();\n", "        }\n", "        cal.setTimeInMillis(monStartTime + spanMS);\n", "        return cal.getTime();\n", "    }\n", "\n", "    public static String getIPStrFromID(String msgID) {\n", "        byte[] ipBytes = getIPFromID(msgID);\n", "        if (ipBytes.length == 16) {\n", "            return UtilAll.ipToIPv6Str(ipBytes);\n", "        } else {\n", "            return UtilAll.ipToIPv4Str(ipBytes);\n", "        }\n", "    }\n", "\n", "    public static byte[] getIPFromID(String msgID) {\n", "        byte[] bytes = UtilAll.string2bytes(msgID);\n", "        int ipLength = bytes.length == 28 ? 16 : 4;\n", "        byte[] result = new byte[ipLength];\n", "        System.arraycopy(bytes, 0, result, 0, ipLength);\n", "        return result;\n", "    }\n", "\n", "    public static int getPidFromID(String msgID) {\n", "        byte[] bytes = UtilAll.string2bytes(msgID);\n", "        ByteBuffer wrap = ByteBuffer.wrap(bytes);\n", "        int value = wrap.getShort(bytes.length - 2 - 4 - 4 - 2);\n", "        return value & 0x0000FFFF;\n", "    }\n", "\n", "    public static String createUniqID() {\n", "        StringBuilder sb = new StringBuilder(LEN * 2);\n", "        sb.append(FIX_STRING);\n", "        sb.append(UtilAll.bytes2string(createUniqIDBuffer()));\n", "        return sb.toString();\n", "    }\n", "\n", "    private static byte[] createUniqIDBuffer() {\n", "        ByteBuffer buffer = ByteBuffer.allocate(4 + 2);\n", "        long current = System.currentTimeMillis();\n", "        if (current >= nextStartTime) {\n", "            setStartTime(current);\n", "        }\n", "        buffer.putInt((int) (System.currentTimeMillis() - startTime));\n", "        buffer.putShort((short) COUNTER.getAndIncrement());\n", "        return buffer.array();\n", "    }\n", "\n", "    public static void setUniqID(final Message msg) {\n", "        if (msg.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX) == null) {\n", "            msg.putProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX, createUniqID());\n", "        }\n", "    }\n", "\n", "    public static String getUniqID(final Message msg) {\n", "        return msg.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);\n", "    }\n", "\n", "    public static byte[] createFakeIP() {\n", "        ByteBuffer bb = ByteBuffer.allocate(8);\n", "        bb.putLong(System.currentTimeMillis());\n", "        bb.position(4);\n", "        byte[] fakeIP = new byte[4];\n", "        bb.get(fakeIP);\n", "        return fakeIP;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.message;\n", "\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class MessageClientIDSetterTest {\n", "\n", "    @Test\n", "    public void testGetIPStrFromID() {\n", "        byte[] ip = UtilAll.getIP();\n", "        String ipStr = (4 == ip.length) ? UtilAll.ipToIPv4Str(ip) : UtilAll.ipToIPv6Str(ip);\n", "\n", "        String uniqID = MessageClientIDSetter.createUniqID();\n", "        String ipStrFromID = MessageClientIDSetter.getIPStrFromID(uniqID);\n", "\n", "        assertThat(ipStr).isEqualTo(ipStrFromID);\n", "    }\n", "\n", "\n", "    @Test\n", "    public void testGetPidFromID() {\n", "        // Temporary fix on MacOS\n", "        short pid = (short) UtilAll.getPid();\n", "\n", "        String uniqID = MessageClientIDSetter.createUniqID();\n", "        short pidFromID = (short) MessageClientIDSetter.getPidFromID(uniqID);\n", "\n", "        assertThat(pid).isEqualTo(pidFromID);\n", "    }\n", "}\n"], "method_lines_dic": {"MessageClientIDSetter::::setStartTime(long)": [50, 61], "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)": [63, 88], "MessageClientIDSetter::::getIPStrFromID(java.lang.String)": [90, 97], "MessageClientIDSetter::::getIPFromID(java.lang.String)": [99, 105], "MessageClientIDSetter::::getPidFromID(java.lang.String)": [107, 112], "MessageClientIDSetter::::createUniqID()": [114, 119], "MessageClientIDSetter::::createUniqIDBuffer()": [121, 130], "MessageClientIDSetter::::setUniqID(org.apache.rocketmq.common.message.Message)": [132, 136], "MessageClientIDSetter::::getUniqID(org.apache.rocketmq.common.message.Message)": [138, 140], "MessageClientIDSetter::::createFakeIP()": [142, 149]}, "test_method_lines_dic": {"MessageClientIDSetterTest::::testGetIPStrFromID()": [27, 36], "MessageClientIDSetterTest::::testGetPidFromID()": [39, 48]}, "reverse_method_lines_dic": {"50": "MessageClientIDSetter::::setStartTime(long)", "51": "MessageClientIDSetter::::setStartTime(long)", "52": "MessageClientIDSetter::::setStartTime(long)", "53": "MessageClientIDSetter::::setStartTime(long)", "54": "MessageClientIDSetter::::setStartTime(long)", "55": "MessageClientIDSetter::::setStartTime(long)", "56": "MessageClientIDSetter::::setStartTime(long)", "57": "MessageClientIDSetter::::setStartTime(long)", "58": "MessageClientIDSetter::::setStartTime(long)", "59": "MessageClientIDSetter::::setStartTime(long)", "60": "MessageClientIDSetter::::setStartTime(long)", "61": "MessageClientIDSetter::::setStartTime(long)", "63": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "64": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "65": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "66": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "67": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "68": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "69": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "70": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "71": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "72": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "73": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "74": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "75": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "76": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "77": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "78": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "79": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "80": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "81": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "82": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "83": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "84": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "85": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "86": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "87": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "88": "MessageClientIDSetter::::getNearlyTimeFromID(java.lang.String)", "90": "MessageClientIDSetter::::getIPStrFromID(java.lang.String)", "91": "MessageClientIDSetter::::getIPStrFromID(java.lang.String)", "92": "MessageClientIDSetter::::getIPStrFromID(java.lang.String)", "93": "MessageClientIDSetter::::getIPStrFromID(java.lang.String)", "94": "MessageClientIDSetter::::getIPStrFromID(java.lang.String)", "95": "MessageClientIDSetter::::getIPStrFromID(java.lang.String)", "96": "MessageClientIDSetter::::getIPStrFromID(java.lang.String)", "97": "MessageClientIDSetter::::getIPStrFromID(java.lang.String)", "99": "MessageClientIDSetter::::getIPFromID(java.lang.String)", "100": "MessageClientIDSetter::::getIPFromID(java.lang.String)", "101": "MessageClientIDSetter::::getIPFromID(java.lang.String)", "102": "MessageClientIDSetter::::getIPFromID(java.lang.String)", "103": "MessageClientIDSetter::::getIPFromID(java.lang.String)", "104": "MessageClientIDSetter::::getIPFromID(java.lang.String)", "105": "MessageClientIDSetter::::getIPFromID(java.lang.String)", "107": "MessageClientIDSetter::::getPidFromID(java.lang.String)", "108": "MessageClientIDSetter::::getPidFromID(java.lang.String)", "109": "MessageClientIDSetter::::getPidFromID(java.lang.String)", "110": "MessageClientIDSetter::::getPidFromID(java.lang.String)", "111": "MessageClientIDSetter::::getPidFromID(java.lang.String)", "112": "MessageClientIDSetter::::getPidFromID(java.lang.String)", "114": "MessageClientIDSetter::::createUniqID()", "115": "MessageClientIDSetter::::createUniqID()", "116": "MessageClientIDSetter::::createUniqID()", "117": "MessageClientIDSetter::::createUniqID()", "118": "MessageClientIDSetter::::createUniqID()", "119": "MessageClientIDSetter::::createUniqID()", "121": "MessageClientIDSetter::::createUniqIDBuffer()", "122": "MessageClientIDSetter::::createUniqIDBuffer()", "123": "MessageClientIDSetter::::createUniqIDBuffer()", "124": "MessageClientIDSetter::::createUniqIDBuffer()", "125": "MessageClientIDSetter::::createUniqIDBuffer()", "126": "MessageClientIDSetter::::createUniqIDBuffer()", "127": "MessageClientIDSetter::::createUniqIDBuffer()", "128": "MessageClientIDSetter::::createUniqIDBuffer()", "129": "MessageClientIDSetter::::createUniqIDBuffer()", "130": "MessageClientIDSetter::::createUniqIDBuffer()", "132": "MessageClientIDSetter::::setUniqID(org.apache.rocketmq.common.message.Message)", "133": "MessageClientIDSetter::::setUniqID(org.apache.rocketmq.common.message.Message)", "134": "MessageClientIDSetter::::setUniqID(org.apache.rocketmq.common.message.Message)", "135": "MessageClientIDSetter::::setUniqID(org.apache.rocketmq.common.message.Message)", "136": "MessageClientIDSetter::::setUniqID(org.apache.rocketmq.common.message.Message)", "138": "MessageClientIDSetter::::getUniqID(org.apache.rocketmq.common.message.Message)", "139": "MessageClientIDSetter::::getUniqID(org.apache.rocketmq.common.message.Message)", "140": "MessageClientIDSetter::::getUniqID(org.apache.rocketmq.common.message.Message)", "142": "MessageClientIDSetter::::createFakeIP()", "143": "MessageClientIDSetter::::createFakeIP()", "144": "MessageClientIDSetter::::createFakeIP()", "145": "MessageClientIDSetter::::createFakeIP()", "146": "MessageClientIDSetter::::createFakeIP()", "147": "MessageClientIDSetter::::createFakeIP()", "148": "MessageClientIDSetter::::createFakeIP()", "149": "MessageClientIDSetter::::createFakeIP()"}, "test_reverse_method_lines_dic": {"27": "MessageClientIDSetterTest::::testGetIPStrFromID()", "28": "MessageClientIDSetterTest::::testGetIPStrFromID()", "29": "MessageClientIDSetterTest::::testGetIPStrFromID()", "30": "MessageClientIDSetterTest::::testGetIPStrFromID()", "31": "MessageClientIDSetterTest::::testGetIPStrFromID()", "32": "MessageClientIDSetterTest::::testGetIPStrFromID()", "33": "MessageClientIDSetterTest::::testGetIPStrFromID()", "34": "MessageClientIDSetterTest::::testGetIPStrFromID()", "35": "MessageClientIDSetterTest::::testGetIPStrFromID()", "36": "MessageClientIDSetterTest::::testGetIPStrFromID()", "39": "MessageClientIDSetterTest::::testGetPidFromID()", "40": "MessageClientIDSetterTest::::testGetPidFromID()", "41": "MessageClientIDSetterTest::::testGetPidFromID()", "42": "MessageClientIDSetterTest::::testGetPidFromID()", "43": "MessageClientIDSetterTest::::testGetPidFromID()", "44": "MessageClientIDSetterTest::::testGetPidFromID()", "45": "MessageClientIDSetterTest::::testGetPidFromID()", "46": "MessageClientIDSetterTest::::testGetPidFromID()", "47": "MessageClientIDSetterTest::::testGetPidFromID()", "48": "MessageClientIDSetterTest::::testGetPidFromID()"}, "tests": [{"test_lines": [27, 36], "covered_lines": [36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 91, 92, 95, 100, 101, 102, 103, 104, 115, 116, 117, 118, 122, 123, 124, 127, 128, 129]}, {"test_lines": [39, 48], "covered_lines": [36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 108, 109, 110, 111, 115, 116, 117, 118, 122, 123, 124, 127, 128, 129]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.common.message;\n", "\n", "import java.net.Inet4Address;\n", "import java.net.InetAddress;\n", "import java.net.InetSocketAddress;\n", "import java.net.SocketAddress;\n", "import java.net.UnknownHostException;\n", "import java.nio.ByteBuffer;\n", "import java.nio.charset.Charset;\n", "import java.util.ArrayList;\n", "import java.util.HashMap;\n", "import java.util.List;\n", "import java.util.Map;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.sysflag.MessageSysFlag;\n", "\n", "public class MessageDecoder {\n", "//    public final static int MSG_ID_LENGTH = 8 + 8;\n", "\n", "    public final static Charset CHARSET_UTF8 = Charset.forName(\"UTF-8\");\n", "    public final static int MESSAGE_MAGIC_CODE_POSTION = 4;\n", "    public final static int MESSAGE_FLAG_POSTION = 16;\n", "    public final static int MESSAGE_PHYSIC_OFFSET_POSTION = 28;\n", "    //    public final static int MESSAGE_STORE_TIMESTAMP_POSTION = 56;\n", "    public final static int MESSAGE_MAGIC_CODE = -626843481;\n", "    public static final char NAME_VALUE_SEPARATOR = 1;\n", "    public static final char PROPERTY_SEPARATOR = 2;\n", "    public static final int PHY_POS_POSITION = 4 + 4 + 4 + 4 + 4 + 8;\n", "    public static final int QUEUE_OFFSET_POSITION = 4 + 4 + 4 + 4 + 4;\n", "    public static final int SYSFLAG_POSITION = 4 + 4 + 4 + 4 + 4 + 8 + 8;\n", "//    public static final int BODY_SIZE_POSITION = 4 // 1 TOTALSIZE\n", "//        + 4 // 2 MAGICCODE\n", "//        + 4 // 3 BODYCRC\n", "//        + 4 // 4 QUEUEID\n", "//        + 4 // 5 FLAG\n", "//        + 8 // 6 QUEUEOFFSET\n", "//        + 8 // 7 PHYSICALOFFSET\n", "//        + 4 // 8 SYSFLAG\n", "//        + 8 // 9 BORNTIMESTAMP\n", "//        + 8 // 10 BORNHOST\n", "//        + 8 // 11 STORETIMESTAMP\n", "//        + 8 // 12 STOREHOSTADDRESS\n", "//        + 4 // 13 RECONSUMETIMES\n", "//        + 8; // 14 Prepared Transaction Offset\n", "\n", "    public static String createMessageId(final ByteBuffer input, final ByteBuffer addr, final long offset) {\n", "        input.flip();\n", "        int msgIDLength = addr.limit() == 8 ? 16 : 28;\n", "        input.limit(msgIDLength);\n", "\n", "        input.put(addr);\n", "        input.putLong(offset);\n", "\n", "        return UtilAll.bytes2string(input.array());\n", "    }\n", "\n", "    public static String createMessageId(SocketAddress socketAddress, long transactionIdhashCode) {\n", "        InetSocketAddress inetSocketAddress = (InetSocketAddress) socketAddress;\n", "        int msgIDLength = inetSocketAddress.getAddress() instanceof Inet4Address ? 16 : 28;\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(msgIDLength);\n", "        byteBuffer.put(inetSocketAddress.getAddress().getAddress());\n", "        byteBuffer.putInt(inetSocketAddress.getPort());\n", "        byteBuffer.putLong(transactionIdhashCode);\n", "        byteBuffer.flip();\n", "        return UtilAll.bytes2string(byteBuffer.array());\n", "    }\n", "\n", "    public static MessageId decodeMessageId(final String msgId) throws UnknownHostException {\n", "        SocketAddress address;\n", "        long offset;\n", "        int ipLength = msgId.length() == 32 ? 4 * 2 : 16 * 2;\n", "\n", "        byte[] ip = UtilAll.string2bytes(msgId.substring(0, ipLength));\n", "        byte[] port = UtilAll.string2bytes(msgId.substring(ipLength, ipLength + 8));\n", "        ByteBuffer bb = ByteBuffer.wrap(port);\n", "        int portInt = bb.getInt(0);\n", "        address = new InetSocketAddress(InetAddress.getByAddress(ip), portInt);\n", "\n", "        // offset\n", "        byte[] data = UtilAll.string2bytes(msgId.substring(ipLength + 8, ipLength + 8 + 16));\n", "        bb = ByteBuffer.wrap(data);\n", "        offset = bb.getLong(0);\n", "\n", "        return new MessageId(address, offset);\n", "    }\n", "\n", "    /**\n", "     * Just decode properties from msg buffer.\n", "     *\n", "     * @param byteBuffer msg commit log buffer.\n", "     */\n", "    public static Map<String, String> decodeProperties(java.nio.ByteBuffer byteBuffer) {\n", "        int sysFlag = byteBuffer.getInt(SYSFLAG_POSITION);\n", "        int bornhostLength = (sysFlag & MessageSysFlag.BORNHOST_V6_FLAG) == 0 ? 8 : 20;\n", "        int storehostAddressLength = (sysFlag & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 8 : 20;\n", "        int bodySizePosition = 4 // 1 TOTALSIZE\n", "            + 4 // 2 MAGICCODE\n", "            + 4 // 3 BODYCRC\n", "            + 4 // 4 QUEUEID\n", "            + 4 // 5 FLAG\n", "            + 8 // 6 QUEUEOFFSET\n", "            + 8 // 7 PHYSICALOFFSET\n", "            + 4 // 8 SYSFLAG\n", "            + 8 // 9 BORNTIMESTAMP\n", "            + bornhostLength // 10 BORNHOST\n", "            + 8 // 11 STORETIMESTAMP\n", "            + storehostAddressLength // 12 STOREHOSTADDRESS\n", "            + 4 // 13 RECONSUMETIMES\n", "            + 8; // 14 Prepared Transaction Offset\n", "        int topicLengthPosition = bodySizePosition + 4 + byteBuffer.getInt(bodySizePosition);\n", "\n", "        byte topicLength = byteBuffer.get(topicLengthPosition);\n", "\n", "        short propertiesLength = byteBuffer.getShort(topicLengthPosition + 1 + topicLength);\n", "\n", "        byteBuffer.position(topicLengthPosition + 1 + topicLength + 2);\n", "\n", "        if (propertiesLength > 0) {\n", "            byte[] properties = new byte[propertiesLength];\n", "            byteBuffer.get(properties);\n", "            String propertiesString = new String(properties, CHARSET_UTF8);\n", "            Map<String, String> map = string2messageProperties(propertiesString);\n", "            return map;\n", "        }\n", "        return null;\n", "    }\n", "\n", "    public static MessageExt decode(java.nio.ByteBuffer byteBuffer) {\n", "        return decode(byteBuffer, true, true, false);\n", "    }\n", "\n", "    public static MessageExt clientDecode(java.nio.ByteBuffer byteBuffer, final boolean readBody) {\n", "        return decode(byteBuffer, readBody, true, true);\n", "    }\n", "\n", "    public static MessageExt decode(java.nio.ByteBuffer byteBuffer, final boolean readBody) {\n", "        return decode(byteBuffer, readBody, true, false);\n", "    }\n", "\n", "    public static byte[] encode(MessageExt messageExt, boolean needCompress) throws Exception {\n", "        byte[] body = messageExt.getBody();\n", "        byte[] topics = messageExt.getTopic().getBytes(CHARSET_UTF8);\n", "        byte topicLen = (byte) topics.length;\n", "        String properties = messageProperties2String(messageExt.getProperties());\n", "        byte[] propertiesBytes = properties.getBytes(CHARSET_UTF8);\n", "        short propertiesLength = (short) propertiesBytes.length;\n", "        int sysFlag = messageExt.getSysFlag();\n", "        int bornhostLength = (sysFlag & MessageSysFlag.BORNHOST_V6_FLAG) == 0 ? 8 : 20;\n", "        int storehostAddressLength = (sysFlag & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 8 : 20;\n", "        byte[] newBody = messageExt.getBody();\n", "        if (needCompress && (sysFlag & MessageSysFlag.COMPRESSED_FLAG) == MessageSysFlag.COMPRESSED_FLAG) {\n", "            newBody = UtilAll.compress(body, 5);\n", "        }\n", "        int bodyLength = newBody.length;\n", "        int storeSize = messageExt.getStoreSize();\n", "        ByteBuffer byteBuffer;\n", "        if (storeSize > 0) {\n", "            byteBuffer = ByteBuffer.allocate(storeSize);\n", "        } else {\n", "            storeSize = 4 // 1 TOTALSIZE\n", "                + 4 // 2 MAGICCODE\n", "                + 4 // 3 BODYCRC\n", "                + 4 // 4 QUEUEID\n", "                + 4 // 5 FLAG\n", "                + 8 // 6 QUEUEOFFSET\n", "                + 8 // 7 PHYSICALOFFSET\n", "                + 4 // 8 SYSFLAG\n", "                + 8 // 9 BORNTIMESTAMP\n", "                + bornhostLength // 10 BORNHOST\n", "                + 8 // 11 STORETIMESTAMP\n", "                + storehostAddressLength // 12 STOREHOSTADDRESS\n", "                + 4 // 13 RECONSUMETIMES\n", "                + 8 // 14 Prepared Transaction Offset\n", "                + 4 + bodyLength // 14 BODY\n", "                + 1 + topicLen // 15 TOPIC\n", "                + 2 + propertiesLength // 16 propertiesLength\n", "                + 0;\n", "            byteBuffer = ByteBuffer.allocate(storeSize);\n", "        }\n", "        // 1 TOTALSIZE\n", "        byteBuffer.putInt(storeSize);\n", "\n", "        // 2 MAGICCODE\n", "        byteBuffer.putInt(MESSAGE_MAGIC_CODE);\n", "\n", "        // 3 BODYCRC\n", "        int bodyCRC = messageExt.getBodyCRC();\n", "        byteBuffer.putInt(bodyCRC);\n", "\n", "        // 4 QUEUEID\n", "        int queueId = messageExt.getQueueId();\n", "        byteBuffer.putInt(queueId);\n", "\n", "        // 5 FLAG\n", "        int flag = messageExt.getFlag();\n", "        byteBuffer.putInt(flag);\n", "\n", "        // 6 QUEUEOFFSET\n", "        long queueOffset = messageExt.getQueueOffset();\n", "        byteBuffer.putLong(queueOffset);\n", "\n", "        // 7 PHYSICALOFFSET\n", "        long physicOffset = messageExt.getCommitLogOffset();\n", "        byteBuffer.putLong(physicOffset);\n", "\n", "        // 8 SYSFLAG\n", "        byteBuffer.putInt(sysFlag);\n", "\n", "        // 9 BORNTIMESTAMP\n", "        long bornTimeStamp = messageExt.getBornTimestamp();\n", "        byteBuffer.putLong(bornTimeStamp);\n", "\n", "        // 10 BORNHOST\n", "        InetSocketAddress bornHost = (InetSocketAddress) messageExt.getBornHost();\n", "        byteBuffer.put(bornHost.getAddress().getAddress());\n", "        byteBuffer.putInt(bornHost.getPort());\n", "\n", "        // 11 STORETIMESTAMP\n", "        long storeTimestamp = messageExt.getStoreTimestamp();\n", "        byteBuffer.putLong(storeTimestamp);\n", "\n", "        // 12 STOREHOST\n", "        InetSocketAddress serverHost = (InetSocketAddress) messageExt.getStoreHost();\n", "        byteBuffer.put(serverHost.getAddress().getAddress());\n", "        byteBuffer.putInt(serverHost.getPort());\n", "\n", "        // 13 RECONSUMETIMES\n", "        int reconsumeTimes = messageExt.getReconsumeTimes();\n", "        byteBuffer.putInt(reconsumeTimes);\n", "\n", "        // 14 Prepared Transaction Offset\n", "        long preparedTransactionOffset = messageExt.getPreparedTransactionOffset();\n", "        byteBuffer.putLong(preparedTransactionOffset);\n", "\n", "        // 15 BODY\n", "        byteBuffer.putInt(bodyLength);\n", "        byteBuffer.put(newBody);\n", "\n", "        // 16 TOPIC\n", "        byteBuffer.put(topicLen);\n", "        byteBuffer.put(topics);\n", "\n", "        // 17 properties\n", "        byteBuffer.putShort(propertiesLength);\n", "        byteBuffer.put(propertiesBytes);\n", "\n", "        return byteBuffer.array();\n", "    }\n", "\n", "    public static MessageExt decode(\n", "        java.nio.ByteBuffer byteBuffer, final boolean readBody, final boolean deCompressBody) {\n", "        return decode(byteBuffer, readBody, deCompressBody, false);\n", "    }\n", "\n", "    public static MessageExt decode(\n", "        java.nio.ByteBuffer byteBuffer, final boolean readBody, final boolean deCompressBody, final boolean isClient) {\n", "        try {\n", "\n", "            MessageExt msgExt;\n", "            if (isClient) {\n", "                msgExt = new MessageClientExt();\n", "            } else {\n", "                msgExt = new MessageExt();\n", "            }\n", "\n", "            // 1 TOTALSIZE\n", "            int storeSize = byteBuffer.getInt();\n", "            msgExt.setStoreSize(storeSize);\n", "\n", "            // 2 MAGICCODE\n", "            byteBuffer.getInt();\n", "\n", "            // 3 BODYCRC\n", "            int bodyCRC = byteBuffer.getInt();\n", "            msgExt.setBodyCRC(bodyCRC);\n", "\n", "            // 4 QUEUEID\n", "            int queueId = byteBuffer.getInt();\n", "            msgExt.setQueueId(queueId);\n", "\n", "            // 5 FLAG\n", "            int flag = byteBuffer.getInt();\n", "            msgExt.setFlag(flag);\n", "\n", "            // 6 QUEUEOFFSET\n", "            long queueOffset = byteBuffer.getLong();\n", "            msgExt.setQueueOffset(queueOffset);\n", "\n", "            // 7 PHYSICALOFFSET\n", "            long physicOffset = byteBuffer.getLong();\n", "            msgExt.setCommitLogOffset(physicOffset);\n", "\n", "            // 8 SYSFLAG\n", "            int sysFlag = byteBuffer.getInt();\n", "            msgExt.setSysFlag(sysFlag);\n", "\n", "            // 9 BORNTIMESTAMP\n", "            long bornTimeStamp = byteBuffer.getLong();\n", "            msgExt.setBornTimestamp(bornTimeStamp);\n", "\n", "            // 10 BORNHOST\n", "            int bornhostIPLength = (sysFlag & MessageSysFlag.BORNHOST_V6_FLAG) == 0 ? 4 : 16;\n", "            byte[] bornHost = new byte[bornhostIPLength];\n", "            byteBuffer.get(bornHost, 0, bornhostIPLength);\n", "            int port = byteBuffer.getInt();\n", "            msgExt.setBornHost(new InetSocketAddress(InetAddress.getByAddress(bornHost), port));\n", "\n", "            // 11 STORETIMESTAMP\n", "            long storeTimestamp = byteBuffer.getLong();\n", "            msgExt.setStoreTimestamp(storeTimestamp);\n", "\n", "            // 12 STOREHOST\n", "            int storehostIPLength = (sysFlag & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 : 16;\n", "            byte[] storeHost = new byte[storehostIPLength];\n", "            byteBuffer.get(storeHost, 0, storehostIPLength);\n", "            port = byteBuffer.getInt();\n", "            msgExt.setStoreHost(new InetSocketAddress(InetAddress.getByAddress(storeHost), port));\n", "\n", "            // 13 RECONSUMETIMES\n", "            int reconsumeTimes = byteBuffer.getInt();\n", "            msgExt.setReconsumeTimes(reconsumeTimes);\n", "\n", "            // 14 Prepared Transaction Offset\n", "            long preparedTransactionOffset = byteBuffer.getLong();\n", "            msgExt.setPreparedTransactionOffset(preparedTransactionOffset);\n", "\n", "            // 15 BODY\n", "            int bodyLen = byteBuffer.getInt();\n", "            if (bodyLen > 0) {\n", "                if (readBody) {\n", "                    byte[] body = new byte[bodyLen];\n", "                    byteBuffer.get(body);\n", "\n", "                    // uncompress body\n", "                    if (deCompressBody && (sysFlag & MessageSysFlag.COMPRESSED_FLAG) == MessageSysFlag.COMPRESSED_FLAG) {\n", "                        body = UtilAll.uncompress(body);\n", "                    }\n", "\n", "                    msgExt.setBody(body);\n", "                } else {\n", "                    byteBuffer.position(byteBuffer.position() + bodyLen);\n", "                }\n", "            }\n", "\n", "            // 16 TOPIC\n", "            byte topicLen = byteBuffer.get();\n", "            byte[] topic = new byte[(int) topicLen];\n", "            byteBuffer.get(topic);\n", "            msgExt.setTopic(new String(topic, CHARSET_UTF8));\n", "\n", "            // 17 properties\n", "            short propertiesLength = byteBuffer.getShort();\n", "            if (propertiesLength > 0) {\n", "                byte[] properties = new byte[propertiesLength];\n", "                byteBuffer.get(properties);\n", "                String propertiesString = new String(properties, CHARSET_UTF8);\n", "                Map<String, String> map = string2messageProperties(propertiesString);\n", "                msgExt.setProperties(map);\n", "            }\n", "\n", "            int msgIDLength = storehostIPLength + 4 + 8;\n", "            ByteBuffer byteBufferMsgId = ByteBuffer.allocate(msgIDLength);\n", "            String msgId = createMessageId(byteBufferMsgId, msgExt.getStoreHostBytes(), msgExt.getCommitLogOffset());\n", "            msgExt.setMsgId(msgId);\n", "\n", "            if (isClient) {\n", "                ((MessageClientExt) msgExt).setOffsetMsgId(msgId);\n", "            }\n", "\n", "            return msgExt;\n", "        } catch (Exception e) {\n", "            byteBuffer.position(byteBuffer.limit());\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    public static List<MessageExt> decodes(java.nio.ByteBuffer byteBuffer) {\n", "        return decodes(byteBuffer, true);\n", "    }\n", "\n", "    public static List<MessageExt> decodes(java.nio.ByteBuffer byteBuffer, final boolean readBody) {\n", "        List<MessageExt> msgExts = new ArrayList<MessageExt>();\n", "        while (byteBuffer.hasRemaining()) {\n", "            MessageExt msgExt = clientDecode(byteBuffer, readBody);\n", "            if (null != msgExt) {\n", "                msgExts.add(msgExt);\n", "            } else {\n", "                break;\n", "            }\n", "        }\n", "        return msgExts;\n", "    }\n", "\n", "    public static String messageProperties2String(Map<String, String> properties) {\n", "        StringBuilder sb = new StringBuilder();\n", "        if (properties != null) {\n", "            for (final Map.Entry<String, String> entry : properties.entrySet()) {\n", "                final String name = entry.getKey();\n", "                final String value = entry.getValue();\n", "\n", "                if (value == null) {\n", "                    continue;\n", "                }\n", "                sb.append(name);\n", "                sb.append(NAME_VALUE_SEPARATOR);\n", "                sb.append(value);\n", "                sb.append(PROPERTY_SEPARATOR);\n", "            }\n", "        }\n", "        return sb.toString();\n", "    }\n", "\n", "    public static Map<String, String> string2messageProperties(final String properties) {\n", "        Map<String, String> map = new HashMap<String, String>();\n", "        if (properties != null) {\n", "            String[] items = properties.split(String.valueOf(PROPERTY_SEPARATOR));\n", "            for (String i : items) {\n", "                String[] nv = i.split(String.valueOf(NAME_VALUE_SEPARATOR));\n", "                if (2 == nv.length) {\n", "                    map.put(nv[0], nv[1]);\n", "                }\n", "            }\n", "        }\n", "\n", "        return map;\n", "    }\n", "\n", "    public static byte[] encodeMessage(Message message) {\n", "        //only need flag, body, properties\n", "        byte[] body = message.getBody();\n", "        int bodyLen = body.length;\n", "        String properties = messageProperties2String(message.getProperties());\n", "        byte[] propertiesBytes = properties.getBytes(CHARSET_UTF8);\n", "        //note properties length must not more than Short.MAX\n", "        short propertiesLength = (short) propertiesBytes.length;\n", "        int sysFlag = message.getFlag();\n", "        int storeSize = 4 // 1 TOTALSIZE\n", "            + 4 // 2 MAGICCOD\n", "            + 4 // 3 BODYCRC\n", "            + 4 // 4 FLAG\n", "            + 4 + bodyLen // 4 BODY\n", "            + 2 + propertiesLength;\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(storeSize);\n", "        // 1 TOTALSIZE\n", "        byteBuffer.putInt(storeSize);\n", "\n", "        // 2 MAGICCODE\n", "        byteBuffer.putInt(0);\n", "\n", "        // 3 BODYCRC\n", "        byteBuffer.putInt(0);\n", "\n", "        // 4 FLAG\n", "        int flag = message.getFlag();\n", "        byteBuffer.putInt(flag);\n", "\n", "        // 5 BODY\n", "        byteBuffer.putInt(bodyLen);\n", "        byteBuffer.put(body);\n", "\n", "        // 6 properties\n", "        byteBuffer.putShort(propertiesLength);\n", "        byteBuffer.put(propertiesBytes);\n", "\n", "        return byteBuffer.array();\n", "    }\n", "\n", "    public static Message decodeMessage(ByteBuffer byteBuffer) throws Exception {\n", "        Message message = new Message();\n", "\n", "        // 1 TOTALSIZE\n", "        byteBuffer.getInt();\n", "\n", "        // 2 MAGICCODE\n", "        byteBuffer.getInt();\n", "\n", "        // 3 BODYCRC\n", "        byteBuffer.getInt();\n", "\n", "        // 4 FLAG\n", "        int flag = byteBuffer.getInt();\n", "        message.setFlag(flag);\n", "\n", "        // 5 BODY\n", "        int bodyLen = byteBuffer.getInt();\n", "        byte[] body = new byte[bodyLen];\n", "        byteBuffer.get(body);\n", "        message.setBody(body);\n", "\n", "        // 6 properties\n", "        short propertiesLen = byteBuffer.getShort();\n", "        byte[] propertiesBytes = new byte[propertiesLen];\n", "        byteBuffer.get(propertiesBytes);\n", "        message.setProperties(string2messageProperties(new String(propertiesBytes, CHARSET_UTF8)));\n", "\n", "        return message;\n", "    }\n", "\n", "    public static byte[] encodeMessages(List<Message> messages) {\n", "        //TO DO refactor, accumulate in one buffer, avoid copies\n", "        List<byte[]> encodedMessages = new ArrayList<byte[]>(messages.size());\n", "        int allSize = 0;\n", "        for (Message message : messages) {\n", "            byte[] tmp = encodeMessage(message);\n", "            encodedMessages.add(tmp);\n", "            allSize += tmp.length;\n", "        }\n", "        byte[] allBytes = new byte[allSize];\n", "        int pos = 0;\n", "        for (byte[] bytes : encodedMessages) {\n", "            System.arraycopy(bytes, 0, allBytes, pos, bytes.length);\n", "            pos += bytes.length;\n", "        }\n", "        return allBytes;\n", "    }\n", "\n", "    public static List<Message> decodeMessages(ByteBuffer byteBuffer) throws Exception {\n", "        //TO DO add a callback for processing,  avoid creating lists\n", "        List<Message> msgs = new ArrayList<Message>();\n", "        while (byteBuffer.hasRemaining()) {\n", "            Message msg = decodeMessage(byteBuffer);\n", "            msgs.add(msg);\n", "        }\n", "        return msgs;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.common.message;\n", "\n", "import org.junit.Test;\n", "\n", "import java.net.InetAddress;\n", "import java.net.InetSocketAddress;\n", "import java.net.UnknownHostException;\n", "import java.nio.ByteBuffer;\n", "import java.util.Map;\n", "\n", "import static org.apache.rocketmq.common.message.MessageDecoder.createMessageId;\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class MessageDecoderTest {\n", "\n", "    @Test\n", "    public void testDecodeProperties() {\n", "        MessageExt messageExt = new MessageExt();\n", "\n", "        messageExt.setMsgId(\"645100FA00002A9F000000489A3AA09E\");\n", "        messageExt.setTopic(\"abc\");\n", "        messageExt.setBody(\"hello!q!\".getBytes());\n", "        try {\n", "            messageExt.setBornHost(new InetSocketAddress(InetAddress.getByName(\"127.0.0.1\"), 0));\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "        messageExt.setBornTimestamp(System.currentTimeMillis());\n", "        messageExt.setCommitLogOffset(123456);\n", "        messageExt.setPreparedTransactionOffset(0);\n", "        messageExt.setQueueId(0);\n", "        messageExt.setQueueOffset(123);\n", "        messageExt.setReconsumeTimes(0);\n", "        try {\n", "            messageExt.setStoreHost(new InetSocketAddress(InetAddress.getLocalHost(), 0));\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "\n", "        messageExt.putUserProperty(\"a\", \"123\");\n", "        messageExt.putUserProperty(\"b\", \"hello\");\n", "        messageExt.putUserProperty(\"c\", \"3.14\");\n", "\n", "        byte[] msgBytes = new byte[0];\n", "        try {\n", "            msgBytes = MessageDecoder.encode(messageExt, false);\n", "        } catch (Exception e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(msgBytes.length);\n", "        byteBuffer.put(msgBytes);\n", "\n", "        Map<String, String> properties = MessageDecoder.decodeProperties(byteBuffer);\n", "\n", "        assertThat(properties).isNotNull();\n", "        assertThat(\"123\").isEqualTo(properties.get(\"a\"));\n", "        assertThat(\"hello\").isEqualTo(properties.get(\"b\"));\n", "        assertThat(\"3.14\").isEqualTo(properties.get(\"c\"));\n", "    }\n", "\n", "    @Test\n", "    public void testDecodePropertiesOnIPv6Host() {\n", "        MessageExt messageExt = new MessageExt();\n", "\n", "        messageExt.setMsgId(\"24084004018081003FAA1DDE2B3F898A00002A9F0000000000000CA0\");\n", "        messageExt.setBornHostV6Flag();\n", "        messageExt.setStoreHostAddressV6Flag();\n", "        messageExt.setTopic(\"abc\");\n", "        messageExt.setBody(\"hello!q!\".getBytes());\n", "        try {\n", "            messageExt.setBornHost(new InetSocketAddress(InetAddress.getByName(\"1050:0000:0000:0000:0005:0600:300c:326b\"), 0));\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "        messageExt.setBornTimestamp(System.currentTimeMillis());\n", "        messageExt.setCommitLogOffset(123456);\n", "        messageExt.setPreparedTransactionOffset(0);\n", "        messageExt.setQueueId(0);\n", "        messageExt.setQueueOffset(123);\n", "        messageExt.setReconsumeTimes(0);\n", "        try {\n", "            messageExt.setStoreHost(new InetSocketAddress(InetAddress.getByName(\"::1\"), 0));\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "\n", "        messageExt.putUserProperty(\"a\", \"123\");\n", "        messageExt.putUserProperty(\"b\", \"hello\");\n", "        messageExt.putUserProperty(\"c\", \"3.14\");\n", "\n", "        byte[] msgBytes = new byte[0];\n", "        try {\n", "            msgBytes = MessageDecoder.encode(messageExt, false);\n", "        } catch (Exception e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(msgBytes.length);\n", "        byteBuffer.put(msgBytes);\n", "\n", "        Map<String, String> properties = MessageDecoder.decodeProperties(byteBuffer);\n", "\n", "        assertThat(properties).isNotNull();\n", "        assertThat(\"123\").isEqualTo(properties.get(\"a\"));\n", "        assertThat(\"hello\").isEqualTo(properties.get(\"b\"));\n", "        assertThat(\"3.14\").isEqualTo(properties.get(\"c\"));\n", "    }\n", "\n", "    @Test\n", "    public void testEncodeAndDecode() {\n", "        MessageExt messageExt = new MessageExt();\n", "\n", "        messageExt.setMsgId(\"645100FA00002A9F000000489A3AA09E\");\n", "        messageExt.setTopic(\"abc\");\n", "        messageExt.setBody(\"hello!q!\".getBytes());\n", "        try {\n", "            messageExt.setBornHost(new InetSocketAddress(InetAddress.getByName(\"127.0.0.1\"), 0));\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "        messageExt.setBornTimestamp(System.currentTimeMillis());\n", "        messageExt.setCommitLogOffset(123456);\n", "        messageExt.setPreparedTransactionOffset(0);\n", "        messageExt.setQueueId(1);\n", "        messageExt.setQueueOffset(123);\n", "        messageExt.setReconsumeTimes(0);\n", "        try {\n", "            messageExt.setStoreHost(new InetSocketAddress(InetAddress.getLocalHost(), 0));\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "\n", "        messageExt.putUserProperty(\"a\", \"123\");\n", "        messageExt.putUserProperty(\"b\", \"hello\");\n", "        messageExt.putUserProperty(\"c\", \"3.14\");\n", "\n", "        byte[] msgBytes = new byte[0];\n", "        try {\n", "            msgBytes = MessageDecoder.encode(messageExt, false);\n", "        } catch (Exception e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(msgBytes.length);\n", "        byteBuffer.put(msgBytes);\n", "\n", "        byteBuffer.clear();\n", "        MessageExt decodedMsg = MessageDecoder.decode(byteBuffer);\n", "\n", "        assertThat(decodedMsg).isNotNull();\n", "        assertThat(1).isEqualTo(decodedMsg.getQueueId());\n", "        assertThat(123456L).isEqualTo(decodedMsg.getCommitLogOffset());\n", "        assertThat(\"hello!q!\".getBytes()).isEqualTo(decodedMsg.getBody());\n", "\n", "        int msgIDLength = 4 + 4 + 8;\n", "        ByteBuffer byteBufferMsgId = ByteBuffer.allocate(msgIDLength);\n", "        String msgId = createMessageId(byteBufferMsgId, messageExt.getStoreHostBytes(), messageExt.getCommitLogOffset());\n", "        assertThat(msgId).isEqualTo(decodedMsg.getMsgId());\n", "\n", "        assertThat(\"abc\").isEqualTo(decodedMsg.getTopic());\n", "    }\n", "\n", "    @Test\n", "    public void testEncodeAndDecodeOnIPv6Host() {\n", "        MessageExt messageExt = new MessageExt();\n", "\n", "        messageExt.setMsgId(\"24084004018081003FAA1DDE2B3F898A00002A9F0000000000000CA0\");\n", "        messageExt.setBornHostV6Flag();\n", "        messageExt.setStoreHostAddressV6Flag();\n", "        messageExt.setTopic(\"abc\");\n", "        messageExt.setBody(\"hello!q!\".getBytes());\n", "        try {\n", "            messageExt.setBornHost(new InetSocketAddress(InetAddress.getByName(\"1050:0000:0000:0000:0005:0600:300c:326b\"), 0));\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "        messageExt.setBornTimestamp(System.currentTimeMillis());\n", "        messageExt.setCommitLogOffset(123456);\n", "        messageExt.setPreparedTransactionOffset(0);\n", "        messageExt.setQueueId(1);\n", "        messageExt.setQueueOffset(123);\n", "        messageExt.setReconsumeTimes(0);\n", "        try {\n", "            messageExt.setStoreHost(new InetSocketAddress(InetAddress.getByName(\"::1\"), 0));\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "\n", "        messageExt.putUserProperty(\"a\", \"123\");\n", "        messageExt.putUserProperty(\"b\", \"hello\");\n", "        messageExt.putUserProperty(\"c\", \"3.14\");\n", "\n", "        byte[] msgBytes = new byte[0];\n", "        try {\n", "            msgBytes = MessageDecoder.encode(messageExt, false);\n", "        } catch (Exception e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(msgBytes.length);\n", "        byteBuffer.put(msgBytes);\n", "\n", "        byteBuffer.clear();\n", "        MessageExt decodedMsg = MessageDecoder.decode(byteBuffer);\n", "\n", "        assertThat(decodedMsg).isNotNull();\n", "        assertThat(1).isEqualTo(decodedMsg.getQueueId());\n", "        assertThat(123456L).isEqualTo(decodedMsg.getCommitLogOffset());\n", "        assertThat(\"hello!q!\".getBytes()).isEqualTo(decodedMsg.getBody());\n", "        assertThat(48).isEqualTo(decodedMsg.getSysFlag());\n", "\n", "        int msgIDLength = 16 + 4 + 8;\n", "        ByteBuffer byteBufferMsgId = ByteBuffer.allocate(msgIDLength);\n", "        String msgId = createMessageId(byteBufferMsgId, messageExt.getStoreHostBytes(), messageExt.getCommitLogOffset());\n", "        assertThat(msgId).isEqualTo(decodedMsg.getMsgId());\n", "\n", "        assertThat(\"abc\").isEqualTo(decodedMsg.getTopic());\n", "    }\n", "\n", "    public void testNullValueProperty() throws Exception {\n", "        MessageExt msg = new MessageExt();\n", "        msg.setBody(\"x\".getBytes());\n", "        msg.setTopic(\"x\");\n", "        msg.setBornHost(new InetSocketAddress(\"127.0.0.1\", 9000));\n", "        msg.setStoreHost(new InetSocketAddress(\"127.0.0.1\", 9000));\n", "        String key = \"NullValueKey\";\n", "        msg.putProperty(key, null);\n", "        try {\n", "            byte[] encode = MessageDecoder.encode(msg, false);\n", "            MessageExt decode = MessageDecoder.decode(ByteBuffer.wrap(encode));\n", "            assertThat(decode.getProperty(key)).isNull();\n", "        } catch (Exception e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "    }\n", "\n", "}"], "method_lines_dic": {"MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)": [62, 71], "MessageDecoder::::createMessageId(java.net.SocketAddress,long)": [73, 82], "MessageDecoder::::decodeMessageId(java.lang.String)": [84, 101], "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)": [108, 142], "MessageDecoder::::decode(java.nio.ByteBuffer)": [144, 146], "MessageDecoder::::clientDecode(java.nio.ByteBuffer,boolean)": [148, 150], "MessageDecoder::::decode(java.nio.ByteBuffer,boolean)": [152, 154], "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)": [156, 264], "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean)": [266, 269], "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)": [271, 392], "MessageDecoder::::decodes(java.nio.ByteBuffer)": [394, 396], "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)": [398, 409], "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)": [411, 428], "MessageDecoder::::string2messageProperties(java.lang.String)": [430, 443], "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)": [445, 483], "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)": [485, 514], "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)": [516, 532], "MessageDecoder::::decodeMessages(java.nio.ByteBuffer)": [534, 542]}, "test_method_lines_dic": {"MessageDecoderTest::::testDecodeProperties()": [33, 80], "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()": [82, 131], "MessageDecoderTest::::testEncodeAndDecode()": [133, 188], "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()": [190, 248], "MessageDecoderTest::::testNullValueProperty()": [250, 266]}, "reverse_method_lines_dic": {"62": "MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)", "63": "MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)", "64": "MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)", "65": "MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)", "66": "MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)", "67": "MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)", "68": "MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)", "69": "MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)", "70": "MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)", "71": "MessageDecoder::::createMessageId(java.nio.ByteBuffer,java.nio.ByteBuffer,long)", "73": "MessageDecoder::::createMessageId(java.net.SocketAddress,long)", "74": "MessageDecoder::::createMessageId(java.net.SocketAddress,long)", "75": "MessageDecoder::::createMessageId(java.net.SocketAddress,long)", "76": "MessageDecoder::::createMessageId(java.net.SocketAddress,long)", "77": "MessageDecoder::::createMessageId(java.net.SocketAddress,long)", "78": "MessageDecoder::::createMessageId(java.net.SocketAddress,long)", "79": "MessageDecoder::::createMessageId(java.net.SocketAddress,long)", "80": "MessageDecoder::::createMessageId(java.net.SocketAddress,long)", "81": "MessageDecoder::::createMessageId(java.net.SocketAddress,long)", "82": "MessageDecoder::::createMessageId(java.net.SocketAddress,long)", "84": "MessageDecoder::::decodeMessageId(java.lang.String)", "85": "MessageDecoder::::decodeMessageId(java.lang.String)", "86": "MessageDecoder::::decodeMessageId(java.lang.String)", "87": "MessageDecoder::::decodeMessageId(java.lang.String)", "88": "MessageDecoder::::decodeMessageId(java.lang.String)", "89": "MessageDecoder::::decodeMessageId(java.lang.String)", "90": "MessageDecoder::::decodeMessageId(java.lang.String)", "91": "MessageDecoder::::decodeMessageId(java.lang.String)", "92": "MessageDecoder::::decodeMessageId(java.lang.String)", "93": "MessageDecoder::::decodeMessageId(java.lang.String)", "94": "MessageDecoder::::decodeMessageId(java.lang.String)", "95": "MessageDecoder::::decodeMessageId(java.lang.String)", "96": "MessageDecoder::::decodeMessageId(java.lang.String)", "97": "MessageDecoder::::decodeMessageId(java.lang.String)", "98": "MessageDecoder::::decodeMessageId(java.lang.String)", "99": "MessageDecoder::::decodeMessageId(java.lang.String)", "100": "MessageDecoder::::decodeMessageId(java.lang.String)", "101": "MessageDecoder::::decodeMessageId(java.lang.String)", "108": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "109": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "110": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "111": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "112": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "113": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "114": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "115": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "116": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "117": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "118": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "119": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "120": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "121": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "122": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "123": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "124": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "125": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "126": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "127": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "128": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "129": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "130": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "131": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "132": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "133": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "134": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "135": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "136": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "137": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "138": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "139": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "140": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "141": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "142": "MessageDecoder::::decodeProperties(java.nio.ByteBuffer)", "144": "MessageDecoder::::decode(java.nio.ByteBuffer)", "145": "MessageDecoder::::decode(java.nio.ByteBuffer)", "146": "MessageDecoder::::decode(java.nio.ByteBuffer)", "148": "MessageDecoder::::clientDecode(java.nio.ByteBuffer,boolean)", "149": "MessageDecoder::::clientDecode(java.nio.ByteBuffer,boolean)", "150": "MessageDecoder::::clientDecode(java.nio.ByteBuffer,boolean)", "152": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean)", "153": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean)", "154": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean)", "156": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "157": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "158": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "159": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "160": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "161": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "162": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "163": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "164": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "165": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "166": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "167": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "168": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "169": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "170": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "171": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "172": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "173": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "174": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "175": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "176": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "177": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "178": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "179": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "180": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "181": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "182": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "183": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "184": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "185": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "186": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "187": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "188": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "189": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "190": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "191": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "192": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "193": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "194": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "195": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "196": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "197": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "198": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "199": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "200": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "201": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "202": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "203": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "204": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "205": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "206": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "207": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "208": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "209": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "210": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "211": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "212": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "213": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "214": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "215": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "216": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "217": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "218": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "219": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "220": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "221": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "222": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "223": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "224": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "225": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "226": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "227": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "228": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "229": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "230": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "231": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "232": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "233": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "234": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "235": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "236": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "237": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "238": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "239": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "240": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "241": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "242": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "243": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "244": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "245": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "246": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "247": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "248": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "249": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "250": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "251": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "252": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "253": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "254": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "255": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "256": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "257": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "258": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "259": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "260": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "261": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "262": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "263": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "264": "MessageDecoder::::encode(org.apache.rocketmq.common.message.MessageExt,boolean)", "266": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean)", "267": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean)", "268": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean)", "269": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean)", "271": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "272": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "273": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "274": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "275": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "276": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "277": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "278": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "279": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "280": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "281": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "282": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "283": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "284": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "285": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "286": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "287": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "288": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "289": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "290": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "291": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "292": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "293": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "294": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "295": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "296": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "297": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "298": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "299": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "300": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "301": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "302": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "303": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "304": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "305": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "306": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "307": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "308": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "309": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "310": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "311": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "312": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "313": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "314": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "315": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "316": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "317": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "318": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "319": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "320": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "321": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "322": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "323": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "324": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "325": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "326": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "327": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "328": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "329": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "330": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "331": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "332": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "333": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "334": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "335": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "336": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "337": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "338": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "339": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "340": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "341": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "342": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "343": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "344": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "345": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "346": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "347": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "348": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "349": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "350": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "351": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "352": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "353": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "354": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "355": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "356": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "357": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "358": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "359": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "360": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "361": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "362": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "363": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "364": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "365": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "366": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "367": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "368": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "369": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "370": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "371": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "372": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "373": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "374": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "375": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "376": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "377": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "378": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "379": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "380": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "381": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "382": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "383": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "384": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "385": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "386": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "387": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "388": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "389": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "390": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "391": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "392": "MessageDecoder::::decode(java.nio.ByteBuffer,boolean,boolean,boolean)", "394": "MessageDecoder::::decodes(java.nio.ByteBuffer)", "395": "MessageDecoder::::decodes(java.nio.ByteBuffer)", "396": "MessageDecoder::::decodes(java.nio.ByteBuffer)", "398": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "399": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "400": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "401": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "402": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "403": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "404": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "405": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "406": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "407": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "408": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "409": "MessageDecoder::::decodes(java.nio.ByteBuffer,boolean)", "411": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "412": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "413": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "414": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "415": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "416": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "417": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "418": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "419": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "420": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "421": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "422": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "423": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "424": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "425": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "426": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "427": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "428": "MessageDecoder::::messageProperties2String(java.util.Map<java.lang.String, java.lang.String>)", "430": "MessageDecoder::::string2messageProperties(java.lang.String)", "431": "MessageDecoder::::string2messageProperties(java.lang.String)", "432": "MessageDecoder::::string2messageProperties(java.lang.String)", "433": "MessageDecoder::::string2messageProperties(java.lang.String)", "434": "MessageDecoder::::string2messageProperties(java.lang.String)", "435": "MessageDecoder::::string2messageProperties(java.lang.String)", "436": "MessageDecoder::::string2messageProperties(java.lang.String)", "437": "MessageDecoder::::string2messageProperties(java.lang.String)", "438": "MessageDecoder::::string2messageProperties(java.lang.String)", "439": "MessageDecoder::::string2messageProperties(java.lang.String)", "440": "MessageDecoder::::string2messageProperties(java.lang.String)", "441": "MessageDecoder::::string2messageProperties(java.lang.String)", "442": "MessageDecoder::::string2messageProperties(java.lang.String)", "443": "MessageDecoder::::string2messageProperties(java.lang.String)", "445": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "446": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "447": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "448": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "449": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "450": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "451": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "452": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "453": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "454": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "455": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "456": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "457": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "458": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "459": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "460": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "461": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "462": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "463": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "464": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "465": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "466": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "467": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "468": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "469": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "470": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "471": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "472": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "473": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "474": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "475": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "476": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "477": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "478": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "479": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "480": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "481": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "482": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "483": "MessageDecoder::::encodeMessage(org.apache.rocketmq.common.message.Message)", "485": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "486": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "487": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "488": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "489": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "490": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "491": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "492": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "493": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "494": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "495": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "496": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "497": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "498": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "499": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "500": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "501": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "502": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "503": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "504": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "505": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "506": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "507": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "508": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "509": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "510": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "511": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "512": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "513": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "514": "MessageDecoder::::decodeMessage(java.nio.ByteBuffer)", "516": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "517": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "518": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "519": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "520": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "521": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "522": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "523": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "524": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "525": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "526": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "527": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "528": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "529": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "530": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "531": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "532": "MessageDecoder::::encodeMessages(java.util.List<org.apache.rocketmq.common.message.Message>)", "534": "MessageDecoder::::decodeMessages(java.nio.ByteBuffer)", "535": "MessageDecoder::::decodeMessages(java.nio.ByteBuffer)", "536": "MessageDecoder::::decodeMessages(java.nio.ByteBuffer)", "537": "MessageDecoder::::decodeMessages(java.nio.ByteBuffer)", "538": "MessageDecoder::::decodeMessages(java.nio.ByteBuffer)", "539": "MessageDecoder::::decodeMessages(java.nio.ByteBuffer)", "540": "MessageDecoder::::decodeMessages(java.nio.ByteBuffer)", "541": "MessageDecoder::::decodeMessages(java.nio.ByteBuffer)", "542": "MessageDecoder::::decodeMessages(java.nio.ByteBuffer)"}, "test_reverse_method_lines_dic": {"33": "MessageDecoderTest::::testDecodeProperties()", "34": "MessageDecoderTest::::testDecodeProperties()", "35": "MessageDecoderTest::::testDecodeProperties()", "36": "MessageDecoderTest::::testDecodeProperties()", "37": "MessageDecoderTest::::testDecodeProperties()", "38": "MessageDecoderTest::::testDecodeProperties()", "39": "MessageDecoderTest::::testDecodeProperties()", "40": "MessageDecoderTest::::testDecodeProperties()", "41": "MessageDecoderTest::::testDecodeProperties()", "42": "MessageDecoderTest::::testDecodeProperties()", "43": "MessageDecoderTest::::testDecodeProperties()", "44": "MessageDecoderTest::::testDecodeProperties()", "45": "MessageDecoderTest::::testDecodeProperties()", "46": "MessageDecoderTest::::testDecodeProperties()", "47": "MessageDecoderTest::::testDecodeProperties()", "48": "MessageDecoderTest::::testDecodeProperties()", "49": "MessageDecoderTest::::testDecodeProperties()", "50": "MessageDecoderTest::::testDecodeProperties()", "51": "MessageDecoderTest::::testDecodeProperties()", "52": "MessageDecoderTest::::testDecodeProperties()", "53": "MessageDecoderTest::::testDecodeProperties()", "54": "MessageDecoderTest::::testDecodeProperties()", "55": "MessageDecoderTest::::testDecodeProperties()", "56": "MessageDecoderTest::::testDecodeProperties()", "57": "MessageDecoderTest::::testDecodeProperties()", "58": "MessageDecoderTest::::testDecodeProperties()", "59": "MessageDecoderTest::::testDecodeProperties()", "60": "MessageDecoderTest::::testDecodeProperties()", "61": "MessageDecoderTest::::testDecodeProperties()", "62": "MessageDecoderTest::::testDecodeProperties()", "63": "MessageDecoderTest::::testDecodeProperties()", "64": "MessageDecoderTest::::testDecodeProperties()", "65": "MessageDecoderTest::::testDecodeProperties()", "66": "MessageDecoderTest::::testDecodeProperties()", "67": "MessageDecoderTest::::testDecodeProperties()", "68": "MessageDecoderTest::::testDecodeProperties()", "69": "MessageDecoderTest::::testDecodeProperties()", "70": "MessageDecoderTest::::testDecodeProperties()", "71": "MessageDecoderTest::::testDecodeProperties()", "72": "MessageDecoderTest::::testDecodeProperties()", "73": "MessageDecoderTest::::testDecodeProperties()", "74": "MessageDecoderTest::::testDecodeProperties()", "75": "MessageDecoderTest::::testDecodeProperties()", "76": "MessageDecoderTest::::testDecodeProperties()", "77": "MessageDecoderTest::::testDecodeProperties()", "78": "MessageDecoderTest::::testDecodeProperties()", "79": "MessageDecoderTest::::testDecodeProperties()", "80": "MessageDecoderTest::::testDecodeProperties()", "82": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "83": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "84": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "85": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "86": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "87": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "88": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "89": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "90": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "91": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "92": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "93": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "94": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "95": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "96": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "97": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "98": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "99": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "100": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "101": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "102": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "103": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "104": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "105": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "106": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "107": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "108": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "109": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "110": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "111": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "112": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "113": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "114": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "115": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "116": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "117": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "118": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "119": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "120": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "121": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "122": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "123": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "124": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "125": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "126": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "127": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "128": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "129": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "130": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "131": "MessageDecoderTest::::testDecodePropertiesOnIPv6Host()", "133": "MessageDecoderTest::::testEncodeAndDecode()", "134": "MessageDecoderTest::::testEncodeAndDecode()", "135": "MessageDecoderTest::::testEncodeAndDecode()", "136": "MessageDecoderTest::::testEncodeAndDecode()", "137": "MessageDecoderTest::::testEncodeAndDecode()", "138": "MessageDecoderTest::::testEncodeAndDecode()", "139": "MessageDecoderTest::::testEncodeAndDecode()", "140": "MessageDecoderTest::::testEncodeAndDecode()", "141": "MessageDecoderTest::::testEncodeAndDecode()", "142": "MessageDecoderTest::::testEncodeAndDecode()", "143": "MessageDecoderTest::::testEncodeAndDecode()", "144": "MessageDecoderTest::::testEncodeAndDecode()", "145": "MessageDecoderTest::::testEncodeAndDecode()", "146": "MessageDecoderTest::::testEncodeAndDecode()", "147": "MessageDecoderTest::::testEncodeAndDecode()", "148": "MessageDecoderTest::::testEncodeAndDecode()", "149": "MessageDecoderTest::::testEncodeAndDecode()", "150": "MessageDecoderTest::::testEncodeAndDecode()", "151": "MessageDecoderTest::::testEncodeAndDecode()", "152": "MessageDecoderTest::::testEncodeAndDecode()", "153": "MessageDecoderTest::::testEncodeAndDecode()", "154": "MessageDecoderTest::::testEncodeAndDecode()", "155": "MessageDecoderTest::::testEncodeAndDecode()", "156": "MessageDecoderTest::::testEncodeAndDecode()", "157": "MessageDecoderTest::::testEncodeAndDecode()", "158": "MessageDecoderTest::::testEncodeAndDecode()", "159": "MessageDecoderTest::::testEncodeAndDecode()", "160": "MessageDecoderTest::::testEncodeAndDecode()", "161": "MessageDecoderTest::::testEncodeAndDecode()", "162": "MessageDecoderTest::::testEncodeAndDecode()", "163": "MessageDecoderTest::::testEncodeAndDecode()", "164": "MessageDecoderTest::::testEncodeAndDecode()", "165": "MessageDecoderTest::::testEncodeAndDecode()", "166": "MessageDecoderTest::::testEncodeAndDecode()", "167": "MessageDecoderTest::::testEncodeAndDecode()", "168": "MessageDecoderTest::::testEncodeAndDecode()", "169": "MessageDecoderTest::::testEncodeAndDecode()", "170": "MessageDecoderTest::::testEncodeAndDecode()", "171": "MessageDecoderTest::::testEncodeAndDecode()", "172": "MessageDecoderTest::::testEncodeAndDecode()", "173": "MessageDecoderTest::::testEncodeAndDecode()", "174": "MessageDecoderTest::::testEncodeAndDecode()", "175": "MessageDecoderTest::::testEncodeAndDecode()", "176": "MessageDecoderTest::::testEncodeAndDecode()", "177": "MessageDecoderTest::::testEncodeAndDecode()", "178": "MessageDecoderTest::::testEncodeAndDecode()", "179": "MessageDecoderTest::::testEncodeAndDecode()", "180": "MessageDecoderTest::::testEncodeAndDecode()", "181": "MessageDecoderTest::::testEncodeAndDecode()", "182": "MessageDecoderTest::::testEncodeAndDecode()", "183": "MessageDecoderTest::::testEncodeAndDecode()", "184": "MessageDecoderTest::::testEncodeAndDecode()", "185": "MessageDecoderTest::::testEncodeAndDecode()", "186": "MessageDecoderTest::::testEncodeAndDecode()", "187": "MessageDecoderTest::::testEncodeAndDecode()", "188": "MessageDecoderTest::::testEncodeAndDecode()", "190": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "191": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "192": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "193": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "194": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "195": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "196": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "197": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "198": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "199": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "200": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "201": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "202": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "203": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "204": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "205": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "206": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "207": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "208": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "209": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "210": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "211": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "212": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "213": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "214": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "215": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "216": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "217": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "218": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "219": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "220": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "221": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "222": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "223": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "224": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "225": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "226": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "227": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "228": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "229": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "230": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "231": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "232": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "233": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "234": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "235": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "236": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "237": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "238": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "239": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "240": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "241": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "242": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "243": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "244": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "245": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "246": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "247": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "248": "MessageDecoderTest::::testEncodeAndDecodeOnIPv6Host()", "250": "MessageDecoderTest::::testNullValueProperty()", "251": "MessageDecoderTest::::testNullValueProperty()", "252": "MessageDecoderTest::::testNullValueProperty()", "253": "MessageDecoderTest::::testNullValueProperty()", "254": "MessageDecoderTest::::testNullValueProperty()", "255": "MessageDecoderTest::::testNullValueProperty()", "256": "MessageDecoderTest::::testNullValueProperty()", "257": "MessageDecoderTest::::testNullValueProperty()", "258": "MessageDecoderTest::::testNullValueProperty()", "259": "MessageDecoderTest::::testNullValueProperty()", "260": "MessageDecoderTest::::testNullValueProperty()", "261": "MessageDecoderTest::::testNullValueProperty()", "262": "MessageDecoderTest::::testNullValueProperty()", "263": "MessageDecoderTest::::testNullValueProperty()", "264": "MessageDecoderTest::::testNullValueProperty()", "265": "MessageDecoderTest::::testNullValueProperty()", "266": "MessageDecoderTest::::testNullValueProperty()"}, "tests": [{"test_lines": [33, 80], "covered_lines": [36, 109, 110, 111, 112, 126, 128, 130, 132, 134, 135, 136, 137, 138, 139, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 173, 176, 194, 197, 200, 203, 204, 207, 208, 211, 212, 215, 216, 219, 220, 223, 226, 227, 230, 231, 232, 235, 236, 239, 240, 241, 244, 245, 248, 249, 252, 253, 256, 257, 260, 261, 263, 412, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 427, 431, 432, 433, 434, 435, 436, 437, 442]}, {"test_lines": [82, 131], "covered_lines": [36, 109, 110, 111, 112, 126, 128, 130, 132, 134, 135, 136, 137, 138, 139, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 173, 176, 194, 197, 200, 203, 204, 207, 208, 211, 212, 215, 216, 219, 220, 223, 226, 227, 230, 231, 232, 235, 236, 239, 240, 241, 244, 245, 248, 249, 252, 253, 256, 257, 260, 261, 263, 412, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 427, 431, 432, 433, 434, 435, 436, 437, 442]}, {"test_lines": [133, 188], "covered_lines": [36, 63, 64, 65, 67, 68, 70, 145, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 173, 176, 194, 197, 200, 203, 204, 207, 208, 211, 212, 215, 216, 219, 220, 223, 226, 227, 230, 231, 232, 235, 236, 239, 240, 241, 244, 245, 248, 249, 252, 253, 256, 257, 260, 261, 263, 276, 279, 283, 284, 287, 290, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 332, 333, 336, 337, 340, 341, 344, 345, 346, 347, 348, 351, 355, 356, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 382, 386, 412, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 427, 431, 432, 433, 434, 435, 436, 437, 442]}, {"test_lines": [190, 248], "covered_lines": [36, 63, 64, 65, 67, 68, 70, 145, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 173, 176, 194, 197, 200, 203, 204, 207, 208, 211, 212, 215, 216, 219, 220, 223, 226, 227, 230, 231, 232, 235, 236, 239, 240, 241, 244, 245, 248, 249, 252, 253, 256, 257, 260, 261, 263, 276, 279, 283, 284, 287, 290, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 332, 333, 336, 337, 340, 341, 344, 345, 346, 347, 348, 351, 355, 356, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 382, 386, 412, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 427, 431, 432, 433, 434, 435, 436, 437, 442]}]}}