{"/bernard/dataset_construction/prep/repos/RocketMQC/store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.store;\n", "\n", "import java.io.File;\n", "import java.io.IOException;\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.Iterator;\n", "import java.util.List;\n", "import java.util.ListIterator;\n", "import java.util.concurrent.CopyOnWriteArrayList;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "\n", "public class MappedFileQueue {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n", "    private static final InternalLogger LOG_ERROR = InternalLoggerFactory.getLogger(LoggerName.STORE_ERROR_LOGGER_NAME);\n", "\n", "    private static final int DELETE_FILES_BATCH_MAX = 10;\n", "\n", "    //commitlog\u5bf9\u5e94\u5b58\u50a8\u8def\u5f84\n", "    private final String storePath;\n", "\n", "    //\u56fa\u5b9a\u6bcf\u4e2amappedFile\u7684\u5927\u5c0f\n", "    private final int mappedFileSize;\n", "\n", "    //\u8bfb\u591a\u5199\u5c11\u7528CopyOnWriteArrayList\n", "    private final CopyOnWriteArrayList<MappedFile> mappedFiles = new CopyOnWriteArrayList<MappedFile>();\n", "\n", "    private final AllocateMappedFileService allocateMappedFileService;\n", "\n", "    private long flushedWhere = 0;\n", "    private long committedWhere = 0;\n", "\n", "    private volatile long storeTimestamp = 0;\n", "\n", "    public MappedFileQueue(final String storePath, int mappedFileSize,\n", "        AllocateMappedFileService allocateMappedFileService) {\n", "        this.storePath = storePath;\n", "        this.mappedFileSize = mappedFileSize;\n", "        this.allocateMappedFileService = allocateMappedFileService;\n", "    }\n", "\n", "    //\u904d\u5386\u68c0\u67e5mappedFile\u7684\u6587\u4ef6\u5927\u5c0f\n", "    public void checkSelf() {\n", "\n", "        if (!this.mappedFiles.isEmpty()) {\n", "            Iterator<MappedFile> iterator = mappedFiles.iterator();\n", "            MappedFile pre = null;\n", "            while (iterator.hasNext()) {\n", "                MappedFile cur = iterator.next();\n", "\n", "                if (pre != null) {\n", "                    if (cur.getFileFromOffset() - pre.getFileFromOffset() != this.mappedFileSize) {\n", "                        LOG_ERROR.error(\"[BUG]The mappedFile queue's data is damaged, the adjacent mappedFile's offset don't match. pre file {}, cur file {}\",\n", "                            pre.getFileName(), cur.getFileName());\n", "                    }\n", "                }\n", "                pre = cur;\n", "            }\n", "        }\n", "    }\n", "\n", "    public MappedFile getMappedFileByTime(final long timestamp) {\n", "        Object[] mfs = this.copyMappedFiles(0);\n", "\n", "        if (null == mfs)\n", "            return null;\n", "\n", "        for (int i = 0; i < mfs.length; i++) {\n", "            MappedFile mappedFile = (MappedFile) mfs[i];\n", "            if (mappedFile.getLastModifiedTimestamp() >= timestamp) {\n", "                return mappedFile;\n", "            }\n", "        }\n", "\n", "        return (MappedFile) mfs[mfs.length - 1];\n", "    }\n", "\n", "    private Object[] copyMappedFiles(final int reservedMappedFiles) {\n", "        Object[] mfs;\n", "\n", "        if (this.mappedFiles.size() <= reservedMappedFiles) {\n", "            return null;\n", "        }\n", "\n", "        mfs = this.mappedFiles.toArray();\n", "        return mfs;\n", "    }\n", "\n", "    public void truncateDirtyFiles(long offset) {\n", "        List<MappedFile> willRemoveFiles = new ArrayList<MappedFile>();\n", "\n", "        for (MappedFile file : this.mappedFiles) {\n", "            long fileTailOffset = file.getFileFromOffset() + this.mappedFileSize;\n", "            if (fileTailOffset > offset) {\n", "                if (offset >= file.getFileFromOffset()) {\n", "                    file.setWrotePosition((int) (offset % this.mappedFileSize));\n", "                    file.setCommittedPosition((int) (offset % this.mappedFileSize));\n", "                    file.setFlushedPosition((int) (offset % this.mappedFileSize));\n", "                } else {\n", "                    file.destroy(1000);\n", "                    willRemoveFiles.add(file);\n", "                }\n", "            }\n", "        }\n", "\n", "        this.deleteExpiredFile(willRemoveFiles);\n", "    }\n", "\n", "    //\u5148\u79fb\u9664mappedFiles\u5217\u8868\u4e2d\u5305\u542b\u7684\u6570\u636e\uff0c\u518d\u79fb\u9664\n", "    void deleteExpiredFile(List<MappedFile> files) {\n", "\n", "        if (!files.isEmpty()) {\n", "\n", "            Iterator<MappedFile> iterator = files.iterator();\n", "            while (iterator.hasNext()) {\n", "                MappedFile cur = iterator.next();\n", "\n", "                if (!this.mappedFiles.contains(cur)) {\n", "                    iterator.remove();\n", "                    log.info(\"This mappedFile {} is not contained by mappedFiles, so skip it.\", cur.getFileName());\n", "                }\n", "            }\n", "\n", "            try {\n", "                if (!this.mappedFiles.removeAll(files)) {\n", "                    log.error(\"deleteExpiredFile remove failed.\");\n", "                }\n", "            } catch (Exception e) {\n", "                log.error(\"deleteExpiredFile has exception.\", e);\n", "            }\n", "        }\n", "    }\n", "\n", "    //\u5c06\u5b58\u50a8\u8def\u5f84\u4e0b\u7684mappedFile\u52a0\u5165\u5230mappedFiles\u91cc\u9762\u53bb\n", "    public boolean load() {\n", "        File dir = new File(this.storePath);\n", "        File[] files = dir.listFiles();\n", "        if (files != null) {\n", "            // ascending order\n", "            Arrays.sort(files);\n", "            for (File file : files) {\n", "\n", "                if (file.length() != this.mappedFileSize) {\n", "                    log.warn(file + \"\\t\" + file.length()\n", "                        + \" length not matched message store config value, please check it manually\");\n", "                    return false;\n", "                }\n", "\n", "                try {\n", "                    MappedFile mappedFile = new MappedFile(file.getPath(), mappedFileSize);\n", "\n", "                    mappedFile.setWrotePosition(this.mappedFileSize);\n", "                    mappedFile.setFlushedPosition(this.mappedFileSize);\n", "                    mappedFile.setCommittedPosition(this.mappedFileSize);\n", "                    this.mappedFiles.add(mappedFile);\n", "                    log.info(\"load \" + file.getPath() + \" OK\");\n", "                } catch (IOException e) {\n", "                    log.error(\"load file \" + file + \" error\", e);\n", "                    return false;\n", "                }\n", "            }\n", "        }\n", "\n", "        return true;\n", "    }\n", "\n", "    public long howMuchFallBehind() {\n", "        if (this.mappedFiles.isEmpty())\n", "            return 0;\n", "\n", "        long committed = this.flushedWhere;\n", "        if (committed != 0) {\n", "            MappedFile mappedFile = this.getLastMappedFile(0, false);\n", "            if (mappedFile != null) {\n", "                return (mappedFile.getFileFromOffset() + mappedFile.getWrotePosition()) - committed;\n", "            }\n", "        }\n", "\n", "        return 0;\n", "    }\n", "\n", "    //\u83b7\u53d6\u5f53\u524dlist\u6700\u540e\u4e00\u4e2amappedFile\u6216\u521b\u5efa\u6709\u6548\u7684mappedFile\n", "    public MappedFile getLastMappedFile(final long startOffset, boolean needCreate) {\n", "        long createOffset = -1;\n", "        MappedFile mappedFileLast = getLastMappedFile();\n", "\n", "        if (mappedFileLast == null) {\n", "            createOffset = startOffset - (startOffset % this.mappedFileSize);\n", "        }\n", "\n", "        if (mappedFileLast != null && mappedFileLast.isFull()) {\n", "            createOffset = mappedFileLast.getFileFromOffset() + this.mappedFileSize;\n", "        }\n", "\n", "        if (createOffset != -1 && needCreate) {\n", "            String nextFilePath = this.storePath + File.separator + UtilAll.offset2FileName(createOffset);\n", "            String nextNextFilePath = this.storePath + File.separator\n", "                + UtilAll.offset2FileName(createOffset + this.mappedFileSize);\n", "            MappedFile mappedFile = null;\n", "\n", "            if (this.allocateMappedFileService != null) {\n", "                mappedFile = this.allocateMappedFileService.putRequestAndReturnMappedFile(nextFilePath,\n", "                    nextNextFilePath, this.mappedFileSize);\n", "            } else {\n", "                try {\n", "                    mappedFile = new MappedFile(nextFilePath, this.mappedFileSize);\n", "                } catch (IOException e) {\n", "                    log.error(\"create mappedFile exception\", e);\n", "                }\n", "            }\n", "\n", "            if (mappedFile != null) {\n", "                if (this.mappedFiles.isEmpty()) {\n", "                    mappedFile.setFirstCreateInQueue(true);\n", "                }\n", "                this.mappedFiles.add(mappedFile);\n", "            }\n", "\n", "            return mappedFile;\n", "        }\n", "\n", "        return mappedFileLast;\n", "    }\n", "\n", "    public MappedFile getLastMappedFile(final long startOffset) {\n", "        return getLastMappedFile(startOffset, true);\n", "    }\n", "\n", "    public MappedFile getLastMappedFile() {\n", "        MappedFile mappedFileLast = null;\n", "\n", "        while (!this.mappedFiles.isEmpty()) {\n", "            try {\n", "                mappedFileLast = this.mappedFiles.get(this.mappedFiles.size() - 1);\n", "                break;\n", "            } catch (IndexOutOfBoundsException e) {\n", "                //continue;\n", "            } catch (Exception e) {\n", "                log.error(\"getLastMappedFile has exception.\", e);\n", "                break;\n", "            }\n", "        }\n", "\n", "        return mappedFileLast;\n", "    }\n", "\n", "    public boolean resetOffset(long offset) {\n", "        MappedFile mappedFileLast = getLastMappedFile();\n", "\n", "        if (mappedFileLast != null) {\n", "            long lastOffset = mappedFileLast.getFileFromOffset() +\n", "                mappedFileLast.getWrotePosition();\n", "            long diff = lastOffset - offset;\n", "\n", "            final int maxDiff = this.mappedFileSize * 2;\n", "            if (diff > maxDiff)\n", "                return false;\n", "        }\n", "\n", "        ListIterator<MappedFile> iterator = this.mappedFiles.listIterator();\n", "\n", "        while (iterator.hasPrevious()) {\n", "            mappedFileLast = iterator.previous();\n", "            if (offset >= mappedFileLast.getFileFromOffset()) {\n", "                int where = (int) (offset % mappedFileLast.getFileSize());\n", "                mappedFileLast.setFlushedPosition(where);\n", "                mappedFileLast.setWrotePosition(where);\n", "                mappedFileLast.setCommittedPosition(where);\n", "                break;\n", "            } else {\n", "                iterator.remove();\n", "            }\n", "        }\n", "        return true;\n", "    }\n", "\n", "    public long getMinOffset() {\n", "\n", "        if (!this.mappedFiles.isEmpty()) {\n", "            try {\n", "                return this.mappedFiles.get(0).getFileFromOffset();\n", "            } catch (IndexOutOfBoundsException e) {\n", "                //continue;\n", "            } catch (Exception e) {\n", "                log.error(\"getMinOffset has exception.\", e);\n", "            }\n", "        }\n", "        return -1;\n", "    }\n", "\n", "    public long getMaxOffset() {\n", "        MappedFile mappedFile = getLastMappedFile();\n", "        if (mappedFile != null) {\n", "            return mappedFile.getFileFromOffset() + mappedFile.getReadPosition();\n", "        }\n", "        return 0;\n", "    }\n", "\n", "    public long getMaxWrotePosition() {\n", "        MappedFile mappedFile = getLastMappedFile();\n", "        if (mappedFile != null) {\n", "            return mappedFile.getFileFromOffset() + mappedFile.getWrotePosition();\n", "        }\n", "        return 0;\n", "    }\n", "\n", "    public long remainHowManyDataToCommit() {\n", "        return getMaxWrotePosition() - committedWhere;\n", "    }\n", "\n", "    public long remainHowManyDataToFlush() {\n", "        return getMaxOffset() - flushedWhere;\n", "    }\n", "\n", "    public void deleteLastMappedFile() {\n", "        MappedFile lastMappedFile = getLastMappedFile();\n", "        if (lastMappedFile != null) {\n", "            lastMappedFile.destroy(1000);\n", "            this.mappedFiles.remove(lastMappedFile);\n", "            log.info(\"on recover, destroy a logic mapped file \" + lastMappedFile.getFileName());\n", "\n", "        }\n", "    }\n", "\n", "    public int deleteExpiredFileByTime(final long expiredTime,\n", "        final int deleteFilesInterval,\n", "        final long intervalForcibly,\n", "        final boolean cleanImmediately) {\n", "        Object[] mfs = this.copyMappedFiles(0);\n", "\n", "        if (null == mfs)\n", "            return 0;\n", "\n", "        int mfsLength = mfs.length - 1;\n", "        int deleteCount = 0;\n", "        List<MappedFile> files = new ArrayList<MappedFile>();\n", "        if (null != mfs) {\n", "            for (int i = 0; i < mfsLength; i++) {\n", "                MappedFile mappedFile = (MappedFile) mfs[i];\n", "                long liveMaxTimestamp = mappedFile.getLastModifiedTimestamp() + expiredTime;\n", "                if (System.currentTimeMillis() >= liveMaxTimestamp || cleanImmediately) {\n", "                    if (mappedFile.destroy(intervalForcibly)) {\n", "                        files.add(mappedFile);\n", "                        deleteCount++;\n", "\n", "                        if (files.size() >= DELETE_FILES_BATCH_MAX) {\n", "                            break;\n", "                        }\n", "\n", "                        if (deleteFilesInterval > 0 && (i + 1) < mfsLength) {\n", "                            try {\n", "                                Thread.sleep(deleteFilesInterval);\n", "                            } catch (InterruptedException e) {\n", "                            }\n", "                        }\n", "                    } else {\n", "                        break;\n", "                    }\n", "                } else {\n", "                    //avoid deleting files in the middle\n", "                    break;\n", "                }\n", "            }\n", "        }\n", "\n", "        deleteExpiredFile(files);\n", "\n", "        return deleteCount;\n", "    }\n", "\n", "    public int deleteExpiredFileByOffset(long offset, int unitSize) {\n", "        Object[] mfs = this.copyMappedFiles(0);\n", "\n", "        List<MappedFile> files = new ArrayList<MappedFile>();\n", "        int deleteCount = 0;\n", "        if (null != mfs) {\n", "\n", "            int mfsLength = mfs.length - 1;\n", "\n", "            for (int i = 0; i < mfsLength; i++) {\n", "                boolean destroy;\n", "                MappedFile mappedFile = (MappedFile) mfs[i];\n", "                SelectMappedBufferResult result = mappedFile.selectMappedBuffer(this.mappedFileSize - unitSize);\n", "                if (result != null) {\n", "                    long maxOffsetInLogicQueue = result.getByteBuffer().getLong();\n", "                    result.release();\n", "                    destroy = maxOffsetInLogicQueue < offset;\n", "                    if (destroy) {\n", "                        log.info(\"physic min offset \" + offset + \", logics in current mappedFile max offset \"\n", "                            + maxOffsetInLogicQueue + \", delete it\");\n", "                    }\n", "                } else if (!mappedFile.isAvailable()) { // Handle hanged file.\n", "                    log.warn(\"Found a hanged consume queue file, attempting to delete it.\");\n", "                    destroy = true;\n", "                } else {\n", "                    log.warn(\"this being not executed forever.\");\n", "                    break;\n", "                }\n", "\n", "                if (destroy && mappedFile.destroy(1000 * 60)) {\n", "                    files.add(mappedFile);\n", "                    deleteCount++;\n", "                } else {\n", "                    break;\n", "                }\n", "            }\n", "        }\n", "\n", "        deleteExpiredFile(files);\n", "\n", "        return deleteCount;\n", "    }\n", "\n", "    public boolean flush(final int flushLeastPages) {\n", "        boolean result = true;\n", "        MappedFile mappedFile = this.findMappedFileByOffset(this.flushedWhere, this.flushedWhere == 0);\n", "        if (mappedFile != null) {\n", "            long tmpTimeStamp = mappedFile.getStoreTimestamp();\n", "            int offset = mappedFile.flush(flushLeastPages);\n", "            long where = mappedFile.getFileFromOffset() + offset;\n", "            result = where == this.flushedWhere;\n", "            this.flushedWhere = where;\n", "            if (0 == flushLeastPages) {\n", "                this.storeTimestamp = tmpTimeStamp;\n", "            }\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    public boolean commit(final int commitLeastPages) {\n", "        boolean result = true;\n", "        MappedFile mappedFile = this.findMappedFileByOffset(this.committedWhere, this.committedWhere == 0);\n", "        if (mappedFile != null) {\n", "            int offset = mappedFile.commit(commitLeastPages);\n", "            long where = mappedFile.getFileFromOffset() + offset;\n", "            result = where == this.committedWhere;\n", "            this.committedWhere = where;\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    /**\n", "     * Finds a mapped file by offset.\n", "     *\n", "     * @param offset Offset.\n", "     * @param returnFirstOnNotFound If the mapped file is not found, then return the first one.\n", "     * @return Mapped file or null (when not found and returnFirstOnNotFound is <code>false</code>).\n", "     */\n", "    public MappedFile findMappedFileByOffset(final long offset, final boolean returnFirstOnNotFound) {\n", "        try {\n", "            MappedFile firstMappedFile = this.getFirstMappedFile();\n", "            MappedFile lastMappedFile = this.getLastMappedFile();\n", "            if (firstMappedFile != null && lastMappedFile != null) {\n", "                if (offset < firstMappedFile.getFileFromOffset() || offset >= lastMappedFile.getFileFromOffset() + this.mappedFileSize) {\n", "                    LOG_ERROR.warn(\"Offset not matched. Request offset: {}, firstOffset: {}, lastOffset: {}, mappedFileSize: {}, mappedFiles count: {}\",\n", "                        offset,\n", "                        firstMappedFile.getFileFromOffset(),\n", "                        lastMappedFile.getFileFromOffset() + this.mappedFileSize,\n", "                        this.mappedFileSize,\n", "                        this.mappedFiles.size());\n", "                } else {\n", "                    int index = (int) ((offset / this.mappedFileSize) - (firstMappedFile.getFileFromOffset() / this.mappedFileSize));\n", "                    MappedFile targetFile = null;\n", "                    try {\n", "                        targetFile = this.mappedFiles.get(index);\n", "                    } catch (Exception ignored) {\n", "                    }\n", "\n", "                    if (targetFile != null && offset >= targetFile.getFileFromOffset()\n", "                        && offset < targetFile.getFileFromOffset() + this.mappedFileSize) {\n", "                        return targetFile;\n", "                    }\n", "\n", "                    for (MappedFile tmpMappedFile : this.mappedFiles) {\n", "                        if (offset >= tmpMappedFile.getFileFromOffset()\n", "                            && offset < tmpMappedFile.getFileFromOffset() + this.mappedFileSize) {\n", "                            return tmpMappedFile;\n", "                        }\n", "                    }\n", "                }\n", "\n", "                if (returnFirstOnNotFound) {\n", "                    return firstMappedFile;\n", "                }\n", "            }\n", "        } catch (Exception e) {\n", "            log.error(\"findMappedFileByOffset Exception\", e);\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    public MappedFile getFirstMappedFile() {\n", "        MappedFile mappedFileFirst = null;\n", "\n", "        if (!this.mappedFiles.isEmpty()) {\n", "            try {\n", "                mappedFileFirst = this.mappedFiles.get(0);\n", "            } catch (IndexOutOfBoundsException e) {\n", "                //ignore\n", "            } catch (Exception e) {\n", "                log.error(\"getFirstMappedFile has exception.\", e);\n", "            }\n", "        }\n", "\n", "        return mappedFileFirst;\n", "    }\n", "\n", "    public MappedFile findMappedFileByOffset(final long offset) {\n", "        return findMappedFileByOffset(offset, false);\n", "    }\n", "\n", "    public long getMappedMemorySize() {\n", "        long size = 0;\n", "\n", "        Object[] mfs = this.copyMappedFiles(0);\n", "        if (mfs != null) {\n", "            for (Object mf : mfs) {\n", "                if (((ReferenceResource) mf).isAvailable()) {\n", "                    size += this.mappedFileSize;\n", "                }\n", "            }\n", "        }\n", "\n", "        return size;\n", "    }\n", "\n", "    public boolean retryDeleteFirstFile(final long intervalForcibly) {\n", "        MappedFile mappedFile = this.getFirstMappedFile();\n", "        if (mappedFile != null) {\n", "            if (!mappedFile.isAvailable()) {\n", "                log.warn(\"the mappedFile was destroyed once, but still alive, \" + mappedFile.getFileName());\n", "                boolean result = mappedFile.destroy(intervalForcibly);\n", "                if (result) {\n", "                    log.info(\"the mappedFile re delete OK, \" + mappedFile.getFileName());\n", "                    List<MappedFile> tmpFiles = new ArrayList<MappedFile>();\n", "                    tmpFiles.add(mappedFile);\n", "                    this.deleteExpiredFile(tmpFiles);\n", "                } else {\n", "                    log.warn(\"the mappedFile re delete failed, \" + mappedFile.getFileName());\n", "                }\n", "\n", "                return result;\n", "            }\n", "        }\n", "\n", "        return false;\n", "    }\n", "\n", "    public void shutdown(final long intervalForcibly) {\n", "        for (MappedFile mf : this.mappedFiles) {\n", "            mf.shutdown(intervalForcibly);\n", "        }\n", "    }\n", "\n", "    public void destroy() {\n", "        for (MappedFile mf : this.mappedFiles) {\n", "            mf.destroy(1000 * 3);\n", "        }\n", "        this.mappedFiles.clear();\n", "        this.flushedWhere = 0;\n", "\n", "        // delete parent directory\n", "        File file = new File(storePath);\n", "        if (file.isDirectory()) {\n", "            file.delete();\n", "        }\n", "    }\n", "\n", "    public long getFlushedWhere() {\n", "        return flushedWhere;\n", "    }\n", "\n", "    public void setFlushedWhere(long flushedWhere) {\n", "        this.flushedWhere = flushedWhere;\n", "    }\n", "\n", "    public long getStoreTimestamp() {\n", "        return storeTimestamp;\n", "    }\n", "\n", "    public List<MappedFile> getMappedFiles() {\n", "        return mappedFiles;\n", "    }\n", "\n", "    public int getMappedFileSize() {\n", "        return mappedFileSize;\n", "    }\n", "\n", "    public long getCommittedWhere() {\n", "        return committedWhere;\n", "    }\n", "\n", "    public void setCommittedWhere(final long committedWhere) {\n", "        this.committedWhere = committedWhere;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.store;\n", "\n", "import java.io.File;\n", "import java.nio.ByteBuffer;\n", "import java.util.Arrays;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.junit.After;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class MappedFileQueueTest {\n", "    @Test\n", "    public void testGetLastMappedFile() {\n", "        final String fixedMsg = \"0123456789abcdef\";\n", "\n", "        MappedFileQueue mappedFileQueue =\n", "            new MappedFileQueue(\"target/unit_test_store/a/\", 1024, null);\n", "\n", "        for (int i = 0; i < 1024; i++) {\n", "            MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);\n", "            assertThat(mappedFile).isNotNull();\n", "            assertThat(mappedFile.appendMessage(fixedMsg.getBytes())).isTrue();\n", "        }\n", "\n", "        mappedFileQueue.shutdown(1000);\n", "        mappedFileQueue.destroy();\n", "    }\n", "\n", "    @Test\n", "    public void testFindMappedFileByOffset() {\n", "        // four-byte string.\n", "        final String fixedMsg = \"abcd\";\n", "\n", "        MappedFileQueue mappedFileQueue =\n", "            new MappedFileQueue(\"target/unit_test_store/b/\", 1024, null);\n", "\n", "        for (int i = 0; i < 1024; i++) {\n", "            MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);\n", "            assertThat(mappedFile).isNotNull();\n", "            assertThat(mappedFile.appendMessage(fixedMsg.getBytes())).isTrue();\n", "        }\n", "\n", "        assertThat(mappedFileQueue.getMappedMemorySize()).isEqualTo(fixedMsg.getBytes().length * 1024);\n", "\n", "        MappedFile mappedFile = mappedFileQueue.findMappedFileByOffset(0);\n", "        assertThat(mappedFile).isNotNull();\n", "        assertThat(mappedFile.getFileFromOffset()).isEqualTo(0);\n", "\n", "        mappedFile = mappedFileQueue.findMappedFileByOffset(100);\n", "        assertThat(mappedFile).isNotNull();\n", "        assertThat(mappedFile.getFileFromOffset()).isEqualTo(0);\n", "\n", "        mappedFile = mappedFileQueue.findMappedFileByOffset(1024);\n", "        assertThat(mappedFile).isNotNull();\n", "        assertThat(mappedFile.getFileFromOffset()).isEqualTo(1024);\n", "\n", "        mappedFile = mappedFileQueue.findMappedFileByOffset(1024 + 100);\n", "        assertThat(mappedFile).isNotNull();\n", "        assertThat(mappedFile.getFileFromOffset()).isEqualTo(1024);\n", "\n", "        mappedFile = mappedFileQueue.findMappedFileByOffset(1024 * 2);\n", "        assertThat(mappedFile).isNotNull();\n", "        assertThat(mappedFile.getFileFromOffset()).isEqualTo(1024 * 2);\n", "\n", "        mappedFile = mappedFileQueue.findMappedFileByOffset(1024 * 2 + 100);\n", "        assertThat(mappedFile).isNotNull();\n", "        assertThat(mappedFile.getFileFromOffset()).isEqualTo(1024 * 2);\n", "\n", "        // over mapped memory size.\n", "        mappedFile = mappedFileQueue.findMappedFileByOffset(1024 * 4);\n", "        assertThat(mappedFile).isNull();\n", "\n", "        mappedFile = mappedFileQueue.findMappedFileByOffset(1024 * 4 + 100);\n", "        assertThat(mappedFile).isNull();\n", "\n", "        mappedFileQueue.shutdown(1000);\n", "        mappedFileQueue.destroy();\n", "    }\n", "\n", "    @Test\n", "    public void testFindMappedFileByOffset_StartOffsetIsNonZero() {\n", "        MappedFileQueue mappedFileQueue =\n", "            new MappedFileQueue(\"target/unit_test_store/b/\", 1024, null);\n", "\n", "        //Start from a non-zero offset\n", "        MappedFile mappedFile = mappedFileQueue.getLastMappedFile(1024);\n", "        assertThat(mappedFile).isNotNull();\n", "\n", "        assertThat(mappedFileQueue.findMappedFileByOffset(1025)).isEqualTo(mappedFile);\n", "\n", "        assertThat(mappedFileQueue.findMappedFileByOffset(0)).isNull();\n", "        assertThat(mappedFileQueue.findMappedFileByOffset(123, false)).isNull();\n", "        assertThat(mappedFileQueue.findMappedFileByOffset(123, true)).isEqualTo(mappedFile);\n", "\n", "        assertThat(mappedFileQueue.findMappedFileByOffset(0, false)).isNull();\n", "        assertThat(mappedFileQueue.findMappedFileByOffset(0, true)).isEqualTo(mappedFile);\n", "\n", "        mappedFileQueue.shutdown(1000);\n", "        mappedFileQueue.destroy();\n", "    }\n", "\n", "    @Test\n", "    public void testAppendMessage() {\n", "        final String fixedMsg = \"0123456789abcdef\";\n", "\n", "        MappedFileQueue mappedFileQueue =\n", "            new MappedFileQueue(\"target/unit_test_store/c/\", 1024, null);\n", "\n", "        for (int i = 0; i < 1024; i++) {\n", "            MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);\n", "            assertThat(mappedFile).isNotNull();\n", "            assertThat(mappedFile.appendMessage(fixedMsg.getBytes())).isTrue();\n", "        }\n", "\n", "        assertThat(mappedFileQueue.flush(0)).isFalse();\n", "        assertThat(mappedFileQueue.getFlushedWhere()).isEqualTo(1024);\n", "\n", "        assertThat(mappedFileQueue.flush(0)).isFalse();\n", "        assertThat(mappedFileQueue.getFlushedWhere()).isEqualTo(1024 * 2);\n", "\n", "        assertThat(mappedFileQueue.flush(0)).isFalse();\n", "        assertThat(mappedFileQueue.getFlushedWhere()).isEqualTo(1024 * 3);\n", "\n", "        assertThat(mappedFileQueue.flush(0)).isFalse();\n", "        assertThat(mappedFileQueue.getFlushedWhere()).isEqualTo(1024 * 4);\n", "\n", "        assertThat(mappedFileQueue.flush(0)).isFalse();\n", "        assertThat(mappedFileQueue.getFlushedWhere()).isEqualTo(1024 * 5);\n", "\n", "        assertThat(mappedFileQueue.flush(0)).isFalse();\n", "        assertThat(mappedFileQueue.getFlushedWhere()).isEqualTo(1024 * 6);\n", "\n", "        mappedFileQueue.shutdown(1000);\n", "        mappedFileQueue.destroy();\n", "    }\n", "\n", "    @Test\n", "    public void testGetMappedMemorySize() {\n", "        final String fixedMsg = \"abcd\";\n", "\n", "        MappedFileQueue mappedFileQueue =\n", "            new MappedFileQueue(\"target/unit_test_store/d/\", 1024, null);\n", "\n", "        for (int i = 0; i < 1024; i++) {\n", "            MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);\n", "            assertThat(mappedFile).isNotNull();\n", "            assertThat(mappedFile.appendMessage(fixedMsg.getBytes())).isTrue();\n", "        }\n", "\n", "        assertThat(mappedFileQueue.getMappedMemorySize()).isEqualTo(fixedMsg.length() * 1024);\n", "        mappedFileQueue.shutdown(1000);\n", "        mappedFileQueue.destroy();\n", "    }\n", "\n", "    @Test\n", "    public void testDeleteExpiredFileByOffset() {\n", "        MappedFileQueue mappedFileQueue =\n", "            new MappedFileQueue(\"target/unit_test_store/e\", 5120, null);\n", "\n", "        for (int i = 0; i < 2048; i++) {\n", "            MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);\n", "            assertThat(mappedFile).isNotNull();\n", "            ByteBuffer byteBuffer = ByteBuffer.allocate(ConsumeQueue.CQ_STORE_UNIT_SIZE);\n", "            byteBuffer.putLong(i);\n", "            byte[] padding = new byte[12];\n", "            Arrays.fill(padding, (byte) '0');\n", "            byteBuffer.put(padding);\n", "            byteBuffer.flip();\n", "\n", "            assertThat(mappedFile.appendMessage(byteBuffer.array())).isTrue();\n", "        }\n", "\n", "        MappedFile first = mappedFileQueue.getFirstMappedFile();\n", "        first.hold();\n", "\n", "        assertThat(mappedFileQueue.deleteExpiredFileByOffset(20480, ConsumeQueue.CQ_STORE_UNIT_SIZE)).isEqualTo(0);\n", "        first.release();\n", "\n", "        assertThat(mappedFileQueue.deleteExpiredFileByOffset(20480, ConsumeQueue.CQ_STORE_UNIT_SIZE)).isGreaterThan(0);\n", "        first = mappedFileQueue.getFirstMappedFile();\n", "        assertThat(first.getFileFromOffset()).isGreaterThan(0);\n", "\n", "        mappedFileQueue.shutdown(1000);\n", "        mappedFileQueue.destroy();\n", "    }\n", "\n", "    @Test\n", "    public void testDeleteExpiredFileByTime() throws Exception {\n", "        MappedFileQueue mappedFileQueue =\n", "            new MappedFileQueue(\"target/unit_test_store/f/\", 1024, null);\n", "\n", "        for (int i = 0; i < 100; i++) {\n", "            MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);\n", "            assertThat(mappedFile).isNotNull();\n", "            byte[] bytes = new byte[512];\n", "            assertThat(mappedFile.appendMessage(bytes)).isTrue();\n", "        }\n", "\n", "        assertThat(mappedFileQueue.getMappedFiles().size()).isEqualTo(50);\n", "        long expiredTime =  100 * 1000;\n", "        for (int i = 0; i < mappedFileQueue.getMappedFiles().size(); i++) {\n", "            MappedFile mappedFile = mappedFileQueue.getMappedFiles().get(i);\n", "           if (i < 5) {\n", "               mappedFile.getFile().setLastModified(System.currentTimeMillis() - expiredTime * 2);\n", "           }\n", "           if (i > 20) {\n", "               mappedFile.getFile().setLastModified(System.currentTimeMillis() - expiredTime * 2);\n", "           }\n", "        }\n", "        mappedFileQueue.deleteExpiredFileByTime(expiredTime, 0, 0, false);\n", "        assertThat(mappedFileQueue.getMappedFiles().size()).isEqualTo(45);\n", "    }\n", "\n", "    @Test\n", "    public void testFindMappedFile_ByIteration() {\n", "        MappedFileQueue mappedFileQueue =\n", "            new MappedFileQueue(\"target/unit_test_store/g/\", 1024, null);\n", "        for (int i =0 ; i < 3; i++) {\n", "            MappedFile mappedFile = mappedFileQueue.getLastMappedFile(1024 * i);\n", "            mappedFile.wrotePosition.set(1024);\n", "        }\n", "\n", "        assertThat(mappedFileQueue.findMappedFileByOffset(1028).getFileFromOffset()).isEqualTo(1024);\n", "\n", "        // Switch two MappedFiles and verify findMappedFileByOffset method\n", "        MappedFile tmpFile = mappedFileQueue.getMappedFiles().get(1);\n", "        mappedFileQueue.getMappedFiles().set(1, mappedFileQueue.getMappedFiles().get(2));\n", "        mappedFileQueue.getMappedFiles().set(2, tmpFile);\n", "        assertThat(mappedFileQueue.findMappedFileByOffset(1028).getFileFromOffset()).isEqualTo(1024);\n", "    }\n", "\n", "    @After\n", "    public void destory() {\n", "        File file = new File(\"target/unit_test_store\");\n", "        UtilAll.deleteFile(file);\n", "    }\n", "}\n"], "method_lines_dic": {"MappedFileQueue::::checkSelf()": [62, 79], "MappedFileQueue::::getMappedFileByTime(long)": [81, 95], "MappedFileQueue::::copyMappedFiles(int)": [97, 106], "MappedFileQueue::::truncateDirtyFiles(long)": [108, 126], "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)": [129, 151], "MappedFileQueue::::load()": [154, 184], "MappedFileQueue::::howMuchFallBehind()": [186, 199], "MappedFileQueue::::getLastMappedFile(long,boolean)": [202, 242], "MappedFileQueue::::getLastMappedFile(long)": [244, 246], "MappedFileQueue::::getLastMappedFile()": [248, 264], "MappedFileQueue::::resetOffset(long)": [266, 294], "MappedFileQueue::::getMinOffset()": [296, 308], "MappedFileQueue::::getMaxOffset()": [310, 316], "MappedFileQueue::::getMaxWrotePosition()": [318, 324], "MappedFileQueue::::remainHowManyDataToCommit()": [326, 328], "MappedFileQueue::::remainHowManyDataToFlush()": [330, 332], "MappedFileQueue::::deleteLastMappedFile()": [334, 342], "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)": [344, 388], "MappedFileQueue::::deleteExpiredFileByOffset(long,int)": [390, 431], "MappedFileQueue::::flush(int)": [433, 448], "MappedFileQueue::::commit(int)": [450, 461], "MappedFileQueue::::findMappedFileByOffset(long,boolean)": [470, 512], "MappedFileQueue::::getFirstMappedFile()": [514, 528], "MappedFileQueue::::findMappedFileByOffset(long)": [530, 532], "MappedFileQueue::::getMappedMemorySize()": [534, 547], "MappedFileQueue::::retryDeleteFirstFile(long)": [549, 569], "MappedFileQueue::::shutdown(long)": [571, 575], "MappedFileQueue::::destroy()": [577, 589], "MappedFileQueue::::getFlushedWhere()": [591, 593], "MappedFileQueue::::setFlushedWhere(long)": [595, 597], "MappedFileQueue::::getStoreTimestamp()": [599, 601], "MappedFileQueue::::getMappedFiles()": [603, 605], "MappedFileQueue::::getMappedFileSize()": [607, 609], "MappedFileQueue::::getCommittedWhere()": [611, 613], "MappedFileQueue::::setCommittedWhere(long)": [615, 617]}, "test_method_lines_dic": {"MappedFileQueueTest::::testGetLastMappedFile()": [30, 45], "MappedFileQueueTest::::testFindMappedFileByOffset()": [47, 96], "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()": [98, 118], "MappedFileQueueTest::::testAppendMessage()": [120, 153], "MappedFileQueueTest::::testGetMappedMemorySize()": [155, 171], "MappedFileQueueTest::::testDeleteExpiredFileByOffset()": [173, 203], "MappedFileQueueTest::::testDeleteExpiredFileByTime()": [205, 230], "MappedFileQueueTest::::testFindMappedFile_ByIteration()": [232, 248], "MappedFileQueueTest::::destory()": [250, 254]}, "reverse_method_lines_dic": {"62": "MappedFileQueue::::checkSelf()", "63": "MappedFileQueue::::checkSelf()", "64": "MappedFileQueue::::checkSelf()", "65": "MappedFileQueue::::checkSelf()", "66": "MappedFileQueue::::checkSelf()", "67": "MappedFileQueue::::checkSelf()", "68": "MappedFileQueue::::checkSelf()", "69": "MappedFileQueue::::checkSelf()", "70": "MappedFileQueue::::checkSelf()", "71": "MappedFileQueue::::checkSelf()", "72": "MappedFileQueue::::checkSelf()", "73": "MappedFileQueue::::checkSelf()", "74": "MappedFileQueue::::checkSelf()", "75": "MappedFileQueue::::checkSelf()", "76": "MappedFileQueue::::checkSelf()", "77": "MappedFileQueue::::checkSelf()", "78": "MappedFileQueue::::checkSelf()", "79": "MappedFileQueue::::checkSelf()", "81": "MappedFileQueue::::getMappedFileByTime(long)", "82": "MappedFileQueue::::getMappedFileByTime(long)", "83": "MappedFileQueue::::getMappedFileByTime(long)", "84": "MappedFileQueue::::getMappedFileByTime(long)", "85": "MappedFileQueue::::getMappedFileByTime(long)", "86": "MappedFileQueue::::getMappedFileByTime(long)", "87": "MappedFileQueue::::getMappedFileByTime(long)", "88": "MappedFileQueue::::getMappedFileByTime(long)", "89": "MappedFileQueue::::getMappedFileByTime(long)", "90": "MappedFileQueue::::getMappedFileByTime(long)", "91": "MappedFileQueue::::getMappedFileByTime(long)", "92": "MappedFileQueue::::getMappedFileByTime(long)", "93": "MappedFileQueue::::getMappedFileByTime(long)", "94": "MappedFileQueue::::getMappedFileByTime(long)", "95": "MappedFileQueue::::getMappedFileByTime(long)", "97": "MappedFileQueue::::copyMappedFiles(int)", "98": "MappedFileQueue::::copyMappedFiles(int)", "99": "MappedFileQueue::::copyMappedFiles(int)", "100": "MappedFileQueue::::copyMappedFiles(int)", "101": "MappedFileQueue::::copyMappedFiles(int)", "102": "MappedFileQueue::::copyMappedFiles(int)", "103": "MappedFileQueue::::copyMappedFiles(int)", "104": "MappedFileQueue::::copyMappedFiles(int)", "105": "MappedFileQueue::::copyMappedFiles(int)", "106": "MappedFileQueue::::copyMappedFiles(int)", "108": "MappedFileQueue::::truncateDirtyFiles(long)", "109": "MappedFileQueue::::truncateDirtyFiles(long)", "110": "MappedFileQueue::::truncateDirtyFiles(long)", "111": "MappedFileQueue::::truncateDirtyFiles(long)", "112": "MappedFileQueue::::truncateDirtyFiles(long)", "113": "MappedFileQueue::::truncateDirtyFiles(long)", "114": "MappedFileQueue::::truncateDirtyFiles(long)", "115": "MappedFileQueue::::truncateDirtyFiles(long)", "116": "MappedFileQueue::::truncateDirtyFiles(long)", "117": "MappedFileQueue::::truncateDirtyFiles(long)", "118": "MappedFileQueue::::truncateDirtyFiles(long)", "119": "MappedFileQueue::::truncateDirtyFiles(long)", "120": "MappedFileQueue::::truncateDirtyFiles(long)", "121": "MappedFileQueue::::truncateDirtyFiles(long)", "122": "MappedFileQueue::::truncateDirtyFiles(long)", "123": "MappedFileQueue::::truncateDirtyFiles(long)", "124": "MappedFileQueue::::truncateDirtyFiles(long)", "125": "MappedFileQueue::::truncateDirtyFiles(long)", "126": "MappedFileQueue::::truncateDirtyFiles(long)", "129": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "130": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "131": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "132": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "133": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "134": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "135": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "136": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "137": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "138": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "139": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "140": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "141": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "142": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "143": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "144": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "145": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "146": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "147": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "148": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "149": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "150": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "151": "MappedFileQueue::::deleteExpiredFile(java.util.List<org.apache.rocketmq.store.MappedFile>)", "154": "MappedFileQueue::::load()", "155": "MappedFileQueue::::load()", "156": "MappedFileQueue::::load()", "157": "MappedFileQueue::::load()", "158": "MappedFileQueue::::load()", "159": "MappedFileQueue::::load()", "160": "MappedFileQueue::::load()", "161": "MappedFileQueue::::load()", "162": "MappedFileQueue::::load()", "163": "MappedFileQueue::::load()", "164": "MappedFileQueue::::load()", "165": "MappedFileQueue::::load()", "166": "MappedFileQueue::::load()", "167": "MappedFileQueue::::load()", "168": "MappedFileQueue::::load()", "169": "MappedFileQueue::::load()", "170": "MappedFileQueue::::load()", "171": "MappedFileQueue::::load()", "172": "MappedFileQueue::::load()", "173": "MappedFileQueue::::load()", "174": "MappedFileQueue::::load()", "175": "MappedFileQueue::::load()", "176": "MappedFileQueue::::load()", "177": "MappedFileQueue::::load()", "178": "MappedFileQueue::::load()", "179": "MappedFileQueue::::load()", "180": "MappedFileQueue::::load()", "181": "MappedFileQueue::::load()", "182": "MappedFileQueue::::load()", "183": "MappedFileQueue::::load()", "184": "MappedFileQueue::::load()", "186": "MappedFileQueue::::howMuchFallBehind()", "187": "MappedFileQueue::::howMuchFallBehind()", "188": "MappedFileQueue::::howMuchFallBehind()", "189": "MappedFileQueue::::howMuchFallBehind()", "190": "MappedFileQueue::::howMuchFallBehind()", "191": "MappedFileQueue::::howMuchFallBehind()", "192": "MappedFileQueue::::howMuchFallBehind()", "193": "MappedFileQueue::::howMuchFallBehind()", "194": "MappedFileQueue::::howMuchFallBehind()", "195": "MappedFileQueue::::howMuchFallBehind()", "196": "MappedFileQueue::::howMuchFallBehind()", "197": "MappedFileQueue::::howMuchFallBehind()", "198": "MappedFileQueue::::howMuchFallBehind()", "199": "MappedFileQueue::::howMuchFallBehind()", "202": "MappedFileQueue::::getLastMappedFile(long,boolean)", "203": "MappedFileQueue::::getLastMappedFile(long,boolean)", "204": "MappedFileQueue::::getLastMappedFile(long,boolean)", "205": "MappedFileQueue::::getLastMappedFile(long,boolean)", "206": "MappedFileQueue::::getLastMappedFile(long,boolean)", "207": "MappedFileQueue::::getLastMappedFile(long,boolean)", "208": "MappedFileQueue::::getLastMappedFile(long,boolean)", "209": "MappedFileQueue::::getLastMappedFile(long,boolean)", "210": "MappedFileQueue::::getLastMappedFile(long,boolean)", "211": "MappedFileQueue::::getLastMappedFile(long,boolean)", "212": "MappedFileQueue::::getLastMappedFile(long,boolean)", "213": "MappedFileQueue::::getLastMappedFile(long,boolean)", "214": "MappedFileQueue::::getLastMappedFile(long,boolean)", "215": "MappedFileQueue::::getLastMappedFile(long,boolean)", "216": "MappedFileQueue::::getLastMappedFile(long,boolean)", "217": "MappedFileQueue::::getLastMappedFile(long,boolean)", "218": "MappedFileQueue::::getLastMappedFile(long,boolean)", "219": "MappedFileQueue::::getLastMappedFile(long,boolean)", "220": "MappedFileQueue::::getLastMappedFile(long,boolean)", "221": "MappedFileQueue::::getLastMappedFile(long,boolean)", "222": "MappedFileQueue::::getLastMappedFile(long,boolean)", "223": "MappedFileQueue::::getLastMappedFile(long,boolean)", "224": "MappedFileQueue::::getLastMappedFile(long,boolean)", "225": "MappedFileQueue::::getLastMappedFile(long,boolean)", "226": "MappedFileQueue::::getLastMappedFile(long,boolean)", "227": "MappedFileQueue::::getLastMappedFile(long,boolean)", "228": "MappedFileQueue::::getLastMappedFile(long,boolean)", "229": "MappedFileQueue::::getLastMappedFile(long,boolean)", "230": "MappedFileQueue::::getLastMappedFile(long,boolean)", "231": "MappedFileQueue::::getLastMappedFile(long,boolean)", "232": "MappedFileQueue::::getLastMappedFile(long,boolean)", "233": "MappedFileQueue::::getLastMappedFile(long,boolean)", "234": "MappedFileQueue::::getLastMappedFile(long,boolean)", "235": "MappedFileQueue::::getLastMappedFile(long,boolean)", "236": "MappedFileQueue::::getLastMappedFile(long,boolean)", "237": "MappedFileQueue::::getLastMappedFile(long,boolean)", "238": "MappedFileQueue::::getLastMappedFile(long,boolean)", "239": "MappedFileQueue::::getLastMappedFile(long,boolean)", "240": "MappedFileQueue::::getLastMappedFile(long,boolean)", "241": "MappedFileQueue::::getLastMappedFile(long,boolean)", "242": "MappedFileQueue::::getLastMappedFile(long,boolean)", "244": "MappedFileQueue::::getLastMappedFile(long)", "245": "MappedFileQueue::::getLastMappedFile(long)", "246": "MappedFileQueue::::getLastMappedFile(long)", "248": "MappedFileQueue::::getLastMappedFile()", "249": "MappedFileQueue::::getLastMappedFile()", "250": "MappedFileQueue::::getLastMappedFile()", "251": "MappedFileQueue::::getLastMappedFile()", "252": "MappedFileQueue::::getLastMappedFile()", "253": "MappedFileQueue::::getLastMappedFile()", "254": "MappedFileQueue::::getLastMappedFile()", "255": "MappedFileQueue::::getLastMappedFile()", "256": "MappedFileQueue::::getLastMappedFile()", "257": "MappedFileQueue::::getLastMappedFile()", "258": "MappedFileQueue::::getLastMappedFile()", "259": "MappedFileQueue::::getLastMappedFile()", "260": "MappedFileQueue::::getLastMappedFile()", "261": "MappedFileQueue::::getLastMappedFile()", "262": "MappedFileQueue::::getLastMappedFile()", "263": "MappedFileQueue::::getLastMappedFile()", "264": "MappedFileQueue::::getLastMappedFile()", "266": "MappedFileQueue::::resetOffset(long)", "267": "MappedFileQueue::::resetOffset(long)", "268": "MappedFileQueue::::resetOffset(long)", "269": "MappedFileQueue::::resetOffset(long)", "270": "MappedFileQueue::::resetOffset(long)", "271": "MappedFileQueue::::resetOffset(long)", "272": "MappedFileQueue::::resetOffset(long)", "273": "MappedFileQueue::::resetOffset(long)", "274": "MappedFileQueue::::resetOffset(long)", "275": "MappedFileQueue::::resetOffset(long)", "276": "MappedFileQueue::::resetOffset(long)", "277": "MappedFileQueue::::resetOffset(long)", "278": "MappedFileQueue::::resetOffset(long)", "279": "MappedFileQueue::::resetOffset(long)", "280": "MappedFileQueue::::resetOffset(long)", "281": "MappedFileQueue::::resetOffset(long)", "282": "MappedFileQueue::::resetOffset(long)", "283": "MappedFileQueue::::resetOffset(long)", "284": "MappedFileQueue::::resetOffset(long)", "285": "MappedFileQueue::::resetOffset(long)", "286": "MappedFileQueue::::resetOffset(long)", "287": "MappedFileQueue::::resetOffset(long)", "288": "MappedFileQueue::::resetOffset(long)", "289": "MappedFileQueue::::resetOffset(long)", "290": "MappedFileQueue::::resetOffset(long)", "291": "MappedFileQueue::::resetOffset(long)", "292": "MappedFileQueue::::resetOffset(long)", "293": "MappedFileQueue::::resetOffset(long)", "294": "MappedFileQueue::::resetOffset(long)", "296": "MappedFileQueue::::getMinOffset()", "297": "MappedFileQueue::::getMinOffset()", "298": "MappedFileQueue::::getMinOffset()", "299": "MappedFileQueue::::getMinOffset()", "300": "MappedFileQueue::::getMinOffset()", "301": "MappedFileQueue::::getMinOffset()", "302": "MappedFileQueue::::getMinOffset()", "303": "MappedFileQueue::::getMinOffset()", "304": "MappedFileQueue::::getMinOffset()", "305": "MappedFileQueue::::getMinOffset()", "306": "MappedFileQueue::::getMinOffset()", "307": "MappedFileQueue::::getMinOffset()", "308": "MappedFileQueue::::getMinOffset()", "310": "MappedFileQueue::::getMaxOffset()", "311": "MappedFileQueue::::getMaxOffset()", "312": "MappedFileQueue::::getMaxOffset()", "313": "MappedFileQueue::::getMaxOffset()", "314": "MappedFileQueue::::getMaxOffset()", "315": "MappedFileQueue::::getMaxOffset()", "316": "MappedFileQueue::::getMaxOffset()", "318": "MappedFileQueue::::getMaxWrotePosition()", "319": "MappedFileQueue::::getMaxWrotePosition()", "320": "MappedFileQueue::::getMaxWrotePosition()", "321": "MappedFileQueue::::getMaxWrotePosition()", "322": "MappedFileQueue::::getMaxWrotePosition()", "323": "MappedFileQueue::::getMaxWrotePosition()", "324": "MappedFileQueue::::getMaxWrotePosition()", "326": "MappedFileQueue::::remainHowManyDataToCommit()", "327": "MappedFileQueue::::remainHowManyDataToCommit()", "328": "MappedFileQueue::::remainHowManyDataToCommit()", "330": "MappedFileQueue::::remainHowManyDataToFlush()", "331": "MappedFileQueue::::remainHowManyDataToFlush()", "332": "MappedFileQueue::::remainHowManyDataToFlush()", "334": "MappedFileQueue::::deleteLastMappedFile()", "335": "MappedFileQueue::::deleteLastMappedFile()", "336": "MappedFileQueue::::deleteLastMappedFile()", "337": "MappedFileQueue::::deleteLastMappedFile()", "338": "MappedFileQueue::::deleteLastMappedFile()", "339": "MappedFileQueue::::deleteLastMappedFile()", "340": "MappedFileQueue::::deleteLastMappedFile()", "341": "MappedFileQueue::::deleteLastMappedFile()", "342": "MappedFileQueue::::deleteLastMappedFile()", "344": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "345": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "346": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "347": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "348": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "349": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "350": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "351": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "352": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "353": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "354": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "355": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "356": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "357": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "358": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "359": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "360": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "361": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "362": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "363": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "364": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "365": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "366": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "367": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "368": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "369": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "370": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "371": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "372": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "373": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "374": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "375": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "376": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "377": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "378": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "379": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "380": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "381": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "382": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "383": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "384": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "385": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "386": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "387": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "388": "MappedFileQueue::::deleteExpiredFileByTime(long,int,long,boolean)", "390": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "391": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "392": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "393": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "394": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "395": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "396": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "397": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "398": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "399": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "400": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "401": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "402": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "403": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "404": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "405": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "406": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "407": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "408": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "409": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "410": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "411": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "412": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "413": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "414": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "415": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "416": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "417": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "418": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "419": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "420": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "421": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "422": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "423": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "424": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "425": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "426": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "427": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "428": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "429": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "430": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "431": "MappedFileQueue::::deleteExpiredFileByOffset(long,int)", "433": "MappedFileQueue::::flush(int)", "434": "MappedFileQueue::::flush(int)", "435": "MappedFileQueue::::flush(int)", "436": "MappedFileQueue::::flush(int)", "437": "MappedFileQueue::::flush(int)", "438": "MappedFileQueue::::flush(int)", "439": "MappedFileQueue::::flush(int)", "440": "MappedFileQueue::::flush(int)", "441": "MappedFileQueue::::flush(int)", "442": "MappedFileQueue::::flush(int)", "443": "MappedFileQueue::::flush(int)", "444": "MappedFileQueue::::flush(int)", "445": "MappedFileQueue::::flush(int)", "446": "MappedFileQueue::::flush(int)", "447": "MappedFileQueue::::flush(int)", "448": "MappedFileQueue::::flush(int)", "450": "MappedFileQueue::::commit(int)", "451": "MappedFileQueue::::commit(int)", "452": "MappedFileQueue::::commit(int)", "453": "MappedFileQueue::::commit(int)", "454": "MappedFileQueue::::commit(int)", "455": "MappedFileQueue::::commit(int)", "456": "MappedFileQueue::::commit(int)", "457": "MappedFileQueue::::commit(int)", "458": "MappedFileQueue::::commit(int)", "459": "MappedFileQueue::::commit(int)", "460": "MappedFileQueue::::commit(int)", "461": "MappedFileQueue::::commit(int)", "470": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "471": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "472": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "473": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "474": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "475": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "476": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "477": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "478": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "479": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "480": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "481": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "482": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "483": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "484": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "485": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "486": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "487": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "488": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "489": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "490": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "491": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "492": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "493": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "494": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "495": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "496": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "497": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "498": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "499": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "500": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "501": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "502": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "503": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "504": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "505": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "506": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "507": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "508": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "509": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "510": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "511": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "512": "MappedFileQueue::::findMappedFileByOffset(long,boolean)", "514": "MappedFileQueue::::getFirstMappedFile()", "515": "MappedFileQueue::::getFirstMappedFile()", "516": "MappedFileQueue::::getFirstMappedFile()", "517": "MappedFileQueue::::getFirstMappedFile()", "518": "MappedFileQueue::::getFirstMappedFile()", "519": "MappedFileQueue::::getFirstMappedFile()", "520": "MappedFileQueue::::getFirstMappedFile()", "521": "MappedFileQueue::::getFirstMappedFile()", "522": "MappedFileQueue::::getFirstMappedFile()", "523": "MappedFileQueue::::getFirstMappedFile()", "524": "MappedFileQueue::::getFirstMappedFile()", "525": "MappedFileQueue::::getFirstMappedFile()", "526": "MappedFileQueue::::getFirstMappedFile()", "527": "MappedFileQueue::::getFirstMappedFile()", "528": "MappedFileQueue::::getFirstMappedFile()", "530": "MappedFileQueue::::findMappedFileByOffset(long)", "531": "MappedFileQueue::::findMappedFileByOffset(long)", "532": "MappedFileQueue::::findMappedFileByOffset(long)", "534": "MappedFileQueue::::getMappedMemorySize()", "535": "MappedFileQueue::::getMappedMemorySize()", "536": "MappedFileQueue::::getMappedMemorySize()", "537": "MappedFileQueue::::getMappedMemorySize()", "538": "MappedFileQueue::::getMappedMemorySize()", "539": "MappedFileQueue::::getMappedMemorySize()", "540": "MappedFileQueue::::getMappedMemorySize()", "541": "MappedFileQueue::::getMappedMemorySize()", "542": "MappedFileQueue::::getMappedMemorySize()", "543": "MappedFileQueue::::getMappedMemorySize()", "544": "MappedFileQueue::::getMappedMemorySize()", "545": "MappedFileQueue::::getMappedMemorySize()", "546": "MappedFileQueue::::getMappedMemorySize()", "547": "MappedFileQueue::::getMappedMemorySize()", "549": "MappedFileQueue::::retryDeleteFirstFile(long)", "550": "MappedFileQueue::::retryDeleteFirstFile(long)", "551": "MappedFileQueue::::retryDeleteFirstFile(long)", "552": "MappedFileQueue::::retryDeleteFirstFile(long)", "553": "MappedFileQueue::::retryDeleteFirstFile(long)", "554": "MappedFileQueue::::retryDeleteFirstFile(long)", "555": "MappedFileQueue::::retryDeleteFirstFile(long)", "556": "MappedFileQueue::::retryDeleteFirstFile(long)", "557": "MappedFileQueue::::retryDeleteFirstFile(long)", "558": "MappedFileQueue::::retryDeleteFirstFile(long)", "559": "MappedFileQueue::::retryDeleteFirstFile(long)", "560": "MappedFileQueue::::retryDeleteFirstFile(long)", "561": "MappedFileQueue::::retryDeleteFirstFile(long)", "562": "MappedFileQueue::::retryDeleteFirstFile(long)", "563": "MappedFileQueue::::retryDeleteFirstFile(long)", "564": "MappedFileQueue::::retryDeleteFirstFile(long)", "565": "MappedFileQueue::::retryDeleteFirstFile(long)", "566": "MappedFileQueue::::retryDeleteFirstFile(long)", "567": "MappedFileQueue::::retryDeleteFirstFile(long)", "568": "MappedFileQueue::::retryDeleteFirstFile(long)", "569": "MappedFileQueue::::retryDeleteFirstFile(long)", "571": "MappedFileQueue::::shutdown(long)", "572": "MappedFileQueue::::shutdown(long)", "573": "MappedFileQueue::::shutdown(long)", "574": "MappedFileQueue::::shutdown(long)", "575": "MappedFileQueue::::shutdown(long)", "577": "MappedFileQueue::::destroy()", "578": "MappedFileQueue::::destroy()", "579": "MappedFileQueue::::destroy()", "580": "MappedFileQueue::::destroy()", "581": "MappedFileQueue::::destroy()", "582": "MappedFileQueue::::destroy()", "583": "MappedFileQueue::::destroy()", "584": "MappedFileQueue::::destroy()", "585": "MappedFileQueue::::destroy()", "586": "MappedFileQueue::::destroy()", "587": "MappedFileQueue::::destroy()", "588": "MappedFileQueue::::destroy()", "589": "MappedFileQueue::::destroy()", "591": "MappedFileQueue::::getFlushedWhere()", "592": "MappedFileQueue::::getFlushedWhere()", "593": "MappedFileQueue::::getFlushedWhere()", "595": "MappedFileQueue::::setFlushedWhere(long)", "596": "MappedFileQueue::::setFlushedWhere(long)", "597": "MappedFileQueue::::setFlushedWhere(long)", "599": "MappedFileQueue::::getStoreTimestamp()", "600": "MappedFileQueue::::getStoreTimestamp()", "601": "MappedFileQueue::::getStoreTimestamp()", "603": "MappedFileQueue::::getMappedFiles()", "604": "MappedFileQueue::::getMappedFiles()", "605": "MappedFileQueue::::getMappedFiles()", "607": "MappedFileQueue::::getMappedFileSize()", "608": "MappedFileQueue::::getMappedFileSize()", "609": "MappedFileQueue::::getMappedFileSize()", "611": "MappedFileQueue::::getCommittedWhere()", "612": "MappedFileQueue::::getCommittedWhere()", "613": "MappedFileQueue::::getCommittedWhere()", "615": "MappedFileQueue::::setCommittedWhere(long)", "616": "MappedFileQueue::::setCommittedWhere(long)", "617": "MappedFileQueue::::setCommittedWhere(long)"}, "test_reverse_method_lines_dic": {"30": "MappedFileQueueTest::::testGetLastMappedFile()", "31": "MappedFileQueueTest::::testGetLastMappedFile()", "32": "MappedFileQueueTest::::testGetLastMappedFile()", "33": "MappedFileQueueTest::::testGetLastMappedFile()", "34": "MappedFileQueueTest::::testGetLastMappedFile()", "35": "MappedFileQueueTest::::testGetLastMappedFile()", "36": "MappedFileQueueTest::::testGetLastMappedFile()", "37": "MappedFileQueueTest::::testGetLastMappedFile()", "38": "MappedFileQueueTest::::testGetLastMappedFile()", "39": "MappedFileQueueTest::::testGetLastMappedFile()", "40": "MappedFileQueueTest::::testGetLastMappedFile()", "41": "MappedFileQueueTest::::testGetLastMappedFile()", "42": "MappedFileQueueTest::::testGetLastMappedFile()", "43": "MappedFileQueueTest::::testGetLastMappedFile()", "44": "MappedFileQueueTest::::testGetLastMappedFile()", "45": "MappedFileQueueTest::::testGetLastMappedFile()", "47": "MappedFileQueueTest::::testFindMappedFileByOffset()", "48": "MappedFileQueueTest::::testFindMappedFileByOffset()", "49": "MappedFileQueueTest::::testFindMappedFileByOffset()", "50": "MappedFileQueueTest::::testFindMappedFileByOffset()", "51": "MappedFileQueueTest::::testFindMappedFileByOffset()", "52": "MappedFileQueueTest::::testFindMappedFileByOffset()", "53": "MappedFileQueueTest::::testFindMappedFileByOffset()", "54": "MappedFileQueueTest::::testFindMappedFileByOffset()", "55": "MappedFileQueueTest::::testFindMappedFileByOffset()", "56": "MappedFileQueueTest::::testFindMappedFileByOffset()", "57": "MappedFileQueueTest::::testFindMappedFileByOffset()", "58": "MappedFileQueueTest::::testFindMappedFileByOffset()", "59": "MappedFileQueueTest::::testFindMappedFileByOffset()", "60": "MappedFileQueueTest::::testFindMappedFileByOffset()", "61": "MappedFileQueueTest::::testFindMappedFileByOffset()", "62": "MappedFileQueueTest::::testFindMappedFileByOffset()", "63": "MappedFileQueueTest::::testFindMappedFileByOffset()", "64": "MappedFileQueueTest::::testFindMappedFileByOffset()", "65": "MappedFileQueueTest::::testFindMappedFileByOffset()", "66": "MappedFileQueueTest::::testFindMappedFileByOffset()", "67": "MappedFileQueueTest::::testFindMappedFileByOffset()", "68": "MappedFileQueueTest::::testFindMappedFileByOffset()", "69": "MappedFileQueueTest::::testFindMappedFileByOffset()", "70": "MappedFileQueueTest::::testFindMappedFileByOffset()", "71": "MappedFileQueueTest::::testFindMappedFileByOffset()", "72": "MappedFileQueueTest::::testFindMappedFileByOffset()", "73": "MappedFileQueueTest::::testFindMappedFileByOffset()", "74": "MappedFileQueueTest::::testFindMappedFileByOffset()", "75": "MappedFileQueueTest::::testFindMappedFileByOffset()", "76": "MappedFileQueueTest::::testFindMappedFileByOffset()", "77": "MappedFileQueueTest::::testFindMappedFileByOffset()", "78": "MappedFileQueueTest::::testFindMappedFileByOffset()", "79": "MappedFileQueueTest::::testFindMappedFileByOffset()", "80": "MappedFileQueueTest::::testFindMappedFileByOffset()", "81": "MappedFileQueueTest::::testFindMappedFileByOffset()", "82": "MappedFileQueueTest::::testFindMappedFileByOffset()", "83": "MappedFileQueueTest::::testFindMappedFileByOffset()", "84": "MappedFileQueueTest::::testFindMappedFileByOffset()", "85": "MappedFileQueueTest::::testFindMappedFileByOffset()", "86": "MappedFileQueueTest::::testFindMappedFileByOffset()", "87": "MappedFileQueueTest::::testFindMappedFileByOffset()", "88": "MappedFileQueueTest::::testFindMappedFileByOffset()", "89": "MappedFileQueueTest::::testFindMappedFileByOffset()", "90": "MappedFileQueueTest::::testFindMappedFileByOffset()", "91": "MappedFileQueueTest::::testFindMappedFileByOffset()", "92": "MappedFileQueueTest::::testFindMappedFileByOffset()", "93": "MappedFileQueueTest::::testFindMappedFileByOffset()", "94": "MappedFileQueueTest::::testFindMappedFileByOffset()", "95": "MappedFileQueueTest::::testFindMappedFileByOffset()", "96": "MappedFileQueueTest::::testFindMappedFileByOffset()", "98": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "99": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "100": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "101": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "102": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "103": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "104": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "105": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "106": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "107": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "108": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "109": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "110": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "111": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "112": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "113": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "114": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "115": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "116": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "117": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "118": "MappedFileQueueTest::::testFindMappedFileByOffset_StartOffsetIsNonZero()", "120": "MappedFileQueueTest::::testAppendMessage()", "121": "MappedFileQueueTest::::testAppendMessage()", "122": "MappedFileQueueTest::::testAppendMessage()", "123": "MappedFileQueueTest::::testAppendMessage()", "124": "MappedFileQueueTest::::testAppendMessage()", "125": "MappedFileQueueTest::::testAppendMessage()", "126": "MappedFileQueueTest::::testAppendMessage()", "127": "MappedFileQueueTest::::testAppendMessage()", "128": "MappedFileQueueTest::::testAppendMessage()", "129": "MappedFileQueueTest::::testAppendMessage()", "130": "MappedFileQueueTest::::testAppendMessage()", "131": "MappedFileQueueTest::::testAppendMessage()", "132": "MappedFileQueueTest::::testAppendMessage()", "133": "MappedFileQueueTest::::testAppendMessage()", "134": "MappedFileQueueTest::::testAppendMessage()", "135": "MappedFileQueueTest::::testAppendMessage()", "136": "MappedFileQueueTest::::testAppendMessage()", "137": "MappedFileQueueTest::::testAppendMessage()", "138": "MappedFileQueueTest::::testAppendMessage()", "139": "MappedFileQueueTest::::testAppendMessage()", "140": "MappedFileQueueTest::::testAppendMessage()", "141": "MappedFileQueueTest::::testAppendMessage()", "142": "MappedFileQueueTest::::testAppendMessage()", "143": "MappedFileQueueTest::::testAppendMessage()", "144": "MappedFileQueueTest::::testAppendMessage()", "145": "MappedFileQueueTest::::testAppendMessage()", "146": "MappedFileQueueTest::::testAppendMessage()", "147": "MappedFileQueueTest::::testAppendMessage()", "148": "MappedFileQueueTest::::testAppendMessage()", "149": "MappedFileQueueTest::::testAppendMessage()", "150": "MappedFileQueueTest::::testAppendMessage()", "151": "MappedFileQueueTest::::testAppendMessage()", "152": "MappedFileQueueTest::::testAppendMessage()", "153": "MappedFileQueueTest::::testAppendMessage()", "155": "MappedFileQueueTest::::testGetMappedMemorySize()", "156": "MappedFileQueueTest::::testGetMappedMemorySize()", "157": "MappedFileQueueTest::::testGetMappedMemorySize()", "158": "MappedFileQueueTest::::testGetMappedMemorySize()", "159": "MappedFileQueueTest::::testGetMappedMemorySize()", "160": "MappedFileQueueTest::::testGetMappedMemorySize()", "161": "MappedFileQueueTest::::testGetMappedMemorySize()", "162": "MappedFileQueueTest::::testGetMappedMemorySize()", "163": "MappedFileQueueTest::::testGetMappedMemorySize()", "164": "MappedFileQueueTest::::testGetMappedMemorySize()", "165": "MappedFileQueueTest::::testGetMappedMemorySize()", "166": "MappedFileQueueTest::::testGetMappedMemorySize()", "167": "MappedFileQueueTest::::testGetMappedMemorySize()", "168": "MappedFileQueueTest::::testGetMappedMemorySize()", "169": "MappedFileQueueTest::::testGetMappedMemorySize()", "170": "MappedFileQueueTest::::testGetMappedMemorySize()", "171": "MappedFileQueueTest::::testGetMappedMemorySize()", "173": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "174": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "175": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "176": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "177": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "178": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "179": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "180": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "181": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "182": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "183": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "184": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "185": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "186": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "187": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "188": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "189": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "190": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "191": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "192": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "193": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "194": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "195": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "196": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "197": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "198": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "199": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "200": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "201": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "202": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "203": "MappedFileQueueTest::::testDeleteExpiredFileByOffset()", "205": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "206": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "207": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "208": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "209": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "210": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "211": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "212": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "213": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "214": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "215": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "216": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "217": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "218": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "219": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "220": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "221": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "222": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "223": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "224": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "225": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "226": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "227": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "228": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "229": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "230": "MappedFileQueueTest::::testDeleteExpiredFileByTime()", "232": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "233": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "234": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "235": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "236": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "237": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "238": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "239": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "240": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "241": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "242": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "243": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "244": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "245": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "246": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "247": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "248": "MappedFileQueueTest::::testFindMappedFile_ByIteration()", "250": "MappedFileQueueTest::::destory()", "251": "MappedFileQueueTest::::destory()", "252": "MappedFileQueueTest::::destory()", "253": "MappedFileQueueTest::::destory()", "254": "MappedFileQueueTest::::destory()"}, "tests": [{"test_lines": [30, 45], "covered_lines": [33, 34, 45, 49, 50, 52, 55, 56, 57, 58, 59, 203, 204, 206, 207, 210, 211, 214, 215, 216, 217, 218, 220, 225, 228, 231, 232, 233, 235, 238, 241, 245, 249, 251, 253, 254, 263, 572, 573, 574, 575, 578, 579, 580, 581, 582, 585, 586, 587, 589]}, {"test_lines": [47, 96], "covered_lines": [33, 34, 45, 49, 50, 52, 55, 56, 57, 58, 59, 100, 104, 105, 203, 204, 206, 207, 210, 211, 214, 215, 216, 217, 218, 220, 225, 228, 231, 232, 233, 235, 238, 241, 245, 249, 251, 253, 254, 263, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 488, 490, 491, 492, 503, 509, 511, 515, 517, 519, 524, 527, 531, 535, 537, 538, 539, 540, 541, 546, 572, 573, 574, 575, 578, 579, 580, 581, 582, 585, 586, 587, 589]}, {"test_lines": [98, 118], "covered_lines": [33, 34, 45, 49, 50, 52, 55, 56, 57, 58, 59, 203, 204, 206, 207, 210, 214, 215, 216, 217, 218, 220, 225, 228, 231, 232, 233, 235, 238, 245, 249, 251, 253, 254, 263, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 488, 490, 491, 492, 503, 504, 509, 511, 515, 517, 519, 524, 527, 531, 572, 573, 574, 575, 578, 579, 580, 581, 582, 585, 586, 587, 589]}, {"test_lines": [120, 153], "covered_lines": [33, 34, 45, 49, 50, 52, 55, 56, 57, 58, 59, 203, 204, 206, 207, 210, 211, 214, 215, 216, 217, 218, 220, 225, 228, 231, 232, 233, 235, 238, 241, 245, 249, 251, 253, 254, 263, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 447, 472, 473, 474, 475, 483, 484, 486, 488, 490, 491, 492, 515, 517, 519, 524, 527, 572, 573, 574, 575, 578, 579, 580, 581, 582, 585, 586, 587, 589, 592]}, {"test_lines": [155, 171], "covered_lines": [33, 34, 45, 49, 50, 52, 55, 56, 57, 58, 59, 100, 104, 105, 203, 204, 206, 207, 210, 211, 214, 215, 216, 217, 218, 220, 225, 228, 231, 232, 233, 235, 238, 241, 245, 249, 251, 253, 254, 263, 535, 537, 538, 539, 540, 541, 546, 572, 573, 574, 575, 578, 579, 580, 581, 582, 585, 586, 587, 589]}, {"test_lines": [173, 203], "covered_lines": [33, 34, 45, 49, 50, 52, 55, 56, 57, 58, 59, 100, 104, 105, 131, 133, 134, 135, 137, 141, 144, 149, 151, 203, 204, 206, 207, 210, 211, 214, 215, 216, 217, 218, 220, 225, 228, 231, 232, 233, 235, 238, 241, 245, 249, 251, 253, 254, 263, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 419, 420, 421, 428, 430, 515, 517, 519, 524, 527, 572, 573, 574, 575, 578, 579, 580, 581, 582, 585, 586, 587, 589]}, {"test_lines": [205, 230], "covered_lines": [33, 34, 45, 49, 50, 52, 55, 56, 57, 58, 59, 100, 104, 105, 131, 133, 134, 135, 137, 141, 144, 149, 151, 203, 204, 206, 207, 210, 211, 214, 215, 216, 217, 218, 220, 225, 228, 231, 232, 233, 235, 238, 241, 245, 249, 251, 253, 254, 263, 348, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 369, 385, 387, 604]}, {"test_lines": [232, 248], "covered_lines": [33, 34, 45, 49, 50, 52, 55, 56, 57, 58, 59, 203, 204, 206, 207, 210, 211, 214, 215, 216, 217, 218, 220, 225, 228, 231, 232, 233, 235, 238, 245, 249, 251, 253, 254, 263, 472, 473, 474, 475, 483, 484, 486, 488, 490, 491, 492, 495, 496, 497, 498, 500, 515, 517, 519, 524, 527, 531, 604]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/store/src/main/java/org/apache/rocketmq/store/StoreCheckpoint.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.store;\n", "\n", "import java.io.File;\n", "import java.io.IOException;\n", "import java.io.RandomAccessFile;\n", "import java.nio.MappedByteBuffer;\n", "import java.nio.channels.FileChannel;\n", "import java.nio.channels.FileChannel.MapMode;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "\n", "public class StoreCheckpoint {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n", "    private final RandomAccessFile randomAccessFile;\n", "    private final FileChannel fileChannel;\n", "    private final MappedByteBuffer mappedByteBuffer;\n", "    private volatile long physicMsgTimestamp = 0;\n", "    private volatile long logicsMsgTimestamp = 0;\n", "    private volatile long indexMsgTimestamp = 0;\n", "\n", "    public StoreCheckpoint(final String scpPath) throws IOException {\n", "        File file = new File(scpPath);\n", "        MappedFile.ensureDirOK(file.getParent());\n", "        boolean fileExists = file.exists();\n", "\n", "        this.randomAccessFile = new RandomAccessFile(file, \"rw\");\n", "        this.fileChannel = this.randomAccessFile.getChannel();\n", "        this.mappedByteBuffer = fileChannel.map(MapMode.READ_WRITE, 0, MappedFile.OS_PAGE_SIZE);\n", "\n", "        if (fileExists) {\n", "            log.info(\"store checkpoint file exists, \" + scpPath);\n", "            this.physicMsgTimestamp = this.mappedByteBuffer.getLong(0);\n", "            this.logicsMsgTimestamp = this.mappedByteBuffer.getLong(8);\n", "            this.indexMsgTimestamp = this.mappedByteBuffer.getLong(16);\n", "\n", "            log.info(\"store checkpoint file physicMsgTimestamp \" + this.physicMsgTimestamp + \", \"\n", "                + UtilAll.timeMillisToHumanString(this.physicMsgTimestamp));\n", "            log.info(\"store checkpoint file logicsMsgTimestamp \" + this.logicsMsgTimestamp + \", \"\n", "                + UtilAll.timeMillisToHumanString(this.logicsMsgTimestamp));\n", "            log.info(\"store checkpoint file indexMsgTimestamp \" + this.indexMsgTimestamp + \", \"\n", "                + UtilAll.timeMillisToHumanString(this.indexMsgTimestamp));\n", "        } else {\n", "            log.info(\"store checkpoint file not exists, \" + scpPath);\n", "        }\n", "    }\n", "\n", "    public void shutdown() {\n", "        this.flush();\n", "\n", "        // unmap mappedByteBuffer\n", "        MappedFile.clean(this.mappedByteBuffer);\n", "\n", "        try {\n", "            this.fileChannel.close();\n", "        } catch (IOException e) {\n", "            log.error(\"Failed to properly close the channel\", e);\n", "        }\n", "    }\n", "\n", "    public void flush() {\n", "        this.mappedByteBuffer.putLong(0, this.physicMsgTimestamp);\n", "        this.mappedByteBuffer.putLong(8, this.logicsMsgTimestamp);\n", "        this.mappedByteBuffer.putLong(16, this.indexMsgTimestamp);\n", "        this.mappedByteBuffer.force();\n", "    }\n", "\n", "    public long getPhysicMsgTimestamp() {\n", "        return physicMsgTimestamp;\n", "    }\n", "\n", "    public void setPhysicMsgTimestamp(long physicMsgTimestamp) {\n", "        this.physicMsgTimestamp = physicMsgTimestamp;\n", "    }\n", "\n", "    public long getLogicsMsgTimestamp() {\n", "        return logicsMsgTimestamp;\n", "    }\n", "\n", "    public void setLogicsMsgTimestamp(long logicsMsgTimestamp) {\n", "        this.logicsMsgTimestamp = logicsMsgTimestamp;\n", "    }\n", "\n", "    public long getMinTimestampIndex() {\n", "        return Math.min(this.getMinTimestamp(), this.indexMsgTimestamp);\n", "    }\n", "\n", "    public long getMinTimestamp() {\n", "        long min = Math.min(this.physicMsgTimestamp, this.logicsMsgTimestamp);\n", "\n", "        min -= 1000 * 3;\n", "        if (min < 0)\n", "            min = 0;\n", "\n", "        return min;\n", "    }\n", "\n", "    public long getIndexMsgTimestamp() {\n", "        return indexMsgTimestamp;\n", "    }\n", "\n", "    public void setIndexMsgTimestamp(long indexMsgTimestamp) {\n", "        this.indexMsgTimestamp = indexMsgTimestamp;\n", "    }\n", "\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "/**\n", " * $Id: StoreCheckpointTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $\n", " */\n", "package org.apache.rocketmq.store;\n", "\n", "import java.io.File;\n", "import java.io.IOException;\n", "\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.junit.After;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class StoreCheckpointTest {\n", "    @Test\n", "    public void testWriteAndRead() throws IOException {\n", "        StoreCheckpoint storeCheckpoint = new StoreCheckpoint(\"target/checkpoint_test/0000\");\n", "        long physicMsgTimestamp = 0xAABB;\n", "        long logicsMsgTimestamp = 0xCCDD;\n", "        storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n", "        storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n", "        storeCheckpoint.flush();\n", "\n", "        long diff = physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n", "        assertThat(diff).isEqualTo(3000);\n", "        storeCheckpoint.shutdown();\n", "        storeCheckpoint = new StoreCheckpoint(\"target/checkpoint_test/0000\");\n", "        assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n", "        assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n", "    }\n", "\n", "    @After\n", "    public void destory() {\n", "        File file = new File(\"target/checkpoint_test\");\n", "        UtilAll.deleteFile(file);\n", "    }\n", "}\n"], "method_lines_dic": {"StoreCheckpoint::::shutdown()": [65, 76], "StoreCheckpoint::::flush()": [78, 83], "StoreCheckpoint::::getPhysicMsgTimestamp()": [85, 87], "StoreCheckpoint::::setPhysicMsgTimestamp(long)": [89, 91], "StoreCheckpoint::::getLogicsMsgTimestamp()": [93, 95], "StoreCheckpoint::::setLogicsMsgTimestamp(long)": [97, 99], "StoreCheckpoint::::getMinTimestampIndex()": [101, 103], "StoreCheckpoint::::getMinTimestamp()": [105, 113], "StoreCheckpoint::::getIndexMsgTimestamp()": [115, 117], "StoreCheckpoint::::setIndexMsgTimestamp(long)": [119, 121]}, "test_method_lines_dic": {"StoreCheckpointTest::::testWriteAndRead()": [33, 48], "StoreCheckpointTest::::destory()": [50, 54]}, "reverse_method_lines_dic": {"65": "StoreCheckpoint::::shutdown()", "66": "StoreCheckpoint::::shutdown()", "67": "StoreCheckpoint::::shutdown()", "68": "StoreCheckpoint::::shutdown()", "69": "StoreCheckpoint::::shutdown()", "70": "StoreCheckpoint::::shutdown()", "71": "StoreCheckpoint::::shutdown()", "72": "StoreCheckpoint::::shutdown()", "73": "StoreCheckpoint::::shutdown()", "74": "StoreCheckpoint::::shutdown()", "75": "StoreCheckpoint::::shutdown()", "76": "StoreCheckpoint::::shutdown()", "78": "StoreCheckpoint::::flush()", "79": "StoreCheckpoint::::flush()", "80": "StoreCheckpoint::::flush()", "81": "StoreCheckpoint::::flush()", "82": "StoreCheckpoint::::flush()", "83": "StoreCheckpoint::::flush()", "85": "StoreCheckpoint::::getPhysicMsgTimestamp()", "86": "StoreCheckpoint::::getPhysicMsgTimestamp()", "87": "StoreCheckpoint::::getPhysicMsgTimestamp()", "89": "StoreCheckpoint::::setPhysicMsgTimestamp(long)", "90": "StoreCheckpoint::::setPhysicMsgTimestamp(long)", "91": "StoreCheckpoint::::setPhysicMsgTimestamp(long)", "93": "StoreCheckpoint::::getLogicsMsgTimestamp()", "94": "StoreCheckpoint::::getLogicsMsgTimestamp()", "95": "StoreCheckpoint::::getLogicsMsgTimestamp()", "97": "StoreCheckpoint::::setLogicsMsgTimestamp(long)", "98": "StoreCheckpoint::::setLogicsMsgTimestamp(long)", "99": "StoreCheckpoint::::setLogicsMsgTimestamp(long)", "101": "StoreCheckpoint::::getMinTimestampIndex()", "102": "StoreCheckpoint::::getMinTimestampIndex()", "103": "StoreCheckpoint::::getMinTimestampIndex()", "105": "StoreCheckpoint::::getMinTimestamp()", "106": "StoreCheckpoint::::getMinTimestamp()", "107": "StoreCheckpoint::::getMinTimestamp()", "108": "StoreCheckpoint::::getMinTimestamp()", "109": "StoreCheckpoint::::getMinTimestamp()", "110": "StoreCheckpoint::::getMinTimestamp()", "111": "StoreCheckpoint::::getMinTimestamp()", "112": "StoreCheckpoint::::getMinTimestamp()", "113": "StoreCheckpoint::::getMinTimestamp()", "115": "StoreCheckpoint::::getIndexMsgTimestamp()", "116": "StoreCheckpoint::::getIndexMsgTimestamp()", "117": "StoreCheckpoint::::getIndexMsgTimestamp()", "119": "StoreCheckpoint::::setIndexMsgTimestamp(long)", "120": "StoreCheckpoint::::setIndexMsgTimestamp(long)", "121": "StoreCheckpoint::::setIndexMsgTimestamp(long)"}, "test_reverse_method_lines_dic": {"33": "StoreCheckpointTest::::testWriteAndRead()", "34": "StoreCheckpointTest::::testWriteAndRead()", "35": "StoreCheckpointTest::::testWriteAndRead()", "36": "StoreCheckpointTest::::testWriteAndRead()", "37": "StoreCheckpointTest::::testWriteAndRead()", "38": "StoreCheckpointTest::::testWriteAndRead()", "39": "StoreCheckpointTest::::testWriteAndRead()", "40": "StoreCheckpointTest::::testWriteAndRead()", "41": "StoreCheckpointTest::::testWriteAndRead()", "42": "StoreCheckpointTest::::testWriteAndRead()", "43": "StoreCheckpointTest::::testWriteAndRead()", "44": "StoreCheckpointTest::::testWriteAndRead()", "45": "StoreCheckpointTest::::testWriteAndRead()", "46": "StoreCheckpointTest::::testWriteAndRead()", "47": "StoreCheckpointTest::::testWriteAndRead()", "48": "StoreCheckpointTest::::testWriteAndRead()", "50": "StoreCheckpointTest::::destory()", "51": "StoreCheckpointTest::::destory()", "52": "StoreCheckpointTest::::destory()", "53": "StoreCheckpointTest::::destory()", "54": "StoreCheckpointTest::::destory()"}, "tests": [{"test_lines": [33, 48], "covered_lines": [31, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 63, 66, 69, 72, 75, 76, 79, 80, 81, 82, 83, 86, 90, 91, 94, 98, 99, 106, 108, 109, 112]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/store/src/main/java/org/apache/rocketmq/store/ConsumeQueueExt.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.store;\n", "\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "\n", "import java.io.File;\n", "import java.nio.ByteBuffer;\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.List;\n", "\n", "/**\n", " * Extend of consume queue, to store something not important,\n", " * such as message store time, filter bit map and etc.\n", " * <p/>\n", " * <li>1. This class is used only by {@link ConsumeQueue}</li>\n", " * <li>2. And is week reliable.</li>\n", " * <li>3. Be careful, address returned is always less than 0.</li>\n", " * <li>4. Pls keep this file small.</li>\n", " */\n", "public class ConsumeQueueExt {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n", "\n", "    private final MappedFileQueue mappedFileQueue;\n", "    private final String topic;\n", "    private final int queueId;\n", "\n", "    private final String storePath;\n", "    private final int mappedFileSize;\n", "    private ByteBuffer tempContainer;\n", "\n", "    public static final int END_BLANK_DATA_LENGTH = 4;\n", "\n", "    /**\n", "     * Addr can not exceed this value.For compatible.\n", "     */\n", "    public static final long MAX_ADDR = Integer.MIN_VALUE - 1L;\n", "    public static final long MAX_REAL_OFFSET = MAX_ADDR - Long.MIN_VALUE;\n", "\n", "    /**\n", "     * Constructor.\n", "     *\n", "     * @param topic topic\n", "     * @param queueId id of queue\n", "     * @param storePath root dir of files to store.\n", "     * @param mappedFileSize file size\n", "     * @param bitMapLength bit map length.\n", "     */\n", "    public ConsumeQueueExt(final String topic,\n", "        final int queueId,\n", "        final String storePath,\n", "        final int mappedFileSize,\n", "        final int bitMapLength) {\n", "\n", "        this.storePath = storePath;\n", "        this.mappedFileSize = mappedFileSize;\n", "\n", "        this.topic = topic;\n", "        this.queueId = queueId;\n", "\n", "        String queueDir = this.storePath\n", "            + File.separator + topic\n", "            + File.separator + queueId;\n", "\n", "        this.mappedFileQueue = new MappedFileQueue(queueDir, mappedFileSize, null);\n", "\n", "        if (bitMapLength > 0) {\n", "            this.tempContainer = ByteBuffer.allocate(\n", "                bitMapLength / Byte.SIZE\n", "            );\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Check whether {@code address} point to extend file.\n", "     * <p>\n", "     * Just test {@code address} is less than 0.\n", "     * </p>\n", "     */\n", "    public static boolean isExtAddr(final long address) {\n", "        return address <= MAX_ADDR;\n", "    }\n", "\n", "    /**\n", "     * Transform {@code address}(decorated by {@link #decorate}) to offset in mapped file.\n", "     * <p>\n", "     * if {@code address} is less than 0, return {@code address} - {@link java.lang.Long#MIN_VALUE};\n", "     * else, just return {@code address}\n", "     * </p>\n", "     */\n", "    public long unDecorate(final long address) {\n", "        if (isExtAddr(address)) {\n", "            return address - Long.MIN_VALUE;\n", "        }\n", "        return address;\n", "    }\n", "\n", "    /**\n", "     * Decorate {@code offset} from mapped file, in order to distinguish with tagsCode(saved in cq originally).\n", "     * <p>\n", "     * if {@code offset} is greater than or equal to 0, then return {@code offset} + {@link java.lang.Long#MIN_VALUE};\n", "     * else, just return {@code offset}\n", "     * </p>\n", "     *\n", "     * @return ext address(value is less than 0)\n", "     */\n", "    public long decorate(final long offset) {\n", "        if (!isExtAddr(offset)) {\n", "            return offset + Long.MIN_VALUE;\n", "        }\n", "        return offset;\n", "    }\n", "\n", "    /**\n", "     * Get data from buffer.\n", "     *\n", "     * @param address less than 0\n", "     */\n", "    public CqExtUnit get(final long address) {\n", "        CqExtUnit cqExtUnit = new CqExtUnit();\n", "        if (get(address, cqExtUnit)) {\n", "            return cqExtUnit;\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    /**\n", "     * Get data from buffer, and set to {@code cqExtUnit}\n", "     *\n", "     * @param address less than 0\n", "     */\n", "    public boolean get(final long address, final CqExtUnit cqExtUnit) {\n", "        if (!isExtAddr(address)) {\n", "            return false;\n", "        }\n", "\n", "        final int mappedFileSize = this.mappedFileSize;\n", "        final long realOffset = unDecorate(address);\n", "\n", "        MappedFile mappedFile = this.mappedFileQueue.findMappedFileByOffset(realOffset, realOffset == 0);\n", "        if (mappedFile == null) {\n", "            return false;\n", "        }\n", "\n", "        int pos = (int) (realOffset % mappedFileSize);\n", "\n", "        SelectMappedBufferResult bufferResult = mappedFile.selectMappedBuffer(pos);\n", "        if (bufferResult == null) {\n", "            log.warn(\"[BUG] Consume queue extend unit({}) is not found!\", realOffset);\n", "            return false;\n", "        }\n", "        boolean ret = false;\n", "        try {\n", "            ret = cqExtUnit.read(bufferResult.getByteBuffer());\n", "        } finally {\n", "            bufferResult.release();\n", "        }\n", "\n", "        return ret;\n", "    }\n", "\n", "    /**\n", "     * Save to mapped buffer of file and return address.\n", "     * <p>\n", "     * Be careful, this method is not thread safe.\n", "     * </p>\n", "     *\n", "     * @return success: < 0: fail: >=0\n", "     */\n", "    public long put(final CqExtUnit cqExtUnit) {\n", "        final int retryTimes = 3;\n", "        try {\n", "            int size = cqExtUnit.calcUnitSize();\n", "            if (size > CqExtUnit.MAX_EXT_UNIT_SIZE) {\n", "                log.error(\"Size of cq ext unit is greater than {}, {}\", CqExtUnit.MAX_EXT_UNIT_SIZE, cqExtUnit);\n", "                return 1;\n", "            }\n", "            if (this.mappedFileQueue.getMaxOffset() + size > MAX_REAL_OFFSET) {\n", "                log.warn(\"Capacity of ext is maximum!{}, {}\", this.mappedFileQueue.getMaxOffset(), size);\n", "                return 1;\n", "            }\n", "            // unit size maybe change.but, the same most of the time.\n", "            if (this.tempContainer == null || this.tempContainer.capacity() < size) {\n", "                this.tempContainer = ByteBuffer.allocate(size);\n", "            }\n", "\n", "            for (int i = 0; i < retryTimes; i++) {\n", "                MappedFile mappedFile = this.mappedFileQueue.getLastMappedFile();\n", "\n", "                if (mappedFile == null || mappedFile.isFull()) {\n", "                    mappedFile = this.mappedFileQueue.getLastMappedFile(0);\n", "                }\n", "\n", "                if (mappedFile == null) {\n", "                    log.error(\"Create mapped file when save consume queue extend, {}\", cqExtUnit);\n", "                    continue;\n", "                }\n", "                final int wrotePosition = mappedFile.getWrotePosition();\n", "                final int blankSize = this.mappedFileSize - wrotePosition - END_BLANK_DATA_LENGTH;\n", "\n", "                // check whether has enough space.\n", "                if (size > blankSize) {\n", "                    fullFillToEnd(mappedFile, wrotePosition);\n", "                    log.info(\"No enough space(need:{}, has:{}) of file {}, so fill to end\",\n", "                        size, blankSize, mappedFile.getFileName());\n", "                    continue;\n", "                }\n", "\n", "                if (mappedFile.appendMessage(cqExtUnit.write(this.tempContainer), 0, size)) {\n", "                    return decorate(wrotePosition + mappedFile.getFileFromOffset());\n", "                }\n", "            }\n", "        } catch (Throwable e) {\n", "            log.error(\"Save consume queue extend error, \" + cqExtUnit, e);\n", "        }\n", "\n", "        return 1;\n", "    }\n", "\n", "    protected void fullFillToEnd(final MappedFile mappedFile, final int wrotePosition) {\n", "        ByteBuffer mappedFileBuffer = mappedFile.sliceByteBuffer();\n", "        mappedFileBuffer.position(wrotePosition);\n", "\n", "        // ending.\n", "        mappedFileBuffer.putShort((short) -1);\n", "\n", "        mappedFile.setWrotePosition(this.mappedFileSize);\n", "    }\n", "\n", "    /**\n", "     * Load data from file when startup.\n", "     */\n", "    public boolean load() {\n", "        boolean result = this.mappedFileQueue.load();\n", "        log.info(\"load consume queue extend\" + this.topic + \"-\" + this.queueId + \" \" + (result ? \"OK\" : \"Failed\"));\n", "        return result;\n", "    }\n", "\n", "    /**\n", "     * Check whether the step size in mapped file queue is correct.\n", "     */\n", "    public void checkSelf() {\n", "        this.mappedFileQueue.checkSelf();\n", "    }\n", "\n", "    /**\n", "     * Recover.\n", "     */\n", "    public void recover() {\n", "        final List<MappedFile> mappedFiles = this.mappedFileQueue.getMappedFiles();\n", "        if (mappedFiles == null || mappedFiles.isEmpty()) {\n", "            return;\n", "        }\n", "\n", "        // load all files, consume queue will truncate extend files.\n", "        int index = 0;\n", "\n", "        MappedFile mappedFile = mappedFiles.get(index);\n", "        ByteBuffer byteBuffer = mappedFile.sliceByteBuffer();\n", "        long processOffset = mappedFile.getFileFromOffset();\n", "        long mappedFileOffset = 0;\n", "        CqExtUnit extUnit = new CqExtUnit();\n", "        while (true) {\n", "            extUnit.readBySkip(byteBuffer);\n", "\n", "            // check whether write sth.\n", "            if (extUnit.getSize() > 0) {\n", "                mappedFileOffset += extUnit.getSize();\n", "                continue;\n", "            }\n", "\n", "            index++;\n", "            if (index < mappedFiles.size()) {\n", "                mappedFile = mappedFiles.get(index);\n", "                byteBuffer = mappedFile.sliceByteBuffer();\n", "                processOffset = mappedFile.getFileFromOffset();\n", "                mappedFileOffset = 0;\n", "                log.info(\"Recover next consume queue extend file, \" + mappedFile.getFileName());\n", "                continue;\n", "            }\n", "\n", "            log.info(\"All files of consume queue extend has been recovered over, last mapped file \"\n", "                + mappedFile.getFileName());\n", "            break;\n", "        }\n", "\n", "        processOffset += mappedFileOffset;\n", "        this.mappedFileQueue.setFlushedWhere(processOffset);\n", "        this.mappedFileQueue.setCommittedWhere(processOffset);\n", "        this.mappedFileQueue.truncateDirtyFiles(processOffset);\n", "    }\n", "\n", "    /**\n", "     * Delete files before {@code minAddress}.\n", "     *\n", "     * @param minAddress less than 0\n", "     */\n", "    public void truncateByMinAddress(final long minAddress) {\n", "        if (!isExtAddr(minAddress)) {\n", "            return;\n", "        }\n", "\n", "        log.info(\"Truncate consume queue ext by min {}.\", minAddress);\n", "\n", "        List<MappedFile> willRemoveFiles = new ArrayList<MappedFile>();\n", "\n", "        List<MappedFile> mappedFiles = this.mappedFileQueue.getMappedFiles();\n", "        final long realOffset = unDecorate(minAddress);\n", "\n", "        for (MappedFile file : mappedFiles) {\n", "            long fileTailOffset = file.getFileFromOffset() + this.mappedFileSize;\n", "\n", "            if (fileTailOffset < realOffset) {\n", "                log.info(\"Destroy consume queue ext by min: file={}, fileTailOffset={}, minOffset={}\", file.getFileName(),\n", "                    fileTailOffset, realOffset);\n", "                if (file.destroy(1000)) {\n", "                    willRemoveFiles.add(file);\n", "                }\n", "            }\n", "        }\n", "\n", "        this.mappedFileQueue.deleteExpiredFile(willRemoveFiles);\n", "    }\n", "\n", "    /**\n", "     * Delete files after {@code maxAddress}, and reset wrote/commit/flush position to last file.\n", "     *\n", "     * @param maxAddress less than 0\n", "     */\n", "    public void truncateByMaxAddress(final long maxAddress) {\n", "        if (!isExtAddr(maxAddress)) {\n", "            return;\n", "        }\n", "\n", "        log.info(\"Truncate consume queue ext by max {}.\", maxAddress);\n", "\n", "        CqExtUnit cqExtUnit = get(maxAddress);\n", "        if (cqExtUnit == null) {\n", "            log.error(\"[BUG] address {} of consume queue extend not found!\", maxAddress);\n", "            return;\n", "        }\n", "\n", "        final long realOffset = unDecorate(maxAddress);\n", "\n", "        this.mappedFileQueue.truncateDirtyFiles(realOffset + cqExtUnit.getSize());\n", "    }\n", "\n", "    /**\n", "     * flush buffer to file.\n", "     */\n", "    public boolean flush(final int flushLeastPages) {\n", "        return this.mappedFileQueue.flush(flushLeastPages);\n", "    }\n", "\n", "    /**\n", "     * delete files and directory.\n", "     */\n", "    public void destroy() {\n", "        this.mappedFileQueue.destroy();\n", "    }\n", "\n", "    /**\n", "     * Max address(value is less than 0).\n", "     * <p/>\n", "     * <p>\n", "     * Be careful: it's an address just when invoking this method.\n", "     * </p>\n", "     */\n", "    public long getMaxAddress() {\n", "        MappedFile mappedFile = this.mappedFileQueue.getLastMappedFile();\n", "        if (mappedFile == null) {\n", "            return decorate(0);\n", "        }\n", "        return decorate(mappedFile.getFileFromOffset() + mappedFile.getWrotePosition());\n", "    }\n", "\n", "    /**\n", "     * Minus address saved in file.\n", "     */\n", "    public long getMinAddress() {\n", "        MappedFile firstFile = this.mappedFileQueue.getFirstMappedFile();\n", "        if (firstFile == null) {\n", "            return decorate(0);\n", "        }\n", "        return decorate(firstFile.getFileFromOffset());\n", "    }\n", "\n", "    /**\n", "     * Store unit.\n", "     */\n", "    public static class CqExtUnit {\n", "        public static final short MIN_EXT_UNIT_SIZE\n", "            = 2 * 1 // size, 32k max\n", "            + 8 * 2 // msg time + tagCode\n", "            + 2; // bitMapSize\n", "\n", "        public static final int MAX_EXT_UNIT_SIZE = Short.MAX_VALUE;\n", "\n", "        public CqExtUnit() {\n", "        }\n", "\n", "        public CqExtUnit(Long tagsCode, long msgStoreTime, byte[] filterBitMap) {\n", "            this.tagsCode = tagsCode == null ? 0 : tagsCode;\n", "            this.msgStoreTime = msgStoreTime;\n", "            this.filterBitMap = filterBitMap;\n", "            this.bitMapSize = (short) (filterBitMap == null ? 0 : filterBitMap.length);\n", "            this.size = (short) (MIN_EXT_UNIT_SIZE + this.bitMapSize);\n", "        }\n", "\n", "        /**\n", "         * unit size\n", "         */\n", "        private short size;\n", "        /**\n", "         * has code of tags\n", "         */\n", "        private long tagsCode;\n", "        /**\n", "         * the time to store into commit log of message\n", "         */\n", "        private long msgStoreTime;\n", "        /**\n", "         * size of bit map\n", "         */\n", "        private short bitMapSize;\n", "        /**\n", "         * filter bit map\n", "         */\n", "        private byte[] filterBitMap;\n", "\n", "        /**\n", "         * build unit from buffer from current position.\n", "         */\n", "        private boolean read(final ByteBuffer buffer) {\n", "            if (buffer.position() + 2 > buffer.limit()) {\n", "                return false;\n", "            }\n", "\n", "            this.size = buffer.getShort();\n", "\n", "            if (this.size < 1) {\n", "                return false;\n", "            }\n", "\n", "            this.tagsCode = buffer.getLong();\n", "            this.msgStoreTime = buffer.getLong();\n", "            this.bitMapSize = buffer.getShort();\n", "\n", "            if (this.bitMapSize < 1) {\n", "                return true;\n", "            }\n", "\n", "            if (this.filterBitMap == null || this.filterBitMap.length != this.bitMapSize) {\n", "                this.filterBitMap = new byte[bitMapSize];\n", "            }\n", "\n", "            buffer.get(this.filterBitMap);\n", "            return true;\n", "        }\n", "\n", "        /**\n", "         * Only read first 2 byte to get unit size.\n", "         * <p>\n", "         * if size > 0, then skip buffer position with size.\n", "         * </p>\n", "         * <p>\n", "         * if size <= 0, nothing to do.\n", "         * </p>\n", "         */\n", "        private void readBySkip(final ByteBuffer buffer) {\n", "            ByteBuffer temp = buffer.slice();\n", "\n", "            short tempSize = temp.getShort();\n", "            this.size = tempSize;\n", "\n", "            if (tempSize > 0) {\n", "                buffer.position(buffer.position() + this.size);\n", "            }\n", "        }\n", "\n", "        /**\n", "         * Transform unit data to byte array.\n", "         * <p/>\n", "         * <li>1. @{code container} can be null, it will be created if null.</li>\n", "         * <li>2. if capacity of @{code container} is less than unit size, it will be created also.</li>\n", "         * <li>3. Pls be sure that size of unit is not greater than {@link #MAX_EXT_UNIT_SIZE}</li>\n", "         */\n", "        private byte[] write(final ByteBuffer container) {\n", "            this.bitMapSize = (short) (filterBitMap == null ? 0 : filterBitMap.length);\n", "            this.size = (short) (MIN_EXT_UNIT_SIZE + this.bitMapSize);\n", "\n", "            ByteBuffer temp = container;\n", "\n", "            if (temp == null || temp.capacity() < this.size) {\n", "                temp = ByteBuffer.allocate(this.size);\n", "            }\n", "\n", "            temp.flip();\n", "            temp.limit(this.size);\n", "\n", "            temp.putShort(this.size);\n", "            temp.putLong(this.tagsCode);\n", "            temp.putLong(this.msgStoreTime);\n", "            temp.putShort(this.bitMapSize);\n", "            if (this.bitMapSize > 0) {\n", "                temp.put(this.filterBitMap);\n", "            }\n", "\n", "            return temp.array();\n", "        }\n", "\n", "        /**\n", "         * Calculate unit size by current data.\n", "         */\n", "        private int calcUnitSize() {\n", "            int sizeTemp = MIN_EXT_UNIT_SIZE + (filterBitMap == null ? 0 : filterBitMap.length);\n", "            return sizeTemp;\n", "        }\n", "\n", "        public long getTagsCode() {\n", "            return tagsCode;\n", "        }\n", "\n", "        public void setTagsCode(final long tagsCode) {\n", "            this.tagsCode = tagsCode;\n", "        }\n", "\n", "        public long getMsgStoreTime() {\n", "            return msgStoreTime;\n", "        }\n", "\n", "        public void setMsgStoreTime(final long msgStoreTime) {\n", "            this.msgStoreTime = msgStoreTime;\n", "        }\n", "\n", "        public byte[] getFilterBitMap() {\n", "            if (this.bitMapSize < 1) {\n", "                return null;\n", "            }\n", "            return filterBitMap;\n", "        }\n", "\n", "        public void setFilterBitMap(final byte[] filterBitMap) {\n", "            this.filterBitMap = filterBitMap;\n", "            // not safe transform, but size will be calculate by #calcUnitSize\n", "            this.bitMapSize = (short) (filterBitMap == null ? 0 : filterBitMap.length);\n", "        }\n", "\n", "        public short getSize() {\n", "            return size;\n", "        }\n", "\n", "        @Override\n", "        public boolean equals(Object o) {\n", "            if (this == o)\n", "                return true;\n", "            if (!(o instanceof CqExtUnit))\n", "                return false;\n", "\n", "            CqExtUnit cqExtUnit = (CqExtUnit) o;\n", "\n", "            if (bitMapSize != cqExtUnit.bitMapSize)\n", "                return false;\n", "            if (msgStoreTime != cqExtUnit.msgStoreTime)\n", "                return false;\n", "            if (size != cqExtUnit.size)\n", "                return false;\n", "            if (tagsCode != cqExtUnit.tagsCode)\n", "                return false;\n", "            if (!Arrays.equals(filterBitMap, cqExtUnit.filterBitMap))\n", "                return false;\n", "\n", "            return true;\n", "        }\n", "\n", "        @Override\n", "        public int hashCode() {\n", "            int result = (int) size;\n", "            result = 31 * result + (int) (tagsCode ^ (tagsCode >>> 32));\n", "            result = 31 * result + (int) (msgStoreTime ^ (msgStoreTime >>> 32));\n", "            result = 31 * result + (int) bitMapSize;\n", "            result = 31 * result + (filterBitMap != null ? Arrays.hashCode(filterBitMap) : 0);\n", "            return result;\n", "        }\n", "\n", "        @Override\n", "        public String toString() {\n", "            return \"CqExtUnit{\" +\n", "                \"size=\" + size +\n", "                \", tagsCode=\" + tagsCode +\n", "                \", msgStoreTime=\" + msgStoreTime +\n", "                \", bitMapSize=\" + bitMapSize +\n", "                \", filterBitMap=\" + Arrays.toString(filterBitMap) +\n", "                '}';\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.store;\n", "\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.junit.After;\n", "import org.junit.Test;\n", "\n", "import java.io.File;\n", "import java.util.Random;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class ConsumeQueueExtTest {\n", "\n", "    private static final String topic = \"abc\";\n", "    private static final int queueId = 0;\n", "    private static final String storePath = \".\" + File.separator + \"unit_test_store\";\n", "    private static final int bitMapLength = 64;\n", "    private static final int unitSizeWithBitMap = ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + bitMapLength / Byte.SIZE;\n", "    private static final int cqExtFileSize = 10 * unitSizeWithBitMap;\n", "    private static final int unitCount = 20;\n", "\n", "    protected ConsumeQueueExt genExt() {\n", "        return new ConsumeQueueExt(\n", "            topic, queueId, storePath, cqExtFileSize, bitMapLength\n", "        );\n", "    }\n", "\n", "    protected byte[] genBitMap(int bitMapLength) {\n", "        byte[] bytes = new byte[bitMapLength / Byte.SIZE];\n", "\n", "        Random random = new Random(System.currentTimeMillis());\n", "        random.nextBytes(bytes);\n", "\n", "        return bytes;\n", "    }\n", "\n", "    protected ConsumeQueueExt.CqExtUnit genUnit(boolean hasBitMap) {\n", "        ConsumeQueueExt.CqExtUnit cqExtUnit = new ConsumeQueueExt.CqExtUnit();\n", "\n", "        cqExtUnit.setTagsCode(Math.abs((new Random(System.currentTimeMillis())).nextInt()));\n", "        cqExtUnit.setMsgStoreTime(System.currentTimeMillis());\n", "        if (hasBitMap) {\n", "            cqExtUnit.setFilterBitMap(genBitMap(bitMapLength));\n", "        }\n", "\n", "        return cqExtUnit;\n", "    }\n", "\n", "    protected void putSth(ConsumeQueueExt consumeQueueExt, boolean getAfterPut,\n", "        boolean unitSameSize, int unitCount) {\n", "        for (int i = 0; i < unitCount; i++) {\n", "            ConsumeQueueExt.CqExtUnit putUnit =\n", "                unitSameSize ? genUnit(true) : genUnit(i % 2 == 0);\n", "\n", "            long addr = consumeQueueExt.put(putUnit);\n", "            assertThat(addr).isLessThan(0);\n", "\n", "            if (getAfterPut) {\n", "                ConsumeQueueExt.CqExtUnit getUnit = consumeQueueExt.get(addr);\n", "\n", "                assertThat(getUnit).isNotNull();\n", "                assertThat(putUnit).isEqualTo(getUnit);\n", "            }\n", "\n", "            try {\n", "                Thread.sleep(10);\n", "            } catch (InterruptedException e) {\n", "                e.printStackTrace();\n", "                assertThat(false).isTrue();\n", "            }\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testPut() {\n", "        ConsumeQueueExt consumeQueueExt = genExt();\n", "\n", "        try {\n", "            putSth(consumeQueueExt, true, false, unitCount);\n", "        } finally {\n", "            consumeQueueExt.destroy();\n", "            UtilAll.deleteFile(new File(storePath));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testGet() {\n", "        ConsumeQueueExt consumeQueueExt = genExt();\n", "\n", "        putSth(consumeQueueExt, false, false, unitCount);\n", "\n", "        try {\n", "            // from start.\n", "            long addr = consumeQueueExt.decorate(0);\n", "\n", "            ConsumeQueueExt.CqExtUnit unit = new ConsumeQueueExt.CqExtUnit();\n", "            while (true) {\n", "                boolean ret = consumeQueueExt.get(addr, unit);\n", "\n", "                if (!ret) {\n", "                    break;\n", "                }\n", "\n", "                assertThat(unit.getSize()).isGreaterThanOrEqualTo(ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE);\n", "\n", "                addr += unit.getSize();\n", "            }\n", "        } finally {\n", "            consumeQueueExt.destroy();\n", "            UtilAll.deleteFile(new File(storePath));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testGet_invalidAddress() {\n", "        ConsumeQueueExt consumeQueueExt = genExt();\n", "\n", "        putSth(consumeQueueExt, false, true, unitCount);\n", "\n", "        try {\n", "            ConsumeQueueExt.CqExtUnit unit = consumeQueueExt.get(0);\n", "\n", "            assertThat(unit).isNull();\n", "\n", "            long addr = (cqExtFileSize / unitSizeWithBitMap) * unitSizeWithBitMap;\n", "            addr += unitSizeWithBitMap;\n", "\n", "            unit = consumeQueueExt.get(addr);\n", "            assertThat(unit).isNull();\n", "        } finally {\n", "            consumeQueueExt.destroy();\n", "            UtilAll.deleteFile(new File(storePath));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testRecovery() {\n", "        ConsumeQueueExt putCqExt = genExt();\n", "\n", "        putSth(putCqExt, false, true, unitCount);\n", "\n", "        ConsumeQueueExt loadCqExt = genExt();\n", "\n", "        loadCqExt.load();\n", "\n", "        loadCqExt.recover();\n", "\n", "        try {\n", "            assertThat(loadCqExt.getMinAddress()).isEqualTo(Long.MIN_VALUE);\n", "\n", "            // same unit size.\n", "            int countPerFile = (cqExtFileSize - ConsumeQueueExt.END_BLANK_DATA_LENGTH) / unitSizeWithBitMap;\n", "\n", "            int lastFileUnitCount = unitCount % countPerFile;\n", "\n", "            int fileCount = unitCount / countPerFile + 1;\n", "            if (lastFileUnitCount == 0) {\n", "                fileCount -= 1;\n", "            }\n", "\n", "            if (lastFileUnitCount == 0) {\n", "                assertThat(loadCqExt.unDecorate(loadCqExt.getMaxAddress()) % cqExtFileSize).isEqualTo(0);\n", "            } else {\n", "                assertThat(loadCqExt.unDecorate(loadCqExt.getMaxAddress()))\n", "                    .isEqualTo(lastFileUnitCount * unitSizeWithBitMap + (fileCount - 1) * cqExtFileSize);\n", "            }\n", "        } finally {\n", "            putCqExt.destroy();\n", "            loadCqExt.destroy();\n", "            UtilAll.deleteFile(new File(storePath));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testTruncateByMinOffset() {\n", "        ConsumeQueueExt consumeQueueExt = genExt();\n", "\n", "        putSth(consumeQueueExt, false, true, unitCount * 2);\n", "\n", "        try {\n", "            // truncate first one file.\n", "            long address = consumeQueueExt.decorate((long) (cqExtFileSize * 1.5));\n", "\n", "            long expectMinAddress = consumeQueueExt.decorate(cqExtFileSize);\n", "\n", "            consumeQueueExt.truncateByMinAddress(address);\n", "\n", "            long minAddress = consumeQueueExt.getMinAddress();\n", "\n", "            assertThat(expectMinAddress).isEqualTo(minAddress);\n", "        } finally {\n", "            consumeQueueExt.destroy();\n", "            UtilAll.deleteFile(new File(storePath));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testTruncateByMaxOffset() {\n", "        ConsumeQueueExt consumeQueueExt = genExt();\n", "\n", "        putSth(consumeQueueExt, false, true, unitCount * 2);\n", "\n", "        try {\n", "            // truncate, only first 3 files exist.\n", "            long address = consumeQueueExt.decorate(cqExtFileSize * 2 + unitSizeWithBitMap);\n", "\n", "            long expectMaxAddress = address + unitSizeWithBitMap;\n", "\n", "            consumeQueueExt.truncateByMaxAddress(address);\n", "\n", "            long maxAddress = consumeQueueExt.getMaxAddress();\n", "\n", "            assertThat(expectMaxAddress).isEqualTo(maxAddress);\n", "        } finally {\n", "            consumeQueueExt.destroy();\n", "            UtilAll.deleteFile(new File(storePath));\n", "        }\n", "    }\n", "\n", "    @After\n", "    public void destroy() {\n", "        UtilAll.deleteFile(new File(storePath));\n", "    }\n", "}\n"], "method_lines_dic": {"ConsumeQueueExt::::isExtAddr(long)": [98, 100], "ConsumeQueueExt::::unDecorate(long)": [109, 114], "ConsumeQueueExt::::decorate(long)": [125, 130], "ConsumeQueueExt::::get(long)": [137, 144], "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)": [151, 179], "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)": [189, 237], "ConsumeQueueExt::::fullFillToEnd(org.apache.rocketmq.store.MappedFile,int)": [239, 247], "ConsumeQueueExt::::load()": [252, 256], "ConsumeQueueExt::::checkSelf()": [261, 263], "ConsumeQueueExt::::recover()": [268, 310], "ConsumeQueueExt::::truncateByMinAddress(long)": [317, 342], "ConsumeQueueExt::::truncateByMaxAddress(long)": [349, 365], "ConsumeQueueExt::::flush(int)": [370, 372], "ConsumeQueueExt::::destroy()": [377, 379], "ConsumeQueueExt::::getMaxAddress()": [388, 394], "ConsumeQueueExt::::getMinAddress()": [399, 405], "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)": [453, 478], "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)": [489, 498], "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)": [507, 529], "ConsumeQueueExt.CqExtUnit::::calcUnitSize()": [534, 537], "ConsumeQueueExt.CqExtUnit::::getTagsCode()": [539, 541], "ConsumeQueueExt.CqExtUnit::::setTagsCode(long)": [543, 545], "ConsumeQueueExt.CqExtUnit::::getMsgStoreTime()": [547, 549], "ConsumeQueueExt.CqExtUnit::::setMsgStoreTime(long)": [551, 553], "ConsumeQueueExt.CqExtUnit::::getFilterBitMap()": [555, 560], "ConsumeQueueExt.CqExtUnit::::setFilterBitMap(byte[])": [562, 566], "ConsumeQueueExt.CqExtUnit::::getSize()": [568, 570], "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)": [572, 593], "ConsumeQueueExt.CqExtUnit::::hashCode()": [595, 603], "ConsumeQueueExt.CqExtUnit::::toString()": [605, 614]}, "test_method_lines_dic": {"ConsumeQueueExtTest::::genExt()": [39, 43], "ConsumeQueueExtTest::::genBitMap(int)": [45, 52], "ConsumeQueueExtTest::::genUnit(boolean)": [54, 64], "ConsumeQueueExtTest::::testPut()": [91, 101], "ConsumeQueueExtTest::::testGet()": [103, 129], "ConsumeQueueExtTest::::testGet_invalidAddress()": [131, 151], "ConsumeQueueExtTest::::testRecovery()": [153, 189], "ConsumeQueueExtTest::::testTruncateByMinOffset()": [191, 212], "ConsumeQueueExtTest::::testTruncateByMaxOffset()": [214, 235], "ConsumeQueueExtTest::::destroy()": [237, 240]}, "reverse_method_lines_dic": {"98": "ConsumeQueueExt::::isExtAddr(long)", "99": "ConsumeQueueExt::::isExtAddr(long)", "100": "ConsumeQueueExt::::isExtAddr(long)", "109": "ConsumeQueueExt::::unDecorate(long)", "110": "ConsumeQueueExt::::unDecorate(long)", "111": "ConsumeQueueExt::::unDecorate(long)", "112": "ConsumeQueueExt::::unDecorate(long)", "113": "ConsumeQueueExt::::unDecorate(long)", "114": "ConsumeQueueExt::::unDecorate(long)", "125": "ConsumeQueueExt::::decorate(long)", "126": "ConsumeQueueExt::::decorate(long)", "127": "ConsumeQueueExt::::decorate(long)", "128": "ConsumeQueueExt::::decorate(long)", "129": "ConsumeQueueExt::::decorate(long)", "130": "ConsumeQueueExt::::decorate(long)", "137": "ConsumeQueueExt::::get(long)", "138": "ConsumeQueueExt::::get(long)", "139": "ConsumeQueueExt::::get(long)", "140": "ConsumeQueueExt::::get(long)", "141": "ConsumeQueueExt::::get(long)", "142": "ConsumeQueueExt::::get(long)", "143": "ConsumeQueueExt::::get(long)", "144": "ConsumeQueueExt::::get(long)", "151": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "152": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "153": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "154": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "155": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "156": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "157": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "158": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "159": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "160": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "161": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "162": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "163": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "164": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "165": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "166": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "167": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "168": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "169": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "170": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "171": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "172": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "173": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "174": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "175": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "176": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "177": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "178": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "179": "ConsumeQueueExt::::get(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "189": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "190": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "191": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "192": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "193": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "194": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "195": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "196": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "197": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "198": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "199": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "200": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "201": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "202": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "203": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "204": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "205": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "206": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "207": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "208": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "209": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "210": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "211": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "212": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "213": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "214": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "215": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "216": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "217": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "218": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "219": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "220": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "221": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "222": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "223": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "224": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "225": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "226": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "227": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "228": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "229": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "230": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "231": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "232": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "233": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "234": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "235": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "236": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "237": "ConsumeQueueExt::::put(org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "239": "ConsumeQueueExt::::fullFillToEnd(org.apache.rocketmq.store.MappedFile,int)", "240": "ConsumeQueueExt::::fullFillToEnd(org.apache.rocketmq.store.MappedFile,int)", "241": "ConsumeQueueExt::::fullFillToEnd(org.apache.rocketmq.store.MappedFile,int)", "242": "ConsumeQueueExt::::fullFillToEnd(org.apache.rocketmq.store.MappedFile,int)", "243": "ConsumeQueueExt::::fullFillToEnd(org.apache.rocketmq.store.MappedFile,int)", "244": "ConsumeQueueExt::::fullFillToEnd(org.apache.rocketmq.store.MappedFile,int)", "245": "ConsumeQueueExt::::fullFillToEnd(org.apache.rocketmq.store.MappedFile,int)", "246": "ConsumeQueueExt::::fullFillToEnd(org.apache.rocketmq.store.MappedFile,int)", "247": "ConsumeQueueExt::::fullFillToEnd(org.apache.rocketmq.store.MappedFile,int)", "252": "ConsumeQueueExt::::load()", "253": "ConsumeQueueExt::::load()", "254": "ConsumeQueueExt::::load()", "255": "ConsumeQueueExt::::load()", "256": "ConsumeQueueExt::::load()", "261": "ConsumeQueueExt::::checkSelf()", "262": "ConsumeQueueExt::::checkSelf()", "263": "ConsumeQueueExt::::checkSelf()", "268": "ConsumeQueueExt::::recover()", "269": "ConsumeQueueExt::::recover()", "270": "ConsumeQueueExt::::recover()", "271": "ConsumeQueueExt::::recover()", "272": "ConsumeQueueExt::::recover()", "273": "ConsumeQueueExt::::recover()", "274": "ConsumeQueueExt::::recover()", "275": "ConsumeQueueExt::::recover()", "276": "ConsumeQueueExt::::recover()", "277": "ConsumeQueueExt::::recover()", "278": "ConsumeQueueExt::::recover()", "279": "ConsumeQueueExt::::recover()", "280": "ConsumeQueueExt::::recover()", "281": "ConsumeQueueExt::::recover()", "282": "ConsumeQueueExt::::recover()", "283": "ConsumeQueueExt::::recover()", "284": "ConsumeQueueExt::::recover()", "285": "ConsumeQueueExt::::recover()", "286": "ConsumeQueueExt::::recover()", "287": "ConsumeQueueExt::::recover()", "288": "ConsumeQueueExt::::recover()", "289": "ConsumeQueueExt::::recover()", "290": "ConsumeQueueExt::::recover()", "291": "ConsumeQueueExt::::recover()", "292": "ConsumeQueueExt::::recover()", "293": "ConsumeQueueExt::::recover()", "294": "ConsumeQueueExt::::recover()", "295": "ConsumeQueueExt::::recover()", "296": "ConsumeQueueExt::::recover()", "297": "ConsumeQueueExt::::recover()", "298": "ConsumeQueueExt::::recover()", "299": "ConsumeQueueExt::::recover()", "300": "ConsumeQueueExt::::recover()", "301": "ConsumeQueueExt::::recover()", "302": "ConsumeQueueExt::::recover()", "303": "ConsumeQueueExt::::recover()", "304": "ConsumeQueueExt::::recover()", "305": "ConsumeQueueExt::::recover()", "306": "ConsumeQueueExt::::recover()", "307": "ConsumeQueueExt::::recover()", "308": "ConsumeQueueExt::::recover()", "309": "ConsumeQueueExt::::recover()", "310": "ConsumeQueueExt::::recover()", "317": "ConsumeQueueExt::::truncateByMinAddress(long)", "318": "ConsumeQueueExt::::truncateByMinAddress(long)", "319": "ConsumeQueueExt::::truncateByMinAddress(long)", "320": "ConsumeQueueExt::::truncateByMinAddress(long)", "321": "ConsumeQueueExt::::truncateByMinAddress(long)", "322": "ConsumeQueueExt::::truncateByMinAddress(long)", "323": "ConsumeQueueExt::::truncateByMinAddress(long)", "324": "ConsumeQueueExt::::truncateByMinAddress(long)", "325": "ConsumeQueueExt::::truncateByMinAddress(long)", "326": "ConsumeQueueExt::::truncateByMinAddress(long)", "327": "ConsumeQueueExt::::truncateByMinAddress(long)", "328": "ConsumeQueueExt::::truncateByMinAddress(long)", "329": "ConsumeQueueExt::::truncateByMinAddress(long)", "330": "ConsumeQueueExt::::truncateByMinAddress(long)", "331": "ConsumeQueueExt::::truncateByMinAddress(long)", "332": "ConsumeQueueExt::::truncateByMinAddress(long)", "333": "ConsumeQueueExt::::truncateByMinAddress(long)", "334": "ConsumeQueueExt::::truncateByMinAddress(long)", "335": "ConsumeQueueExt::::truncateByMinAddress(long)", "336": "ConsumeQueueExt::::truncateByMinAddress(long)", "337": "ConsumeQueueExt::::truncateByMinAddress(long)", "338": "ConsumeQueueExt::::truncateByMinAddress(long)", "339": "ConsumeQueueExt::::truncateByMinAddress(long)", "340": "ConsumeQueueExt::::truncateByMinAddress(long)", "341": "ConsumeQueueExt::::truncateByMinAddress(long)", "342": "ConsumeQueueExt::::truncateByMinAddress(long)", "349": "ConsumeQueueExt::::truncateByMaxAddress(long)", "350": "ConsumeQueueExt::::truncateByMaxAddress(long)", "351": "ConsumeQueueExt::::truncateByMaxAddress(long)", "352": "ConsumeQueueExt::::truncateByMaxAddress(long)", "353": "ConsumeQueueExt::::truncateByMaxAddress(long)", "354": "ConsumeQueueExt::::truncateByMaxAddress(long)", "355": "ConsumeQueueExt::::truncateByMaxAddress(long)", "356": "ConsumeQueueExt::::truncateByMaxAddress(long)", "357": "ConsumeQueueExt::::truncateByMaxAddress(long)", "358": "ConsumeQueueExt::::truncateByMaxAddress(long)", "359": "ConsumeQueueExt::::truncateByMaxAddress(long)", "360": "ConsumeQueueExt::::truncateByMaxAddress(long)", "361": "ConsumeQueueExt::::truncateByMaxAddress(long)", "362": "ConsumeQueueExt::::truncateByMaxAddress(long)", "363": "ConsumeQueueExt::::truncateByMaxAddress(long)", "364": "ConsumeQueueExt::::truncateByMaxAddress(long)", "365": "ConsumeQueueExt::::truncateByMaxAddress(long)", "370": "ConsumeQueueExt::::flush(int)", "371": "ConsumeQueueExt::::flush(int)", "372": "ConsumeQueueExt::::flush(int)", "377": "ConsumeQueueExt::::destroy()", "378": "ConsumeQueueExt::::destroy()", "379": "ConsumeQueueExt::::destroy()", "388": "ConsumeQueueExt::::getMaxAddress()", "389": "ConsumeQueueExt::::getMaxAddress()", "390": "ConsumeQueueExt::::getMaxAddress()", "391": "ConsumeQueueExt::::getMaxAddress()", "392": "ConsumeQueueExt::::getMaxAddress()", "393": "ConsumeQueueExt::::getMaxAddress()", "394": "ConsumeQueueExt::::getMaxAddress()", "399": "ConsumeQueueExt::::getMinAddress()", "400": "ConsumeQueueExt::::getMinAddress()", "401": "ConsumeQueueExt::::getMinAddress()", "402": "ConsumeQueueExt::::getMinAddress()", "403": "ConsumeQueueExt::::getMinAddress()", "404": "ConsumeQueueExt::::getMinAddress()", "405": "ConsumeQueueExt::::getMinAddress()", "453": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "454": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "455": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "456": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "457": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "458": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "459": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "460": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "461": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "462": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "463": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "464": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "465": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "466": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "467": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "468": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "469": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "470": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "471": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "472": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "473": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "474": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "475": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "476": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "477": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "478": "ConsumeQueueExt.CqExtUnit::::read(java.nio.ByteBuffer)", "489": "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)", "490": "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)", "491": "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)", "492": "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)", "493": "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)", "494": "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)", "495": "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)", "496": "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)", "497": "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)", "498": "ConsumeQueueExt.CqExtUnit::::readBySkip(java.nio.ByteBuffer)", "507": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "508": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "509": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "510": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "511": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "512": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "513": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "514": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "515": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "516": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "517": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "518": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "519": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "520": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "521": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "522": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "523": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "524": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "525": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "526": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "527": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "528": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "529": "ConsumeQueueExt.CqExtUnit::::write(java.nio.ByteBuffer)", "534": "ConsumeQueueExt.CqExtUnit::::calcUnitSize()", "535": "ConsumeQueueExt.CqExtUnit::::calcUnitSize()", "536": "ConsumeQueueExt.CqExtUnit::::calcUnitSize()", "537": "ConsumeQueueExt.CqExtUnit::::calcUnitSize()", "539": "ConsumeQueueExt.CqExtUnit::::getTagsCode()", "540": "ConsumeQueueExt.CqExtUnit::::getTagsCode()", "541": "ConsumeQueueExt.CqExtUnit::::getTagsCode()", "543": "ConsumeQueueExt.CqExtUnit::::setTagsCode(long)", "544": "ConsumeQueueExt.CqExtUnit::::setTagsCode(long)", "545": "ConsumeQueueExt.CqExtUnit::::setTagsCode(long)", "547": "ConsumeQueueExt.CqExtUnit::::getMsgStoreTime()", "548": "ConsumeQueueExt.CqExtUnit::::getMsgStoreTime()", "549": "ConsumeQueueExt.CqExtUnit::::getMsgStoreTime()", "551": "ConsumeQueueExt.CqExtUnit::::setMsgStoreTime(long)", "552": "ConsumeQueueExt.CqExtUnit::::setMsgStoreTime(long)", "553": "ConsumeQueueExt.CqExtUnit::::setMsgStoreTime(long)", "555": "ConsumeQueueExt.CqExtUnit::::getFilterBitMap()", "556": "ConsumeQueueExt.CqExtUnit::::getFilterBitMap()", "557": "ConsumeQueueExt.CqExtUnit::::getFilterBitMap()", "558": "ConsumeQueueExt.CqExtUnit::::getFilterBitMap()", "559": "ConsumeQueueExt.CqExtUnit::::getFilterBitMap()", "560": "ConsumeQueueExt.CqExtUnit::::getFilterBitMap()", "562": "ConsumeQueueExt.CqExtUnit::::setFilterBitMap(byte[])", "563": "ConsumeQueueExt.CqExtUnit::::setFilterBitMap(byte[])", "564": "ConsumeQueueExt.CqExtUnit::::setFilterBitMap(byte[])", "565": "ConsumeQueueExt.CqExtUnit::::setFilterBitMap(byte[])", "566": "ConsumeQueueExt.CqExtUnit::::setFilterBitMap(byte[])", "568": "ConsumeQueueExt.CqExtUnit::::getSize()", "569": "ConsumeQueueExt.CqExtUnit::::getSize()", "570": "ConsumeQueueExt.CqExtUnit::::getSize()", "572": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "573": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "574": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "575": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "576": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "577": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "578": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "579": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "580": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "581": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "582": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "583": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "584": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "585": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "586": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "587": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "588": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "589": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "590": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "591": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "592": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "593": "ConsumeQueueExt.CqExtUnit::::equals(java.lang.Object)", "595": "ConsumeQueueExt.CqExtUnit::::hashCode()", "596": "ConsumeQueueExt.CqExtUnit::::hashCode()", "597": "ConsumeQueueExt.CqExtUnit::::hashCode()", "598": "ConsumeQueueExt.CqExtUnit::::hashCode()", "599": "ConsumeQueueExt.CqExtUnit::::hashCode()", "600": "ConsumeQueueExt.CqExtUnit::::hashCode()", "601": "ConsumeQueueExt.CqExtUnit::::hashCode()", "602": "ConsumeQueueExt.CqExtUnit::::hashCode()", "603": "ConsumeQueueExt.CqExtUnit::::hashCode()", "605": "ConsumeQueueExt.CqExtUnit::::toString()", "606": "ConsumeQueueExt.CqExtUnit::::toString()", "607": "ConsumeQueueExt.CqExtUnit::::toString()", "608": "ConsumeQueueExt.CqExtUnit::::toString()", "609": "ConsumeQueueExt.CqExtUnit::::toString()", "610": "ConsumeQueueExt.CqExtUnit::::toString()", "611": "ConsumeQueueExt.CqExtUnit::::toString()", "612": "ConsumeQueueExt.CqExtUnit::::toString()", "613": "ConsumeQueueExt.CqExtUnit::::toString()", "614": "ConsumeQueueExt.CqExtUnit::::toString()"}, "test_reverse_method_lines_dic": {"39": "ConsumeQueueExtTest::::genExt()", "40": "ConsumeQueueExtTest::::genExt()", "41": "ConsumeQueueExtTest::::genExt()", "42": "ConsumeQueueExtTest::::genExt()", "43": "ConsumeQueueExtTest::::genExt()", "45": "ConsumeQueueExtTest::::genBitMap(int)", "46": "ConsumeQueueExtTest::::genBitMap(int)", "47": "ConsumeQueueExtTest::::genBitMap(int)", "48": "ConsumeQueueExtTest::::genBitMap(int)", "49": "ConsumeQueueExtTest::::genBitMap(int)", "50": "ConsumeQueueExtTest::::genBitMap(int)", "51": "ConsumeQueueExtTest::::genBitMap(int)", "52": "ConsumeQueueExtTest::::genBitMap(int)", "54": "ConsumeQueueExtTest::::genUnit(boolean)", "55": "ConsumeQueueExtTest::::genUnit(boolean)", "56": "ConsumeQueueExtTest::::genUnit(boolean)", "57": "ConsumeQueueExtTest::::genUnit(boolean)", "58": "ConsumeQueueExtTest::::genUnit(boolean)", "59": "ConsumeQueueExtTest::::genUnit(boolean)", "60": "ConsumeQueueExtTest::::genUnit(boolean)", "61": "ConsumeQueueExtTest::::genUnit(boolean)", "62": "ConsumeQueueExtTest::::genUnit(boolean)", "63": "ConsumeQueueExtTest::::genUnit(boolean)", "64": "ConsumeQueueExtTest::::genUnit(boolean)", "91": "ConsumeQueueExtTest::::testPut()", "92": "ConsumeQueueExtTest::::testPut()", "93": "ConsumeQueueExtTest::::testPut()", "94": "ConsumeQueueExtTest::::testPut()", "95": "ConsumeQueueExtTest::::testPut()", "96": "ConsumeQueueExtTest::::testPut()", "97": "ConsumeQueueExtTest::::testPut()", "98": "ConsumeQueueExtTest::::testPut()", "99": "ConsumeQueueExtTest::::testPut()", "100": "ConsumeQueueExtTest::::testPut()", "101": "ConsumeQueueExtTest::::testPut()", "103": "ConsumeQueueExtTest::::testGet()", "104": "ConsumeQueueExtTest::::testGet()", "105": "ConsumeQueueExtTest::::testGet()", "106": "ConsumeQueueExtTest::::testGet()", "107": "ConsumeQueueExtTest::::testGet()", "108": "ConsumeQueueExtTest::::testGet()", "109": "ConsumeQueueExtTest::::testGet()", "110": "ConsumeQueueExtTest::::testGet()", "111": "ConsumeQueueExtTest::::testGet()", "112": "ConsumeQueueExtTest::::testGet()", "113": "ConsumeQueueExtTest::::testGet()", "114": "ConsumeQueueExtTest::::testGet()", "115": "ConsumeQueueExtTest::::testGet()", "116": "ConsumeQueueExtTest::::testGet()", "117": "ConsumeQueueExtTest::::testGet()", "118": "ConsumeQueueExtTest::::testGet()", "119": "ConsumeQueueExtTest::::testGet()", "120": "ConsumeQueueExtTest::::testGet()", "121": "ConsumeQueueExtTest::::testGet()", "122": "ConsumeQueueExtTest::::testGet()", "123": "ConsumeQueueExtTest::::testGet()", "124": "ConsumeQueueExtTest::::testGet()", "125": "ConsumeQueueExtTest::::testGet()", "126": "ConsumeQueueExtTest::::testGet()", "127": "ConsumeQueueExtTest::::testGet()", "128": "ConsumeQueueExtTest::::testGet()", "129": "ConsumeQueueExtTest::::testGet()", "131": "ConsumeQueueExtTest::::testGet_invalidAddress()", "132": "ConsumeQueueExtTest::::testGet_invalidAddress()", "133": "ConsumeQueueExtTest::::testGet_invalidAddress()", "134": "ConsumeQueueExtTest::::testGet_invalidAddress()", "135": "ConsumeQueueExtTest::::testGet_invalidAddress()", "136": "ConsumeQueueExtTest::::testGet_invalidAddress()", "137": "ConsumeQueueExtTest::::testGet_invalidAddress()", "138": "ConsumeQueueExtTest::::testGet_invalidAddress()", "139": "ConsumeQueueExtTest::::testGet_invalidAddress()", "140": "ConsumeQueueExtTest::::testGet_invalidAddress()", "141": "ConsumeQueueExtTest::::testGet_invalidAddress()", "142": "ConsumeQueueExtTest::::testGet_invalidAddress()", "143": "ConsumeQueueExtTest::::testGet_invalidAddress()", "144": "ConsumeQueueExtTest::::testGet_invalidAddress()", "145": "ConsumeQueueExtTest::::testGet_invalidAddress()", "146": "ConsumeQueueExtTest::::testGet_invalidAddress()", "147": "ConsumeQueueExtTest::::testGet_invalidAddress()", "148": "ConsumeQueueExtTest::::testGet_invalidAddress()", "149": "ConsumeQueueExtTest::::testGet_invalidAddress()", "150": "ConsumeQueueExtTest::::testGet_invalidAddress()", "151": "ConsumeQueueExtTest::::testGet_invalidAddress()", "153": "ConsumeQueueExtTest::::testRecovery()", "154": "ConsumeQueueExtTest::::testRecovery()", "155": "ConsumeQueueExtTest::::testRecovery()", "156": "ConsumeQueueExtTest::::testRecovery()", "157": "ConsumeQueueExtTest::::testRecovery()", "158": "ConsumeQueueExtTest::::testRecovery()", "159": "ConsumeQueueExtTest::::testRecovery()", "160": "ConsumeQueueExtTest::::testRecovery()", "161": "ConsumeQueueExtTest::::testRecovery()", "162": "ConsumeQueueExtTest::::testRecovery()", "163": "ConsumeQueueExtTest::::testRecovery()", "164": "ConsumeQueueExtTest::::testRecovery()", "165": "ConsumeQueueExtTest::::testRecovery()", "166": "ConsumeQueueExtTest::::testRecovery()", "167": "ConsumeQueueExtTest::::testRecovery()", "168": "ConsumeQueueExtTest::::testRecovery()", "169": "ConsumeQueueExtTest::::testRecovery()", "170": "ConsumeQueueExtTest::::testRecovery()", "171": "ConsumeQueueExtTest::::testRecovery()", "172": "ConsumeQueueExtTest::::testRecovery()", "173": "ConsumeQueueExtTest::::testRecovery()", "174": "ConsumeQueueExtTest::::testRecovery()", "175": "ConsumeQueueExtTest::::testRecovery()", "176": "ConsumeQueueExtTest::::testRecovery()", "177": "ConsumeQueueExtTest::::testRecovery()", "178": "ConsumeQueueExtTest::::testRecovery()", "179": "ConsumeQueueExtTest::::testRecovery()", "180": "ConsumeQueueExtTest::::testRecovery()", "181": "ConsumeQueueExtTest::::testRecovery()", "182": "ConsumeQueueExtTest::::testRecovery()", "183": "ConsumeQueueExtTest::::testRecovery()", "184": "ConsumeQueueExtTest::::testRecovery()", "185": "ConsumeQueueExtTest::::testRecovery()", "186": "ConsumeQueueExtTest::::testRecovery()", "187": "ConsumeQueueExtTest::::testRecovery()", "188": "ConsumeQueueExtTest::::testRecovery()", "189": "ConsumeQueueExtTest::::testRecovery()", "191": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "192": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "193": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "194": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "195": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "196": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "197": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "198": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "199": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "200": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "201": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "202": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "203": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "204": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "205": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "206": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "207": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "208": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "209": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "210": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "211": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "212": "ConsumeQueueExtTest::::testTruncateByMinOffset()", "214": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "215": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "216": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "217": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "218": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "219": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "220": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "221": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "222": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "223": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "224": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "225": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "226": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "227": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "228": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "229": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "230": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "231": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "232": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "233": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "234": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "235": "ConsumeQueueExtTest::::testTruncateByMaxOffset()", "237": "ConsumeQueueExtTest::::destroy()", "238": "ConsumeQueueExtTest::::destroy()", "239": "ConsumeQueueExtTest::::destroy()", "240": "ConsumeQueueExtTest::::destroy()"}, "tests": [{"test_lines": [91, 101], "covered_lines": [40, 71, 73, 74, 76, 77, 79, 83, 85, 86, 90, 99, 110, 111, 126, 127, 138, 139, 140, 152, 156, 157, 159, 160, 164, 166, 167, 171, 173, 175, 176, 178, 190, 192, 193, 197, 202, 203, 206, 207, 209, 210, 213, 217, 218, 221, 222, 223, 224, 225, 228, 229, 240, 241, 244, 246, 247, 378, 379, 418, 419, 454, 458, 460, 464, 465, 466, 468, 469, 472, 473, 476, 477, 508, 509, 511, 513, 517, 518, 520, 521, 522, 523, 524, 525, 528, 535, 536, 544, 545, 552, 553, 563, 565, 566, 574, 576, 579, 581, 583, 585, 587, 589, 592]}, {"test_lines": [103, 129], "covered_lines": [40, 71, 73, 74, 76, 77, 79, 83, 85, 86, 90, 99, 110, 111, 126, 127, 152, 156, 157, 159, 160, 164, 166, 167, 171, 173, 175, 176, 178, 190, 192, 193, 197, 202, 203, 206, 207, 209, 210, 213, 217, 218, 221, 222, 223, 224, 225, 228, 229, 240, 241, 244, 246, 247, 378, 379, 418, 419, 454, 458, 460, 461, 464, 465, 466, 468, 469, 472, 473, 476, 477, 508, 509, 511, 513, 517, 518, 520, 521, 522, 523, 524, 525, 528, 535, 536, 544, 545, 552, 553, 563, 565, 566, 569]}, {"test_lines": [131, 151], "covered_lines": [40, 71, 73, 74, 76, 77, 79, 83, 85, 86, 90, 99, 126, 127, 138, 139, 143, 152, 153, 190, 192, 193, 197, 202, 203, 206, 207, 209, 210, 213, 217, 218, 221, 222, 223, 224, 225, 228, 229, 240, 241, 244, 246, 247, 378, 379, 418, 419, 508, 509, 511, 513, 517, 518, 520, 521, 522, 523, 524, 525, 528, 535, 536, 544, 545, 552, 553, 563, 565, 566]}, {"test_lines": [153, 189], "covered_lines": [40, 71, 73, 74, 76, 77, 79, 83, 85, 86, 90, 99, 110, 111, 126, 127, 190, 192, 193, 197, 202, 203, 206, 207, 209, 210, 213, 217, 218, 221, 222, 223, 224, 225, 228, 229, 240, 241, 244, 246, 247, 253, 254, 255, 269, 270, 275, 277, 278, 279, 280, 281, 283, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 306, 307, 308, 309, 310, 378, 379, 389, 390, 393, 400, 401, 404, 418, 419, 490, 492, 493, 495, 496, 498, 508, 509, 511, 513, 517, 518, 520, 521, 522, 523, 524, 525, 528, 535, 536, 544, 545, 552, 553, 563, 565, 566, 569]}, {"test_lines": [191, 212], "covered_lines": [40, 71, 73, 74, 76, 77, 79, 83, 85, 86, 90, 99, 110, 111, 126, 127, 190, 192, 193, 197, 202, 203, 206, 207, 209, 210, 213, 217, 218, 221, 222, 223, 224, 225, 228, 229, 240, 241, 244, 246, 247, 318, 322, 324, 326, 327, 329, 330, 332, 333, 334, 335, 336, 339, 341, 342, 378, 379, 400, 401, 404, 418, 419, 508, 509, 511, 513, 517, 518, 520, 521, 522, 523, 524, 525, 528, 535, 536, 544, 545, 552, 553, 563, 565, 566]}, {"test_lines": [214, 235], "covered_lines": [40, 71, 73, 74, 76, 77, 79, 83, 85, 86, 90, 99, 110, 111, 126, 127, 138, 139, 140, 152, 156, 157, 159, 160, 164, 166, 167, 171, 173, 175, 176, 178, 190, 192, 193, 197, 202, 203, 206, 207, 209, 210, 213, 217, 218, 221, 222, 223, 224, 225, 228, 229, 240, 241, 244, 246, 247, 350, 354, 356, 357, 362, 364, 365, 378, 379, 389, 390, 393, 418, 419, 454, 458, 460, 464, 465, 466, 468, 472, 473, 476, 477, 508, 509, 511, 513, 517, 518, 520, 521, 522, 523, 524, 525, 528, 535, 536, 544, 545, 552, 553, 563, 565, 566, 569]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.store;\n", "\n", "import java.io.File;\n", "import java.nio.ByteBuffer;\n", "import java.util.List;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.store.config.BrokerRole;\n", "import org.apache.rocketmq.store.config.StorePathConfigHelper;\n", "\n", "/**\n", " * \u6d88\u606f\u6d88\u8d39\u961f\u5217\uff0c\u5f15\u5165\u7684\u76ee\u7684\u4e3b\u8981\u662f\u63d0\u9ad8\u6d88\u606f\u6d88\u8d39\u7684\u6027\u80fd\uff0c\u7531\u4e8eRocketMQ\u662f\u57fa\u4e8e\u4e3b\u9898topic\u7684\u8ba2\u9605\u6a21\u5f0f\uff0c\n", " * \u6d88\u606f\u6d88\u8d39\u662f\u9488\u5bf9\u4e3b\u9898\u8fdb\u884c\u7684\uff0c\u5982\u679c\u8981\u904d\u5386commitlog\u6587\u4ef6\u4e2d\u6839\u636etopic\u68c0\u7d22\u6d88\u606f\u662f\u975e\u5e38\u4f4e\u6548\u7684\u3002\n", " * Consumer\u5373\u53ef\u6839\u636eConsumeQueue\u6765\u67e5\u627e\u5f85\u6d88\u8d39\u7684\u6d88\u606f\u3002\u5176\u4e2d\uff0cConsumeQueue\uff08\u903b\u8f91\u6d88\u8d39\u961f\u5217\uff09\u4f5c\u4e3a\u6d88\u8d39\u6d88\u606f\u7684\u7d22\u5f15\uff0c\n", " * \u4fdd\u5b58\u4e86\u6307\u5b9aTopic\u4e0b\u7684\u961f\u5217\u6d88\u606f\u5728CommitLog\u4e2d\u7684\u8d77\u59cb\u7269\u7406\u504f\u79fb\u91cfoffset\uff0c\u6d88\u606f\u5927\u5c0fsize\u548c\u6d88\u606fTag\u7684HashCode\u503c\u3002\n", " * consumequeue\u6587\u4ef6\u53ef\u4ee5\u770b\u6210\u662f\u57fa\u4e8etopic\u7684commitlog\u7d22\u5f15\u6587\u4ef6\uff0c\u6545consumequeue\u6587\u4ef6\u5939\u7684\u7ec4\u7ec7\u65b9\u5f0f\u5982\u4e0b\uff1atopic/queue/file\u4e09\u5c42\u7ec4\u7ec7\u7ed3\u6784\uff0c\n", " * \u5177\u4f53\u5b58\u50a8\u8def\u5f84\u4e3a\uff1a$HOME/store/consumequeue/{topic}/{queueId}/{fileName}\u3002\u540c\u6837consumequeue\u6587\u4ef6\u91c7\u53d6\u5b9a\u957f\u8bbe\u8ba1\uff0c\u6bcf\u4e00\u4e2a\u6761\u76ee\u517120\u4e2a\u5b57\u8282\uff0c\n", " * \u5206\u522b\u4e3a8\u5b57\u8282\u7684commitlog\u7269\u7406\u504f\u79fb\u91cf\u30014\u5b57\u8282\u7684\u6d88\u606f\u957f\u5ea6\u30018\u5b57\u8282tag hashcode\uff0c\u5355\u4e2a\u6587\u4ef6\u753130W\u4e2a\u6761\u76ee\u7ec4\u6210\uff0c\u53ef\u4ee5\u50cf\u6570\u7ec4\u4e00\u6837\u968f\u673a\u8bbf\u95ee\u6bcf\u4e00\u4e2a\u6761\u76ee\uff0c\u6bcf\u4e2aConsumeQueue\u6587\u4ef6\u5927\u5c0f\u7ea65.72M\uff1b\n", " */\n", "public class ConsumeQueue {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n", "\n", "    public static final int CQ_STORE_UNIT_SIZE = 20;\n", "    private static final InternalLogger LOG_ERROR = InternalLoggerFactory.getLogger(LoggerName.STORE_ERROR_LOGGER_NAME);\n", "\n", "    private final DefaultMessageStore defaultMessageStore;\n", "\n", "    private final MappedFileQueue mappedFileQueue;\n", "    private final String topic;\n", "    private final int queueId;\n", "    private final ByteBuffer byteBufferIndex;\n", "\n", "    private final String storePath;\n", "    private final int mappedFileSize;\n", "    private long maxPhysicOffset = -1;\n", "    private volatile long minLogicOffset = 0;\n", "    private ConsumeQueueExt consumeQueueExt = null;\n", "\n", "    public ConsumeQueue(\n", "        final String topic,\n", "        final int queueId,\n", "        final String storePath,\n", "        final int mappedFileSize,\n", "        final DefaultMessageStore defaultMessageStore) {\n", "        this.storePath = storePath;\n", "        this.mappedFileSize = mappedFileSize;\n", "        this.defaultMessageStore = defaultMessageStore;\n", "\n", "        this.topic = topic;\n", "        this.queueId = queueId;\n", "\n", "        String queueDir = this.storePath\n", "            + File.separator + topic\n", "            + File.separator + queueId;\n", "\n", "        this.mappedFileQueue = new MappedFileQueue(queueDir, mappedFileSize, null);\n", "\n", "        this.byteBufferIndex = ByteBuffer.allocate(CQ_STORE_UNIT_SIZE);\n", "\n", "        if (defaultMessageStore.getMessageStoreConfig().isEnableConsumeQueueExt()) {\n", "            this.consumeQueueExt = new ConsumeQueueExt(\n", "                topic,\n", "                queueId,\n", "                StorePathConfigHelper.getStorePathConsumeQueueExt(defaultMessageStore.getMessageStoreConfig().getStorePathRootDir()),\n", "                defaultMessageStore.getMessageStoreConfig().getMappedFileSizeConsumeQueueExt(),\n", "                defaultMessageStore.getMessageStoreConfig().getBitMapLengthConsumeQueueExt()\n", "            );\n", "        }\n", "    }\n", "\n", "    public boolean load() {\n", "        boolean result = this.mappedFileQueue.load();\n", "        log.info(\"load consume queue \" + this.topic + \"-\" + this.queueId + \" \" + (result ? \"OK\" : \"Failed\"));\n", "        if (isExtReadEnable()) {\n", "            result &= this.consumeQueueExt.load();\n", "        }\n", "        return result;\n", "    }\n", "\n", "    public void recover() {\n", "        final List<MappedFile> mappedFiles = this.mappedFileQueue.getMappedFiles();\n", "        if (!mappedFiles.isEmpty()) {\n", "\n", "            int index = mappedFiles.size() - 3;\n", "            if (index < 0)\n", "                index = 0;\n", "\n", "            int mappedFileSizeLogics = this.mappedFileSize;\n", "            MappedFile mappedFile = mappedFiles.get(index);\n", "            ByteBuffer byteBuffer = mappedFile.sliceByteBuffer();\n", "            long processOffset = mappedFile.getFileFromOffset();\n", "            long mappedFileOffset = 0;\n", "            long maxExtAddr = 1;\n", "            while (true) {\n", "                for (int i = 0; i < mappedFileSizeLogics; i += CQ_STORE_UNIT_SIZE) {\n", "                    long offset = byteBuffer.getLong();\n", "                    int size = byteBuffer.getInt();\n", "                    long tagsCode = byteBuffer.getLong();\n", "\n", "                    if (offset >= 0 && size > 0) {\n", "                        mappedFileOffset = i + CQ_STORE_UNIT_SIZE;\n", "                        this.maxPhysicOffset = offset + size;\n", "                        if (isExtAddr(tagsCode)) {\n", "                            maxExtAddr = tagsCode;\n", "                        }\n", "                    } else {\n", "                        log.info(\"recover current consume queue file over,  \" + mappedFile.getFileName() + \" \"\n", "                            + offset + \" \" + size + \" \" + tagsCode);\n", "                        break;\n", "                    }\n", "                }\n", "\n", "                if (mappedFileOffset == mappedFileSizeLogics) {\n", "                    index++;\n", "                    if (index >= mappedFiles.size()) {\n", "\n", "                        log.info(\"recover last consume queue file over, last mapped file \"\n", "                            + mappedFile.getFileName());\n", "                        break;\n", "                    } else {\n", "                        mappedFile = mappedFiles.get(index);\n", "                        byteBuffer = mappedFile.sliceByteBuffer();\n", "                        processOffset = mappedFile.getFileFromOffset();\n", "                        mappedFileOffset = 0;\n", "                        log.info(\"recover next consume queue file, \" + mappedFile.getFileName());\n", "                    }\n", "                } else {\n", "                    log.info(\"recover current consume queue queue over \" + mappedFile.getFileName() + \" \"\n", "                        + (processOffset + mappedFileOffset));\n", "                    break;\n", "                }\n", "            }\n", "\n", "            processOffset += mappedFileOffset;\n", "            this.mappedFileQueue.setFlushedWhere(processOffset);\n", "            this.mappedFileQueue.setCommittedWhere(processOffset);\n", "            this.mappedFileQueue.truncateDirtyFiles(processOffset);\n", "\n", "            if (isExtReadEnable()) {\n", "                this.consumeQueueExt.recover();\n", "                log.info(\"Truncate consume queue extend file by max {}\", maxExtAddr);\n", "                this.consumeQueueExt.truncateByMaxAddress(maxExtAddr);\n", "            }\n", "        }\n", "    }\n", "\n", "    public long getOffsetInQueueByTime(final long timestamp) {\n", "        MappedFile mappedFile = this.mappedFileQueue.getMappedFileByTime(timestamp);\n", "        if (mappedFile != null) {\n", "            long offset = 0;\n", "            int low = minLogicOffset > mappedFile.getFileFromOffset() ? (int) (minLogicOffset - mappedFile.getFileFromOffset()) : 0;\n", "            int high = 0;\n", "            int midOffset = -1, targetOffset = -1, leftOffset = -1, rightOffset = -1;\n", "            long leftIndexValue = -1L, rightIndexValue = -1L;\n", "            long minPhysicOffset = this.defaultMessageStore.getMinPhyOffset();\n", "            SelectMappedBufferResult sbr = mappedFile.selectMappedBuffer(0);\n", "            if (null != sbr) {\n", "                ByteBuffer byteBuffer = sbr.getByteBuffer();\n", "                high = byteBuffer.limit() - CQ_STORE_UNIT_SIZE;\n", "                try {\n", "                    while (high >= low) {\n", "                        midOffset = (low + high) / (2 * CQ_STORE_UNIT_SIZE) * CQ_STORE_UNIT_SIZE;\n", "                        byteBuffer.position(midOffset);\n", "                        long phyOffset = byteBuffer.getLong();\n", "                        int size = byteBuffer.getInt();\n", "                        if (phyOffset < minPhysicOffset) {\n", "                            low = midOffset + CQ_STORE_UNIT_SIZE;\n", "                            leftOffset = midOffset;\n", "                            continue;\n", "                        }\n", "\n", "                        long storeTime =\n", "                            this.defaultMessageStore.getCommitLog().pickupStoreTimestamp(phyOffset, size);\n", "                        if (storeTime < 0) {\n", "                            return 0;\n", "                        } else if (storeTime == timestamp) {\n", "                            targetOffset = midOffset;\n", "                            break;\n", "                        } else if (storeTime > timestamp) {\n", "                            high = midOffset - CQ_STORE_UNIT_SIZE;\n", "                            rightOffset = midOffset;\n", "                            rightIndexValue = storeTime;\n", "                        } else {\n", "                            low = midOffset + CQ_STORE_UNIT_SIZE;\n", "                            leftOffset = midOffset;\n", "                            leftIndexValue = storeTime;\n", "                        }\n", "                    }\n", "\n", "                    if (targetOffset != -1) {\n", "\n", "                        offset = targetOffset;\n", "                    } else {\n", "                        if (leftIndexValue == -1) {\n", "\n", "                            offset = rightOffset;\n", "                        } else if (rightIndexValue == -1) {\n", "\n", "                            offset = leftOffset;\n", "                        } else {\n", "                            offset =\n", "                                Math.abs(timestamp - leftIndexValue) > Math.abs(timestamp\n", "                                    - rightIndexValue) ? rightOffset : leftOffset;\n", "                        }\n", "                    }\n", "\n", "                    return (mappedFile.getFileFromOffset() + offset) / CQ_STORE_UNIT_SIZE;\n", "                } finally {\n", "                    sbr.release();\n", "                }\n", "            }\n", "        }\n", "        return 0;\n", "    }\n", "\n", "    public void truncateDirtyLogicFiles(long phyOffet) {\n", "\n", "        int logicFileSize = this.mappedFileSize;\n", "\n", "        this.maxPhysicOffset = phyOffet;\n", "        long maxExtAddr = 1;\n", "        while (true) {\n", "            MappedFile mappedFile = this.mappedFileQueue.getLastMappedFile();\n", "            if (mappedFile != null) {\n", "                ByteBuffer byteBuffer = mappedFile.sliceByteBuffer();\n", "\n", "                mappedFile.setWrotePosition(0);\n", "                mappedFile.setCommittedPosition(0);\n", "                mappedFile.setFlushedPosition(0);\n", "\n", "                for (int i = 0; i < logicFileSize; i += CQ_STORE_UNIT_SIZE) {\n", "                    long offset = byteBuffer.getLong();\n", "                    int size = byteBuffer.getInt();\n", "                    long tagsCode = byteBuffer.getLong();\n", "\n", "                    if (0 == i) {\n", "                        if (offset >= phyOffet) {\n", "                            this.mappedFileQueue.deleteLastMappedFile();\n", "                            break;\n", "                        } else {\n", "                            int pos = i + CQ_STORE_UNIT_SIZE;\n", "                            mappedFile.setWrotePosition(pos);\n", "                            mappedFile.setCommittedPosition(pos);\n", "                            mappedFile.setFlushedPosition(pos);\n", "                            this.maxPhysicOffset = offset + size;\n", "                            // This maybe not take effect, when not every consume queue has extend file.\n", "                            if (isExtAddr(tagsCode)) {\n", "                                maxExtAddr = tagsCode;\n", "                            }\n", "                        }\n", "                    } else {\n", "\n", "                        if (offset >= 0 && size > 0) {\n", "\n", "                            if (offset >= phyOffet) {\n", "                                return;\n", "                            }\n", "\n", "                            int pos = i + CQ_STORE_UNIT_SIZE;\n", "                            mappedFile.setWrotePosition(pos);\n", "                            mappedFile.setCommittedPosition(pos);\n", "                            mappedFile.setFlushedPosition(pos);\n", "                            this.maxPhysicOffset = offset + size;\n", "                            if (isExtAddr(tagsCode)) {\n", "                                maxExtAddr = tagsCode;\n", "                            }\n", "\n", "                            if (pos == logicFileSize) {\n", "                                return;\n", "                            }\n", "                        } else {\n", "                            return;\n", "                        }\n", "                    }\n", "                }\n", "            } else {\n", "                break;\n", "            }\n", "        }\n", "\n", "        if (isExtReadEnable()) {\n", "            this.consumeQueueExt.truncateByMaxAddress(maxExtAddr);\n", "        }\n", "    }\n", "\n", "    public long getLastOffset() {\n", "        long lastOffset = -1;\n", "\n", "        int logicFileSize = this.mappedFileSize;\n", "\n", "        MappedFile mappedFile = this.mappedFileQueue.getLastMappedFile();\n", "        if (mappedFile != null) {\n", "\n", "            int position = mappedFile.getWrotePosition() - CQ_STORE_UNIT_SIZE;\n", "            if (position < 0)\n", "                position = 0;\n", "\n", "            ByteBuffer byteBuffer = mappedFile.sliceByteBuffer();\n", "            byteBuffer.position(position);\n", "            for (int i = 0; i < logicFileSize; i += CQ_STORE_UNIT_SIZE) {\n", "                long offset = byteBuffer.getLong();\n", "                int size = byteBuffer.getInt();\n", "                byteBuffer.getLong();\n", "\n", "                if (offset >= 0 && size > 0) {\n", "                    lastOffset = offset + size;\n", "                } else {\n", "                    break;\n", "                }\n", "            }\n", "        }\n", "\n", "        return lastOffset;\n", "    }\n", "\n", "    public boolean flush(final int flushLeastPages) {\n", "        boolean result = this.mappedFileQueue.flush(flushLeastPages);\n", "        if (isExtReadEnable()) {\n", "            result = result & this.consumeQueueExt.flush(flushLeastPages);\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    public int deleteExpiredFile(long offset) {\n", "        int cnt = this.mappedFileQueue.deleteExpiredFileByOffset(offset, CQ_STORE_UNIT_SIZE);\n", "        this.correctMinOffset(offset);\n", "        return cnt;\n", "    }\n", "\n", "    public void correctMinOffset(long phyMinOffset) {\n", "        MappedFile mappedFile = this.mappedFileQueue.getFirstMappedFile();\n", "        long minExtAddr = 1;\n", "        if (mappedFile != null) {\n", "            SelectMappedBufferResult result = mappedFile.selectMappedBuffer(0);\n", "            if (result != null) {\n", "                try {\n", "                    for (int i = 0; i < result.getSize(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {\n", "                        long offsetPy = result.getByteBuffer().getLong();\n", "                        result.getByteBuffer().getInt();\n", "                        long tagsCode = result.getByteBuffer().getLong();\n", "\n", "                        if (offsetPy >= phyMinOffset) {\n", "                            this.minLogicOffset = mappedFile.getFileFromOffset() + i;\n", "                            log.info(\"Compute logical min offset: {}, topic: {}, queueId: {}\",\n", "                                this.getMinOffsetInQueue(), this.topic, this.queueId);\n", "                            // This maybe not take effect, when not every consume queue has extend file.\n", "                            if (isExtAddr(tagsCode)) {\n", "                                minExtAddr = tagsCode;\n", "                            }\n", "                            break;\n", "                        }\n", "                    }\n", "                } catch (Exception e) {\n", "                    log.error(\"Exception thrown when correctMinOffset\", e);\n", "                } finally {\n", "                    result.release();\n", "                }\n", "            }\n", "        }\n", "\n", "        if (isExtReadEnable()) {\n", "            this.consumeQueueExt.truncateByMinAddress(minExtAddr);\n", "        }\n", "    }\n", "\n", "    public long getMinOffsetInQueue() {\n", "        return this.minLogicOffset / CQ_STORE_UNIT_SIZE;\n", "    }\n", "\n", "    public void putMessagePositionInfoWrapper(DispatchRequest request) {\n", "        final int maxRetries = 30;\n", "        boolean canWrite = this.defaultMessageStore.getRunningFlags().isCQWriteable();\n", "        for (int i = 0; i < maxRetries && canWrite; i++) {\n", "            long tagsCode = request.getTagsCode();\n", "            if (isExtWriteEnable()) {\n", "                ConsumeQueueExt.CqExtUnit cqExtUnit = new ConsumeQueueExt.CqExtUnit();\n", "                cqExtUnit.setFilterBitMap(request.getBitMap());\n", "                cqExtUnit.setMsgStoreTime(request.getStoreTimestamp());\n", "                cqExtUnit.setTagsCode(request.getTagsCode());\n", "\n", "                long extAddr = this.consumeQueueExt.put(cqExtUnit);\n", "                if (isExtAddr(extAddr)) {\n", "                    tagsCode = extAddr;\n", "                } else {\n", "                    log.warn(\"Save consume queue extend fail, So just save tagsCode! {}, topic:{}, queueId:{}, offset:{}\", cqExtUnit,\n", "                        topic, queueId, request.getCommitLogOffset());\n", "                }\n", "            }\n", "            boolean result = this.putMessagePositionInfo(request.getCommitLogOffset(),\n", "                request.getMsgSize(), tagsCode, request.getConsumeQueueOffset());\n", "            if (result) {\n", "                if (this.defaultMessageStore.getMessageStoreConfig().getBrokerRole() == BrokerRole.SLAVE ||\n", "                    this.defaultMessageStore.getMessageStoreConfig().isEnableDLegerCommitLog()) {\n", "                    this.defaultMessageStore.getStoreCheckpoint().setPhysicMsgTimestamp(request.getStoreTimestamp());\n", "                }\n", "                this.defaultMessageStore.getStoreCheckpoint().setLogicsMsgTimestamp(request.getStoreTimestamp());\n", "                return;\n", "            } else {\n", "                // XXX: warn and notify me\n", "                log.warn(\"[BUG]put commit log position info to \" + topic + \":\" + queueId + \" \" + request.getCommitLogOffset()\n", "                    + \" failed, retry \" + i + \" times\");\n", "\n", "                try {\n", "                    Thread.sleep(1000);\n", "                } catch (InterruptedException e) {\n", "                    log.warn(\"\", e);\n", "                }\n", "            }\n", "        }\n", "\n", "        // XXX: warn and notify me\n", "        log.error(\"[BUG]consume queue can not write, {} {}\", this.topic, this.queueId);\n", "        this.defaultMessageStore.getRunningFlags().makeLogicsQueueError();\n", "    }\n", "\n", "    private boolean putMessagePositionInfo(final long offset, final int size, final long tagsCode,\n", "        final long cqOffset) {\n", "\n", "        if (offset + size <= this.maxPhysicOffset) {\n", "            log.warn(\"Maybe try to build consume queue repeatedly maxPhysicOffset={} phyOffset={}\", maxPhysicOffset, offset);\n", "            return true;\n", "        }\n", "\n", "        this.byteBufferIndex.flip();\n", "        this.byteBufferIndex.limit(CQ_STORE_UNIT_SIZE);\n", "        this.byteBufferIndex.putLong(offset);\n", "        this.byteBufferIndex.putInt(size);\n", "        this.byteBufferIndex.putLong(tagsCode);\n", "\n", "        final long expectLogicOffset = cqOffset * CQ_STORE_UNIT_SIZE;\n", "\n", "        MappedFile mappedFile = this.mappedFileQueue.getLastMappedFile(expectLogicOffset);\n", "        if (mappedFile != null) {\n", "\n", "            if (mappedFile.isFirstCreateInQueue() && cqOffset != 0 && mappedFile.getWrotePosition() == 0) {\n", "                this.minLogicOffset = expectLogicOffset;\n", "                this.mappedFileQueue.setFlushedWhere(expectLogicOffset);\n", "                this.mappedFileQueue.setCommittedWhere(expectLogicOffset);\n", "                this.fillPreBlank(mappedFile, expectLogicOffset);\n", "                log.info(\"fill pre blank space \" + mappedFile.getFileName() + \" \" + expectLogicOffset + \" \"\n", "                    + mappedFile.getWrotePosition());\n", "            }\n", "\n", "            if (cqOffset != 0) {\n", "                long currentLogicOffset = mappedFile.getWrotePosition() + mappedFile.getFileFromOffset();\n", "\n", "                if (expectLogicOffset < currentLogicOffset) {\n", "                    log.warn(\"Build  consume queue repeatedly, expectLogicOffset: {} currentLogicOffset: {} Topic: {} QID: {} Diff: {}\",\n", "                        expectLogicOffset, currentLogicOffset, this.topic, this.queueId, expectLogicOffset - currentLogicOffset);\n", "                    return true;\n", "                }\n", "\n", "                if (expectLogicOffset != currentLogicOffset) {\n", "                    LOG_ERROR.warn(\n", "                        \"[BUG]logic queue order maybe wrong, expectLogicOffset: {} currentLogicOffset: {} Topic: {} QID: {} Diff: {}\",\n", "                        expectLogicOffset,\n", "                        currentLogicOffset,\n", "                        this.topic,\n", "                        this.queueId,\n", "                        expectLogicOffset - currentLogicOffset\n", "                    );\n", "                }\n", "            }\n", "            this.maxPhysicOffset = offset + size;\n", "            return mappedFile.appendMessage(this.byteBufferIndex.array());\n", "        }\n", "        return false;\n", "    }\n", "\n", "    private void fillPreBlank(final MappedFile mappedFile, final long untilWhere) {\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(CQ_STORE_UNIT_SIZE);\n", "        byteBuffer.putLong(0L);\n", "        byteBuffer.putInt(Integer.MAX_VALUE);\n", "        byteBuffer.putLong(0L);\n", "\n", "        int until = (int) (untilWhere % this.mappedFileQueue.getMappedFileSize());\n", "        for (int i = 0; i < until; i += CQ_STORE_UNIT_SIZE) {\n", "            mappedFile.appendMessage(byteBuffer.array());\n", "        }\n", "    }\n", "\n", "    public SelectMappedBufferResult getIndexBuffer(final long startIndex) {\n", "        int mappedFileSize = this.mappedFileSize;\n", "        long offset = startIndex * CQ_STORE_UNIT_SIZE;\n", "        if (offset >= this.getMinLogicOffset()) {\n", "            MappedFile mappedFile = this.mappedFileQueue.findMappedFileByOffset(offset);\n", "            if (mappedFile != null) {\n", "                SelectMappedBufferResult result = mappedFile.selectMappedBuffer((int) (offset % mappedFileSize));\n", "                return result;\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    public ConsumeQueueExt.CqExtUnit getExt(final long offset) {\n", "        if (isExtReadEnable()) {\n", "            return this.consumeQueueExt.get(offset);\n", "        }\n", "        return null;\n", "    }\n", "\n", "    public boolean getExt(final long offset, ConsumeQueueExt.CqExtUnit cqExtUnit) {\n", "        if (isExtReadEnable()) {\n", "            return this.consumeQueueExt.get(offset, cqExtUnit);\n", "        }\n", "        return false;\n", "    }\n", "\n", "    public long getMinLogicOffset() {\n", "        return minLogicOffset;\n", "    }\n", "\n", "    public void setMinLogicOffset(long minLogicOffset) {\n", "        this.minLogicOffset = minLogicOffset;\n", "    }\n", "\n", "    public long rollNextFile(final long index) {\n", "        int mappedFileSize = this.mappedFileSize;\n", "        int totalUnitsInFile = mappedFileSize / CQ_STORE_UNIT_SIZE;\n", "        return index + totalUnitsInFile - index % totalUnitsInFile;\n", "    }\n", "\n", "    public String getTopic() {\n", "        return topic;\n", "    }\n", "\n", "    public int getQueueId() {\n", "        return queueId;\n", "    }\n", "\n", "    public long getMaxPhysicOffset() {\n", "        return maxPhysicOffset;\n", "    }\n", "\n", "    public void setMaxPhysicOffset(long maxPhysicOffset) {\n", "        this.maxPhysicOffset = maxPhysicOffset;\n", "    }\n", "\n", "    public void destroy() {\n", "        this.maxPhysicOffset = -1;\n", "        this.minLogicOffset = 0;\n", "        this.mappedFileQueue.destroy();\n", "        if (isExtReadEnable()) {\n", "            this.consumeQueueExt.destroy();\n", "        }\n", "    }\n", "\n", "    public long getMessageTotalInQueue() {\n", "        return this.getMaxOffsetInQueue() - this.getMinOffsetInQueue();\n", "    }\n", "\n", "    public long getMaxOffsetInQueue() {\n", "        return this.mappedFileQueue.getMaxOffset() / CQ_STORE_UNIT_SIZE;\n", "    }\n", "\n", "    public void checkSelf() {\n", "        mappedFileQueue.checkSelf();\n", "        if (isExtReadEnable()) {\n", "            this.consumeQueueExt.checkSelf();\n", "        }\n", "    }\n", "\n", "    protected boolean isExtReadEnable() {\n", "        return this.consumeQueueExt != null;\n", "    }\n", "\n", "    protected boolean isExtWriteEnable() {\n", "        return this.consumeQueueExt != null\n", "            && this.defaultMessageStore.getMessageStoreConfig().isEnableConsumeQueueExt();\n", "    }\n", "\n", "    /**\n", "     * Check {@code tagsCode} is address of extend file or tags code.\n", "     */\n", "    public boolean isExtAddr(long tagsCode) {\n", "        return ConsumeQueueExt.isExtAddr(tagsCode);\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.store;\n", "\n", "import java.io.File;\n", "import java.lang.reflect.Method;\n", "import java.net.InetAddress;\n", "import java.net.InetSocketAddress;\n", "import java.net.SocketAddress;\n", "import java.net.UnknownHostException;\n", "import java.nio.ByteBuffer;\n", "import java.util.Map;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.message.MessageDecoder;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class ConsumeQueueTest {\n", "\n", "    private static final String msg = \"Once, there was a chance for me!\";\n", "    private static final byte[] msgBody = msg.getBytes();\n", "\n", "    private static final String topic = \"abc\";\n", "    private static final int queueId = 0;\n", "    private static final String storePath = \".\" + File.separator + \"unit_test_store\";\n", "    private static final int commitLogFileSize = 1024 * 8;\n", "    private static final int cqFileSize = 10 * 20;\n", "    private static final int cqExtFileSize = 10 * (ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + 64);\n", "\n", "    private static SocketAddress BornHost;\n", "\n", "    private static SocketAddress StoreHost;\n", "\n", "    static {\n", "        try {\n", "            StoreHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "        }\n", "        try {\n", "            BornHost = new InetSocketAddress(InetAddress.getByName(\"127.0.0.1\"), 0);\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "        }\n", "    }\n", "\n", "    public MessageExtBrokerInner buildMessage() {\n", "        MessageExtBrokerInner msg = new MessageExtBrokerInner();\n", "        msg.setTopic(topic);\n", "        msg.setTags(\"TAG1\");\n", "        msg.setKeys(\"Hello\");\n", "        msg.setBody(msgBody);\n", "        msg.setKeys(String.valueOf(System.currentTimeMillis()));\n", "        msg.setQueueId(queueId);\n", "        msg.setSysFlag(0);\n", "        msg.setBornTimestamp(System.currentTimeMillis());\n", "        msg.setStoreHost(StoreHost);\n", "        msg.setBornHost(BornHost);\n", "        for (int i = 0; i < 1; i++) {\n", "            msg.putUserProperty(String.valueOf(i), \"imagoodperson\" + i);\n", "        }\n", "        msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));\n", "\n", "        return msg;\n", "    }\n", "\n", "    public MessageExtBrokerInner buildIPv6HostMessage() {\n", "        MessageExtBrokerInner msg = new MessageExtBrokerInner();\n", "        msg.setTopic(topic);\n", "        msg.setTags(\"TAG1\");\n", "        msg.setKeys(\"Hello\");\n", "        msg.setBody(msgBody);\n", "        msg.setMsgId(\"24084004018081003FAA1DDE2B3F898A00002A9F0000000000000CA0\");\n", "        msg.setKeys(String.valueOf(System.currentTimeMillis()));\n", "        msg.setQueueId(queueId);\n", "        msg.setSysFlag(0);\n", "        msg.setBornHostV6Flag();\n", "        msg.setStoreHostAddressV6Flag();\n", "        msg.setBornTimestamp(System.currentTimeMillis());\n", "        msg.setBornHost(new InetSocketAddress(\"1050:0000:0000:0000:0005:0600:300c:326b\", 123));\n", "        msg.setStoreHost(new InetSocketAddress(\"::1\", 124));\n", "        for (int i = 0; i < 1; i++) {\n", "            msg.putUserProperty(String.valueOf(i), \"imagoodperson\" + i);\n", "        }\n", "        msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));\n", "\n", "        return msg;\n", "    }\n", "\n", "    public MessageStoreConfig buildStoreConfig(int commitLogFileSize, int cqFileSize,\n", "        boolean enableCqExt, int cqExtFileSize) {\n", "        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();\n", "        messageStoreConfig.setMappedFileSizeCommitLog(commitLogFileSize);\n", "        messageStoreConfig.setMappedFileSizeConsumeQueue(cqFileSize);\n", "        messageStoreConfig.setMappedFileSizeConsumeQueueExt(cqExtFileSize);\n", "        messageStoreConfig.setMessageIndexEnable(false);\n", "        messageStoreConfig.setEnableConsumeQueueExt(enableCqExt);\n", "\n", "        messageStoreConfig.setStorePathRootDir(storePath);\n", "        messageStoreConfig.setStorePathCommitLog(storePath + File.separator + \"commitlog\");\n", "\n", "        return messageStoreConfig;\n", "    }\n", "\n", "    protected DefaultMessageStore gen() throws Exception {\n", "        MessageStoreConfig messageStoreConfig = buildStoreConfig(\n", "            commitLogFileSize, cqFileSize, true, cqExtFileSize\n", "        );\n", "\n", "        BrokerConfig brokerConfig = new BrokerConfig();\n", "\n", "        DefaultMessageStore master = new DefaultMessageStore(\n", "            messageStoreConfig,\n", "            new BrokerStatsManager(brokerConfig.getBrokerClusterName()),\n", "            new MessageArrivingListener() {\n", "                @Override\n", "                public void arriving(String topic, int queueId, long logicOffset, long tagsCode,\n", "                    long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {\n", "                }\n", "            }\n", "            , brokerConfig);\n", "\n", "        assertThat(master.load()).isTrue();\n", "\n", "        master.start();\n", "\n", "        return master;\n", "    }\n", "\n", "    protected void putMsg(DefaultMessageStore master) throws Exception {\n", "        long totalMsgs = 200;\n", "\n", "        for (long i = 0; i < totalMsgs; i++) {\n", "            if (i < totalMsgs / 2) {\n", "                master.putMessage(buildMessage());\n", "            } else {\n", "                master.putMessage(buildIPv6HostMessage());\n", "            }\n", "        }\n", "    }\n", "\n", "    protected void deleteDirectory(String rootPath) {\n", "        File file = new File(rootPath);\n", "        deleteFile(file);\n", "    }\n", "\n", "    protected void deleteFile(File file) {\n", "        File[] subFiles = file.listFiles();\n", "        if (subFiles != null) {\n", "            for (File sub : subFiles) {\n", "                deleteFile(sub);\n", "            }\n", "        }\n", "\n", "        file.delete();\n", "    }\n", "\n", "    @Test\n", "    public void testPutMessagePositionInfo_buildCQRepeatedly() throws Exception {\n", "        DefaultMessageStore messageStore = null;\n", "        try {\n", "\n", "            messageStore = gen();\n", "\n", "            int totalMessages = 10;\n", "\n", "            for (int i = 0; i < totalMessages; i++) {\n", "                putMsg(messageStore);\n", "            }\n", "            Thread.sleep(5);\n", "\n", "            ConsumeQueue cq = messageStore.getConsumeQueueTable().get(topic).get(queueId);\n", "            Method method = cq.getClass().getDeclaredMethod(\"putMessagePositionInfo\", long.class, int.class, long.class, long.class);\n", "\n", "            assertThat(method).isNotNull();\n", "\n", "            method.setAccessible(true);\n", "\n", "            SelectMappedBufferResult result = messageStore.getCommitLog().getData(0);\n", "            assertThat(result != null).isTrue();\n", "\n", "            DispatchRequest dispatchRequest = messageStore.getCommitLog().checkMessageAndReturnSize(result.getByteBuffer(), false, false);\n", "\n", "            assertThat(cq).isNotNull();\n", "\n", "            Object dispatchResult = method.invoke(cq, dispatchRequest.getCommitLogOffset(),\n", "                dispatchRequest.getMsgSize(), dispatchRequest.getTagsCode(), dispatchRequest.getConsumeQueueOffset());\n", "\n", "            assertThat(Boolean.parseBoolean(dispatchResult.toString())).isTrue();\n", "\n", "        } finally {\n", "            if (messageStore != null) {\n", "                messageStore.shutdown();\n", "                messageStore.destroy();\n", "            }\n", "            deleteDirectory(storePath);\n", "        }\n", "\n", "    }\n", "\n", "    @Test\n", "    public void testConsumeQueueWithExtendData() {\n", "        DefaultMessageStore master = null;\n", "        try {\n", "            master = gen();\n", "        } catch (Exception e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "\n", "        master.getDispatcherList().addFirst(new CommitLogDispatcher() {\n", "\n", "            @Override\n", "            public void dispatch(DispatchRequest request) {\n", "                runCount++;\n", "            }\n", "\n", "            private int runCount = 0;\n", "        });\n", "\n", "        try {\n", "            try {\n", "                putMsg(master);\n", "                Thread.sleep(3000L);//wait ConsumeQueue create success.\n", "            } catch (Exception e) {\n", "                e.printStackTrace();\n", "                assertThat(Boolean.FALSE).isTrue();\n", "            }\n", "\n", "            ConsumeQueue cq = master.getConsumeQueueTable().get(topic).get(queueId);\n", "\n", "            assertThat(cq).isNotNull();\n", "\n", "            long index = 0;\n", "\n", "            while (index < cq.getMaxOffsetInQueue()) {\n", "                SelectMappedBufferResult bufferResult = cq.getIndexBuffer(index);\n", "\n", "                assertThat(bufferResult).isNotNull();\n", "\n", "                ByteBuffer buffer = bufferResult.getByteBuffer();\n", "\n", "                assertThat(buffer).isNotNull();\n", "                try {\n", "                    ConsumeQueueExt.CqExtUnit cqExtUnit = new ConsumeQueueExt.CqExtUnit();\n", "                    for (int i = 0; i < bufferResult.getSize(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {\n", "                        long phyOffset = buffer.getLong();\n", "                        int size = buffer.getInt();\n", "                        long tagsCode = buffer.getLong();\n", "\n", "                        assertThat(phyOffset).isGreaterThanOrEqualTo(0);\n", "                        assertThat(size).isGreaterThan(0);\n", "                        assertThat(tagsCode).isLessThan(0);\n", "\n", "                        boolean ret = cq.getExt(tagsCode, cqExtUnit);\n", "\n", "                        assertThat(ret).isTrue();\n", "                        assertThat(cqExtUnit).isNotNull();\n", "                        assertThat(cqExtUnit.getSize()).isGreaterThan((short) 0);\n", "                        assertThat(cqExtUnit.getMsgStoreTime()).isGreaterThan(0);\n", "                        assertThat(cqExtUnit.getTagsCode()).isGreaterThan(0);\n", "                    }\n", "\n", "                } finally {\n", "                    bufferResult.release();\n", "                }\n", "\n", "                index += cqFileSize / ConsumeQueue.CQ_STORE_UNIT_SIZE;\n", "            }\n", "        } finally {\n", "            master.shutdown();\n", "            master.destroy();\n", "            UtilAll.deleteFile(new File(storePath));\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"ConsumeQueue::::load()": [88, 95], "ConsumeQueue::::recover()": [97, 162], "ConsumeQueue::::getOffsetInQueueByTime(long)": [164, 231], "ConsumeQueue::::truncateDirtyLogicFiles(long)": [233, 301], "ConsumeQueue::::getLastOffset()": [303, 331], "ConsumeQueue::::flush(int)": [333, 340], "ConsumeQueue::::deleteExpiredFile(long)": [342, 346], "ConsumeQueue::::correctMinOffset(long)": [348, 382], "ConsumeQueue::::getMinOffsetInQueue()": [384, 386], "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)": [388, 432], "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)": [434, 486], "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)": [488, 498], "ConsumeQueue::::getIndexBuffer(long)": [500, 511], "ConsumeQueue::::getExt(long)": [513, 518], "ConsumeQueue::::getExt(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)": [520, 525], "ConsumeQueue::::getMinLogicOffset()": [527, 529], "ConsumeQueue::::setMinLogicOffset(long)": [531, 533], "ConsumeQueue::::rollNextFile(long)": [535, 539], "ConsumeQueue::::getTopic()": [541, 543], "ConsumeQueue::::getQueueId()": [545, 547], "ConsumeQueue::::getMaxPhysicOffset()": [549, 551], "ConsumeQueue::::setMaxPhysicOffset(long)": [553, 555], "ConsumeQueue::::destroy()": [557, 564], "ConsumeQueue::::getMessageTotalInQueue()": [566, 568], "ConsumeQueue::::getMaxOffsetInQueue()": [570, 572], "ConsumeQueue::::checkSelf()": [574, 579], "ConsumeQueue::::isExtReadEnable()": [581, 583], "ConsumeQueue::::isExtWriteEnable()": [585, 588], "ConsumeQueue::::isExtAddr(long)": [593, 595]}, "test_method_lines_dic": {"ConsumeQueueTest::::buildMessage()": [66, 84], "ConsumeQueueTest::::buildIPv6HostMessage()": [86, 107], "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)": [109, 122], "ConsumeQueueTest::::gen()": [124, 147], "ConsumeQueueTest::::deleteDirectory(java.lang.String)": [161, 164], "ConsumeQueueTest::::deleteFile(java.io.File)": [166, 175], "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()": [177, 218], "ConsumeQueueTest::::testConsumeQueueWithExtendData()": [220, 294]}, "reverse_method_lines_dic": {"88": "ConsumeQueue::::load()", "89": "ConsumeQueue::::load()", "90": "ConsumeQueue::::load()", "91": "ConsumeQueue::::load()", "92": "ConsumeQueue::::load()", "93": "ConsumeQueue::::load()", "94": "ConsumeQueue::::load()", "95": "ConsumeQueue::::load()", "97": "ConsumeQueue::::recover()", "98": "ConsumeQueue::::recover()", "99": "ConsumeQueue::::recover()", "100": "ConsumeQueue::::recover()", "101": "ConsumeQueue::::recover()", "102": "ConsumeQueue::::recover()", "103": "ConsumeQueue::::recover()", "104": "ConsumeQueue::::recover()", "105": "ConsumeQueue::::recover()", "106": "ConsumeQueue::::recover()", "107": "ConsumeQueue::::recover()", "108": "ConsumeQueue::::recover()", "109": "ConsumeQueue::::recover()", "110": "ConsumeQueue::::recover()", "111": "ConsumeQueue::::recover()", "112": "ConsumeQueue::::recover()", "113": "ConsumeQueue::::recover()", "114": "ConsumeQueue::::recover()", "115": "ConsumeQueue::::recover()", "116": "ConsumeQueue::::recover()", "117": "ConsumeQueue::::recover()", "118": "ConsumeQueue::::recover()", "119": "ConsumeQueue::::recover()", "120": "ConsumeQueue::::recover()", "121": "ConsumeQueue::::recover()", "122": "ConsumeQueue::::recover()", "123": "ConsumeQueue::::recover()", "124": "ConsumeQueue::::recover()", "125": "ConsumeQueue::::recover()", "126": "ConsumeQueue::::recover()", "127": "ConsumeQueue::::recover()", "128": "ConsumeQueue::::recover()", "129": "ConsumeQueue::::recover()", "130": "ConsumeQueue::::recover()", "131": "ConsumeQueue::::recover()", "132": "ConsumeQueue::::recover()", "133": "ConsumeQueue::::recover()", "134": "ConsumeQueue::::recover()", "135": "ConsumeQueue::::recover()", "136": "ConsumeQueue::::recover()", "137": "ConsumeQueue::::recover()", "138": "ConsumeQueue::::recover()", "139": "ConsumeQueue::::recover()", "140": "ConsumeQueue::::recover()", "141": "ConsumeQueue::::recover()", "142": "ConsumeQueue::::recover()", "143": "ConsumeQueue::::recover()", "144": "ConsumeQueue::::recover()", "145": "ConsumeQueue::::recover()", "146": "ConsumeQueue::::recover()", "147": "ConsumeQueue::::recover()", "148": "ConsumeQueue::::recover()", "149": "ConsumeQueue::::recover()", "150": "ConsumeQueue::::recover()", "151": "ConsumeQueue::::recover()", "152": "ConsumeQueue::::recover()", "153": "ConsumeQueue::::recover()", "154": "ConsumeQueue::::recover()", "155": "ConsumeQueue::::recover()", "156": "ConsumeQueue::::recover()", "157": "ConsumeQueue::::recover()", "158": "ConsumeQueue::::recover()", "159": "ConsumeQueue::::recover()", "160": "ConsumeQueue::::recover()", "161": "ConsumeQueue::::recover()", "162": "ConsumeQueue::::recover()", "164": "ConsumeQueue::::getOffsetInQueueByTime(long)", "165": "ConsumeQueue::::getOffsetInQueueByTime(long)", "166": "ConsumeQueue::::getOffsetInQueueByTime(long)", "167": "ConsumeQueue::::getOffsetInQueueByTime(long)", "168": "ConsumeQueue::::getOffsetInQueueByTime(long)", "169": "ConsumeQueue::::getOffsetInQueueByTime(long)", "170": "ConsumeQueue::::getOffsetInQueueByTime(long)", "171": "ConsumeQueue::::getOffsetInQueueByTime(long)", "172": "ConsumeQueue::::getOffsetInQueueByTime(long)", "173": "ConsumeQueue::::getOffsetInQueueByTime(long)", "174": "ConsumeQueue::::getOffsetInQueueByTime(long)", "175": "ConsumeQueue::::getOffsetInQueueByTime(long)", "176": "ConsumeQueue::::getOffsetInQueueByTime(long)", "177": "ConsumeQueue::::getOffsetInQueueByTime(long)", "178": "ConsumeQueue::::getOffsetInQueueByTime(long)", "179": "ConsumeQueue::::getOffsetInQueueByTime(long)", "180": "ConsumeQueue::::getOffsetInQueueByTime(long)", "181": "ConsumeQueue::::getOffsetInQueueByTime(long)", "182": "ConsumeQueue::::getOffsetInQueueByTime(long)", "183": "ConsumeQueue::::getOffsetInQueueByTime(long)", "184": "ConsumeQueue::::getOffsetInQueueByTime(long)", "185": "ConsumeQueue::::getOffsetInQueueByTime(long)", "186": "ConsumeQueue::::getOffsetInQueueByTime(long)", "187": "ConsumeQueue::::getOffsetInQueueByTime(long)", "188": "ConsumeQueue::::getOffsetInQueueByTime(long)", "189": "ConsumeQueue::::getOffsetInQueueByTime(long)", "190": "ConsumeQueue::::getOffsetInQueueByTime(long)", "191": "ConsumeQueue::::getOffsetInQueueByTime(long)", "192": "ConsumeQueue::::getOffsetInQueueByTime(long)", "193": "ConsumeQueue::::getOffsetInQueueByTime(long)", "194": "ConsumeQueue::::getOffsetInQueueByTime(long)", "195": "ConsumeQueue::::getOffsetInQueueByTime(long)", "196": "ConsumeQueue::::getOffsetInQueueByTime(long)", "197": "ConsumeQueue::::getOffsetInQueueByTime(long)", "198": "ConsumeQueue::::getOffsetInQueueByTime(long)", "199": "ConsumeQueue::::getOffsetInQueueByTime(long)", "200": "ConsumeQueue::::getOffsetInQueueByTime(long)", "201": "ConsumeQueue::::getOffsetInQueueByTime(long)", "202": "ConsumeQueue::::getOffsetInQueueByTime(long)", "203": "ConsumeQueue::::getOffsetInQueueByTime(long)", "204": "ConsumeQueue::::getOffsetInQueueByTime(long)", "205": "ConsumeQueue::::getOffsetInQueueByTime(long)", "206": "ConsumeQueue::::getOffsetInQueueByTime(long)", "207": "ConsumeQueue::::getOffsetInQueueByTime(long)", "208": "ConsumeQueue::::getOffsetInQueueByTime(long)", "209": "ConsumeQueue::::getOffsetInQueueByTime(long)", "210": "ConsumeQueue::::getOffsetInQueueByTime(long)", "211": "ConsumeQueue::::getOffsetInQueueByTime(long)", "212": "ConsumeQueue::::getOffsetInQueueByTime(long)", "213": "ConsumeQueue::::getOffsetInQueueByTime(long)", "214": "ConsumeQueue::::getOffsetInQueueByTime(long)", "215": "ConsumeQueue::::getOffsetInQueueByTime(long)", "216": "ConsumeQueue::::getOffsetInQueueByTime(long)", "217": "ConsumeQueue::::getOffsetInQueueByTime(long)", "218": "ConsumeQueue::::getOffsetInQueueByTime(long)", "219": "ConsumeQueue::::getOffsetInQueueByTime(long)", "220": "ConsumeQueue::::getOffsetInQueueByTime(long)", "221": "ConsumeQueue::::getOffsetInQueueByTime(long)", "222": "ConsumeQueue::::getOffsetInQueueByTime(long)", "223": "ConsumeQueue::::getOffsetInQueueByTime(long)", "224": "ConsumeQueue::::getOffsetInQueueByTime(long)", "225": "ConsumeQueue::::getOffsetInQueueByTime(long)", "226": "ConsumeQueue::::getOffsetInQueueByTime(long)", "227": "ConsumeQueue::::getOffsetInQueueByTime(long)", "228": "ConsumeQueue::::getOffsetInQueueByTime(long)", "229": "ConsumeQueue::::getOffsetInQueueByTime(long)", "230": "ConsumeQueue::::getOffsetInQueueByTime(long)", "231": "ConsumeQueue::::getOffsetInQueueByTime(long)", "233": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "234": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "235": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "236": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "237": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "238": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "239": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "240": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "241": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "242": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "243": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "244": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "245": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "246": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "247": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "248": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "249": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "250": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "251": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "252": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "253": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "254": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "255": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "256": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "257": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "258": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "259": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "260": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "261": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "262": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "263": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "264": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "265": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "266": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "267": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "268": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "269": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "270": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "271": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "272": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "273": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "274": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "275": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "276": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "277": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "278": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "279": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "280": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "281": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "282": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "283": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "284": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "285": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "286": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "287": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "288": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "289": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "290": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "291": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "292": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "293": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "294": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "295": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "296": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "297": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "298": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "299": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "300": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "301": "ConsumeQueue::::truncateDirtyLogicFiles(long)", "303": "ConsumeQueue::::getLastOffset()", "304": "ConsumeQueue::::getLastOffset()", "305": "ConsumeQueue::::getLastOffset()", "306": "ConsumeQueue::::getLastOffset()", "307": "ConsumeQueue::::getLastOffset()", "308": "ConsumeQueue::::getLastOffset()", "309": "ConsumeQueue::::getLastOffset()", "310": "ConsumeQueue::::getLastOffset()", "311": "ConsumeQueue::::getLastOffset()", "312": "ConsumeQueue::::getLastOffset()", "313": "ConsumeQueue::::getLastOffset()", "314": "ConsumeQueue::::getLastOffset()", "315": "ConsumeQueue::::getLastOffset()", "316": "ConsumeQueue::::getLastOffset()", "317": "ConsumeQueue::::getLastOffset()", "318": "ConsumeQueue::::getLastOffset()", "319": "ConsumeQueue::::getLastOffset()", "320": "ConsumeQueue::::getLastOffset()", "321": "ConsumeQueue::::getLastOffset()", "322": "ConsumeQueue::::getLastOffset()", "323": "ConsumeQueue::::getLastOffset()", "324": "ConsumeQueue::::getLastOffset()", "325": "ConsumeQueue::::getLastOffset()", "326": "ConsumeQueue::::getLastOffset()", "327": "ConsumeQueue::::getLastOffset()", "328": "ConsumeQueue::::getLastOffset()", "329": "ConsumeQueue::::getLastOffset()", "330": "ConsumeQueue::::getLastOffset()", "331": "ConsumeQueue::::getLastOffset()", "333": "ConsumeQueue::::flush(int)", "334": "ConsumeQueue::::flush(int)", "335": "ConsumeQueue::::flush(int)", "336": "ConsumeQueue::::flush(int)", "337": "ConsumeQueue::::flush(int)", "338": "ConsumeQueue::::flush(int)", "339": "ConsumeQueue::::flush(int)", "340": "ConsumeQueue::::flush(int)", "342": "ConsumeQueue::::deleteExpiredFile(long)", "343": "ConsumeQueue::::deleteExpiredFile(long)", "344": "ConsumeQueue::::deleteExpiredFile(long)", "345": "ConsumeQueue::::deleteExpiredFile(long)", "346": "ConsumeQueue::::deleteExpiredFile(long)", "348": "ConsumeQueue::::correctMinOffset(long)", "349": "ConsumeQueue::::correctMinOffset(long)", "350": "ConsumeQueue::::correctMinOffset(long)", "351": "ConsumeQueue::::correctMinOffset(long)", "352": "ConsumeQueue::::correctMinOffset(long)", "353": "ConsumeQueue::::correctMinOffset(long)", "354": "ConsumeQueue::::correctMinOffset(long)", "355": "ConsumeQueue::::correctMinOffset(long)", "356": "ConsumeQueue::::correctMinOffset(long)", "357": "ConsumeQueue::::correctMinOffset(long)", "358": "ConsumeQueue::::correctMinOffset(long)", "359": "ConsumeQueue::::correctMinOffset(long)", "360": "ConsumeQueue::::correctMinOffset(long)", "361": "ConsumeQueue::::correctMinOffset(long)", "362": "ConsumeQueue::::correctMinOffset(long)", "363": "ConsumeQueue::::correctMinOffset(long)", "364": "ConsumeQueue::::correctMinOffset(long)", "365": "ConsumeQueue::::correctMinOffset(long)", "366": "ConsumeQueue::::correctMinOffset(long)", "367": "ConsumeQueue::::correctMinOffset(long)", "368": "ConsumeQueue::::correctMinOffset(long)", "369": "ConsumeQueue::::correctMinOffset(long)", "370": "ConsumeQueue::::correctMinOffset(long)", "371": "ConsumeQueue::::correctMinOffset(long)", "372": "ConsumeQueue::::correctMinOffset(long)", "373": "ConsumeQueue::::correctMinOffset(long)", "374": "ConsumeQueue::::correctMinOffset(long)", "375": "ConsumeQueue::::correctMinOffset(long)", "376": "ConsumeQueue::::correctMinOffset(long)", "377": "ConsumeQueue::::correctMinOffset(long)", "378": "ConsumeQueue::::correctMinOffset(long)", "379": "ConsumeQueue::::correctMinOffset(long)", "380": "ConsumeQueue::::correctMinOffset(long)", "381": "ConsumeQueue::::correctMinOffset(long)", "382": "ConsumeQueue::::correctMinOffset(long)", "384": "ConsumeQueue::::getMinOffsetInQueue()", "385": "ConsumeQueue::::getMinOffsetInQueue()", "386": "ConsumeQueue::::getMinOffsetInQueue()", "388": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "389": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "390": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "391": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "392": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "393": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "394": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "395": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "396": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "397": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "398": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "399": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "400": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "401": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "402": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "403": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "404": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "405": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "406": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "407": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "408": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "409": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "410": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "411": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "412": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "413": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "414": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "415": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "416": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "417": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "418": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "419": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "420": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "421": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "422": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "423": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "424": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "425": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "426": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "427": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "428": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "429": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "430": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "431": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "432": "ConsumeQueue::::putMessagePositionInfoWrapper(org.apache.rocketmq.store.DispatchRequest)", "434": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "435": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "436": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "437": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "438": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "439": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "440": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "441": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "442": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "443": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "444": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "445": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "446": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "447": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "448": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "449": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "450": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "451": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "452": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "453": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "454": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "455": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "456": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "457": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "458": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "459": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "460": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "461": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "462": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "463": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "464": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "465": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "466": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "467": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "468": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "469": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "470": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "471": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "472": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "473": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "474": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "475": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "476": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "477": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "478": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "479": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "480": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "481": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "482": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "483": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "484": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "485": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "486": "ConsumeQueue::::putMessagePositionInfo(long,int,long,long)", "488": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "489": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "490": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "491": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "492": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "493": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "494": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "495": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "496": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "497": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "498": "ConsumeQueue::::fillPreBlank(org.apache.rocketmq.store.MappedFile,long)", "500": "ConsumeQueue::::getIndexBuffer(long)", "501": "ConsumeQueue::::getIndexBuffer(long)", "502": "ConsumeQueue::::getIndexBuffer(long)", "503": "ConsumeQueue::::getIndexBuffer(long)", "504": "ConsumeQueue::::getIndexBuffer(long)", "505": "ConsumeQueue::::getIndexBuffer(long)", "506": "ConsumeQueue::::getIndexBuffer(long)", "507": "ConsumeQueue::::getIndexBuffer(long)", "508": "ConsumeQueue::::getIndexBuffer(long)", "509": "ConsumeQueue::::getIndexBuffer(long)", "510": "ConsumeQueue::::getIndexBuffer(long)", "511": "ConsumeQueue::::getIndexBuffer(long)", "513": "ConsumeQueue::::getExt(long)", "514": "ConsumeQueue::::getExt(long)", "515": "ConsumeQueue::::getExt(long)", "516": "ConsumeQueue::::getExt(long)", "517": "ConsumeQueue::::getExt(long)", "518": "ConsumeQueue::::getExt(long)", "520": "ConsumeQueue::::getExt(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "521": "ConsumeQueue::::getExt(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "522": "ConsumeQueue::::getExt(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "523": "ConsumeQueue::::getExt(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "524": "ConsumeQueue::::getExt(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "525": "ConsumeQueue::::getExt(long,org.apache.rocketmq.store.ConsumeQueueExt.CqExtUnit)", "527": "ConsumeQueue::::getMinLogicOffset()", "528": "ConsumeQueue::::getMinLogicOffset()", "529": "ConsumeQueue::::getMinLogicOffset()", "531": "ConsumeQueue::::setMinLogicOffset(long)", "532": "ConsumeQueue::::setMinLogicOffset(long)", "533": "ConsumeQueue::::setMinLogicOffset(long)", "535": "ConsumeQueue::::rollNextFile(long)", "536": "ConsumeQueue::::rollNextFile(long)", "537": "ConsumeQueue::::rollNextFile(long)", "538": "ConsumeQueue::::rollNextFile(long)", "539": "ConsumeQueue::::rollNextFile(long)", "541": "ConsumeQueue::::getTopic()", "542": "ConsumeQueue::::getTopic()", "543": "ConsumeQueue::::getTopic()", "545": "ConsumeQueue::::getQueueId()", "546": "ConsumeQueue::::getQueueId()", "547": "ConsumeQueue::::getQueueId()", "549": "ConsumeQueue::::getMaxPhysicOffset()", "550": "ConsumeQueue::::getMaxPhysicOffset()", "551": "ConsumeQueue::::getMaxPhysicOffset()", "553": "ConsumeQueue::::setMaxPhysicOffset(long)", "554": "ConsumeQueue::::setMaxPhysicOffset(long)", "555": "ConsumeQueue::::setMaxPhysicOffset(long)", "557": "ConsumeQueue::::destroy()", "558": "ConsumeQueue::::destroy()", "559": "ConsumeQueue::::destroy()", "560": "ConsumeQueue::::destroy()", "561": "ConsumeQueue::::destroy()", "562": "ConsumeQueue::::destroy()", "563": "ConsumeQueue::::destroy()", "564": "ConsumeQueue::::destroy()", "566": "ConsumeQueue::::getMessageTotalInQueue()", "567": "ConsumeQueue::::getMessageTotalInQueue()", "568": "ConsumeQueue::::getMessageTotalInQueue()", "570": "ConsumeQueue::::getMaxOffsetInQueue()", "571": "ConsumeQueue::::getMaxOffsetInQueue()", "572": "ConsumeQueue::::getMaxOffsetInQueue()", "574": "ConsumeQueue::::checkSelf()", "575": "ConsumeQueue::::checkSelf()", "576": "ConsumeQueue::::checkSelf()", "577": "ConsumeQueue::::checkSelf()", "578": "ConsumeQueue::::checkSelf()", "579": "ConsumeQueue::::checkSelf()", "581": "ConsumeQueue::::isExtReadEnable()", "582": "ConsumeQueue::::isExtReadEnable()", "583": "ConsumeQueue::::isExtReadEnable()", "585": "ConsumeQueue::::isExtWriteEnable()", "586": "ConsumeQueue::::isExtWriteEnable()", "587": "ConsumeQueue::::isExtWriteEnable()", "588": "ConsumeQueue::::isExtWriteEnable()", "593": "ConsumeQueue::::isExtAddr(long)", "594": "ConsumeQueue::::isExtAddr(long)", "595": "ConsumeQueue::::isExtAddr(long)"}, "test_reverse_method_lines_dic": {"66": "ConsumeQueueTest::::buildMessage()", "67": "ConsumeQueueTest::::buildMessage()", "68": "ConsumeQueueTest::::buildMessage()", "69": "ConsumeQueueTest::::buildMessage()", "70": "ConsumeQueueTest::::buildMessage()", "71": "ConsumeQueueTest::::buildMessage()", "72": "ConsumeQueueTest::::buildMessage()", "73": "ConsumeQueueTest::::buildMessage()", "74": "ConsumeQueueTest::::buildMessage()", "75": "ConsumeQueueTest::::buildMessage()", "76": "ConsumeQueueTest::::buildMessage()", "77": "ConsumeQueueTest::::buildMessage()", "78": "ConsumeQueueTest::::buildMessage()", "79": "ConsumeQueueTest::::buildMessage()", "80": "ConsumeQueueTest::::buildMessage()", "81": "ConsumeQueueTest::::buildMessage()", "82": "ConsumeQueueTest::::buildMessage()", "83": "ConsumeQueueTest::::buildMessage()", "84": "ConsumeQueueTest::::buildMessage()", "86": "ConsumeQueueTest::::buildIPv6HostMessage()", "87": "ConsumeQueueTest::::buildIPv6HostMessage()", "88": "ConsumeQueueTest::::buildIPv6HostMessage()", "89": "ConsumeQueueTest::::buildIPv6HostMessage()", "90": "ConsumeQueueTest::::buildIPv6HostMessage()", "91": "ConsumeQueueTest::::buildIPv6HostMessage()", "92": "ConsumeQueueTest::::buildIPv6HostMessage()", "93": "ConsumeQueueTest::::buildIPv6HostMessage()", "94": "ConsumeQueueTest::::buildIPv6HostMessage()", "95": "ConsumeQueueTest::::buildIPv6HostMessage()", "96": "ConsumeQueueTest::::buildIPv6HostMessage()", "97": "ConsumeQueueTest::::buildIPv6HostMessage()", "98": "ConsumeQueueTest::::buildIPv6HostMessage()", "99": "ConsumeQueueTest::::buildIPv6HostMessage()", "100": "ConsumeQueueTest::::buildIPv6HostMessage()", "101": "ConsumeQueueTest::::buildIPv6HostMessage()", "102": "ConsumeQueueTest::::buildIPv6HostMessage()", "103": "ConsumeQueueTest::::buildIPv6HostMessage()", "104": "ConsumeQueueTest::::buildIPv6HostMessage()", "105": "ConsumeQueueTest::::buildIPv6HostMessage()", "106": "ConsumeQueueTest::::buildIPv6HostMessage()", "107": "ConsumeQueueTest::::buildIPv6HostMessage()", "109": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "110": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "111": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "112": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "113": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "114": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "115": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "116": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "117": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "118": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "119": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "120": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "121": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "122": "ConsumeQueueTest::::buildStoreConfig(int,int,boolean,int)", "124": "ConsumeQueueTest::::gen()", "125": "ConsumeQueueTest::::gen()", "126": "ConsumeQueueTest::::gen()", "127": "ConsumeQueueTest::::gen()", "128": "ConsumeQueueTest::::gen()", "129": "ConsumeQueueTest::::gen()", "130": "ConsumeQueueTest::::gen()", "131": "ConsumeQueueTest::::gen()", "132": "ConsumeQueueTest::::gen()", "133": "ConsumeQueueTest::::gen()", "134": "ConsumeQueueTest::::gen()", "135": "ConsumeQueueTest::::gen()", "136": "ConsumeQueueTest::::gen()", "137": "ConsumeQueueTest::::gen()", "138": "ConsumeQueueTest::::gen()", "139": "ConsumeQueueTest::::gen()", "140": "ConsumeQueueTest::::gen()", "141": "ConsumeQueueTest::::gen()", "142": "ConsumeQueueTest::::gen()", "143": "ConsumeQueueTest::::gen()", "144": "ConsumeQueueTest::::gen()", "145": "ConsumeQueueTest::::gen()", "146": "ConsumeQueueTest::::gen()", "147": "ConsumeQueueTest::::gen()", "161": "ConsumeQueueTest::::deleteDirectory(java.lang.String)", "162": "ConsumeQueueTest::::deleteDirectory(java.lang.String)", "163": "ConsumeQueueTest::::deleteDirectory(java.lang.String)", "164": "ConsumeQueueTest::::deleteDirectory(java.lang.String)", "166": "ConsumeQueueTest::::deleteFile(java.io.File)", "167": "ConsumeQueueTest::::deleteFile(java.io.File)", "168": "ConsumeQueueTest::::deleteFile(java.io.File)", "169": "ConsumeQueueTest::::deleteFile(java.io.File)", "170": "ConsumeQueueTest::::deleteFile(java.io.File)", "171": "ConsumeQueueTest::::deleteFile(java.io.File)", "172": "ConsumeQueueTest::::deleteFile(java.io.File)", "173": "ConsumeQueueTest::::deleteFile(java.io.File)", "174": "ConsumeQueueTest::::deleteFile(java.io.File)", "175": "ConsumeQueueTest::::deleteFile(java.io.File)", "177": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "178": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "179": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "180": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "181": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "182": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "183": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "184": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "185": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "186": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "187": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "188": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "189": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "190": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "191": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "192": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "193": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "194": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "195": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "196": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "197": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "198": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "199": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "200": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "201": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "202": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "203": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "204": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "205": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "206": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "207": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "208": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "209": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "210": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "211": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "212": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "213": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "214": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "215": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "216": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "217": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "218": "ConsumeQueueTest::::testPutMessagePositionInfo_buildCQRepeatedly()", "220": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "221": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "222": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "223": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "224": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "225": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "226": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "227": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "228": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "229": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "230": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "231": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "232": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "233": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "234": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "235": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "236": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "237": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "238": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "239": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "240": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "241": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "242": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "243": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "244": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "245": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "246": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "247": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "248": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "249": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "250": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "251": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "252": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "253": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "254": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "255": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "256": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "257": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "258": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "259": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "260": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "261": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "262": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "263": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "264": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "265": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "266": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "267": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "268": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "269": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "270": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "271": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "272": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "273": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "274": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "275": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "276": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "277": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "278": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "279": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "280": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "281": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "282": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "283": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "284": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "285": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "286": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "287": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "288": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "289": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "290": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "291": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "292": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "293": "ConsumeQueueTest::::testConsumeQueueWithExtendData()", "294": "ConsumeQueueTest::::testConsumeQueueWithExtendData()"}, "tests": [{"test_lines": [177, 218], "covered_lines": [38, 41, 52, 53, 54, 61, 62, 63, 64, 66, 67, 69, 73, 75, 77, 78, 81, 82, 83, 86, 334, 335, 336, 339, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 407, 408, 409, 410, 411, 414, 415, 437, 438, 439, 442, 443, 444, 445, 446, 448, 450, 451, 453, 462, 463, 465, 471, 482, 483, 501, 502, 503, 504, 505, 510, 528, 558, 559, 560, 561, 562, 564, 582, 586, 587, 594]}, {"test_lines": [220, 294], "covered_lines": [38, 41, 52, 53, 54, 61, 62, 63, 64, 66, 67, 69, 73, 75, 77, 78, 81, 82, 83, 86, 334, 335, 336, 339, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 407, 408, 409, 410, 411, 414, 415, 437, 442, 443, 444, 445, 446, 448, 450, 451, 453, 462, 463, 465, 471, 482, 483, 501, 502, 503, 504, 505, 506, 507, 510, 521, 522, 528, 558, 559, 560, 561, 562, 564, 571, 582, 586, 587, 594]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/store/src/main/java/org/apache/rocketmq/store/StoreStatsService.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.store;\n", "\n", "import java.text.MessageFormat;\n", "import java.util.HashMap;\n", "import java.util.LinkedList;\n", "import java.util.Map;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "import java.util.concurrent.ConcurrentMap;\n", "import java.util.concurrent.atomic.AtomicLong;\n", "import java.util.concurrent.locks.ReentrantLock;\n", "import org.apache.rocketmq.common.ServiceThread;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "\n", "public class StoreStatsService extends ServiceThread {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n", "\n", "    private static final int FREQUENCY_OF_SAMPLING = 1000;\n", "\n", "    private static final int MAX_RECORDS_OF_SAMPLING = 60 * 10;\n", "    private static final String[] PUT_MESSAGE_ENTIRE_TIME_MAX_DESC = new String[] {\n", "        \"[<=0ms]\", \"[0~10ms]\", \"[10~50ms]\", \"[50~100ms]\", \"[100~200ms]\", \"[200~500ms]\", \"[500ms~1s]\", \"[1~2s]\", \"[2~3s]\", \"[3~4s]\", \"[4~5s]\", \"[5~10s]\", \"[10s~]\",\n", "    };\n", "\n", "    private static int printTPSInterval = 60 * 1;\n", "\n", "    private final AtomicLong putMessageFailedTimes = new AtomicLong(0);\n", "\n", "    private final ConcurrentMap<String, AtomicLong> putMessageTopicTimesTotal =\n", "        new ConcurrentHashMap<String, AtomicLong>(128);\n", "    private final ConcurrentMap<String, AtomicLong> putMessageTopicSizeTotal =\n", "        new ConcurrentHashMap<String, AtomicLong>(128);\n", "\n", "    private final AtomicLong getMessageTimesTotalFound = new AtomicLong(0);\n", "    private final AtomicLong getMessageTransferedMsgCount = new AtomicLong(0);\n", "    private final AtomicLong getMessageTimesTotalMiss = new AtomicLong(0);\n", "    private final LinkedList<CallSnapshot> putTimesList = new LinkedList<CallSnapshot>();\n", "\n", "    private final LinkedList<CallSnapshot> getTimesFoundList = new LinkedList<CallSnapshot>();\n", "    private final LinkedList<CallSnapshot> getTimesMissList = new LinkedList<CallSnapshot>();\n", "    private final LinkedList<CallSnapshot> transferedMsgCountList = new LinkedList<CallSnapshot>();\n", "    private volatile AtomicLong[] putMessageDistributeTime;\n", "    private long messageStoreBootTimestamp = System.currentTimeMillis();\n", "    private volatile long putMessageEntireTimeMax = 0;\n", "    private volatile long getMessageEntireTimeMax = 0;\n", "    // for putMessageEntireTimeMax\n", "    private ReentrantLock lockPut = new ReentrantLock();\n", "    // for getMessageEntireTimeMax\n", "    private ReentrantLock lockGet = new ReentrantLock();\n", "\n", "    private volatile long dispatchMaxBuffer = 0;\n", "\n", "    private ReentrantLock lockSampling = new ReentrantLock();\n", "    private long lastPrintTimestamp = System.currentTimeMillis();\n", "\n", "    public StoreStatsService() {\n", "        this.initPutMessageDistributeTime();\n", "    }\n", "\n", "    private AtomicLong[] initPutMessageDistributeTime() {\n", "        AtomicLong[] next = new AtomicLong[13];\n", "        for (int i = 0; i < next.length; i++) {\n", "            next[i] = new AtomicLong(0);\n", "        }\n", "\n", "        AtomicLong[] old = this.putMessageDistributeTime;\n", "\n", "        this.putMessageDistributeTime = next;\n", "\n", "        return old;\n", "    }\n", "\n", "    public long getPutMessageEntireTimeMax() {\n", "        return putMessageEntireTimeMax;\n", "    }\n", "\n", "    public void setPutMessageEntireTimeMax(long value) {\n", "        final AtomicLong[] times = this.putMessageDistributeTime;\n", "\n", "        if (null == times)\n", "            return;\n", "\n", "        // us\n", "        if (value <= 0) {\n", "            times[0].incrementAndGet();\n", "        } else if (value < 10) {\n", "            times[1].incrementAndGet();\n", "        } else if (value < 50) {\n", "            times[2].incrementAndGet();\n", "        } else if (value < 100) {\n", "            times[3].incrementAndGet();\n", "        } else if (value < 200) {\n", "            times[4].incrementAndGet();\n", "        } else if (value < 500) {\n", "            times[5].incrementAndGet();\n", "        } else if (value < 1000) {\n", "            times[6].incrementAndGet();\n", "        }\n", "        // 2s\n", "        else if (value < 2000) {\n", "            times[7].incrementAndGet();\n", "        }\n", "        // 3s\n", "        else if (value < 3000) {\n", "            times[8].incrementAndGet();\n", "        }\n", "        // 4s\n", "        else if (value < 4000) {\n", "            times[9].incrementAndGet();\n", "        }\n", "        // 5s\n", "        else if (value < 5000) {\n", "            times[10].incrementAndGet();\n", "        }\n", "        // 10s\n", "        else if (value < 10000) {\n", "            times[11].incrementAndGet();\n", "        } else {\n", "            times[12].incrementAndGet();\n", "        }\n", "\n", "        if (value > this.putMessageEntireTimeMax) {\n", "            this.lockPut.lock();\n", "            this.putMessageEntireTimeMax =\n", "                value > this.putMessageEntireTimeMax ? value : this.putMessageEntireTimeMax;\n", "            this.lockPut.unlock();\n", "        }\n", "    }\n", "\n", "    public long getGetMessageEntireTimeMax() {\n", "        return getMessageEntireTimeMax;\n", "    }\n", "\n", "    public void setGetMessageEntireTimeMax(long value) {\n", "        if (value > this.getMessageEntireTimeMax) {\n", "            this.lockGet.lock();\n", "            this.getMessageEntireTimeMax =\n", "                value > this.getMessageEntireTimeMax ? value : this.getMessageEntireTimeMax;\n", "            this.lockGet.unlock();\n", "        }\n", "    }\n", "\n", "    public long getDispatchMaxBuffer() {\n", "        return dispatchMaxBuffer;\n", "    }\n", "\n", "    public void setDispatchMaxBuffer(long value) {\n", "        this.dispatchMaxBuffer = value > this.dispatchMaxBuffer ? value : this.dispatchMaxBuffer;\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "        final StringBuilder sb = new StringBuilder(1024);\n", "        Long totalTimes = getPutMessageTimesTotal();\n", "        if (0 == totalTimes) {\n", "            totalTimes = 1L;\n", "        }\n", "\n", "        sb.append(\"\\truntime: \" + this.getFormatRuntime() + \"\\r\\n\");\n", "        sb.append(\"\\tputMessageEntireTimeMax: \" + this.putMessageEntireTimeMax + \"\\r\\n\");\n", "        sb.append(\"\\tputMessageTimesTotal: \" + totalTimes + \"\\r\\n\");\n", "        sb.append(\"\\tputMessageSizeTotal: \" + this.getPutMessageSizeTotal() + \"\\r\\n\");\n", "        sb.append(\"\\tputMessageDistributeTime: \" + this.getPutMessageDistributeTimeStringInfo(totalTimes)\n", "            + \"\\r\\n\");\n", "        sb.append(\"\\tputMessageAverageSize: \" + (this.getPutMessageSizeTotal() / totalTimes.doubleValue())\n", "            + \"\\r\\n\");\n", "        sb.append(\"\\tdispatchMaxBuffer: \" + this.dispatchMaxBuffer + \"\\r\\n\");\n", "        sb.append(\"\\tgetMessageEntireTimeMax: \" + this.getMessageEntireTimeMax + \"\\r\\n\");\n", "        sb.append(\"\\tputTps: \" + this.getPutTps() + \"\\r\\n\");\n", "        sb.append(\"\\tgetFoundTps: \" + this.getGetFoundTps() + \"\\r\\n\");\n", "        sb.append(\"\\tgetMissTps: \" + this.getGetMissTps() + \"\\r\\n\");\n", "        sb.append(\"\\tgetTotalTps: \" + this.getGetTotalTps() + \"\\r\\n\");\n", "        sb.append(\"\\tgetTransferedTps: \" + this.getGetTransferedTps() + \"\\r\\n\");\n", "        return sb.toString();\n", "    }\n", "\n", "    public long getPutMessageTimesTotal() {\n", "        long rs = 0;\n", "        for (AtomicLong data : putMessageTopicTimesTotal.values()) {\n", "            rs += data.get();\n", "        }\n", "        return rs;\n", "    }\n", "\n", "    private String getFormatRuntime() {\n", "        final long millisecond = 1;\n", "        final long second = 1000 * millisecond;\n", "        final long minute = 60 * second;\n", "        final long hour = 60 * minute;\n", "        final long day = 24 * hour;\n", "        final MessageFormat messageFormat = new MessageFormat(\"[ {0} days, {1} hours, {2} minutes, {3} seconds ]\");\n", "\n", "        long time = System.currentTimeMillis() - this.messageStoreBootTimestamp;\n", "        long days = time / day;\n", "        long hours = (time % day) / hour;\n", "        long minutes = (time % hour) / minute;\n", "        long seconds = (time % minute) / second;\n", "        return messageFormat.format(new Long[] {days, hours, minutes, seconds});\n", "    }\n", "\n", "    public long getPutMessageSizeTotal() {\n", "        long rs = 0;\n", "        for (AtomicLong data : putMessageTopicSizeTotal.values()) {\n", "            rs += data.get();\n", "        }\n", "        return rs;\n", "    }\n", "\n", "    private String getPutMessageDistributeTimeStringInfo(Long total) {\n", "        return this.putMessageDistributeTimeToString();\n", "    }\n", "\n", "    private String getPutTps() {\n", "        StringBuilder sb = new StringBuilder();\n", "\n", "        sb.append(this.getPutTps(10));\n", "        sb.append(\" \");\n", "\n", "        sb.append(this.getPutTps(60));\n", "        sb.append(\" \");\n", "\n", "        sb.append(this.getPutTps(600));\n", "\n", "        return sb.toString();\n", "    }\n", "\n", "    private String getGetFoundTps() {\n", "        StringBuilder sb = new StringBuilder();\n", "\n", "        sb.append(this.getGetFoundTps(10));\n", "        sb.append(\" \");\n", "\n", "        sb.append(this.getGetFoundTps(60));\n", "        sb.append(\" \");\n", "\n", "        sb.append(this.getGetFoundTps(600));\n", "\n", "        return sb.toString();\n", "    }\n", "\n", "    private String getGetMissTps() {\n", "        StringBuilder sb = new StringBuilder();\n", "\n", "        sb.append(this.getGetMissTps(10));\n", "        sb.append(\" \");\n", "\n", "        sb.append(this.getGetMissTps(60));\n", "        sb.append(\" \");\n", "\n", "        sb.append(this.getGetMissTps(600));\n", "\n", "        return sb.toString();\n", "    }\n", "\n", "    private String getGetTotalTps() {\n", "        StringBuilder sb = new StringBuilder();\n", "\n", "        sb.append(this.getGetTotalTps(10));\n", "        sb.append(\" \");\n", "\n", "        sb.append(this.getGetTotalTps(60));\n", "        sb.append(\" \");\n", "\n", "        sb.append(this.getGetTotalTps(600));\n", "\n", "        return sb.toString();\n", "    }\n", "\n", "    private String getGetTransferedTps() {\n", "        StringBuilder sb = new StringBuilder();\n", "\n", "        sb.append(this.getGetTransferedTps(10));\n", "        sb.append(\" \");\n", "\n", "        sb.append(this.getGetTransferedTps(60));\n", "        sb.append(\" \");\n", "\n", "        sb.append(this.getGetTransferedTps(600));\n", "\n", "        return sb.toString();\n", "    }\n", "\n", "    private String putMessageDistributeTimeToString() {\n", "        final AtomicLong[] times = this.putMessageDistributeTime;\n", "        if (null == times)\n", "            return null;\n", "\n", "        final StringBuilder sb = new StringBuilder();\n", "        for (int i = 0; i < times.length; i++) {\n", "            long value = times[i].get();\n", "            sb.append(String.format(\"%s:%d\", PUT_MESSAGE_ENTIRE_TIME_MAX_DESC[i], value));\n", "            sb.append(\" \");\n", "        }\n", "\n", "        return sb.toString();\n", "    }\n", "\n", "    private String getPutTps(int time) {\n", "        String result = \"\";\n", "        this.lockSampling.lock();\n", "        try {\n", "            CallSnapshot last = this.putTimesList.getLast();\n", "\n", "            if (this.putTimesList.size() > time) {\n", "                CallSnapshot lastBefore = this.putTimesList.get(this.putTimesList.size() - (time + 1));\n", "                result += CallSnapshot.getTPS(lastBefore, last);\n", "            }\n", "\n", "        } finally {\n", "            this.lockSampling.unlock();\n", "        }\n", "        return result;\n", "    }\n", "\n", "    private String getGetFoundTps(int time) {\n", "        String result = \"\";\n", "        this.lockSampling.lock();\n", "        try {\n", "            CallSnapshot last = this.getTimesFoundList.getLast();\n", "\n", "            if (this.getTimesFoundList.size() > time) {\n", "                CallSnapshot lastBefore =\n", "                    this.getTimesFoundList.get(this.getTimesFoundList.size() - (time + 1));\n", "                result += CallSnapshot.getTPS(lastBefore, last);\n", "            }\n", "        } finally {\n", "            this.lockSampling.unlock();\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    private String getGetMissTps(int time) {\n", "        String result = \"\";\n", "        this.lockSampling.lock();\n", "        try {\n", "            CallSnapshot last = this.getTimesMissList.getLast();\n", "\n", "            if (this.getTimesMissList.size() > time) {\n", "                CallSnapshot lastBefore =\n", "                    this.getTimesMissList.get(this.getTimesMissList.size() - (time + 1));\n", "                result += CallSnapshot.getTPS(lastBefore, last);\n", "            }\n", "\n", "        } finally {\n", "            this.lockSampling.unlock();\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    private String getGetTotalTps(int time) {\n", "        this.lockSampling.lock();\n", "        double found = 0;\n", "        double miss = 0;\n", "        try {\n", "            {\n", "                CallSnapshot last = this.getTimesFoundList.getLast();\n", "\n", "                if (this.getTimesFoundList.size() > time) {\n", "                    CallSnapshot lastBefore =\n", "                        this.getTimesFoundList.get(this.getTimesFoundList.size() - (time + 1));\n", "                    found = CallSnapshot.getTPS(lastBefore, last);\n", "                }\n", "            }\n", "            {\n", "                CallSnapshot last = this.getTimesMissList.getLast();\n", "\n", "                if (this.getTimesMissList.size() > time) {\n", "                    CallSnapshot lastBefore =\n", "                        this.getTimesMissList.get(this.getTimesMissList.size() - (time + 1));\n", "                    miss = CallSnapshot.getTPS(lastBefore, last);\n", "                }\n", "            }\n", "\n", "        } finally {\n", "            this.lockSampling.unlock();\n", "        }\n", "\n", "        return Double.toString(found + miss);\n", "    }\n", "\n", "    private String getGetTransferedTps(int time) {\n", "        String result = \"\";\n", "        this.lockSampling.lock();\n", "        try {\n", "            CallSnapshot last = this.transferedMsgCountList.getLast();\n", "\n", "            if (this.transferedMsgCountList.size() > time) {\n", "                CallSnapshot lastBefore =\n", "                    this.transferedMsgCountList.get(this.transferedMsgCountList.size() - (time + 1));\n", "                result += CallSnapshot.getTPS(lastBefore, last);\n", "            }\n", "\n", "        } finally {\n", "            this.lockSampling.unlock();\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    public HashMap<String, String> getRuntimeInfo() {\n", "        HashMap<String, String> result = new HashMap<String, String>(64);\n", "\n", "        Long totalTimes = getPutMessageTimesTotal();\n", "        if (0 == totalTimes) {\n", "            totalTimes = 1L;\n", "        }\n", "\n", "        result.put(\"bootTimestamp\", String.valueOf(this.messageStoreBootTimestamp));\n", "        result.put(\"runtime\", this.getFormatRuntime());\n", "        result.put(\"putMessageEntireTimeMax\", String.valueOf(this.putMessageEntireTimeMax));\n", "        result.put(\"putMessageTimesTotal\", String.valueOf(totalTimes));\n", "        result.put(\"putMessageSizeTotal\", String.valueOf(this.getPutMessageSizeTotal()));\n", "        result.put(\"putMessageDistributeTime\",\n", "            String.valueOf(this.getPutMessageDistributeTimeStringInfo(totalTimes)));\n", "        result.put(\"putMessageAverageSize\",\n", "            String.valueOf(this.getPutMessageSizeTotal() / totalTimes.doubleValue()));\n", "        result.put(\"dispatchMaxBuffer\", String.valueOf(this.dispatchMaxBuffer));\n", "        result.put(\"getMessageEntireTimeMax\", String.valueOf(this.getMessageEntireTimeMax));\n", "        result.put(\"putTps\", String.valueOf(this.getPutTps()));\n", "        result.put(\"getFoundTps\", String.valueOf(this.getGetFoundTps()));\n", "        result.put(\"getMissTps\", String.valueOf(this.getGetMissTps()));\n", "        result.put(\"getTotalTps\", String.valueOf(this.getGetTotalTps()));\n", "        result.put(\"getTransferedTps\", String.valueOf(this.getGetTransferedTps()));\n", "\n", "        return result;\n", "    }\n", "\n", "    public void run() {\n", "        log.info(this.getServiceName() + \" service started\");\n", "\n", "        while (!this.isStopped()) {\n", "            try {\n", "                this.waitForRunning(FREQUENCY_OF_SAMPLING);\n", "\n", "                this.sampling();\n", "\n", "                this.printTps();\n", "            } catch (Exception e) {\n", "                log.warn(this.getServiceName() + \" service has exception. \", e);\n", "            }\n", "        }\n", "\n", "        log.info(this.getServiceName() + \" service end\");\n", "    }\n", "\n", "    @Override\n", "    public String getServiceName() {\n", "        return StoreStatsService.class.getSimpleName();\n", "    }\n", "\n", "    private void sampling() {\n", "        this.lockSampling.lock();\n", "        try {\n", "            this.putTimesList.add(new CallSnapshot(System.currentTimeMillis(), getPutMessageTimesTotal()));\n", "            if (this.putTimesList.size() > (MAX_RECORDS_OF_SAMPLING + 1)) {\n", "                this.putTimesList.removeFirst();\n", "            }\n", "\n", "            this.getTimesFoundList.add(new CallSnapshot(System.currentTimeMillis(),\n", "                this.getMessageTimesTotalFound.get()));\n", "            if (this.getTimesFoundList.size() > (MAX_RECORDS_OF_SAMPLING + 1)) {\n", "                this.getTimesFoundList.removeFirst();\n", "            }\n", "\n", "            this.getTimesMissList.add(new CallSnapshot(System.currentTimeMillis(),\n", "                this.getMessageTimesTotalMiss.get()));\n", "            if (this.getTimesMissList.size() > (MAX_RECORDS_OF_SAMPLING + 1)) {\n", "                this.getTimesMissList.removeFirst();\n", "            }\n", "\n", "            this.transferedMsgCountList.add(new CallSnapshot(System.currentTimeMillis(),\n", "                this.getMessageTransferedMsgCount.get()));\n", "            if (this.transferedMsgCountList.size() > (MAX_RECORDS_OF_SAMPLING + 1)) {\n", "                this.transferedMsgCountList.removeFirst();\n", "            }\n", "\n", "        } finally {\n", "            this.lockSampling.unlock();\n", "        }\n", "    }\n", "\n", "    private void printTps() {\n", "        if (System.currentTimeMillis() > (this.lastPrintTimestamp + printTPSInterval * 1000)) {\n", "            this.lastPrintTimestamp = System.currentTimeMillis();\n", "\n", "            log.info(\"[STORETPS] put_tps {} get_found_tps {} get_miss_tps {} get_transfered_tps {}\",\n", "                this.getPutTps(printTPSInterval),\n", "                this.getGetFoundTps(printTPSInterval),\n", "                this.getGetMissTps(printTPSInterval),\n", "                this.getGetTransferedTps(printTPSInterval)\n", "            );\n", "\n", "            final AtomicLong[] times = this.initPutMessageDistributeTime();\n", "            if (null == times)\n", "                return;\n", "\n", "            final StringBuilder sb = new StringBuilder();\n", "            long totalPut = 0;\n", "            for (int i = 0; i < times.length; i++) {\n", "                long value = times[i].get();\n", "                totalPut += value;\n", "                sb.append(String.format(\"%s:%d\", PUT_MESSAGE_ENTIRE_TIME_MAX_DESC[i], value));\n", "                sb.append(\" \");\n", "            }\n", "\n", "            log.info(\"[PAGECACHERT] TotalPut {}, PutMessageDistributeTime {}\", totalPut, sb.toString());\n", "        }\n", "    }\n", "\n", "    public AtomicLong getGetMessageTimesTotalFound() {\n", "        return getMessageTimesTotalFound;\n", "    }\n", "\n", "    public AtomicLong getGetMessageTimesTotalMiss() {\n", "        return getMessageTimesTotalMiss;\n", "    }\n", "\n", "    public AtomicLong getGetMessageTransferedMsgCount() {\n", "        return getMessageTransferedMsgCount;\n", "    }\n", "\n", "    public AtomicLong getPutMessageFailedTimes() {\n", "        return putMessageFailedTimes;\n", "    }\n", "\n", "    public AtomicLong getSinglePutMessageTopicSizeTotal(String topic) {\n", "        AtomicLong rs = putMessageTopicSizeTotal.get(topic);\n", "        if (null == rs) {\n", "            rs = new AtomicLong(0);\n", "            AtomicLong previous = putMessageTopicSizeTotal.putIfAbsent(topic, rs);\n", "            if (previous != null) {\n", "                rs = previous;\n", "            }\n", "        }\n", "        return rs;\n", "    }\n", "\n", "    public AtomicLong getSinglePutMessageTopicTimesTotal(String topic) {\n", "        AtomicLong rs = putMessageTopicTimesTotal.get(topic);\n", "        if (null == rs) {\n", "            rs = new AtomicLong(0);\n", "            AtomicLong previous = putMessageTopicTimesTotal.putIfAbsent(topic, rs);\n", "            if (previous != null) {\n", "                rs = previous;\n", "            }\n", "        }\n", "        return rs;\n", "    }\n", "\n", "    public Map<String, AtomicLong> getPutMessageTopicTimesTotal() {\n", "        return putMessageTopicTimesTotal;\n", "    }\n", "\n", "    public Map<String, AtomicLong> getPutMessageTopicSizeTotal() {\n", "        return putMessageTopicSizeTotal;\n", "    }\n", "\n", "    static class CallSnapshot {\n", "        public final long timestamp;\n", "        public final long callTimesTotal;\n", "\n", "        public CallSnapshot(long timestamp, long callTimesTotal) {\n", "            this.timestamp = timestamp;\n", "            this.callTimesTotal = callTimesTotal;\n", "        }\n", "\n", "        public static double getTPS(final CallSnapshot begin, final CallSnapshot end) {\n", "            long total = end.callTimesTotal - begin.callTimesTotal;\n", "            Long time = end.timestamp - begin.timestamp;\n", "\n", "            double tps = total / time.doubleValue();\n", "\n", "            return tps * 1000;\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.store;\n", "\n", "import java.util.concurrent.BrokenBarrierException;\n", "import java.util.concurrent.CountDownLatch;\n", "import java.util.concurrent.CyclicBarrier;\n", "import java.util.concurrent.atomic.AtomicLong;\n", "import java.util.concurrent.atomic.AtomicReference;\n", "import org.junit.Test;\n", "\n", "public class StoreStatsServiceTest {\n", "\n", "    @Test\n", "    public void getSinglePutMessageTopicSizeTotal() throws Exception {\n", "        final StoreStatsService storeStatsService = new StoreStatsService();\n", "        int num = Runtime.getRuntime().availableProcessors() * 2;\n", "        for (int j = 0; j < 100; j++) {\n", "            final AtomicReference<AtomicLong> reference = new AtomicReference<>(null);\n", "            final CountDownLatch latch = new CountDownLatch(num);\n", "            final CyclicBarrier barrier = new CyclicBarrier(num);\n", "            for (int i = 0; i < num; i++) {\n", "                new Thread(new Runnable() {\n", "                    @Override\n", "                    public void run() {\n", "                        try {\n", "                            barrier.await();\n", "                            AtomicLong atomicLong = storeStatsService.getSinglePutMessageTopicSizeTotal(\"test\");\n", "                            if (reference.compareAndSet(null, atomicLong)) {\n", "                            } else if (reference.get() != atomicLong) {\n", "                                throw new RuntimeException(\"Reference should be same!\");\n", "                            }\n", "                        } catch (InterruptedException | BrokenBarrierException e) {\n", "                            e.printStackTrace();\n", "                        } finally {\n", "                            latch.countDown();\n", "                        }\n", "                    }\n", "                }).start();\n", "            }\n", "            latch.await();\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void getSinglePutMessageTopicTimesTotal() throws Exception {\n", "        final StoreStatsService storeStatsService = new StoreStatsService();\n", "        int num = Runtime.getRuntime().availableProcessors() * 2;\n", "        for (int j = 0; j < 100; j++) {\n", "            final AtomicReference<AtomicLong> reference = new AtomicReference<>(null);\n", "            final CountDownLatch latch = new CountDownLatch(num);\n", "            final CyclicBarrier barrier = new CyclicBarrier(num);\n", "            for (int i = 0; i < num; i++) {\n", "                new Thread(new Runnable() {\n", "                    @Override\n", "                    public void run() {\n", "                        try {\n", "                            barrier.await();\n", "                            AtomicLong atomicLong = storeStatsService.getSinglePutMessageTopicTimesTotal(\"test\");\n", "                            if (reference.compareAndSet(null, atomicLong)) {\n", "                            } else if (reference.get() != atomicLong) {\n", "                                throw new RuntimeException(\"Reference should be same!\");\n", "                            }\n", "                        } catch (InterruptedException | BrokenBarrierException e) {\n", "                            e.printStackTrace();\n", "                        } finally {\n", "                            latch.countDown();\n", "                        }\n", "                    }\n", "                }).start();\n", "            }\n", "            latch.await();\n", "        }\n", "    }\n", "\n", "}"], "method_lines_dic": {"StoreStatsService::::initPutMessageDistributeTime()": [77, 88], "StoreStatsService::::getPutMessageEntireTimeMax()": [90, 92], "StoreStatsService::::setPutMessageEntireTimeMax(long)": [94, 145], "StoreStatsService::::getGetMessageEntireTimeMax()": [147, 149], "StoreStatsService::::setGetMessageEntireTimeMax(long)": [151, 158], "StoreStatsService::::getDispatchMaxBuffer()": [160, 162], "StoreStatsService::::setDispatchMaxBuffer(long)": [164, 166], "StoreStatsService::::toString()": [168, 192], "StoreStatsService::::getPutMessageTimesTotal()": [194, 200], "StoreStatsService::::getFormatRuntime()": [202, 216], "StoreStatsService::::getPutMessageSizeTotal()": [218, 224], "StoreStatsService::::getPutMessageDistributeTimeStringInfo(java.lang.Long)": [226, 228], "StoreStatsService::::getPutTps()": [230, 242], "StoreStatsService::::getGetFoundTps()": [244, 256], "StoreStatsService::::getGetMissTps()": [258, 270], "StoreStatsService::::getGetTotalTps()": [272, 284], "StoreStatsService::::getGetTransferedTps()": [286, 298], "StoreStatsService::::putMessageDistributeTimeToString()": [300, 313], "StoreStatsService::::getPutTps(int)": [315, 330], "StoreStatsService::::getGetFoundTps(int)": [332, 348], "StoreStatsService::::getGetMissTps(int)": [350, 367], "StoreStatsService::::getGetTotalTps(int)": [369, 398], "StoreStatsService::::getGetTransferedTps(int)": [400, 417], "StoreStatsService::::getRuntimeInfo()": [419, 445], "StoreStatsService::::run()": [447, 463], "StoreStatsService::::getServiceName()": [465, 468], "StoreStatsService::::sampling()": [470, 499], "StoreStatsService::::printTps()": [501, 527], "StoreStatsService::::getGetMessageTimesTotalFound()": [529, 531], "StoreStatsService::::getGetMessageTimesTotalMiss()": [533, 535], "StoreStatsService::::getGetMessageTransferedMsgCount()": [537, 539], "StoreStatsService::::getPutMessageFailedTimes()": [541, 543], "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)": [545, 555], "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)": [557, 567], "StoreStatsService::::getPutMessageTopicTimesTotal()": [569, 571], "StoreStatsService::::getPutMessageTopicSizeTotal()": [573, 575], "StoreStatsService.CallSnapshot::::getTPS(org.apache.rocketmq.store.StoreStatsService.CallSnapshot,org.apache.rocketmq.store.StoreStatsService.CallSnapshot)": [586, 593]}, "test_method_lines_dic": {"StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()": [28, 57], "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()": [59, 88]}, "reverse_method_lines_dic": {"77": "StoreStatsService::::initPutMessageDistributeTime()", "78": "StoreStatsService::::initPutMessageDistributeTime()", "79": "StoreStatsService::::initPutMessageDistributeTime()", "80": "StoreStatsService::::initPutMessageDistributeTime()", "81": "StoreStatsService::::initPutMessageDistributeTime()", "82": "StoreStatsService::::initPutMessageDistributeTime()", "83": "StoreStatsService::::initPutMessageDistributeTime()", "84": "StoreStatsService::::initPutMessageDistributeTime()", "85": "StoreStatsService::::initPutMessageDistributeTime()", "86": "StoreStatsService::::initPutMessageDistributeTime()", "87": "StoreStatsService::::initPutMessageDistributeTime()", "88": "StoreStatsService::::initPutMessageDistributeTime()", "90": "StoreStatsService::::getPutMessageEntireTimeMax()", "91": "StoreStatsService::::getPutMessageEntireTimeMax()", "92": "StoreStatsService::::getPutMessageEntireTimeMax()", "94": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "95": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "96": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "97": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "98": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "99": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "100": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "101": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "102": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "103": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "104": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "105": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "106": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "107": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "108": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "109": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "110": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "111": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "112": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "113": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "114": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "115": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "116": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "117": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "118": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "119": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "120": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "121": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "122": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "123": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "124": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "125": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "126": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "127": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "128": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "129": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "130": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "131": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "132": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "133": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "134": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "135": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "136": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "137": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "138": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "139": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "140": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "141": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "142": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "143": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "144": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "145": "StoreStatsService::::setPutMessageEntireTimeMax(long)", "147": "StoreStatsService::::getGetMessageEntireTimeMax()", "148": "StoreStatsService::::getGetMessageEntireTimeMax()", "149": "StoreStatsService::::getGetMessageEntireTimeMax()", "151": "StoreStatsService::::setGetMessageEntireTimeMax(long)", "152": "StoreStatsService::::setGetMessageEntireTimeMax(long)", "153": "StoreStatsService::::setGetMessageEntireTimeMax(long)", "154": "StoreStatsService::::setGetMessageEntireTimeMax(long)", "155": "StoreStatsService::::setGetMessageEntireTimeMax(long)", "156": "StoreStatsService::::setGetMessageEntireTimeMax(long)", "157": "StoreStatsService::::setGetMessageEntireTimeMax(long)", "158": "StoreStatsService::::setGetMessageEntireTimeMax(long)", "160": "StoreStatsService::::getDispatchMaxBuffer()", "161": "StoreStatsService::::getDispatchMaxBuffer()", "162": "StoreStatsService::::getDispatchMaxBuffer()", "164": "StoreStatsService::::setDispatchMaxBuffer(long)", "165": "StoreStatsService::::setDispatchMaxBuffer(long)", "166": "StoreStatsService::::setDispatchMaxBuffer(long)", "168": "StoreStatsService::::toString()", "169": "StoreStatsService::::toString()", "170": "StoreStatsService::::toString()", "171": "StoreStatsService::::toString()", "172": "StoreStatsService::::toString()", "173": "StoreStatsService::::toString()", "174": "StoreStatsService::::toString()", "175": "StoreStatsService::::toString()", "176": "StoreStatsService::::toString()", "177": "StoreStatsService::::toString()", "178": "StoreStatsService::::toString()", "179": "StoreStatsService::::toString()", "180": "StoreStatsService::::toString()", "181": "StoreStatsService::::toString()", "182": "StoreStatsService::::toString()", "183": "StoreStatsService::::toString()", "184": "StoreStatsService::::toString()", "185": "StoreStatsService::::toString()", "186": "StoreStatsService::::toString()", "187": "StoreStatsService::::toString()", "188": "StoreStatsService::::toString()", "189": "StoreStatsService::::toString()", "190": "StoreStatsService::::toString()", "191": "StoreStatsService::::toString()", "192": "StoreStatsService::::toString()", "194": "StoreStatsService::::getPutMessageTimesTotal()", "195": "StoreStatsService::::getPutMessageTimesTotal()", "196": "StoreStatsService::::getPutMessageTimesTotal()", "197": "StoreStatsService::::getPutMessageTimesTotal()", "198": "StoreStatsService::::getPutMessageTimesTotal()", "199": "StoreStatsService::::getPutMessageTimesTotal()", "200": "StoreStatsService::::getPutMessageTimesTotal()", "202": "StoreStatsService::::getFormatRuntime()", "203": "StoreStatsService::::getFormatRuntime()", "204": "StoreStatsService::::getFormatRuntime()", "205": "StoreStatsService::::getFormatRuntime()", "206": "StoreStatsService::::getFormatRuntime()", "207": "StoreStatsService::::getFormatRuntime()", "208": "StoreStatsService::::getFormatRuntime()", "209": "StoreStatsService::::getFormatRuntime()", "210": "StoreStatsService::::getFormatRuntime()", "211": "StoreStatsService::::getFormatRuntime()", "212": "StoreStatsService::::getFormatRuntime()", "213": "StoreStatsService::::getFormatRuntime()", "214": "StoreStatsService::::getFormatRuntime()", "215": "StoreStatsService::::getFormatRuntime()", "216": "StoreStatsService::::getFormatRuntime()", "218": "StoreStatsService::::getPutMessageSizeTotal()", "219": "StoreStatsService::::getPutMessageSizeTotal()", "220": "StoreStatsService::::getPutMessageSizeTotal()", "221": "StoreStatsService::::getPutMessageSizeTotal()", "222": "StoreStatsService::::getPutMessageSizeTotal()", "223": "StoreStatsService::::getPutMessageSizeTotal()", "224": "StoreStatsService::::getPutMessageSizeTotal()", "226": "StoreStatsService::::getPutMessageDistributeTimeStringInfo(java.lang.Long)", "227": "StoreStatsService::::getPutMessageDistributeTimeStringInfo(java.lang.Long)", "228": "StoreStatsService::::getPutMessageDistributeTimeStringInfo(java.lang.Long)", "230": "StoreStatsService::::getPutTps()", "231": "StoreStatsService::::getPutTps()", "232": "StoreStatsService::::getPutTps()", "233": "StoreStatsService::::getPutTps()", "234": "StoreStatsService::::getPutTps()", "235": "StoreStatsService::::getPutTps()", "236": "StoreStatsService::::getPutTps()", "237": "StoreStatsService::::getPutTps()", "238": "StoreStatsService::::getPutTps()", "239": "StoreStatsService::::getPutTps()", "240": "StoreStatsService::::getPutTps()", "241": "StoreStatsService::::getPutTps()", "242": "StoreStatsService::::getPutTps()", "244": "StoreStatsService::::getGetFoundTps()", "245": "StoreStatsService::::getGetFoundTps()", "246": "StoreStatsService::::getGetFoundTps()", "247": "StoreStatsService::::getGetFoundTps()", "248": "StoreStatsService::::getGetFoundTps()", "249": "StoreStatsService::::getGetFoundTps()", "250": "StoreStatsService::::getGetFoundTps()", "251": "StoreStatsService::::getGetFoundTps()", "252": "StoreStatsService::::getGetFoundTps()", "253": "StoreStatsService::::getGetFoundTps()", "254": "StoreStatsService::::getGetFoundTps()", "255": "StoreStatsService::::getGetFoundTps()", "256": "StoreStatsService::::getGetFoundTps()", "258": "StoreStatsService::::getGetMissTps()", "259": "StoreStatsService::::getGetMissTps()", "260": "StoreStatsService::::getGetMissTps()", "261": "StoreStatsService::::getGetMissTps()", "262": "StoreStatsService::::getGetMissTps()", "263": "StoreStatsService::::getGetMissTps()", "264": "StoreStatsService::::getGetMissTps()", "265": "StoreStatsService::::getGetMissTps()", "266": "StoreStatsService::::getGetMissTps()", "267": "StoreStatsService::::getGetMissTps()", "268": "StoreStatsService::::getGetMissTps()", "269": "StoreStatsService::::getGetMissTps()", "270": "StoreStatsService::::getGetMissTps()", "272": "StoreStatsService::::getGetTotalTps()", "273": "StoreStatsService::::getGetTotalTps()", "274": "StoreStatsService::::getGetTotalTps()", "275": "StoreStatsService::::getGetTotalTps()", "276": "StoreStatsService::::getGetTotalTps()", "277": "StoreStatsService::::getGetTotalTps()", "278": "StoreStatsService::::getGetTotalTps()", "279": "StoreStatsService::::getGetTotalTps()", "280": "StoreStatsService::::getGetTotalTps()", "281": "StoreStatsService::::getGetTotalTps()", "282": "StoreStatsService::::getGetTotalTps()", "283": "StoreStatsService::::getGetTotalTps()", "284": "StoreStatsService::::getGetTotalTps()", "286": "StoreStatsService::::getGetTransferedTps()", "287": "StoreStatsService::::getGetTransferedTps()", "288": "StoreStatsService::::getGetTransferedTps()", "289": "StoreStatsService::::getGetTransferedTps()", "290": "StoreStatsService::::getGetTransferedTps()", "291": "StoreStatsService::::getGetTransferedTps()", "292": "StoreStatsService::::getGetTransferedTps()", "293": "StoreStatsService::::getGetTransferedTps()", "294": "StoreStatsService::::getGetTransferedTps()", "295": "StoreStatsService::::getGetTransferedTps()", "296": "StoreStatsService::::getGetTransferedTps()", "297": "StoreStatsService::::getGetTransferedTps()", "298": "StoreStatsService::::getGetTransferedTps()", "300": "StoreStatsService::::putMessageDistributeTimeToString()", "301": "StoreStatsService::::putMessageDistributeTimeToString()", "302": "StoreStatsService::::putMessageDistributeTimeToString()", "303": "StoreStatsService::::putMessageDistributeTimeToString()", "304": "StoreStatsService::::putMessageDistributeTimeToString()", "305": "StoreStatsService::::putMessageDistributeTimeToString()", "306": "StoreStatsService::::putMessageDistributeTimeToString()", "307": "StoreStatsService::::putMessageDistributeTimeToString()", "308": "StoreStatsService::::putMessageDistributeTimeToString()", "309": "StoreStatsService::::putMessageDistributeTimeToString()", "310": "StoreStatsService::::putMessageDistributeTimeToString()", "311": "StoreStatsService::::putMessageDistributeTimeToString()", "312": "StoreStatsService::::putMessageDistributeTimeToString()", "313": "StoreStatsService::::putMessageDistributeTimeToString()", "315": "StoreStatsService::::getPutTps(int)", "316": "StoreStatsService::::getPutTps(int)", "317": "StoreStatsService::::getPutTps(int)", "318": "StoreStatsService::::getPutTps(int)", "319": "StoreStatsService::::getPutTps(int)", "320": "StoreStatsService::::getPutTps(int)", "321": "StoreStatsService::::getPutTps(int)", "322": "StoreStatsService::::getPutTps(int)", "323": "StoreStatsService::::getPutTps(int)", "324": "StoreStatsService::::getPutTps(int)", "325": "StoreStatsService::::getPutTps(int)", "326": "StoreStatsService::::getPutTps(int)", "327": "StoreStatsService::::getPutTps(int)", "328": "StoreStatsService::::getPutTps(int)", "329": "StoreStatsService::::getPutTps(int)", "330": "StoreStatsService::::getPutTps(int)", "332": "StoreStatsService::::getGetFoundTps(int)", "333": "StoreStatsService::::getGetFoundTps(int)", "334": "StoreStatsService::::getGetFoundTps(int)", "335": "StoreStatsService::::getGetFoundTps(int)", "336": "StoreStatsService::::getGetFoundTps(int)", "337": "StoreStatsService::::getGetFoundTps(int)", "338": "StoreStatsService::::getGetFoundTps(int)", "339": "StoreStatsService::::getGetFoundTps(int)", "340": "StoreStatsService::::getGetFoundTps(int)", "341": "StoreStatsService::::getGetFoundTps(int)", "342": "StoreStatsService::::getGetFoundTps(int)", "343": "StoreStatsService::::getGetFoundTps(int)", "344": "StoreStatsService::::getGetFoundTps(int)", "345": "StoreStatsService::::getGetFoundTps(int)", "346": "StoreStatsService::::getGetFoundTps(int)", "347": "StoreStatsService::::getGetFoundTps(int)", "348": "StoreStatsService::::getGetFoundTps(int)", "350": "StoreStatsService::::getGetMissTps(int)", "351": "StoreStatsService::::getGetMissTps(int)", "352": "StoreStatsService::::getGetMissTps(int)", "353": "StoreStatsService::::getGetMissTps(int)", "354": "StoreStatsService::::getGetMissTps(int)", "355": "StoreStatsService::::getGetMissTps(int)", "356": "StoreStatsService::::getGetMissTps(int)", "357": "StoreStatsService::::getGetMissTps(int)", "358": "StoreStatsService::::getGetMissTps(int)", "359": "StoreStatsService::::getGetMissTps(int)", "360": "StoreStatsService::::getGetMissTps(int)", "361": "StoreStatsService::::getGetMissTps(int)", "362": "StoreStatsService::::getGetMissTps(int)", "363": "StoreStatsService::::getGetMissTps(int)", "364": "StoreStatsService::::getGetMissTps(int)", "365": "StoreStatsService::::getGetMissTps(int)", "366": "StoreStatsService::::getGetMissTps(int)", "367": "StoreStatsService::::getGetMissTps(int)", "369": "StoreStatsService::::getGetTotalTps(int)", "370": "StoreStatsService::::getGetTotalTps(int)", "371": "StoreStatsService::::getGetTotalTps(int)", "372": "StoreStatsService::::getGetTotalTps(int)", "373": "StoreStatsService::::getGetTotalTps(int)", "374": "StoreStatsService::::getGetTotalTps(int)", "375": "StoreStatsService::::getGetTotalTps(int)", "376": "StoreStatsService::::getGetTotalTps(int)", "377": "StoreStatsService::::getGetTotalTps(int)", "378": "StoreStatsService::::getGetTotalTps(int)", "379": "StoreStatsService::::getGetTotalTps(int)", "380": "StoreStatsService::::getGetTotalTps(int)", "381": "StoreStatsService::::getGetTotalTps(int)", "382": "StoreStatsService::::getGetTotalTps(int)", "383": "StoreStatsService::::getGetTotalTps(int)", "384": "StoreStatsService::::getGetTotalTps(int)", "385": "StoreStatsService::::getGetTotalTps(int)", "386": "StoreStatsService::::getGetTotalTps(int)", "387": "StoreStatsService::::getGetTotalTps(int)", "388": "StoreStatsService::::getGetTotalTps(int)", "389": "StoreStatsService::::getGetTotalTps(int)", "390": "StoreStatsService::::getGetTotalTps(int)", "391": "StoreStatsService::::getGetTotalTps(int)", "392": "StoreStatsService::::getGetTotalTps(int)", "393": "StoreStatsService::::getGetTotalTps(int)", "394": "StoreStatsService::::getGetTotalTps(int)", "395": "StoreStatsService::::getGetTotalTps(int)", "396": "StoreStatsService::::getGetTotalTps(int)", "397": "StoreStatsService::::getGetTotalTps(int)", "398": "StoreStatsService::::getGetTotalTps(int)", "400": "StoreStatsService::::getGetTransferedTps(int)", "401": "StoreStatsService::::getGetTransferedTps(int)", "402": "StoreStatsService::::getGetTransferedTps(int)", "403": "StoreStatsService::::getGetTransferedTps(int)", "404": "StoreStatsService::::getGetTransferedTps(int)", "405": "StoreStatsService::::getGetTransferedTps(int)", "406": "StoreStatsService::::getGetTransferedTps(int)", "407": "StoreStatsService::::getGetTransferedTps(int)", "408": "StoreStatsService::::getGetTransferedTps(int)", "409": "StoreStatsService::::getGetTransferedTps(int)", "410": "StoreStatsService::::getGetTransferedTps(int)", "411": "StoreStatsService::::getGetTransferedTps(int)", "412": "StoreStatsService::::getGetTransferedTps(int)", "413": "StoreStatsService::::getGetTransferedTps(int)", "414": "StoreStatsService::::getGetTransferedTps(int)", "415": "StoreStatsService::::getGetTransferedTps(int)", "416": "StoreStatsService::::getGetTransferedTps(int)", "417": "StoreStatsService::::getGetTransferedTps(int)", "419": "StoreStatsService::::getRuntimeInfo()", "420": "StoreStatsService::::getRuntimeInfo()", "421": "StoreStatsService::::getRuntimeInfo()", "422": "StoreStatsService::::getRuntimeInfo()", "423": "StoreStatsService::::getRuntimeInfo()", "424": "StoreStatsService::::getRuntimeInfo()", "425": "StoreStatsService::::getRuntimeInfo()", "426": "StoreStatsService::::getRuntimeInfo()", "427": "StoreStatsService::::getRuntimeInfo()", "428": "StoreStatsService::::getRuntimeInfo()", "429": "StoreStatsService::::getRuntimeInfo()", "430": "StoreStatsService::::getRuntimeInfo()", "431": "StoreStatsService::::getRuntimeInfo()", "432": "StoreStatsService::::getRuntimeInfo()", "433": "StoreStatsService::::getRuntimeInfo()", "434": "StoreStatsService::::getRuntimeInfo()", "435": "StoreStatsService::::getRuntimeInfo()", "436": "StoreStatsService::::getRuntimeInfo()", "437": "StoreStatsService::::getRuntimeInfo()", "438": "StoreStatsService::::getRuntimeInfo()", "439": "StoreStatsService::::getRuntimeInfo()", "440": "StoreStatsService::::getRuntimeInfo()", "441": "StoreStatsService::::getRuntimeInfo()", "442": "StoreStatsService::::getRuntimeInfo()", "443": "StoreStatsService::::getRuntimeInfo()", "444": "StoreStatsService::::getRuntimeInfo()", "445": "StoreStatsService::::getRuntimeInfo()", "447": "StoreStatsService::::run()", "448": "StoreStatsService::::run()", "449": "StoreStatsService::::run()", "450": "StoreStatsService::::run()", "451": "StoreStatsService::::run()", "452": "StoreStatsService::::run()", "453": "StoreStatsService::::run()", "454": "StoreStatsService::::run()", "455": "StoreStatsService::::run()", "456": "StoreStatsService::::run()", "457": "StoreStatsService::::run()", "458": "StoreStatsService::::run()", "459": "StoreStatsService::::run()", "460": "StoreStatsService::::run()", "461": "StoreStatsService::::run()", "462": "StoreStatsService::::run()", "463": "StoreStatsService::::run()", "465": "StoreStatsService::::getServiceName()", "466": "StoreStatsService::::getServiceName()", "467": "StoreStatsService::::getServiceName()", "468": "StoreStatsService::::getServiceName()", "470": "StoreStatsService::::sampling()", "471": "StoreStatsService::::sampling()", "472": "StoreStatsService::::sampling()", "473": "StoreStatsService::::sampling()", "474": "StoreStatsService::::sampling()", "475": "StoreStatsService::::sampling()", "476": "StoreStatsService::::sampling()", "477": "StoreStatsService::::sampling()", "478": "StoreStatsService::::sampling()", "479": "StoreStatsService::::sampling()", "480": "StoreStatsService::::sampling()", "481": "StoreStatsService::::sampling()", "482": "StoreStatsService::::sampling()", "483": "StoreStatsService::::sampling()", "484": "StoreStatsService::::sampling()", "485": "StoreStatsService::::sampling()", "486": "StoreStatsService::::sampling()", "487": "StoreStatsService::::sampling()", "488": "StoreStatsService::::sampling()", "489": "StoreStatsService::::sampling()", "490": "StoreStatsService::::sampling()", "491": "StoreStatsService::::sampling()", "492": "StoreStatsService::::sampling()", "493": "StoreStatsService::::sampling()", "494": "StoreStatsService::::sampling()", "495": "StoreStatsService::::sampling()", "496": "StoreStatsService::::sampling()", "497": "StoreStatsService::::sampling()", "498": "StoreStatsService::::sampling()", "499": "StoreStatsService::::sampling()", "501": "StoreStatsService::::printTps()", "502": "StoreStatsService::::printTps()", "503": "StoreStatsService::::printTps()", "504": "StoreStatsService::::printTps()", "505": "StoreStatsService::::printTps()", "506": "StoreStatsService::::printTps()", "507": "StoreStatsService::::printTps()", "508": "StoreStatsService::::printTps()", "509": "StoreStatsService::::printTps()", "510": "StoreStatsService::::printTps()", "511": "StoreStatsService::::printTps()", "512": "StoreStatsService::::printTps()", "513": "StoreStatsService::::printTps()", "514": "StoreStatsService::::printTps()", "515": "StoreStatsService::::printTps()", "516": "StoreStatsService::::printTps()", "517": "StoreStatsService::::printTps()", "518": "StoreStatsService::::printTps()", "519": "StoreStatsService::::printTps()", "520": "StoreStatsService::::printTps()", "521": "StoreStatsService::::printTps()", "522": "StoreStatsService::::printTps()", "523": "StoreStatsService::::printTps()", "524": "StoreStatsService::::printTps()", "525": "StoreStatsService::::printTps()", "526": "StoreStatsService::::printTps()", "527": "StoreStatsService::::printTps()", "529": "StoreStatsService::::getGetMessageTimesTotalFound()", "530": "StoreStatsService::::getGetMessageTimesTotalFound()", "531": "StoreStatsService::::getGetMessageTimesTotalFound()", "533": "StoreStatsService::::getGetMessageTimesTotalMiss()", "534": "StoreStatsService::::getGetMessageTimesTotalMiss()", "535": "StoreStatsService::::getGetMessageTimesTotalMiss()", "537": "StoreStatsService::::getGetMessageTransferedMsgCount()", "538": "StoreStatsService::::getGetMessageTransferedMsgCount()", "539": "StoreStatsService::::getGetMessageTransferedMsgCount()", "541": "StoreStatsService::::getPutMessageFailedTimes()", "542": "StoreStatsService::::getPutMessageFailedTimes()", "543": "StoreStatsService::::getPutMessageFailedTimes()", "545": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "546": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "547": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "548": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "549": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "550": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "551": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "552": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "553": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "554": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "555": "StoreStatsService::::getSinglePutMessageTopicSizeTotal(java.lang.String)", "557": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "558": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "559": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "560": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "561": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "562": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "563": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "564": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "565": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "566": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "567": "StoreStatsService::::getSinglePutMessageTopicTimesTotal(java.lang.String)", "569": "StoreStatsService::::getPutMessageTopicTimesTotal()", "570": "StoreStatsService::::getPutMessageTopicTimesTotal()", "571": "StoreStatsService::::getPutMessageTopicTimesTotal()", "573": "StoreStatsService::::getPutMessageTopicSizeTotal()", "574": "StoreStatsService::::getPutMessageTopicSizeTotal()", "575": "StoreStatsService::::getPutMessageTopicSizeTotal()", "586": "StoreStatsService.CallSnapshot::::getTPS(org.apache.rocketmq.store.StoreStatsService.CallSnapshot,org.apache.rocketmq.store.StoreStatsService.CallSnapshot)", "587": "StoreStatsService.CallSnapshot::::getTPS(org.apache.rocketmq.store.StoreStatsService.CallSnapshot,org.apache.rocketmq.store.StoreStatsService.CallSnapshot)", "588": "StoreStatsService.CallSnapshot::::getTPS(org.apache.rocketmq.store.StoreStatsService.CallSnapshot,org.apache.rocketmq.store.StoreStatsService.CallSnapshot)", "589": "StoreStatsService.CallSnapshot::::getTPS(org.apache.rocketmq.store.StoreStatsService.CallSnapshot,org.apache.rocketmq.store.StoreStatsService.CallSnapshot)", "590": "StoreStatsService.CallSnapshot::::getTPS(org.apache.rocketmq.store.StoreStatsService.CallSnapshot,org.apache.rocketmq.store.StoreStatsService.CallSnapshot)", "591": "StoreStatsService.CallSnapshot::::getTPS(org.apache.rocketmq.store.StoreStatsService.CallSnapshot,org.apache.rocketmq.store.StoreStatsService.CallSnapshot)", "592": "StoreStatsService.CallSnapshot::::getTPS(org.apache.rocketmq.store.StoreStatsService.CallSnapshot,org.apache.rocketmq.store.StoreStatsService.CallSnapshot)", "593": "StoreStatsService.CallSnapshot::::getTPS(org.apache.rocketmq.store.StoreStatsService.CallSnapshot,org.apache.rocketmq.store.StoreStatsService.CallSnapshot)"}, "test_reverse_method_lines_dic": {"28": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "29": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "30": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "31": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "32": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "33": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "34": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "35": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "36": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "37": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "38": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "39": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "40": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "41": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "42": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "43": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "44": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "45": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "46": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "47": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "48": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "49": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "50": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "51": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "52": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "53": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "54": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "55": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "56": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "57": "StoreStatsServiceTest::::getSinglePutMessageTopicSizeTotal()", "59": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "60": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "61": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "62": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "63": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "64": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "65": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "66": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "67": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "68": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "69": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "70": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "71": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "72": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "73": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "74": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "75": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "76": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "77": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "78": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "79": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "80": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "81": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "82": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "83": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "84": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "85": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "86": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "87": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()", "88": "StoreStatsServiceTest::::getSinglePutMessageTopicTimesTotal()"}, "tests": [{"test_lines": [28, 57], "covered_lines": [33, 38, 42, 44, 46, 48, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 66, 68, 70, 71, 73, 74, 75, 78, 79, 80, 83, 85, 87, 546, 547, 548, 549, 550, 554]}, {"test_lines": [59, 88], "covered_lines": [33, 38, 42, 44, 46, 48, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 66, 68, 70, 71, 73, 74, 75, 78, 79, 80, 83, 85, 87, 558, 559, 560, 561, 562, 563, 566]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.store;\n", "\n", "import java.io.File;\n", "import java.io.IOException;\n", "import java.io.RandomAccessFile;\n", "import java.net.Inet6Address;\n", "import java.net.InetSocketAddress;\n", "import java.net.SocketAddress;\n", "import java.nio.ByteBuffer;\n", "import java.nio.channels.FileLock;\n", "import java.util.Collections;\n", "import java.util.HashMap;\n", "import java.util.Iterator;\n", "import java.util.LinkedList;\n", "import java.util.Map;\n", "import java.util.Map.Entry;\n", "import java.util.Set;\n", "import java.util.concurrent.CompletableFuture;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "import java.util.concurrent.ConcurrentMap;\n", "import java.util.concurrent.Executors;\n", "import java.util.concurrent.ScheduledExecutorService;\n", "import java.util.concurrent.TimeUnit;\n", "import java.util.concurrent.atomic.AtomicLong;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.MixAll;\n", "import org.apache.rocketmq.common.ServiceThread;\n", "import org.apache.rocketmq.common.SystemClock;\n", "import org.apache.rocketmq.common.ThreadFactoryImpl;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.common.message.MessageDecoder;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.message.MessageExtBatch;\n", "import org.apache.rocketmq.common.running.RunningStats;\n", "import org.apache.rocketmq.common.sysflag.MessageSysFlag;\n", "import org.apache.rocketmq.common.topic.TopicValidator;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.store.config.BrokerRole;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.apache.rocketmq.store.config.StorePathConfigHelper;\n", "import org.apache.rocketmq.store.dledger.DLedgerCommitLog;\n", "import org.apache.rocketmq.store.ha.HAService;\n", "import org.apache.rocketmq.store.index.IndexService;\n", "import org.apache.rocketmq.store.index.QueryOffsetResult;\n", "import org.apache.rocketmq.store.schedule.ScheduleMessageService;\n", "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n", "\n", "public class DefaultMessageStore implements MessageStore {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n", "\n", "    private final MessageStoreConfig messageStoreConfig;\n", "    // CommitLog\n", "    private final CommitLog commitLog;\n", "\n", "    private final ConcurrentMap<String/* topic */, ConcurrentMap<Integer/* queueId */, ConsumeQueue>> consumeQueueTable;\n", "\n", "    private final FlushConsumeQueueService flushConsumeQueueService;\n", "\n", "    private final CleanCommitLogService cleanCommitLogService;\n", "\n", "    private final CleanConsumeQueueService cleanConsumeQueueService;\n", "\n", "    private final IndexService indexService;\n", "\n", "    private final AllocateMappedFileService allocateMappedFileService;\n", "\n", "    private final ReputMessageService reputMessageService;\n", "\n", "    private final HAService haService;\n", "\n", "    private final ScheduleMessageService scheduleMessageService;\n", "\n", "    private final StoreStatsService storeStatsService;\n", "\n", "    private final TransientStorePool transientStorePool;\n", "\n", "    private final RunningFlags runningFlags = new RunningFlags();\n", "    private final SystemClock systemClock = new SystemClock();\n", "\n", "    private final ScheduledExecutorService scheduledExecutorService =\n", "        Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"StoreScheduledThread\"));\n", "    private final BrokerStatsManager brokerStatsManager;\n", "    private final MessageArrivingListener messageArrivingListener;\n", "    private final BrokerConfig brokerConfig;\n", "\n", "    private volatile boolean shutdown = true;\n", "\n", "    private StoreCheckpoint storeCheckpoint;\n", "\n", "    private AtomicLong printTimes = new AtomicLong(0);\n", "\n", "    private final LinkedList<CommitLogDispatcher> dispatcherList;\n", "\n", "    private RandomAccessFile lockFile;\n", "\n", "    private FileLock lock;\n", "\n", "    boolean shutDownNormal = false;\n", "\n", "    private final ScheduledExecutorService diskCheckScheduledExecutorService =\n", "            Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"DiskCheckScheduledThread\"));\n", "\n", "    public DefaultMessageStore(final MessageStoreConfig messageStoreConfig, final BrokerStatsManager brokerStatsManager,\n", "        final MessageArrivingListener messageArrivingListener, final BrokerConfig brokerConfig) throws IOException {\n", "        this.messageArrivingListener = messageArrivingListener;\n", "        this.brokerConfig = brokerConfig;\n", "        this.messageStoreConfig = messageStoreConfig;\n", "        this.brokerStatsManager = brokerStatsManager;\n", "        this.allocateMappedFileService = new AllocateMappedFileService(this);\n", "        if (messageStoreConfig.isEnableDLegerCommitLog()) {\n", "            this.commitLog = new DLedgerCommitLog(this);\n", "        } else {\n", "            this.commitLog = new CommitLog(this);\n", "        }\n", "        this.consumeQueueTable = new ConcurrentHashMap<>(32);\n", "\n", "        this.flushConsumeQueueService = new FlushConsumeQueueService();\n", "        this.cleanCommitLogService = new CleanCommitLogService();\n", "        this.cleanConsumeQueueService = new CleanConsumeQueueService();\n", "        this.storeStatsService = new StoreStatsService();\n", "        this.indexService = new IndexService(this);\n", "        if (!messageStoreConfig.isEnableDLegerCommitLog()) {\n", "            this.haService = new HAService(this);\n", "        } else {\n", "            this.haService = null;\n", "        }\n", "        this.reputMessageService = new ReputMessageService();\n", "\n", "        this.scheduleMessageService = new ScheduleMessageService(this);\n", "\n", "        this.transientStorePool = new TransientStorePool(messageStoreConfig);\n", "\n", "        if (messageStoreConfig.isTransientStorePoolEnable()) {\n", "            this.transientStorePool.init();\n", "        }\n", "\n", "        this.allocateMappedFileService.start();\n", "\n", "        this.indexService.start();\n", "\n", "        this.dispatcherList = new LinkedList<>();\n", "        this.dispatcherList.addLast(new CommitLogDispatcherBuildConsumeQueue());\n", "        this.dispatcherList.addLast(new CommitLogDispatcherBuildIndex());\n", "\n", "        File file = new File(StorePathConfigHelper.getLockFile(messageStoreConfig.getStorePathRootDir()));\n", "        MappedFile.ensureDirOK(file.getParent());\n", "        lockFile = new RandomAccessFile(file, \"rw\");\n", "    }\n", "\n", "    public void truncateDirtyLogicFiles(long phyOffset) {\n", "        ConcurrentMap<String, ConcurrentMap<Integer, ConsumeQueue>> tables = DefaultMessageStore.this.consumeQueueTable;\n", "\n", "        for (ConcurrentMap<Integer, ConsumeQueue> maps : tables.values()) {\n", "            for (ConsumeQueue logic : maps.values()) {\n", "                logic.truncateDirtyLogicFiles(phyOffset);\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * @throws IOException\n", "     */\n", "    public boolean load() {\n", "        boolean result = true;\n", "\n", "        try {\n", "            boolean lastExitOK = !this.isTempFileExist();\n", "            log.info(\"last shutdown {}\", lastExitOK ? \"normally\" : \"abnormally\");\n", "\n", "            if (null != scheduleMessageService) {\n", "                result = result && this.scheduleMessageService.load();\n", "            }\n", "\n", "            //\u52a0\u8f7dmappedFile\u5230mappedFileQueue\n", "            result = result && this.commitLog.load();\n", "\n", "            // \u52a0\u8f7dConsumeQueue\u5230consumeQueueTable\n", "            result = result && this.loadConsumeQueue();\n", "\n", "            if (result) {\n", "                this.storeCheckpoint =\n", "                    new StoreCheckpoint(StorePathConfigHelper.getStoreCheckpoint(this.messageStoreConfig.getStorePathRootDir()));\n", "                //\u52a0\u8f7dindexFile\u5230ArrayList<IndexFile> indexFileList\n", "                this.indexService.load(lastExitOK);\n", "\n", "                //\u5982\u679cabort\u6587\u4ef6\u5b58\u5728\uff0c\u4ee3\u8868\u5f02\u5e38\u9000\u51fa\uff0c\u9700\u8981\u6062\u590d\u6570\u636e\n", "                this.recover(lastExitOK);\n", "\n", "                log.info(\"load over, and the max phy offset = {}\", this.getMaxPhyOffset());\n", "            }\n", "        } catch (Exception e) {\n", "            log.error(\"load exception\", e);\n", "            result = false;\n", "        }\n", "\n", "        if (!result) {\n", "            this.allocateMappedFileService.shutdown();\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    /**\n", "     * @throws Exception\n", "     */\n", "    public void start() throws Exception {\n", "\n", "        lock = lockFile.getChannel().tryLock(0, 1, false);\n", "        if (lock == null || lock.isShared() || !lock.isValid()) {\n", "            throw new RuntimeException(\"Lock failed,MQ already started\");\n", "        }\n", "\n", "        lockFile.getChannel().write(ByteBuffer.wrap(\"lock\".getBytes()));\n", "        lockFile.getChannel().force(true);\n", "        {\n", "            /**\n", "             * 1. Make sure the fast-forward messages to be truncated during the recovering according to the max physical offset of the commitlog;\n", "             * 2. DLedger committedPos may be missing, so the maxPhysicalPosInLogicQueue maybe bigger that maxOffset returned by DLedgerCommitLog, just let it go;\n", "             * 3. Calculate the reput offset according to the consume queue;\n", "             * 4. Make sure the fall-behind messages to be dispatched before starting the commitlog, especially when the broker role are automatically changed.\n", "             */\n", "            long maxPhysicalPosInLogicQueue = commitLog.getMinOffset();\n", "            for (ConcurrentMap<Integer, ConsumeQueue> maps : this.consumeQueueTable.values()) {\n", "                for (ConsumeQueue logic : maps.values()) {\n", "                    if (logic.getMaxPhysicOffset() > maxPhysicalPosInLogicQueue) {\n", "                        maxPhysicalPosInLogicQueue = logic.getMaxPhysicOffset();\n", "                    }\n", "                }\n", "            }\n", "            if (maxPhysicalPosInLogicQueue < 0) {\n", "                maxPhysicalPosInLogicQueue = 0;\n", "            }\n", "            if (maxPhysicalPosInLogicQueue < this.commitLog.getMinOffset()) {\n", "                maxPhysicalPosInLogicQueue = this.commitLog.getMinOffset();\n", "                /**\n", "                 * This happens in following conditions:\n", "                 * 1. If someone removes all the consumequeue files or the disk get damaged.\n", "                 * 2. Launch a new broker, and copy the commitlog from other brokers.\n", "                 *\n", "                 * All the conditions has the same in common that the maxPhysicalPosInLogicQueue should be 0.\n", "                 * If the maxPhysicalPosInLogicQueue is gt 0, there maybe something wrong.\n", "                 */\n", "                log.warn(\"[TooSmallCqOffset] maxPhysicalPosInLogicQueue={} clMinOffset={}\", maxPhysicalPosInLogicQueue, this.commitLog.getMinOffset());\n", "            }\n", "            log.info(\"[SetReputOffset] maxPhysicalPosInLogicQueue={} clMinOffset={} clMaxOffset={} clConfirmedOffset={}\",\n", "                maxPhysicalPosInLogicQueue, this.commitLog.getMinOffset(), this.commitLog.getMaxOffset(), this.commitLog.getConfirmOffset());\n", "            this.reputMessageService.setReputFromOffset(maxPhysicalPosInLogicQueue);\n", "            this.reputMessageService.start();\n", "\n", "            /**\n", "             *  1. Finish dispatching the messages fall behind, then to start other services.\n", "             *  2. DLedger committedPos may be missing, so here just require dispatchBehindBytes <= 0\n", "             */\n", "            while (true) {\n", "                if (dispatchBehindBytes() <= 0) {\n", "                    break;\n", "                }\n", "                Thread.sleep(1000);\n", "                log.info(\"Try to finish doing reput the messages fall behind during the starting, reputOffset={} maxOffset={} behind={}\", this.reputMessageService.getReputFromOffset(), this.getMaxPhyOffset(), this.dispatchBehindBytes());\n", "            }\n", "            this.recoverTopicQueueTable();\n", "        }\n", "\n", "        if (!messageStoreConfig.isEnableDLegerCommitLog()) {\n", "            this.haService.start();\n", "            this.handleScheduleMessageService(messageStoreConfig.getBrokerRole());\n", "        }\n", "\n", "        this.flushConsumeQueueService.start();\n", "        this.commitLog.start();\n", "        this.storeStatsService.start();\n", "\n", "        this.createTempFile();\n", "        this.addScheduleTask();\n", "        this.shutdown = false;\n", "    }\n", "\n", "    public void shutdown() {\n", "        if (!this.shutdown) {\n", "            this.shutdown = true;\n", "\n", "            this.scheduledExecutorService.shutdown();\n", "            this.diskCheckScheduledExecutorService.shutdown();\n", "            try {\n", "\n", "                Thread.sleep(1000);\n", "            } catch (InterruptedException e) {\n", "                log.error(\"shutdown Exception, \", e);\n", "            }\n", "\n", "            if (this.scheduleMessageService != null) {\n", "                this.scheduleMessageService.shutdown();\n", "            }\n", "            if (this.haService != null) {\n", "                this.haService.shutdown();\n", "            }\n", "\n", "            this.storeStatsService.shutdown();\n", "            this.indexService.shutdown();\n", "            this.commitLog.shutdown();\n", "            this.reputMessageService.shutdown();\n", "            this.flushConsumeQueueService.shutdown();\n", "            this.allocateMappedFileService.shutdown();\n", "            this.storeCheckpoint.flush();\n", "            this.storeCheckpoint.shutdown();\n", "\n", "            if (this.runningFlags.isWriteable() && dispatchBehindBytes() == 0) {\n", "                this.deleteFile(StorePathConfigHelper.getAbortFile(this.messageStoreConfig.getStorePathRootDir()));\n", "                shutDownNormal = true;\n", "            } else {\n", "                log.warn(\"the store may be wrong, so shutdown abnormally, and keep abort file.\");\n", "            }\n", "        }\n", "\n", "        this.transientStorePool.destroy();\n", "\n", "        if (lockFile != null && lock != null) {\n", "            try {\n", "                lock.release();\n", "                lockFile.close();\n", "            } catch (IOException e) {\n", "            }\n", "        }\n", "    }\n", "\n", "    public void destroy() {\n", "        this.destroyLogics();\n", "        this.commitLog.destroy();\n", "        this.indexService.destroy();\n", "        this.deleteFile(StorePathConfigHelper.getAbortFile(this.messageStoreConfig.getStorePathRootDir()));\n", "        this.deleteFile(StorePathConfigHelper.getStoreCheckpoint(this.messageStoreConfig.getStorePathRootDir()));\n", "    }\n", "\n", "    public void destroyLogics() {\n", "        for (ConcurrentMap<Integer, ConsumeQueue> maps : this.consumeQueueTable.values()) {\n", "            for (ConsumeQueue logic : maps.values()) {\n", "                logic.destroy();\n", "            }\n", "        }\n", "    }\n", "\n", "    private PutMessageStatus checkMessage(MessageExtBrokerInner msg) {\n", "        if (msg.getTopic().length() > Byte.MAX_VALUE) {\n", "            log.warn(\"putMessage message topic length too long \" + msg.getTopic().length());\n", "            return PutMessageStatus.MESSAGE_ILLEGAL;\n", "        }\n", "\n", "        if (msg.getPropertiesString() != null && msg.getPropertiesString().length() > Short.MAX_VALUE) {\n", "            log.warn(\"putMessage message properties length too long \" + msg.getPropertiesString().length());\n", "            return PutMessageStatus.MESSAGE_ILLEGAL;\n", "        }\n", "        return PutMessageStatus.PUT_OK;\n", "    }\n", "\n", "    private PutMessageStatus checkMessages(MessageExtBatch messageExtBatch) {\n", "        if (messageExtBatch.getTopic().length() > Byte.MAX_VALUE) {\n", "            log.warn(\"putMessage message topic length too long \" + messageExtBatch.getTopic().length());\n", "            return PutMessageStatus.MESSAGE_ILLEGAL;\n", "        }\n", "\n", "        if (messageExtBatch.getBody().length > messageStoreConfig.getMaxMessageSize()) {\n", "            log.warn(\"PutMessages body length too long \" + messageExtBatch.getBody().length);\n", "            return PutMessageStatus.MESSAGE_ILLEGAL;\n", "        }\n", "\n", "        return PutMessageStatus.PUT_OK;\n", "    }\n", "\n", "    private PutMessageStatus checkStoreStatus() {\n", "        if (this.shutdown) {\n", "            log.warn(\"message store has shutdown, so putMessage is forbidden\");\n", "            return PutMessageStatus.SERVICE_NOT_AVAILABLE;\n", "        }\n", "\n", "        if (BrokerRole.SLAVE == this.messageStoreConfig.getBrokerRole()) {\n", "            long value = this.printTimes.getAndIncrement();\n", "            if ((value % 50000) == 0) {\n", "                log.warn(\"broke role is slave, so putMessage is forbidden\");\n", "            }\n", "            return PutMessageStatus.SERVICE_NOT_AVAILABLE;\n", "        }\n", "\n", "        if (!this.runningFlags.isWriteable()) {\n", "            long value = this.printTimes.getAndIncrement();\n", "            if ((value % 50000) == 0) {\n", "                log.warn(\"the message store is not writable. It may be caused by one of the following reasons: \" +\n", "                    \"the broker's disk is full, write to logic queue error, write to index file error, etc\");\n", "            }\n", "            return PutMessageStatus.SERVICE_NOT_AVAILABLE;\n", "        } else {\n", "            this.printTimes.set(0);\n", "        }\n", "\n", "        if (this.isOSPageCacheBusy()) {\n", "            return PutMessageStatus.OS_PAGECACHE_BUSY;\n", "        }\n", "        return PutMessageStatus.PUT_OK;\n", "    }\n", "\n", "    @Override\n", "    public CompletableFuture<PutMessageResult> asyncPutMessage(MessageExtBrokerInner msg) {\n", "        PutMessageStatus checkStoreStatus = this.checkStoreStatus();\n", "        if (checkStoreStatus != PutMessageStatus.PUT_OK) {\n", "            return CompletableFuture.completedFuture(new PutMessageResult(checkStoreStatus, null));\n", "        }\n", "\n", "        PutMessageStatus msgCheckStatus = this.checkMessage(msg);\n", "        if (msgCheckStatus == PutMessageStatus.MESSAGE_ILLEGAL) {\n", "            return CompletableFuture.completedFuture(new PutMessageResult(msgCheckStatus, null));\n", "        }\n", "\n", "        long beginTime = this.getSystemClock().now();\n", "        CompletableFuture<PutMessageResult> putResultFuture = this.commitLog.asyncPutMessage(msg);\n", "\n", "        putResultFuture.thenAccept((result) -> {\n", "            long elapsedTime = this.getSystemClock().now() - beginTime;\n", "            if (elapsedTime > 500) {\n", "                log.warn(\"putMessage not in lock elapsed time(ms)={}, bodyLength={}\", elapsedTime, msg.getBody().length);\n", "            }\n", "            this.storeStatsService.setPutMessageEntireTimeMax(elapsedTime);\n", "\n", "            if (null == result || !result.isOk()) {\n", "                this.storeStatsService.getPutMessageFailedTimes().incrementAndGet();\n", "            }\n", "        });\n", "\n", "        return putResultFuture;\n", "    }\n", "\n", "    public CompletableFuture<PutMessageResult> asyncPutMessages(MessageExtBatch messageExtBatch) {\n", "        PutMessageStatus checkStoreStatus = this.checkStoreStatus();\n", "        if (checkStoreStatus != PutMessageStatus.PUT_OK) {\n", "            return CompletableFuture.completedFuture(new PutMessageResult(checkStoreStatus, null));\n", "        }\n", "\n", "        PutMessageStatus msgCheckStatus = this.checkMessages(messageExtBatch);\n", "        if (msgCheckStatus == PutMessageStatus.MESSAGE_ILLEGAL) {\n", "            return CompletableFuture.completedFuture(new PutMessageResult(msgCheckStatus, null));\n", "        }\n", "\n", "        long beginTime = this.getSystemClock().now();\n", "        CompletableFuture<PutMessageResult> resultFuture = this.commitLog.asyncPutMessages(messageExtBatch);\n", "\n", "        resultFuture.thenAccept((result) -> {\n", "            long elapsedTime = this.getSystemClock().now() - beginTime;\n", "            if (elapsedTime > 500) {\n", "                log.warn(\"not in lock elapsed time(ms)={}, bodyLength={}\", elapsedTime, messageExtBatch.getBody().length);\n", "            }\n", "\n", "            this.storeStatsService.setPutMessageEntireTimeMax(elapsedTime);\n", "\n", "            if (null == result || !result.isOk()) {\n", "                this.storeStatsService.getPutMessageFailedTimes().incrementAndGet();\n", "            }\n", "        });\n", "\n", "        return resultFuture;\n", "    }\n", "\n", "    @Override\n", "    public PutMessageResult putMessage(MessageExtBrokerInner msg) {\n", "        PutMessageStatus checkStoreStatus = this.checkStoreStatus();\n", "        if (checkStoreStatus != PutMessageStatus.PUT_OK) {\n", "            return new PutMessageResult(checkStoreStatus, null);\n", "        }\n", "\n", "        PutMessageStatus msgCheckStatus = this.checkMessage(msg);\n", "        if (msgCheckStatus == PutMessageStatus.MESSAGE_ILLEGAL) {\n", "            return new PutMessageResult(msgCheckStatus, null);\n", "        }\n", "\n", "        long beginTime = this.getSystemClock().now();\n", "        //\u6d88\u606f\u5199\u5165commitLog\n", "        PutMessageResult result = this.commitLog.putMessage(msg);\n", "        long elapsedTime = this.getSystemClock().now() - beginTime;\n", "        if (elapsedTime > 500) {\n", "            log.warn(\"not in lock elapsed time(ms)={}, bodyLength={}\", elapsedTime, msg.getBody().length);\n", "        }\n", "\n", "        this.storeStatsService.setPutMessageEntireTimeMax(elapsedTime);\n", "\n", "        if (null == result || !result.isOk()) {\n", "            this.storeStatsService.getPutMessageFailedTimes().incrementAndGet();\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    @Override\n", "    public PutMessageResult putMessages(MessageExtBatch messageExtBatch) {\n", "        PutMessageStatus checkStoreStatus = this.checkStoreStatus();\n", "        if (checkStoreStatus != PutMessageStatus.PUT_OK) {\n", "            return new PutMessageResult(checkStoreStatus, null);\n", "        }\n", "\n", "        PutMessageStatus msgCheckStatus = this.checkMessages(messageExtBatch);\n", "        if (msgCheckStatus == PutMessageStatus.MESSAGE_ILLEGAL) {\n", "            return new PutMessageResult(msgCheckStatus, null);\n", "        }\n", "\n", "        long beginTime = this.getSystemClock().now();\n", "        PutMessageResult result = this.commitLog.putMessages(messageExtBatch);\n", "        long elapsedTime = this.getSystemClock().now() - beginTime;\n", "        if (elapsedTime > 500) {\n", "            log.warn(\"not in lock elapsed time(ms)={}, bodyLength={}\", elapsedTime, messageExtBatch.getBody().length);\n", "        }\n", "\n", "        this.storeStatsService.setPutMessageEntireTimeMax(elapsedTime);\n", "\n", "        if (null == result || !result.isOk()) {\n", "            this.storeStatsService.getPutMessageFailedTimes().incrementAndGet();\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    @Override\n", "    public boolean isOSPageCacheBusy() {\n", "        long begin = this.getCommitLog().getBeginTimeInLock();\n", "        long diff = this.systemClock.now() - begin;\n", "\n", "        return diff < 10000000\n", "            && diff > this.messageStoreConfig.getOsPageCacheBusyTimeOutMills();\n", "    }\n", "\n", "    @Override\n", "    public long lockTimeMills() {\n", "        return this.commitLog.lockTimeMills();\n", "    }\n", "\n", "    public SystemClock getSystemClock() {\n", "        return systemClock;\n", "    }\n", "\n", "    public CommitLog getCommitLog() {\n", "        return commitLog;\n", "    }\n", "\n", "    public GetMessageResult getMessage(final String group, final String topic, final int queueId, final long offset,\n", "        final int maxMsgNums,\n", "        final MessageFilter messageFilter) {\n", "        if (this.shutdown) {\n", "            log.warn(\"message store has shutdown, so getMessage is forbidden\");\n", "            return null;\n", "        }\n", "\n", "        if (!this.runningFlags.isReadable()) {\n", "            log.warn(\"message store is not readable, so getMessage is forbidden \" + this.runningFlags.getFlagBits());\n", "            return null;\n", "        }\n", "\n", "        long beginTime = this.getSystemClock().now();\n", "\n", "        GetMessageStatus status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;\n", "        long nextBeginOffset = offset;\n", "        long minOffset = 0;\n", "        long maxOffset = 0;\n", "\n", "        GetMessageResult getResult = new GetMessageResult();\n", "\n", "        final long maxOffsetPy = this.commitLog.getMaxOffset();\n", "\n", "        ConsumeQueue consumeQueue = findConsumeQueue(topic, queueId);\n", "        if (consumeQueue != null) {\n", "            minOffset = consumeQueue.getMinOffsetInQueue();\n", "            maxOffset = consumeQueue.getMaxOffsetInQueue();\n", "\n", "            if (maxOffset == 0) {\n", "                status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;\n", "                nextBeginOffset = nextOffsetCorrection(offset, 0);\n", "            } else if (offset < minOffset) {\n", "                status = GetMessageStatus.OFFSET_TOO_SMALL;\n", "                nextBeginOffset = nextOffsetCorrection(offset, minOffset);\n", "            } else if (offset == maxOffset) {\n", "                status = GetMessageStatus.OFFSET_OVERFLOW_ONE;\n", "                nextBeginOffset = nextOffsetCorrection(offset, offset);\n", "            } else if (offset > maxOffset) {\n", "                status = GetMessageStatus.OFFSET_OVERFLOW_BADLY;\n", "                if (0 == minOffset) {\n", "                    nextBeginOffset = nextOffsetCorrection(offset, minOffset);\n", "                } else {\n", "                    nextBeginOffset = nextOffsetCorrection(offset, maxOffset);\n", "                }\n", "            } else {\n", "                SelectMappedBufferResult bufferConsumeQueue = consumeQueue.getIndexBuffer(offset);\n", "                if (bufferConsumeQueue != null) {\n", "                    try {\n", "                        status = GetMessageStatus.NO_MATCHED_MESSAGE;\n", "\n", "                        long nextPhyFileStartOffset = Long.MIN_VALUE;\n", "                        long maxPhyOffsetPulling = 0;\n", "\n", "                        int i = 0;\n", "                        final int maxFilterMessageCount = Math.max(16000, maxMsgNums * ConsumeQueue.CQ_STORE_UNIT_SIZE);\n", "                        final boolean diskFallRecorded = this.messageStoreConfig.isDiskFallRecorded();\n", "                        ConsumeQueueExt.CqExtUnit cqExtUnit = new ConsumeQueueExt.CqExtUnit();\n", "                        for (; i < bufferConsumeQueue.getSize() && i < maxFilterMessageCount; i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {\n", "                            long offsetPy = bufferConsumeQueue.getByteBuffer().getLong();\n", "                            int sizePy = bufferConsumeQueue.getByteBuffer().getInt();\n", "                            long tagsCode = bufferConsumeQueue.getByteBuffer().getLong();\n", "\n", "                            maxPhyOffsetPulling = offsetPy;\n", "\n", "                            if (nextPhyFileStartOffset != Long.MIN_VALUE) {\n", "                                if (offsetPy < nextPhyFileStartOffset)\n", "                                    continue;\n", "                            }\n", "\n", "                            boolean isInDisk = checkInDiskByCommitOffset(offsetPy, maxOffsetPy);\n", "\n", "                            if (this.isTheBatchFull(sizePy, maxMsgNums, getResult.getBufferTotalSize(), getResult.getMessageCount(),\n", "                                isInDisk)) {\n", "                                break;\n", "                            }\n", "\n", "                            boolean extRet = false, isTagsCodeLegal = true;\n", "                            if (consumeQueue.isExtAddr(tagsCode)) {\n", "                                extRet = consumeQueue.getExt(tagsCode, cqExtUnit);\n", "                                if (extRet) {\n", "                                    tagsCode = cqExtUnit.getTagsCode();\n", "                                } else {\n", "                                    // can't find ext content.Client will filter messages by tag also.\n", "                                    log.error(\"[BUG] can't find consume queue extend file content!addr={}, offsetPy={}, sizePy={}, topic={}, group={}\",\n", "                                        tagsCode, offsetPy, sizePy, topic, group);\n", "                                    isTagsCodeLegal = false;\n", "                                }\n", "                            }\n", "\n", "                            if (messageFilter != null\n", "                                && !messageFilter.isMatchedByConsumeQueue(isTagsCodeLegal ? tagsCode : null, extRet ? cqExtUnit : null)) {\n", "                                if (getResult.getBufferTotalSize() == 0) {\n", "                                    status = GetMessageStatus.NO_MATCHED_MESSAGE;\n", "                                }\n", "\n", "                                continue;\n", "                            }\n", "\n", "                            SelectMappedBufferResult selectResult = this.commitLog.getMessage(offsetPy, sizePy);\n", "                            if (null == selectResult) {\n", "                                if (getResult.getBufferTotalSize() == 0) {\n", "                                    status = GetMessageStatus.MESSAGE_WAS_REMOVING;\n", "                                }\n", "\n", "                                nextPhyFileStartOffset = this.commitLog.rollNextFile(offsetPy);\n", "                                continue;\n", "                            }\n", "\n", "                            if (messageFilter != null\n", "                                && !messageFilter.isMatchedByCommitLog(selectResult.getByteBuffer().slice(), null)) {\n", "                                if (getResult.getBufferTotalSize() == 0) {\n", "                                    status = GetMessageStatus.NO_MATCHED_MESSAGE;\n", "                                }\n", "                                // release...\n", "                                selectResult.release();\n", "                                continue;\n", "                            }\n", "\n", "                            this.storeStatsService.getGetMessageTransferedMsgCount().incrementAndGet();\n", "                            getResult.addMessage(selectResult);\n", "                            status = GetMessageStatus.FOUND;\n", "                            nextPhyFileStartOffset = Long.MIN_VALUE;\n", "                        }\n", "\n", "                        if (diskFallRecorded) {\n", "                            long fallBehind = maxOffsetPy - maxPhyOffsetPulling;\n", "                            brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);\n", "                        }\n", "\n", "                        nextBeginOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);\n", "\n", "                        long diff = maxOffsetPy - maxPhyOffsetPulling;\n", "                        long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE\n", "                            * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));\n", "                        getResult.setSuggestPullingFromSlave(diff > memory);\n", "                    } finally {\n", "\n", "                        bufferConsumeQueue.release();\n", "                    }\n", "                } else {\n", "                    status = GetMessageStatus.OFFSET_FOUND_NULL;\n", "                    nextBeginOffset = nextOffsetCorrection(offset, consumeQueue.rollNextFile(offset));\n", "                    log.warn(\"consumer request topic: \" + topic + \"offset: \" + offset + \" minOffset: \" + minOffset + \" maxOffset: \"\n", "                        + maxOffset + \", but access logic queue failed.\");\n", "                }\n", "            }\n", "        } else {\n", "            status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;\n", "            nextBeginOffset = nextOffsetCorrection(offset, 0);\n", "        }\n", "\n", "        if (GetMessageStatus.FOUND == status) {\n", "            this.storeStatsService.getGetMessageTimesTotalFound().incrementAndGet();\n", "        } else {\n", "            this.storeStatsService.getGetMessageTimesTotalMiss().incrementAndGet();\n", "        }\n", "        long elapsedTime = this.getSystemClock().now() - beginTime;\n", "        this.storeStatsService.setGetMessageEntireTimeMax(elapsedTime);\n", "\n", "        getResult.setStatus(status);\n", "        getResult.setNextBeginOffset(nextBeginOffset);\n", "        getResult.setMaxOffset(maxOffset);\n", "        getResult.setMinOffset(minOffset);\n", "        return getResult;\n", "    }\n", "\n", "    public long getMaxOffsetInQueue(String topic, int queueId) {\n", "        ConsumeQueue logic = this.findConsumeQueue(topic, queueId);\n", "        if (logic != null) {\n", "            long offset = logic.getMaxOffsetInQueue();\n", "            return offset;\n", "        }\n", "\n", "        return 0;\n", "    }\n", "\n", "    public long getMinOffsetInQueue(String topic, int queueId) {\n", "        ConsumeQueue logic = this.findConsumeQueue(topic, queueId);\n", "        if (logic != null) {\n", "            return logic.getMinOffsetInQueue();\n", "        }\n", "\n", "        return -1;\n", "    }\n", "\n", "    @Override\n", "    public long getCommitLogOffsetInQueue(String topic, int queueId, long consumeQueueOffset) {\n", "        ConsumeQueue consumeQueue = findConsumeQueue(topic, queueId);\n", "        if (consumeQueue != null) {\n", "            SelectMappedBufferResult bufferConsumeQueue = consumeQueue.getIndexBuffer(consumeQueueOffset);\n", "            if (bufferConsumeQueue != null) {\n", "                try {\n", "                    long offsetPy = bufferConsumeQueue.getByteBuffer().getLong();\n", "                    return offsetPy;\n", "                } finally {\n", "                    bufferConsumeQueue.release();\n", "                }\n", "            }\n", "        }\n", "\n", "        return 0;\n", "    }\n", "\n", "    public long getOffsetInQueueByTime(String topic, int queueId, long timestamp) {\n", "        ConsumeQueue logic = this.findConsumeQueue(topic, queueId);\n", "        if (logic != null) {\n", "            return logic.getOffsetInQueueByTime(timestamp);\n", "        }\n", "\n", "        return 0;\n", "    }\n", "\n", "    public MessageExt lookMessageByOffset(long commitLogOffset) {\n", "        SelectMappedBufferResult sbr = this.commitLog.getMessage(commitLogOffset, 4);\n", "        if (null != sbr) {\n", "            try {\n", "                // 1 TOTALSIZE\n", "                int size = sbr.getByteBuffer().getInt();\n", "                return lookMessageByOffset(commitLogOffset, size);\n", "            } finally {\n", "                sbr.release();\n", "            }\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    @Override\n", "    public SelectMappedBufferResult selectOneMessageByOffset(long commitLogOffset) {\n", "        SelectMappedBufferResult sbr = this.commitLog.getMessage(commitLogOffset, 4);\n", "        if (null != sbr) {\n", "            try {\n", "                // 1 TOTALSIZE\n", "                int size = sbr.getByteBuffer().getInt();\n", "                return this.commitLog.getMessage(commitLogOffset, size);\n", "            } finally {\n", "                sbr.release();\n", "            }\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    @Override\n", "    public SelectMappedBufferResult selectOneMessageByOffset(long commitLogOffset, int msgSize) {\n", "        return this.commitLog.getMessage(commitLogOffset, msgSize);\n", "    }\n", "\n", "    public String getRunningDataInfo() {\n", "        return this.storeStatsService.toString();\n", "    }\n", "\n", "    private String getStorePathPhysic() {\n", "        String storePathPhysic = \"\";\n", "        if (DefaultMessageStore.this.getMessageStoreConfig().isEnableDLegerCommitLog()) {\n", "            storePathPhysic = ((DLedgerCommitLog)DefaultMessageStore.this.getCommitLog()).getdLedgerServer().getdLedgerConfig().getDataStorePath();\n", "        } else {\n", "            storePathPhysic = DefaultMessageStore.this.getMessageStoreConfig().getStorePathCommitLog();\n", "        }\n", "        return storePathPhysic;\n", "    }\n", "\n", "    @Override\n", "    public HashMap<String, String> getRuntimeInfo() {\n", "        HashMap<String, String> result = this.storeStatsService.getRuntimeInfo();\n", "\n", "        {\n", "            double physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(getStorePathPhysic());\n", "            result.put(RunningStats.commitLogDiskRatio.name(), String.valueOf(physicRatio));\n", "\n", "        }\n", "\n", "        {\n", "\n", "            String storePathLogics = StorePathConfigHelper.getStorePathConsumeQueue(this.messageStoreConfig.getStorePathRootDir());\n", "            double logicsRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathLogics);\n", "            result.put(RunningStats.consumeQueueDiskRatio.name(), String.valueOf(logicsRatio));\n", "        }\n", "\n", "        {\n", "            if (this.scheduleMessageService != null) {\n", "                this.scheduleMessageService.buildRunningStats(result);\n", "            }\n", "        }\n", "\n", "        result.put(RunningStats.commitLogMinOffset.name(), String.valueOf(DefaultMessageStore.this.getMinPhyOffset()));\n", "        result.put(RunningStats.commitLogMaxOffset.name(), String.valueOf(DefaultMessageStore.this.getMaxPhyOffset()));\n", "\n", "        return result;\n", "    }\n", "\n", "    @Override\n", "    public long getMaxPhyOffset() {\n", "        return this.commitLog.getMaxOffset();\n", "    }\n", "\n", "    @Override\n", "    public long getMinPhyOffset() {\n", "        return this.commitLog.getMinOffset();\n", "    }\n", "\n", "    @Override\n", "    public long getEarliestMessageTime(String topic, int queueId) {\n", "        ConsumeQueue logicQueue = this.findConsumeQueue(topic, queueId);\n", "        if (logicQueue != null) {\n", "            long minLogicOffset = logicQueue.getMinLogicOffset();\n", "\n", "            SelectMappedBufferResult result = logicQueue.getIndexBuffer(minLogicOffset / ConsumeQueue.CQ_STORE_UNIT_SIZE);\n", "            return getStoreTime(result);\n", "        }\n", "\n", "        return -1;\n", "    }\n", "\n", "    private long getStoreTime(SelectMappedBufferResult result) {\n", "        if (result != null) {\n", "            try {\n", "                final long phyOffset = result.getByteBuffer().getLong();\n", "                final int size = result.getByteBuffer().getInt();\n", "                long storeTime = this.getCommitLog().pickupStoreTimestamp(phyOffset, size);\n", "                return storeTime;\n", "            } catch (Exception e) {\n", "            } finally {\n", "                result.release();\n", "            }\n", "        }\n", "        return -1;\n", "    }\n", "\n", "    @Override\n", "    public long getEarliestMessageTime() {\n", "        final long minPhyOffset = this.getMinPhyOffset();\n", "        final int size = this.messageStoreConfig.getMaxMessageSize() * 2;\n", "        return this.getCommitLog().pickupStoreTimestamp(minPhyOffset, size);\n", "    }\n", "\n", "    @Override\n", "    public long getMessageStoreTimeStamp(String topic, int queueId, long consumeQueueOffset) {\n", "        ConsumeQueue logicQueue = this.findConsumeQueue(topic, queueId);\n", "        if (logicQueue != null) {\n", "            SelectMappedBufferResult result = logicQueue.getIndexBuffer(consumeQueueOffset);\n", "            return getStoreTime(result);\n", "        }\n", "\n", "        return -1;\n", "    }\n", "\n", "    @Override\n", "    public long getMessageTotalInQueue(String topic, int queueId) {\n", "        ConsumeQueue logicQueue = this.findConsumeQueue(topic, queueId);\n", "        if (logicQueue != null) {\n", "            return logicQueue.getMessageTotalInQueue();\n", "        }\n", "\n", "        return -1;\n", "    }\n", "\n", "    @Override\n", "    public SelectMappedBufferResult getCommitLogData(final long offset) {\n", "        if (this.shutdown) {\n", "            log.warn(\"message store has shutdown, so getPhyQueueData is forbidden\");\n", "            return null;\n", "        }\n", "\n", "        return this.commitLog.getData(offset);\n", "    }\n", "\n", "    @Override\n", "    public boolean appendToCommitLog(long startOffset, byte[] data) {\n", "        if (this.shutdown) {\n", "            log.warn(\"message store has shutdown, so appendToPhyQueue is forbidden\");\n", "            return false;\n", "        }\n", "\n", "        boolean result = this.commitLog.appendData(startOffset, data);\n", "        if (result) {\n", "            this.reputMessageService.wakeup();\n", "        } else {\n", "            log.error(\"appendToPhyQueue failed \" + startOffset + \" \" + data.length);\n", "        }\n", "\n", "        return result;\n", "    }\n", "\n", "    @Override\n", "    public void executeDeleteFilesManually() {\n", "        this.cleanCommitLogService.excuteDeleteFilesManualy();\n", "    }\n", "\n", "    @Override\n", "    public QueryMessageResult queryMessage(String topic, String key, int maxNum, long begin, long end) {\n", "        QueryMessageResult queryMessageResult = new QueryMessageResult();\n", "\n", "        long lastQueryMsgTime = end;\n", "\n", "        for (int i = 0; i < 3; i++) {\n", "            QueryOffsetResult queryOffsetResult = this.indexService.queryOffset(topic, key, maxNum, begin, lastQueryMsgTime);\n", "            if (queryOffsetResult.getPhyOffsets().isEmpty()) {\n", "                break;\n", "            }\n", "\n", "            Collections.sort(queryOffsetResult.getPhyOffsets());\n", "\n", "            queryMessageResult.setIndexLastUpdatePhyoffset(queryOffsetResult.getIndexLastUpdatePhyoffset());\n", "            queryMessageResult.setIndexLastUpdateTimestamp(queryOffsetResult.getIndexLastUpdateTimestamp());\n", "\n", "            for (int m = 0; m < queryOffsetResult.getPhyOffsets().size(); m++) {\n", "                long offset = queryOffsetResult.getPhyOffsets().get(m);\n", "\n", "                try {\n", "\n", "                    boolean match = true;\n", "                    MessageExt msg = this.lookMessageByOffset(offset);\n", "                    if (0 == m) {\n", "                        lastQueryMsgTime = msg.getStoreTimestamp();\n", "                    }\n", "\n", "//                    String[] keyArray = msg.getKeys().split(MessageConst.KEY_SEPARATOR);\n", "//                    if (topic.equals(msg.getTopic())) {\n", "//                        for (String k : keyArray) {\n", "//                            if (k.equals(key)) {\n", "//                                match = true;\n", "//                                break;\n", "//                            }\n", "//                        }\n", "//                    }\n", "\n", "                    if (match) {\n", "                        SelectMappedBufferResult result = this.commitLog.getData(offset, false);\n", "                        if (result != null) {\n", "                            int size = result.getByteBuffer().getInt(0);\n", "                            result.getByteBuffer().limit(size);\n", "                            result.setSize(size);\n", "                            queryMessageResult.addMessage(result);\n", "                        }\n", "                    } else {\n", "                        log.warn(\"queryMessage hash duplicate, {} {}\", topic, key);\n", "                    }\n", "                } catch (Exception e) {\n", "                    log.error(\"queryMessage exception\", e);\n", "                }\n", "            }\n", "\n", "            if (queryMessageResult.getBufferTotalSize() > 0) {\n", "                break;\n", "            }\n", "\n", "            if (lastQueryMsgTime < begin) {\n", "                break;\n", "            }\n", "        }\n", "\n", "        return queryMessageResult;\n", "    }\n", "\n", "    @Override\n", "    public void updateHaMasterAddress(String newAddr) {\n", "        this.haService.updateMasterAddress(newAddr);\n", "    }\n", "\n", "    @Override\n", "    public long slaveFallBehindMuch() {\n", "        return this.commitLog.getMaxOffset() - this.haService.getPush2SlaveMaxOffset().get();\n", "    }\n", "\n", "    @Override\n", "    public long now() {\n", "        return this.systemClock.now();\n", "    }\n", "\n", "    @Override\n", "    public int cleanUnusedTopic(Set<String> topics) {\n", "        Iterator<Entry<String, ConcurrentMap<Integer, ConsumeQueue>>> it = this.consumeQueueTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, ConcurrentMap<Integer, ConsumeQueue>> next = it.next();\n", "            String topic = next.getKey();\n", "\n", "            if (!topics.contains(topic) && !topic.equals(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC)) {\n", "                ConcurrentMap<Integer, ConsumeQueue> queueTable = next.getValue();\n", "                for (ConsumeQueue cq : queueTable.values()) {\n", "                    cq.destroy();\n", "                    log.info(\"cleanUnusedTopic: {} {} ConsumeQueue cleaned\",\n", "                        cq.getTopic(),\n", "                        cq.getQueueId()\n", "                    );\n", "\n", "                    this.commitLog.removeQueueFromTopicQueueTable(cq.getTopic(), cq.getQueueId());\n", "                }\n", "                it.remove();\n", "\n", "                if (this.brokerConfig.isAutoDeleteUnusedStats()) {\n", "                    this.brokerStatsManager.onTopicDeleted(topic);\n", "                }\n", "\n", "                log.info(\"cleanUnusedTopic: {},topic destroyed\", topic);\n", "            }\n", "        }\n", "\n", "        return 0;\n", "    }\n", "\n", "    public void cleanExpiredConsumerQueue() {\n", "        long minCommitLogOffset = this.commitLog.getMinOffset();\n", "\n", "        Iterator<Entry<String, ConcurrentMap<Integer, ConsumeQueue>>> it = this.consumeQueueTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, ConcurrentMap<Integer, ConsumeQueue>> next = it.next();\n", "            String topic = next.getKey();\n", "            if (!topic.equals(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC)) {\n", "                ConcurrentMap<Integer, ConsumeQueue> queueTable = next.getValue();\n", "                Iterator<Entry<Integer, ConsumeQueue>> itQT = queueTable.entrySet().iterator();\n", "                while (itQT.hasNext()) {\n", "                    Entry<Integer, ConsumeQueue> nextQT = itQT.next();\n", "                    long maxCLOffsetInConsumeQueue = nextQT.getValue().getLastOffset();\n", "\n", "                    if (maxCLOffsetInConsumeQueue == -1) {\n", "                        log.warn(\"maybe ConsumeQueue was created just now. topic={} queueId={} maxPhysicOffset={} minLogicOffset={}.\",\n", "                            nextQT.getValue().getTopic(),\n", "                            nextQT.getValue().getQueueId(),\n", "                            nextQT.getValue().getMaxPhysicOffset(),\n", "                            nextQT.getValue().getMinLogicOffset());\n", "                    } else if (maxCLOffsetInConsumeQueue < minCommitLogOffset) {\n", "                        log.info(\n", "                            \"cleanExpiredConsumerQueue: {} {} consumer queue destroyed, minCommitLogOffset: {} maxCLOffsetInConsumeQueue: {}\",\n", "                            topic,\n", "                            nextQT.getKey(),\n", "                            minCommitLogOffset,\n", "                            maxCLOffsetInConsumeQueue);\n", "\n", "                        DefaultMessageStore.this.commitLog.removeQueueFromTopicQueueTable(nextQT.getValue().getTopic(),\n", "                            nextQT.getValue().getQueueId());\n", "\n", "                        nextQT.getValue().destroy();\n", "                        itQT.remove();\n", "                    }\n", "                }\n", "\n", "                if (queueTable.isEmpty()) {\n", "                    log.info(\"cleanExpiredConsumerQueue: {},topic destroyed\", topic);\n", "                    it.remove();\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    public Map<String, Long> getMessageIds(final String topic, final int queueId, long minOffset, long maxOffset,\n", "        SocketAddress storeHost) {\n", "        Map<String, Long> messageIds = new HashMap<String, Long>();\n", "        if (this.shutdown) {\n", "            return messageIds;\n", "        }\n", "\n", "        ConsumeQueue consumeQueue = findConsumeQueue(topic, queueId);\n", "        if (consumeQueue != null) {\n", "            minOffset = Math.max(minOffset, consumeQueue.getMinOffsetInQueue());\n", "            maxOffset = Math.min(maxOffset, consumeQueue.getMaxOffsetInQueue());\n", "\n", "            if (maxOffset == 0) {\n", "                return messageIds;\n", "            }\n", "\n", "            long nextOffset = minOffset;\n", "            while (nextOffset < maxOffset) {\n", "                SelectMappedBufferResult bufferConsumeQueue = consumeQueue.getIndexBuffer(nextOffset);\n", "                if (bufferConsumeQueue != null) {\n", "                    try {\n", "                        int i = 0;\n", "                        for (; i < bufferConsumeQueue.getSize(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {\n", "                            long offsetPy = bufferConsumeQueue.getByteBuffer().getLong();\n", "                            InetSocketAddress inetSocketAddress = (InetSocketAddress) storeHost;\n", "                            int msgIdLength = (inetSocketAddress.getAddress() instanceof Inet6Address) ? 16 + 4 + 8 : 4 + 4 + 8;\n", "                            final ByteBuffer msgIdMemory = ByteBuffer.allocate(msgIdLength);\n", "                            String msgId =\n", "                                MessageDecoder.createMessageId(msgIdMemory, MessageExt.socketAddress2ByteBuffer(storeHost), offsetPy);\n", "                            messageIds.put(msgId, nextOffset++);\n", "                            if (nextOffset > maxOffset) {\n", "                                return messageIds;\n", "                            }\n", "                        }\n", "                    } finally {\n", "\n", "                        bufferConsumeQueue.release();\n", "                    }\n", "                } else {\n", "                    return messageIds;\n", "                }\n", "            }\n", "        }\n", "        return messageIds;\n", "    }\n", "\n", "    @Override\n", "    public boolean checkInDiskByConsumeOffset(final String topic, final int queueId, long consumeOffset) {\n", "\n", "        final long maxOffsetPy = this.commitLog.getMaxOffset();\n", "\n", "        ConsumeQueue consumeQueue = findConsumeQueue(topic, queueId);\n", "        if (consumeQueue != null) {\n", "            SelectMappedBufferResult bufferConsumeQueue = consumeQueue.getIndexBuffer(consumeOffset);\n", "            if (bufferConsumeQueue != null) {\n", "                try {\n", "                    for (int i = 0; i < bufferConsumeQueue.getSize(); ) {\n", "                        i += ConsumeQueue.CQ_STORE_UNIT_SIZE;\n", "                        long offsetPy = bufferConsumeQueue.getByteBuffer().getLong();\n", "                        return checkInDiskByCommitOffset(offsetPy, maxOffsetPy);\n", "                    }\n", "                } finally {\n", "\n", "                    bufferConsumeQueue.release();\n", "                }\n", "            } else {\n", "                return false;\n", "            }\n", "        }\n", "        return false;\n", "    }\n", "\n", "    @Override\n", "    public long dispatchBehindBytes() {\n", "        return this.reputMessageService.behind();\n", "    }\n", "\n", "    @Override\n", "    public long flush() {\n", "        return this.commitLog.flush();\n", "    }\n", "\n", "    @Override\n", "    public boolean resetWriteOffset(long phyOffset) {\n", "        return this.commitLog.resetOffset(phyOffset);\n", "    }\n", "\n", "    @Override\n", "    public long getConfirmOffset() {\n", "        return this.commitLog.getConfirmOffset();\n", "    }\n", "\n", "    @Override\n", "    public void setConfirmOffset(long phyOffset) {\n", "        this.commitLog.setConfirmOffset(phyOffset);\n", "    }\n", "\n", "    public MessageExt lookMessageByOffset(long commitLogOffset, int size) {\n", "        SelectMappedBufferResult sbr = this.commitLog.getMessage(commitLogOffset, size);\n", "        if (null != sbr) {\n", "            try {\n", "                return MessageDecoder.decode(sbr.getByteBuffer(), true, false);\n", "            } finally {\n", "                sbr.release();\n", "            }\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    public ConsumeQueue findConsumeQueue(String topic, int queueId) {\n", "        ConcurrentMap<Integer, ConsumeQueue> map = consumeQueueTable.get(topic);\n", "        if (null == map) {\n", "            ConcurrentMap<Integer, ConsumeQueue> newMap = new ConcurrentHashMap<Integer, ConsumeQueue>(128);\n", "            ConcurrentMap<Integer, ConsumeQueue> oldMap = consumeQueueTable.putIfAbsent(topic, newMap);\n", "            if (oldMap != null) {\n", "                map = oldMap;\n", "            } else {\n", "                map = newMap;\n", "            }\n", "        }\n", "\n", "        ConsumeQueue logic = map.get(queueId);\n", "        if (null == logic) {\n", "            ConsumeQueue newLogic = new ConsumeQueue(\n", "                topic,\n", "                queueId,\n", "                StorePathConfigHelper.getStorePathConsumeQueue(this.messageStoreConfig.getStorePathRootDir()),\n", "                this.getMessageStoreConfig().getMappedFileSizeConsumeQueue(),\n", "                this);\n", "            ConsumeQueue oldLogic = map.putIfAbsent(queueId, newLogic);\n", "            if (oldLogic != null) {\n", "                logic = oldLogic;\n", "            } else {\n", "                logic = newLogic;\n", "            }\n", "        }\n", "\n", "        return logic;\n", "    }\n", "\n", "    private long nextOffsetCorrection(long oldOffset, long newOffset) {\n", "        long nextOffset = oldOffset;\n", "        if (this.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE || this.getMessageStoreConfig().isOffsetCheckInSlave()) {\n", "            nextOffset = newOffset;\n", "        }\n", "        return nextOffset;\n", "    }\n", "\n", "    private boolean checkInDiskByCommitOffset(long offsetPy, long maxOffsetPy) {\n", "        long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));\n", "        return (maxOffsetPy - offsetPy) > memory;\n", "    }\n", "\n", "    private boolean isTheBatchFull(int sizePy, int maxMsgNums, int bufferTotal, int messageTotal, boolean isInDisk) {\n", "\n", "        if (0 == bufferTotal || 0 == messageTotal) {\n", "            return false;\n", "        }\n", "\n", "        if (maxMsgNums <= messageTotal) {\n", "            return true;\n", "        }\n", "\n", "        if (isInDisk) {\n", "            if ((bufferTotal + sizePy) > this.messageStoreConfig.getMaxTransferBytesOnMessageInDisk()) {\n", "                return true;\n", "            }\n", "\n", "            if (messageTotal > this.messageStoreConfig.getMaxTransferCountOnMessageInDisk() - 1) {\n", "                return true;\n", "            }\n", "        } else {\n", "            if ((bufferTotal + sizePy) > this.messageStoreConfig.getMaxTransferBytesOnMessageInMemory()) {\n", "                return true;\n", "            }\n", "\n", "            if (messageTotal > this.messageStoreConfig.getMaxTransferCountOnMessageInMemory() - 1) {\n", "                return true;\n", "            }\n", "        }\n", "\n", "        return false;\n", "    }\n", "\n", "    private void deleteFile(final String fileName) {\n", "        File file = new File(fileName);\n", "        boolean result = file.delete();\n", "        log.info(fileName + (result ? \" delete OK\" : \" delete Failed\"));\n", "    }\n", "\n", "    /**\n", "     * @throws IOException\n", "     */\n", "    private void createTempFile() throws IOException {\n", "        String fileName = StorePathConfigHelper.getAbortFile(this.messageStoreConfig.getStorePathRootDir());\n", "        File file = new File(fileName);\n", "        MappedFile.ensureDirOK(file.getParent());\n", "        boolean result = file.createNewFile();\n", "        log.info(fileName + (result ? \" create OK\" : \" already exists\"));\n", "    }\n", "\n", "    private void addScheduleTask() {\n", "\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                DefaultMessageStore.this.cleanFilesPeriodically();\n", "            }\n", "        }, 1000 * 60, this.messageStoreConfig.getCleanResourceInterval(), TimeUnit.MILLISECONDS);\n", "\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                DefaultMessageStore.this.checkSelf();\n", "            }\n", "        }, 1, 10, TimeUnit.MINUTES);\n", "\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                if (DefaultMessageStore.this.getMessageStoreConfig().isDebugLockEnable()) {\n", "                    try {\n", "                        if (DefaultMessageStore.this.commitLog.getBeginTimeInLock() != 0) {\n", "                            long lockTime = System.currentTimeMillis() - DefaultMessageStore.this.commitLog.getBeginTimeInLock();\n", "                            if (lockTime > 1000 && lockTime < 10000000) {\n", "\n", "                                String stack = UtilAll.jstack();\n", "                                final String fileName = System.getProperty(\"user.home\") + File.separator + \"debug/lock/stack-\"\n", "                                    + DefaultMessageStore.this.commitLog.getBeginTimeInLock() + \"-\" + lockTime;\n", "                                MixAll.string2FileNotSafe(stack, fileName);\n", "                            }\n", "                        }\n", "                    } catch (Exception e) {\n", "                    }\n", "                }\n", "            }\n", "        }, 1, 1, TimeUnit.SECONDS);\n", "\n", "        // this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "        // @Override\n", "        // public void run() {\n", "        // DefaultMessageStore.this.cleanExpiredConsumerQueue();\n", "        // }\n", "        // }, 1, 1, TimeUnit.HOURS);\n", "        this.diskCheckScheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            public void run() {\n", "                DefaultMessageStore.this.cleanCommitLogService.isSpaceFull();\n", "            }\n", "        }, 1000L, 10000L, TimeUnit.MILLISECONDS);\n", "    }\n", "\n", "    private void cleanFilesPeriodically() {\n", "        this.cleanCommitLogService.run();\n", "        this.cleanConsumeQueueService.run();\n", "    }\n", "\n", "    private void checkSelf() {\n", "        this.commitLog.checkSelf();\n", "\n", "        Iterator<Entry<String, ConcurrentMap<Integer, ConsumeQueue>>> it = this.consumeQueueTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Entry<String, ConcurrentMap<Integer, ConsumeQueue>> next = it.next();\n", "            Iterator<Entry<Integer, ConsumeQueue>> itNext = next.getValue().entrySet().iterator();\n", "            while (itNext.hasNext()) {\n", "                Entry<Integer, ConsumeQueue> cq = itNext.next();\n", "                cq.getValue().checkSelf();\n", "            }\n", "        }\n", "    }\n", "\n", "    private boolean isTempFileExist() {\n", "        String fileName = StorePathConfigHelper.getAbortFile(this.messageStoreConfig.getStorePathRootDir());\n", "        File file = new File(fileName);\n", "        return file.exists();\n", "    }\n", "\n", "    private boolean loadConsumeQueue() {\n", "        File dirLogic = new File(StorePathConfigHelper.getStorePathConsumeQueue(this.messageStoreConfig.getStorePathRootDir()));\n", "        File[] fileTopicList = dirLogic.listFiles();\n", "        if (fileTopicList != null) {\n", "\n", "            for (File fileTopic : fileTopicList) {\n", "                String topic = fileTopic.getName();\n", "\n", "                File[] fileQueueIdList = fileTopic.listFiles();\n", "                if (fileQueueIdList != null) {\n", "                    for (File fileQueueId : fileQueueIdList) {\n", "                        int queueId;\n", "                        try {\n", "                            queueId = Integer.parseInt(fileQueueId.getName());\n", "                        } catch (NumberFormatException e) {\n", "                            continue;\n", "                        }\n", "                        ConsumeQueue logic = new ConsumeQueue(\n", "                            topic,\n", "                            queueId,\n", "                            StorePathConfigHelper.getStorePathConsumeQueue(this.messageStoreConfig.getStorePathRootDir()),\n", "                            this.getMessageStoreConfig().getMappedFileSizeConsumeQueue(),\n", "                            this);\n", "                        this.putConsumeQueue(topic, queueId, logic);\n", "                        if (!logic.load()) {\n", "                            return false;\n", "                        }\n", "                    }\n", "                }\n", "            }\n", "        }\n", "\n", "        log.info(\"load logics queue all over, OK\");\n", "\n", "        return true;\n", "    }\n", "\n", "    private void recover(final boolean lastExitOK) {\n", "        long maxPhyOffsetOfConsumeQueue = this.recoverConsumeQueue();\n", "\n", "        if (lastExitOK) {\n", "            this.commitLog.recoverNormally(maxPhyOffsetOfConsumeQueue);\n", "        } else {\n", "            this.commitLog.recoverAbnormally(maxPhyOffsetOfConsumeQueue);\n", "        }\n", "\n", "        this.recoverTopicQueueTable();\n", "    }\n", "\n", "    public MessageStoreConfig getMessageStoreConfig() {\n", "        return messageStoreConfig;\n", "    }\n", "\n", "    public TransientStorePool getTransientStorePool() {\n", "        return transientStorePool;\n", "    }\n", "\n", "    private void putConsumeQueue(final String topic, final int queueId, final ConsumeQueue consumeQueue) {\n", "        ConcurrentMap<Integer/* queueId */, ConsumeQueue> map = this.consumeQueueTable.get(topic);\n", "        if (null == map) {\n", "            map = new ConcurrentHashMap<Integer/* queueId */, ConsumeQueue>();\n", "            map.put(queueId, consumeQueue);\n", "            this.consumeQueueTable.put(topic, map);\n", "        } else {\n", "            map.put(queueId, consumeQueue);\n", "        }\n", "    }\n", "\n", "    private long recoverConsumeQueue() {\n", "        long maxPhysicOffset = -1;\n", "        for (ConcurrentMap<Integer, ConsumeQueue> maps : this.consumeQueueTable.values()) {\n", "            for (ConsumeQueue logic : maps.values()) {\n", "                logic.recover();\n", "                if (logic.getMaxPhysicOffset() > maxPhysicOffset) {\n", "                    maxPhysicOffset = logic.getMaxPhysicOffset();\n", "                }\n", "            }\n", "        }\n", "\n", "        return maxPhysicOffset;\n", "    }\n", "\n", "    public void recoverTopicQueueTable() {\n", "        HashMap<String/* topic-queueid */, Long/* offset */> table = new HashMap<String, Long>(1024);\n", "        long minPhyOffset = this.commitLog.getMinOffset();\n", "        for (ConcurrentMap<Integer, ConsumeQueue> maps : this.consumeQueueTable.values()) {\n", "            for (ConsumeQueue logic : maps.values()) {\n", "                String key = logic.getTopic() + \"-\" + logic.getQueueId();\n", "                table.put(key, logic.getMaxOffsetInQueue());\n", "                logic.correctMinOffset(minPhyOffset);\n", "            }\n", "        }\n", "\n", "        this.commitLog.setTopicQueueTable(table);\n", "    }\n", "\n", "    public AllocateMappedFileService getAllocateMappedFileService() {\n", "        return allocateMappedFileService;\n", "    }\n", "\n", "    public StoreStatsService getStoreStatsService() {\n", "        return storeStatsService;\n", "    }\n", "\n", "    public RunningFlags getAccessRights() {\n", "        return runningFlags;\n", "    }\n", "\n", "    public ConcurrentMap<String, ConcurrentMap<Integer, ConsumeQueue>> getConsumeQueueTable() {\n", "        return consumeQueueTable;\n", "    }\n", "\n", "    public StoreCheckpoint getStoreCheckpoint() {\n", "        return storeCheckpoint;\n", "    }\n", "\n", "    public HAService getHaService() {\n", "        return haService;\n", "    }\n", "\n", "    public ScheduleMessageService getScheduleMessageService() {\n", "        return scheduleMessageService;\n", "    }\n", "\n", "    public RunningFlags getRunningFlags() {\n", "        return runningFlags;\n", "    }\n", "\n", "    public void doDispatch(DispatchRequest req) {\n", "        for (CommitLogDispatcher dispatcher : this.dispatcherList) {\n", "            dispatcher.dispatch(req);\n", "        }\n", "    }\n", "\n", "    public void putMessagePositionInfo(DispatchRequest dispatchRequest) {\n", "        ConsumeQueue cq = this.findConsumeQueue(dispatchRequest.getTopic(), dispatchRequest.getQueueId());\n", "        cq.putMessagePositionInfoWrapper(dispatchRequest);\n", "    }\n", "\n", "    @Override\n", "    public BrokerStatsManager getBrokerStatsManager() {\n", "        return brokerStatsManager;\n", "    }\n", "\n", "    @Override\n", "    public void handleScheduleMessageService(final BrokerRole brokerRole) {\n", "        if (this.scheduleMessageService != null) {\n", "            if (brokerRole == BrokerRole.SLAVE) {\n", "                this.scheduleMessageService.shutdown();\n", "            } else {\n", "                this.scheduleMessageService.start();\n", "            }\n", "        }\n", "\n", "    }\n", "\n", "    public int remainTransientStoreBufferNumbs() {\n", "        return this.transientStorePool.availableBufferNums();\n", "    }\n", "\n", "    @Override\n", "    public boolean isTransientStorePoolDeficient() {\n", "        return remainTransientStoreBufferNumbs() == 0;\n", "    }\n", "\n", "    @Override\n", "    public LinkedList<CommitLogDispatcher> getDispatcherList() {\n", "        return this.dispatcherList;\n", "    }\n", "\n", "    @Override\n", "    public ConsumeQueue getConsumeQueue(String topic, int queueId) {\n", "        ConcurrentMap<Integer, ConsumeQueue> map = consumeQueueTable.get(topic);\n", "        if (map == null) {\n", "            return null;\n", "        }\n", "        return map.get(queueId);\n", "    }\n", "\n", "    public void unlockMappedFile(final MappedFile mappedFile) {\n", "        this.scheduledExecutorService.schedule(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                mappedFile.munlock();\n", "            }\n", "        }, 6, TimeUnit.SECONDS);\n", "    }\n", "\n", "    class CommitLogDispatcherBuildConsumeQueue implements CommitLogDispatcher {\n", "\n", "        @Override\n", "        public void dispatch(DispatchRequest request) {\n", "            final int tranType = MessageSysFlag.getTransactionValue(request.getSysFlag());\n", "            switch (tranType) {\n", "                case MessageSysFlag.TRANSACTION_NOT_TYPE:\n", "                case MessageSysFlag.TRANSACTION_COMMIT_TYPE:\n", "                    DefaultMessageStore.this.putMessagePositionInfo(request);\n", "                    break;\n", "                case MessageSysFlag.TRANSACTION_PREPARED_TYPE:\n", "                case MessageSysFlag.TRANSACTION_ROLLBACK_TYPE:\n", "                    break;\n", "            }\n", "        }\n", "    }\n", "\n", "    class CommitLogDispatcherBuildIndex implements CommitLogDispatcher {\n", "\n", "        @Override\n", "        public void dispatch(DispatchRequest request) {\n", "            if (DefaultMessageStore.this.messageStoreConfig.isMessageIndexEnable()) {\n", "                DefaultMessageStore.this.indexService.buildIndex(request);\n", "            }\n", "        }\n", "    }\n", "\n", "    class CleanCommitLogService {\n", "\n", "        private final static int MAX_MANUAL_DELETE_FILE_TIMES = 20;\n", "        private final double diskSpaceWarningLevelRatio =\n", "            Double.parseDouble(System.getProperty(\"rocketmq.broker.diskSpaceWarningLevelRatio\", \"0.90\"));\n", "\n", "        private final double diskSpaceCleanForciblyRatio =\n", "            Double.parseDouble(System.getProperty(\"rocketmq.broker.diskSpaceCleanForciblyRatio\", \"0.85\"));\n", "        private long lastRedeleteTimestamp = 0;\n", "\n", "        private volatile int manualDeleteFileSeveralTimes = 0;\n", "\n", "        private volatile boolean cleanImmediately = false;\n", "\n", "        public void excuteDeleteFilesManualy() {\n", "            this.manualDeleteFileSeveralTimes = MAX_MANUAL_DELETE_FILE_TIMES;\n", "            DefaultMessageStore.log.info(\"executeDeleteFilesManually was invoked\");\n", "        }\n", "\n", "        public void run() {\n", "            try {\n", "                this.deleteExpiredFiles();\n", "\n", "                this.redeleteHangedFile();\n", "            } catch (Throwable e) {\n", "                DefaultMessageStore.log.warn(this.getServiceName() + \" service has exception. \", e);\n", "            }\n", "        }\n", "\n", "        private void deleteExpiredFiles() {\n", "            int deleteCount = 0;\n", "            long fileReservedTime = DefaultMessageStore.this.getMessageStoreConfig().getFileReservedTime();\n", "            int deletePhysicFilesInterval = DefaultMessageStore.this.getMessageStoreConfig().getDeleteCommitLogFilesInterval();\n", "            int destroyMapedFileIntervalForcibly = DefaultMessageStore.this.getMessageStoreConfig().getDestroyMapedFileIntervalForcibly();\n", "\n", "            boolean timeup = this.isTimeToDelete();\n", "            boolean spacefull = this.isSpaceToDelete();\n", "            boolean manualDelete = this.manualDeleteFileSeveralTimes > 0;\n", "\n", "            if (timeup || spacefull || manualDelete) {\n", "\n", "                if (manualDelete)\n", "                    this.manualDeleteFileSeveralTimes--;\n", "\n", "                boolean cleanAtOnce = DefaultMessageStore.this.getMessageStoreConfig().isCleanFileForciblyEnable() && this.cleanImmediately;\n", "\n", "                log.info(\"begin to delete before {} hours file. timeup: {} spacefull: {} manualDeleteFileSeveralTimes: {} cleanAtOnce: {}\",\n", "                    fileReservedTime,\n", "                    timeup,\n", "                    spacefull,\n", "                    manualDeleteFileSeveralTimes,\n", "                    cleanAtOnce);\n", "\n", "                fileReservedTime *= 60 * 60 * 1000;\n", "\n", "                deleteCount = DefaultMessageStore.this.commitLog.deleteExpiredFile(fileReservedTime, deletePhysicFilesInterval,\n", "                    destroyMapedFileIntervalForcibly, cleanAtOnce);\n", "                if (deleteCount > 0) {\n", "                } else if (spacefull) {\n", "                    log.warn(\"disk space will be full soon, but delete file failed.\");\n", "                }\n", "            }\n", "        }\n", "\n", "        private void redeleteHangedFile() {\n", "            int interval = DefaultMessageStore.this.getMessageStoreConfig().getRedeleteHangedFileInterval();\n", "            long currentTimestamp = System.currentTimeMillis();\n", "            if ((currentTimestamp - this.lastRedeleteTimestamp) > interval) {\n", "                this.lastRedeleteTimestamp = currentTimestamp;\n", "                int destroyMapedFileIntervalForcibly =\n", "                    DefaultMessageStore.this.getMessageStoreConfig().getDestroyMapedFileIntervalForcibly();\n", "                if (DefaultMessageStore.this.commitLog.retryDeleteFirstFile(destroyMapedFileIntervalForcibly)) {\n", "                }\n", "            }\n", "        }\n", "\n", "        public String getServiceName() {\n", "            return CleanCommitLogService.class.getSimpleName();\n", "        }\n", "\n", "        private boolean isTimeToDelete() {\n", "            String when = DefaultMessageStore.this.getMessageStoreConfig().getDeleteWhen();\n", "            if (UtilAll.isItTimeToDo(when)) {\n", "                DefaultMessageStore.log.info(\"it's time to reclaim disk space, \" + when);\n", "                return true;\n", "            }\n", "\n", "            return false;\n", "        }\n", "\n", "        private boolean isSpaceToDelete() {\n", "            double ratio = DefaultMessageStore.this.getMessageStoreConfig().getDiskMaxUsedSpaceRatio() / 100.0;\n", "\n", "            cleanImmediately = false;\n", "\n", "            {\n", "                double physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(getStorePathPhysic());\n", "                if (physicRatio > diskSpaceWarningLevelRatio) {\n", "                    boolean diskok = DefaultMessageStore.this.runningFlags.getAndMakeDiskFull();\n", "                    if (diskok) {\n", "                        DefaultMessageStore.log.error(\"physic disk maybe full soon \" + physicRatio + \", so mark disk full\");\n", "                    }\n", "\n", "                    cleanImmediately = true;\n", "                } else if (physicRatio > diskSpaceCleanForciblyRatio) {\n", "                    cleanImmediately = true;\n", "                } else {\n", "                    boolean diskok = DefaultMessageStore.this.runningFlags.getAndMakeDiskOK();\n", "                    if (!diskok) {\n", "                        DefaultMessageStore.log.info(\"physic disk space OK \" + physicRatio + \", so mark disk ok\");\n", "                    }\n", "                }\n", "\n", "                if (physicRatio < 0 || physicRatio > ratio) {\n", "                    DefaultMessageStore.log.info(\"physic disk maybe full soon, so reclaim space, \" + physicRatio);\n", "                    return true;\n", "                }\n", "            }\n", "\n", "            {\n", "                String storePathLogics = StorePathConfigHelper\n", "                    .getStorePathConsumeQueue(DefaultMessageStore.this.getMessageStoreConfig().getStorePathRootDir());\n", "                double logicsRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathLogics);\n", "                if (logicsRatio > diskSpaceWarningLevelRatio) {\n", "                    boolean diskok = DefaultMessageStore.this.runningFlags.getAndMakeDiskFull();\n", "                    if (diskok) {\n", "                        DefaultMessageStore.log.error(\"logics disk maybe full soon \" + logicsRatio + \", so mark disk full\");\n", "                    }\n", "\n", "                    cleanImmediately = true;\n", "                } else if (logicsRatio > diskSpaceCleanForciblyRatio) {\n", "                    cleanImmediately = true;\n", "                } else {\n", "                    boolean diskok = DefaultMessageStore.this.runningFlags.getAndMakeDiskOK();\n", "                    if (!diskok) {\n", "                        DefaultMessageStore.log.info(\"logics disk space OK \" + logicsRatio + \", so mark disk ok\");\n", "                    }\n", "                }\n", "\n", "                if (logicsRatio < 0 || logicsRatio > ratio) {\n", "                    DefaultMessageStore.log.info(\"logics disk maybe full soon, so reclaim space, \" + logicsRatio);\n", "                    return true;\n", "                }\n", "            }\n", "\n", "            return false;\n", "        }\n", "\n", "        public int getManualDeleteFileSeveralTimes() {\n", "            return manualDeleteFileSeveralTimes;\n", "        }\n", "\n", "        public void setManualDeleteFileSeveralTimes(int manualDeleteFileSeveralTimes) {\n", "            this.manualDeleteFileSeveralTimes = manualDeleteFileSeveralTimes;\n", "        }\n", "        public boolean isSpaceFull() {\n", "            String storePathPhysic = DefaultMessageStore.this.getMessageStoreConfig().getStorePathCommitLog();\n", "            double physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathPhysic);\n", "            double ratio = DefaultMessageStore.this.getMessageStoreConfig().getDiskMaxUsedSpaceRatio() / 100.0;\n", "            if (physicRatio > ratio) {\n", "                DefaultMessageStore.log.info(\"physic disk of commitLog used: \" + physicRatio);\n", "            }\n", "            if (physicRatio > this.diskSpaceWarningLevelRatio) {\n", "                boolean diskok = DefaultMessageStore.this.runningFlags.getAndMakeDiskFull();\n", "                if (diskok) {\n", "                    DefaultMessageStore.log.error(\"physic disk of commitLog maybe full soon, used \" + physicRatio + \", so mark disk full\");\n", "                }\n", "\n", "                return true;\n", "            } else {\n", "                boolean diskok = DefaultMessageStore.this.runningFlags.getAndMakeDiskOK();\n", "\n", "                if (!diskok) {\n", "                    DefaultMessageStore.log.info(\"physic disk space of commitLog OK \" + physicRatio + \", so mark disk ok\");\n", "                }\n", "\n", "                return false;\n", "            }\n", "        }\n", "    }\n", "\n", "    class CleanConsumeQueueService {\n", "        private long lastPhysicalMinOffset = 0;\n", "\n", "        public void run() {\n", "            try {\n", "                this.deleteExpiredFiles();\n", "            } catch (Throwable e) {\n", "                DefaultMessageStore.log.warn(this.getServiceName() + \" service has exception. \", e);\n", "            }\n", "        }\n", "\n", "        private void deleteExpiredFiles() {\n", "            int deleteLogicsFilesInterval = DefaultMessageStore.this.getMessageStoreConfig().getDeleteConsumeQueueFilesInterval();\n", "\n", "            long minOffset = DefaultMessageStore.this.commitLog.getMinOffset();\n", "            if (minOffset > this.lastPhysicalMinOffset) {\n", "                this.lastPhysicalMinOffset = minOffset;\n", "\n", "                ConcurrentMap<String, ConcurrentMap<Integer, ConsumeQueue>> tables = DefaultMessageStore.this.consumeQueueTable;\n", "\n", "                for (ConcurrentMap<Integer, ConsumeQueue> maps : tables.values()) {\n", "                    for (ConsumeQueue logic : maps.values()) {\n", "                        int deleteCount = logic.deleteExpiredFile(minOffset);\n", "\n", "                        if (deleteCount > 0 && deleteLogicsFilesInterval > 0) {\n", "                            try {\n", "                                Thread.sleep(deleteLogicsFilesInterval);\n", "                            } catch (InterruptedException ignored) {\n", "                            }\n", "                        }\n", "                    }\n", "                }\n", "\n", "                DefaultMessageStore.this.indexService.deleteExpiredFile(minOffset);\n", "            }\n", "        }\n", "\n", "        public String getServiceName() {\n", "            return CleanConsumeQueueService.class.getSimpleName();\n", "        }\n", "    }\n", "\n", "    class FlushConsumeQueueService extends ServiceThread {\n", "        private static final int RETRY_TIMES_OVER = 3;\n", "        private long lastFlushTimestamp = 0;\n", "\n", "        private void doFlush(int retryTimes) {\n", "            int flushConsumeQueueLeastPages = DefaultMessageStore.this.getMessageStoreConfig().getFlushConsumeQueueLeastPages();\n", "\n", "            if (retryTimes == RETRY_TIMES_OVER) {\n", "                flushConsumeQueueLeastPages = 0;\n", "            }\n", "\n", "            long logicsMsgTimestamp = 0;\n", "\n", "            int flushConsumeQueueThoroughInterval = DefaultMessageStore.this.getMessageStoreConfig().getFlushConsumeQueueThoroughInterval();\n", "            long currentTimeMillis = System.currentTimeMillis();\n", "            if (currentTimeMillis >= (this.lastFlushTimestamp + flushConsumeQueueThoroughInterval)) {\n", "                this.lastFlushTimestamp = currentTimeMillis;\n", "                flushConsumeQueueLeastPages = 0;\n", "                logicsMsgTimestamp = DefaultMessageStore.this.getStoreCheckpoint().getLogicsMsgTimestamp();\n", "            }\n", "\n", "            ConcurrentMap<String, ConcurrentMap<Integer, ConsumeQueue>> tables = DefaultMessageStore.this.consumeQueueTable;\n", "\n", "            for (ConcurrentMap<Integer, ConsumeQueue> maps : tables.values()) {\n", "                for (ConsumeQueue cq : maps.values()) {\n", "                    boolean result = false;\n", "                    for (int i = 0; i < retryTimes && !result; i++) {\n", "                        result = cq.flush(flushConsumeQueueLeastPages);\n", "                    }\n", "                }\n", "            }\n", "\n", "            if (0 == flushConsumeQueueLeastPages) {\n", "                if (logicsMsgTimestamp > 0) {\n", "                    DefaultMessageStore.this.getStoreCheckpoint().setLogicsMsgTimestamp(logicsMsgTimestamp);\n", "                }\n", "                DefaultMessageStore.this.getStoreCheckpoint().flush();\n", "            }\n", "        }\n", "\n", "        public void run() {\n", "            DefaultMessageStore.log.info(this.getServiceName() + \" service started\");\n", "\n", "            while (!this.isStopped()) {\n", "                try {\n", "                    int interval = DefaultMessageStore.this.getMessageStoreConfig().getFlushIntervalConsumeQueue();\n", "                    this.waitForRunning(interval);\n", "                    this.doFlush(1);\n", "                } catch (Exception e) {\n", "                    DefaultMessageStore.log.warn(this.getServiceName() + \" service has exception. \", e);\n", "                }\n", "            }\n", "\n", "            this.doFlush(RETRY_TIMES_OVER);\n", "\n", "            DefaultMessageStore.log.info(this.getServiceName() + \" service end\");\n", "        }\n", "\n", "        @Override\n", "        public String getServiceName() {\n", "            return FlushConsumeQueueService.class.getSimpleName();\n", "        }\n", "\n", "        @Override\n", "        public long getJointime() {\n", "            return 1000 * 60;\n", "        }\n", "    }\n", "\n", "    class ReputMessageService extends ServiceThread {\n", "\n", "        private volatile long reputFromOffset = 0;\n", "\n", "        public long getReputFromOffset() {\n", "            return reputFromOffset;\n", "        }\n", "\n", "        public void setReputFromOffset(long reputFromOffset) {\n", "            this.reputFromOffset = reputFromOffset;\n", "        }\n", "\n", "        @Override\n", "        public void shutdown() {\n", "            for (int i = 0; i < 50 && this.isCommitLogAvailable(); i++) {\n", "                try {\n", "                    Thread.sleep(100);\n", "                } catch (InterruptedException ignored) {\n", "                }\n", "            }\n", "\n", "            if (this.isCommitLogAvailable()) {\n", "                log.warn(\"shutdown ReputMessageService, but commitlog have not finish to be dispatched, CL: {} reputFromOffset: {}\",\n", "                    DefaultMessageStore.this.commitLog.getMaxOffset(), this.reputFromOffset);\n", "            }\n", "\n", "            super.shutdown();\n", "        }\n", "\n", "        public long behind() {\n", "            return DefaultMessageStore.this.commitLog.getMaxOffset() - this.reputFromOffset;\n", "        }\n", "\n", "        private boolean isCommitLogAvailable() {\n", "            return this.reputFromOffset < DefaultMessageStore.this.commitLog.getMaxOffset();\n", "        }\n", "\n", "        private void doReput() {\n", "            if (this.reputFromOffset < DefaultMessageStore.this.commitLog.getMinOffset()) {\n", "                log.warn(\"The reputFromOffset={} is smaller than minPyOffset={}, this usually indicate that the dispatch behind too much and the commitlog has expired.\",\n", "                    this.reputFromOffset, DefaultMessageStore.this.commitLog.getMinOffset());\n", "                this.reputFromOffset = DefaultMessageStore.this.commitLog.getMinOffset();\n", "            }\n", "            for (boolean doNext = true; this.isCommitLogAvailable() && doNext; ) {\n", "\n", "                if (DefaultMessageStore.this.getMessageStoreConfig().isDuplicationEnable()\n", "                    && this.reputFromOffset >= DefaultMessageStore.this.getConfirmOffset()) {\n", "                    break;\n", "                }\n", "\n", "                SelectMappedBufferResult result = DefaultMessageStore.this.commitLog.getData(reputFromOffset);\n", "                if (result != null) {\n", "                    try {\n", "                        this.reputFromOffset = result.getStartOffset();\n", "\n", "                        for (int readSize = 0; readSize < result.getSize() && doNext; ) {\n", "                            DispatchRequest dispatchRequest =\n", "                                DefaultMessageStore.this.commitLog.checkMessageAndReturnSize(result.getByteBuffer(), false, false);\n", "                            int size = dispatchRequest.getBufferSize() == -1 ? dispatchRequest.getMsgSize() : dispatchRequest.getBufferSize();\n", "\n", "                            if (dispatchRequest.isSuccess()) {\n", "                                if (size > 0) {\n", "                                    DefaultMessageStore.this.doDispatch(dispatchRequest);\n", "\n", "                                    if (BrokerRole.SLAVE != DefaultMessageStore.this.getMessageStoreConfig().getBrokerRole()\n", "                                        && DefaultMessageStore.this.brokerConfig.isLongPollingEnable()) {\n", "                                        DefaultMessageStore.this.messageArrivingListener.arriving(dispatchRequest.getTopic(),\n", "                                            dispatchRequest.getQueueId(), dispatchRequest.getConsumeQueueOffset() + 1,\n", "                                            dispatchRequest.getTagsCode(), dispatchRequest.getStoreTimestamp(),\n", "                                            dispatchRequest.getBitMap(), dispatchRequest.getPropertiesMap());\n", "                                    }\n", "\n", "                                    this.reputFromOffset += size;\n", "                                    readSize += size;\n", "                                    if (DefaultMessageStore.this.getMessageStoreConfig().getBrokerRole() == BrokerRole.SLAVE) {\n", "                                        DefaultMessageStore.this.storeStatsService\n", "                                            .getSinglePutMessageTopicTimesTotal(dispatchRequest.getTopic()).incrementAndGet();\n", "                                        DefaultMessageStore.this.storeStatsService\n", "                                            .getSinglePutMessageTopicSizeTotal(dispatchRequest.getTopic())\n", "                                            .addAndGet(dispatchRequest.getMsgSize());\n", "                                    }\n", "                                } else if (size == 0) {\n", "                                    this.reputFromOffset = DefaultMessageStore.this.commitLog.rollNextFile(this.reputFromOffset);\n", "                                    readSize = result.getSize();\n", "                                }\n", "                            } else if (!dispatchRequest.isSuccess()) {\n", "\n", "                                if (size > 0) {\n", "                                    log.error(\"[BUG]read total count not equals msg total size. reputFromOffset={}\", reputFromOffset);\n", "                                    this.reputFromOffset += size;\n", "                                } else {\n", "                                    doNext = false;\n", "                                    // If user open the dledger pattern or the broker is master node,\n", "                                    // it will not ignore the exception and fix the reputFromOffset variable\n", "                                    if (DefaultMessageStore.this.getMessageStoreConfig().isEnableDLegerCommitLog() ||\n", "                                        DefaultMessageStore.this.brokerConfig.getBrokerId() == MixAll.MASTER_ID) {\n", "                                        log.error(\"[BUG]dispatch message to consume queue error, COMMITLOG OFFSET: {}\",\n", "                                            this.reputFromOffset);\n", "                                        this.reputFromOffset += result.getSize() - readSize;\n", "                                    }\n", "                                }\n", "                            }\n", "                        }\n", "                    } finally {\n", "                        result.release();\n", "                    }\n", "                } else {\n", "                    doNext = false;\n", "                }\n", "            }\n", "        }\n", "\n", "        @Override\n", "        public void run() {\n", "            DefaultMessageStore.log.info(this.getServiceName() + \" service started\");\n", "\n", "            while (!this.isStopped()) {\n", "                try {\n", "                    Thread.sleep(1);\n", "                    this.doReput();\n", "                } catch (Exception e) {\n", "                    DefaultMessageStore.log.warn(this.getServiceName() + \" service has exception. \", e);\n", "                }\n", "            }\n", "\n", "            DefaultMessageStore.log.info(this.getServiceName() + \" service end\");\n", "        }\n", "\n", "        @Override\n", "        public String getServiceName() {\n", "            return ReputMessageService.class.getSimpleName();\n", "        }\n", "\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.store;\n", "\n", "import java.io.File;\n", "import java.io.RandomAccessFile;\n", "import java.lang.reflect.InvocationTargetException;\n", "import java.lang.reflect.Method;\n", "import java.net.InetAddress;\n", "import java.net.InetSocketAddress;\n", "import java.net.SocketAddress;\n", "import java.net.UnknownHostException;\n", "import java.nio.ByteBuffer;\n", "import java.nio.MappedByteBuffer;\n", "import java.nio.channels.FileChannel;\n", "import java.nio.channels.OverlappingFileLockException;\n", "import java.util.Map;\n", "import java.util.Random;\n", "import java.util.concurrent.atomic.AtomicInteger;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.store.config.FlushDiskType;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.apache.rocketmq.store.config.StorePathConfigHelper;\n", "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n", "import org.junit.After;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.runner.RunWith;\n", "import org.mockito.junit.MockitoJUnitRunner;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.junit.Assert.assertTrue;\n", "import static org.mockito.Mockito.mock;\n", "\n", "@RunWith(MockitoJUnitRunner.class)\n", "public class DefaultMessageStoreTest {\n", "    private final String StoreMessage = \"Once, there was a chance for me!\";\n", "    private int QUEUE_TOTAL = 100;\n", "    private AtomicInteger QueueId = new AtomicInteger(0);\n", "    private SocketAddress BornHost;\n", "    private SocketAddress StoreHost;\n", "    private byte[] MessageBody;\n", "    private MessageStore messageStore;\n", "\n", "    @Before\n", "    public void init() throws Exception {\n", "        StoreHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);\n", "        BornHost = new InetSocketAddress(InetAddress.getByName(\"127.0.0.1\"), 0);\n", "\n", "        messageStore = buildMessageStore();\n", "        boolean load = messageStore.load();\n", "        assertTrue(load);\n", "        messageStore.start();\n", "    }\n", "\n", "    @Test(expected = OverlappingFileLockException.class)\n", "    public void test_repeat_restart() throws Exception {\n", "        QUEUE_TOTAL = 1;\n", "        MessageBody = StoreMessage.getBytes();\n", "\n", "        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();\n", "        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 8);\n", "        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);\n", "        messageStoreConfig.setMaxHashSlotNum(100);\n", "        messageStoreConfig.setMaxIndexNum(100 * 10);\n", "        MessageStore master = new DefaultMessageStore(messageStoreConfig, null, new MyMessageArrivingListener(), new BrokerConfig());\n", "\n", "        boolean load = master.load();\n", "        assertTrue(load);\n", "\n", "        try {\n", "            master.start();\n", "            master.start();\n", "        } finally {\n", "            master.shutdown();\n", "            master.destroy();\n", "        }\n", "    }\n", "\n", "    @After\n", "    public void destroy() {\n", "        messageStore.shutdown();\n", "        messageStore.destroy();\n", "\n", "        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();\n", "        File file = new File(messageStoreConfig.getStorePathRootDir());\n", "        UtilAll.deleteFile(file);\n", "    }\n", "\n", "    private MessageStore buildMessageStore() throws Exception {\n", "        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();\n", "        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 1024 * 10);\n", "        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 1024 * 10);\n", "        messageStoreConfig.setMaxHashSlotNum(10000);\n", "        messageStoreConfig.setMaxIndexNum(100 * 100);\n", "        messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);\n", "        messageStoreConfig.setFlushIntervalConsumeQueue(1);\n", "        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager(\"simpleTest\"), new MyMessageArrivingListener(), new BrokerConfig());\n", "    }\n", "\n", "    @Test\n", "    public void testWriteAndRead() {\n", "        long ipv4HostMsgs = 10;\n", "        long ipv6HostMsgs = 10;\n", "        long totalMsgs = ipv4HostMsgs + ipv6HostMsgs;\n", "        QUEUE_TOTAL = 1;\n", "        MessageBody = StoreMessage.getBytes();\n", "        for (long i = 0; i < ipv4HostMsgs; i++) {\n", "            messageStore.putMessage(buildMessage());\n", "        }\n", "\n", "        for (long i = 0; i < ipv6HostMsgs; i++) {\n", "            messageStore.putMessage(buildIPv6HostMessage());\n", "        }\n", "\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "\n", "        for (long i = 0; i < totalMsgs; i++) {\n", "            GetMessageResult result = messageStore.getMessage(\"GROUP_A\", \"TOPIC_A\", 0, i, 1024 * 1024, null);\n", "            assertThat(result).isNotNull();\n", "            result.release();\n", "        }\n", "        verifyThatMasterIsFunctional(totalMsgs, messageStore);\n", "    }\n", "\n", "    @Test\n", "    public void testLookMessageByOffset_OffsetIsFirst() {\n", "        final int totalCount = 10;\n", "        int queueId = new Random().nextInt(10);\n", "        String topic = \"FooBar\";\n", "        int firstOffset = 0;\n", "        AppendMessageResult[] appendMessageResultArray = putMessages(totalCount, topic, queueId);\n", "        AppendMessageResult firstResult = appendMessageResultArray[0];\n", "\n", "        MessageExt messageExt = messageStore.lookMessageByOffset(firstResult.getWroteOffset());\n", "        MessageExt messageExt1 = getDefaultMessageStore().lookMessageByOffset(firstResult.getWroteOffset(), firstResult.getWroteBytes());\n", "\n", "        assertThat(new String(messageExt.getBody())).isEqualTo(buildMessageBodyByOffset(StoreMessage, firstOffset));\n", "        assertThat(new String(messageExt1.getBody())).isEqualTo(buildMessageBodyByOffset(StoreMessage, firstOffset));\n", "    }\n", "\n", "    @Test\n", "    public void testLookMessageByOffset_OffsetIsLast() {\n", "        final int totalCount = 10;\n", "        int queueId = new Random().nextInt(10);\n", "        String topic = \"FooBar\";\n", "        AppendMessageResult[] appendMessageResultArray = putMessages(totalCount, topic, queueId);\n", "        int lastIndex = totalCount - 1;\n", "        AppendMessageResult lastResult = appendMessageResultArray[lastIndex];\n", "\n", "        MessageExt messageExt = getDefaultMessageStore().lookMessageByOffset(lastResult.getWroteOffset(), lastResult.getWroteBytes());\n", "\n", "        assertThat(new String(messageExt.getBody())).isEqualTo(buildMessageBodyByOffset(StoreMessage, lastIndex));\n", "    }\n", "\n", "    @Test\n", "    public void testLookMessageByOffset_OffsetIsOutOfBound() {\n", "        final int totalCount = 10;\n", "        int queueId = new Random().nextInt(10);\n", "        String topic = \"FooBar\";\n", "        AppendMessageResult[] appendMessageResultArray = putMessages(totalCount, topic, queueId);\n", "        long lastOffset = getMaxOffset(appendMessageResultArray);\n", "\n", "        MessageExt messageExt = getDefaultMessageStore().lookMessageByOffset(lastOffset);\n", "\n", "        assertThat(messageExt).isNull();\n", "    }\n", "\n", "    @Test\n", "    public void testGetOffsetInQueueByTime() {\n", "        final int totalCount = 10;\n", "        int queueId = 0;\n", "        String topic = \"FooBar\";\n", "        AppendMessageResult[] appendMessageResults = putMessages(totalCount, topic, queueId, true);\n", "        //Thread.sleep(10);\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "\n", "        ConsumeQueue consumeQueue = getDefaultMessageStore().findConsumeQueue(topic, queueId);\n", "        for (AppendMessageResult appendMessageResult : appendMessageResults) {\n", "            long offset = messageStore.getOffsetInQueueByTime(topic, queueId, appendMessageResult.getStoreTimestamp());\n", "            SelectMappedBufferResult indexBuffer = consumeQueue.getIndexBuffer(offset);\n", "            assertThat(indexBuffer.getByteBuffer().getLong()).isEqualTo(appendMessageResult.getWroteOffset());\n", "            assertThat(indexBuffer.getByteBuffer().getInt()).isEqualTo(appendMessageResult.getWroteBytes());\n", "            indexBuffer.release();\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testGetOffsetInQueueByTime_TimestampIsSkewing() {\n", "        final int totalCount = 10;\n", "        int queueId = 0;\n", "        String topic = \"FooBar\";\n", "        AppendMessageResult[] appendMessageResults = putMessages(totalCount, topic, queueId, true);\n", "        //Thread.sleep(10);\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "        int skewing = 2;\n", "\n", "        ConsumeQueue consumeQueue = getDefaultMessageStore().findConsumeQueue(topic, queueId);\n", "        for (AppendMessageResult appendMessageResult : appendMessageResults) {\n", "            long offset = messageStore.getOffsetInQueueByTime(topic, queueId, appendMessageResult.getStoreTimestamp() + skewing);\n", "            long offset2 = messageStore.getOffsetInQueueByTime(topic, queueId, appendMessageResult.getStoreTimestamp() - skewing);\n", "            SelectMappedBufferResult indexBuffer = consumeQueue.getIndexBuffer(offset);\n", "            SelectMappedBufferResult indexBuffer2 = consumeQueue.getIndexBuffer(offset2);\n", "            assertThat(indexBuffer.getByteBuffer().getLong()).isEqualTo(appendMessageResult.getWroteOffset());\n", "            assertThat(indexBuffer.getByteBuffer().getInt()).isEqualTo(appendMessageResult.getWroteBytes());\n", "            assertThat(indexBuffer2.getByteBuffer().getLong()).isEqualTo(appendMessageResult.getWroteOffset());\n", "            assertThat(indexBuffer2.getByteBuffer().getInt()).isEqualTo(appendMessageResult.getWroteBytes());\n", "            indexBuffer.release();\n", "            indexBuffer2.release();\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testGetOffsetInQueueByTime_TimestampSkewingIsLarge() {\n", "        final int totalCount = 10;\n", "        int queueId = 0;\n", "        String topic = \"FooBar\";\n", "        AppendMessageResult[] appendMessageResults = putMessages(totalCount, topic, queueId, true);\n", "        //Thread.sleep(10);\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "        int skewing = 20000;\n", "\n", "        ConsumeQueue consumeQueue = getDefaultMessageStore().findConsumeQueue(topic, queueId);\n", "        for (AppendMessageResult appendMessageResult : appendMessageResults) {\n", "            long offset = messageStore.getOffsetInQueueByTime(topic, queueId, appendMessageResult.getStoreTimestamp() + skewing);\n", "            long offset2 = messageStore.getOffsetInQueueByTime(topic, queueId, appendMessageResult.getStoreTimestamp() - skewing);\n", "            SelectMappedBufferResult indexBuffer = consumeQueue.getIndexBuffer(offset);\n", "            SelectMappedBufferResult indexBuffer2 = consumeQueue.getIndexBuffer(offset2);\n", "            assertThat(indexBuffer.getByteBuffer().getLong()).isEqualTo(appendMessageResults[totalCount - 1].getWroteOffset());\n", "            assertThat(indexBuffer.getByteBuffer().getInt()).isEqualTo(appendMessageResults[totalCount - 1].getWroteBytes());\n", "            assertThat(indexBuffer2.getByteBuffer().getLong()).isEqualTo(appendMessageResults[0].getWroteOffset());\n", "            assertThat(indexBuffer2.getByteBuffer().getInt()).isEqualTo(appendMessageResults[0].getWroteBytes());\n", "\n", "            indexBuffer.release();\n", "            indexBuffer2.release();\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testGetOffsetInQueueByTime_ConsumeQueueNotFound1() {\n", "        final int totalCount = 10;\n", "        int queueId = 0;\n", "        int wrongQueueId = 1;\n", "        String topic = \"FooBar\";\n", "        AppendMessageResult[] appendMessageResults = putMessages(totalCount, topic, queueId, false);\n", "        //Thread.sleep(10);\n", "\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "\n", "        long offset = messageStore.getOffsetInQueueByTime(topic, wrongQueueId, appendMessageResults[0].getStoreTimestamp());\n", "\n", "        assertThat(offset).isEqualTo(0);\n", "    }\n", "\n", "    @Test\n", "    public void testGetOffsetInQueueByTime_ConsumeQueueNotFound2() {\n", "        final int totalCount = 10;\n", "        int queueId = 0;\n", "        int wrongQueueId = 1;\n", "        String topic = \"FooBar\";\n", "        putMessages(totalCount, topic, queueId, false);\n", "        //Thread.sleep(10);\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "\n", "        long messageStoreTimeStamp = messageStore.getMessageStoreTimeStamp(topic, wrongQueueId, 0);\n", "\n", "        assertThat(messageStoreTimeStamp).isEqualTo(-1);\n", "    }\n", "\n", "    @Test\n", "    public void testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist() {\n", "        final int totalCount = 10;\n", "        int queueId = 0;\n", "        int wrongQueueId = 1;\n", "        String topic = \"FooBar\";\n", "        putMessages(totalCount, topic, queueId, true);\n", "        //Thread.sleep(10);\n", "\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "\n", "        long messageStoreTimeStamp = messageStore.getMessageStoreTimeStamp(topic, wrongQueueId, -1);\n", "\n", "        assertThat(messageStoreTimeStamp).isEqualTo(-1);\n", "    }\n", "\n", "    @Test\n", "    public void testGetMessageStoreTimeStamp() {\n", "        final int totalCount = 10;\n", "        int queueId = 0;\n", "        String topic = \"FooBar\";\n", "        AppendMessageResult[] appendMessageResults = putMessages(totalCount, topic, queueId, false);\n", "        //Thread.sleep(10);\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "\n", "        ConsumeQueue consumeQueue = getDefaultMessageStore().findConsumeQueue(topic, queueId);\n", "        int minOffsetInQueue = (int) consumeQueue.getMinOffsetInQueue();\n", "        for (int i = minOffsetInQueue; i < consumeQueue.getMaxOffsetInQueue(); i++) {\n", "            long messageStoreTimeStamp = messageStore.getMessageStoreTimeStamp(topic, queueId, i);\n", "            assertThat(messageStoreTimeStamp).isEqualTo(appendMessageResults[i].getStoreTimestamp());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testGetStoreTime_ParamIsNull() {\n", "        long storeTime = getStoreTime(null);\n", "\n", "        assertThat(storeTime).isEqualTo(-1);\n", "    }\n", "\n", "    @Test\n", "    public void testGetStoreTime_EverythingIsOk() {\n", "        final int totalCount = 10;\n", "        int queueId = 0;\n", "        String topic = \"FooBar\";\n", "        AppendMessageResult[] appendMessageResults = putMessages(totalCount, topic, queueId, false);\n", "        //Thread.sleep(10);\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "        ConsumeQueue consumeQueue = messageStore.getConsumeQueue(topic, queueId);\n", "\n", "        for (int i = 0; i < totalCount; i++) {\n", "            SelectMappedBufferResult indexBuffer = consumeQueue.getIndexBuffer(i);\n", "            long storeTime = getStoreTime(indexBuffer);\n", "            assertThat(storeTime).isEqualTo(appendMessageResults[i].getStoreTimestamp());\n", "            indexBuffer.release();\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset() {\n", "        long phyOffset = -10;\n", "        int size = 138;\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(100);\n", "        byteBuffer.putLong(phyOffset);\n", "        byteBuffer.putInt(size);\n", "        byteBuffer.flip();\n", "        MappedFile mappedFile = mock(MappedFile.class);\n", "        SelectMappedBufferResult result = new SelectMappedBufferResult(0, byteBuffer, size, mappedFile);\n", "\n", "        long storeTime = getStoreTime(result);\n", "        result.release();\n", "\n", "        assertThat(storeTime).isEqualTo(-1);\n", "    }\n", "\n", "    private DefaultMessageStore getDefaultMessageStore() {\n", "        return (DefaultMessageStore) this.messageStore;\n", "    }\n", "\n", "    private AppendMessageResult[] putMessages(int totalCount, String topic, int queueId) {\n", "        return putMessages(totalCount, topic, queueId, false);\n", "    }\n", "\n", "    private AppendMessageResult[] putMessages(int totalCount, String topic, int queueId, boolean interval) {\n", "        AppendMessageResult[] appendMessageResultArray = new AppendMessageResult[totalCount];\n", "        for (int i = 0; i < totalCount; i++) {\n", "            String messageBody = buildMessageBodyByOffset(StoreMessage, i);\n", "\n", "            MessageExtBrokerInner msgInner =\n", "                i < totalCount / 2 ? buildMessage(messageBody.getBytes(), topic) : buildIPv6HostMessage(messageBody.getBytes(), topic);\n", "            msgInner.setQueueId(queueId);\n", "            PutMessageResult result = messageStore.putMessage(msgInner);\n", "            appendMessageResultArray[i] = result.getAppendMessageResult();\n", "            assertThat(result.getPutMessageStatus()).isEqualTo(PutMessageStatus.PUT_OK);\n", "            if (interval) {\n", "                try {\n", "                    Thread.sleep(10);\n", "                } catch (InterruptedException e) {\n", "                    throw new RuntimeException(\"Thread sleep ERROR\");\n", "                }\n", "            }\n", "        }\n", "        return appendMessageResultArray;\n", "    }\n", "\n", "    private long getMaxOffset(AppendMessageResult[] appendMessageResultArray) {\n", "        if (appendMessageResultArray == null) {\n", "            return 0;\n", "        }\n", "        AppendMessageResult last = appendMessageResultArray[appendMessageResultArray.length - 1];\n", "        return last.getWroteOffset() + last.getWroteBytes();\n", "    }\n", "\n", "    private String buildMessageBodyByOffset(String message, long i) {\n", "        return String.format(\"%s offset %d\", message, i);\n", "    }\n", "\n", "    private long getStoreTime(SelectMappedBufferResult result) {\n", "        try {\n", "            Method getStoreTime = getDefaultMessageStore().getClass().getDeclaredMethod(\"getStoreTime\", SelectMappedBufferResult.class);\n", "            getStoreTime.setAccessible(true);\n", "            return (long) getStoreTime.invoke(getDefaultMessageStore(), result);\n", "        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n", "            throw new RuntimeException(e);\n", "        }\n", "    }\n", "\n", "    private MessageExtBrokerInner buildMessage(byte[] messageBody, String topic) {\n", "        MessageExtBrokerInner msg = new MessageExtBrokerInner();\n", "        msg.setTopic(topic);\n", "        msg.setTags(\"TAG1\");\n", "        msg.setKeys(\"Hello\");\n", "        msg.setBody(messageBody);\n", "        msg.setKeys(String.valueOf(System.currentTimeMillis()));\n", "        msg.setQueueId(Math.abs(QueueId.getAndIncrement()) % QUEUE_TOTAL);\n", "        msg.setSysFlag(0);\n", "        msg.setBornTimestamp(System.currentTimeMillis());\n", "        msg.setStoreHost(StoreHost);\n", "        msg.setBornHost(BornHost);\n", "        return msg;\n", "    }\n", "\n", "    private MessageExtBrokerInner buildIPv6HostMessage(byte[] messageBody, String topic) {\n", "        MessageExtBrokerInner msg = new MessageExtBrokerInner();\n", "        msg.setTopic(topic);\n", "        msg.setTags(\"TAG1\");\n", "        msg.setKeys(\"Hello\");\n", "        msg.setBody(messageBody);\n", "        msg.setMsgId(\"24084004018081003FAA1DDE2B3F898A00002A9F0000000000000CA0\");\n", "        msg.setKeys(String.valueOf(System.currentTimeMillis()));\n", "        msg.setQueueId(Math.abs(QueueId.getAndIncrement()) % QUEUE_TOTAL);\n", "        msg.setSysFlag(0);\n", "        msg.setBornHostV6Flag();\n", "        msg.setStoreHostAddressV6Flag();\n", "        msg.setBornTimestamp(System.currentTimeMillis());\n", "        try {\n", "            msg.setBornHost(new InetSocketAddress(InetAddress.getByName(\"1050:0000:0000:0000:0005:0600:300c:326b\"), 0));\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "\n", "        try {\n", "            msg.setStoreHost(new InetSocketAddress(InetAddress.getByName(\"::1\"), 0));\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "            assertThat(Boolean.FALSE).isTrue();\n", "        }\n", "        return msg;\n", "    }\n", "\n", "    private MessageExtBrokerInner buildMessage() {\n", "        return buildMessage(MessageBody, \"FooBar\");\n", "    }\n", "\n", "    private MessageExtBrokerInner buildIPv6HostMessage() {\n", "        return buildIPv6HostMessage(MessageBody, \"FooBar\");\n", "    }\n", "\n", "    private void verifyThatMasterIsFunctional(long totalMsgs, MessageStore master) {\n", "        for (long i = 0; i < totalMsgs; i++) {\n", "            master.putMessage(buildMessage());\n", "        }\n", "\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "\n", "        for (long i = 0; i < totalMsgs; i++) {\n", "            GetMessageResult result = master.getMessage(\"GROUP_A\", \"TOPIC_A\", 0, i, 1024 * 1024, null);\n", "            assertThat(result).isNotNull();\n", "            result.release();\n", "\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testPullSize() throws Exception {\n", "        String topic = \"pullSizeTopic\";\n", "\n", "        for (int i = 0; i < 32; i++) {\n", "            MessageExtBrokerInner messageExtBrokerInner = buildMessage();\n", "            messageExtBrokerInner.setTopic(topic);\n", "            messageExtBrokerInner.setQueueId(0);\n", "            messageStore.putMessage(messageExtBrokerInner);\n", "        }\n", "        // wait for consume queue build\n", "        // the sleep time should be great than consume queue flush interval\n", "        //Thread.sleep(100);\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "        String group = \"simple\";\n", "        GetMessageResult getMessageResult32 = messageStore.getMessage(group, topic, 0, 0, 32, null);\n", "        assertThat(getMessageResult32.getMessageBufferList().size()).isEqualTo(32);\n", "        getMessageResult32.release();\n", "\n", "        GetMessageResult getMessageResult20 = messageStore.getMessage(group, topic, 0, 0, 20, null);\n", "        assertThat(getMessageResult20.getMessageBufferList().size()).isEqualTo(20);\n", "\n", "        getMessageResult20.release();\n", "        GetMessageResult getMessageResult45 = messageStore.getMessage(group, topic, 0, 0, 10, null);\n", "        assertThat(getMessageResult45.getMessageBufferList().size()).isEqualTo(10);\n", "        getMessageResult45.release();\n", "\n", "    }\n", "\n", "    @Test\n", "    public void testRecover() throws Exception {\n", "        String topic = \"recoverTopic\";\n", "        MessageBody = StoreMessage.getBytes();\n", "        for (int i = 0; i < 100; i++) {\n", "            MessageExtBrokerInner messageExtBrokerInner = buildMessage();\n", "            messageExtBrokerInner.setTopic(topic);\n", "            messageExtBrokerInner.setQueueId(0);\n", "            messageStore.putMessage(messageExtBrokerInner);\n", "        }\n", "\n", "        // Thread.sleep(100);//wait for build consumer queue\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "\n", "        long maxPhyOffset = messageStore.getMaxPhyOffset();\n", "        long maxCqOffset = messageStore.getMaxOffsetInQueue(topic, 0);\n", "\n", "        //1.just reboot\n", "        messageStore.shutdown();\n", "        messageStore = buildMessageStore();\n", "        boolean load = messageStore.load();\n", "        assertTrue(load);\n", "        messageStore.start();\n", "        assertTrue(maxPhyOffset == messageStore.getMaxPhyOffset());\n", "        assertTrue(maxCqOffset == messageStore.getMaxOffsetInQueue(topic, 0));\n", "\n", "        //2.damage commitlog and reboot normal\n", "        for (int i = 0; i < 100; i++) {\n", "            MessageExtBrokerInner messageExtBrokerInner = buildMessage();\n", "            messageExtBrokerInner.setTopic(topic);\n", "            messageExtBrokerInner.setQueueId(0);\n", "            messageStore.putMessage(messageExtBrokerInner);\n", "        }\n", "        //Thread.sleep(100);\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "        long secondLastPhyOffset = messageStore.getMaxPhyOffset();\n", "        long secondLastCqOffset = messageStore.getMaxOffsetInQueue(topic, 0);\n", "\n", "        MessageExtBrokerInner messageExtBrokerInner = buildMessage();\n", "        messageExtBrokerInner.setTopic(topic);\n", "        messageExtBrokerInner.setQueueId(0);\n", "        messageStore.putMessage(messageExtBrokerInner);\n", "\n", "        messageStore.shutdown();\n", "\n", "        //damage last message\n", "        damageCommitlog(secondLastPhyOffset);\n", "\n", "        //reboot\n", "        messageStore = buildMessageStore();\n", "        load = messageStore.load();\n", "        assertTrue(load);\n", "        messageStore.start();\n", "        assertTrue(secondLastPhyOffset == messageStore.getMaxPhyOffset());\n", "        assertTrue(secondLastCqOffset == messageStore.getMaxOffsetInQueue(topic, 0));\n", "\n", "        //3.damage commitlog and reboot abnormal\n", "        for (int i = 0; i < 100; i++) {\n", "            messageExtBrokerInner = buildMessage();\n", "            messageExtBrokerInner.setTopic(topic);\n", "            messageExtBrokerInner.setQueueId(0);\n", "            messageStore.putMessage(messageExtBrokerInner);\n", "        }\n", "        //Thread.sleep(100);\n", "        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);\n", "        secondLastPhyOffset = messageStore.getMaxPhyOffset();\n", "        secondLastCqOffset = messageStore.getMaxOffsetInQueue(topic, 0);\n", "\n", "        messageExtBrokerInner = buildMessage();\n", "        messageExtBrokerInner.setTopic(topic);\n", "        messageExtBrokerInner.setQueueId(0);\n", "        messageStore.putMessage(messageExtBrokerInner);\n", "        messageStore.shutdown();\n", "\n", "        //damage last message\n", "        damageCommitlog(secondLastPhyOffset);\n", "        //add abort file\n", "        String fileName = StorePathConfigHelper.getAbortFile(((DefaultMessageStore) messageStore).getMessageStoreConfig().getStorePathRootDir());\n", "        File file = new File(fileName);\n", "        MappedFile.ensureDirOK(file.getParent());\n", "        file.createNewFile();\n", "\n", "        messageStore = buildMessageStore();\n", "        load = messageStore.load();\n", "        assertTrue(load);\n", "        messageStore.start();\n", "        assertTrue(secondLastPhyOffset == messageStore.getMaxPhyOffset());\n", "        assertTrue(secondLastCqOffset == messageStore.getMaxOffsetInQueue(topic, 0));\n", "\n", "        //message write again\n", "        for (int i = 0; i < 100; i++) {\n", "            messageExtBrokerInner = buildMessage();\n", "            messageExtBrokerInner.setTopic(topic);\n", "            messageExtBrokerInner.setQueueId(0);\n", "            messageStore.putMessage(messageExtBrokerInner);\n", "        }\n", "    }\n", "\n", "    private void damageCommitlog(long offset) throws Exception {\n", "        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();\n", "        File file = new File(messageStoreConfig.getStorePathCommitLog() + File.separator + \"00000000000000000000\");\n", "\n", "        FileChannel fileChannel = new RandomAccessFile(file, \"rw\").getChannel();\n", "        MappedByteBuffer mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_WRITE, 0, 1024 * 1024 * 10);\n", "\n", "        int bodyLen = mappedByteBuffer.getInt((int) offset + 84);\n", "        int topicLenIndex = (int) offset + 84 + bodyLen + 4;\n", "        mappedByteBuffer.position(topicLenIndex);\n", "        mappedByteBuffer.putInt(0);\n", "        mappedByteBuffer.putInt(0);\n", "        mappedByteBuffer.putInt(0);\n", "        mappedByteBuffer.putInt(0);\n", "\n", "        mappedByteBuffer.force();\n", "        fileChannel.force(true);\n", "        fileChannel.close();\n", "    }\n", "\n", "    private class MyMessageArrivingListener implements MessageArrivingListener {\n", "        @Override\n", "        public void arriving(String topic, int queueId, long logicOffset, long tagsCode, long msgStoreTime,\n", "            byte[] filterBitMap, Map<String, String> properties) {\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"DefaultMessageStore::::truncateDirtyLogicFiles(long)": [168, 176], "DefaultMessageStore::::load()": [181, 219], "DefaultMessageStore::::start()": [224, 294], "DefaultMessageStore::::shutdown()": [296, 342], "DefaultMessageStore::::destroy()": [344, 350], "DefaultMessageStore::::destroyLogics()": [352, 358], "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)": [360, 371], "DefaultMessageStore::::checkStoreStatus()": [387, 416], "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)": [418, 446], "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)": [478, 505], "DefaultMessageStore::::isOSPageCacheBusy()": [535, 542], "DefaultMessageStore::::lockTimeMills()": [544, 547], "DefaultMessageStore::::getSystemClock()": [549, 551], "DefaultMessageStore::::getCommitLog()": [553, 555], "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)": [557, 722], "DefaultMessageStore::::getMaxOffsetInQueue(java.lang.String,int)": [724, 732], "DefaultMessageStore::::getMinOffsetInQueue(java.lang.String,int)": [734, 741], "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)": [743, 759], "DefaultMessageStore::::getOffsetInQueueByTime(java.lang.String,int,long)": [761, 768], "DefaultMessageStore::::lookMessageByOffset(long)": [770, 783], "DefaultMessageStore::::selectOneMessageByOffset(long)": [785, 799], "DefaultMessageStore::::selectOneMessageByOffset(long,int)": [801, 804], "DefaultMessageStore::::getRunningDataInfo()": [806, 808], "DefaultMessageStore::::getStorePathPhysic()": [810, 818], "DefaultMessageStore::::getRuntimeInfo()": [820, 847], "DefaultMessageStore::::getMaxPhyOffset()": [849, 852], "DefaultMessageStore::::getMinPhyOffset()": [854, 857], "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)": [859, 870], "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)": [872, 885], "DefaultMessageStore::::getEarliestMessageTime()": [887, 892], "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)": [894, 903], "DefaultMessageStore::::getMessageTotalInQueue(java.lang.String,int)": [905, 913], "DefaultMessageStore::::getCommitLogData(long)": [915, 923], "DefaultMessageStore::::appendToCommitLog(long,byte[])": [925, 940], "DefaultMessageStore::::executeDeleteFilesManually()": [942, 945], "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)": [947, 1011], "DefaultMessageStore::::updateHaMasterAddress(java.lang.String)": [1013, 1016], "DefaultMessageStore::::slaveFallBehindMuch()": [1018, 1021], "DefaultMessageStore::::now()": [1023, 1026], "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)": [1028, 1057], "DefaultMessageStore::::cleanExpiredConsumerQueue()": [1059, 1101], "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)": [1103, 1147], "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)": [1149, 1173], "DefaultMessageStore::::dispatchBehindBytes()": [1175, 1178], "DefaultMessageStore::::flush()": [1180, 1183], "DefaultMessageStore::::resetWriteOffset(long)": [1185, 1188], "DefaultMessageStore::::getConfirmOffset()": [1190, 1193], "DefaultMessageStore::::setConfirmOffset(long)": [1195, 1198], "DefaultMessageStore::::lookMessageByOffset(long,int)": [1200, 1211], "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)": [1213, 1242], "DefaultMessageStore::::nextOffsetCorrection(long,long)": [1244, 1250], "DefaultMessageStore::::checkInDiskByCommitOffset(long,long)": [1252, 1255], "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)": [1257, 1286], "DefaultMessageStore::::deleteFile(java.lang.String)": [1288, 1292], "DefaultMessageStore::::createTempFile()": [1297, 1303], "DefaultMessageStore::::addScheduleTask()": [1305, 1353], "DefaultMessageStore::::cleanFilesPeriodically()": [1355, 1358], "DefaultMessageStore::::checkSelf()": [1360, 1372], "DefaultMessageStore::::isTempFileExist()": [1374, 1378], "DefaultMessageStore::::loadConsumeQueue()": [1380, 1415], "DefaultMessageStore::::recover(boolean)": [1417, 1427], "DefaultMessageStore::::getMessageStoreConfig()": [1429, 1431], "DefaultMessageStore::::getTransientStorePool()": [1433, 1435], "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)": [1437, 1446], "DefaultMessageStore::::recoverConsumeQueue()": [1448, 1460], "DefaultMessageStore::::recoverTopicQueueTable()": [1462, 1474], "DefaultMessageStore::::getAllocateMappedFileService()": [1476, 1478], "DefaultMessageStore::::getStoreStatsService()": [1480, 1482], "DefaultMessageStore::::getAccessRights()": [1484, 1486], "DefaultMessageStore::::getConsumeQueueTable()": [1488, 1490], "DefaultMessageStore::::getStoreCheckpoint()": [1492, 1494], "DefaultMessageStore::::getHaService()": [1496, 1498], "DefaultMessageStore::::getScheduleMessageService()": [1500, 1502], "DefaultMessageStore::::getRunningFlags()": [1504, 1506], "DefaultMessageStore::::doDispatch(org.apache.rocketmq.store.DispatchRequest)": [1508, 1512], "DefaultMessageStore::::putMessagePositionInfo(org.apache.rocketmq.store.DispatchRequest)": [1514, 1517], "DefaultMessageStore::::getBrokerStatsManager()": [1519, 1522], "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)": [1524, 1534], "DefaultMessageStore::::remainTransientStoreBufferNumbs()": [1536, 1538], "DefaultMessageStore::::isTransientStorePoolDeficient()": [1540, 1543], "DefaultMessageStore::::getDispatcherList()": [1545, 1548], "DefaultMessageStore::::getConsumeQueue(java.lang.String,int)": [1550, 1557], "DefaultMessageStore::::unlockMappedFile(org.apache.rocketmq.store.MappedFile)": [1559, 1566], "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)": [1570, 1582], "DefaultMessageStore.CommitLogDispatcherBuildIndex::::dispatch(org.apache.rocketmq.store.DispatchRequest)": [1587, 1592], "DefaultMessageStore.CleanCommitLogService::::excuteDeleteFilesManualy()": [1609, 1612], "DefaultMessageStore.CleanCommitLogService::::run()": [1614, 1622], "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()": [1624, 1657], "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()": [1659, 1669], "DefaultMessageStore.CleanCommitLogService::::getServiceName()": [1671, 1673], "DefaultMessageStore.CleanCommitLogService::::isTimeToDelete()": [1675, 1683], "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()": [1685, 1741], "DefaultMessageStore.CleanCommitLogService::::getManualDeleteFileSeveralTimes()": [1743, 1745], "DefaultMessageStore.CleanCommitLogService::::setManualDeleteFileSeveralTimes(int)": [1747, 1749], "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()": [1750, 1773], "DefaultMessageStore.CleanConsumeQueueService::::run()": [1779, 1785], "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()": [1787, 1811], "DefaultMessageStore.CleanConsumeQueueService::::getServiceName()": [1813, 1815], "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)": [1822, 1856], "DefaultMessageStore.FlushConsumeQueueService::::run()": [1858, 1874], "DefaultMessageStore.FlushConsumeQueueService::::getServiceName()": [1876, 1879], "DefaultMessageStore.FlushConsumeQueueService::::getJointime()": [1881, 1884], "DefaultMessageStore.ReputMessageService::::getReputFromOffset()": [1891, 1893], "DefaultMessageStore.ReputMessageService::::setReputFromOffset(long)": [1895, 1897], "DefaultMessageStore.ReputMessageService::::shutdown()": [1899, 1914], "DefaultMessageStore.ReputMessageService::::behind()": [1916, 1918], "DefaultMessageStore.ReputMessageService::::isCommitLogAvailable()": [1920, 1922], "DefaultMessageStore.ReputMessageService::::doReput()": [1924, 1997], "DefaultMessageStore.ReputMessageService::::run()": [1999, 2013], "DefaultMessageStore.ReputMessageService::::getServiceName()": [2015, 2018]}, "test_method_lines_dic": {"DefaultMessageStoreTest::::init()": [62, 71], "DefaultMessageStoreTest::::test_repeat_restart()": [73, 95], "DefaultMessageStoreTest::::destroy()": [97, 105], "DefaultMessageStoreTest::::buildMessageStore()": [107, 116], "DefaultMessageStoreTest::::testWriteAndRead()": [118, 141], "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()": [143, 157], "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()": [159, 171], "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()": [173, 184], "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()": [186, 203], "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()": [205, 228], "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()": [230, 254], "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()": [256, 270], "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()": [272, 285], "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()": [287, 301], "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()": [303, 318], "DefaultMessageStoreTest::::testGetStoreTime_ParamIsNull()": [320, 325], "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()": [327, 343], "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()": [345, 360], "DefaultMessageStoreTest::::getDefaultMessageStore()": [362, 364], "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int)": [366, 368], "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)": [370, 390], "DefaultMessageStoreTest::::buildMessageBodyByOffset(java.lang.String,long)": [400, 402], "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)": [414, 427], "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)": [429, 456], "DefaultMessageStoreTest::::buildMessage()": [458, 460], "DefaultMessageStoreTest::::buildIPv6HostMessage()": [462, 464], "DefaultMessageStoreTest::::testPullSize()": [481, 508], "DefaultMessageStoreTest::::testRecover()": [510, 606], "DefaultMessageStoreTest::::damageCommitlog(long)": [608, 626], "DefaultMessageStoreTest.MyMessageArrivingListener::::arriving(java.lang.String,int,long,long,long,byte[],java.util.Map<java.lang.String, java.lang.String>)": [629, 632]}, "reverse_method_lines_dic": {"168": "DefaultMessageStore::::truncateDirtyLogicFiles(long)", "169": "DefaultMessageStore::::truncateDirtyLogicFiles(long)", "170": "DefaultMessageStore::::truncateDirtyLogicFiles(long)", "171": "DefaultMessageStore::::truncateDirtyLogicFiles(long)", "172": "DefaultMessageStore::::truncateDirtyLogicFiles(long)", "173": "DefaultMessageStore::::truncateDirtyLogicFiles(long)", "174": "DefaultMessageStore::::truncateDirtyLogicFiles(long)", "175": "DefaultMessageStore::::truncateDirtyLogicFiles(long)", "176": "DefaultMessageStore::::truncateDirtyLogicFiles(long)", "181": "DefaultMessageStore::::load()", "182": "DefaultMessageStore::::load()", "183": "DefaultMessageStore::::load()", "184": "DefaultMessageStore::::load()", "185": "DefaultMessageStore::::load()", "186": "DefaultMessageStore::::load()", "187": "DefaultMessageStore::::load()", "188": "DefaultMessageStore::::load()", "189": "DefaultMessageStore::::load()", "190": "DefaultMessageStore::::load()", "191": "DefaultMessageStore::::load()", "192": "DefaultMessageStore::::load()", "193": "DefaultMessageStore::::load()", "194": "DefaultMessageStore::::load()", "195": "DefaultMessageStore::::load()", "196": "DefaultMessageStore::::load()", "197": "DefaultMessageStore::::load()", "198": "DefaultMessageStore::::load()", "199": "DefaultMessageStore::::load()", "200": "DefaultMessageStore::::load()", "201": "DefaultMessageStore::::load()", "202": "DefaultMessageStore::::load()", "203": "DefaultMessageStore::::load()", "204": "DefaultMessageStore::::load()", "205": "DefaultMessageStore::::load()", "206": "DefaultMessageStore::::load()", "207": "DefaultMessageStore::::load()", "208": "DefaultMessageStore::::load()", "209": "DefaultMessageStore::::load()", "210": "DefaultMessageStore::::load()", "211": "DefaultMessageStore::::load()", "212": "DefaultMessageStore::::load()", "213": "DefaultMessageStore::::load()", "214": "DefaultMessageStore::::load()", "215": "DefaultMessageStore::::load()", "216": "DefaultMessageStore::::load()", "217": "DefaultMessageStore::::load()", "218": "DefaultMessageStore::::load()", "219": "DefaultMessageStore::::load()", "224": "DefaultMessageStore::::start()", "225": "DefaultMessageStore::::start()", "226": "DefaultMessageStore::::start()", "227": "DefaultMessageStore::::start()", "228": "DefaultMessageStore::::start()", "229": "DefaultMessageStore::::start()", "230": "DefaultMessageStore::::start()", "231": "DefaultMessageStore::::start()", "232": "DefaultMessageStore::::start()", "233": "DefaultMessageStore::::start()", "234": "DefaultMessageStore::::start()", "235": "DefaultMessageStore::::start()", "236": "DefaultMessageStore::::start()", "237": "DefaultMessageStore::::start()", "238": "DefaultMessageStore::::start()", "239": "DefaultMessageStore::::start()", "240": "DefaultMessageStore::::start()", "241": "DefaultMessageStore::::start()", "242": "DefaultMessageStore::::start()", "243": "DefaultMessageStore::::start()", "244": "DefaultMessageStore::::start()", "245": "DefaultMessageStore::::start()", "246": "DefaultMessageStore::::start()", "247": "DefaultMessageStore::::start()", "248": "DefaultMessageStore::::start()", "249": "DefaultMessageStore::::start()", "250": "DefaultMessageStore::::start()", "251": "DefaultMessageStore::::start()", "252": "DefaultMessageStore::::start()", "253": "DefaultMessageStore::::start()", "254": "DefaultMessageStore::::start()", "255": "DefaultMessageStore::::start()", "256": "DefaultMessageStore::::start()", "257": "DefaultMessageStore::::start()", "258": "DefaultMessageStore::::start()", "259": "DefaultMessageStore::::start()", "260": "DefaultMessageStore::::start()", "261": "DefaultMessageStore::::start()", "262": "DefaultMessageStore::::start()", "263": "DefaultMessageStore::::start()", "264": "DefaultMessageStore::::start()", "265": "DefaultMessageStore::::start()", "266": "DefaultMessageStore::::start()", "267": "DefaultMessageStore::::start()", "268": "DefaultMessageStore::::start()", "269": "DefaultMessageStore::::start()", "270": "DefaultMessageStore::::start()", "271": "DefaultMessageStore::::start()", "272": "DefaultMessageStore::::start()", "273": "DefaultMessageStore::::start()", "274": "DefaultMessageStore::::start()", "275": "DefaultMessageStore::::start()", "276": "DefaultMessageStore::::start()", "277": "DefaultMessageStore::::start()", "278": "DefaultMessageStore::::start()", "279": "DefaultMessageStore::::start()", "280": "DefaultMessageStore::::start()", "281": "DefaultMessageStore::::start()", "282": "DefaultMessageStore::::start()", "283": "DefaultMessageStore::::start()", "284": "DefaultMessageStore::::start()", "285": "DefaultMessageStore::::start()", "286": "DefaultMessageStore::::start()", "287": "DefaultMessageStore::::start()", "288": "DefaultMessageStore::::start()", "289": "DefaultMessageStore::::start()", "290": "DefaultMessageStore::::start()", "291": "DefaultMessageStore::::start()", "292": "DefaultMessageStore::::start()", "293": "DefaultMessageStore::::start()", "294": "DefaultMessageStore::::start()", "296": "DefaultMessageStore::::shutdown()", "297": "DefaultMessageStore::::shutdown()", "298": "DefaultMessageStore::::shutdown()", "299": "DefaultMessageStore::::shutdown()", "300": "DefaultMessageStore::::shutdown()", "301": "DefaultMessageStore::::shutdown()", "302": "DefaultMessageStore::::shutdown()", "303": "DefaultMessageStore::::shutdown()", "304": "DefaultMessageStore::::shutdown()", "305": "DefaultMessageStore::::shutdown()", "306": "DefaultMessageStore::::shutdown()", "307": "DefaultMessageStore::::shutdown()", "308": "DefaultMessageStore::::shutdown()", "309": "DefaultMessageStore::::shutdown()", "310": "DefaultMessageStore::::shutdown()", "311": "DefaultMessageStore::::shutdown()", "312": "DefaultMessageStore::::shutdown()", "313": "DefaultMessageStore::::shutdown()", "314": "DefaultMessageStore::::shutdown()", "315": "DefaultMessageStore::::shutdown()", "316": "DefaultMessageStore::::shutdown()", "317": "DefaultMessageStore::::shutdown()", "318": "DefaultMessageStore::::shutdown()", "319": "DefaultMessageStore::::shutdown()", "320": "DefaultMessageStore::::shutdown()", "321": "DefaultMessageStore::::shutdown()", "322": "DefaultMessageStore::::shutdown()", "323": "DefaultMessageStore::::shutdown()", "324": "DefaultMessageStore::::shutdown()", "325": "DefaultMessageStore::::shutdown()", "326": "DefaultMessageStore::::shutdown()", "327": "DefaultMessageStore::::shutdown()", "328": "DefaultMessageStore::::shutdown()", "329": "DefaultMessageStore::::shutdown()", "330": "DefaultMessageStore::::shutdown()", "331": "DefaultMessageStore::::shutdown()", "332": "DefaultMessageStore::::shutdown()", "333": "DefaultMessageStore::::shutdown()", "334": "DefaultMessageStore::::shutdown()", "335": "DefaultMessageStore::::shutdown()", "336": "DefaultMessageStore::::shutdown()", "337": "DefaultMessageStore::::shutdown()", "338": "DefaultMessageStore::::shutdown()", "339": "DefaultMessageStore::::shutdown()", "340": "DefaultMessageStore::::shutdown()", "341": "DefaultMessageStore::::shutdown()", "342": "DefaultMessageStore::::shutdown()", "344": "DefaultMessageStore::::destroy()", "345": "DefaultMessageStore::::destroy()", "346": "DefaultMessageStore::::destroy()", "347": "DefaultMessageStore::::destroy()", "348": "DefaultMessageStore::::destroy()", "349": "DefaultMessageStore::::destroy()", "350": "DefaultMessageStore::::destroy()", "352": "DefaultMessageStore::::destroyLogics()", "353": "DefaultMessageStore::::destroyLogics()", "354": "DefaultMessageStore::::destroyLogics()", "355": "DefaultMessageStore::::destroyLogics()", "356": "DefaultMessageStore::::destroyLogics()", "357": "DefaultMessageStore::::destroyLogics()", "358": "DefaultMessageStore::::destroyLogics()", "360": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "361": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "362": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "363": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "364": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "365": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "366": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "367": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "368": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "369": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "370": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "371": "DefaultMessageStore::::checkMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "387": "DefaultMessageStore::::checkStoreStatus()", "388": "DefaultMessageStore::::checkStoreStatus()", "389": "DefaultMessageStore::::checkStoreStatus()", "390": "DefaultMessageStore::::checkStoreStatus()", "391": "DefaultMessageStore::::checkStoreStatus()", "392": "DefaultMessageStore::::checkStoreStatus()", "393": "DefaultMessageStore::::checkStoreStatus()", "394": "DefaultMessageStore::::checkStoreStatus()", "395": "DefaultMessageStore::::checkStoreStatus()", "396": "DefaultMessageStore::::checkStoreStatus()", "397": "DefaultMessageStore::::checkStoreStatus()", "398": "DefaultMessageStore::::checkStoreStatus()", "399": "DefaultMessageStore::::checkStoreStatus()", "400": "DefaultMessageStore::::checkStoreStatus()", "401": "DefaultMessageStore::::checkStoreStatus()", "402": "DefaultMessageStore::::checkStoreStatus()", "403": "DefaultMessageStore::::checkStoreStatus()", "404": "DefaultMessageStore::::checkStoreStatus()", "405": "DefaultMessageStore::::checkStoreStatus()", "406": "DefaultMessageStore::::checkStoreStatus()", "407": "DefaultMessageStore::::checkStoreStatus()", "408": "DefaultMessageStore::::checkStoreStatus()", "409": "DefaultMessageStore::::checkStoreStatus()", "410": "DefaultMessageStore::::checkStoreStatus()", "411": "DefaultMessageStore::::checkStoreStatus()", "412": "DefaultMessageStore::::checkStoreStatus()", "413": "DefaultMessageStore::::checkStoreStatus()", "414": "DefaultMessageStore::::checkStoreStatus()", "415": "DefaultMessageStore::::checkStoreStatus()", "416": "DefaultMessageStore::::checkStoreStatus()", "418": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "419": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "420": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "421": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "422": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "423": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "424": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "425": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "426": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "427": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "428": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "429": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "430": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "431": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "432": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "433": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "434": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "435": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "436": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "437": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "438": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "439": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "440": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "441": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "442": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "443": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "444": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "445": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "446": "DefaultMessageStore::::asyncPutMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "478": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "479": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "480": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "481": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "482": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "483": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "484": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "485": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "486": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "487": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "488": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "489": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "490": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "491": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "492": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "493": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "494": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "495": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "496": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "497": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "498": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "499": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "500": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "501": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "502": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "503": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "504": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "505": "DefaultMessageStore::::putMessage(org.apache.rocketmq.store.MessageExtBrokerInner)", "535": "DefaultMessageStore::::isOSPageCacheBusy()", "536": "DefaultMessageStore::::isOSPageCacheBusy()", "537": "DefaultMessageStore::::isOSPageCacheBusy()", "538": "DefaultMessageStore::::isOSPageCacheBusy()", "539": "DefaultMessageStore::::isOSPageCacheBusy()", "540": "DefaultMessageStore::::isOSPageCacheBusy()", "541": "DefaultMessageStore::::isOSPageCacheBusy()", "542": "DefaultMessageStore::::isOSPageCacheBusy()", "544": "DefaultMessageStore::::lockTimeMills()", "545": "DefaultMessageStore::::lockTimeMills()", "546": "DefaultMessageStore::::lockTimeMills()", "547": "DefaultMessageStore::::lockTimeMills()", "549": "DefaultMessageStore::::getSystemClock()", "550": "DefaultMessageStore::::getSystemClock()", "551": "DefaultMessageStore::::getSystemClock()", "553": "DefaultMessageStore::::getCommitLog()", "554": "DefaultMessageStore::::getCommitLog()", "555": "DefaultMessageStore::::getCommitLog()", "557": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "558": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "559": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "560": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "561": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "562": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "563": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "564": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "565": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "566": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "567": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "568": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "569": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "570": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "571": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "572": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "573": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "574": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "575": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "576": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "577": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "578": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "579": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "580": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "581": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "582": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "583": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "584": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "585": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "586": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "587": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "588": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "589": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "590": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "591": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "592": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "593": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "594": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "595": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "596": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "597": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "598": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "599": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "600": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "601": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "602": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "603": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "604": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "605": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "606": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "607": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "608": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "609": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "610": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "611": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "612": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "613": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "614": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "615": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "616": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "617": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "618": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "619": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "620": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "621": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "622": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "623": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "624": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "625": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "626": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "627": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "628": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "629": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "630": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "631": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "632": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "633": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "634": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "635": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "636": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "637": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "638": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "639": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "640": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "641": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "642": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "643": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "644": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "645": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "646": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "647": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "648": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "649": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "650": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "651": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "652": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "653": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "654": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "655": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "656": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "657": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "658": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "659": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "660": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "661": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "662": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "663": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "664": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "665": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "666": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "667": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "668": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "669": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "670": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "671": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "672": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "673": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "674": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "675": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "676": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "677": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "678": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "679": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "680": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "681": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "682": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "683": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "684": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "685": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "686": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "687": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "688": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "689": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "690": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "691": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "692": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "693": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "694": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "695": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "696": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "697": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "698": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "699": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "700": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "701": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "702": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "703": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "704": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "705": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "706": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "707": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "708": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "709": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "710": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "711": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "712": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "713": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "714": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "715": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "716": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "717": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "718": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "719": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "720": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "721": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "722": "DefaultMessageStore::::getMessage(java.lang.String,java.lang.String,int,long,int,org.apache.rocketmq.store.MessageFilter)", "724": "DefaultMessageStore::::getMaxOffsetInQueue(java.lang.String,int)", "725": "DefaultMessageStore::::getMaxOffsetInQueue(java.lang.String,int)", "726": "DefaultMessageStore::::getMaxOffsetInQueue(java.lang.String,int)", "727": "DefaultMessageStore::::getMaxOffsetInQueue(java.lang.String,int)", "728": "DefaultMessageStore::::getMaxOffsetInQueue(java.lang.String,int)", "729": "DefaultMessageStore::::getMaxOffsetInQueue(java.lang.String,int)", "730": "DefaultMessageStore::::getMaxOffsetInQueue(java.lang.String,int)", "731": "DefaultMessageStore::::getMaxOffsetInQueue(java.lang.String,int)", "732": "DefaultMessageStore::::getMaxOffsetInQueue(java.lang.String,int)", "734": "DefaultMessageStore::::getMinOffsetInQueue(java.lang.String,int)", "735": "DefaultMessageStore::::getMinOffsetInQueue(java.lang.String,int)", "736": "DefaultMessageStore::::getMinOffsetInQueue(java.lang.String,int)", "737": "DefaultMessageStore::::getMinOffsetInQueue(java.lang.String,int)", "738": "DefaultMessageStore::::getMinOffsetInQueue(java.lang.String,int)", "739": "DefaultMessageStore::::getMinOffsetInQueue(java.lang.String,int)", "740": "DefaultMessageStore::::getMinOffsetInQueue(java.lang.String,int)", "741": "DefaultMessageStore::::getMinOffsetInQueue(java.lang.String,int)", "743": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "744": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "745": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "746": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "747": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "748": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "749": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "750": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "751": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "752": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "753": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "754": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "755": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "756": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "757": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "758": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "759": "DefaultMessageStore::::getCommitLogOffsetInQueue(java.lang.String,int,long)", "761": "DefaultMessageStore::::getOffsetInQueueByTime(java.lang.String,int,long)", "762": "DefaultMessageStore::::getOffsetInQueueByTime(java.lang.String,int,long)", "763": "DefaultMessageStore::::getOffsetInQueueByTime(java.lang.String,int,long)", "764": "DefaultMessageStore::::getOffsetInQueueByTime(java.lang.String,int,long)", "765": "DefaultMessageStore::::getOffsetInQueueByTime(java.lang.String,int,long)", "766": "DefaultMessageStore::::getOffsetInQueueByTime(java.lang.String,int,long)", "767": "DefaultMessageStore::::getOffsetInQueueByTime(java.lang.String,int,long)", "768": "DefaultMessageStore::::getOffsetInQueueByTime(java.lang.String,int,long)", "770": "DefaultMessageStore::::lookMessageByOffset(long)", "771": "DefaultMessageStore::::lookMessageByOffset(long)", "772": "DefaultMessageStore::::lookMessageByOffset(long)", "773": "DefaultMessageStore::::lookMessageByOffset(long)", "774": "DefaultMessageStore::::lookMessageByOffset(long)", "775": "DefaultMessageStore::::lookMessageByOffset(long)", "776": "DefaultMessageStore::::lookMessageByOffset(long)", "777": "DefaultMessageStore::::lookMessageByOffset(long)", "778": "DefaultMessageStore::::lookMessageByOffset(long)", "779": "DefaultMessageStore::::lookMessageByOffset(long)", "780": "DefaultMessageStore::::lookMessageByOffset(long)", "781": "DefaultMessageStore::::lookMessageByOffset(long)", "782": "DefaultMessageStore::::lookMessageByOffset(long)", "783": "DefaultMessageStore::::lookMessageByOffset(long)", "785": "DefaultMessageStore::::selectOneMessageByOffset(long)", "786": "DefaultMessageStore::::selectOneMessageByOffset(long)", "787": "DefaultMessageStore::::selectOneMessageByOffset(long)", "788": "DefaultMessageStore::::selectOneMessageByOffset(long)", "789": "DefaultMessageStore::::selectOneMessageByOffset(long)", "790": "DefaultMessageStore::::selectOneMessageByOffset(long)", "791": "DefaultMessageStore::::selectOneMessageByOffset(long)", "792": "DefaultMessageStore::::selectOneMessageByOffset(long)", "793": "DefaultMessageStore::::selectOneMessageByOffset(long)", "794": "DefaultMessageStore::::selectOneMessageByOffset(long)", "795": "DefaultMessageStore::::selectOneMessageByOffset(long)", "796": "DefaultMessageStore::::selectOneMessageByOffset(long)", "797": "DefaultMessageStore::::selectOneMessageByOffset(long)", "798": "DefaultMessageStore::::selectOneMessageByOffset(long)", "799": "DefaultMessageStore::::selectOneMessageByOffset(long)", "801": "DefaultMessageStore::::selectOneMessageByOffset(long,int)", "802": "DefaultMessageStore::::selectOneMessageByOffset(long,int)", "803": "DefaultMessageStore::::selectOneMessageByOffset(long,int)", "804": "DefaultMessageStore::::selectOneMessageByOffset(long,int)", "806": "DefaultMessageStore::::getRunningDataInfo()", "807": "DefaultMessageStore::::getRunningDataInfo()", "808": "DefaultMessageStore::::getRunningDataInfo()", "810": "DefaultMessageStore::::getStorePathPhysic()", "811": "DefaultMessageStore::::getStorePathPhysic()", "812": "DefaultMessageStore::::getStorePathPhysic()", "813": "DefaultMessageStore::::getStorePathPhysic()", "814": "DefaultMessageStore::::getStorePathPhysic()", "815": "DefaultMessageStore::::getStorePathPhysic()", "816": "DefaultMessageStore::::getStorePathPhysic()", "817": "DefaultMessageStore::::getStorePathPhysic()", "818": "DefaultMessageStore::::getStorePathPhysic()", "820": "DefaultMessageStore::::getRuntimeInfo()", "821": "DefaultMessageStore::::getRuntimeInfo()", "822": "DefaultMessageStore::::getRuntimeInfo()", "823": "DefaultMessageStore::::getRuntimeInfo()", "824": "DefaultMessageStore::::getRuntimeInfo()", "825": "DefaultMessageStore::::getRuntimeInfo()", "826": "DefaultMessageStore::::getRuntimeInfo()", "827": "DefaultMessageStore::::getRuntimeInfo()", "828": "DefaultMessageStore::::getRuntimeInfo()", "829": "DefaultMessageStore::::getRuntimeInfo()", "830": "DefaultMessageStore::::getRuntimeInfo()", "831": "DefaultMessageStore::::getRuntimeInfo()", "832": "DefaultMessageStore::::getRuntimeInfo()", "833": "DefaultMessageStore::::getRuntimeInfo()", "834": "DefaultMessageStore::::getRuntimeInfo()", "835": "DefaultMessageStore::::getRuntimeInfo()", "836": "DefaultMessageStore::::getRuntimeInfo()", "837": "DefaultMessageStore::::getRuntimeInfo()", "838": "DefaultMessageStore::::getRuntimeInfo()", "839": "DefaultMessageStore::::getRuntimeInfo()", "840": "DefaultMessageStore::::getRuntimeInfo()", "841": "DefaultMessageStore::::getRuntimeInfo()", "842": "DefaultMessageStore::::getRuntimeInfo()", "843": "DefaultMessageStore::::getRuntimeInfo()", "844": "DefaultMessageStore::::getRuntimeInfo()", "845": "DefaultMessageStore::::getRuntimeInfo()", "846": "DefaultMessageStore::::getRuntimeInfo()", "847": "DefaultMessageStore::::getRuntimeInfo()", "849": "DefaultMessageStore::::getMaxPhyOffset()", "850": "DefaultMessageStore::::getMaxPhyOffset()", "851": "DefaultMessageStore::::getMaxPhyOffset()", "852": "DefaultMessageStore::::getMaxPhyOffset()", "854": "DefaultMessageStore::::getMinPhyOffset()", "855": "DefaultMessageStore::::getMinPhyOffset()", "856": "DefaultMessageStore::::getMinPhyOffset()", "857": "DefaultMessageStore::::getMinPhyOffset()", "859": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "860": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "861": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "862": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "863": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "864": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "865": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "866": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "867": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "868": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "869": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "870": "DefaultMessageStore::::getEarliestMessageTime(java.lang.String,int)", "872": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "873": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "874": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "875": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "876": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "877": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "878": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "879": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "880": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "881": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "882": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "883": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "884": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "885": "DefaultMessageStore::::getStoreTime(org.apache.rocketmq.store.SelectMappedBufferResult)", "887": "DefaultMessageStore::::getEarliestMessageTime()", "888": "DefaultMessageStore::::getEarliestMessageTime()", "889": "DefaultMessageStore::::getEarliestMessageTime()", "890": "DefaultMessageStore::::getEarliestMessageTime()", "891": "DefaultMessageStore::::getEarliestMessageTime()", "892": "DefaultMessageStore::::getEarliestMessageTime()", "894": "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)", "895": "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)", "896": "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)", "897": "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)", "898": "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)", "899": "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)", "900": "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)", "901": "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)", "902": "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)", "903": "DefaultMessageStore::::getMessageStoreTimeStamp(java.lang.String,int,long)", "905": "DefaultMessageStore::::getMessageTotalInQueue(java.lang.String,int)", "906": "DefaultMessageStore::::getMessageTotalInQueue(java.lang.String,int)", "907": "DefaultMessageStore::::getMessageTotalInQueue(java.lang.String,int)", "908": "DefaultMessageStore::::getMessageTotalInQueue(java.lang.String,int)", "909": "DefaultMessageStore::::getMessageTotalInQueue(java.lang.String,int)", "910": "DefaultMessageStore::::getMessageTotalInQueue(java.lang.String,int)", "911": "DefaultMessageStore::::getMessageTotalInQueue(java.lang.String,int)", "912": "DefaultMessageStore::::getMessageTotalInQueue(java.lang.String,int)", "913": "DefaultMessageStore::::getMessageTotalInQueue(java.lang.String,int)", "915": "DefaultMessageStore::::getCommitLogData(long)", "916": "DefaultMessageStore::::getCommitLogData(long)", "917": "DefaultMessageStore::::getCommitLogData(long)", "918": "DefaultMessageStore::::getCommitLogData(long)", "919": "DefaultMessageStore::::getCommitLogData(long)", "920": "DefaultMessageStore::::getCommitLogData(long)", "921": "DefaultMessageStore::::getCommitLogData(long)", "922": "DefaultMessageStore::::getCommitLogData(long)", "923": "DefaultMessageStore::::getCommitLogData(long)", "925": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "926": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "927": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "928": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "929": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "930": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "931": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "932": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "933": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "934": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "935": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "936": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "937": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "938": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "939": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "940": "DefaultMessageStore::::appendToCommitLog(long,byte[])", "942": "DefaultMessageStore::::executeDeleteFilesManually()", "943": "DefaultMessageStore::::executeDeleteFilesManually()", "944": "DefaultMessageStore::::executeDeleteFilesManually()", "945": "DefaultMessageStore::::executeDeleteFilesManually()", "947": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "948": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "949": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "950": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "951": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "952": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "953": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "954": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "955": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "956": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "957": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "958": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "959": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "960": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "961": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "962": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "963": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "964": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "965": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "966": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "967": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "968": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "969": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "970": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "971": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "972": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "973": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "974": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "975": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "976": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "977": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "978": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "979": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "980": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "981": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "982": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "983": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "984": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "985": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "986": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "987": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "988": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "989": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "990": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "991": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "992": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "993": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "994": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "995": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "996": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "997": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "998": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "999": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1000": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1001": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1002": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1003": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1004": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1005": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1006": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1007": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1008": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1009": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1010": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1011": "DefaultMessageStore::::queryMessage(java.lang.String,java.lang.String,int,long,long)", "1013": "DefaultMessageStore::::updateHaMasterAddress(java.lang.String)", "1014": "DefaultMessageStore::::updateHaMasterAddress(java.lang.String)", "1015": "DefaultMessageStore::::updateHaMasterAddress(java.lang.String)", "1016": "DefaultMessageStore::::updateHaMasterAddress(java.lang.String)", "1018": "DefaultMessageStore::::slaveFallBehindMuch()", "1019": "DefaultMessageStore::::slaveFallBehindMuch()", "1020": "DefaultMessageStore::::slaveFallBehindMuch()", "1021": "DefaultMessageStore::::slaveFallBehindMuch()", "1023": "DefaultMessageStore::::now()", "1024": "DefaultMessageStore::::now()", "1025": "DefaultMessageStore::::now()", "1026": "DefaultMessageStore::::now()", "1028": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1029": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1030": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1031": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1032": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1033": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1034": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1035": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1036": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1037": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1038": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1039": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1040": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1041": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1042": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1043": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1044": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1045": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1046": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1047": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1048": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1049": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1050": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1051": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1052": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1053": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1054": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1055": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1056": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1057": "DefaultMessageStore::::cleanUnusedTopic(java.util.Set<java.lang.String>)", "1059": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1060": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1061": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1062": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1063": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1064": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1065": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1066": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1067": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1068": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1069": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1070": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1071": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1072": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1073": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1074": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1075": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1076": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1077": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1078": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1079": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1080": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1081": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1082": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1083": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1084": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1085": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1086": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1087": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1088": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1089": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1090": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1091": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1092": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1093": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1094": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1095": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1096": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1097": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1098": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1099": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1100": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1101": "DefaultMessageStore::::cleanExpiredConsumerQueue()", "1103": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1104": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1105": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1106": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1107": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1108": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1109": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1110": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1111": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1112": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1113": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1114": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1115": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1116": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1117": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1118": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1119": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1120": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1121": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1122": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1123": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1124": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1125": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1126": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1127": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1128": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1129": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1130": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1131": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1132": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1133": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1134": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1135": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1136": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1137": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1138": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1139": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1140": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1141": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1142": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1143": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1144": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1145": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1146": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1147": "DefaultMessageStore::::getMessageIds(java.lang.String,int,long,long,java.net.SocketAddress)", "1149": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1150": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1151": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1152": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1153": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1154": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1155": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1156": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1157": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1158": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1159": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1160": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1161": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1162": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1163": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1164": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1165": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1166": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1167": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1168": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1169": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1170": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1171": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1172": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1173": "DefaultMessageStore::::checkInDiskByConsumeOffset(java.lang.String,int,long)", "1175": "DefaultMessageStore::::dispatchBehindBytes()", "1176": "DefaultMessageStore::::dispatchBehindBytes()", "1177": "DefaultMessageStore::::dispatchBehindBytes()", "1178": "DefaultMessageStore::::dispatchBehindBytes()", "1180": "DefaultMessageStore::::flush()", "1181": "DefaultMessageStore::::flush()", "1182": "DefaultMessageStore::::flush()", "1183": "DefaultMessageStore::::flush()", "1185": "DefaultMessageStore::::resetWriteOffset(long)", "1186": "DefaultMessageStore::::resetWriteOffset(long)", "1187": "DefaultMessageStore::::resetWriteOffset(long)", "1188": "DefaultMessageStore::::resetWriteOffset(long)", "1190": "DefaultMessageStore::::getConfirmOffset()", "1191": "DefaultMessageStore::::getConfirmOffset()", "1192": "DefaultMessageStore::::getConfirmOffset()", "1193": "DefaultMessageStore::::getConfirmOffset()", "1195": "DefaultMessageStore::::setConfirmOffset(long)", "1196": "DefaultMessageStore::::setConfirmOffset(long)", "1197": "DefaultMessageStore::::setConfirmOffset(long)", "1198": "DefaultMessageStore::::setConfirmOffset(long)", "1200": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1201": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1202": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1203": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1204": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1205": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1206": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1207": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1208": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1209": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1210": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1211": "DefaultMessageStore::::lookMessageByOffset(long,int)", "1213": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1214": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1215": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1216": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1217": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1218": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1219": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1220": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1221": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1222": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1223": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1224": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1225": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1226": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1227": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1228": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1229": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1230": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1231": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1232": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1233": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1234": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1235": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1236": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1237": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1238": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1239": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1240": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1241": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1242": "DefaultMessageStore::::findConsumeQueue(java.lang.String,int)", "1244": "DefaultMessageStore::::nextOffsetCorrection(long,long)", "1245": "DefaultMessageStore::::nextOffsetCorrection(long,long)", "1246": "DefaultMessageStore::::nextOffsetCorrection(long,long)", "1247": "DefaultMessageStore::::nextOffsetCorrection(long,long)", "1248": "DefaultMessageStore::::nextOffsetCorrection(long,long)", "1249": "DefaultMessageStore::::nextOffsetCorrection(long,long)", "1250": "DefaultMessageStore::::nextOffsetCorrection(long,long)", "1252": "DefaultMessageStore::::checkInDiskByCommitOffset(long,long)", "1253": "DefaultMessageStore::::checkInDiskByCommitOffset(long,long)", "1254": "DefaultMessageStore::::checkInDiskByCommitOffset(long,long)", "1255": "DefaultMessageStore::::checkInDiskByCommitOffset(long,long)", "1257": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1258": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1259": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1260": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1261": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1262": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1263": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1264": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1265": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1266": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1267": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1268": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1269": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1270": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1271": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1272": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1273": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1274": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1275": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1276": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1277": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1278": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1279": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1280": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1281": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1282": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1283": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1284": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1285": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1286": "DefaultMessageStore::::isTheBatchFull(int,int,int,int,boolean)", "1288": "DefaultMessageStore::::deleteFile(java.lang.String)", "1289": "DefaultMessageStore::::deleteFile(java.lang.String)", "1290": "DefaultMessageStore::::deleteFile(java.lang.String)", "1291": "DefaultMessageStore::::deleteFile(java.lang.String)", "1292": "DefaultMessageStore::::deleteFile(java.lang.String)", "1297": "DefaultMessageStore::::createTempFile()", "1298": "DefaultMessageStore::::createTempFile()", "1299": "DefaultMessageStore::::createTempFile()", "1300": "DefaultMessageStore::::createTempFile()", "1301": "DefaultMessageStore::::createTempFile()", "1302": "DefaultMessageStore::::createTempFile()", "1303": "DefaultMessageStore::::createTempFile()", "1305": "DefaultMessageStore::::addScheduleTask()", "1306": "DefaultMessageStore::::addScheduleTask()", "1307": "DefaultMessageStore::::addScheduleTask()", "1308": "DefaultMessageStore::::addScheduleTask()", "1309": "DefaultMessageStore::::addScheduleTask()", "1310": "DefaultMessageStore::::addScheduleTask()", "1311": "DefaultMessageStore::::addScheduleTask()", "1312": "DefaultMessageStore::::addScheduleTask()", "1313": "DefaultMessageStore::::addScheduleTask()", "1314": "DefaultMessageStore::::addScheduleTask()", "1315": "DefaultMessageStore::::addScheduleTask()", "1316": "DefaultMessageStore::::addScheduleTask()", "1317": "DefaultMessageStore::::addScheduleTask()", "1318": "DefaultMessageStore::::addScheduleTask()", "1319": "DefaultMessageStore::::addScheduleTask()", "1320": "DefaultMessageStore::::addScheduleTask()", "1321": "DefaultMessageStore::::addScheduleTask()", "1322": "DefaultMessageStore::::addScheduleTask()", "1323": "DefaultMessageStore::::addScheduleTask()", "1324": "DefaultMessageStore::::addScheduleTask()", "1325": "DefaultMessageStore::::addScheduleTask()", "1326": "DefaultMessageStore::::addScheduleTask()", "1327": "DefaultMessageStore::::addScheduleTask()", "1328": "DefaultMessageStore::::addScheduleTask()", "1329": "DefaultMessageStore::::addScheduleTask()", "1330": "DefaultMessageStore::::addScheduleTask()", "1331": "DefaultMessageStore::::addScheduleTask()", "1332": "DefaultMessageStore::::addScheduleTask()", "1333": "DefaultMessageStore::::addScheduleTask()", "1334": "DefaultMessageStore::::addScheduleTask()", "1335": "DefaultMessageStore::::addScheduleTask()", "1336": "DefaultMessageStore::::addScheduleTask()", "1337": "DefaultMessageStore::::addScheduleTask()", "1338": "DefaultMessageStore::::addScheduleTask()", "1339": "DefaultMessageStore::::addScheduleTask()", "1340": "DefaultMessageStore::::addScheduleTask()", "1341": "DefaultMessageStore::::addScheduleTask()", "1342": "DefaultMessageStore::::addScheduleTask()", "1343": "DefaultMessageStore::::addScheduleTask()", "1344": "DefaultMessageStore::::addScheduleTask()", "1345": "DefaultMessageStore::::addScheduleTask()", "1346": "DefaultMessageStore::::addScheduleTask()", "1347": "DefaultMessageStore::::addScheduleTask()", "1348": "DefaultMessageStore::::addScheduleTask()", "1349": "DefaultMessageStore::::addScheduleTask()", "1350": "DefaultMessageStore::::addScheduleTask()", "1351": "DefaultMessageStore::::addScheduleTask()", "1352": "DefaultMessageStore::::addScheduleTask()", "1353": "DefaultMessageStore::::addScheduleTask()", "1355": "DefaultMessageStore::::cleanFilesPeriodically()", "1356": "DefaultMessageStore::::cleanFilesPeriodically()", "1357": "DefaultMessageStore::::cleanFilesPeriodically()", "1358": "DefaultMessageStore::::cleanFilesPeriodically()", "1360": "DefaultMessageStore::::checkSelf()", "1361": "DefaultMessageStore::::checkSelf()", "1362": "DefaultMessageStore::::checkSelf()", "1363": "DefaultMessageStore::::checkSelf()", "1364": "DefaultMessageStore::::checkSelf()", "1365": "DefaultMessageStore::::checkSelf()", "1366": "DefaultMessageStore::::checkSelf()", "1367": "DefaultMessageStore::::checkSelf()", "1368": "DefaultMessageStore::::checkSelf()", "1369": "DefaultMessageStore::::checkSelf()", "1370": "DefaultMessageStore::::checkSelf()", "1371": "DefaultMessageStore::::checkSelf()", "1372": "DefaultMessageStore::::checkSelf()", "1374": "DefaultMessageStore::::isTempFileExist()", "1375": "DefaultMessageStore::::isTempFileExist()", "1376": "DefaultMessageStore::::isTempFileExist()", "1377": "DefaultMessageStore::::isTempFileExist()", "1378": "DefaultMessageStore::::isTempFileExist()", "1380": "DefaultMessageStore::::loadConsumeQueue()", "1381": "DefaultMessageStore::::loadConsumeQueue()", "1382": "DefaultMessageStore::::loadConsumeQueue()", "1383": "DefaultMessageStore::::loadConsumeQueue()", "1384": "DefaultMessageStore::::loadConsumeQueue()", "1385": "DefaultMessageStore::::loadConsumeQueue()", "1386": "DefaultMessageStore::::loadConsumeQueue()", "1387": "DefaultMessageStore::::loadConsumeQueue()", "1388": "DefaultMessageStore::::loadConsumeQueue()", "1389": "DefaultMessageStore::::loadConsumeQueue()", "1390": "DefaultMessageStore::::loadConsumeQueue()", "1391": "DefaultMessageStore::::loadConsumeQueue()", "1392": "DefaultMessageStore::::loadConsumeQueue()", "1393": "DefaultMessageStore::::loadConsumeQueue()", "1394": "DefaultMessageStore::::loadConsumeQueue()", "1395": "DefaultMessageStore::::loadConsumeQueue()", "1396": "DefaultMessageStore::::loadConsumeQueue()", "1397": "DefaultMessageStore::::loadConsumeQueue()", "1398": "DefaultMessageStore::::loadConsumeQueue()", "1399": "DefaultMessageStore::::loadConsumeQueue()", "1400": "DefaultMessageStore::::loadConsumeQueue()", "1401": "DefaultMessageStore::::loadConsumeQueue()", "1402": "DefaultMessageStore::::loadConsumeQueue()", "1403": "DefaultMessageStore::::loadConsumeQueue()", "1404": "DefaultMessageStore::::loadConsumeQueue()", "1405": "DefaultMessageStore::::loadConsumeQueue()", "1406": "DefaultMessageStore::::loadConsumeQueue()", "1407": "DefaultMessageStore::::loadConsumeQueue()", "1408": "DefaultMessageStore::::loadConsumeQueue()", "1409": "DefaultMessageStore::::loadConsumeQueue()", "1410": "DefaultMessageStore::::loadConsumeQueue()", "1411": "DefaultMessageStore::::loadConsumeQueue()", "1412": "DefaultMessageStore::::loadConsumeQueue()", "1413": "DefaultMessageStore::::loadConsumeQueue()", "1414": "DefaultMessageStore::::loadConsumeQueue()", "1415": "DefaultMessageStore::::loadConsumeQueue()", "1417": "DefaultMessageStore::::recover(boolean)", "1418": "DefaultMessageStore::::recover(boolean)", "1419": "DefaultMessageStore::::recover(boolean)", "1420": "DefaultMessageStore::::recover(boolean)", "1421": "DefaultMessageStore::::recover(boolean)", "1422": "DefaultMessageStore::::recover(boolean)", "1423": "DefaultMessageStore::::recover(boolean)", "1424": "DefaultMessageStore::::recover(boolean)", "1425": "DefaultMessageStore::::recover(boolean)", "1426": "DefaultMessageStore::::recover(boolean)", "1427": "DefaultMessageStore::::recover(boolean)", "1429": "DefaultMessageStore::::getMessageStoreConfig()", "1430": "DefaultMessageStore::::getMessageStoreConfig()", "1431": "DefaultMessageStore::::getMessageStoreConfig()", "1433": "DefaultMessageStore::::getTransientStorePool()", "1434": "DefaultMessageStore::::getTransientStorePool()", "1435": "DefaultMessageStore::::getTransientStorePool()", "1437": "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)", "1438": "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)", "1439": "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)", "1440": "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)", "1441": "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)", "1442": "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)", "1443": "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)", "1444": "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)", "1445": "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)", "1446": "DefaultMessageStore::::putConsumeQueue(java.lang.String,int,org.apache.rocketmq.store.ConsumeQueue)", "1448": "DefaultMessageStore::::recoverConsumeQueue()", "1449": "DefaultMessageStore::::recoverConsumeQueue()", "1450": "DefaultMessageStore::::recoverConsumeQueue()", "1451": "DefaultMessageStore::::recoverConsumeQueue()", "1452": "DefaultMessageStore::::recoverConsumeQueue()", "1453": "DefaultMessageStore::::recoverConsumeQueue()", "1454": "DefaultMessageStore::::recoverConsumeQueue()", "1455": "DefaultMessageStore::::recoverConsumeQueue()", "1456": "DefaultMessageStore::::recoverConsumeQueue()", "1457": "DefaultMessageStore::::recoverConsumeQueue()", "1458": "DefaultMessageStore::::recoverConsumeQueue()", "1459": "DefaultMessageStore::::recoverConsumeQueue()", "1460": "DefaultMessageStore::::recoverConsumeQueue()", "1462": "DefaultMessageStore::::recoverTopicQueueTable()", "1463": "DefaultMessageStore::::recoverTopicQueueTable()", "1464": "DefaultMessageStore::::recoverTopicQueueTable()", "1465": "DefaultMessageStore::::recoverTopicQueueTable()", "1466": "DefaultMessageStore::::recoverTopicQueueTable()", "1467": "DefaultMessageStore::::recoverTopicQueueTable()", "1468": "DefaultMessageStore::::recoverTopicQueueTable()", "1469": "DefaultMessageStore::::recoverTopicQueueTable()", "1470": "DefaultMessageStore::::recoverTopicQueueTable()", "1471": "DefaultMessageStore::::recoverTopicQueueTable()", "1472": "DefaultMessageStore::::recoverTopicQueueTable()", "1473": "DefaultMessageStore::::recoverTopicQueueTable()", "1474": "DefaultMessageStore::::recoverTopicQueueTable()", "1476": "DefaultMessageStore::::getAllocateMappedFileService()", "1477": "DefaultMessageStore::::getAllocateMappedFileService()", "1478": "DefaultMessageStore::::getAllocateMappedFileService()", "1480": "DefaultMessageStore::::getStoreStatsService()", "1481": "DefaultMessageStore::::getStoreStatsService()", "1482": "DefaultMessageStore::::getStoreStatsService()", "1484": "DefaultMessageStore::::getAccessRights()", "1485": "DefaultMessageStore::::getAccessRights()", "1486": "DefaultMessageStore::::getAccessRights()", "1488": "DefaultMessageStore::::getConsumeQueueTable()", "1489": "DefaultMessageStore::::getConsumeQueueTable()", "1490": "DefaultMessageStore::::getConsumeQueueTable()", "1492": "DefaultMessageStore::::getStoreCheckpoint()", "1493": "DefaultMessageStore::::getStoreCheckpoint()", "1494": "DefaultMessageStore::::getStoreCheckpoint()", "1496": "DefaultMessageStore::::getHaService()", "1497": "DefaultMessageStore::::getHaService()", "1498": "DefaultMessageStore::::getHaService()", "1500": "DefaultMessageStore::::getScheduleMessageService()", "1501": "DefaultMessageStore::::getScheduleMessageService()", "1502": "DefaultMessageStore::::getScheduleMessageService()", "1504": "DefaultMessageStore::::getRunningFlags()", "1505": "DefaultMessageStore::::getRunningFlags()", "1506": "DefaultMessageStore::::getRunningFlags()", "1508": "DefaultMessageStore::::doDispatch(org.apache.rocketmq.store.DispatchRequest)", "1509": "DefaultMessageStore::::doDispatch(org.apache.rocketmq.store.DispatchRequest)", "1510": "DefaultMessageStore::::doDispatch(org.apache.rocketmq.store.DispatchRequest)", "1511": "DefaultMessageStore::::doDispatch(org.apache.rocketmq.store.DispatchRequest)", "1512": "DefaultMessageStore::::doDispatch(org.apache.rocketmq.store.DispatchRequest)", "1514": "DefaultMessageStore::::putMessagePositionInfo(org.apache.rocketmq.store.DispatchRequest)", "1515": "DefaultMessageStore::::putMessagePositionInfo(org.apache.rocketmq.store.DispatchRequest)", "1516": "DefaultMessageStore::::putMessagePositionInfo(org.apache.rocketmq.store.DispatchRequest)", "1517": "DefaultMessageStore::::putMessagePositionInfo(org.apache.rocketmq.store.DispatchRequest)", "1519": "DefaultMessageStore::::getBrokerStatsManager()", "1520": "DefaultMessageStore::::getBrokerStatsManager()", "1521": "DefaultMessageStore::::getBrokerStatsManager()", "1522": "DefaultMessageStore::::getBrokerStatsManager()", "1524": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1525": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1526": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1527": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1528": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1529": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1530": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1531": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1532": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1533": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1534": "DefaultMessageStore::::handleScheduleMessageService(org.apache.rocketmq.store.config.BrokerRole)", "1536": "DefaultMessageStore::::remainTransientStoreBufferNumbs()", "1537": "DefaultMessageStore::::remainTransientStoreBufferNumbs()", "1538": "DefaultMessageStore::::remainTransientStoreBufferNumbs()", "1540": "DefaultMessageStore::::isTransientStorePoolDeficient()", "1541": "DefaultMessageStore::::isTransientStorePoolDeficient()", "1542": "DefaultMessageStore::::isTransientStorePoolDeficient()", "1543": "DefaultMessageStore::::isTransientStorePoolDeficient()", "1545": "DefaultMessageStore::::getDispatcherList()", "1546": "DefaultMessageStore::::getDispatcherList()", "1547": "DefaultMessageStore::::getDispatcherList()", "1548": "DefaultMessageStore::::getDispatcherList()", "1550": "DefaultMessageStore::::getConsumeQueue(java.lang.String,int)", "1551": "DefaultMessageStore::::getConsumeQueue(java.lang.String,int)", "1552": "DefaultMessageStore::::getConsumeQueue(java.lang.String,int)", "1553": "DefaultMessageStore::::getConsumeQueue(java.lang.String,int)", "1554": "DefaultMessageStore::::getConsumeQueue(java.lang.String,int)", "1555": "DefaultMessageStore::::getConsumeQueue(java.lang.String,int)", "1556": "DefaultMessageStore::::getConsumeQueue(java.lang.String,int)", "1557": "DefaultMessageStore::::getConsumeQueue(java.lang.String,int)", "1559": "DefaultMessageStore::::unlockMappedFile(org.apache.rocketmq.store.MappedFile)", "1560": "DefaultMessageStore::::unlockMappedFile(org.apache.rocketmq.store.MappedFile)", "1561": "DefaultMessageStore::::unlockMappedFile(org.apache.rocketmq.store.MappedFile)", "1562": "DefaultMessageStore::::unlockMappedFile(org.apache.rocketmq.store.MappedFile)", "1563": "DefaultMessageStore::::unlockMappedFile(org.apache.rocketmq.store.MappedFile)", "1564": "DefaultMessageStore::::unlockMappedFile(org.apache.rocketmq.store.MappedFile)", "1565": "DefaultMessageStore::::unlockMappedFile(org.apache.rocketmq.store.MappedFile)", "1566": "DefaultMessageStore::::unlockMappedFile(org.apache.rocketmq.store.MappedFile)", "1570": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1571": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1572": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1573": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1574": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1575": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1576": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1577": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1578": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1579": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1580": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1581": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1582": "DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1587": "DefaultMessageStore.CommitLogDispatcherBuildIndex::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1588": "DefaultMessageStore.CommitLogDispatcherBuildIndex::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1589": "DefaultMessageStore.CommitLogDispatcherBuildIndex::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1590": "DefaultMessageStore.CommitLogDispatcherBuildIndex::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1591": "DefaultMessageStore.CommitLogDispatcherBuildIndex::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1592": "DefaultMessageStore.CommitLogDispatcherBuildIndex::::dispatch(org.apache.rocketmq.store.DispatchRequest)", "1609": "DefaultMessageStore.CleanCommitLogService::::excuteDeleteFilesManualy()", "1610": "DefaultMessageStore.CleanCommitLogService::::excuteDeleteFilesManualy()", "1611": "DefaultMessageStore.CleanCommitLogService::::excuteDeleteFilesManualy()", "1612": "DefaultMessageStore.CleanCommitLogService::::excuteDeleteFilesManualy()", "1614": "DefaultMessageStore.CleanCommitLogService::::run()", "1615": "DefaultMessageStore.CleanCommitLogService::::run()", "1616": "DefaultMessageStore.CleanCommitLogService::::run()", "1617": "DefaultMessageStore.CleanCommitLogService::::run()", "1618": "DefaultMessageStore.CleanCommitLogService::::run()", "1619": "DefaultMessageStore.CleanCommitLogService::::run()", "1620": "DefaultMessageStore.CleanCommitLogService::::run()", "1621": "DefaultMessageStore.CleanCommitLogService::::run()", "1622": "DefaultMessageStore.CleanCommitLogService::::run()", "1624": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1625": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1626": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1627": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1628": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1629": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1630": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1631": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1632": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1633": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1634": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1635": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1636": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1637": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1638": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1639": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1640": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1641": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1642": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1643": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1644": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1645": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1646": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1647": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1648": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1649": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1650": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1651": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1652": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1653": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1654": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1655": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1656": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1657": "DefaultMessageStore.CleanCommitLogService::::deleteExpiredFiles()", "1659": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1660": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1661": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1662": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1663": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1664": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1665": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1666": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1667": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1668": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1669": "DefaultMessageStore.CleanCommitLogService::::redeleteHangedFile()", "1671": "DefaultMessageStore.CleanCommitLogService::::getServiceName()", "1672": "DefaultMessageStore.CleanCommitLogService::::getServiceName()", "1673": "DefaultMessageStore.CleanCommitLogService::::getServiceName()", "1675": "DefaultMessageStore.CleanCommitLogService::::isTimeToDelete()", "1676": "DefaultMessageStore.CleanCommitLogService::::isTimeToDelete()", "1677": "DefaultMessageStore.CleanCommitLogService::::isTimeToDelete()", "1678": "DefaultMessageStore.CleanCommitLogService::::isTimeToDelete()", "1679": "DefaultMessageStore.CleanCommitLogService::::isTimeToDelete()", "1680": "DefaultMessageStore.CleanCommitLogService::::isTimeToDelete()", "1681": "DefaultMessageStore.CleanCommitLogService::::isTimeToDelete()", "1682": "DefaultMessageStore.CleanCommitLogService::::isTimeToDelete()", "1683": "DefaultMessageStore.CleanCommitLogService::::isTimeToDelete()", "1685": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1686": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1687": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1688": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1689": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1690": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1691": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1692": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1693": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1694": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1695": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1696": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1697": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1698": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1699": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1700": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1701": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1702": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1703": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1704": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1705": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1706": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1707": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1708": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1709": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1710": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1711": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1712": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1713": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1714": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1715": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1716": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1717": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1718": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1719": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1720": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1721": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1722": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1723": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1724": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1725": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1726": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1727": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1728": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1729": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1730": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1731": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1732": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1733": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1734": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1735": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1736": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1737": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1738": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1739": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1740": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1741": "DefaultMessageStore.CleanCommitLogService::::isSpaceToDelete()", "1743": "DefaultMessageStore.CleanCommitLogService::::getManualDeleteFileSeveralTimes()", "1744": "DefaultMessageStore.CleanCommitLogService::::getManualDeleteFileSeveralTimes()", "1745": "DefaultMessageStore.CleanCommitLogService::::getManualDeleteFileSeveralTimes()", "1747": "DefaultMessageStore.CleanCommitLogService::::setManualDeleteFileSeveralTimes(int)", "1748": "DefaultMessageStore.CleanCommitLogService::::setManualDeleteFileSeveralTimes(int)", "1749": "DefaultMessageStore.CleanCommitLogService::::setManualDeleteFileSeveralTimes(int)", "1750": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1751": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1752": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1753": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1754": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1755": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1756": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1757": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1758": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1759": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1760": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1761": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1762": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1763": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1764": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1765": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1766": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1767": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1768": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1769": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1770": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1771": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1772": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1773": "DefaultMessageStore.CleanCommitLogService::::isSpaceFull()", "1779": "DefaultMessageStore.CleanConsumeQueueService::::run()", "1780": "DefaultMessageStore.CleanConsumeQueueService::::run()", "1781": "DefaultMessageStore.CleanConsumeQueueService::::run()", "1782": "DefaultMessageStore.CleanConsumeQueueService::::run()", "1783": "DefaultMessageStore.CleanConsumeQueueService::::run()", "1784": "DefaultMessageStore.CleanConsumeQueueService::::run()", "1785": "DefaultMessageStore.CleanConsumeQueueService::::run()", "1787": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1788": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1789": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1790": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1791": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1792": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1793": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1794": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1795": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1796": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1797": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1798": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1799": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1800": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1801": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1802": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1803": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1804": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1805": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1806": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1807": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1808": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1809": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1810": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1811": "DefaultMessageStore.CleanConsumeQueueService::::deleteExpiredFiles()", "1813": "DefaultMessageStore.CleanConsumeQueueService::::getServiceName()", "1814": "DefaultMessageStore.CleanConsumeQueueService::::getServiceName()", "1815": "DefaultMessageStore.CleanConsumeQueueService::::getServiceName()", "1822": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1823": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1824": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1825": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1826": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1827": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1828": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1829": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1830": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1831": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1832": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1833": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1834": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1835": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1836": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1837": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1838": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1839": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1840": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1841": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1842": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1843": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1844": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1845": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1846": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1847": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1848": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1849": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1850": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1851": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1852": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1853": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1854": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1855": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1856": "DefaultMessageStore.FlushConsumeQueueService::::doFlush(int)", "1858": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1859": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1860": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1861": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1862": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1863": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1864": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1865": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1866": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1867": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1868": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1869": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1870": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1871": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1872": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1873": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1874": "DefaultMessageStore.FlushConsumeQueueService::::run()", "1876": "DefaultMessageStore.FlushConsumeQueueService::::getServiceName()", "1877": "DefaultMessageStore.FlushConsumeQueueService::::getServiceName()", "1878": "DefaultMessageStore.FlushConsumeQueueService::::getServiceName()", "1879": "DefaultMessageStore.FlushConsumeQueueService::::getServiceName()", "1881": "DefaultMessageStore.FlushConsumeQueueService::::getJointime()", "1882": "DefaultMessageStore.FlushConsumeQueueService::::getJointime()", "1883": "DefaultMessageStore.FlushConsumeQueueService::::getJointime()", "1884": "DefaultMessageStore.FlushConsumeQueueService::::getJointime()", "1891": "DefaultMessageStore.ReputMessageService::::getReputFromOffset()", "1892": "DefaultMessageStore.ReputMessageService::::getReputFromOffset()", "1893": "DefaultMessageStore.ReputMessageService::::getReputFromOffset()", "1895": "DefaultMessageStore.ReputMessageService::::setReputFromOffset(long)", "1896": "DefaultMessageStore.ReputMessageService::::setReputFromOffset(long)", "1897": "DefaultMessageStore.ReputMessageService::::setReputFromOffset(long)", "1899": "DefaultMessageStore.ReputMessageService::::shutdown()", "1900": "DefaultMessageStore.ReputMessageService::::shutdown()", "1901": "DefaultMessageStore.ReputMessageService::::shutdown()", "1902": "DefaultMessageStore.ReputMessageService::::shutdown()", "1903": "DefaultMessageStore.ReputMessageService::::shutdown()", "1904": "DefaultMessageStore.ReputMessageService::::shutdown()", "1905": "DefaultMessageStore.ReputMessageService::::shutdown()", "1906": "DefaultMessageStore.ReputMessageService::::shutdown()", "1907": "DefaultMessageStore.ReputMessageService::::shutdown()", "1908": "DefaultMessageStore.ReputMessageService::::shutdown()", "1909": "DefaultMessageStore.ReputMessageService::::shutdown()", "1910": "DefaultMessageStore.ReputMessageService::::shutdown()", "1911": "DefaultMessageStore.ReputMessageService::::shutdown()", "1912": "DefaultMessageStore.ReputMessageService::::shutdown()", "1913": "DefaultMessageStore.ReputMessageService::::shutdown()", "1914": "DefaultMessageStore.ReputMessageService::::shutdown()", "1916": "DefaultMessageStore.ReputMessageService::::behind()", "1917": "DefaultMessageStore.ReputMessageService::::behind()", "1918": "DefaultMessageStore.ReputMessageService::::behind()", "1920": "DefaultMessageStore.ReputMessageService::::isCommitLogAvailable()", "1921": "DefaultMessageStore.ReputMessageService::::isCommitLogAvailable()", "1922": "DefaultMessageStore.ReputMessageService::::isCommitLogAvailable()", "1924": "DefaultMessageStore.ReputMessageService::::doReput()", "1925": "DefaultMessageStore.ReputMessageService::::doReput()", "1926": "DefaultMessageStore.ReputMessageService::::doReput()", "1927": "DefaultMessageStore.ReputMessageService::::doReput()", "1928": "DefaultMessageStore.ReputMessageService::::doReput()", "1929": "DefaultMessageStore.ReputMessageService::::doReput()", "1930": "DefaultMessageStore.ReputMessageService::::doReput()", "1931": "DefaultMessageStore.ReputMessageService::::doReput()", "1932": "DefaultMessageStore.ReputMessageService::::doReput()", "1933": "DefaultMessageStore.ReputMessageService::::doReput()", "1934": "DefaultMessageStore.ReputMessageService::::doReput()", "1935": "DefaultMessageStore.ReputMessageService::::doReput()", "1936": "DefaultMessageStore.ReputMessageService::::doReput()", "1937": "DefaultMessageStore.ReputMessageService::::doReput()", "1938": "DefaultMessageStore.ReputMessageService::::doReput()", "1939": "DefaultMessageStore.ReputMessageService::::doReput()", "1940": "DefaultMessageStore.ReputMessageService::::doReput()", "1941": "DefaultMessageStore.ReputMessageService::::doReput()", "1942": "DefaultMessageStore.ReputMessageService::::doReput()", "1943": "DefaultMessageStore.ReputMessageService::::doReput()", "1944": "DefaultMessageStore.ReputMessageService::::doReput()", "1945": "DefaultMessageStore.ReputMessageService::::doReput()", "1946": "DefaultMessageStore.ReputMessageService::::doReput()", "1947": "DefaultMessageStore.ReputMessageService::::doReput()", "1948": "DefaultMessageStore.ReputMessageService::::doReput()", "1949": "DefaultMessageStore.ReputMessageService::::doReput()", "1950": "DefaultMessageStore.ReputMessageService::::doReput()", "1951": "DefaultMessageStore.ReputMessageService::::doReput()", "1952": "DefaultMessageStore.ReputMessageService::::doReput()", "1953": "DefaultMessageStore.ReputMessageService::::doReput()", "1954": "DefaultMessageStore.ReputMessageService::::doReput()", "1955": "DefaultMessageStore.ReputMessageService::::doReput()", "1956": "DefaultMessageStore.ReputMessageService::::doReput()", "1957": "DefaultMessageStore.ReputMessageService::::doReput()", "1958": "DefaultMessageStore.ReputMessageService::::doReput()", "1959": "DefaultMessageStore.ReputMessageService::::doReput()", "1960": "DefaultMessageStore.ReputMessageService::::doReput()", "1961": "DefaultMessageStore.ReputMessageService::::doReput()", "1962": "DefaultMessageStore.ReputMessageService::::doReput()", "1963": "DefaultMessageStore.ReputMessageService::::doReput()", "1964": "DefaultMessageStore.ReputMessageService::::doReput()", "1965": "DefaultMessageStore.ReputMessageService::::doReput()", "1966": "DefaultMessageStore.ReputMessageService::::doReput()", "1967": "DefaultMessageStore.ReputMessageService::::doReput()", "1968": "DefaultMessageStore.ReputMessageService::::doReput()", "1969": "DefaultMessageStore.ReputMessageService::::doReput()", "1970": "DefaultMessageStore.ReputMessageService::::doReput()", "1971": "DefaultMessageStore.ReputMessageService::::doReput()", "1972": "DefaultMessageStore.ReputMessageService::::doReput()", "1973": "DefaultMessageStore.ReputMessageService::::doReput()", "1974": "DefaultMessageStore.ReputMessageService::::doReput()", "1975": "DefaultMessageStore.ReputMessageService::::doReput()", "1976": "DefaultMessageStore.ReputMessageService::::doReput()", "1977": "DefaultMessageStore.ReputMessageService::::doReput()", "1978": "DefaultMessageStore.ReputMessageService::::doReput()", "1979": "DefaultMessageStore.ReputMessageService::::doReput()", "1980": "DefaultMessageStore.ReputMessageService::::doReput()", "1981": "DefaultMessageStore.ReputMessageService::::doReput()", "1982": "DefaultMessageStore.ReputMessageService::::doReput()", "1983": "DefaultMessageStore.ReputMessageService::::doReput()", "1984": "DefaultMessageStore.ReputMessageService::::doReput()", "1985": "DefaultMessageStore.ReputMessageService::::doReput()", "1986": "DefaultMessageStore.ReputMessageService::::doReput()", "1987": "DefaultMessageStore.ReputMessageService::::doReput()", "1988": "DefaultMessageStore.ReputMessageService::::doReput()", "1989": "DefaultMessageStore.ReputMessageService::::doReput()", "1990": "DefaultMessageStore.ReputMessageService::::doReput()", "1991": "DefaultMessageStore.ReputMessageService::::doReput()", "1992": "DefaultMessageStore.ReputMessageService::::doReput()", "1993": "DefaultMessageStore.ReputMessageService::::doReput()", "1994": "DefaultMessageStore.ReputMessageService::::doReput()", "1995": "DefaultMessageStore.ReputMessageService::::doReput()", "1996": "DefaultMessageStore.ReputMessageService::::doReput()", "1997": "DefaultMessageStore.ReputMessageService::::doReput()", "1999": "DefaultMessageStore.ReputMessageService::::run()", "2000": "DefaultMessageStore.ReputMessageService::::run()", "2001": "DefaultMessageStore.ReputMessageService::::run()", "2002": "DefaultMessageStore.ReputMessageService::::run()", "2003": "DefaultMessageStore.ReputMessageService::::run()", "2004": "DefaultMessageStore.ReputMessageService::::run()", "2005": "DefaultMessageStore.ReputMessageService::::run()", "2006": "DefaultMessageStore.ReputMessageService::::run()", "2007": "DefaultMessageStore.ReputMessageService::::run()", "2008": "DefaultMessageStore.ReputMessageService::::run()", "2009": "DefaultMessageStore.ReputMessageService::::run()", "2010": "DefaultMessageStore.ReputMessageService::::run()", "2011": "DefaultMessageStore.ReputMessageService::::run()", "2012": "DefaultMessageStore.ReputMessageService::::run()", "2013": "DefaultMessageStore.ReputMessageService::::run()", "2015": "DefaultMessageStore.ReputMessageService::::getServiceName()", "2016": "DefaultMessageStore.ReputMessageService::::getServiceName()", "2017": "DefaultMessageStore.ReputMessageService::::getServiceName()", "2018": "DefaultMessageStore.ReputMessageService::::getServiceName()"}, "test_reverse_method_lines_dic": {"62": "DefaultMessageStoreTest::::init()", "63": "DefaultMessageStoreTest::::init()", "64": "DefaultMessageStoreTest::::init()", "65": "DefaultMessageStoreTest::::init()", "66": "DefaultMessageStoreTest::::init()", "67": "DefaultMessageStoreTest::::init()", "68": "DefaultMessageStoreTest::::init()", "69": "DefaultMessageStoreTest::::init()", "70": "DefaultMessageStoreTest::::init()", "71": "DefaultMessageStoreTest::::init()", "73": "DefaultMessageStoreTest::::test_repeat_restart()", "74": "DefaultMessageStoreTest::::test_repeat_restart()", "75": "DefaultMessageStoreTest::::test_repeat_restart()", "76": "DefaultMessageStoreTest::::test_repeat_restart()", "77": "DefaultMessageStoreTest::::test_repeat_restart()", "78": "DefaultMessageStoreTest::::test_repeat_restart()", "79": "DefaultMessageStoreTest::::test_repeat_restart()", "80": "DefaultMessageStoreTest::::test_repeat_restart()", "81": "DefaultMessageStoreTest::::test_repeat_restart()", "82": "DefaultMessageStoreTest::::test_repeat_restart()", "83": "DefaultMessageStoreTest::::test_repeat_restart()", "84": "DefaultMessageStoreTest::::test_repeat_restart()", "85": "DefaultMessageStoreTest::::test_repeat_restart()", "86": "DefaultMessageStoreTest::::test_repeat_restart()", "87": "DefaultMessageStoreTest::::test_repeat_restart()", "88": "DefaultMessageStoreTest::::test_repeat_restart()", "89": "DefaultMessageStoreTest::::test_repeat_restart()", "90": "DefaultMessageStoreTest::::test_repeat_restart()", "91": "DefaultMessageStoreTest::::test_repeat_restart()", "92": "DefaultMessageStoreTest::::test_repeat_restart()", "93": "DefaultMessageStoreTest::::test_repeat_restart()", "94": "DefaultMessageStoreTest::::test_repeat_restart()", "95": "DefaultMessageStoreTest::::test_repeat_restart()", "97": "DefaultMessageStoreTest::::destroy()", "98": "DefaultMessageStoreTest::::destroy()", "99": "DefaultMessageStoreTest::::destroy()", "100": "DefaultMessageStoreTest::::destroy()", "101": "DefaultMessageStoreTest::::destroy()", "102": "DefaultMessageStoreTest::::destroy()", "103": "DefaultMessageStoreTest::::destroy()", "104": "DefaultMessageStoreTest::::destroy()", "105": "DefaultMessageStoreTest::::destroy()", "107": "DefaultMessageStoreTest::::buildMessageStore()", "108": "DefaultMessageStoreTest::::buildMessageStore()", "109": "DefaultMessageStoreTest::::buildMessageStore()", "110": "DefaultMessageStoreTest::::buildMessageStore()", "111": "DefaultMessageStoreTest::::buildMessageStore()", "112": "DefaultMessageStoreTest::::buildMessageStore()", "113": "DefaultMessageStoreTest::::buildMessageStore()", "114": "DefaultMessageStoreTest::::buildMessageStore()", "115": "DefaultMessageStoreTest::::buildMessageStore()", "116": "DefaultMessageStoreTest::::buildMessageStore()", "118": "DefaultMessageStoreTest::::testWriteAndRead()", "119": "DefaultMessageStoreTest::::testWriteAndRead()", "120": "DefaultMessageStoreTest::::testWriteAndRead()", "121": "DefaultMessageStoreTest::::testWriteAndRead()", "122": "DefaultMessageStoreTest::::testWriteAndRead()", "123": "DefaultMessageStoreTest::::testWriteAndRead()", "124": "DefaultMessageStoreTest::::testWriteAndRead()", "125": "DefaultMessageStoreTest::::testWriteAndRead()", "126": "DefaultMessageStoreTest::::testWriteAndRead()", "127": "DefaultMessageStoreTest::::testWriteAndRead()", "128": "DefaultMessageStoreTest::::testWriteAndRead()", "129": "DefaultMessageStoreTest::::testWriteAndRead()", "130": "DefaultMessageStoreTest::::testWriteAndRead()", "131": "DefaultMessageStoreTest::::testWriteAndRead()", "132": "DefaultMessageStoreTest::::testWriteAndRead()", "133": "DefaultMessageStoreTest::::testWriteAndRead()", "134": "DefaultMessageStoreTest::::testWriteAndRead()", "135": "DefaultMessageStoreTest::::testWriteAndRead()", "136": "DefaultMessageStoreTest::::testWriteAndRead()", "137": "DefaultMessageStoreTest::::testWriteAndRead()", "138": "DefaultMessageStoreTest::::testWriteAndRead()", "139": "DefaultMessageStoreTest::::testWriteAndRead()", "140": "DefaultMessageStoreTest::::testWriteAndRead()", "141": "DefaultMessageStoreTest::::testWriteAndRead()", "143": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "144": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "145": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "146": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "147": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "148": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "149": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "150": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "151": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "152": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "153": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "154": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "155": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "156": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "157": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsFirst()", "159": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "160": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "161": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "162": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "163": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "164": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "165": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "166": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "167": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "168": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "169": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "170": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "171": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsLast()", "173": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "174": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "175": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "176": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "177": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "178": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "179": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "180": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "181": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "182": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "183": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "184": "DefaultMessageStoreTest::::testLookMessageByOffset_OffsetIsOutOfBound()", "186": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "187": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "188": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "189": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "190": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "191": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "192": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "193": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "194": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "195": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "196": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "197": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "198": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "199": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "200": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "201": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "202": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "203": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime()", "205": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "206": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "207": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "208": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "209": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "210": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "211": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "212": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "213": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "214": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "215": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "216": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "217": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "218": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "219": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "220": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "221": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "222": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "223": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "224": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "225": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "226": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "227": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "228": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampIsSkewing()", "230": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "231": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "232": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "233": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "234": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "235": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "236": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "237": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "238": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "239": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "240": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "241": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "242": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "243": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "244": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "245": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "246": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "247": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "248": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "249": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "250": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "251": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "252": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "253": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "254": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_TimestampSkewingIsLarge()", "256": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "257": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "258": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "259": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "260": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "261": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "262": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "263": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "264": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "265": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "266": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "267": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "268": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "269": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "270": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound1()", "272": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "273": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "274": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "275": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "276": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "277": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "278": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "279": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "280": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "281": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "282": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "283": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "284": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "285": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueNotFound2()", "287": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "288": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "289": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "290": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "291": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "292": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "293": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "294": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "295": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "296": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "297": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "298": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "299": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "300": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "301": "DefaultMessageStoreTest::::testGetOffsetInQueueByTime_ConsumeQueueOffsetNotExist()", "303": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "304": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "305": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "306": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "307": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "308": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "309": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "310": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "311": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "312": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "313": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "314": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "315": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "316": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "317": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "318": "DefaultMessageStoreTest::::testGetMessageStoreTimeStamp()", "320": "DefaultMessageStoreTest::::testGetStoreTime_ParamIsNull()", "321": "DefaultMessageStoreTest::::testGetStoreTime_ParamIsNull()", "322": "DefaultMessageStoreTest::::testGetStoreTime_ParamIsNull()", "323": "DefaultMessageStoreTest::::testGetStoreTime_ParamIsNull()", "324": "DefaultMessageStoreTest::::testGetStoreTime_ParamIsNull()", "325": "DefaultMessageStoreTest::::testGetStoreTime_ParamIsNull()", "327": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "328": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "329": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "330": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "331": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "332": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "333": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "334": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "335": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "336": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "337": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "338": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "339": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "340": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "341": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "342": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "343": "DefaultMessageStoreTest::::testGetStoreTime_EverythingIsOk()", "345": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "346": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "347": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "348": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "349": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "350": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "351": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "352": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "353": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "354": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "355": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "356": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "357": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "358": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "359": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "360": "DefaultMessageStoreTest::::testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset()", "362": "DefaultMessageStoreTest::::getDefaultMessageStore()", "363": "DefaultMessageStoreTest::::getDefaultMessageStore()", "364": "DefaultMessageStoreTest::::getDefaultMessageStore()", "366": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int)", "367": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int)", "368": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int)", "370": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "371": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "372": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "373": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "374": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "375": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "376": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "377": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "378": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "379": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "380": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "381": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "382": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "383": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "384": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "385": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "386": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "387": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "388": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "389": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "390": "DefaultMessageStoreTest::::putMessages(int,java.lang.String,int,boolean)", "400": "DefaultMessageStoreTest::::buildMessageBodyByOffset(java.lang.String,long)", "401": "DefaultMessageStoreTest::::buildMessageBodyByOffset(java.lang.String,long)", "402": "DefaultMessageStoreTest::::buildMessageBodyByOffset(java.lang.String,long)", "414": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "415": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "416": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "417": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "418": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "419": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "420": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "421": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "422": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "423": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "424": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "425": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "426": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "427": "DefaultMessageStoreTest::::buildMessage(byte[],java.lang.String)", "429": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "430": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "431": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "432": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "433": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "434": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "435": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "436": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "437": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "438": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "439": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "440": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "441": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "442": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "443": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "444": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "445": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "446": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "447": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "448": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "449": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "450": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "451": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "452": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "453": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "454": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "455": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "456": "DefaultMessageStoreTest::::buildIPv6HostMessage(byte[],java.lang.String)", "458": "DefaultMessageStoreTest::::buildMessage()", "459": "DefaultMessageStoreTest::::buildMessage()", "460": "DefaultMessageStoreTest::::buildMessage()", "462": "DefaultMessageStoreTest::::buildIPv6HostMessage()", "463": "DefaultMessageStoreTest::::buildIPv6HostMessage()", "464": "DefaultMessageStoreTest::::buildIPv6HostMessage()", "481": "DefaultMessageStoreTest::::testPullSize()", "482": "DefaultMessageStoreTest::::testPullSize()", "483": "DefaultMessageStoreTest::::testPullSize()", "484": "DefaultMessageStoreTest::::testPullSize()", "485": "DefaultMessageStoreTest::::testPullSize()", "486": "DefaultMessageStoreTest::::testPullSize()", "487": "DefaultMessageStoreTest::::testPullSize()", "488": "DefaultMessageStoreTest::::testPullSize()", "489": "DefaultMessageStoreTest::::testPullSize()", "490": "DefaultMessageStoreTest::::testPullSize()", "491": "DefaultMessageStoreTest::::testPullSize()", "492": "DefaultMessageStoreTest::::testPullSize()", "493": "DefaultMessageStoreTest::::testPullSize()", "494": "DefaultMessageStoreTest::::testPullSize()", "495": "DefaultMessageStoreTest::::testPullSize()", "496": "DefaultMessageStoreTest::::testPullSize()", "497": "DefaultMessageStoreTest::::testPullSize()", "498": "DefaultMessageStoreTest::::testPullSize()", "499": "DefaultMessageStoreTest::::testPullSize()", "500": "DefaultMessageStoreTest::::testPullSize()", "501": "DefaultMessageStoreTest::::testPullSize()", "502": "DefaultMessageStoreTest::::testPullSize()", "503": "DefaultMessageStoreTest::::testPullSize()", "504": "DefaultMessageStoreTest::::testPullSize()", "505": "DefaultMessageStoreTest::::testPullSize()", "506": "DefaultMessageStoreTest::::testPullSize()", "507": "DefaultMessageStoreTest::::testPullSize()", "508": "DefaultMessageStoreTest::::testPullSize()", "510": "DefaultMessageStoreTest::::testRecover()", "511": "DefaultMessageStoreTest::::testRecover()", "512": "DefaultMessageStoreTest::::testRecover()", "513": "DefaultMessageStoreTest::::testRecover()", "514": "DefaultMessageStoreTest::::testRecover()", "515": "DefaultMessageStoreTest::::testRecover()", "516": "DefaultMessageStoreTest::::testRecover()", "517": "DefaultMessageStoreTest::::testRecover()", "518": "DefaultMessageStoreTest::::testRecover()", "519": "DefaultMessageStoreTest::::testRecover()", "520": "DefaultMessageStoreTest::::testRecover()", "521": "DefaultMessageStoreTest::::testRecover()", "522": "DefaultMessageStoreTest::::testRecover()", "523": "DefaultMessageStoreTest::::testRecover()", "524": "DefaultMessageStoreTest::::testRecover()", "525": "DefaultMessageStoreTest::::testRecover()", "526": "DefaultMessageStoreTest::::testRecover()", "527": "DefaultMessageStoreTest::::testRecover()", "528": "DefaultMessageStoreTest::::testRecover()", "529": "DefaultMessageStoreTest::::testRecover()", "530": "DefaultMessageStoreTest::::testRecover()", "531": "DefaultMessageStoreTest::::testRecover()", "532": "DefaultMessageStoreTest::::testRecover()", "533": "DefaultMessageStoreTest::::testRecover()", "534": "DefaultMessageStoreTest::::testRecover()", "535": "DefaultMessageStoreTest::::testRecover()", "536": "DefaultMessageStoreTest::::testRecover()", "537": "DefaultMessageStoreTest::::testRecover()", "538": "DefaultMessageStoreTest::::testRecover()", "539": "DefaultMessageStoreTest::::testRecover()", "540": "DefaultMessageStoreTest::::testRecover()", "541": "DefaultMessageStoreTest::::testRecover()", "542": "DefaultMessageStoreTest::::testRecover()", "543": "DefaultMessageStoreTest::::testRecover()", "544": "DefaultMessageStoreTest::::testRecover()", "545": "DefaultMessageStoreTest::::testRecover()", "546": "DefaultMessageStoreTest::::testRecover()", "547": "DefaultMessageStoreTest::::testRecover()", "548": "DefaultMessageStoreTest::::testRecover()", "549": "DefaultMessageStoreTest::::testRecover()", "550": "DefaultMessageStoreTest::::testRecover()", "551": "DefaultMessageStoreTest::::testRecover()", "552": "DefaultMessageStoreTest::::testRecover()", "553": "DefaultMessageStoreTest::::testRecover()", "554": "DefaultMessageStoreTest::::testRecover()", "555": "DefaultMessageStoreTest::::testRecover()", "556": "DefaultMessageStoreTest::::testRecover()", "557": "DefaultMessageStoreTest::::testRecover()", "558": "DefaultMessageStoreTest::::testRecover()", "559": "DefaultMessageStoreTest::::testRecover()", "560": "DefaultMessageStoreTest::::testRecover()", "561": "DefaultMessageStoreTest::::testRecover()", "562": "DefaultMessageStoreTest::::testRecover()", "563": "DefaultMessageStoreTest::::testRecover()", "564": "DefaultMessageStoreTest::::testRecover()", "565": "DefaultMessageStoreTest::::testRecover()", "566": "DefaultMessageStoreTest::::testRecover()", "567": "DefaultMessageStoreTest::::testRecover()", "568": "DefaultMessageStoreTest::::testRecover()", "569": "DefaultMessageStoreTest::::testRecover()", "570": "DefaultMessageStoreTest::::testRecover()", "571": "DefaultMessageStoreTest::::testRecover()", "572": "DefaultMessageStoreTest::::testRecover()", "573": "DefaultMessageStoreTest::::testRecover()", "574": "DefaultMessageStoreTest::::testRecover()", "575": "DefaultMessageStoreTest::::testRecover()", "576": "DefaultMessageStoreTest::::testRecover()", "577": "DefaultMessageStoreTest::::testRecover()", "578": "DefaultMessageStoreTest::::testRecover()", "579": "DefaultMessageStoreTest::::testRecover()", "580": "DefaultMessageStoreTest::::testRecover()", "581": "DefaultMessageStoreTest::::testRecover()", "582": "DefaultMessageStoreTest::::testRecover()", "583": "DefaultMessageStoreTest::::testRecover()", "584": "DefaultMessageStoreTest::::testRecover()", "585": "DefaultMessageStoreTest::::testRecover()", "586": "DefaultMessageStoreTest::::testRecover()", "587": "DefaultMessageStoreTest::::testRecover()", "588": "DefaultMessageStoreTest::::testRecover()", "589": "DefaultMessageStoreTest::::testRecover()", "590": "DefaultMessageStoreTest::::testRecover()", "591": "DefaultMessageStoreTest::::testRecover()", "592": "DefaultMessageStoreTest::::testRecover()", "593": "DefaultMessageStoreTest::::testRecover()", "594": "DefaultMessageStoreTest::::testRecover()", "595": "DefaultMessageStoreTest::::testRecover()", "596": "DefaultMessageStoreTest::::testRecover()", "597": "DefaultMessageStoreTest::::testRecover()", "598": "DefaultMessageStoreTest::::testRecover()", "599": "DefaultMessageStoreTest::::testRecover()", "600": "DefaultMessageStoreTest::::testRecover()", "601": "DefaultMessageStoreTest::::testRecover()", "602": "DefaultMessageStoreTest::::testRecover()", "603": "DefaultMessageStoreTest::::testRecover()", "604": "DefaultMessageStoreTest::::testRecover()", "605": "DefaultMessageStoreTest::::testRecover()", "606": "DefaultMessageStoreTest::::testRecover()", "608": "DefaultMessageStoreTest::::damageCommitlog(long)", "609": "DefaultMessageStoreTest::::damageCommitlog(long)", "610": "DefaultMessageStoreTest::::damageCommitlog(long)", "611": "DefaultMessageStoreTest::::damageCommitlog(long)", "612": "DefaultMessageStoreTest::::damageCommitlog(long)", "613": "DefaultMessageStoreTest::::damageCommitlog(long)", "614": "DefaultMessageStoreTest::::damageCommitlog(long)", "615": "DefaultMessageStoreTest::::damageCommitlog(long)", "616": "DefaultMessageStoreTest::::damageCommitlog(long)", "617": "DefaultMessageStoreTest::::damageCommitlog(long)", "618": "DefaultMessageStoreTest::::damageCommitlog(long)", "619": "DefaultMessageStoreTest::::damageCommitlog(long)", "620": "DefaultMessageStoreTest::::damageCommitlog(long)", "621": "DefaultMessageStoreTest::::damageCommitlog(long)", "622": "DefaultMessageStoreTest::::damageCommitlog(long)", "623": "DefaultMessageStoreTest::::damageCommitlog(long)", "624": "DefaultMessageStoreTest::::damageCommitlog(long)", "625": "DefaultMessageStoreTest::::damageCommitlog(long)", "626": "DefaultMessageStoreTest::::damageCommitlog(long)", "629": "DefaultMessageStoreTest.MyMessageArrivingListener::::arriving(java.lang.String,int,long,long,long,byte[],java.util.Map<java.lang.String, java.lang.String>)", "630": "DefaultMessageStoreTest.MyMessageArrivingListener::::arriving(java.lang.String,int,long,long,long,byte[],java.util.Map<java.lang.String, java.lang.String>)", "631": "DefaultMessageStoreTest.MyMessageArrivingListener::::arriving(java.lang.String,int,long,long,long,byte[],java.util.Map<java.lang.String, java.lang.String>)", "632": "DefaultMessageStoreTest.MyMessageArrivingListener::::arriving(java.lang.String,int,long,long,long,byte[],java.util.Map<java.lang.String, java.lang.String>)"}, "tests": [{"test_lines": [73, 95], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 851, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1423, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1493, 1526, 1527, 1530, 1534, 1568, 1585, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [118, 141], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 560, 565, 570, 572, 573, 574, 575, 577, 579, 581, 582, 583, 584, 586, 587, 588, 709, 712, 714, 715, 717, 718, 719, 720, 721, 851, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1245, 1246, 1247, 1249, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [143, 157], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 771, 772, 775, 776, 778, 851, 1025, 1177, 1201, 1202, 1204, 1206, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [159, 171], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 851, 1025, 1177, 1201, 1202, 1204, 1206, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [173, 184], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 771, 772, 782, 851, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [186, 203], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 762, 763, 764, 851, 856, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [205, 228], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 762, 763, 764, 851, 856, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [230, 254], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 762, 763, 764, 851, 856, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [256, 270], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 762, 763, 764, 851, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [272, 285], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 851, 873, 884, 896, 897, 898, 899, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [287, 301], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 851, 873, 884, 896, 897, 898, 899, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [303, 318], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 851, 873, 875, 876, 877, 878, 881, 896, 897, 898, 899, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [320, 325], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 851, 873, 884, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1493, 1526, 1527, 1530, 1534, 1568, 1585, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [327, 343], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 851, 873, 875, 876, 877, 878, 881, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1552, 1553, 1556, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [345, 360], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 554, 851, 873, 875, 876, 877, 878, 881, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1493, 1526, 1527, 1530, 1534, 1568, 1585, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [481, 508], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 560, 565, 570, 572, 573, 574, 575, 577, 579, 581, 582, 583, 584, 586, 589, 592, 595, 603, 604, 606, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 622, 627, 629, 631, 634, 635, 647, 656, 657, 666, 676, 677, 678, 679, 682, 683, 684, 687, 689, 690, 691, 692, 695, 696, 703, 709, 710, 714, 715, 717, 718, 719, 720, 721, 851, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1253, 1254, 1259, 1260, 1263, 1264, 1267, 1276, 1280, 1285, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1412, 1414, 1418, 1420, 1421, 1426, 1427, 1430, 1449, 1450, 1459, 1463, 1464, 1465, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}, {"test_lines": [510, 606], "covered_lines": [67, 95, 96, 98, 99, 104, 108, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 145, 147, 149, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 169, 171, 172, 173, 174, 175, 176, 182, 185, 186, 188, 189, 193, 196, 198, 199, 200, 202, 205, 207, 212, 214, 218, 226, 227, 231, 232, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 263, 264, 265, 266, 273, 274, 279, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 304, 307, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 333, 335, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 366, 370, 388, 393, 401, 409, 412, 415, 480, 481, 485, 486, 490, 492, 493, 494, 498, 500, 504, 537, 538, 540, 541, 550, 554, 725, 726, 727, 728, 851, 1025, 1177, 1214, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1230, 1231, 1233, 1234, 1237, 1241, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1312, 1314, 1321, 1348, 1353, 1375, 1376, 1377, 1381, 1382, 1383, 1385, 1386, 1388, 1389, 1390, 1393, 1396, 1397, 1400, 1401, 1403, 1404, 1412, 1414, 1418, 1420, 1421, 1423, 1426, 1427, 1430, 1438, 1439, 1440, 1441, 1442, 1446, 1449, 1450, 1451, 1452, 1453, 1454, 1456, 1457, 1459, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1473, 1474, 1477, 1481, 1493, 1505, 1509, 1510, 1511, 1512, 1515, 1516, 1517, 1526, 1527, 1530, 1534, 1568, 1572, 1573, 1576, 1577, 1582, 1585, 1589, 1590, 1592, 1595, 1598, 1599, 1601, 1602, 1603, 1605, 1607, 1776, 1777, 1818, 1820, 1823, 1825, 1826, 1829, 1831, 1832, 1833, 1834, 1835, 1836, 1839, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1850, 1851, 1852, 1854, 1856, 1859, 1861, 1863, 1864, 1865, 1868, 1871, 1873, 1874, 1878, 1883, 1887, 1889, 1896, 1897, 1901, 1908, 1913, 1914, 1917, 1921, 1925, 1930, 1932, 1937, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1959, 1960, 1961, 1989, 1991, 1992, 1996, 1997, 2001, 2003, 2005, 2006, 2009, 2012, 2013, 2017]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/store/src/main/java/org/apache/rocketmq/store/MappedFile.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.store;\n", "\n", "import com.sun.jna.NativeLong;\n", "import com.sun.jna.Pointer;\n", "import java.io.File;\n", "import java.io.FileNotFoundException;\n", "import java.io.IOException;\n", "import java.io.RandomAccessFile;\n", "import java.lang.reflect.Method;\n", "import java.nio.ByteBuffer;\n", "import java.nio.MappedByteBuffer;\n", "import java.nio.channels.FileChannel;\n", "import java.nio.channels.FileChannel.MapMode;\n", "import java.security.AccessController;\n", "import java.security.PrivilegedAction;\n", "import java.util.concurrent.atomic.AtomicInteger;\n", "import java.util.concurrent.atomic.AtomicLong;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.message.MessageExtBatch;\n", "import org.apache.rocketmq.store.config.FlushDiskType;\n", "import org.apache.rocketmq.store.util.LibC;\n", "import sun.nio.ch.DirectBuffer;\n", "\n", "\n", "public class MappedFile extends ReferenceResource {\n", "    // \u9ed8\u8ba4\u9875\u5927\u5c0f\n", "    public static final int OS_PAGE_SIZE = 1024 * 4;\n", "    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n", "\n", "    // jvm\u6620\u5c04\u865a\u62df\u5185\u5b58\u603b\u5927\u5c0f\n", "    private static final AtomicLong TOTAL_MAPPED_VIRTUAL_MEMORY = new AtomicLong(0);\n", "\n", "    // jvm\u4e2dmmap\u6570\u91cf\n", "    private static final AtomicInteger TOTAL_MAPPED_FILES = new AtomicInteger(0);\n", "    // \u5f53\u524d\u5199\u6587\u4ef6\u4f4d\u7f6e\n", "    protected final AtomicInteger wrotePosition = new AtomicInteger(0);\n", "    // \u63d0\u4ea4\u4f4d\u7f6e\n", "    protected final AtomicInteger committedPosition = new AtomicInteger(0);\n", "    // \u5237\u76d8\u4f4d\u7f6e\n", "    private final AtomicInteger flushedPosition = new AtomicInteger(0);\n", "    // \u6587\u4ef6\u5927\u5c0f\n", "    protected int fileSize;\n", "    protected FileChannel fileChannel;\n", "    /**\n", "     * Message will put to here first, and then reput to FileChannel if writeBuffer is not null.\n", "     */\n", "    protected ByteBuffer writeBuffer = null;\n", "    // \u6682\u5b58\u6c60\n", "    protected TransientStorePool transientStorePool = null;\n", "    private String fileName;\n", "    // \u6620\u5c04\u8d77\u59cb\u504f\u79fb\u91cf\n", "    private long fileFromOffset;\n", "    // \u6620\u5c04\u6587\u4ef6\n", "    private File file;\n", "    // \u6620\u5c04\u7684\u5185\u5b58\u5bf9\u8c61\n", "    private MappedByteBuffer mappedByteBuffer;\n", "    // \u6700\u540e\u4e00\u6761\u6d88\u606f\u4fdd\u5b58\u65f6\u95f4\n", "    private volatile long storeTimestamp = 0;\n", "    private boolean firstCreateInQueue = false;\n", "\n", "    public MappedFile() {\n", "    }\n", "\n", "    public MappedFile(final String fileName, final int fileSize) throws IOException {\n", "        init(fileName, fileSize);\n", "    }\n", "\n", "    public MappedFile(final String fileName, final int fileSize,\n", "        final TransientStorePool transientStorePool) throws IOException {\n", "        init(fileName, fileSize, transientStorePool);\n", "    }\n", "\n", "    public static void ensureDirOK(final String dirName) {\n", "        if (dirName != null) {\n", "            File f = new File(dirName);\n", "            if (!f.exists()) {\n", "                boolean result = f.mkdirs();\n", "                log.info(dirName + \" mkdir \" + (result ? \"OK\" : \"Failed\"));\n", "            }\n", "        }\n", "    }\n", "\n", "    public static void clean(final ByteBuffer buffer) {\n", "        if (buffer == null || !buffer.isDirect() || buffer.capacity() == 0)\n", "            return;\n", "        invoke(invoke(viewed(buffer), \"cleaner\"), \"clean\");\n", "    }\n", "\n", "    private static Object invoke(final Object target, final String methodName, final Class<?>... args) {\n", "        return AccessController.doPrivileged(new PrivilegedAction<Object>() {\n", "            public Object run() {\n", "                try {\n", "                    Method method = method(target, methodName, args);\n", "                    method.setAccessible(true);\n", "                    return method.invoke(target);\n", "                } catch (Exception e) {\n", "                    throw new IllegalStateException(e);\n", "                }\n", "            }\n", "        });\n", "    }\n", "\n", "    private static Method method(Object target, String methodName, Class<?>[] args)\n", "        throws NoSuchMethodException {\n", "        try {\n", "            return target.getClass().getMethod(methodName, args);\n", "        } catch (NoSuchMethodException e) {\n", "            return target.getClass().getDeclaredMethod(methodName, args);\n", "        }\n", "    }\n", "\n", "    private static ByteBuffer viewed(ByteBuffer buffer) {\n", "        String methodName = \"viewedBuffer\";\n", "        Method[] methods = buffer.getClass().getMethods();\n", "        for (int i = 0; i < methods.length; i++) {\n", "            if (methods[i].getName().equals(\"attachment\")) {\n", "                methodName = \"attachment\";\n", "                break;\n", "            }\n", "        }\n", "\n", "        ByteBuffer viewedBuffer = (ByteBuffer) invoke(buffer, methodName);\n", "        if (viewedBuffer == null)\n", "            return buffer;\n", "        else\n", "            return viewed(viewedBuffer);\n", "    }\n", "\n", "    public static int getTotalMappedFiles() {\n", "        return TOTAL_MAPPED_FILES.get();\n", "    }\n", "\n", "    public static long getTotalMappedVirtualMemory() {\n", "        return TOTAL_MAPPED_VIRTUAL_MEMORY.get();\n", "    }\n", "\n", "    public void init(final String fileName, final int fileSize,\n", "        final TransientStorePool transientStorePool) throws IOException {\n", "        init(fileName, fileSize);\n", "        //transientStorePoolEnable  \u5806\u5916\u5185\u5b58\u6c60\u5f00\u5173\u4e3atrue\uff0c\u5219\u521d\u59cb\u5316MappedFile\u7684writeBuffre\uff0c\u8be5Buffer\u4ecetransientStorePool\u4e2d\u83b7\u53d6\n", "        this.writeBuffer = transientStorePool.borrowBuffer();\n", "        this.transientStorePool = transientStorePool;\n", "    }\n", "\n", "    private void init(final String fileName, final int fileSize) throws IOException {\n", "        this.fileName = fileName;\n", "        this.fileSize = fileSize;\n", "        this.file = new File(fileName);\n", "        // \u6587\u4ef6\u540d\u4e3a\u8d77\u59cboffset\n", "        this.fileFromOffset = Long.parseLong(this.file.getName());\n", "        boolean ok = false;\n", "\n", "        ensureDirOK(this.file.getParent());\n", "\n", "        try {\n", "            this.fileChannel = new RandomAccessFile(this.file, \"rw\").getChannel();\n", "            // mmap \u5efa\u7acb\u6620\u5c04\n", "            this.mappedByteBuffer = this.fileChannel.map(MapMode.READ_WRITE, 0, fileSize);\n", "            TOTAL_MAPPED_VIRTUAL_MEMORY.addAndGet(fileSize);\n", "            TOTAL_MAPPED_FILES.incrementAndGet();\n", "            ok = true;\n", "        } catch (FileNotFoundException e) {\n", "            log.error(\"Failed to create file \" + this.fileName, e);\n", "            throw e;\n", "        } catch (IOException e) {\n", "            log.error(\"Failed to map file \" + this.fileName, e);\n", "            throw e;\n", "        } finally {\n", "            if (!ok && this.fileChannel != null) {\n", "                this.fileChannel.close();\n", "            }\n", "        }\n", "    }\n", "\n", "    public long getLastModifiedTimestamp() {\n", "        return this.file.lastModified();\n", "    }\n", "\n", "    public int getFileSize() {\n", "        return fileSize;\n", "    }\n", "\n", "    public FileChannel getFileChannel() {\n", "        return fileChannel;\n", "    }\n", "\n", "    public AppendMessageResult appendMessage(final MessageExtBrokerInner msg, final AppendMessageCallback cb) {\n", "        return appendMessagesInner(msg, cb);\n", "    }\n", "\n", "    public AppendMessageResult appendMessages(final MessageExtBatch messageExtBatch, final AppendMessageCallback cb) {\n", "        return appendMessagesInner(messageExtBatch, cb);\n", "    }\n", "\n", "    public AppendMessageResult appendMessagesInner(final MessageExt messageExt, final AppendMessageCallback cb) {\n", "        assert messageExt != null;\n", "        assert cb != null;\n", "\n", "        int currentPos = this.wrotePosition.get();\n", "\n", "        if (currentPos < this.fileSize) {\n", "            ByteBuffer byteBuffer = writeBuffer != null ? writeBuffer.slice() : this.mappedByteBuffer.slice();\n", "            byteBuffer.position(currentPos);\n", "            AppendMessageResult result;\n", "            if (messageExt instanceof MessageExtBrokerInner) {\n", "                //CommitLog\u7684\u5199\u5165\u4e3b\u8981\u7531commitLog\u7684doAppend\u5b9e\u73b0\n", "                result = cb.doAppend(this.getFileFromOffset(), byteBuffer, this.fileSize - currentPos, (MessageExtBrokerInner) messageExt);\n", "            } else if (messageExt instanceof MessageExtBatch) {\n", "                result = cb.doAppend(this.getFileFromOffset(), byteBuffer, this.fileSize - currentPos, (MessageExtBatch) messageExt);\n", "            } else {\n", "                return new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR);\n", "            }\n", "            this.wrotePosition.addAndGet(result.getWroteBytes());\n", "            this.storeTimestamp = result.getStoreTimestamp();\n", "            return result;\n", "        }\n", "        log.error(\"MappedFile.appendMessage return null, wrotePosition: {} fileSize: {}\", currentPos, this.fileSize);\n", "        return new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR);\n", "    }\n", "\n", "    public long getFileFromOffset() {\n", "        return this.fileFromOffset;\n", "    }\n", "\n", "    public boolean appendMessage(final byte[] data) {\n", "        int currentPos = this.wrotePosition.get();\n", "\n", "        if ((currentPos + data.length) <= this.fileSize) {\n", "            try {\n", "                this.fileChannel.position(currentPos);\n", "                this.fileChannel.write(ByteBuffer.wrap(data));\n", "            } catch (Throwable e) {\n", "                log.error(\"Error occurred when append message to mappedFile.\", e);\n", "            }\n", "            this.wrotePosition.addAndGet(data.length);\n", "            return true;\n", "        }\n", "\n", "        return false;\n", "    }\n", "\n", "    /**\n", "     * Content of data from offset to offset + length will be wrote to file.\n", "     *\n", "     * @param offset The offset of the subarray to be used.\n", "     * @param length The length of the subarray to be used.\n", "     */\n", "    public boolean appendMessage(final byte[] data, final int offset, final int length) {\n", "        int currentPos = this.wrotePosition.get();\n", "\n", "        if ((currentPos + length) <= this.fileSize) {\n", "            try {\n", "                this.fileChannel.position(currentPos);\n", "                this.fileChannel.write(ByteBuffer.wrap(data, offset, length));\n", "            } catch (Throwable e) {\n", "                log.error(\"Error occurred when append message to mappedFile.\", e);\n", "            }\n", "            this.wrotePosition.addAndGet(length);\n", "            return true;\n", "        }\n", "\n", "        return false;\n", "    }\n", "\n", "    /**\n", "     * \u5c06\u5185\u5b58\u6570\u636e\u5237\u5199\u5230\u78c1\u76d8\n", "     * \u6570\u636e\u4f1a\u5728fileChannel\u6216\u8005MappedByteBuffer\u4e2d\u3002\u5728MappedFile\u7684\u8bbe\u8ba1\u4e2d\uff0c\u53ea\u6709\u63d0\u4ea4\u4e86\u7684\u6570\u636e\uff0c\n", "     * \u5199\u5165\u5230\u4e86MappedByteBuffer\u6216\u8005FileChannel\u4e2d\u7684\u6570\u636e\u624d\u662f\u5b89\u5168\u7684\u6570\u636e\n", "     * @return The current flushed position\n", "     */\n", "    public int flush(final int flushLeastPages) {\n", "        if (this.isAbleToFlush(flushLeastPages)) {\n", "            if (this.hold()) {\n", "                int value = getReadPosition();\n", "\n", "                try {\n", "                    //We only append data to fileChannel or mappedByteBuffer, never both.\n", "                    if (writeBuffer != null || this.fileChannel.position() != 0) {\n", "                        this.fileChannel.force(false);\n", "                    } else {\n", "                        this.mappedByteBuffer.force();\n", "                    }\n", "                } catch (Throwable e) {\n", "                    log.error(\"Error occurred when force data to disk.\", e);\n", "                }\n", "\n", "                this.flushedPosition.set(value);\n", "                this.release();\n", "            } else {\n", "                log.warn(\"in flush, hold failed, flush offset = \" + this.flushedPosition.get());\n", "                this.flushedPosition.set(getReadPosition());\n", "            }\n", "        }\n", "        return this.getFlushedPosition();\n", "    }\n", "\n", "    //\u5c06writeBuffer\u6570\u636e\u5199\u5165FileChannel\n", "    public int commit(final int commitLeastPages) {\n", "        if (writeBuffer == null) {\n", "            //no need to commit data to file channel, so just regard wrotePosition as committedPosition.\n", "            return this.wrotePosition.get();\n", "        }\n", "        if (this.isAbleToCommit(commitLeastPages)) {\n", "            if (this.hold()) {\n", "                commit0(commitLeastPages);\n", "                this.release();\n", "            } else {\n", "                log.warn(\"in commit, hold failed, commit offset = \" + this.committedPosition.get());\n", "            }\n", "        }\n", "\n", "        // All dirty data has been committed to FileChannel.\n", "        if (writeBuffer != null && this.transientStorePool != null && this.fileSize == this.committedPosition.get()) {\n", "            this.transientStorePool.returnBuffer(writeBuffer);\n", "            this.writeBuffer = null;\n", "        }\n", "\n", "        return this.committedPosition.get();\n", "    }\n", "\n", "\n", "    //\u6267\u884cfileChannel.write\n", "    protected void commit0(final int commitLeastPages) {\n", "        int writePos = this.wrotePosition.get();\n", "        int lastCommittedPosition = this.committedPosition.get();\n", "\n", "        if (writePos - lastCommittedPosition > commitLeastPages) {\n", "            try {\n", "                ByteBuffer byteBuffer = writeBuffer.slice();\n", "                byteBuffer.position(lastCommittedPosition);\n", "                byteBuffer.limit(writePos);\n", "                this.fileChannel.position(lastCommittedPosition);\n", "                this.fileChannel.write(byteBuffer);\n", "                this.committedPosition.set(writePos);\n", "            } catch (Throwable e) {\n", "                log.error(\"Error occurred when commit data to FileChannel.\", e);\n", "            }\n", "        }\n", "    }\n", "\n", "    private boolean isAbleToFlush(final int flushLeastPages) {\n", "        int flush = this.flushedPosition.get();\n", "        int write = getReadPosition();\n", "\n", "        if (this.isFull()) {\n", "            return true;\n", "        }\n", "\n", "        if (flushLeastPages > 0) {\n", "            return ((write / OS_PAGE_SIZE) - (flush / OS_PAGE_SIZE)) >= flushLeastPages;\n", "        }\n", "\n", "        return write > flush;\n", "    }\n", "\n", "    protected boolean isAbleToCommit(final int commitLeastPages) {\n", "        int flush = this.committedPosition.get();\n", "        int write = this.wrotePosition.get();\n", "\n", "        if (this.isFull()) {\n", "            return true;\n", "        }\n", "\n", "        if (commitLeastPages > 0) {\n", "            return ((write / OS_PAGE_SIZE) - (flush / OS_PAGE_SIZE)) >= commitLeastPages;\n", "        }\n", "\n", "        return write > flush;\n", "    }\n", "\n", "    public int getFlushedPosition() {\n", "        return flushedPosition.get();\n", "    }\n", "\n", "    public void setFlushedPosition(int pos) {\n", "        this.flushedPosition.set(pos);\n", "    }\n", "\n", "    public boolean isFull() {\n", "        return this.fileSize == this.wrotePosition.get();\n", "    }\n", "\n", "    public SelectMappedBufferResult selectMappedBuffer(int pos, int size) {\n", "        int readPosition = getReadPosition();\n", "        if ((pos + size) <= readPosition) {\n", "            if (this.hold()) {\n", "                ByteBuffer byteBuffer = this.mappedByteBuffer.slice();\n", "                byteBuffer.position(pos);\n", "                ByteBuffer byteBufferNew = byteBuffer.slice();\n", "                byteBufferNew.limit(size);\n", "                return new SelectMappedBufferResult(this.fileFromOffset + pos, byteBufferNew, size, this);\n", "            } else {\n", "                log.warn(\"matched, but hold failed, request pos: \" + pos + \", fileFromOffset: \"\n", "                    + this.fileFromOffset);\n", "            }\n", "        } else {\n", "            log.warn(\"selectMappedBuffer request pos invalid, request pos: \" + pos + \", size: \" + size\n", "                + \", fileFromOffset: \" + this.fileFromOffset);\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    public SelectMappedBufferResult selectMappedBuffer(int pos) {\n", "        int readPosition = getReadPosition();\n", "        if (pos < readPosition && pos >= 0) {\n", "            if (this.hold()) {\n", "                ByteBuffer byteBuffer = this.mappedByteBuffer.slice();\n", "                byteBuffer.position(pos);\n", "                int size = readPosition - pos;\n", "                ByteBuffer byteBufferNew = byteBuffer.slice();\n", "                byteBufferNew.limit(size);\n", "                return new SelectMappedBufferResult(this.fileFromOffset + pos, byteBufferNew, size, this);\n", "            }\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    @Override\n", "    public boolean cleanup(final long currentRef) {\n", "        if (this.isAvailable()) {\n", "            log.error(\"this file[REF:\" + currentRef + \"] \" + this.fileName\n", "                + \" have not shutdown, stop unmapping.\");\n", "            return false;\n", "        }\n", "\n", "        if (this.isCleanupOver()) {\n", "            log.error(\"this file[REF:\" + currentRef + \"] \" + this.fileName\n", "                + \" have cleanup, do not do it again.\");\n", "            return true;\n", "        }\n", "\n", "        clean(this.mappedByteBuffer);\n", "        TOTAL_MAPPED_VIRTUAL_MEMORY.addAndGet(this.fileSize * (-1));\n", "        TOTAL_MAPPED_FILES.decrementAndGet();\n", "        log.info(\"unmap file[REF:\" + currentRef + \"] \" + this.fileName + \" OK\");\n", "        return true;\n", "    }\n", "\n", "    public boolean destroy(final long intervalForcibly) {\n", "        this.shutdown(intervalForcibly);\n", "\n", "        if (this.isCleanupOver()) {\n", "            try {\n", "                this.fileChannel.close();\n", "                log.info(\"close file channel \" + this.fileName + \" OK\");\n", "\n", "                long beginTime = System.currentTimeMillis();\n", "                boolean result = this.file.delete();\n", "                log.info(\"delete file[REF:\" + this.getRefCount() + \"] \" + this.fileName\n", "                    + (result ? \" OK, \" : \" Failed, \") + \"W:\" + this.getWrotePosition() + \" M:\"\n", "                    + this.getFlushedPosition() + \", \"\n", "                    + UtilAll.computeElapsedTimeMilliseconds(beginTime));\n", "            } catch (Exception e) {\n", "                log.warn(\"close file channel \" + this.fileName + \" Failed. \", e);\n", "            }\n", "\n", "            return true;\n", "        } else {\n", "            log.warn(\"destroy mapped file[REF:\" + this.getRefCount() + \"] \" + this.fileName\n", "                + \" Failed. cleanupOver: \" + this.cleanupOver);\n", "        }\n", "\n", "        return false;\n", "    }\n", "\n", "    public int getWrotePosition() {\n", "        return wrotePosition.get();\n", "    }\n", "\n", "    public void setWrotePosition(int pos) {\n", "        this.wrotePosition.set(pos);\n", "    }\n", "\n", "    /**\n", "     * @return The max position which have valid data\n", "     */\n", "    public int getReadPosition() {\n", "        return this.writeBuffer == null ? this.wrotePosition.get() : this.committedPosition.get();\n", "    }\n", "\n", "    public void setCommittedPosition(int pos) {\n", "        this.committedPosition.set(pos);\n", "    }\n", "\n", "    public void warmMappedFile(FlushDiskType type, int pages) {\n", "        long beginTime = System.currentTimeMillis();\n", "        ByteBuffer byteBuffer = this.mappedByteBuffer.slice();\n", "        int flush = 0;\n", "        long time = System.currentTimeMillis();\n", "        for (int i = 0, j = 0; i < this.fileSize; i += MappedFile.OS_PAGE_SIZE, j++) {\n", "            byteBuffer.put(i, (byte) 0);\n", "            // force flush when flush disk type is sync\n", "            if (type == FlushDiskType.SYNC_FLUSH) {\n", "                if ((i / OS_PAGE_SIZE) - (flush / OS_PAGE_SIZE) >= pages) {\n", "                    flush = i;\n", "                    mappedByteBuffer.force();\n", "                }\n", "            }\n", "\n", "            // prevent gc\n", "            if (j % 1000 == 0) {\n", "                log.info(\"j={}, costTime={}\", j, System.currentTimeMillis() - time);\n", "                time = System.currentTimeMillis();\n", "                try {\n", "                    Thread.sleep(0);\n", "                } catch (InterruptedException e) {\n", "                    log.error(\"Interrupted\", e);\n", "                }\n", "            }\n", "        }\n", "\n", "        // force flush when prepare load finished\n", "        if (type == FlushDiskType.SYNC_FLUSH) {\n", "            log.info(\"mapped file warm-up done, force to disk, mappedFile={}, costTime={}\",\n", "                this.getFileName(), System.currentTimeMillis() - beginTime);\n", "            mappedByteBuffer.force();\n", "        }\n", "        log.info(\"mapped file warm-up done. mappedFile={}, costTime={}\", this.getFileName(),\n", "            System.currentTimeMillis() - beginTime);\n", "\n", "        this.mlock();\n", "    }\n", "\n", "    public String getFileName() {\n", "        return fileName;\n", "    }\n", "\n", "    public MappedByteBuffer getMappedByteBuffer() {\n", "        return mappedByteBuffer;\n", "    }\n", "\n", "    public ByteBuffer sliceByteBuffer() {\n", "        return this.mappedByteBuffer.slice();\n", "    }\n", "\n", "    public long getStoreTimestamp() {\n", "        return storeTimestamp;\n", "    }\n", "\n", "    public boolean isFirstCreateInQueue() {\n", "        return firstCreateInQueue;\n", "    }\n", "\n", "    public void setFirstCreateInQueue(boolean firstCreateInQueue) {\n", "        this.firstCreateInQueue = firstCreateInQueue;\n", "    }\n", "\n", "    public void mlock() {\n", "        final long beginTime = System.currentTimeMillis();\n", "        final long address = ((DirectBuffer) (this.mappedByteBuffer)).address();\n", "        Pointer pointer = new Pointer(address);\n", "        {\n", "            int ret = LibC.INSTANCE.mlock(pointer, new NativeLong(this.fileSize));\n", "            log.info(\"mlock {} {} {} ret = {} time consuming = {}\", address, this.fileName, this.fileSize, ret, System.currentTimeMillis() - beginTime);\n", "        }\n", "\n", "        {\n", "            int ret = LibC.INSTANCE.madvise(pointer, new NativeLong(this.fileSize), LibC.MADV_WILLNEED);\n", "            log.info(\"madvise {} {} {} ret = {} time consuming = {}\", address, this.fileName, this.fileSize, ret, System.currentTimeMillis() - beginTime);\n", "        }\n", "    }\n", "\n", "    public void munlock() {\n", "        final long beginTime = System.currentTimeMillis();\n", "        final long address = ((DirectBuffer) (this.mappedByteBuffer)).address();\n", "        Pointer pointer = new Pointer(address);\n", "        int ret = LibC.INSTANCE.munlock(pointer, new NativeLong(this.fileSize));\n", "        log.info(\"munlock {} {} {} ret = {} time consuming = {}\", address, this.fileName, this.fileSize, ret, System.currentTimeMillis() - beginTime);\n", "    }\n", "\n", "    //testable\n", "    File getFile() {\n", "        return this.file;\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "        return this.fileName;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "/**\n", " * $Id: MappedFileTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $\n", " */\n", "package org.apache.rocketmq.store;\n", "\n", "import java.io.File;\n", "import java.io.IOException;\n", "\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.junit.After;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class MappedFileTest {\n", "    private final String storeMessage = \"Once, there was a chance for me!\";\n", "\n", "    @Test\n", "    public void testSelectMappedBuffer() throws IOException {\n", "        MappedFile mappedFile = new MappedFile(\"target/unit_test_store/MappedFileTest/000\", 1024 * 64);\n", "        boolean result = mappedFile.appendMessage(storeMessage.getBytes());\n", "        assertThat(result).isTrue();\n", "\n", "        SelectMappedBufferResult selectMappedBufferResult = mappedFile.selectMappedBuffer(0);\n", "        byte[] data = new byte[storeMessage.length()];\n", "        selectMappedBufferResult.getByteBuffer().get(data);\n", "        String readString = new String(data);\n", "\n", "        assertThat(readString).isEqualTo(storeMessage);\n", "\n", "        mappedFile.shutdown(1000);\n", "        assertThat(mappedFile.isAvailable()).isFalse();\n", "        selectMappedBufferResult.release();\n", "        assertThat(mappedFile.isCleanupOver()).isTrue();\n", "        assertThat(mappedFile.destroy(1000)).isTrue();\n", "    }\n", "\n", "    @After\n", "    public void destory() {\n", "        File file = new File(\"target/unit_test_store\");\n", "        UtilAll.deleteFile(file);\n", "    }\n", "}\n"], "method_lines_dic": {"MappedFile::::ensureDirOK(java.lang.String)": [93, 101], "MappedFile::::clean(java.nio.ByteBuffer)": [103, 107], "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])": [109, 121], "MappedFile::::method(java.lang.Object,java.lang.String,java.lang.Class<?>[])": [123, 130], "MappedFile::::viewed(java.nio.ByteBuffer)": [132, 147], "MappedFile::::getTotalMappedFiles()": [149, 151], "MappedFile::::getTotalMappedVirtualMemory()": [153, 155], "MappedFile::::init(java.lang.String,int,org.apache.rocketmq.store.TransientStorePool)": [157, 163], "MappedFile::::init(java.lang.String,int)": [165, 193], "MappedFile::::getLastModifiedTimestamp()": [195, 197], "MappedFile::::getFileSize()": [199, 201], "MappedFile::::getFileChannel()": [203, 205], "MappedFile::::appendMessage(org.apache.rocketmq.store.MessageExtBrokerInner,org.apache.rocketmq.store.AppendMessageCallback)": [207, 209], "MappedFile::::getFileFromOffset()": [241, 243], "MappedFile::::appendMessage(byte[])": [245, 260], "MappedFile::::appendMessage(byte[],int,int)": [268, 283], "MappedFile::::flush(int)": [291, 315], "MappedFile::::commit(int)": [318, 339], "MappedFile::::commit0(int)": [343, 359], "MappedFile::::isAbleToFlush(int)": [361, 374], "MappedFile::::isAbleToCommit(int)": [376, 389], "MappedFile::::getFlushedPosition()": [391, 393], "MappedFile::::setFlushedPosition(int)": [395, 397], "MappedFile::::isFull()": [399, 401], "MappedFile::::selectMappedBuffer(int,int)": [403, 422], "MappedFile::::selectMappedBuffer(int)": [424, 438], "MappedFile::::cleanup(long)": [440, 459], "MappedFile::::destroy(long)": [461, 486], "MappedFile::::getWrotePosition()": [488, 490], "MappedFile::::setWrotePosition(int)": [492, 494], "MappedFile::::getReadPosition()": [499, 501], "MappedFile::::setCommittedPosition(int)": [503, 505], "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)": [507, 544], "MappedFile::::getFileName()": [546, 548], "MappedFile::::getMappedByteBuffer()": [550, 552], "MappedFile::::sliceByteBuffer()": [554, 556], "MappedFile::::getStoreTimestamp()": [558, 560], "MappedFile::::isFirstCreateInQueue()": [562, 564], "MappedFile::::setFirstCreateInQueue(boolean)": [566, 568], "MappedFile::::mlock()": [570, 583], "MappedFile::::munlock()": [585, 591], "MappedFile::::getFile()": [594, 596], "MappedFile::::toString()": [598, 601]}, "test_method_lines_dic": {"MappedFileTest::::testSelectMappedBuffer()": [35, 53], "MappedFileTest::::destory()": [55, 59]}, "reverse_method_lines_dic": {"93": "MappedFile::::ensureDirOK(java.lang.String)", "94": "MappedFile::::ensureDirOK(java.lang.String)", "95": "MappedFile::::ensureDirOK(java.lang.String)", "96": "MappedFile::::ensureDirOK(java.lang.String)", "97": "MappedFile::::ensureDirOK(java.lang.String)", "98": "MappedFile::::ensureDirOK(java.lang.String)", "99": "MappedFile::::ensureDirOK(java.lang.String)", "100": "MappedFile::::ensureDirOK(java.lang.String)", "101": "MappedFile::::ensureDirOK(java.lang.String)", "103": "MappedFile::::clean(java.nio.ByteBuffer)", "104": "MappedFile::::clean(java.nio.ByteBuffer)", "105": "MappedFile::::clean(java.nio.ByteBuffer)", "106": "MappedFile::::clean(java.nio.ByteBuffer)", "107": "MappedFile::::clean(java.nio.ByteBuffer)", "109": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "110": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "111": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "112": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "113": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "114": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "115": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "116": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "117": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "118": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "119": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "120": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "121": "MappedFile::::invoke(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "123": "MappedFile::::method(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "124": "MappedFile::::method(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "125": "MappedFile::::method(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "126": "MappedFile::::method(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "127": "MappedFile::::method(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "128": "MappedFile::::method(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "129": "MappedFile::::method(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "130": "MappedFile::::method(java.lang.Object,java.lang.String,java.lang.Class<?>[])", "132": "MappedFile::::viewed(java.nio.ByteBuffer)", "133": "MappedFile::::viewed(java.nio.ByteBuffer)", "134": "MappedFile::::viewed(java.nio.ByteBuffer)", "135": "MappedFile::::viewed(java.nio.ByteBuffer)", "136": "MappedFile::::viewed(java.nio.ByteBuffer)", "137": "MappedFile::::viewed(java.nio.ByteBuffer)", "138": "MappedFile::::viewed(java.nio.ByteBuffer)", "139": "MappedFile::::viewed(java.nio.ByteBuffer)", "140": "MappedFile::::viewed(java.nio.ByteBuffer)", "141": "MappedFile::::viewed(java.nio.ByteBuffer)", "142": "MappedFile::::viewed(java.nio.ByteBuffer)", "143": "MappedFile::::viewed(java.nio.ByteBuffer)", "144": "MappedFile::::viewed(java.nio.ByteBuffer)", "145": "MappedFile::::viewed(java.nio.ByteBuffer)", "146": "MappedFile::::viewed(java.nio.ByteBuffer)", "147": "MappedFile::::viewed(java.nio.ByteBuffer)", "149": "MappedFile::::getTotalMappedFiles()", "150": "MappedFile::::getTotalMappedFiles()", "151": "MappedFile::::getTotalMappedFiles()", "153": "MappedFile::::getTotalMappedVirtualMemory()", "154": "MappedFile::::getTotalMappedVirtualMemory()", "155": "MappedFile::::getTotalMappedVirtualMemory()", "157": "MappedFile::::init(java.lang.String,int,org.apache.rocketmq.store.TransientStorePool)", "158": "MappedFile::::init(java.lang.String,int,org.apache.rocketmq.store.TransientStorePool)", "159": "MappedFile::::init(java.lang.String,int,org.apache.rocketmq.store.TransientStorePool)", "160": "MappedFile::::init(java.lang.String,int,org.apache.rocketmq.store.TransientStorePool)", "161": "MappedFile::::init(java.lang.String,int,org.apache.rocketmq.store.TransientStorePool)", "162": "MappedFile::::init(java.lang.String,int,org.apache.rocketmq.store.TransientStorePool)", "163": "MappedFile::::init(java.lang.String,int,org.apache.rocketmq.store.TransientStorePool)", "165": "MappedFile::::init(java.lang.String,int)", "166": "MappedFile::::init(java.lang.String,int)", "167": "MappedFile::::init(java.lang.String,int)", "168": "MappedFile::::init(java.lang.String,int)", "169": "MappedFile::::init(java.lang.String,int)", "170": "MappedFile::::init(java.lang.String,int)", "171": "MappedFile::::init(java.lang.String,int)", "172": "MappedFile::::init(java.lang.String,int)", "173": "MappedFile::::init(java.lang.String,int)", "174": "MappedFile::::init(java.lang.String,int)", "175": "MappedFile::::init(java.lang.String,int)", "176": "MappedFile::::init(java.lang.String,int)", "177": "MappedFile::::init(java.lang.String,int)", "178": "MappedFile::::init(java.lang.String,int)", "179": "MappedFile::::init(java.lang.String,int)", "180": "MappedFile::::init(java.lang.String,int)", "181": "MappedFile::::init(java.lang.String,int)", "182": "MappedFile::::init(java.lang.String,int)", "183": "MappedFile::::init(java.lang.String,int)", "184": "MappedFile::::init(java.lang.String,int)", "185": "MappedFile::::init(java.lang.String,int)", "186": "MappedFile::::init(java.lang.String,int)", "187": "MappedFile::::init(java.lang.String,int)", "188": "MappedFile::::init(java.lang.String,int)", "189": "MappedFile::::init(java.lang.String,int)", "190": "MappedFile::::init(java.lang.String,int)", "191": "MappedFile::::init(java.lang.String,int)", "192": "MappedFile::::init(java.lang.String,int)", "193": "MappedFile::::init(java.lang.String,int)", "195": "MappedFile::::getLastModifiedTimestamp()", "196": "MappedFile::::getLastModifiedTimestamp()", "197": "MappedFile::::getLastModifiedTimestamp()", "199": "MappedFile::::getFileSize()", "200": "MappedFile::::getFileSize()", "201": "MappedFile::::getFileSize()", "203": "MappedFile::::getFileChannel()", "204": "MappedFile::::getFileChannel()", "205": "MappedFile::::getFileChannel()", "207": "MappedFile::::appendMessage(org.apache.rocketmq.store.MessageExtBrokerInner,org.apache.rocketmq.store.AppendMessageCallback)", "208": "MappedFile::::appendMessage(org.apache.rocketmq.store.MessageExtBrokerInner,org.apache.rocketmq.store.AppendMessageCallback)", "209": "MappedFile::::appendMessage(org.apache.rocketmq.store.MessageExtBrokerInner,org.apache.rocketmq.store.AppendMessageCallback)", "241": "MappedFile::::getFileFromOffset()", "242": "MappedFile::::getFileFromOffset()", "243": "MappedFile::::getFileFromOffset()", "245": "MappedFile::::appendMessage(byte[])", "246": "MappedFile::::appendMessage(byte[])", "247": "MappedFile::::appendMessage(byte[])", "248": "MappedFile::::appendMessage(byte[])", "249": "MappedFile::::appendMessage(byte[])", "250": "MappedFile::::appendMessage(byte[])", "251": "MappedFile::::appendMessage(byte[])", "252": "MappedFile::::appendMessage(byte[])", "253": "MappedFile::::appendMessage(byte[])", "254": "MappedFile::::appendMessage(byte[])", "255": "MappedFile::::appendMessage(byte[])", "256": "MappedFile::::appendMessage(byte[])", "257": "MappedFile::::appendMessage(byte[])", "258": "MappedFile::::appendMessage(byte[])", "259": "MappedFile::::appendMessage(byte[])", "260": "MappedFile::::appendMessage(byte[])", "268": "MappedFile::::appendMessage(byte[],int,int)", "269": "MappedFile::::appendMessage(byte[],int,int)", "270": "MappedFile::::appendMessage(byte[],int,int)", "271": "MappedFile::::appendMessage(byte[],int,int)", "272": "MappedFile::::appendMessage(byte[],int,int)", "273": "MappedFile::::appendMessage(byte[],int,int)", "274": "MappedFile::::appendMessage(byte[],int,int)", "275": "MappedFile::::appendMessage(byte[],int,int)", "276": "MappedFile::::appendMessage(byte[],int,int)", "277": "MappedFile::::appendMessage(byte[],int,int)", "278": "MappedFile::::appendMessage(byte[],int,int)", "279": "MappedFile::::appendMessage(byte[],int,int)", "280": "MappedFile::::appendMessage(byte[],int,int)", "281": "MappedFile::::appendMessage(byte[],int,int)", "282": "MappedFile::::appendMessage(byte[],int,int)", "283": "MappedFile::::appendMessage(byte[],int,int)", "291": "MappedFile::::flush(int)", "292": "MappedFile::::flush(int)", "293": "MappedFile::::flush(int)", "294": "MappedFile::::flush(int)", "295": "MappedFile::::flush(int)", "296": "MappedFile::::flush(int)", "297": "MappedFile::::flush(int)", "298": "MappedFile::::flush(int)", "299": "MappedFile::::flush(int)", "300": "MappedFile::::flush(int)", "301": "MappedFile::::flush(int)", "302": "MappedFile::::flush(int)", "303": "MappedFile::::flush(int)", "304": "MappedFile::::flush(int)", "305": "MappedFile::::flush(int)", "306": "MappedFile::::flush(int)", "307": "MappedFile::::flush(int)", "308": "MappedFile::::flush(int)", "309": "MappedFile::::flush(int)", "310": "MappedFile::::flush(int)", "311": "MappedFile::::flush(int)", "312": "MappedFile::::flush(int)", "313": "MappedFile::::flush(int)", "314": "MappedFile::::flush(int)", "315": "MappedFile::::flush(int)", "318": "MappedFile::::commit(int)", "319": "MappedFile::::commit(int)", "320": "MappedFile::::commit(int)", "321": "MappedFile::::commit(int)", "322": "MappedFile::::commit(int)", "323": "MappedFile::::commit(int)", "324": "MappedFile::::commit(int)", "325": "MappedFile::::commit(int)", "326": "MappedFile::::commit(int)", "327": "MappedFile::::commit(int)", "328": "MappedFile::::commit(int)", "329": "MappedFile::::commit(int)", "330": "MappedFile::::commit(int)", "331": "MappedFile::::commit(int)", "332": "MappedFile::::commit(int)", "333": "MappedFile::::commit(int)", "334": "MappedFile::::commit(int)", "335": "MappedFile::::commit(int)", "336": "MappedFile::::commit(int)", "337": "MappedFile::::commit(int)", "338": "MappedFile::::commit(int)", "339": "MappedFile::::commit(int)", "343": "MappedFile::::commit0(int)", "344": "MappedFile::::commit0(int)", "345": "MappedFile::::commit0(int)", "346": "MappedFile::::commit0(int)", "347": "MappedFile::::commit0(int)", "348": "MappedFile::::commit0(int)", "349": "MappedFile::::commit0(int)", "350": "MappedFile::::commit0(int)", "351": "MappedFile::::commit0(int)", "352": "MappedFile::::commit0(int)", "353": "MappedFile::::commit0(int)", "354": "MappedFile::::commit0(int)", "355": "MappedFile::::commit0(int)", "356": "MappedFile::::commit0(int)", "357": "MappedFile::::commit0(int)", "358": "MappedFile::::commit0(int)", "359": "MappedFile::::commit0(int)", "361": "MappedFile::::isAbleToFlush(int)", "362": "MappedFile::::isAbleToFlush(int)", "363": "MappedFile::::isAbleToFlush(int)", "364": "MappedFile::::isAbleToFlush(int)", "365": "MappedFile::::isAbleToFlush(int)", "366": "MappedFile::::isAbleToFlush(int)", "367": "MappedFile::::isAbleToFlush(int)", "368": "MappedFile::::isAbleToFlush(int)", "369": "MappedFile::::isAbleToFlush(int)", "370": "MappedFile::::isAbleToFlush(int)", "371": "MappedFile::::isAbleToFlush(int)", "372": "MappedFile::::isAbleToFlush(int)", "373": "MappedFile::::isAbleToFlush(int)", "374": "MappedFile::::isAbleToFlush(int)", "376": "MappedFile::::isAbleToCommit(int)", "377": "MappedFile::::isAbleToCommit(int)", "378": "MappedFile::::isAbleToCommit(int)", "379": "MappedFile::::isAbleToCommit(int)", "380": "MappedFile::::isAbleToCommit(int)", "381": "MappedFile::::isAbleToCommit(int)", "382": "MappedFile::::isAbleToCommit(int)", "383": "MappedFile::::isAbleToCommit(int)", "384": "MappedFile::::isAbleToCommit(int)", "385": "MappedFile::::isAbleToCommit(int)", "386": "MappedFile::::isAbleToCommit(int)", "387": "MappedFile::::isAbleToCommit(int)", "388": "MappedFile::::isAbleToCommit(int)", "389": "MappedFile::::isAbleToCommit(int)", "391": "MappedFile::::getFlushedPosition()", "392": "MappedFile::::getFlushedPosition()", "393": "MappedFile::::getFlushedPosition()", "395": "MappedFile::::setFlushedPosition(int)", "396": "MappedFile::::setFlushedPosition(int)", "397": "MappedFile::::setFlushedPosition(int)", "399": "MappedFile::::isFull()", "400": "MappedFile::::isFull()", "401": "MappedFile::::isFull()", "403": "MappedFile::::selectMappedBuffer(int,int)", "404": "MappedFile::::selectMappedBuffer(int,int)", "405": "MappedFile::::selectMappedBuffer(int,int)", "406": "MappedFile::::selectMappedBuffer(int,int)", "407": "MappedFile::::selectMappedBuffer(int,int)", "408": "MappedFile::::selectMappedBuffer(int,int)", "409": "MappedFile::::selectMappedBuffer(int,int)", "410": "MappedFile::::selectMappedBuffer(int,int)", "411": "MappedFile::::selectMappedBuffer(int,int)", "412": "MappedFile::::selectMappedBuffer(int,int)", "413": "MappedFile::::selectMappedBuffer(int,int)", "414": "MappedFile::::selectMappedBuffer(int,int)", "415": "MappedFile::::selectMappedBuffer(int,int)", "416": "MappedFile::::selectMappedBuffer(int,int)", "417": "MappedFile::::selectMappedBuffer(int,int)", "418": "MappedFile::::selectMappedBuffer(int,int)", "419": "MappedFile::::selectMappedBuffer(int,int)", "420": "MappedFile::::selectMappedBuffer(int,int)", "421": "MappedFile::::selectMappedBuffer(int,int)", "422": "MappedFile::::selectMappedBuffer(int,int)", "424": "MappedFile::::selectMappedBuffer(int)", "425": "MappedFile::::selectMappedBuffer(int)", "426": "MappedFile::::selectMappedBuffer(int)", "427": "MappedFile::::selectMappedBuffer(int)", "428": "MappedFile::::selectMappedBuffer(int)", "429": "MappedFile::::selectMappedBuffer(int)", "430": "MappedFile::::selectMappedBuffer(int)", "431": "MappedFile::::selectMappedBuffer(int)", "432": "MappedFile::::selectMappedBuffer(int)", "433": "MappedFile::::selectMappedBuffer(int)", "434": "MappedFile::::selectMappedBuffer(int)", "435": "MappedFile::::selectMappedBuffer(int)", "436": "MappedFile::::selectMappedBuffer(int)", "437": "MappedFile::::selectMappedBuffer(int)", "438": "MappedFile::::selectMappedBuffer(int)", "440": "MappedFile::::cleanup(long)", "441": "MappedFile::::cleanup(long)", "442": "MappedFile::::cleanup(long)", "443": "MappedFile::::cleanup(long)", "444": "MappedFile::::cleanup(long)", "445": "MappedFile::::cleanup(long)", "446": "MappedFile::::cleanup(long)", "447": "MappedFile::::cleanup(long)", "448": "MappedFile::::cleanup(long)", "449": "MappedFile::::cleanup(long)", "450": "MappedFile::::cleanup(long)", "451": "MappedFile::::cleanup(long)", "452": "MappedFile::::cleanup(long)", "453": "MappedFile::::cleanup(long)", "454": "MappedFile::::cleanup(long)", "455": "MappedFile::::cleanup(long)", "456": "MappedFile::::cleanup(long)", "457": "MappedFile::::cleanup(long)", "458": "MappedFile::::cleanup(long)", "459": "MappedFile::::cleanup(long)", "461": "MappedFile::::destroy(long)", "462": "MappedFile::::destroy(long)", "463": "MappedFile::::destroy(long)", "464": "MappedFile::::destroy(long)", "465": "MappedFile::::destroy(long)", "466": "MappedFile::::destroy(long)", "467": "MappedFile::::destroy(long)", "468": "MappedFile::::destroy(long)", "469": "MappedFile::::destroy(long)", "470": "MappedFile::::destroy(long)", "471": "MappedFile::::destroy(long)", "472": "MappedFile::::destroy(long)", "473": "MappedFile::::destroy(long)", "474": "MappedFile::::destroy(long)", "475": "MappedFile::::destroy(long)", "476": "MappedFile::::destroy(long)", "477": "MappedFile::::destroy(long)", "478": "MappedFile::::destroy(long)", "479": "MappedFile::::destroy(long)", "480": "MappedFile::::destroy(long)", "481": "MappedFile::::destroy(long)", "482": "MappedFile::::destroy(long)", "483": "MappedFile::::destroy(long)", "484": "MappedFile::::destroy(long)", "485": "MappedFile::::destroy(long)", "486": "MappedFile::::destroy(long)", "488": "MappedFile::::getWrotePosition()", "489": "MappedFile::::getWrotePosition()", "490": "MappedFile::::getWrotePosition()", "492": "MappedFile::::setWrotePosition(int)", "493": "MappedFile::::setWrotePosition(int)", "494": "MappedFile::::setWrotePosition(int)", "499": "MappedFile::::getReadPosition()", "500": "MappedFile::::getReadPosition()", "501": "MappedFile::::getReadPosition()", "503": "MappedFile::::setCommittedPosition(int)", "504": "MappedFile::::setCommittedPosition(int)", "505": "MappedFile::::setCommittedPosition(int)", "507": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "508": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "509": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "510": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "511": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "512": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "513": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "514": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "515": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "516": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "517": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "518": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "519": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "520": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "521": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "522": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "523": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "524": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "525": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "526": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "527": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "528": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "529": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "530": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "531": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "532": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "533": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "534": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "535": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "536": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "537": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "538": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "539": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "540": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "541": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "542": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "543": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "544": "MappedFile::::warmMappedFile(org.apache.rocketmq.store.config.FlushDiskType,int)", "546": "MappedFile::::getFileName()", "547": "MappedFile::::getFileName()", "548": "MappedFile::::getFileName()", "550": "MappedFile::::getMappedByteBuffer()", "551": "MappedFile::::getMappedByteBuffer()", "552": "MappedFile::::getMappedByteBuffer()", "554": "MappedFile::::sliceByteBuffer()", "555": "MappedFile::::sliceByteBuffer()", "556": "MappedFile::::sliceByteBuffer()", "558": "MappedFile::::getStoreTimestamp()", "559": "MappedFile::::getStoreTimestamp()", "560": "MappedFile::::getStoreTimestamp()", "562": "MappedFile::::isFirstCreateInQueue()", "563": "MappedFile::::isFirstCreateInQueue()", "564": "MappedFile::::isFirstCreateInQueue()", "566": "MappedFile::::setFirstCreateInQueue(boolean)", "567": "MappedFile::::setFirstCreateInQueue(boolean)", "568": "MappedFile::::setFirstCreateInQueue(boolean)", "570": "MappedFile::::mlock()", "571": "MappedFile::::mlock()", "572": "MappedFile::::mlock()", "573": "MappedFile::::mlock()", "574": "MappedFile::::mlock()", "575": "MappedFile::::mlock()", "576": "MappedFile::::mlock()", "577": "MappedFile::::mlock()", "578": "MappedFile::::mlock()", "579": "MappedFile::::mlock()", "580": "MappedFile::::mlock()", "581": "MappedFile::::mlock()", "582": "MappedFile::::mlock()", "583": "MappedFile::::mlock()", "585": "MappedFile::::munlock()", "586": "MappedFile::::munlock()", "587": "MappedFile::::munlock()", "588": "MappedFile::::munlock()", "589": "MappedFile::::munlock()", "590": "MappedFile::::munlock()", "591": "MappedFile::::munlock()", "594": "MappedFile::::getFile()", "595": "MappedFile::::getFile()", "596": "MappedFile::::getFile()", "598": "MappedFile::::toString()", "599": "MappedFile::::toString()", "600": "MappedFile::::toString()", "601": "MappedFile::::toString()"}, "test_reverse_method_lines_dic": {"35": "MappedFileTest::::testSelectMappedBuffer()", "36": "MappedFileTest::::testSelectMappedBuffer()", "37": "MappedFileTest::::testSelectMappedBuffer()", "38": "MappedFileTest::::testSelectMappedBuffer()", "39": "MappedFileTest::::testSelectMappedBuffer()", "40": "MappedFileTest::::testSelectMappedBuffer()", "41": "MappedFileTest::::testSelectMappedBuffer()", "42": "MappedFileTest::::testSelectMappedBuffer()", "43": "MappedFileTest::::testSelectMappedBuffer()", "44": "MappedFileTest::::testSelectMappedBuffer()", "45": "MappedFileTest::::testSelectMappedBuffer()", "46": "MappedFileTest::::testSelectMappedBuffer()", "47": "MappedFileTest::::testSelectMappedBuffer()", "48": "MappedFileTest::::testSelectMappedBuffer()", "49": "MappedFileTest::::testSelectMappedBuffer()", "50": "MappedFileTest::::testSelectMappedBuffer()", "51": "MappedFileTest::::testSelectMappedBuffer()", "52": "MappedFileTest::::testSelectMappedBuffer()", "53": "MappedFileTest::::testSelectMappedBuffer()", "55": "MappedFileTest::::destory()", "56": "MappedFileTest::::destory()", "57": "MappedFileTest::::destory()", "58": "MappedFileTest::::destory()", "59": "MappedFileTest::::destory()"}, "tests": [{"test_lines": [35, 53], "covered_lines": [45, 48, 51, 54, 56, 58, 60, 67, 69, 78, 79, 84, 85, 86, 94, 95, 96, 97, 98, 101, 104, 106, 107, 110, 113, 114, 115, 126, 133, 134, 135, 136, 137, 138, 142, 143, 144, 166, 167, 168, 170, 171, 173, 176, 178, 179, 180, 181, 189, 193, 246, 248, 250, 251, 254, 255, 256, 392, 425, 426, 427, 428, 429, 430, 431, 432, 433, 442, 448, 454, 455, 456, 457, 458, 462, 464, 466, 467, 469, 470, 471, 472, 473, 474, 477, 479, 489, 500]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/store/src/main/java/org/apache/rocketmq/store/index/IndexFile.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.store.index;\n", "\n", "import java.io.IOException;\n", "import java.nio.ByteBuffer;\n", "import java.nio.MappedByteBuffer;\n", "import java.nio.channels.FileChannel;\n", "import java.nio.channels.FileLock;\n", "import java.util.List;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.store.MappedFile;\n", "\n", "/**\n", " * IndexFile\uff08\u7d22\u5f15\u6587\u4ef6\uff09\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u4ee5\u901a\u8fc7key\u6216\u65f6\u95f4\u533a\u95f4\u6765\u67e5\u8be2\u6d88\u606f\u7684\u65b9\u6cd5\u3002Index\u6587\u4ef6\u7684\u5b58\u50a8\u4f4d\u7f6e\u662f\uff1a$HOME \\store\\index${fileName}\uff0c\n", " * \u6587\u4ef6\u540dfileName\u662f\u4ee5\u521b\u5efa\u65f6\u7684\u65f6\u95f4\u6233\u547d\u540d\u7684\uff0c\u56fa\u5b9a\u7684\u5355\u4e2aIndexFile\u6587\u4ef6\u5927\u5c0f\u7ea6\u4e3a400M\uff0c\u4e00\u4e2aIndexFile\u53ef\u4ee5\u4fdd\u5b58 2000W\u4e2a\u7d22\u5f15\uff0c\n", " * IndexFile\u7684\u5e95\u5c42\u5b58\u50a8\u8bbe\u8ba1\u4e3a\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5b9e\u73b0HashMap\u7ed3\u6784\uff0c\u6545rocketmq\u7684\u7d22\u5f15\u6587\u4ef6\u5176\u5e95\u5c42\u5b9e\u73b0\u4e3ahash\u7d22\u5f15\u3002\n", " */\n", "public class IndexFile {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n", "    private static int hashSlotSize = 4;\n", "    private static int indexSize = 20;\n", "    private static int invalidIndex = 0;\n", "    private final int hashSlotNum;\n", "    private final int indexNum;\n", "    private final MappedFile mappedFile;\n", "    private final FileChannel fileChannel;\n", "    private final MappedByteBuffer mappedByteBuffer;\n", "    private final IndexHeader indexHeader;\n", "\n", "    public IndexFile(final String fileName, final int hashSlotNum, final int indexNum,\n", "        final long endPhyOffset, final long endTimestamp) throws IOException {\n", "        int fileTotalSize =\n", "            IndexHeader.INDEX_HEADER_SIZE + (hashSlotNum * hashSlotSize) + (indexNum * indexSize);\n", "        this.mappedFile = new MappedFile(fileName, fileTotalSize);\n", "        this.fileChannel = this.mappedFile.getFileChannel();\n", "        this.mappedByteBuffer = this.mappedFile.getMappedByteBuffer();\n", "        this.hashSlotNum = hashSlotNum;\n", "        this.indexNum = indexNum;\n", "\n", "        ByteBuffer byteBuffer = this.mappedByteBuffer.slice();\n", "        this.indexHeader = new IndexHeader(byteBuffer);\n", "\n", "        if (endPhyOffset > 0) {\n", "            this.indexHeader.setBeginPhyOffset(endPhyOffset);\n", "            this.indexHeader.setEndPhyOffset(endPhyOffset);\n", "        }\n", "\n", "        if (endTimestamp > 0) {\n", "            this.indexHeader.setBeginTimestamp(endTimestamp);\n", "            this.indexHeader.setEndTimestamp(endTimestamp);\n", "        }\n", "    }\n", "\n", "    public String getFileName() {\n", "        return this.mappedFile.getFileName();\n", "    }\n", "\n", "    public void load() {\n", "        this.indexHeader.load();\n", "    }\n", "\n", "    public void flush() {\n", "        long beginTime = System.currentTimeMillis();\n", "        if (this.mappedFile.hold()) {\n", "            this.indexHeader.updateByteBuffer();\n", "            this.mappedByteBuffer.force();\n", "            this.mappedFile.release();\n", "            log.info(\"flush index file elapsed time(ms) \" + (System.currentTimeMillis() - beginTime));\n", "        }\n", "    }\n", "\n", "    public boolean isWriteFull() {\n", "        return this.indexHeader.getIndexCount() >= this.indexNum;\n", "    }\n", "\n", "    public boolean destroy(final long intervalForcibly) {\n", "        return this.mappedFile.destroy(intervalForcibly);\n", "    }\n", "\n", "    public boolean putKey(final String key, final long phyOffset, final long storeTimestamp) {\n", "        if (this.indexHeader.getIndexCount() < this.indexNum) {\n", "            int keyHash = indexKeyHashMethod(key);\n", "            int slotPos = keyHash % this.hashSlotNum;\n", "            int absSlotPos = IndexHeader.INDEX_HEADER_SIZE + slotPos * hashSlotSize;\n", "\n", "            FileLock fileLock = null;\n", "\n", "            try {\n", "\n", "                // fileLock = this.fileChannel.lock(absSlotPos, hashSlotSize,\n", "                // false);\n", "                int slotValue = this.mappedByteBuffer.getInt(absSlotPos);\n", "                if (slotValue <= invalidIndex || slotValue > this.indexHeader.getIndexCount()) {\n", "                    slotValue = invalidIndex;\n", "                }\n", "\n", "                long timeDiff = storeTimestamp - this.indexHeader.getBeginTimestamp();\n", "\n", "                timeDiff = timeDiff / 1000;\n", "\n", "                if (this.indexHeader.getBeginTimestamp() <= 0) {\n", "                    timeDiff = 0;\n", "                } else if (timeDiff > Integer.MAX_VALUE) {\n", "                    timeDiff = Integer.MAX_VALUE;\n", "                } else if (timeDiff < 0) {\n", "                    timeDiff = 0;\n", "                }\n", "\n", "                int absIndexPos =\n", "                    IndexHeader.INDEX_HEADER_SIZE + this.hashSlotNum * hashSlotSize\n", "                        + this.indexHeader.getIndexCount() * indexSize;\n", "\n", "                this.mappedByteBuffer.putInt(absIndexPos, keyHash);\n", "                this.mappedByteBuffer.putLong(absIndexPos + 4, phyOffset);\n", "                this.mappedByteBuffer.putInt(absIndexPos + 4 + 8, (int) timeDiff);\n", "                this.mappedByteBuffer.putInt(absIndexPos + 4 + 8 + 4, slotValue);\n", "\n", "                this.mappedByteBuffer.putInt(absSlotPos, this.indexHeader.getIndexCount());\n", "\n", "                if (this.indexHeader.getIndexCount() <= 1) {\n", "                    this.indexHeader.setBeginPhyOffset(phyOffset);\n", "                    this.indexHeader.setBeginTimestamp(storeTimestamp);\n", "                }\n", "\n", "                if (invalidIndex == slotValue) {\n", "                    this.indexHeader.incHashSlotCount();\n", "                }\n", "                this.indexHeader.incIndexCount();\n", "                this.indexHeader.setEndPhyOffset(phyOffset);\n", "                this.indexHeader.setEndTimestamp(storeTimestamp);\n", "\n", "                return true;\n", "            } catch (Exception e) {\n", "                log.error(\"putKey exception, Key: \" + key + \" KeyHashCode: \" + key.hashCode(), e);\n", "            } finally {\n", "                if (fileLock != null) {\n", "                    try {\n", "                        fileLock.release();\n", "                    } catch (IOException e) {\n", "                        log.error(\"Failed to release the lock\", e);\n", "                    }\n", "                }\n", "            }\n", "        } else {\n", "            log.warn(\"Over index file capacity: index count = \" + this.indexHeader.getIndexCount()\n", "                + \"; index max num = \" + this.indexNum);\n", "        }\n", "\n", "        return false;\n", "    }\n", "\n", "    public int indexKeyHashMethod(final String key) {\n", "        int keyHash = key.hashCode();\n", "        int keyHashPositive = Math.abs(keyHash);\n", "        if (keyHashPositive < 0)\n", "            keyHashPositive = 0;\n", "        return keyHashPositive;\n", "    }\n", "\n", "    public long getBeginTimestamp() {\n", "        return this.indexHeader.getBeginTimestamp();\n", "    }\n", "\n", "    public long getEndTimestamp() {\n", "        return this.indexHeader.getEndTimestamp();\n", "    }\n", "\n", "    public long getEndPhyOffset() {\n", "        return this.indexHeader.getEndPhyOffset();\n", "    }\n", "\n", "    public boolean isTimeMatched(final long begin, final long end) {\n", "        boolean result = begin < this.indexHeader.getBeginTimestamp() && end > this.indexHeader.getEndTimestamp();\n", "        result = result || (begin >= this.indexHeader.getBeginTimestamp() && begin <= this.indexHeader.getEndTimestamp());\n", "        result = result || (end >= this.indexHeader.getBeginTimestamp() && end <= this.indexHeader.getEndTimestamp());\n", "        return result;\n", "    }\n", "\n", "    public void selectPhyOffset(final List<Long> phyOffsets, final String key, final int maxNum,\n", "        final long begin, final long end, boolean lock) {\n", "        if (this.mappedFile.hold()) {\n", "            int keyHash = indexKeyHashMethod(key);\n", "            int slotPos = keyHash % this.hashSlotNum;\n", "            int absSlotPos = IndexHeader.INDEX_HEADER_SIZE + slotPos * hashSlotSize;\n", "\n", "            FileLock fileLock = null;\n", "            try {\n", "                if (lock) {\n", "                    // fileLock = this.fileChannel.lock(absSlotPos,\n", "                    // hashSlotSize, true);\n", "                }\n", "\n", "                int slotValue = this.mappedByteBuffer.getInt(absSlotPos);\n", "                // if (fileLock != null) {\n", "                // fileLock.release();\n", "                // fileLock = null;\n", "                // }\n", "\n", "                if (slotValue <= invalidIndex || slotValue > this.indexHeader.getIndexCount()\n", "                    || this.indexHeader.getIndexCount() <= 1) {\n", "                } else {\n", "                    for (int nextIndexToRead = slotValue; ; ) {\n", "                        if (phyOffsets.size() >= maxNum) {\n", "                            break;\n", "                        }\n", "\n", "                        int absIndexPos =\n", "                            IndexHeader.INDEX_HEADER_SIZE + this.hashSlotNum * hashSlotSize\n", "                                + nextIndexToRead * indexSize;\n", "\n", "                        int keyHashRead = this.mappedByteBuffer.getInt(absIndexPos);\n", "                        long phyOffsetRead = this.mappedByteBuffer.getLong(absIndexPos + 4);\n", "\n", "                        long timeDiff = (long) this.mappedByteBuffer.getInt(absIndexPos + 4 + 8);\n", "                        int prevIndexRead = this.mappedByteBuffer.getInt(absIndexPos + 4 + 8 + 4);\n", "\n", "                        if (timeDiff < 0) {\n", "                            break;\n", "                        }\n", "\n", "                        timeDiff *= 1000L;\n", "\n", "                        long timeRead = this.indexHeader.getBeginTimestamp() + timeDiff;\n", "                        boolean timeMatched = (timeRead >= begin) && (timeRead <= end);\n", "\n", "                        if (keyHash == keyHashRead && timeMatched) {\n", "                            phyOffsets.add(phyOffsetRead);\n", "                        }\n", "\n", "                        if (prevIndexRead <= invalidIndex\n", "                            || prevIndexRead > this.indexHeader.getIndexCount()\n", "                            || prevIndexRead == nextIndexToRead || timeRead < begin) {\n", "                            break;\n", "                        }\n", "\n", "                        nextIndexToRead = prevIndexRead;\n", "                    }\n", "                }\n", "            } catch (Exception e) {\n", "                log.error(\"selectPhyOffset exception \", e);\n", "            } finally {\n", "                if (fileLock != null) {\n", "                    try {\n", "                        fileLock.release();\n", "                    } catch (IOException e) {\n", "                        log.error(\"Failed to release the lock\", e);\n", "                    }\n", "                }\n", "\n", "                this.mappedFile.release();\n", "            }\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "/**\n", " * $Id: IndexFileTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $\n", " */\n", "package org.apache.rocketmq.store.index;\n", "\n", "import java.io.File;\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class IndexFileTest {\n", "    private final int HASH_SLOT_NUM = 100;\n", "    private final int INDEX_NUM = 400;\n", "\n", "    @Test\n", "    public void testPutKey() throws Exception {\n", "        IndexFile indexFile = new IndexFile(\"100\", HASH_SLOT_NUM, INDEX_NUM, 0, 0);\n", "        for (long i = 0; i < (INDEX_NUM - 1); i++) {\n", "            boolean putResult = indexFile.putKey(Long.toString(i), i, System.currentTimeMillis());\n", "            assertThat(putResult).isTrue();\n", "        }\n", "\n", "        // put over index file capacity.\n", "        boolean putResult = indexFile.putKey(Long.toString(400), 400, System.currentTimeMillis());\n", "        assertThat(putResult).isFalse();\n", "        indexFile.destroy(0);\n", "        File file = new File(\"100\");\n", "        UtilAll.deleteFile(file);\n", "    }\n", "\n", "    @Test\n", "    public void testSelectPhyOffset() throws Exception {\n", "        IndexFile indexFile = new IndexFile(\"200\", HASH_SLOT_NUM, INDEX_NUM, 0, 0);\n", "\n", "        for (long i = 0; i < (INDEX_NUM - 1); i++) {\n", "            boolean putResult = indexFile.putKey(Long.toString(i), i, System.currentTimeMillis());\n", "            assertThat(putResult).isTrue();\n", "        }\n", "\n", "        // put over index file capacity.\n", "        boolean putResult = indexFile.putKey(Long.toString(400), 400, System.currentTimeMillis());\n", "        assertThat(putResult).isFalse();\n", "\n", "        final List<Long> phyOffsets = new ArrayList<Long>();\n", "        indexFile.selectPhyOffset(phyOffsets, \"60\", 10, 0, Long.MAX_VALUE, true);\n", "        assertThat(phyOffsets).isNotEmpty();\n", "        assertThat(phyOffsets.size()).isEqualTo(1);\n", "        indexFile.destroy(0);\n", "        File file = new File(\"200\");\n", "        UtilAll.deleteFile(file);\n", "    }\n", "}\n"], "method_lines_dic": {"IndexFile::::getFileName()": [71, 73], "IndexFile::::load()": [75, 77], "IndexFile::::flush()": [79, 87], "IndexFile::::isWriteFull()": [89, 91], "IndexFile::::destroy(long)": [93, 95], "IndexFile::::putKey(java.lang.String,long,long)": [97, 167], "IndexFile::::indexKeyHashMethod(java.lang.String)": [169, 175], "IndexFile::::getBeginTimestamp()": [177, 179], "IndexFile::::getEndTimestamp()": [181, 183], "IndexFile::::getEndPhyOffset()": [185, 187], "IndexFile::::isTimeMatched(long,long)": [189, 194], "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)": [196, 270]}, "test_method_lines_dic": {"IndexFileTest::::testPutKey()": [36, 50], "IndexFileTest::::testSelectPhyOffset()": [52, 72]}, "reverse_method_lines_dic": {"71": "IndexFile::::getFileName()", "72": "IndexFile::::getFileName()", "73": "IndexFile::::getFileName()", "75": "IndexFile::::load()", "76": "IndexFile::::load()", "77": "IndexFile::::load()", "79": "IndexFile::::flush()", "80": "IndexFile::::flush()", "81": "IndexFile::::flush()", "82": "IndexFile::::flush()", "83": "IndexFile::::flush()", "84": "IndexFile::::flush()", "85": "IndexFile::::flush()", "86": "IndexFile::::flush()", "87": "IndexFile::::flush()", "89": "IndexFile::::isWriteFull()", "90": "IndexFile::::isWriteFull()", "91": "IndexFile::::isWriteFull()", "93": "IndexFile::::destroy(long)", "94": "IndexFile::::destroy(long)", "95": "IndexFile::::destroy(long)", "97": "IndexFile::::putKey(java.lang.String,long,long)", "98": "IndexFile::::putKey(java.lang.String,long,long)", "99": "IndexFile::::putKey(java.lang.String,long,long)", "100": "IndexFile::::putKey(java.lang.String,long,long)", "101": "IndexFile::::putKey(java.lang.String,long,long)", "102": "IndexFile::::putKey(java.lang.String,long,long)", "103": "IndexFile::::putKey(java.lang.String,long,long)", "104": "IndexFile::::putKey(java.lang.String,long,long)", "105": "IndexFile::::putKey(java.lang.String,long,long)", "106": "IndexFile::::putKey(java.lang.String,long,long)", "107": "IndexFile::::putKey(java.lang.String,long,long)", "108": "IndexFile::::putKey(java.lang.String,long,long)", "109": "IndexFile::::putKey(java.lang.String,long,long)", "110": "IndexFile::::putKey(java.lang.String,long,long)", "111": "IndexFile::::putKey(java.lang.String,long,long)", "112": "IndexFile::::putKey(java.lang.String,long,long)", "113": "IndexFile::::putKey(java.lang.String,long,long)", "114": "IndexFile::::putKey(java.lang.String,long,long)", "115": "IndexFile::::putKey(java.lang.String,long,long)", "116": "IndexFile::::putKey(java.lang.String,long,long)", "117": "IndexFile::::putKey(java.lang.String,long,long)", "118": "IndexFile::::putKey(java.lang.String,long,long)", "119": "IndexFile::::putKey(java.lang.String,long,long)", "120": "IndexFile::::putKey(java.lang.String,long,long)", "121": "IndexFile::::putKey(java.lang.String,long,long)", "122": "IndexFile::::putKey(java.lang.String,long,long)", "123": "IndexFile::::putKey(java.lang.String,long,long)", "124": "IndexFile::::putKey(java.lang.String,long,long)", "125": "IndexFile::::putKey(java.lang.String,long,long)", "126": "IndexFile::::putKey(java.lang.String,long,long)", "127": "IndexFile::::putKey(java.lang.String,long,long)", "128": "IndexFile::::putKey(java.lang.String,long,long)", "129": "IndexFile::::putKey(java.lang.String,long,long)", "130": "IndexFile::::putKey(java.lang.String,long,long)", "131": "IndexFile::::putKey(java.lang.String,long,long)", "132": "IndexFile::::putKey(java.lang.String,long,long)", "133": "IndexFile::::putKey(java.lang.String,long,long)", "134": "IndexFile::::putKey(java.lang.String,long,long)", "135": "IndexFile::::putKey(java.lang.String,long,long)", "136": "IndexFile::::putKey(java.lang.String,long,long)", "137": "IndexFile::::putKey(java.lang.String,long,long)", "138": "IndexFile::::putKey(java.lang.String,long,long)", "139": "IndexFile::::putKey(java.lang.String,long,long)", "140": "IndexFile::::putKey(java.lang.String,long,long)", "141": "IndexFile::::putKey(java.lang.String,long,long)", "142": "IndexFile::::putKey(java.lang.String,long,long)", "143": "IndexFile::::putKey(java.lang.String,long,long)", "144": "IndexFile::::putKey(java.lang.String,long,long)", "145": "IndexFile::::putKey(java.lang.String,long,long)", "146": "IndexFile::::putKey(java.lang.String,long,long)", "147": "IndexFile::::putKey(java.lang.String,long,long)", "148": "IndexFile::::putKey(java.lang.String,long,long)", "149": "IndexFile::::putKey(java.lang.String,long,long)", "150": "IndexFile::::putKey(java.lang.String,long,long)", "151": "IndexFile::::putKey(java.lang.String,long,long)", "152": "IndexFile::::putKey(java.lang.String,long,long)", "153": "IndexFile::::putKey(java.lang.String,long,long)", "154": "IndexFile::::putKey(java.lang.String,long,long)", "155": "IndexFile::::putKey(java.lang.String,long,long)", "156": "IndexFile::::putKey(java.lang.String,long,long)", "157": "IndexFile::::putKey(java.lang.String,long,long)", "158": "IndexFile::::putKey(java.lang.String,long,long)", "159": "IndexFile::::putKey(java.lang.String,long,long)", "160": "IndexFile::::putKey(java.lang.String,long,long)", "161": "IndexFile::::putKey(java.lang.String,long,long)", "162": "IndexFile::::putKey(java.lang.String,long,long)", "163": "IndexFile::::putKey(java.lang.String,long,long)", "164": "IndexFile::::putKey(java.lang.String,long,long)", "165": "IndexFile::::putKey(java.lang.String,long,long)", "166": "IndexFile::::putKey(java.lang.String,long,long)", "167": "IndexFile::::putKey(java.lang.String,long,long)", "169": "IndexFile::::indexKeyHashMethod(java.lang.String)", "170": "IndexFile::::indexKeyHashMethod(java.lang.String)", "171": "IndexFile::::indexKeyHashMethod(java.lang.String)", "172": "IndexFile::::indexKeyHashMethod(java.lang.String)", "173": "IndexFile::::indexKeyHashMethod(java.lang.String)", "174": "IndexFile::::indexKeyHashMethod(java.lang.String)", "175": "IndexFile::::indexKeyHashMethod(java.lang.String)", "177": "IndexFile::::getBeginTimestamp()", "178": "IndexFile::::getBeginTimestamp()", "179": "IndexFile::::getBeginTimestamp()", "181": "IndexFile::::getEndTimestamp()", "182": "IndexFile::::getEndTimestamp()", "183": "IndexFile::::getEndTimestamp()", "185": "IndexFile::::getEndPhyOffset()", "186": "IndexFile::::getEndPhyOffset()", "187": "IndexFile::::getEndPhyOffset()", "189": "IndexFile::::isTimeMatched(long,long)", "190": "IndexFile::::isTimeMatched(long,long)", "191": "IndexFile::::isTimeMatched(long,long)", "192": "IndexFile::::isTimeMatched(long,long)", "193": "IndexFile::::isTimeMatched(long,long)", "194": "IndexFile::::isTimeMatched(long,long)", "196": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "197": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "198": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "199": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "200": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "201": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "202": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "203": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "204": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "205": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "206": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "207": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "208": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "209": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "210": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "211": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "212": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "213": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "214": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "215": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "216": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "217": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "218": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "219": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "220": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "221": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "222": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "223": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "224": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "225": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "226": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "227": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "228": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "229": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "230": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "231": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "232": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "233": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "234": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "235": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "236": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "237": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "238": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "239": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "240": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "241": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "242": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "243": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "244": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "245": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "246": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "247": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "248": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "249": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "250": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "251": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "252": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "253": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "254": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "255": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "256": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "257": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "258": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "259": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "260": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "261": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "262": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "263": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "264": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "265": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "266": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "267": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "268": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "269": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)", "270": "IndexFile::::selectPhyOffset(java.util.List<java.lang.Long>,java.lang.String,int,long,long,boolean)"}, "test_reverse_method_lines_dic": {"36": "IndexFileTest::::testPutKey()", "37": "IndexFileTest::::testPutKey()", "38": "IndexFileTest::::testPutKey()", "39": "IndexFileTest::::testPutKey()", "40": "IndexFileTest::::testPutKey()", "41": "IndexFileTest::::testPutKey()", "42": "IndexFileTest::::testPutKey()", "43": "IndexFileTest::::testPutKey()", "44": "IndexFileTest::::testPutKey()", "45": "IndexFileTest::::testPutKey()", "46": "IndexFileTest::::testPutKey()", "47": "IndexFileTest::::testPutKey()", "48": "IndexFileTest::::testPutKey()", "49": "IndexFileTest::::testPutKey()", "50": "IndexFileTest::::testPutKey()", "52": "IndexFileTest::::testSelectPhyOffset()", "53": "IndexFileTest::::testSelectPhyOffset()", "54": "IndexFileTest::::testSelectPhyOffset()", "55": "IndexFileTest::::testSelectPhyOffset()", "56": "IndexFileTest::::testSelectPhyOffset()", "57": "IndexFileTest::::testSelectPhyOffset()", "58": "IndexFileTest::::testSelectPhyOffset()", "59": "IndexFileTest::::testSelectPhyOffset()", "60": "IndexFileTest::::testSelectPhyOffset()", "61": "IndexFileTest::::testSelectPhyOffset()", "62": "IndexFileTest::::testSelectPhyOffset()", "63": "IndexFileTest::::testSelectPhyOffset()", "64": "IndexFileTest::::testSelectPhyOffset()", "65": "IndexFileTest::::testSelectPhyOffset()", "66": "IndexFileTest::::testSelectPhyOffset()", "67": "IndexFileTest::::testSelectPhyOffset()", "68": "IndexFileTest::::testSelectPhyOffset()", "69": "IndexFileTest::::testSelectPhyOffset()", "70": "IndexFileTest::::testSelectPhyOffset()", "71": "IndexFileTest::::testSelectPhyOffset()", "72": "IndexFileTest::::testSelectPhyOffset()"}, "tests": [{"test_lines": [36, 50], "covered_lines": [36, 37, 38, 39, 48, 49, 51, 52, 53, 54, 55, 57, 58, 60, 65, 69, 94, 98, 99, 100, 101, 103, 109, 110, 111, 114, 116, 118, 119, 120, 122, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 142, 143, 145, 146, 147, 149, 153, 162, 166, 170, 171, 172, 174]}, {"test_lines": [52, 72], "covered_lines": [36, 37, 38, 39, 48, 49, 51, 52, 53, 54, 55, 57, 58, 60, 65, 69, 94, 98, 99, 100, 101, 103, 109, 110, 111, 114, 116, 118, 119, 120, 122, 126, 128, 130, 131, 132, 133, 135, 137, 138, 139, 142, 143, 145, 146, 147, 149, 153, 162, 166, 170, 171, 172, 174, 198, 199, 200, 201, 203, 205, 210, 216, 217, 219, 220, 224, 228, 229, 231, 232, 234, 238, 240, 241, 243, 244, 247, 248, 253, 254, 259, 267, 268, 270]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/store/src/main/java/org/apache/rocketmq/store/ha/WaitNotifyObject.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.store.ha;\n", "\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "\n", "public class WaitNotifyObject {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n", "\n", "    protected final HashMap<Long/* thread id */, Boolean/* notified */> waitingThreadTable =\n", "        new HashMap<Long, Boolean>(16);\n", "\n", "    protected volatile boolean hasNotified = false;\n", "\n", "    public void wakeup() {\n", "        synchronized (this) {\n", "            if (!this.hasNotified) {\n", "                this.hasNotified = true;\n", "                this.notify();\n", "            }\n", "        }\n", "    }\n", "\n", "    protected void waitForRunning(long interval) {\n", "        synchronized (this) {\n", "            if (this.hasNotified) {\n", "                this.hasNotified = false;\n", "                this.onWaitEnd();\n", "                return;\n", "            }\n", "\n", "            try {\n", "                this.wait(interval);\n", "            } catch (InterruptedException e) {\n", "                log.error(\"Interrupted\", e);\n", "            } finally {\n", "                this.hasNotified = false;\n", "                this.onWaitEnd();\n", "            }\n", "        }\n", "    }\n", "\n", "    protected void onWaitEnd() {\n", "    }\n", "\n", "    public void wakeupAll() {\n", "        synchronized (this) {\n", "            boolean needNotify = false;\n", "\n", "            for (Map.Entry<Long,Boolean> entry : this.waitingThreadTable.entrySet()) {\n", "                needNotify = needNotify || !entry.getValue();\n", "                entry.setValue(true);\n", "            }\n", "\n", "            if (needNotify) {\n", "                this.notifyAll();\n", "            }\n", "        }\n", "    }\n", "\n", "    public void allWaitForRunning(long interval) {\n", "        long currentThreadId = Thread.currentThread().getId();\n", "        synchronized (this) {\n", "            Boolean notified = this.waitingThreadTable.get(currentThreadId);\n", "            if (notified != null && notified) {\n", "                this.waitingThreadTable.put(currentThreadId, false);\n", "                this.onWaitEnd();\n", "                return;\n", "            }\n", "\n", "            try {\n", "                this.wait(interval);\n", "            } catch (InterruptedException e) {\n", "                log.error(\"Interrupted\", e);\n", "            } finally {\n", "                this.waitingThreadTable.put(currentThreadId, false);\n", "                this.onWaitEnd();\n", "            }\n", "        }\n", "    }\n", "\n", "    public void removeFromWaitingThreadTable() {\n", "        long currentThreadId = Thread.currentThread().getId();\n", "        synchronized (this) {\n", "            this.waitingThreadTable.remove(currentThreadId);\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.store.ha;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "import static org.junit.Assert.*;\n", "\n", "public class WaitNotifyObjectTest {\n", "    @Test\n", "    public void removeFromWaitingThreadTable() throws Exception {\n", "        final WaitNotifyObject waitNotifyObject = new WaitNotifyObject();\n", "        for (int i = 0; i < 5; i++) {\n", "            Thread t = new Thread(new Runnable() {\n", "                @Override\n", "                public void run() {\n", "                    waitNotifyObject.allWaitForRunning(100);\n", "                    waitNotifyObject.removeFromWaitingThreadTable();\n", "                }\n", "            });\n", "            t.start();\n", "            t.join();\n", "        }\n", "        Assert.assertEquals(0, waitNotifyObject.waitingThreadTable.size());\n", "    }\n", "\n", "}\n"], "method_lines_dic": {"WaitNotifyObject::::wakeup()": [34, 41], "WaitNotifyObject::::waitForRunning(long)": [43, 60], "WaitNotifyObject::::onWaitEnd()": [62, 63], "WaitNotifyObject::::wakeupAll()": [65, 78], "WaitNotifyObject::::allWaitForRunning(long)": [80, 99], "WaitNotifyObject::::removeFromWaitingThreadTable()": [101, 106]}, "test_method_lines_dic": {"WaitNotifyObjectTest::::removeFromWaitingThreadTable()": [26, 41]}, "reverse_method_lines_dic": {"34": "WaitNotifyObject::::wakeup()", "35": "WaitNotifyObject::::wakeup()", "36": "WaitNotifyObject::::wakeup()", "37": "WaitNotifyObject::::wakeup()", "38": "WaitNotifyObject::::wakeup()", "39": "WaitNotifyObject::::wakeup()", "40": "WaitNotifyObject::::wakeup()", "41": "WaitNotifyObject::::wakeup()", "43": "WaitNotifyObject::::waitForRunning(long)", "44": "WaitNotifyObject::::waitForRunning(long)", "45": "WaitNotifyObject::::waitForRunning(long)", "46": "WaitNotifyObject::::waitForRunning(long)", "47": "WaitNotifyObject::::waitForRunning(long)", "48": "WaitNotifyObject::::waitForRunning(long)", "49": "WaitNotifyObject::::waitForRunning(long)", "50": "WaitNotifyObject::::waitForRunning(long)", "51": "WaitNotifyObject::::waitForRunning(long)", "52": "WaitNotifyObject::::waitForRunning(long)", "53": "WaitNotifyObject::::waitForRunning(long)", "54": "WaitNotifyObject::::waitForRunning(long)", "55": "WaitNotifyObject::::waitForRunning(long)", "56": "WaitNotifyObject::::waitForRunning(long)", "57": "WaitNotifyObject::::waitForRunning(long)", "58": "WaitNotifyObject::::waitForRunning(long)", "59": "WaitNotifyObject::::waitForRunning(long)", "60": "WaitNotifyObject::::waitForRunning(long)", "62": "WaitNotifyObject::::onWaitEnd()", "63": "WaitNotifyObject::::onWaitEnd()", "65": "WaitNotifyObject::::wakeupAll()", "66": "WaitNotifyObject::::wakeupAll()", "67": "WaitNotifyObject::::wakeupAll()", "68": "WaitNotifyObject::::wakeupAll()", "69": "WaitNotifyObject::::wakeupAll()", "70": "WaitNotifyObject::::wakeupAll()", "71": "WaitNotifyObject::::wakeupAll()", "72": "WaitNotifyObject::::wakeupAll()", "73": "WaitNotifyObject::::wakeupAll()", "74": "WaitNotifyObject::::wakeupAll()", "75": "WaitNotifyObject::::wakeupAll()", "76": "WaitNotifyObject::::wakeupAll()", "77": "WaitNotifyObject::::wakeupAll()", "78": "WaitNotifyObject::::wakeupAll()", "80": "WaitNotifyObject::::allWaitForRunning(long)", "81": "WaitNotifyObject::::allWaitForRunning(long)", "82": "WaitNotifyObject::::allWaitForRunning(long)", "83": "WaitNotifyObject::::allWaitForRunning(long)", "84": "WaitNotifyObject::::allWaitForRunning(long)", "85": "WaitNotifyObject::::allWaitForRunning(long)", "86": "WaitNotifyObject::::allWaitForRunning(long)", "87": "WaitNotifyObject::::allWaitForRunning(long)", "88": "WaitNotifyObject::::allWaitForRunning(long)", "89": "WaitNotifyObject::::allWaitForRunning(long)", "90": "WaitNotifyObject::::allWaitForRunning(long)", "91": "WaitNotifyObject::::allWaitForRunning(long)", "92": "WaitNotifyObject::::allWaitForRunning(long)", "93": "WaitNotifyObject::::allWaitForRunning(long)", "94": "WaitNotifyObject::::allWaitForRunning(long)", "95": "WaitNotifyObject::::allWaitForRunning(long)", "96": "WaitNotifyObject::::allWaitForRunning(long)", "97": "WaitNotifyObject::::allWaitForRunning(long)", "98": "WaitNotifyObject::::allWaitForRunning(long)", "99": "WaitNotifyObject::::allWaitForRunning(long)", "101": "WaitNotifyObject::::removeFromWaitingThreadTable()", "102": "WaitNotifyObject::::removeFromWaitingThreadTable()", "103": "WaitNotifyObject::::removeFromWaitingThreadTable()", "104": "WaitNotifyObject::::removeFromWaitingThreadTable()", "105": "WaitNotifyObject::::removeFromWaitingThreadTable()", "106": "WaitNotifyObject::::removeFromWaitingThreadTable()"}, "test_reverse_method_lines_dic": {"26": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "27": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "28": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "29": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "30": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "31": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "32": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "33": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "34": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "35": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "36": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "37": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "38": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "39": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "40": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()", "41": "WaitNotifyObjectTest::::removeFromWaitingThreadTable()"}, "tests": [{"test_lines": [26, 41], "covered_lines": [26, 27, 29, 32, 63, 81, 82, 83, 84, 91, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.store.schedule;\n", "\n", "import java.util.HashMap;\n", "import java.util.Iterator;\n", "import java.util.Map;\n", "import java.util.Timer;\n", "import java.util.TimerTask;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "import java.util.concurrent.ConcurrentMap;\n", "import java.util.concurrent.atomic.AtomicBoolean;\n", "import org.apache.rocketmq.common.ConfigManager;\n", "import org.apache.rocketmq.common.TopicFilterType;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.common.topic.TopicValidator;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.common.message.MessageAccessor;\n", "import org.apache.rocketmq.common.message.MessageConst;\n", "import org.apache.rocketmq.common.message.MessageDecoder;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.running.RunningStats;\n", "import org.apache.rocketmq.store.ConsumeQueue;\n", "import org.apache.rocketmq.store.ConsumeQueueExt;\n", "import org.apache.rocketmq.store.DefaultMessageStore;\n", "import org.apache.rocketmq.store.MessageExtBrokerInner;\n", "import org.apache.rocketmq.store.MessageStore;\n", "import org.apache.rocketmq.store.PutMessageResult;\n", "import org.apache.rocketmq.store.PutMessageStatus;\n", "import org.apache.rocketmq.store.SelectMappedBufferResult;\n", "import org.apache.rocketmq.store.config.StorePathConfigHelper;\n", "\n", "public class ScheduleMessageService extends ConfigManager {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n", "\n", "    private static final long FIRST_DELAY_TIME = 1000L;\n", "    private static final long DELAY_FOR_A_WHILE = 100L;\n", "    private static final long DELAY_FOR_A_PERIOD = 10000L;\n", "\n", "    private final ConcurrentMap<Integer /* level */, Long/* delay timeMillis */> delayLevelTable =\n", "        new ConcurrentHashMap<Integer, Long>(32);\n", "\n", "    private final ConcurrentMap<Integer /* level */, Long/* offset */> offsetTable =\n", "        new ConcurrentHashMap<Integer, Long>(32);\n", "    private final DefaultMessageStore defaultMessageStore;\n", "    private final AtomicBoolean started = new AtomicBoolean(false);\n", "    private Timer timer;\n", "    private MessageStore writeMessageStore;\n", "    private int maxDelayLevel;\n", "\n", "    public ScheduleMessageService(final DefaultMessageStore defaultMessageStore) {\n", "        this.defaultMessageStore = defaultMessageStore;\n", "        this.writeMessageStore = defaultMessageStore;\n", "    }\n", "\n", "    public static int queueId2DelayLevel(final int queueId) {\n", "        return queueId + 1;\n", "    }\n", "\n", "    public static int delayLevel2QueueId(final int delayLevel) {\n", "        return delayLevel - 1;\n", "    }\n", "\n", "    /**\n", "     * @param writeMessageStore\n", "     *     the writeMessageStore to set\n", "     */\n", "    public void setWriteMessageStore(MessageStore writeMessageStore) {\n", "        this.writeMessageStore = writeMessageStore;\n", "    }\n", "\n", "    public void buildRunningStats(HashMap<String, String> stats) {\n", "        Iterator<Map.Entry<Integer, Long>> it = this.offsetTable.entrySet().iterator();\n", "        while (it.hasNext()) {\n", "            Map.Entry<Integer, Long> next = it.next();\n", "            int queueId = delayLevel2QueueId(next.getKey());\n", "            long delayOffset = next.getValue();\n", "            long maxOffset = this.defaultMessageStore.getMaxOffsetInQueue(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC, queueId);\n", "            String value = String.format(\"%d,%d\", delayOffset, maxOffset);\n", "            String key = String.format(\"%s_%d\", RunningStats.scheduleMessageOffset.name(), next.getKey());\n", "            stats.put(key, value);\n", "        }\n", "    }\n", "\n", "    private void updateOffset(int delayLevel, long offset) {\n", "        this.offsetTable.put(delayLevel, offset);\n", "    }\n", "\n", "    public long computeDeliverTimestamp(final int delayLevel, final long storeTimestamp) {\n", "        Long time = this.delayLevelTable.get(delayLevel);\n", "        if (time != null) {\n", "            return time + storeTimestamp;\n", "        }\n", "\n", "        return storeTimestamp + 1000;\n", "    }\n", "\n", "    public void start() {\n", "        if (started.compareAndSet(false, true)) {\n", "            this.timer = new Timer(\"ScheduleMessageTimerThread\", true);\n", "            for (Map.Entry<Integer, Long> entry : this.delayLevelTable.entrySet()) {\n", "                Integer level = entry.getKey();\n", "                Long timeDelay = entry.getValue();\n", "                Long offset = this.offsetTable.get(level);\n", "                if (null == offset) {\n", "                    offset = 0L;\n", "                }\n", "\n", "                if (timeDelay != null) {\n", "                    this.timer.schedule(new DeliverDelayedMessageTimerTask(level, offset), FIRST_DELAY_TIME);\n", "                }\n", "            }\n", "\n", "            this.timer.scheduleAtFixedRate(new TimerTask() {\n", "\n", "                @Override\n", "                public void run() {\n", "                    try {\n", "                        if (started.get()) ScheduleMessageService.this.persist();\n", "                    } catch (Throwable e) {\n", "                        log.error(\"scheduleAtFixedRate flush exception\", e);\n", "                    }\n", "                }\n", "            }, 10000, this.defaultMessageStore.getMessageStoreConfig().getFlushDelayOffsetInterval());\n", "        }\n", "    }\n", "\n", "    public void shutdown() {\n", "        if (this.started.compareAndSet(true, false)) {\n", "            if (null != this.timer)\n", "                this.timer.cancel();\n", "        }\n", "\n", "    }\n", "\n", "    public boolean isStarted() {\n", "        return started.get();\n", "    }\n", "\n", "    public int getMaxDelayLevel() {\n", "        return maxDelayLevel;\n", "    }\n", "\n", "    public String encode() {\n", "        return this.encode(false);\n", "    }\n", "\n", "    public boolean load() {\n", "        boolean result = super.load();\n", "        result = result && this.parseDelayLevel();\n", "        return result;\n", "    }\n", "\n", "    @Override\n", "    public String configFilePath() {\n", "        return StorePathConfigHelper.getDelayOffsetStorePath(this.defaultMessageStore.getMessageStoreConfig()\n", "            .getStorePathRootDir());\n", "    }\n", "\n", "    @Override\n", "    public void decode(String jsonString) {\n", "        if (jsonString != null) {\n", "            DelayOffsetSerializeWrapper delayOffsetSerializeWrapper =\n", "                DelayOffsetSerializeWrapper.fromJson(jsonString, DelayOffsetSerializeWrapper.class);\n", "            if (delayOffsetSerializeWrapper != null) {\n", "                this.offsetTable.putAll(delayOffsetSerializeWrapper.getOffsetTable());\n", "            }\n", "        }\n", "    }\n", "\n", "    public String encode(final boolean prettyFormat) {\n", "        DelayOffsetSerializeWrapper delayOffsetSerializeWrapper = new DelayOffsetSerializeWrapper();\n", "        delayOffsetSerializeWrapper.setOffsetTable(this.offsetTable);\n", "        return delayOffsetSerializeWrapper.toJson(prettyFormat);\n", "    }\n", "\n", "    public boolean parseDelayLevel() {\n", "        HashMap<String, Long> timeUnitTable = new HashMap<String, Long>();\n", "        timeUnitTable.put(\"s\", 1000L);\n", "        timeUnitTable.put(\"m\", 1000L * 60);\n", "        timeUnitTable.put(\"h\", 1000L * 60 * 60);\n", "        timeUnitTable.put(\"d\", 1000L * 60 * 60 * 24);\n", "\n", "        String levelString = this.defaultMessageStore.getMessageStoreConfig().getMessageDelayLevel();\n", "        try {\n", "            String[] levelArray = levelString.split(\" \");\n", "            for (int i = 0; i < levelArray.length; i++) {\n", "                String value = levelArray[i];\n", "                String ch = value.substring(value.length() - 1);\n", "                Long tu = timeUnitTable.get(ch);\n", "\n", "                int level = i + 1;\n", "                if (level > this.maxDelayLevel) {\n", "                    this.maxDelayLevel = level;\n", "                }\n", "                long num = Long.parseLong(value.substring(0, value.length() - 1));\n", "                long delayTimeMillis = tu * num;\n", "                this.delayLevelTable.put(level, delayTimeMillis);\n", "            }\n", "        } catch (Exception e) {\n", "            log.error(\"parseDelayLevel exception\", e);\n", "            log.info(\"levelString String = {}\", levelString);\n", "            return false;\n", "        }\n", "\n", "        return true;\n", "    }\n", "\n", "    class DeliverDelayedMessageTimerTask extends TimerTask {\n", "        private final int delayLevel;\n", "        private final long offset;\n", "\n", "        public DeliverDelayedMessageTimerTask(int delayLevel, long offset) {\n", "            this.delayLevel = delayLevel;\n", "            this.offset = offset;\n", "        }\n", "\n", "        @Override\n", "        public void run() {\n", "            try {\n", "                if (isStarted()) {\n", "                    this.executeOnTimeup();\n", "                }\n", "            } catch (Exception e) {\n", "                // XXX: warn and notify me\n", "                log.error(\"ScheduleMessageService, executeOnTimeup exception\", e);\n", "                ScheduleMessageService.this.timer.schedule(new DeliverDelayedMessageTimerTask(\n", "                    this.delayLevel, this.offset), DELAY_FOR_A_PERIOD);\n", "            }\n", "        }\n", "\n", "        /**\n", "         * @return\n", "         */\n", "        private long correctDeliverTimestamp(final long now, final long deliverTimestamp) {\n", "\n", "            long result = deliverTimestamp;\n", "\n", "            long maxTimestamp = now + ScheduleMessageService.this.delayLevelTable.get(this.delayLevel);\n", "            if (deliverTimestamp > maxTimestamp) {\n", "                result = now;\n", "            }\n", "\n", "            return result;\n", "        }\n", "\n", "        public void executeOnTimeup() {\n", "            ConsumeQueue cq =\n", "                ScheduleMessageService.this.defaultMessageStore.findConsumeQueue(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC,\n", "                    delayLevel2QueueId(delayLevel));\n", "\n", "            long failScheduleOffset = offset;\n", "\n", "            if (cq != null) {\n", "                SelectMappedBufferResult bufferCQ = cq.getIndexBuffer(this.offset);\n", "                if (bufferCQ != null) {\n", "                    try {\n", "                        long nextOffset = offset;\n", "                        int i = 0;\n", "                        ConsumeQueueExt.CqExtUnit cqExtUnit = new ConsumeQueueExt.CqExtUnit();\n", "                        for (; i < bufferCQ.getSize(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {\n", "                            long offsetPy = bufferCQ.getByteBuffer().getLong();\n", "                            int sizePy = bufferCQ.getByteBuffer().getInt();\n", "                            long tagsCode = bufferCQ.getByteBuffer().getLong();\n", "\n", "                            if (cq.isExtAddr(tagsCode)) {\n", "                                if (cq.getExt(tagsCode, cqExtUnit)) {\n", "                                    tagsCode = cqExtUnit.getTagsCode();\n", "                                } else {\n", "                                    //can't find ext content.So re compute tags code.\n", "                                    log.error(\"[BUG] can't find consume queue extend file content!addr={}, offsetPy={}, sizePy={}\",\n", "                                        tagsCode, offsetPy, sizePy);\n", "                                    long msgStoreTime = defaultMessageStore.getCommitLog().pickupStoreTimestamp(offsetPy, sizePy);\n", "                                    tagsCode = computeDeliverTimestamp(delayLevel, msgStoreTime);\n", "                                }\n", "                            }\n", "\n", "                            long now = System.currentTimeMillis();\n", "                            long deliverTimestamp = this.correctDeliverTimestamp(now, tagsCode);\n", "\n", "                            nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);\n", "\n", "                            long countdown = deliverTimestamp - now;\n", "\n", "                            if (countdown <= 0) {\n", "                                MessageExt msgExt =\n", "                                    ScheduleMessageService.this.defaultMessageStore.lookMessageByOffset(\n", "                                        offsetPy, sizePy);\n", "\n", "                                if (msgExt != null) {\n", "                                    try {\n", "                                        MessageExtBrokerInner msgInner = this.messageTimeup(msgExt);\n", "                                        if (TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC.equals(msgInner.getTopic())) {\n", "                                            log.error(\"[BUG] the real topic of schedule msg is {}, discard the msg. msg={}\",\n", "                                                    msgInner.getTopic(), msgInner);\n", "                                            continue;\n", "                                        }\n", "                                        PutMessageResult putMessageResult =\n", "                                            ScheduleMessageService.this.writeMessageStore\n", "                                                .putMessage(msgInner);\n", "\n", "                                        if (putMessageResult != null\n", "                                            && putMessageResult.getPutMessageStatus() == PutMessageStatus.PUT_OK) {\n", "                                            continue;\n", "                                        } else {\n", "                                            // XXX: warn and notify me\n", "                                            log.error(\n", "                                                \"ScheduleMessageService, a message time up, but reput it failed, topic: {} msgId {}\",\n", "                                                msgExt.getTopic(), msgExt.getMsgId());\n", "                                            ScheduleMessageService.this.timer.schedule(\n", "                                                new DeliverDelayedMessageTimerTask(this.delayLevel,\n", "                                                    nextOffset), DELAY_FOR_A_PERIOD);\n", "                                            ScheduleMessageService.this.updateOffset(this.delayLevel,\n", "                                                nextOffset);\n", "                                            return;\n", "                                        }\n", "                                    } catch (Exception e) {\n", "                                        /*\n", "                                         * XXX: warn and notify me\n", "\n", "\n", "\n", "                                         */\n", "                                        log.error(\n", "                                            \"ScheduleMessageService, messageTimeup execute error, drop it. msgExt=\"\n", "                                                + msgExt + \", nextOffset=\" + nextOffset + \",offsetPy=\"\n", "                                                + offsetPy + \",sizePy=\" + sizePy, e);\n", "                                    }\n", "                                }\n", "                            } else {\n", "                                ScheduleMessageService.this.timer.schedule(\n", "                                    new DeliverDelayedMessageTimerTask(this.delayLevel, nextOffset),\n", "                                    countdown);\n", "                                ScheduleMessageService.this.updateOffset(this.delayLevel, nextOffset);\n", "                                return;\n", "                            }\n", "                        } // end of for\n", "\n", "                        nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);\n", "                        ScheduleMessageService.this.timer.schedule(new DeliverDelayedMessageTimerTask(\n", "                            this.delayLevel, nextOffset), DELAY_FOR_A_WHILE);\n", "                        ScheduleMessageService.this.updateOffset(this.delayLevel, nextOffset);\n", "                        return;\n", "                    } finally {\n", "\n", "                        bufferCQ.release();\n", "                    }\n", "                } // end of if (bufferCQ != null)\n", "                else {\n", "\n", "                    long cqMinOffset = cq.getMinOffsetInQueue();\n", "                    if (offset < cqMinOffset) {\n", "                        failScheduleOffset = cqMinOffset;\n", "                        log.error(\"schedule CQ offset invalid. offset=\" + offset + \", cqMinOffset=\"\n", "                            + cqMinOffset + \", queueId=\" + cq.getQueueId());\n", "                    }\n", "                }\n", "            } // end of if (cq != null)\n", "\n", "            ScheduleMessageService.this.timer.schedule(new DeliverDelayedMessageTimerTask(this.delayLevel,\n", "                failScheduleOffset), DELAY_FOR_A_WHILE);\n", "        }\n", "\n", "        private MessageExtBrokerInner messageTimeup(MessageExt msgExt) {\n", "            MessageExtBrokerInner msgInner = new MessageExtBrokerInner();\n", "            msgInner.setBody(msgExt.getBody());\n", "            msgInner.setFlag(msgExt.getFlag());\n", "            MessageAccessor.setProperties(msgInner, msgExt.getProperties());\n", "\n", "            TopicFilterType topicFilterType = MessageExt.parseTopicFilterType(msgInner.getSysFlag());\n", "            long tagsCodeValue =\n", "                MessageExtBrokerInner.tagsString2tagsCode(topicFilterType, msgInner.getTags());\n", "            msgInner.setTagsCode(tagsCodeValue);\n", "            msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));\n", "\n", "            msgInner.setSysFlag(msgExt.getSysFlag());\n", "            msgInner.setBornTimestamp(msgExt.getBornTimestamp());\n", "            msgInner.setBornHost(msgExt.getBornHost());\n", "            msgInner.setStoreHost(msgExt.getStoreHost());\n", "            msgInner.setReconsumeTimes(msgExt.getReconsumeTimes());\n", "\n", "            msgInner.setWaitStoreMsgOK(false);\n", "            MessageAccessor.clearProperty(msgInner, MessageConst.PROPERTY_DELAY_TIME_LEVEL);\n", "\n", "            msgInner.setTopic(msgInner.getProperty(MessageConst.PROPERTY_REAL_TOPIC));\n", "\n", "            String queueIdStr = msgInner.getProperty(MessageConst.PROPERTY_REAL_QUEUE_ID);\n", "            int queueId = Integer.parseInt(queueIdStr);\n", "            msgInner.setQueueId(queueId);\n", "\n", "            return msgInner;\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.store.schedule;\n", "\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.message.MessageDecoder;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.store.*;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n", "import org.junit.After;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "\n", "import java.io.File;\n", "import java.net.InetAddress;\n", "import java.net.InetSocketAddress;\n", "import java.net.SocketAddress;\n", "import java.net.UnknownHostException;\n", "import java.nio.ByteBuffer;\n", "import java.util.HashMap;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.UUID;\n", "import java.util.concurrent.TimeUnit;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "\n", "public class ScheduleMessageServiceTest {\n", "\n", "\n", "    /**\n", "     * t\n", "     * defaultMessageDelayLevel = \"1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h\"\n", "     */\n", "    String testMessageDelayLevel = \"5s 8s\";\n", "    /**\n", "     * choose delay level\n", "     */\n", "    int delayLevel = 2;\n", "\n", "    private static final String storePath = System.getProperty(\"user.home\") + File.separator + \"schedule_test#\" + UUID.randomUUID();\n", "    private static final int commitLogFileSize = 1024;\n", "    private static final int cqFileSize = 10;\n", "    private static final int cqExtFileSize = 10 * (ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + 64);\n", "\n", "    private static SocketAddress bornHost;\n", "    private static SocketAddress storeHost;\n", "    DefaultMessageStore messageStore;\n", "    MessageStoreConfig messageStoreConfig;\n", "    BrokerConfig brokerConfig;\n", "    ScheduleMessageService scheduleMessageService;\n", "\n", "    static String sendMessage = \" ------- schedule message test -------\";\n", "    static String topic = \"schedule_topic_test\";\n", "    static String messageGroup = \"delayGroupTest\";\n", "\n", "\n", "    static {\n", "        try {\n", "            bornHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "        }\n", "        try {\n", "            storeHost = new InetSocketAddress(InetAddress.getByName(\"127.0.0.1\"), 0);\n", "        } catch (UnknownHostException e) {\n", "            e.printStackTrace();\n", "        }\n", "    }\n", "\n", "\n", "    @Before\n", "    public void init() throws Exception {\n", "        messageStoreConfig = new MessageStoreConfig();\n", "        messageStoreConfig.setMessageDelayLevel(testMessageDelayLevel);\n", "        messageStoreConfig.setMappedFileSizeCommitLog(commitLogFileSize);\n", "        messageStoreConfig.setMappedFileSizeConsumeQueue(cqFileSize);\n", "        messageStoreConfig.setMappedFileSizeConsumeQueueExt(cqExtFileSize);\n", "        messageStoreConfig.setMessageIndexEnable(false);\n", "        messageStoreConfig.setEnableConsumeQueueExt(true);\n", "        messageStoreConfig.setStorePathRootDir(storePath);\n", "        messageStoreConfig.setStorePathCommitLog(storePath + File.separator + \"commitlog\");\n", "\n", "        brokerConfig = new BrokerConfig();\n", "        BrokerStatsManager manager = new BrokerStatsManager(brokerConfig.getBrokerClusterName());\n", "        messageStore = new DefaultMessageStore(messageStoreConfig, manager, new MyMessageArrivingListener(), new BrokerConfig());\n", "\n", "        assertThat(messageStore.load()).isTrue();\n", "\n", "        messageStore.start();\n", "        scheduleMessageService = messageStore.getScheduleMessageService();\n", "    }\n", "\n", "\n", "    @Test\n", "    public void deliverDelayedMessageTimerTaskTest() throws Exception {\n", "        MessageExtBrokerInner msg = buildMessage();\n", "        int realQueueId = msg.getQueueId();\n", "        // set delayLevel,and send delay message\n", "        msg.setDelayTimeLevel(delayLevel);\n", "        PutMessageResult result = messageStore.putMessage(msg);\n", "        assertThat(result.isOk()).isTrue();\n", "\n", "        // make sure consumerQueue offset = commitLog offset\n", "        StoreTestUtil.waitCommitLogReput(messageStore);\n", "\n", "        // consumer message\n", "        int delayQueueId = ScheduleMessageService.delayLevel2QueueId(delayLevel);\n", "        assertThat(delayQueueId).isEqualTo(delayLevel - 1);\n", "\n", "        Long offset = result.getAppendMessageResult().getLogicsOffset();\n", "\n", "        // now, no message in queue,must wait > delayTime\n", "        GetMessageResult messageResult = getMessage(realQueueId, offset);\n", "        assertThat(messageResult.getStatus()).isEqualTo(GetMessageStatus.NO_MESSAGE_IN_QUEUE);\n", "\n", "        // timer run maybe delay, then consumer message again\n", "        // and wait offsetTable\n", "        TimeUnit.SECONDS.sleep(10);\n", "        scheduleMessageService.buildRunningStats(new HashMap<String, String>());\n", "\n", "        messageResult = getMessage(realQueueId, offset);\n", "        // now,found the message\n", "        assertThat(messageResult.getStatus()).isEqualTo(GetMessageStatus.FOUND);\n", "\n", "\n", "        // get the message body\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(messageResult.getBufferTotalSize());\n", "        List<ByteBuffer> byteBufferList = messageResult.getMessageBufferList();\n", "        for (ByteBuffer bb : byteBufferList) {\n", "            byteBuffer.put(bb);\n", "        }\n", "\n", "        // warp and decode the message\n", "        byteBuffer = ByteBuffer.wrap(byteBuffer.array());\n", "        List<MessageExt> msgList = MessageDecoder.decodes(byteBuffer);\n", "        String retryMsg = new String(msgList.get(0).getBody());\n", "        assertThat(sendMessage).isEqualTo(retryMsg);\n", "\n", "        //  method will wait 10s,so I run it by myself\n", "        scheduleMessageService.persist();\n", "\n", "        // add mapFile release\n", "        messageResult.release();\n", "\n", "    }\n", "\n", "    /**\n", "     * add some [error/no use] code test\n", "     */\n", "    @Test\n", "    public void otherTest() {\n", "        // the method no use ,why need ?\n", "        int queueId = ScheduleMessageService.queueId2DelayLevel(delayLevel);\n", "        assertThat(queueId).isEqualTo(delayLevel + 1);\n", "\n", "        // error delayLevelTest\n", "        Long time = scheduleMessageService.computeDeliverTimestamp(999, 0);\n", "        assertThat(time).isEqualTo(1000);\n", "\n", "        // just decode\n", "        scheduleMessageService.decode(new DelayOffsetSerializeWrapper().toJson());\n", "    }\n", "\n", "\n", "    private GetMessageResult getMessage(int queueId, Long offset) {\n", "        return messageStore.getMessage(messageGroup, topic,\n", "                queueId, offset, 1, null);\n", "\n", "    }\n", "\n", "\n", "    @After\n", "    public void shutdown() throws InterruptedException {\n", "        messageStore.shutdown();\n", "        messageStore.destroy();\n", "        File file = new File(messageStoreConfig.getStorePathRootDir());\n", "        UtilAll.deleteFile(file);\n", "    }\n", "\n", "\n", "    public MessageExtBrokerInner buildMessage() {\n", "\n", "        byte[] msgBody = sendMessage.getBytes();\n", "        MessageExtBrokerInner msg = new MessageExtBrokerInner();\n", "        msg.setTopic(topic);\n", "        msg.setTags(\"schedule_tag\");\n", "        msg.setKeys(\"schedule_key\");\n", "        msg.setBody(msgBody);\n", "        msg.setSysFlag(0);\n", "        msg.setBornTimestamp(System.currentTimeMillis());\n", "        msg.setStoreHost(storeHost);\n", "        msg.setBornHost(bornHost);\n", "        return msg;\n", "    }\n", "\n", "\n", "    private class MyMessageArrivingListener implements MessageArrivingListener {\n", "        @Override\n", "        public void arriving(String topic, int queueId, long logicOffset, long tagsCode, long msgStoreTime,\n", "                             byte[] filterBitMap, Map<String, String> properties) {\n", "        }\n", "    }\n", "\n", "\n", "}\n"], "method_lines_dic": {"ScheduleMessageService::::queueId2DelayLevel(int)": [71, 73], "ScheduleMessageService::::delayLevel2QueueId(int)": [75, 77], "ScheduleMessageService::::setWriteMessageStore(org.apache.rocketmq.store.MessageStore)": [83, 85], "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)": [87, 98], "ScheduleMessageService::::updateOffset(int,long)": [100, 102], "ScheduleMessageService::::computeDeliverTimestamp(int,long)": [104, 111], "ScheduleMessageService::::start()": [113, 141], "ScheduleMessageService::::shutdown()": [143, 149], "ScheduleMessageService::::isStarted()": [151, 153], "ScheduleMessageService::::getMaxDelayLevel()": [155, 157], "ScheduleMessageService::::encode()": [159, 161], "ScheduleMessageService::::load()": [163, 167], "ScheduleMessageService::::configFilePath()": [169, 173], "ScheduleMessageService::::decode(java.lang.String)": [175, 184], "ScheduleMessageService::::encode(boolean)": [186, 190], "ScheduleMessageService::::parseDelayLevel()": [192, 222], "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()": [233, 245], "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)": [250, 260], "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()": [262, 377]}, "test_method_lines_dic": {"ScheduleMessageServiceTest::::init()": [90, 110], "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()": [113, 164], "ScheduleMessageServiceTest::::otherTest()": [169, 181], "ScheduleMessageServiceTest::::getMessage(int,java.lang.Long)": [184, 188], "ScheduleMessageServiceTest::::shutdown()": [191, 197], "ScheduleMessageServiceTest::::buildMessage()": [200, 213], "ScheduleMessageServiceTest.MyMessageArrivingListener::::arriving(java.lang.String,int,long,long,long,byte[],java.util.Map<java.lang.String, java.lang.String>)": [217, 220]}, "reverse_method_lines_dic": {"71": "ScheduleMessageService::::queueId2DelayLevel(int)", "72": "ScheduleMessageService::::queueId2DelayLevel(int)", "73": "ScheduleMessageService::::queueId2DelayLevel(int)", "75": "ScheduleMessageService::::delayLevel2QueueId(int)", "76": "ScheduleMessageService::::delayLevel2QueueId(int)", "77": "ScheduleMessageService::::delayLevel2QueueId(int)", "83": "ScheduleMessageService::::setWriteMessageStore(org.apache.rocketmq.store.MessageStore)", "84": "ScheduleMessageService::::setWriteMessageStore(org.apache.rocketmq.store.MessageStore)", "85": "ScheduleMessageService::::setWriteMessageStore(org.apache.rocketmq.store.MessageStore)", "87": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "88": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "89": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "90": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "91": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "92": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "93": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "94": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "95": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "96": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "97": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "98": "ScheduleMessageService::::buildRunningStats(java.util.HashMap<java.lang.String, java.lang.String>)", "100": "ScheduleMessageService::::updateOffset(int,long)", "101": "ScheduleMessageService::::updateOffset(int,long)", "102": "ScheduleMessageService::::updateOffset(int,long)", "104": "ScheduleMessageService::::computeDeliverTimestamp(int,long)", "105": "ScheduleMessageService::::computeDeliverTimestamp(int,long)", "106": "ScheduleMessageService::::computeDeliverTimestamp(int,long)", "107": "ScheduleMessageService::::computeDeliverTimestamp(int,long)", "108": "ScheduleMessageService::::computeDeliverTimestamp(int,long)", "109": "ScheduleMessageService::::computeDeliverTimestamp(int,long)", "110": "ScheduleMessageService::::computeDeliverTimestamp(int,long)", "111": "ScheduleMessageService::::computeDeliverTimestamp(int,long)", "113": "ScheduleMessageService::::start()", "114": "ScheduleMessageService::::start()", "115": "ScheduleMessageService::::start()", "116": "ScheduleMessageService::::start()", "117": "ScheduleMessageService::::start()", "118": "ScheduleMessageService::::start()", "119": "ScheduleMessageService::::start()", "120": "ScheduleMessageService::::start()", "121": "ScheduleMessageService::::start()", "122": "ScheduleMessageService::::start()", "123": "ScheduleMessageService::::start()", "124": "ScheduleMessageService::::start()", "125": "ScheduleMessageService::::start()", "126": "ScheduleMessageService::::start()", "127": "ScheduleMessageService::::start()", "128": "ScheduleMessageService::::start()", "129": "ScheduleMessageService::::start()", "130": "ScheduleMessageService::::start()", "131": "ScheduleMessageService::::start()", "132": "ScheduleMessageService::::start()", "133": "ScheduleMessageService::::start()", "134": "ScheduleMessageService::::start()", "135": "ScheduleMessageService::::start()", "136": "ScheduleMessageService::::start()", "137": "ScheduleMessageService::::start()", "138": "ScheduleMessageService::::start()", "139": "ScheduleMessageService::::start()", "140": "ScheduleMessageService::::start()", "141": "ScheduleMessageService::::start()", "143": "ScheduleMessageService::::shutdown()", "144": "ScheduleMessageService::::shutdown()", "145": "ScheduleMessageService::::shutdown()", "146": "ScheduleMessageService::::shutdown()", "147": "ScheduleMessageService::::shutdown()", "148": "ScheduleMessageService::::shutdown()", "149": "ScheduleMessageService::::shutdown()", "151": "ScheduleMessageService::::isStarted()", "152": "ScheduleMessageService::::isStarted()", "153": "ScheduleMessageService::::isStarted()", "155": "ScheduleMessageService::::getMaxDelayLevel()", "156": "ScheduleMessageService::::getMaxDelayLevel()", "157": "ScheduleMessageService::::getMaxDelayLevel()", "159": "ScheduleMessageService::::encode()", "160": "ScheduleMessageService::::encode()", "161": "ScheduleMessageService::::encode()", "163": "ScheduleMessageService::::load()", "164": "ScheduleMessageService::::load()", "165": "ScheduleMessageService::::load()", "166": "ScheduleMessageService::::load()", "167": "ScheduleMessageService::::load()", "169": "ScheduleMessageService::::configFilePath()", "170": "ScheduleMessageService::::configFilePath()", "171": "ScheduleMessageService::::configFilePath()", "172": "ScheduleMessageService::::configFilePath()", "173": "ScheduleMessageService::::configFilePath()", "175": "ScheduleMessageService::::decode(java.lang.String)", "176": "ScheduleMessageService::::decode(java.lang.String)", "177": "ScheduleMessageService::::decode(java.lang.String)", "178": "ScheduleMessageService::::decode(java.lang.String)", "179": "ScheduleMessageService::::decode(java.lang.String)", "180": "ScheduleMessageService::::decode(java.lang.String)", "181": "ScheduleMessageService::::decode(java.lang.String)", "182": "ScheduleMessageService::::decode(java.lang.String)", "183": "ScheduleMessageService::::decode(java.lang.String)", "184": "ScheduleMessageService::::decode(java.lang.String)", "186": "ScheduleMessageService::::encode(boolean)", "187": "ScheduleMessageService::::encode(boolean)", "188": "ScheduleMessageService::::encode(boolean)", "189": "ScheduleMessageService::::encode(boolean)", "190": "ScheduleMessageService::::encode(boolean)", "192": "ScheduleMessageService::::parseDelayLevel()", "193": "ScheduleMessageService::::parseDelayLevel()", "194": "ScheduleMessageService::::parseDelayLevel()", "195": "ScheduleMessageService::::parseDelayLevel()", "196": "ScheduleMessageService::::parseDelayLevel()", "197": "ScheduleMessageService::::parseDelayLevel()", "198": "ScheduleMessageService::::parseDelayLevel()", "199": "ScheduleMessageService::::parseDelayLevel()", "200": "ScheduleMessageService::::parseDelayLevel()", "201": "ScheduleMessageService::::parseDelayLevel()", "202": "ScheduleMessageService::::parseDelayLevel()", "203": "ScheduleMessageService::::parseDelayLevel()", "204": "ScheduleMessageService::::parseDelayLevel()", "205": "ScheduleMessageService::::parseDelayLevel()", "206": "ScheduleMessageService::::parseDelayLevel()", "207": "ScheduleMessageService::::parseDelayLevel()", "208": "ScheduleMessageService::::parseDelayLevel()", "209": "ScheduleMessageService::::parseDelayLevel()", "210": "ScheduleMessageService::::parseDelayLevel()", "211": "ScheduleMessageService::::parseDelayLevel()", "212": "ScheduleMessageService::::parseDelayLevel()", "213": "ScheduleMessageService::::parseDelayLevel()", "214": "ScheduleMessageService::::parseDelayLevel()", "215": "ScheduleMessageService::::parseDelayLevel()", "216": "ScheduleMessageService::::parseDelayLevel()", "217": "ScheduleMessageService::::parseDelayLevel()", "218": "ScheduleMessageService::::parseDelayLevel()", "219": "ScheduleMessageService::::parseDelayLevel()", "220": "ScheduleMessageService::::parseDelayLevel()", "221": "ScheduleMessageService::::parseDelayLevel()", "222": "ScheduleMessageService::::parseDelayLevel()", "233": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "234": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "235": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "236": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "237": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "238": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "239": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "240": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "241": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "242": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "243": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "244": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "245": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::run()", "250": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "251": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "252": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "253": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "254": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "255": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "256": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "257": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "258": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "259": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "260": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::correctDeliverTimestamp(long,long)", "262": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "263": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "264": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "265": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "266": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "267": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "268": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "269": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "270": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "271": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "272": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "273": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "274": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "275": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "276": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "277": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "278": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "279": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "280": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "281": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "282": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "283": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "284": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "285": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "286": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "287": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "288": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "289": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "290": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "291": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "292": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "293": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "294": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "295": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "296": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "297": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "298": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "299": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "300": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "301": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "302": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "303": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "304": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "305": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "306": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "307": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "308": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "309": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "310": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "311": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "312": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "313": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "314": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "315": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "316": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "317": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "318": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "319": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "320": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "321": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "322": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "323": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "324": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "325": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "326": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "327": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "328": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "329": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "330": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "331": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "332": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "333": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "334": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "335": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "336": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "337": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "338": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "339": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "340": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "341": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "342": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "343": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "344": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "345": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "346": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "347": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "348": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "349": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "350": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "351": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "352": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "353": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "354": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "355": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "356": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "357": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "358": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "359": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "360": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "361": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "362": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "363": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "364": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "365": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "366": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "367": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "368": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "369": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "370": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "371": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "372": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "373": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "374": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "375": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "376": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()", "377": "ScheduleMessageService.DeliverDelayedMessageTimerTask::::executeOnTimeup()"}, "test_reverse_method_lines_dic": {"90": "ScheduleMessageServiceTest::::init()", "91": "ScheduleMessageServiceTest::::init()", "92": "ScheduleMessageServiceTest::::init()", "93": "ScheduleMessageServiceTest::::init()", "94": "ScheduleMessageServiceTest::::init()", "95": "ScheduleMessageServiceTest::::init()", "96": "ScheduleMessageServiceTest::::init()", "97": "ScheduleMessageServiceTest::::init()", "98": "ScheduleMessageServiceTest::::init()", "99": "ScheduleMessageServiceTest::::init()", "100": "ScheduleMessageServiceTest::::init()", "101": "ScheduleMessageServiceTest::::init()", "102": "ScheduleMessageServiceTest::::init()", "103": "ScheduleMessageServiceTest::::init()", "104": "ScheduleMessageServiceTest::::init()", "105": "ScheduleMessageServiceTest::::init()", "106": "ScheduleMessageServiceTest::::init()", "107": "ScheduleMessageServiceTest::::init()", "108": "ScheduleMessageServiceTest::::init()", "109": "ScheduleMessageServiceTest::::init()", "110": "ScheduleMessageServiceTest::::init()", "113": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "114": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "115": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "116": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "117": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "118": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "119": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "120": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "121": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "122": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "123": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "124": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "125": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "126": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "127": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "128": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "129": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "130": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "131": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "132": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "133": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "134": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "135": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "136": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "137": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "138": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "139": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "140": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "141": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "142": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "143": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "144": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "145": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "146": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "147": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "148": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "149": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "150": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "151": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "152": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "153": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "154": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "155": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "156": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "157": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "158": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "159": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "160": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "161": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "162": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "163": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "164": "ScheduleMessageServiceTest::::deliverDelayedMessageTimerTaskTest()", "169": "ScheduleMessageServiceTest::::otherTest()", "170": "ScheduleMessageServiceTest::::otherTest()", "171": "ScheduleMessageServiceTest::::otherTest()", "172": "ScheduleMessageServiceTest::::otherTest()", "173": "ScheduleMessageServiceTest::::otherTest()", "174": "ScheduleMessageServiceTest::::otherTest()", "175": "ScheduleMessageServiceTest::::otherTest()", "176": "ScheduleMessageServiceTest::::otherTest()", "177": "ScheduleMessageServiceTest::::otherTest()", "178": "ScheduleMessageServiceTest::::otherTest()", "179": "ScheduleMessageServiceTest::::otherTest()", "180": "ScheduleMessageServiceTest::::otherTest()", "181": "ScheduleMessageServiceTest::::otherTest()", "184": "ScheduleMessageServiceTest::::getMessage(int,java.lang.Long)", "185": "ScheduleMessageServiceTest::::getMessage(int,java.lang.Long)", "186": "ScheduleMessageServiceTest::::getMessage(int,java.lang.Long)", "187": "ScheduleMessageServiceTest::::getMessage(int,java.lang.Long)", "188": "ScheduleMessageServiceTest::::getMessage(int,java.lang.Long)", "191": "ScheduleMessageServiceTest::::shutdown()", "192": "ScheduleMessageServiceTest::::shutdown()", "193": "ScheduleMessageServiceTest::::shutdown()", "194": "ScheduleMessageServiceTest::::shutdown()", "195": "ScheduleMessageServiceTest::::shutdown()", "196": "ScheduleMessageServiceTest::::shutdown()", "197": "ScheduleMessageServiceTest::::shutdown()", "200": "ScheduleMessageServiceTest::::buildMessage()", "201": "ScheduleMessageServiceTest::::buildMessage()", "202": "ScheduleMessageServiceTest::::buildMessage()", "203": "ScheduleMessageServiceTest::::buildMessage()", "204": "ScheduleMessageServiceTest::::buildMessage()", "205": "ScheduleMessageServiceTest::::buildMessage()", "206": "ScheduleMessageServiceTest::::buildMessage()", "207": "ScheduleMessageServiceTest::::buildMessage()", "208": "ScheduleMessageServiceTest::::buildMessage()", "209": "ScheduleMessageServiceTest::::buildMessage()", "210": "ScheduleMessageServiceTest::::buildMessage()", "211": "ScheduleMessageServiceTest::::buildMessage()", "212": "ScheduleMessageServiceTest::::buildMessage()", "213": "ScheduleMessageServiceTest::::buildMessage()", "217": "ScheduleMessageServiceTest.MyMessageArrivingListener::::arriving(java.lang.String,int,long,long,long,byte[],java.util.Map<java.lang.String, java.lang.String>)", "218": "ScheduleMessageServiceTest.MyMessageArrivingListener::::arriving(java.lang.String,int,long,long,long,byte[],java.util.Map<java.lang.String, java.lang.String>)", "219": "ScheduleMessageServiceTest.MyMessageArrivingListener::::arriving(java.lang.String,int,long,long,long,byte[],java.util.Map<java.lang.String, java.lang.String>)", "220": "ScheduleMessageServiceTest.MyMessageArrivingListener::::arriving(java.lang.String,int,long,long,long,byte[],java.util.Map<java.lang.String, java.lang.String>)"}, "tests": [{"test_lines": [113, 164], "covered_lines": [49, 55, 58, 61, 66, 67, 68, 69, 76, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 105, 106, 107, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 127, 129, 134, 137, 138, 139, 141, 144, 145, 146, 149, 152, 156, 164, 165, 166, 171, 172, 187, 188, 189, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 219, 221, 228, 229, 230, 231, 236, 237, 244, 245, 252, 254, 255, 259, 263, 264, 265, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 293, 294, 296, 298, 300, 301, 302, 305, 307, 308, 313, 314, 315, 317, 318, 319, 346, 349, 350, 354, 355, 357, 358, 361, 366, 367, 375, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 397, 398, 400, 402, 403, 404, 406]}, {"test_lines": [169, 181], "covered_lines": [49, 55, 58, 61, 66, 67, 68, 69, 72, 76, 105, 106, 110, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 127, 129, 139, 141, 144, 145, 146, 149, 152, 164, 165, 166, 171, 172, 177, 178, 179, 180, 181, 184, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 219, 221, 228, 229, 230, 231, 236, 237, 244, 245, 263, 264, 265, 267, 269, 270, 271, 366, 367, 375, 377]}]}}