{
  "/bernard/dataset_construction/prep/repos/RocketMQC/client/src/main/java/org/apache/rocketmq/client/Validators.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.client;\n",
      "\n",
      "import java.util.regex.Matcher;\n",
      "import java.util.regex.Pattern;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.producer.DefaultMQProducer;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.message.Message;\n",
      "import org.apache.rocketmq.common.protocol.ResponseCode;\n",
      "import org.apache.rocketmq.common.topic.TopicValidator;\n",
      "\n",
      "/**\n",
      " * Common Validator\n",
      " */\n",
      "public class Validators {\n",
      "    public static final String VALID_PATTERN_STR = \"^[%|a-zA-Z0-9_-]+$\";\n",
      "    public static final Pattern PATTERN = Pattern.compile(VALID_PATTERN_STR);\n",
      "    public static final int CHARACTER_MAX_LENGTH = 255;\n",
      "    public static final int TOPIC_MAX_LENGTH = 127;\n",
      "\n",
      "    /**\n",
      "     * @return The resulting {@code String}\n",
      "     */\n",
      "    public static String getGroupWithRegularExpression(String origin, String patternStr) {\n",
      "        Pattern pattern = Pattern.compile(patternStr);\n",
      "        Matcher matcher = pattern.matcher(origin);\n",
      "        while (matcher.find()) {\n",
      "            return matcher.group(0);\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Validate group\n",
      "     */\n",
      "    public static void checkGroup(String group) throws MQClientException {\n",
      "        if (UtilAll.isBlank(group)) {\n",
      "            throw new MQClientException(\"the specified group is blank\", null);\n",
      "        }\n",
      "\n",
      "        if (group.length() > CHARACTER_MAX_LENGTH) {\n",
      "            throw new MQClientException(\"the specified group is longer than group max length 255.\", null);\n",
      "        }\n",
      "\n",
      "        if (!regularExpressionMatcher(group, PATTERN)) {\n",
      "            throw new MQClientException(String.format(\n",
      "                \"the specified group[%s] contains illegal characters, allowing only %s\", group,\n",
      "                VALID_PATTERN_STR), null);\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return <tt>true</tt> if, and only if, the entire origin sequence matches this matcher's pattern\n",
      "     */\n",
      "    public static boolean regularExpressionMatcher(String origin, Pattern pattern) {\n",
      "        if (pattern == null) {\n",
      "            return true;\n",
      "        }\n",
      "        Matcher matcher = pattern.matcher(origin);\n",
      "        return matcher.matches();\n",
      "    }\n",
      "\n",
      "    public static void checkMessage(Message msg, DefaultMQProducer defaultMQProducer)\n",
      "        throws MQClientException {\n",
      "        if (null == msg) {\n",
      "            throw new MQClientException(ResponseCode.MESSAGE_ILLEGAL, \"the message is null\");\n",
      "        }\n",
      "        // topic\n",
      "        Validators.checkTopic(msg.getTopic());\n",
      "        Validators.isNotAllowedSendTopic(msg.getTopic());\n",
      "\n",
      "        // body\n",
      "        if (null == msg.getBody()) {\n",
      "            throw new MQClientException(ResponseCode.MESSAGE_ILLEGAL, \"the message body is null\");\n",
      "        }\n",
      "\n",
      "        if (0 == msg.getBody().length) {\n",
      "            throw new MQClientException(ResponseCode.MESSAGE_ILLEGAL, \"the message body length is zero\");\n",
      "        }\n",
      "\n",
      "        if (msg.getBody().length > defaultMQProducer.getMaxMessageSize()) {\n",
      "            throw new MQClientException(ResponseCode.MESSAGE_ILLEGAL,\n",
      "                \"the message body size over max value, MAX: \" + defaultMQProducer.getMaxMessageSize());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static void checkTopic(String topic) throws MQClientException {\n",
      "        if (UtilAll.isBlank(topic)) {\n",
      "            throw new MQClientException(\"The specified topic is blank\", null);\n",
      "        }\n",
      "\n",
      "        if (!regularExpressionMatcher(topic, PATTERN)) {\n",
      "            throw new MQClientException(String.format(\n",
      "                \"The specified topic[%s] contains illegal characters, allowing only %s\", topic,\n",
      "                VALID_PATTERN_STR), null);\n",
      "        }\n",
      "\n",
      "        if (topic.length() > TOPIC_MAX_LENGTH) {\n",
      "            throw new MQClientException(\n",
      "                String.format(\"The specified topic is longer than topic max length %d.\", TOPIC_MAX_LENGTH), null);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static void isSystemTopic(String topic) throws MQClientException {\n",
      "        if (TopicValidator.isSystemTopic(topic)) {\n",
      "            throw new MQClientException(\n",
      "                    String.format(\"The topic[%s] is conflict with system topic.\", topic), null);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static void isNotAllowedSendTopic(String topic) throws MQClientException {\n",
      "        if (TopicValidator.isNotAllowedSendTopic(topic)) {\n",
      "            throw new MQClientException(\n",
      "                    String.format(\"Sending message to topic[%s] is forbidden.\", topic), null);\n",
      "        }\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.client;\n",
      "\n",
      "import org.apache.commons.lang3.StringUtils;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.common.topic.TopicValidator;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;\n",
      "import static org.junit.Assert.fail;\n",
      "\n",
      "public class ValidatorsTest {\n",
      "\n",
      "    @Test\n",
      "    public void testCheckTopic_Success() throws MQClientException {\n",
      "        Validators.checkTopic(\"Hello\");\n",
      "        Validators.checkTopic(\"%RETRY%Hello\");\n",
      "        Validators.checkTopic(\"_%RETRY%Hello\");\n",
      "        Validators.checkTopic(\"-%RETRY%Hello\");\n",
      "        Validators.checkTopic(\"223-%RETRY%Hello\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCheckTopic_HasIllegalCharacters() {\n",
      "        String illegalTopic = \"TOPIC&*^\";\n",
      "        try {\n",
      "            Validators.checkTopic(illegalTopic);\n",
      "            failBecauseExceptionWasNotThrown(MQClientException.class);\n",
      "        } catch (MQClientException e) {\n",
      "            assertThat(e).hasMessageStartingWith(String.format(\"The specified topic[%s] contains illegal characters, allowing only %s\", illegalTopic, Validators.VALID_PATTERN_STR));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCheckTopic_BlankTopic() {\n",
      "        String blankTopic = \"\";\n",
      "        try {\n",
      "            Validators.checkTopic(blankTopic);\n",
      "            failBecauseExceptionWasNotThrown(MQClientException.class);\n",
      "        } catch (MQClientException e) {\n",
      "            assertThat(e).hasMessageStartingWith(\"The specified topic is blank\");\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCheckTopic_TooLongTopic() {\n",
      "        String tooLongTopic = StringUtils.rightPad(\"TooLongTopic\", Validators.TOPIC_MAX_LENGTH + 1, \"_\");\n",
      "        assertThat(tooLongTopic.length()).isGreaterThan(Validators.TOPIC_MAX_LENGTH);\n",
      "        try {\n",
      "            Validators.checkTopic(tooLongTopic);\n",
      "            failBecauseExceptionWasNotThrown(MQClientException.class);\n",
      "        } catch (MQClientException e) {\n",
      "            assertThat(e).hasMessageStartingWith(\"The specified topic is longer than topic max length\");\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsSystemTopic() {\n",
      "        for (String topic : TopicValidator.getSystemTopicSet()) {\n",
      "            try {\n",
      "                Validators.isSystemTopic(topic);\n",
      "                fail(\"excepted MQClientException for system topic\");\n",
      "            } catch (MQClientException e) {\n",
      "                assertThat(e.getResponseCode()).isEqualTo(-1);\n",
      "                assertThat(e.getErrorMessage()).isEqualTo(String.format(\"The topic[%s] is conflict with system topic.\", topic));\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsNotAllowedSendTopic() {\n",
      "        for (String topic : TopicValidator.getNotAllowedSendTopicSet()) {\n",
      "            try {\n",
      "                Validators.isNotAllowedSendTopic(topic);\n",
      "                fail(\"excepted MQClientException for blacklist topic\");\n",
      "            } catch (MQClientException e) {\n",
      "                assertThat(e.getResponseCode()).isEqualTo(-1);\n",
      "                assertThat(e.getErrorMessage()).isEqualTo(String.format(\"Sending message to topic[%s] is forbidden.\", topic));\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Validators::::getGroupWithRegularExpression(java.lang.String,java.lang.String)": [
        41,
        48
      ],
      "Validators::::checkGroup(java.lang.String)": [
        53,
        68
      ],
      "Validators::::regularExpressionMatcher(java.lang.String,java.util.regex.Pattern)": [
        73,
        79
      ],
      "Validators::::checkTopic(java.lang.String)": [
        105,
        120
      ],
      "Validators::::isSystemTopic(java.lang.String)": [
        122,
        127
      ],
      "Validators::::isNotAllowedSendTopic(java.lang.String)": [
        129,
        134
      ]
    },
    "test_method_lines_dic": {
      "ValidatorsTest::::testCheckTopic_Success()": [
        31,
        38
      ],
      "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()": [
        40,
        49
      ],
      "ValidatorsTest::::testCheckTopic_BlankTopic()": [
        51,
        60
      ],
      "ValidatorsTest::::testCheckTopic_TooLongTopic()": [
        62,
        72
      ],
      "ValidatorsTest::::testIsSystemTopic()": [
        74,
        85
      ],
      "ValidatorsTest::::testIsNotAllowedSendTopic()": [
        87,
        98
      ]
    },
    "reverse_method_lines_dic": {
      "41": "Validators::::getGroupWithRegularExpression(java.lang.String,java.lang.String)",
      "42": "Validators::::getGroupWithRegularExpression(java.lang.String,java.lang.String)",
      "43": "Validators::::getGroupWithRegularExpression(java.lang.String,java.lang.String)",
      "44": "Validators::::getGroupWithRegularExpression(java.lang.String,java.lang.String)",
      "45": "Validators::::getGroupWithRegularExpression(java.lang.String,java.lang.String)",
      "46": "Validators::::getGroupWithRegularExpression(java.lang.String,java.lang.String)",
      "47": "Validators::::getGroupWithRegularExpression(java.lang.String,java.lang.String)",
      "48": "Validators::::getGroupWithRegularExpression(java.lang.String,java.lang.String)",
      "53": "Validators::::checkGroup(java.lang.String)",
      "54": "Validators::::checkGroup(java.lang.String)",
      "55": "Validators::::checkGroup(java.lang.String)",
      "56": "Validators::::checkGroup(java.lang.String)",
      "57": "Validators::::checkGroup(java.lang.String)",
      "58": "Validators::::checkGroup(java.lang.String)",
      "59": "Validators::::checkGroup(java.lang.String)",
      "60": "Validators::::checkGroup(java.lang.String)",
      "61": "Validators::::checkGroup(java.lang.String)",
      "62": "Validators::::checkGroup(java.lang.String)",
      "63": "Validators::::checkGroup(java.lang.String)",
      "64": "Validators::::checkGroup(java.lang.String)",
      "65": "Validators::::checkGroup(java.lang.String)",
      "66": "Validators::::checkGroup(java.lang.String)",
      "67": "Validators::::checkGroup(java.lang.String)",
      "68": "Validators::::checkGroup(java.lang.String)",
      "73": "Validators::::regularExpressionMatcher(java.lang.String,java.util.regex.Pattern)",
      "74": "Validators::::regularExpressionMatcher(java.lang.String,java.util.regex.Pattern)",
      "75": "Validators::::regularExpressionMatcher(java.lang.String,java.util.regex.Pattern)",
      "76": "Validators::::regularExpressionMatcher(java.lang.String,java.util.regex.Pattern)",
      "77": "Validators::::regularExpressionMatcher(java.lang.String,java.util.regex.Pattern)",
      "78": "Validators::::regularExpressionMatcher(java.lang.String,java.util.regex.Pattern)",
      "79": "Validators::::regularExpressionMatcher(java.lang.String,java.util.regex.Pattern)",
      "105": "Validators::::checkTopic(java.lang.String)",
      "106": "Validators::::checkTopic(java.lang.String)",
      "107": "Validators::::checkTopic(java.lang.String)",
      "108": "Validators::::checkTopic(java.lang.String)",
      "109": "Validators::::checkTopic(java.lang.String)",
      "110": "Validators::::checkTopic(java.lang.String)",
      "111": "Validators::::checkTopic(java.lang.String)",
      "112": "Validators::::checkTopic(java.lang.String)",
      "113": "Validators::::checkTopic(java.lang.String)",
      "114": "Validators::::checkTopic(java.lang.String)",
      "115": "Validators::::checkTopic(java.lang.String)",
      "116": "Validators::::checkTopic(java.lang.String)",
      "117": "Validators::::checkTopic(java.lang.String)",
      "118": "Validators::::checkTopic(java.lang.String)",
      "119": "Validators::::checkTopic(java.lang.String)",
      "120": "Validators::::checkTopic(java.lang.String)",
      "122": "Validators::::isSystemTopic(java.lang.String)",
      "123": "Validators::::isSystemTopic(java.lang.String)",
      "124": "Validators::::isSystemTopic(java.lang.String)",
      "125": "Validators::::isSystemTopic(java.lang.String)",
      "126": "Validators::::isSystemTopic(java.lang.String)",
      "127": "Validators::::isSystemTopic(java.lang.String)",
      "129": "Validators::::isNotAllowedSendTopic(java.lang.String)",
      "130": "Validators::::isNotAllowedSendTopic(java.lang.String)",
      "131": "Validators::::isNotAllowedSendTopic(java.lang.String)",
      "132": "Validators::::isNotAllowedSendTopic(java.lang.String)",
      "133": "Validators::::isNotAllowedSendTopic(java.lang.String)",
      "134": "Validators::::isNotAllowedSendTopic(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "31": "ValidatorsTest::::testCheckTopic_Success()",
      "32": "ValidatorsTest::::testCheckTopic_Success()",
      "33": "ValidatorsTest::::testCheckTopic_Success()",
      "34": "ValidatorsTest::::testCheckTopic_Success()",
      "35": "ValidatorsTest::::testCheckTopic_Success()",
      "36": "ValidatorsTest::::testCheckTopic_Success()",
      "37": "ValidatorsTest::::testCheckTopic_Success()",
      "38": "ValidatorsTest::::testCheckTopic_Success()",
      "40": "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()",
      "41": "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()",
      "42": "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()",
      "43": "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()",
      "44": "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()",
      "45": "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()",
      "46": "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()",
      "47": "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()",
      "48": "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()",
      "49": "ValidatorsTest::::testCheckTopic_HasIllegalCharacters()",
      "51": "ValidatorsTest::::testCheckTopic_BlankTopic()",
      "52": "ValidatorsTest::::testCheckTopic_BlankTopic()",
      "53": "ValidatorsTest::::testCheckTopic_BlankTopic()",
      "54": "ValidatorsTest::::testCheckTopic_BlankTopic()",
      "55": "ValidatorsTest::::testCheckTopic_BlankTopic()",
      "56": "ValidatorsTest::::testCheckTopic_BlankTopic()",
      "57": "ValidatorsTest::::testCheckTopic_BlankTopic()",
      "58": "ValidatorsTest::::testCheckTopic_BlankTopic()",
      "59": "ValidatorsTest::::testCheckTopic_BlankTopic()",
      "60": "ValidatorsTest::::testCheckTopic_BlankTopic()",
      "62": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "63": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "64": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "65": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "66": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "67": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "68": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "69": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "70": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "71": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "72": "ValidatorsTest::::testCheckTopic_TooLongTopic()",
      "74": "ValidatorsTest::::testIsSystemTopic()",
      "75": "ValidatorsTest::::testIsSystemTopic()",
      "76": "ValidatorsTest::::testIsSystemTopic()",
      "77": "ValidatorsTest::::testIsSystemTopic()",
      "78": "ValidatorsTest::::testIsSystemTopic()",
      "79": "ValidatorsTest::::testIsSystemTopic()",
      "80": "ValidatorsTest::::testIsSystemTopic()",
      "81": "ValidatorsTest::::testIsSystemTopic()",
      "82": "ValidatorsTest::::testIsSystemTopic()",
      "83": "ValidatorsTest::::testIsSystemTopic()",
      "84": "ValidatorsTest::::testIsSystemTopic()",
      "85": "ValidatorsTest::::testIsSystemTopic()",
      "87": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "88": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "89": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "90": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "91": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "92": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "93": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "94": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "95": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "96": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "97": "ValidatorsTest::::testIsNotAllowedSendTopic()",
      "98": "ValidatorsTest::::testIsNotAllowedSendTopic()"
    },
    "tests": [
      {
        "test_lines": [
          31,
          38
        ],
        "covered_lines": [
          34,
          74,
          77,
          78,
          106,
          110,
          116,
          120
        ]
      },
      {
        "test_lines": [
          40,
          49
        ],
        "covered_lines": [
          34,
          74,
          77,
          78,
          106,
          110,
          111
        ]
      },
      {
        "test_lines": [
          51,
          60
        ],
        "covered_lines": [
          34,
          106,
          107
        ]
      },
      {
        "test_lines": [
          62,
          72
        ],
        "covered_lines": [
          34,
          74,
          77,
          78,
          106,
          110,
          116,
          117,
          118
        ]
      },
      {
        "test_lines": [
          74,
          85
        ],
        "covered_lines": [
          34,
          123,
          124,
          125
        ]
      },
      {
        "test_lines": [
          87,
          98
        ],
        "covered_lines": [
          34,
          130,
          131,
          132
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/client/src/main/java/org/apache/rocketmq/client/latency/LatencyFaultToleranceImpl.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.client.latency;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.Enumeration;\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import org.apache.rocketmq.client.common.ThreadLocalIndex;\n",
      "\n",
      "public class LatencyFaultToleranceImpl implements LatencyFaultTolerance<String> {\n",
      "    private final ConcurrentHashMap<String, FaultItem> faultItemTable = new ConcurrentHashMap<String, FaultItem>(16);\n",
      "\n",
      "    private final ThreadLocalIndex whichItemWorst = new ThreadLocalIndex();\n",
      "\n",
      "    @Override\n",
      "    public void updateFaultItem(final String name, final long currentLatency, final long notAvailableDuration) {\n",
      "        FaultItem old = this.faultItemTable.get(name);\n",
      "        if (null == old) {\n",
      "            final FaultItem faultItem = new FaultItem(name);\n",
      "            faultItem.setCurrentLatency(currentLatency);\n",
      "            faultItem.setStartTimestamp(System.currentTimeMillis() + notAvailableDuration);\n",
      "\n",
      "            old = this.faultItemTable.putIfAbsent(name, faultItem);\n",
      "            if (old != null) {\n",
      "                old.setCurrentLatency(currentLatency);\n",
      "                old.setStartTimestamp(System.currentTimeMillis() + notAvailableDuration);\n",
      "            }\n",
      "        } else {\n",
      "            old.setCurrentLatency(currentLatency);\n",
      "            old.setStartTimestamp(System.currentTimeMillis() + notAvailableDuration);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isAvailable(final String name) {\n",
      "        final FaultItem faultItem = this.faultItemTable.get(name);\n",
      "        if (faultItem != null) {\n",
      "            return faultItem.isAvailable();\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void remove(final String name) {\n",
      "        this.faultItemTable.remove(name);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String pickOneAtLeast() {\n",
      "        final Enumeration<FaultItem> elements = this.faultItemTable.elements();\n",
      "        List<FaultItem> tmpList = new LinkedList<FaultItem>();\n",
      "        while (elements.hasMoreElements()) {\n",
      "            final FaultItem faultItem = elements.nextElement();\n",
      "            tmpList.add(faultItem);\n",
      "        }\n",
      "\n",
      "        if (!tmpList.isEmpty()) {\n",
      "            Collections.shuffle(tmpList);\n",
      "\n",
      "            Collections.sort(tmpList);\n",
      "\n",
      "            final int half = tmpList.size() / 2;\n",
      "            if (half <= 0) {\n",
      "                return tmpList.get(0).getName();\n",
      "            } else {\n",
      "                final int i = this.whichItemWorst.getAndIncrement() % half;\n",
      "                return tmpList.get(i).getName();\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return \"LatencyFaultToleranceImpl{\" +\n",
      "            \"faultItemTable=\" + faultItemTable +\n",
      "            \", whichItemWorst=\" + whichItemWorst +\n",
      "            '}';\n",
      "    }\n",
      "\n",
      "    class FaultItem implements Comparable<FaultItem> {\n",
      "        private final String name;\n",
      "        private volatile long currentLatency;\n",
      "        private volatile long startTimestamp;\n",
      "\n",
      "        public FaultItem(final String name) {\n",
      "            this.name = name;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public int compareTo(final FaultItem other) {\n",
      "            if (this.isAvailable() != other.isAvailable()) {\n",
      "                if (this.isAvailable())\n",
      "                    return -1;\n",
      "\n",
      "                if (other.isAvailable())\n",
      "                    return 1;\n",
      "            }\n",
      "\n",
      "            if (this.currentLatency < other.currentLatency)\n",
      "                return -1;\n",
      "            else if (this.currentLatency > other.currentLatency) {\n",
      "                return 1;\n",
      "            }\n",
      "\n",
      "            if (this.startTimestamp < other.startTimestamp)\n",
      "                return -1;\n",
      "            else if (this.startTimestamp > other.startTimestamp) {\n",
      "                return 1;\n",
      "            }\n",
      "\n",
      "            return 0;\n",
      "        }\n",
      "\n",
      "        public boolean isAvailable() {\n",
      "            return (System.currentTimeMillis() - startTimestamp) >= 0;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public int hashCode() {\n",
      "            int result = getName() != null ? getName().hashCode() : 0;\n",
      "            result = 31 * result + (int) (getCurrentLatency() ^ (getCurrentLatency() >>> 32));\n",
      "            result = 31 * result + (int) (getStartTimestamp() ^ (getStartTimestamp() >>> 32));\n",
      "            return result;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public boolean equals(final Object o) {\n",
      "            if (this == o)\n",
      "                return true;\n",
      "            if (!(o instanceof FaultItem))\n",
      "                return false;\n",
      "\n",
      "            final FaultItem faultItem = (FaultItem) o;\n",
      "\n",
      "            if (getCurrentLatency() != faultItem.getCurrentLatency())\n",
      "                return false;\n",
      "            if (getStartTimestamp() != faultItem.getStartTimestamp())\n",
      "                return false;\n",
      "            return getName() != null ? getName().equals(faultItem.getName()) : faultItem.getName() == null;\n",
      "\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public String toString() {\n",
      "            return \"FaultItem{\" +\n",
      "                \"name='\" + name + '\\'' +\n",
      "                \", currentLatency=\" + currentLatency +\n",
      "                \", startTimestamp=\" + startTimestamp +\n",
      "                '}';\n",
      "        }\n",
      "\n",
      "        public String getName() {\n",
      "            return name;\n",
      "        }\n",
      "\n",
      "        public long getCurrentLatency() {\n",
      "            return currentLatency;\n",
      "        }\n",
      "\n",
      "        public void setCurrentLatency(final long currentLatency) {\n",
      "            this.currentLatency = currentLatency;\n",
      "        }\n",
      "\n",
      "        public long getStartTimestamp() {\n",
      "            return startTimestamp;\n",
      "        }\n",
      "\n",
      "        public void setStartTimestamp(final long startTimestamp) {\n",
      "            this.startTimestamp = startTimestamp;\n",
      "        }\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.latency;\n",
      "\n",
      "import java.util.concurrent.TimeUnit;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class LatencyFaultToleranceImplTest {\n",
      "    private LatencyFaultTolerance<String> latencyFaultTolerance;\n",
      "    private String brokerName = \"BrokerA\";\n",
      "    private String anotherBrokerName = \"BrokerB\";\n",
      "\n",
      "    @Before\n",
      "    public void init() {\n",
      "        latencyFaultTolerance = new LatencyFaultToleranceImpl();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testUpdateFaultItem() throws Exception {\n",
      "        latencyFaultTolerance.updateFaultItem(brokerName, 3000, 3000);\n",
      "        assertThat(latencyFaultTolerance.isAvailable(brokerName)).isFalse();\n",
      "        assertThat(latencyFaultTolerance.isAvailable(anotherBrokerName)).isTrue();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsAvailable() throws Exception {\n",
      "        latencyFaultTolerance.updateFaultItem(brokerName, 3000, 50);\n",
      "        assertThat(latencyFaultTolerance.isAvailable(brokerName)).isFalse();\n",
      "\n",
      "        TimeUnit.MILLISECONDS.sleep(70);\n",
      "        assertThat(latencyFaultTolerance.isAvailable(brokerName)).isTrue();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testRemove() throws Exception {\n",
      "        latencyFaultTolerance.updateFaultItem(brokerName, 3000, 3000);\n",
      "        assertThat(latencyFaultTolerance.isAvailable(brokerName)).isFalse();\n",
      "        latencyFaultTolerance.remove(brokerName);\n",
      "        assertThat(latencyFaultTolerance.isAvailable(brokerName)).isTrue();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testPickOneAtLeast() throws Exception {\n",
      "        latencyFaultTolerance.updateFaultItem(brokerName, 1000, 3000);\n",
      "        assertThat(latencyFaultTolerance.pickOneAtLeast()).isEqualTo(brokerName);\n",
      "\n",
      "        latencyFaultTolerance.updateFaultItem(anotherBrokerName, 1001, 3000);\n",
      "        assertThat(latencyFaultTolerance.pickOneAtLeast()).isEqualTo(brokerName);\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)": [
        32,
        49
      ],
      "LatencyFaultToleranceImpl::::isAvailable(java.lang.String)": [
        51,
        58
      ],
      "LatencyFaultToleranceImpl::::remove(java.lang.String)": [
        60,
        63
      ],
      "LatencyFaultToleranceImpl::::pickOneAtLeast()": [
        65,
        89
      ],
      "LatencyFaultToleranceImpl::::toString()": [
        91,
        97
      ],
      "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)": [
        108,
        131
      ],
      "LatencyFaultToleranceImpl.FaultItem::::isAvailable()": [
        133,
        135
      ],
      "LatencyFaultToleranceImpl.FaultItem::::hashCode()": [
        137,
        143
      ],
      "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)": [
        145,
        160
      ],
      "LatencyFaultToleranceImpl.FaultItem::::toString()": [
        162,
        169
      ],
      "LatencyFaultToleranceImpl.FaultItem::::getName()": [
        171,
        173
      ],
      "LatencyFaultToleranceImpl.FaultItem::::getCurrentLatency()": [
        175,
        177
      ],
      "LatencyFaultToleranceImpl.FaultItem::::setCurrentLatency(long)": [
        179,
        181
      ],
      "LatencyFaultToleranceImpl.FaultItem::::getStartTimestamp()": [
        183,
        185
      ],
      "LatencyFaultToleranceImpl.FaultItem::::setStartTimestamp(long)": [
        187,
        189
      ]
    },
    "test_method_lines_dic": {
      "LatencyFaultToleranceImplTest::::init()": [
        30,
        33
      ],
      "LatencyFaultToleranceImplTest::::testUpdateFaultItem()": [
        35,
        40
      ],
      "LatencyFaultToleranceImplTest::::testIsAvailable()": [
        42,
        49
      ],
      "LatencyFaultToleranceImplTest::::testRemove()": [
        51,
        57
      ],
      "LatencyFaultToleranceImplTest::::testPickOneAtLeast()": [
        59,
        66
      ]
    },
    "reverse_method_lines_dic": {
      "32": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "33": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "34": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "35": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "36": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "37": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "38": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "39": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "40": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "41": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "42": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "43": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "44": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "45": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "46": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "47": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "48": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "49": "LatencyFaultToleranceImpl::::updateFaultItem(java.lang.String,long,long)",
      "51": "LatencyFaultToleranceImpl::::isAvailable(java.lang.String)",
      "52": "LatencyFaultToleranceImpl::::isAvailable(java.lang.String)",
      "53": "LatencyFaultToleranceImpl::::isAvailable(java.lang.String)",
      "54": "LatencyFaultToleranceImpl::::isAvailable(java.lang.String)",
      "55": "LatencyFaultToleranceImpl::::isAvailable(java.lang.String)",
      "56": "LatencyFaultToleranceImpl::::isAvailable(java.lang.String)",
      "57": "LatencyFaultToleranceImpl::::isAvailable(java.lang.String)",
      "58": "LatencyFaultToleranceImpl::::isAvailable(java.lang.String)",
      "60": "LatencyFaultToleranceImpl::::remove(java.lang.String)",
      "61": "LatencyFaultToleranceImpl::::remove(java.lang.String)",
      "62": "LatencyFaultToleranceImpl::::remove(java.lang.String)",
      "63": "LatencyFaultToleranceImpl::::remove(java.lang.String)",
      "65": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "66": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "67": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "68": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "69": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "70": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "71": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "72": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "73": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "74": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "75": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "76": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "77": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "78": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "79": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "80": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "81": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "82": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "83": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "84": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "85": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "86": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "87": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "88": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "89": "LatencyFaultToleranceImpl::::pickOneAtLeast()",
      "91": "LatencyFaultToleranceImpl::::toString()",
      "92": "LatencyFaultToleranceImpl::::toString()",
      "93": "LatencyFaultToleranceImpl::::toString()",
      "94": "LatencyFaultToleranceImpl::::toString()",
      "95": "LatencyFaultToleranceImpl::::toString()",
      "96": "LatencyFaultToleranceImpl::::toString()",
      "97": "LatencyFaultToleranceImpl::::toString()",
      "108": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "109": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "110": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "111": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "112": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "113": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "114": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "115": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "116": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "117": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "118": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "119": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "120": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "121": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "122": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "123": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "124": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "125": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "126": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "127": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "128": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "129": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "130": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "131": "LatencyFaultToleranceImpl.FaultItem::::compareTo(org.apache.rocketmq.client.latency.LatencyFaultToleranceImpl.FaultItem)",
      "133": "LatencyFaultToleranceImpl.FaultItem::::isAvailable()",
      "134": "LatencyFaultToleranceImpl.FaultItem::::isAvailable()",
      "135": "LatencyFaultToleranceImpl.FaultItem::::isAvailable()",
      "137": "LatencyFaultToleranceImpl.FaultItem::::hashCode()",
      "138": "LatencyFaultToleranceImpl.FaultItem::::hashCode()",
      "139": "LatencyFaultToleranceImpl.FaultItem::::hashCode()",
      "140": "LatencyFaultToleranceImpl.FaultItem::::hashCode()",
      "141": "LatencyFaultToleranceImpl.FaultItem::::hashCode()",
      "142": "LatencyFaultToleranceImpl.FaultItem::::hashCode()",
      "143": "LatencyFaultToleranceImpl.FaultItem::::hashCode()",
      "145": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "146": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "147": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "148": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "149": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "150": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "151": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "152": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "153": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "154": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "155": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "156": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "157": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "158": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "159": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "160": "LatencyFaultToleranceImpl.FaultItem::::equals(java.lang.Object)",
      "162": "LatencyFaultToleranceImpl.FaultItem::::toString()",
      "163": "LatencyFaultToleranceImpl.FaultItem::::toString()",
      "164": "LatencyFaultToleranceImpl.FaultItem::::toString()",
      "165": "LatencyFaultToleranceImpl.FaultItem::::toString()",
      "166": "LatencyFaultToleranceImpl.FaultItem::::toString()",
      "167": "LatencyFaultToleranceImpl.FaultItem::::toString()",
      "168": "LatencyFaultToleranceImpl.FaultItem::::toString()",
      "169": "LatencyFaultToleranceImpl.FaultItem::::toString()",
      "171": "LatencyFaultToleranceImpl.FaultItem::::getName()",
      "172": "LatencyFaultToleranceImpl.FaultItem::::getName()",
      "173": "LatencyFaultToleranceImpl.FaultItem::::getName()",
      "175": "LatencyFaultToleranceImpl.FaultItem::::getCurrentLatency()",
      "176": "LatencyFaultToleranceImpl.FaultItem::::getCurrentLatency()",
      "177": "LatencyFaultToleranceImpl.FaultItem::::getCurrentLatency()",
      "179": "LatencyFaultToleranceImpl.FaultItem::::setCurrentLatency(long)",
      "180": "LatencyFaultToleranceImpl.FaultItem::::setCurrentLatency(long)",
      "181": "LatencyFaultToleranceImpl.FaultItem::::setCurrentLatency(long)",
      "183": "LatencyFaultToleranceImpl.FaultItem::::getStartTimestamp()",
      "184": "LatencyFaultToleranceImpl.FaultItem::::getStartTimestamp()",
      "185": "LatencyFaultToleranceImpl.FaultItem::::getStartTimestamp()",
      "187": "LatencyFaultToleranceImpl.FaultItem::::setStartTimestamp(long)",
      "188": "LatencyFaultToleranceImpl.FaultItem::::setStartTimestamp(long)",
      "189": "LatencyFaultToleranceImpl.FaultItem::::setStartTimestamp(long)"
    },
    "test_reverse_method_lines_dic": {
      "30": "LatencyFaultToleranceImplTest::::init()",
      "31": "LatencyFaultToleranceImplTest::::init()",
      "32": "LatencyFaultToleranceImplTest::::init()",
      "33": "LatencyFaultToleranceImplTest::::init()",
      "35": "LatencyFaultToleranceImplTest::::testUpdateFaultItem()",
      "36": "LatencyFaultToleranceImplTest::::testUpdateFaultItem()",
      "37": "LatencyFaultToleranceImplTest::::testUpdateFaultItem()",
      "38": "LatencyFaultToleranceImplTest::::testUpdateFaultItem()",
      "39": "LatencyFaultToleranceImplTest::::testUpdateFaultItem()",
      "40": "LatencyFaultToleranceImplTest::::testUpdateFaultItem()",
      "42": "LatencyFaultToleranceImplTest::::testIsAvailable()",
      "43": "LatencyFaultToleranceImplTest::::testIsAvailable()",
      "44": "LatencyFaultToleranceImplTest::::testIsAvailable()",
      "45": "LatencyFaultToleranceImplTest::::testIsAvailable()",
      "46": "LatencyFaultToleranceImplTest::::testIsAvailable()",
      "47": "LatencyFaultToleranceImplTest::::testIsAvailable()",
      "48": "LatencyFaultToleranceImplTest::::testIsAvailable()",
      "49": "LatencyFaultToleranceImplTest::::testIsAvailable()",
      "51": "LatencyFaultToleranceImplTest::::testRemove()",
      "52": "LatencyFaultToleranceImplTest::::testRemove()",
      "53": "LatencyFaultToleranceImplTest::::testRemove()",
      "54": "LatencyFaultToleranceImplTest::::testRemove()",
      "55": "LatencyFaultToleranceImplTest::::testRemove()",
      "56": "LatencyFaultToleranceImplTest::::testRemove()",
      "57": "LatencyFaultToleranceImplTest::::testRemove()",
      "59": "LatencyFaultToleranceImplTest::::testPickOneAtLeast()",
      "60": "LatencyFaultToleranceImplTest::::testPickOneAtLeast()",
      "61": "LatencyFaultToleranceImplTest::::testPickOneAtLeast()",
      "62": "LatencyFaultToleranceImplTest::::testPickOneAtLeast()",
      "63": "LatencyFaultToleranceImplTest::::testPickOneAtLeast()",
      "64": "LatencyFaultToleranceImplTest::::testPickOneAtLeast()",
      "65": "LatencyFaultToleranceImplTest::::testPickOneAtLeast()",
      "66": "LatencyFaultToleranceImplTest::::testPickOneAtLeast()"
    },
    "tests": [
      {
        "test_lines": [
          35,
          40
        ],
        "covered_lines": [
          27,
          28,
          30,
          34,
          35,
          36,
          37,
          38,
          40,
          41,
          45,
          49,
          53,
          54,
          55,
          57,
          104,
          105,
          106,
          134,
          180,
          181,
          188,
          189
        ]
      },
      {
        "test_lines": [
          42,
          49
        ],
        "covered_lines": [
          27,
          28,
          30,
          34,
          35,
          36,
          37,
          38,
          40,
          41,
          45,
          49,
          53,
          54,
          55,
          104,
          105,
          106,
          134,
          180,
          181,
          188,
          189
        ]
      },
      {
        "test_lines": [
          51,
          57
        ],
        "covered_lines": [
          27,
          28,
          30,
          34,
          35,
          36,
          37,
          38,
          40,
          41,
          45,
          49,
          53,
          54,
          55,
          57,
          62,
          63,
          104,
          105,
          106,
          134,
          180,
          181,
          188,
          189
        ]
      },
      {
        "test_lines": [
          59,
          66
        ],
        "covered_lines": [
          27,
          28,
          30,
          34,
          35,
          36,
          37,
          38,
          40,
          41,
          45,
          49,
          67,
          68,
          69,
          70,
          71,
          72,
          74,
          75,
          77,
          79,
          80,
          81,
          83,
          84,
          104,
          105,
          106,
          110,
          118,
          119,
          134,
          172,
          180,
          181,
          188,
          189
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/client/src/main/java/org/apache/rocketmq/client/consumer/store/LocalFileOffsetStore.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.consumer.store;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.IOException;\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "import java.util.Set;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import java.util.concurrent.ConcurrentMap;\n",
      "import java.util.concurrent.atomic.AtomicLong;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n",
      "import org.apache.rocketmq.client.log.ClientLogger;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.help.FAQUrl;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "\n",
      "/**\n",
      " * Local storage implementation\n",
      " */\n",
      "public class LocalFileOffsetStore implements OffsetStore {\n",
      "    public final static String LOCAL_OFFSET_STORE_DIR = System.getProperty(\n",
      "        \"rocketmq.client.localOffsetStoreDir\",\n",
      "        System.getProperty(\"user.home\") + File.separator + \".rocketmq_offsets\");\n",
      "    private final static InternalLogger log = ClientLogger.getLog();\n",
      "    private final MQClientInstance mQClientFactory;\n",
      "    private final String groupName;\n",
      "    private final String storePath;\n",
      "    private ConcurrentMap<MessageQueue, AtomicLong> offsetTable =\n",
      "        new ConcurrentHashMap<MessageQueue, AtomicLong>();\n",
      "\n",
      "    public LocalFileOffsetStore(MQClientInstance mQClientFactory, String groupName) {\n",
      "        this.mQClientFactory = mQClientFactory;\n",
      "        this.groupName = groupName;\n",
      "        this.storePath = LOCAL_OFFSET_STORE_DIR + File.separator +\n",
      "            this.mQClientFactory.getClientId() + File.separator +\n",
      "            this.groupName + File.separator +\n",
      "            \"offsets.json\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void load() throws MQClientException {\n",
      "        OffsetSerializeWrapper offsetSerializeWrapper = this.readLocalOffset();\n",
      "        if (offsetSerializeWrapper != null && offsetSerializeWrapper.getOffsetTable() != null) {\n",
      "            offsetTable.putAll(offsetSerializeWrapper.getOffsetTable());\n",
      "\n",
      "            for (MessageQueue mq : offsetSerializeWrapper.getOffsetTable().keySet()) {\n",
      "                AtomicLong offset = offsetSerializeWrapper.getOffsetTable().get(mq);\n",
      "                log.info(\"load consumer's offset, {} {} {}\",\n",
      "                    this.groupName,\n",
      "                    mq,\n",
      "                    offset.get());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void updateOffset(MessageQueue mq, long offset, boolean increaseOnly) {\n",
      "        if (mq != null) {\n",
      "            AtomicLong offsetOld = this.offsetTable.get(mq);\n",
      "            if (null == offsetOld) {\n",
      "                offsetOld = this.offsetTable.putIfAbsent(mq, new AtomicLong(offset));\n",
      "            }\n",
      "\n",
      "            if (null != offsetOld) {\n",
      "                if (increaseOnly) {\n",
      "                    MixAll.compareAndIncreaseOnly(offsetOld, offset);\n",
      "                } else {\n",
      "                    offsetOld.set(offset);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public long readOffset(final MessageQueue mq, final ReadOffsetType type) {\n",
      "        if (mq != null) {\n",
      "            switch (type) {\n",
      "                case MEMORY_FIRST_THEN_STORE:\n",
      "                case READ_FROM_MEMORY: {\n",
      "                    AtomicLong offset = this.offsetTable.get(mq);\n",
      "                    if (offset != null) {\n",
      "                        return offset.get();\n",
      "                    } else if (ReadOffsetType.READ_FROM_MEMORY == type) {\n",
      "                        return -1;\n",
      "                    }\n",
      "                }\n",
      "                case READ_FROM_STORE: {\n",
      "                    OffsetSerializeWrapper offsetSerializeWrapper;\n",
      "                    try {\n",
      "                        offsetSerializeWrapper = this.readLocalOffset();\n",
      "                    } catch (MQClientException e) {\n",
      "                        return -1;\n",
      "                    }\n",
      "                    if (offsetSerializeWrapper != null && offsetSerializeWrapper.getOffsetTable() != null) {\n",
      "                        AtomicLong offset = offsetSerializeWrapper.getOffsetTable().get(mq);\n",
      "                        if (offset != null) {\n",
      "                            this.updateOffset(mq, offset.get(), false);\n",
      "                            return offset.get();\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                default:\n",
      "                    break;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return -1;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void persistAll(Set<MessageQueue> mqs) {\n",
      "        if (null == mqs || mqs.isEmpty())\n",
      "            return;\n",
      "\n",
      "        OffsetSerializeWrapper offsetSerializeWrapper = new OffsetSerializeWrapper();\n",
      "        for (Map.Entry<MessageQueue, AtomicLong> entry : this.offsetTable.entrySet()) {\n",
      "            if (mqs.contains(entry.getKey())) {\n",
      "                AtomicLong offset = entry.getValue();\n",
      "                offsetSerializeWrapper.getOffsetTable().put(entry.getKey(), offset);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        String jsonString = offsetSerializeWrapper.toJson(true);\n",
      "        if (jsonString != null) {\n",
      "            try {\n",
      "                MixAll.string2File(jsonString, this.storePath);\n",
      "            } catch (IOException e) {\n",
      "                log.error(\"persistAll consumer offset Exception, \" + this.storePath, e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void persist(MessageQueue mq) {\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void removeOffset(MessageQueue mq) {\n",
      "\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void updateConsumeOffsetToBroker(final MessageQueue mq, final long offset, final boolean isOneway)\n",
      "        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n",
      "\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Map<MessageQueue, Long> cloneOffsetTable(String topic) {\n",
      "        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<MessageQueue, Long>();\n",
      "        for (Map.Entry<MessageQueue, AtomicLong> entry : this.offsetTable.entrySet()) {\n",
      "            MessageQueue mq = entry.getKey();\n",
      "            if (!UtilAll.isBlank(topic) && !topic.equals(mq.getTopic())) {\n",
      "                continue;\n",
      "            }\n",
      "            cloneOffsetTable.put(mq, entry.getValue().get());\n",
      "\n",
      "        }\n",
      "        return cloneOffsetTable;\n",
      "    }\n",
      "\n",
      "    private OffsetSerializeWrapper readLocalOffset() throws MQClientException {\n",
      "        String content = null;\n",
      "        try {\n",
      "            content = MixAll.file2String(this.storePath);\n",
      "        } catch (IOException e) {\n",
      "            log.warn(\"Load local offset store file exception\", e);\n",
      "        }\n",
      "        if (null == content || content.length() == 0) {\n",
      "            return this.readLocalOffsetBak();\n",
      "        } else {\n",
      "            OffsetSerializeWrapper offsetSerializeWrapper = null;\n",
      "            try {\n",
      "                offsetSerializeWrapper =\n",
      "                    OffsetSerializeWrapper.fromJson(content, OffsetSerializeWrapper.class);\n",
      "            } catch (Exception e) {\n",
      "                log.warn(\"readLocalOffset Exception, and try to correct\", e);\n",
      "                return this.readLocalOffsetBak();\n",
      "            }\n",
      "\n",
      "            return offsetSerializeWrapper;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private OffsetSerializeWrapper readLocalOffsetBak() throws MQClientException {\n",
      "        String content = null;\n",
      "        try {\n",
      "            content = MixAll.file2String(this.storePath + \".bak\");\n",
      "        } catch (IOException e) {\n",
      "            log.warn(\"Load local offset store bak file exception\", e);\n",
      "        }\n",
      "        if (content != null && content.length() > 0) {\n",
      "            OffsetSerializeWrapper offsetSerializeWrapper = null;\n",
      "            try {\n",
      "                offsetSerializeWrapper =\n",
      "                    OffsetSerializeWrapper.fromJson(content, OffsetSerializeWrapper.class);\n",
      "            } catch (Exception e) {\n",
      "                log.warn(\"readLocalOffset Exception\", e);\n",
      "                throw new MQClientException(\"readLocalOffset Exception, maybe fastjson version too low\"\n",
      "                    + FAQUrl.suggestTodo(FAQUrl.LOAD_JSON_EXCEPTION),\n",
      "                    e);\n",
      "            }\n",
      "            return offsetSerializeWrapper;\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.consumer.store;\n",
      "\n",
      "import java.io.File;\n",
      "import java.util.Collections;\n",
      "import java.util.HashSet;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.apache.rocketmq.client.ClientConfig;\n",
      "import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "import org.junit.runner.RunWith;\n",
      "import org.mockito.Mock;\n",
      "import org.mockito.junit.MockitoJUnitRunner;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "@RunWith(MockitoJUnitRunner.class)\n",
      "public class LocalFileOffsetStoreTest {\n",
      "    @Mock\n",
      "    private MQClientInstance mQClientFactory;\n",
      "    private String group = \"FooBarGroup\";\n",
      "    private String topic = \"FooBar\";\n",
      "    private String brokerName = \"DefaultBrokerName\";\n",
      "\n",
      "    @Before\n",
      "    public void init() {\n",
      "        System.setProperty(\"rocketmq.client.localOffsetStoreDir\", System.getProperty(\"java.io.tmpdir\") + File.separator + \".rocketmq_offsets\");\n",
      "        String clientId = new ClientConfig().buildMQClientId() + \"#TestNamespace\" + System.currentTimeMillis();\n",
      "        when(mQClientFactory.getClientId()).thenReturn(clientId);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testUpdateOffset() throws Exception {\n",
      "        OffsetStore offsetStore = new LocalFileOffsetStore(mQClientFactory, group);\n",
      "        MessageQueue messageQueue = new MessageQueue(topic, brokerName, 1);\n",
      "        offsetStore.updateOffset(messageQueue, 1024, false);\n",
      "\n",
      "        assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_MEMORY)).isEqualTo(1024);\n",
      "\n",
      "        offsetStore.updateOffset(messageQueue, 1023, false);\n",
      "        assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_MEMORY)).isEqualTo(1023);\n",
      "\n",
      "        offsetStore.updateOffset(messageQueue, 1022, true);\n",
      "        assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_MEMORY)).isEqualTo(1023);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testReadOffset_FromStore() throws Exception {\n",
      "        OffsetStore offsetStore = new LocalFileOffsetStore(mQClientFactory, group);\n",
      "        MessageQueue messageQueue = new MessageQueue(topic, brokerName, 2);\n",
      "\n",
      "        offsetStore.updateOffset(messageQueue, 1024, false);\n",
      "        assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_STORE)).isEqualTo(-1);\n",
      "\n",
      "        offsetStore.persistAll(new HashSet<MessageQueue>(Collections.singletonList(messageQueue)));\n",
      "        assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_STORE)).isEqualTo(1024);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCloneOffset() throws Exception {\n",
      "        OffsetStore offsetStore = new LocalFileOffsetStore(mQClientFactory, group);\n",
      "        MessageQueue messageQueue = new MessageQueue(topic, brokerName, 3);\n",
      "        offsetStore.updateOffset(messageQueue, 1024, false);\n",
      "        Map<MessageQueue, Long> cloneOffsetTable = offsetStore.cloneOffsetTable(topic);\n",
      "\n",
      "        assertThat(cloneOffsetTable.size()).isEqualTo(1);\n",
      "        assertThat(cloneOffsetTable.get(messageQueue)).isEqualTo(1024);\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "LocalFileOffsetStore::::load()": [
        61,
        75
      ],
      "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)": [
        169,
        181
      ],
      "LocalFileOffsetStore::::readLocalOffset()": [
        183,
        204
      ],
      "LocalFileOffsetStore::::readLocalOffsetBak()": [
        206,
        228
      ]
    },
    "test_method_lines_dic": {
      "LocalFileOffsetStoreTest::::init()": [
        44,
        49
      ],
      "LocalFileOffsetStoreTest::::testUpdateOffset()": [
        51,
        64
      ],
      "LocalFileOffsetStoreTest::::testReadOffset_FromStore()": [
        66,
        76
      ],
      "LocalFileOffsetStoreTest::::testCloneOffset()": [
        78,
        87
      ]
    },
    "reverse_method_lines_dic": {
      "61": "LocalFileOffsetStore::::load()",
      "62": "LocalFileOffsetStore::::load()",
      "63": "LocalFileOffsetStore::::load()",
      "64": "LocalFileOffsetStore::::load()",
      "65": "LocalFileOffsetStore::::load()",
      "66": "LocalFileOffsetStore::::load()",
      "67": "LocalFileOffsetStore::::load()",
      "68": "LocalFileOffsetStore::::load()",
      "69": "LocalFileOffsetStore::::load()",
      "70": "LocalFileOffsetStore::::load()",
      "71": "LocalFileOffsetStore::::load()",
      "72": "LocalFileOffsetStore::::load()",
      "73": "LocalFileOffsetStore::::load()",
      "74": "LocalFileOffsetStore::::load()",
      "75": "LocalFileOffsetStore::::load()",
      "169": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "170": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "171": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "172": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "173": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "174": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "175": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "176": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "177": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "178": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "179": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "180": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "181": "LocalFileOffsetStore::::cloneOffsetTable(java.lang.String)",
      "183": "LocalFileOffsetStore::::readLocalOffset()",
      "184": "LocalFileOffsetStore::::readLocalOffset()",
      "185": "LocalFileOffsetStore::::readLocalOffset()",
      "186": "LocalFileOffsetStore::::readLocalOffset()",
      "187": "LocalFileOffsetStore::::readLocalOffset()",
      "188": "LocalFileOffsetStore::::readLocalOffset()",
      "189": "LocalFileOffsetStore::::readLocalOffset()",
      "190": "LocalFileOffsetStore::::readLocalOffset()",
      "191": "LocalFileOffsetStore::::readLocalOffset()",
      "192": "LocalFileOffsetStore::::readLocalOffset()",
      "193": "LocalFileOffsetStore::::readLocalOffset()",
      "194": "LocalFileOffsetStore::::readLocalOffset()",
      "195": "LocalFileOffsetStore::::readLocalOffset()",
      "196": "LocalFileOffsetStore::::readLocalOffset()",
      "197": "LocalFileOffsetStore::::readLocalOffset()",
      "198": "LocalFileOffsetStore::::readLocalOffset()",
      "199": "LocalFileOffsetStore::::readLocalOffset()",
      "200": "LocalFileOffsetStore::::readLocalOffset()",
      "201": "LocalFileOffsetStore::::readLocalOffset()",
      "202": "LocalFileOffsetStore::::readLocalOffset()",
      "203": "LocalFileOffsetStore::::readLocalOffset()",
      "204": "LocalFileOffsetStore::::readLocalOffset()",
      "206": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "207": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "208": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "209": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "210": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "211": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "212": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "213": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "214": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "215": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "216": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "217": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "218": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "219": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "220": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "221": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "222": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "223": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "224": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "225": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "226": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "227": "LocalFileOffsetStore::::readLocalOffsetBak()",
      "228": "LocalFileOffsetStore::::readLocalOffsetBak()"
    },
    "test_reverse_method_lines_dic": {
      "44": "LocalFileOffsetStoreTest::::init()",
      "45": "LocalFileOffsetStoreTest::::init()",
      "46": "LocalFileOffsetStoreTest::::init()",
      "47": "LocalFileOffsetStoreTest::::init()",
      "48": "LocalFileOffsetStoreTest::::init()",
      "49": "LocalFileOffsetStoreTest::::init()",
      "51": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "52": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "53": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "54": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "55": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "56": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "57": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "58": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "59": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "60": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "61": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "62": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "63": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "64": "LocalFileOffsetStoreTest::::testUpdateOffset()",
      "66": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "67": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "68": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "69": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "70": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "71": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "72": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "73": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "74": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "75": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "76": "LocalFileOffsetStoreTest::::testReadOffset_FromStore()",
      "78": "LocalFileOffsetStoreTest::::testCloneOffset()",
      "79": "LocalFileOffsetStoreTest::::testCloneOffset()",
      "80": "LocalFileOffsetStoreTest::::testCloneOffset()",
      "81": "LocalFileOffsetStoreTest::::testCloneOffset()",
      "82": "LocalFileOffsetStoreTest::::testCloneOffset()",
      "83": "LocalFileOffsetStoreTest::::testCloneOffset()",
      "84": "LocalFileOffsetStoreTest::::testCloneOffset()",
      "85": "LocalFileOffsetStoreTest::::testCloneOffset()",
      "86": "LocalFileOffsetStoreTest::::testCloneOffset()",
      "87": "LocalFileOffsetStoreTest::::testCloneOffset()"
    },
    "tests": [
      {
        "test_lines": [
          51,
          64
        ],
        "covered_lines": [
          42,
          44,
          45,
          49,
          52,
          53,
          54,
          55,
          56,
          59,
          79,
          80,
          81,
          82,
          85,
          86,
          87,
          89,
          93,
          97,
          98,
          101,
          102,
          103
        ]
      },
      {
        "test_lines": [
          66,
          76
        ],
        "covered_lines": [
          42,
          44,
          45,
          49,
          52,
          53,
          54,
          55,
          56,
          59,
          79,
          80,
          81,
          82,
          85,
          86,
          89,
          93,
          97,
          98,
          111,
          114,
          115,
          116,
          117,
          118,
          119,
          128,
          133,
          136,
          137,
          138,
          139,
          140,
          142,
          144,
          145,
          147,
          150,
          152,
          184,
          186,
          189,
          190,
          191,
          193,
          195,
          196,
          200,
          202,
          207,
          209,
          212,
          213,
          227
        ]
      },
      {
        "test_lines": [
          78,
          87
        ],
        "covered_lines": [
          42,
          44,
          45,
          49,
          52,
          53,
          54,
          55,
          56,
          59,
          79,
          80,
          81,
          82,
          85,
          93,
          171,
          172,
          173,
          174,
          177,
          179,
          180
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/client/src/main/java/org/apache/rocketmq/client/common/ThreadLocalIndex.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.client.common;\n",
      "\n",
      "import java.util.Random;\n",
      "\n",
      "public class ThreadLocalIndex {\n",
      "    private final ThreadLocal<Integer> threadLocalIndex = new ThreadLocal<Integer>();\n",
      "    private final Random random = new Random();\n",
      "\n",
      "    public int getAndIncrement() {\n",
      "        Integer index = this.threadLocalIndex.get();\n",
      "        if (null == index) {\n",
      "            index = Math.abs(random.nextInt());\n",
      "            this.threadLocalIndex.set(index);\n",
      "        }\n",
      "\n",
      "        index = Math.abs(index + 1);\n",
      "        this.threadLocalIndex.set(index);\n",
      "        return index;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return \"ThreadLocalIndex{\" +\n",
      "            \"threadLocalIndex=\" + threadLocalIndex.get() +\n",
      "            '}';\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.common;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class ThreadLocalIndexTest {\n",
      "    @Test\n",
      "    public void testGetAndIncrement() throws Exception {\n",
      "        ThreadLocalIndex localIndex = new ThreadLocalIndex();\n",
      "        int initialVal = localIndex.getAndIncrement();\n",
      "\n",
      "        assertThat(localIndex.getAndIncrement()).isEqualTo(initialVal + 1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetAndIncrement2() throws Exception {\n",
      "        ThreadLocalIndex localIndex = new ThreadLocalIndex();\n",
      "        int initialVal = localIndex.getAndIncrement();\n",
      "        assertThat(initialVal >= 0);\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "ThreadLocalIndex::::getAndIncrement()": [
        26,
        36
      ],
      "ThreadLocalIndex::::toString()": [
        38,
        43
      ]
    },
    "test_method_lines_dic": {
      "ThreadLocalIndexTest::::testGetAndIncrement()": [
        24,
        30
      ],
      "ThreadLocalIndexTest::::testGetAndIncrement2()": [
        32,
        37
      ]
    },
    "reverse_method_lines_dic": {
      "26": "ThreadLocalIndex::::getAndIncrement()",
      "27": "ThreadLocalIndex::::getAndIncrement()",
      "28": "ThreadLocalIndex::::getAndIncrement()",
      "29": "ThreadLocalIndex::::getAndIncrement()",
      "30": "ThreadLocalIndex::::getAndIncrement()",
      "31": "ThreadLocalIndex::::getAndIncrement()",
      "32": "ThreadLocalIndex::::getAndIncrement()",
      "33": "ThreadLocalIndex::::getAndIncrement()",
      "34": "ThreadLocalIndex::::getAndIncrement()",
      "35": "ThreadLocalIndex::::getAndIncrement()",
      "36": "ThreadLocalIndex::::getAndIncrement()",
      "38": "ThreadLocalIndex::::toString()",
      "39": "ThreadLocalIndex::::toString()",
      "40": "ThreadLocalIndex::::toString()",
      "41": "ThreadLocalIndex::::toString()",
      "42": "ThreadLocalIndex::::toString()",
      "43": "ThreadLocalIndex::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "24": "ThreadLocalIndexTest::::testGetAndIncrement()",
      "25": "ThreadLocalIndexTest::::testGetAndIncrement()",
      "26": "ThreadLocalIndexTest::::testGetAndIncrement()",
      "27": "ThreadLocalIndexTest::::testGetAndIncrement()",
      "28": "ThreadLocalIndexTest::::testGetAndIncrement()",
      "29": "ThreadLocalIndexTest::::testGetAndIncrement()",
      "30": "ThreadLocalIndexTest::::testGetAndIncrement()",
      "32": "ThreadLocalIndexTest::::testGetAndIncrement2()",
      "33": "ThreadLocalIndexTest::::testGetAndIncrement2()",
      "34": "ThreadLocalIndexTest::::testGetAndIncrement2()",
      "35": "ThreadLocalIndexTest::::testGetAndIncrement2()",
      "36": "ThreadLocalIndexTest::::testGetAndIncrement2()",
      "37": "ThreadLocalIndexTest::::testGetAndIncrement2()"
    },
    "tests": [
      {
        "test_lines": [
          24,
          30
        ],
        "covered_lines": [
          22,
          23,
          24,
          27,
          28,
          29,
          30,
          33,
          34,
          35
        ]
      },
      {
        "test_lines": [
          32,
          37
        ],
        "covered_lines": [
          22,
          23,
          24,
          27,
          28,
          29,
          30,
          33,
          34,
          35
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/client/src/main/java/org/apache/rocketmq/client/producer/selector/SelectMessageQueueByHash.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.producer.selector;\n",
      "\n",
      "import java.util.List;\n",
      "import org.apache.rocketmq.client.producer.MessageQueueSelector;\n",
      "import org.apache.rocketmq.common.message.Message;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "\n",
      "public class SelectMessageQueueByHash implements MessageQueueSelector {\n",
      "\n",
      "    @Override\n",
      "    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n",
      "        int value = arg.hashCode() % mqs.size();\n",
      "        if (value < 0) {\n",
      "            value = Math.abs(value);\n",
      "        }\n",
      "        return mqs.get(value);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.producer.selector;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import org.apache.rocketmq.common.message.Message;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class SelectMessageQueueByHashTest {\n",
      "\n",
      "    private String topic = \"FooBar\";\n",
      "\n",
      "    @Test\n",
      "    public void testSelect() throws Exception {\n",
      "        SelectMessageQueueByHash selector = new SelectMessageQueueByHash();\n",
      "\n",
      "        Message message = new Message(topic, new byte[] {});\n",
      "\n",
      "        List<MessageQueue> messageQueues = new ArrayList<MessageQueue>();\n",
      "        for (int i = 0; i < 10; i++) {\n",
      "            MessageQueue messageQueue = new MessageQueue(topic, \"DefaultBroker\", i);\n",
      "            messageQueues.add(messageQueue);\n",
      "        }\n",
      "\n",
      "        String orderId = \"123\";\n",
      "        String anotherOrderId = \"234\";\n",
      "        MessageQueue selected = selector.select(messageQueues, message, orderId);\n",
      "        assertThat(selector.select(messageQueues, message, anotherOrderId)).isNotEqualTo(selected);\n",
      "\n",
      "        //No exception is thrown while order Id hashcode is Integer.MIN\n",
      "        anotherOrderId = \"polygenelubricants\";\n",
      "        selector.select(messageQueues, message, anotherOrderId);\n",
      "        anotherOrderId = \"GydZG_\";\n",
      "        selector.select(messageQueues, message, anotherOrderId);\n",
      "        anotherOrderId = \"DESIGNING WORKHOUSES\";\n",
      "        selector.select(messageQueues, message, anotherOrderId);\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "SelectMessageQueueByHashTest::::testSelect()": [
        31,
        55
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "31": "SelectMessageQueueByHashTest::::testSelect()",
      "32": "SelectMessageQueueByHashTest::::testSelect()",
      "33": "SelectMessageQueueByHashTest::::testSelect()",
      "34": "SelectMessageQueueByHashTest::::testSelect()",
      "35": "SelectMessageQueueByHashTest::::testSelect()",
      "36": "SelectMessageQueueByHashTest::::testSelect()",
      "37": "SelectMessageQueueByHashTest::::testSelect()",
      "38": "SelectMessageQueueByHashTest::::testSelect()",
      "39": "SelectMessageQueueByHashTest::::testSelect()",
      "40": "SelectMessageQueueByHashTest::::testSelect()",
      "41": "SelectMessageQueueByHashTest::::testSelect()",
      "42": "SelectMessageQueueByHashTest::::testSelect()",
      "43": "SelectMessageQueueByHashTest::::testSelect()",
      "44": "SelectMessageQueueByHashTest::::testSelect()",
      "45": "SelectMessageQueueByHashTest::::testSelect()",
      "46": "SelectMessageQueueByHashTest::::testSelect()",
      "47": "SelectMessageQueueByHashTest::::testSelect()",
      "48": "SelectMessageQueueByHashTest::::testSelect()",
      "49": "SelectMessageQueueByHashTest::::testSelect()",
      "50": "SelectMessageQueueByHashTest::::testSelect()",
      "51": "SelectMessageQueueByHashTest::::testSelect()",
      "52": "SelectMessageQueueByHashTest::::testSelect()",
      "53": "SelectMessageQueueByHashTest::::testSelect()",
      "54": "SelectMessageQueueByHashTest::::testSelect()",
      "55": "SelectMessageQueueByHashTest::::testSelect()"
    },
    "tests": [
      {
        "test_lines": [
          31,
          55
        ],
        "covered_lines": [
          24,
          28,
          29,
          30,
          32
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.impl.consumer;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.TreeMap;\n",
      "import java.util.concurrent.atomic.AtomicLong;\n",
      "import java.util.concurrent.locks.Lock;\n",
      "import java.util.concurrent.locks.ReadWriteLock;\n",
      "import java.util.concurrent.locks.ReentrantLock;\n",
      "import java.util.concurrent.locks.ReentrantReadWriteLock;\n",
      "\n",
      "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\n",
      "import org.apache.rocketmq.client.log.ClientLogger;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.common.message.MessageAccessor;\n",
      "import org.apache.rocketmq.common.message.MessageConst;\n",
      "import org.apache.rocketmq.common.message.MessageExt;\n",
      "import org.apache.rocketmq.common.protocol.body.ProcessQueueInfo;\n",
      "\n",
      "/**\n",
      " * \u961f\u5217\u6d88\u8d39\u5feb\u7167\uff0cProcessQueue\u548c\u4e00\u4e2aMessageQueue\u662f\u5bf9\u5e94\u7684\uff0c\u5373\u4e00\u4e2a\u961f\u5217\u4f1a\u6709\u4e00\u4e2aProcessQueue\u7684\u6570\u636e\u7ed3\u6784\n",
      " * \u4f7f\u7528ReadWriteLock\u8fdb\u884c\u6d88\u606f\u7684\u8bfb\u5199\u9501\uff0c\u4f7f\u7528TreeMap<Long, MessageExt>\u4f5c\u4e3a\u6d88\u606f\u62c9\u53d6\u7684\u5b58\u50a8\u7ed3\u6784\n",
      " */\n",
      "public class ProcessQueue {\n",
      "    public final static long REBALANCE_LOCK_MAX_LIVE_TIME =\n",
      "        Long.parseLong(System.getProperty(\"rocketmq.client.rebalance.lockMaxLiveTime\", \"30000\"));\n",
      "    public final static long REBALANCE_LOCK_INTERVAL = Long.parseLong(System.getProperty(\"rocketmq.client.rebalance.lockInterval\", \"20000\"));\n",
      "    private final static long PULL_MAX_IDLE_TIME = Long.parseLong(System.getProperty(\"rocketmq.client.pull.pullMaxIdleTime\", \"120000\"));\n",
      "    private final InternalLogger log = ClientLogger.getLog();\n",
      "    private final ReadWriteLock lockTreeMap = new ReentrantReadWriteLock();\n",
      "    // \u7528\u6765\u4fdd\u5b58\u62c9\u53d6\u5230\u7684\u6d88\u606f\n",
      "    private final TreeMap<Long, MessageExt> msgTreeMap = new TreeMap<Long, MessageExt>();\n",
      "    // \u5f53\u524d\u4fdd\u5b58\u7684\u6d88\u606f\u6570\uff0c\u653e\u8fdb\u6765\u7684\u65f6\u5019\u4f1a\u52a0\uff0c\u79fb\u9664\u7684\u65f6\u5019\u4f1a\u51cf\n",
      "    private final AtomicLong msgCount = new AtomicLong();\n",
      "    private final AtomicLong msgSize = new AtomicLong();\n",
      "    // \u6d88\u8d39\u9501\uff0c\u4e3b\u8981\u5728\u987a\u5e8f\u6d88\u8d39\u548c\u79fb\u9664ProcessQueue\u7684\u65f6\u5019\u4f7f\u7528\n",
      "    private final Lock lockConsume = new ReentrantLock();\n",
      "    //msgTreeMap\u7684\u5b50\u96c6,\u53ea\u6709\u987a\u5e8f\u6d88\u8d39\u6d88\u606f\u7684\u65f6\u5019\u4f7f\u7528\n",
      "    private final TreeMap<Long, MessageExt> consumingMsgOrderlyTreeMap = new TreeMap<Long, MessageExt>();\n",
      "    // \u8bb0\u5f55\u4e86\u5e9f\u5f03ProcessQueue\u7684\u65f6\u5019lockConsume\u7684\u6b21\u6570\n",
      "    private final AtomicLong tryUnlockTimes = new AtomicLong(0);\n",
      "    // ProcessQueue\u4e2d\u4fdd\u5b58\u7684\u6d88\u606f\u91cc\u7684\u6700\u5927offset\uff0c\u4e3aConsumeQueue\u7684offset\n",
      "    private volatile long queueOffsetMax = 0L;\n",
      "    // \u8be5\u6570\u636e\u7ed3\u6784\u91cc\u7684\u6d88\u606f\u662f\u5426\u5e9f\u5f03\n",
      "    private volatile boolean dropped = false;\n",
      "    // \u4e0a\u6b21\u6267\u884c\u62c9\u53d6\u6d88\u606f\u7684\u65f6\u95f4\n",
      "    private volatile long lastPullTimestamp = System.currentTimeMillis();\n",
      "    private volatile long lastConsumeTimestamp = System.currentTimeMillis();\n",
      "    private volatile boolean locked = false;\n",
      "    // \u4e0a\u6b21\u9501\u5b9a\u7684\u65f6\u95f4\n",
      "    private volatile long lastLockTimestamp = System.currentTimeMillis();\n",
      "    // \u662f\u5426\u6b63\u5728\u6d88\u8d39\n",
      "    private volatile boolean consuming = false;\n",
      "    // \u8be5\u53c2\u6570\u4e3a\u8c03\u6574\u7ebf\u7a0b\u6c60\u7684\u65f6\u5019\u63d0\u4f9b\u4e86\u6570\u636e\u53c2\u8003\n",
      "    private volatile long msgAccCnt = 0;\n",
      "\n",
      "    //\u9501\u8d85\u65f6\u65f6\u95f4\uff0c\u9ed8\u8ba430s\n",
      "    public boolean isLockExpired() {\n",
      "        return (System.currentTimeMillis() - this.lastLockTimestamp) > REBALANCE_LOCK_MAX_LIVE_TIME;\n",
      "    }\n",
      "\n",
      "    //\u62c9\u53d6\u8d85\u65f6\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e24\u5206\u949f\n",
      "    public boolean isPullExpired() {\n",
      "        return (System.currentTimeMillis() - this.lastPullTimestamp) > PULL_MAX_IDLE_TIME;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6e05\u7406\u8fc7\u671f\u6d88\u606f\n",
      "     * @param pushConsumer\n",
      "     */\n",
      "    public void cleanExpiredMsg(DefaultMQPushConsumer pushConsumer) {\n",
      "        if (pushConsumer.getDefaultMQPushConsumerImpl().isConsumeOrderly()) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        int loop = msgTreeMap.size() < 16 ? msgTreeMap.size() : 16;\n",
      "        for (int i = 0; i < loop; i++) {\n",
      "            MessageExt msg = null;\n",
      "            try {\n",
      "                this.lockTreeMap.readLock().lockInterruptibly();\n",
      "                try {\n",
      "                    // \u5b58\u5728\u5f85\u5904\u7406\u7684\u6d88\u606f\n",
      "                    // \u4e14offset\u6700\u5c0f\u7684\u6d88\u606f\u6d88\u8d39\u65f6\u95f4\u5927\u4e8econsumeTimeout() * 60 * 1000\uff08\u9ed8\u8ba415\u5206\u949f\uff09\n",
      "                    if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {\n",
      "                        msg = msgTreeMap.firstEntry().getValue();\n",
      "                    } else {\n",
      "\n",
      "                        break;\n",
      "                    }\n",
      "                } finally {\n",
      "                    this.lockTreeMap.readLock().unlock();\n",
      "                }\n",
      "            } catch (InterruptedException e) {\n",
      "                log.error(\"getExpiredMsg exception\", e);\n",
      "            }\n",
      "\n",
      "            try {\n",
      "\n",
      "                //\u5c06\u6d88\u606f\u53d1\u56deBroker\uff0c\u7b49\u5f85\u91cd\u8bd5\uff0c\u4e14\u5ef6\u8fdf\u7ea7\u522b\u4e3a3\n",
      "                pushConsumer.sendMessageBack(msg, 3);\n",
      "                log.info(\"send expire msg back. topic={}, msgId={}, storeHost={}, queueId={}, queueOffset={}\", msg.getTopic(), msg.getMsgId(), msg.getStoreHost(), msg.getQueueId(), msg.getQueueOffset());\n",
      "                try {\n",
      "                    this.lockTreeMap.writeLock().lockInterruptibly();\n",
      "                    try {\n",
      "                        // \u5982\u679c\u8fd9\u4e2a\u65f6\u5019\uff0cProcessQueue\u91ccoffset\u6700\u5c0f\u7684\u6d88\u606f\u8fd8\u7b49\u4e8e\u4e0a\u9762\u53d6\u5230\u7684\u6d88\u606f\n",
      "                        // \u90a3\u4e48\u5c31\u5c06\u5176\u79fb\u9664\uff0c\u6709\u53ef\u80fd\u5728\u4e0a\u9762\u53d6\u51fa\u6d88\u606f\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6d88\u606f\u5df2\u7ecf\u88ab\u6d88\u8d39\uff0c\u4e14\u4eceProcessQueue\u4e2d\u79fb\u9664\n",
      "                        if (!msgTreeMap.isEmpty() && msg.getQueueOffset() == msgTreeMap.firstKey()) {\n",
      "                            try {\n",
      "                                removeMessage(Collections.singletonList(msg));\n",
      "                            } catch (Exception e) {\n",
      "                                log.error(\"send expired msg exception\", e);\n",
      "                            }\n",
      "                        }\n",
      "                    } finally {\n",
      "                        this.lockTreeMap.writeLock().unlock();\n",
      "                    }\n",
      "                } catch (InterruptedException e) {\n",
      "                    log.error(\"getExpiredMsg exception\", e);\n",
      "                }\n",
      "            } catch (Exception e) {\n",
      "                log.error(\"send expired msg exception\", e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public boolean putMessage(final List<MessageExt> msgs) {\n",
      "        // \u8fd4\u56de\u503c\uff0c\u987a\u5e8f\u6d88\u8d39\u6709\u7528\uff0c\u8fd4\u56detrue\u8868\u793a\u53ef\u4ee5\u6d88\u8d39\n",
      "        boolean dispatchToConsume = false;\n",
      "        try {\n",
      "            this.lockTreeMap.writeLock().lockInterruptibly();\n",
      "            try {\n",
      "                int validMsgCnt = 0;\n",
      "                for (MessageExt msg : msgs) {\n",
      "                    // \u4ee5offset\u4e3akey\uff0c\u653e\u5230treemap\u4e2d\n",
      "                    MessageExt old = msgTreeMap.put(msg.getQueueOffset(), msg);\n",
      "                    if (null == old) {\n",
      "                        validMsgCnt++;\n",
      "                        // \u66f4\u65b0\u5f53\u524dProcessQueue\u4e2d\u6d88\u606f\u6700\u5927\u7684offset\n",
      "                        this.queueOffsetMax = msg.getQueueOffset();\n",
      "                        msgSize.addAndGet(msg.getBody().length);\n",
      "                    }\n",
      "                }\n",
      "                // \u65b0\u589e\u6d88\u606f\u6570\u91cf\n",
      "                msgCount.addAndGet(validMsgCnt);\n",
      "\n",
      "                // \u5982\u679cProcessQueue\u6709\u9700\u8981\u5904\u7406\u7684\u6d88\u606f(\u4ece\u4e0a\u53ef\u77e5\uff0c\u5982\u679cmsgs\u4e0d\u4e3a\u7a7a\u90a3\u4e48msgTreeMap\u4e0d\u4e3a\u7a7a)\n",
      "                // \u5982\u679cconsuming\u4e3afalse\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3atrue\uff0c\u8868\u793a\u6b63\u5728\u6d88\u8d39\n",
      "                // \u8fd9\u4e2a\u503c\u5728\u653e\u6d88\u606f\u7684\u65f6\u5019\u4f1a\u8bbe\u7f6e\u4e3atrue\uff0c\u5728\u987a\u5e8f\u6d88\u8d39\u6a21\u5f0f\uff0c\u53d6\u4e0d\u5230\u6d88\u606f\u5219\u8bbe\u7f6e\u4e3afalse\n",
      "                if (!msgTreeMap.isEmpty() && !this.consuming) {\n",
      "                    // \u6709\u6d88\u606f\uff0c\u4e14\u4e3a\u672a\u6d88\u8d39\u72b6\u6001\uff0c\u5219\u987a\u5e8f\u6d88\u8d39\u6a21\u5f0f\u53ef\u4ee5\u6d88\u8d39\n",
      "                    dispatchToConsume = true;\n",
      "                    this.consuming = true;\n",
      "                }\n",
      "\n",
      "                if (!msgs.isEmpty()) {\n",
      "                    MessageExt messageExt = msgs.get(msgs.size() - 1);\n",
      "                    // property\u4e3aConsumeQueue\u91cc\u6700\u5927\u7684offset\n",
      "                    String property = messageExt.getProperty(MessageConst.PROPERTY_MAX_OFFSET);\n",
      "                    if (property != null) {\n",
      "                        long accTotal = Long.parseLong(property) - messageExt.getQueueOffset();\n",
      "                        if (accTotal > 0) {\n",
      "                            // \u5f53\u524d\u6d88\u606f\u7684offset\u4e0e\u6700\u5927\u6d88\u606f\u7684\u5dee\u503c\uff0c\u76f8\u5f53\u4e8e\u8fd8\u6709\u591a\u5c11offset\u6ca1\u6709\u6d88\u8d39\n",
      "                            this.msgAccCnt = accTotal;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lockTreeMap.writeLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"putMessage exception\", e);\n",
      "        }\n",
      "\n",
      "        return dispatchToConsume;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5f53\u524d\u8fd9\u6279\u6d88\u606f\u4e2d\u6700\u5927\u6700\u5c0foffset\u4e4b\u524d\u7684\u5dee\u8ddd\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e3b\u8981\u5728\u62c9\u53d6\u6d88\u606f\u7684\u65f6\u5019\uff0c\n",
      "     * \u7528\u6765\u5224\u65ad\u5f53\u524d\u6709\u591a\u5c11\u6d88\u606f\u672a\u5904\u7406\uff0c\u5982\u679c\u5927\u4e8e\u67d0\u4e2a\u503c(\u9ed8\u8ba42000)\uff0c\u5219\u8fdb\u884c\u6d41\u63a7\u5904\u7406\n",
      "     * @return\n",
      "     */\n",
      "    public long getMaxSpan() {\n",
      "        try {\n",
      "            this.lockTreeMap.readLock().lockInterruptibly();\n",
      "            try {\n",
      "                if (!this.msgTreeMap.isEmpty()) {\n",
      "                    return this.msgTreeMap.lastKey() - this.msgTreeMap.firstKey();\n",
      "                }\n",
      "            } finally {\n",
      "                this.lockTreeMap.readLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"getMaxSpan exception\", e);\n",
      "        }\n",
      "\n",
      "        return 0;\n",
      "    }\n",
      "\n",
      "    public long removeMessage(final List<MessageExt> msgs) {\n",
      "        // \u8fd4\u56de\u7ed9\u5916\u90e8\u7684\u503c\uff0c\u4ee3\u8868\u5f53\u524d\u6d88\u8d39\u8fdb\u5ea6\u7684offset\n",
      "        long result = -1;\n",
      "        final long now = System.currentTimeMillis();\n",
      "        try {\n",
      "            this.lockTreeMap.writeLock().lockInterruptibly();\n",
      "            this.lastConsumeTimestamp = now;\n",
      "            try {\n",
      "                if (!msgTreeMap.isEmpty()) {\n",
      "                    result = this.queueOffsetMax + 1;\n",
      "                    int removedCnt = 0;\n",
      "                    // \u904d\u5386\u6d88\u606f\uff0c\u5c06\u5176\u4eceTreeMap\u4e2d\u79fb\u9664\n",
      "                    for (MessageExt msg : msgs) {\n",
      "                        MessageExt prev = msgTreeMap.remove(msg.getQueueOffset());\n",
      "                        if (prev != null) {\n",
      "                            // \u4e0d\u4e3a\u7a7a\u8bc1\u660e\u79fb\u9664\u6210\u529f\n",
      "                            // \u79fb\u9664\u6d88\u606f\u6570\n",
      "                            removedCnt--;\n",
      "                            msgSize.addAndGet(0 - msg.getBody().length);\n",
      "                        }\n",
      "                    }\n",
      "                    // msgCount\u662fProcessQueue\u4e2d\u7684\u6d88\u606f\u6570\u91cf\uff0c\u79fb\u9664\u4e86\u5219\u9700\u8981\u51cf\u53bb\u8be5\u503c\uff0c\u5373\u52a0\u4e0a\u8be5\u503c\u7684\u8d1f\u6570\n",
      "                    msgCount.addAndGet(removedCnt);\n",
      "                    // \u5982\u679c\u8fd8\u6709\u6d88\u606f\u5b58\u5728\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u6700\u5c0f\u7684offset\u4f5c\u4e3a\u6d88\u8d39\u8fdb\u5ea6\n",
      "                    // \u5982\u679c\u5df2\u7ecf\u6ca1\u6709\u6d88\u606f\u4e86\uff0c\u5219\u4f7f\u7528\u4e4b\u524dProcessQueue\u91cc\u6700\u5927\u7684offset\u4f5c\u4e3a\u6d88\u8d39\u8fdb\u5ea6\n",
      "                    if (!msgTreeMap.isEmpty()) {\n",
      "                        result = msgTreeMap.firstKey();\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lockTreeMap.writeLock().unlock();\n",
      "            }\n",
      "        } catch (Throwable t) {\n",
      "            log.error(\"removeMessage exception\", t);\n",
      "        }\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    public TreeMap<Long, MessageExt> getMsgTreeMap() {\n",
      "        return msgTreeMap;\n",
      "    }\n",
      "\n",
      "    public AtomicLong getMsgCount() {\n",
      "        return msgCount;\n",
      "    }\n",
      "\n",
      "    public AtomicLong getMsgSize() {\n",
      "        return msgSize;\n",
      "    }\n",
      "\n",
      "    public boolean isDropped() {\n",
      "        return dropped;\n",
      "    }\n",
      "\n",
      "    public void setDropped(boolean dropped) {\n",
      "        this.dropped = dropped;\n",
      "    }\n",
      "\n",
      "    public boolean isLocked() {\n",
      "        return locked;\n",
      "    }\n",
      "\n",
      "    public void setLocked(boolean locked) {\n",
      "        this.locked = locked;\n",
      "    }\n",
      "\n",
      "    public void rollback() {\n",
      "        try {\n",
      "            this.lockTreeMap.writeLock().lockInterruptibly();\n",
      "            try {\n",
      "                this.msgTreeMap.putAll(this.consumingMsgOrderlyTreeMap);\n",
      "                this.consumingMsgOrderlyTreeMap.clear();\n",
      "            } finally {\n",
      "                this.lockTreeMap.writeLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"rollback exception\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     *\u5728\u987a\u5e8f\u6d88\u8d39\u6a21\u5f0f\u4e0b\uff0c\u8c03\u7528takeMessages\u53d6\u6d88\u606f\uff0c\u5176\u5185\u90e8\u903b\u8f91\u4e2d\uff0c\n",
      "     * 1 \u5c06treeMap\u7684\u6d88\u606f\u653e\u5230\u4e00\u4e2a\u4e34\u65f6\u7528\u7684treeMap\u91cc\uff0c\n",
      "     * 2 \u7136\u540e\u8fdb\u884c\u6d88\u8d39\uff0c\u6d88\u8d39\u5b8c\u6210\u540e\u9700\u8981\u5c06\u8fd9\u4e2a\u4e34\u65f6\u7684map\u6e05\u9664\uff0c\u5219\u662f\u8c03\u7528commit\u65b9\u6cd5\n",
      "     * @return\n",
      "     */\n",
      "    public long commit() {\n",
      "        try {\n",
      "            this.lockTreeMap.writeLock().lockInterruptibly();\n",
      "            try {\n",
      "                // consumingMsgOrderlyTreeMap\u662f\u8fd9\u6b21\u6d88\u8d39\u7684\u6d88\u606f\u96c6\u5408\uff0clastKey\u4ee3\u8868\u5f53\u524d\u6d88\u8d39\u7684\u8fdb\u5ea6\n",
      "                Long offset = this.consumingMsgOrderlyTreeMap.lastKey();\n",
      "                // \u6d88\u8d39\u5b8c\u6210\uff0c\u51cf\u53bb\u8be5\u6279\u6b21\u7684\u6d88\u606f\u6570\u91cf\n",
      "                msgCount.addAndGet(0 - this.consumingMsgOrderlyTreeMap.size());\n",
      "                for (MessageExt msg : this.consumingMsgOrderlyTreeMap.values()) {\n",
      "                    msgSize.addAndGet(0 - msg.getBody().length);\n",
      "                }\n",
      "                // \u6e05\u9664\u6d88\u606f\n",
      "                this.consumingMsgOrderlyTreeMap.clear();\n",
      "                if (offset != null) {\n",
      "                    // \u8fd4\u56de\u6d88\u8d39\u8fdb\u5ea6\n",
      "                    return offset + 1;\n",
      "                }\n",
      "            } finally {\n",
      "                this.lockTreeMap.writeLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"commit exception\", e);\n",
      "        }\n",
      "\n",
      "        return -1;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8ba9\u6d88\u606f\u91cd\u65b0\u6d88\u8d39\uff0c\u5bf9\u5e94commit\u65b9\u6cd5\n",
      "     * @param msgs\n",
      "     */\n",
      "    public void makeMessageToConsumeAgain(List<MessageExt> msgs) {\n",
      "        try {\n",
      "            this.lockTreeMap.writeLock().lockInterruptibly();\n",
      "            try {\n",
      "                for (MessageExt msg : msgs) {\n",
      "                    // \u5c06\u8fd9\u6279\u6ca1\u6d88\u8d39\u6210\u529f\u7684\u6d88\u606f\u4ece\u4e34\u65f6consumingMsgOrderlyTreeMap\u4e2d\u79fb\u9664\n",
      "                    // \u5e76\u653e\u56demsgTreeMap\uff0c\u7b49\u5f85\u4e0b\u6b21\u6d88\u8d39\n",
      "                    this.consumingMsgOrderlyTreeMap.remove(msg.getQueueOffset());\n",
      "                    this.msgTreeMap.put(msg.getQueueOffset(), msg);\n",
      "                }\n",
      "            } finally {\n",
      "                this.lockTreeMap.writeLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"makeMessageToCosumeAgain exception\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public List<MessageExt> takeMessages(final int batchSize) {\n",
      "        List<MessageExt> result = new ArrayList<MessageExt>(batchSize);\n",
      "        final long now = System.currentTimeMillis();\n",
      "        try {\n",
      "            this.lockTreeMap.writeLock().lockInterruptibly();\n",
      "            this.lastConsumeTimestamp = now;\n",
      "            try {\n",
      "                if (!this.msgTreeMap.isEmpty()) {\n",
      "                    // \u4ecetreeMap\u4e2d\u83b7\u53d6batchSize\u6761\u6570\u636e\uff0c\u6bcf\u6b21\u90fd\u8fd4\u56deoffset\u6700\u5c0f\u7684\u90a3\u6761\u5e76\u79fb\u9664\n",
      "                    for (int i = 0; i < batchSize; i++) {\n",
      "                        Map.Entry<Long, MessageExt> entry = this.msgTreeMap.pollFirstEntry();\n",
      "                        if (entry != null) {\n",
      "                            // \u653e\u5230\u8fd4\u56de\u5217\u8868\u548c\u4e00\u4e2a\u4e34\u65f6\u7528\u7684treemapp\u4e2d\n",
      "                            result.add(entry.getValue());\n",
      "                            consumingMsgOrderlyTreeMap.put(entry.getKey(), entry.getValue());\n",
      "                        } else {\n",
      "                            break;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "// \u53d6\u5230\u6d88\u606f\u4e86\u5c31\u4f1a\u5f00\u59cb\u8fdb\u884c\u6d88\u8d39\uff0c\u5982\u679c\u6ca1\u53d6\u5230\uff0c\u5219\u4e0d\u9700\u8981\u6d88\u8d39\uff0c\u90a3\u4e48consuming\u8bbe\u4e3afalse\n",
      "                if (result.isEmpty()) {\n",
      "                    consuming = false;\n",
      "                }\n",
      "            } finally {\n",
      "                this.lockTreeMap.writeLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"take Messages exception\", e);\n",
      "        }\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    public boolean hasTempMessage() {\n",
      "        try {\n",
      "            this.lockTreeMap.readLock().lockInterruptibly();\n",
      "            try {\n",
      "                return !this.msgTreeMap.isEmpty();\n",
      "            } finally {\n",
      "                this.lockTreeMap.readLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "        }\n",
      "\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    public void clear() {\n",
      "        try {\n",
      "            this.lockTreeMap.writeLock().lockInterruptibly();\n",
      "            try {\n",
      "                this.msgTreeMap.clear();\n",
      "                this.consumingMsgOrderlyTreeMap.clear();\n",
      "                this.msgCount.set(0);\n",
      "                this.msgSize.set(0);\n",
      "                this.queueOffsetMax = 0L;\n",
      "            } finally {\n",
      "                this.lockTreeMap.writeLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"rollback exception\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public long getLastLockTimestamp() {\n",
      "        return lastLockTimestamp;\n",
      "    }\n",
      "\n",
      "    public void setLastLockTimestamp(long lastLockTimestamp) {\n",
      "        this.lastLockTimestamp = lastLockTimestamp;\n",
      "    }\n",
      "\n",
      "    public Lock getLockConsume() {\n",
      "        return lockConsume;\n",
      "    }\n",
      "\n",
      "    public long getLastPullTimestamp() {\n",
      "        return lastPullTimestamp;\n",
      "    }\n",
      "\n",
      "    public void setLastPullTimestamp(long lastPullTimestamp) {\n",
      "        this.lastPullTimestamp = lastPullTimestamp;\n",
      "    }\n",
      "\n",
      "    public long getMsgAccCnt() {\n",
      "        return msgAccCnt;\n",
      "    }\n",
      "\n",
      "    public void setMsgAccCnt(long msgAccCnt) {\n",
      "        this.msgAccCnt = msgAccCnt;\n",
      "    }\n",
      "\n",
      "    public long getTryUnlockTimes() {\n",
      "        return this.tryUnlockTimes.get();\n",
      "    }\n",
      "\n",
      "    public void incTryUnlockTimes() {\n",
      "        this.tryUnlockTimes.incrementAndGet();\n",
      "    }\n",
      "\n",
      "    public void fillProcessQueueInfo(final ProcessQueueInfo info) {\n",
      "        try {\n",
      "            this.lockTreeMap.readLock().lockInterruptibly();\n",
      "\n",
      "            if (!this.msgTreeMap.isEmpty()) {\n",
      "                info.setCachedMsgMinOffset(this.msgTreeMap.firstKey());\n",
      "                info.setCachedMsgMaxOffset(this.msgTreeMap.lastKey());\n",
      "                info.setCachedMsgCount(this.msgTreeMap.size());\n",
      "                info.setCachedMsgSizeInMiB((int) (this.msgSize.get() / (1024 * 1024)));\n",
      "            }\n",
      "\n",
      "            if (!this.consumingMsgOrderlyTreeMap.isEmpty()) {\n",
      "                info.setTransactionMsgMinOffset(this.consumingMsgOrderlyTreeMap.firstKey());\n",
      "                info.setTransactionMsgMaxOffset(this.consumingMsgOrderlyTreeMap.lastKey());\n",
      "                info.setTransactionMsgCount(this.consumingMsgOrderlyTreeMap.size());\n",
      "            }\n",
      "\n",
      "            info.setLocked(this.locked);\n",
      "            info.setTryUnlockTimes(this.tryUnlockTimes.get());\n",
      "            info.setLastLockTimestamp(this.lastLockTimestamp);\n",
      "\n",
      "            info.setDroped(this.dropped);\n",
      "            info.setLastPullTimestamp(this.lastPullTimestamp);\n",
      "            info.setLastConsumeTimestamp(this.lastConsumeTimestamp);\n",
      "        } catch (Exception e) {\n",
      "        } finally {\n",
      "            this.lockTreeMap.readLock().unlock();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public long getLastConsumeTimestamp() {\n",
      "        return lastConsumeTimestamp;\n",
      "    }\n",
      "\n",
      "    public void setLastConsumeTimestamp(long lastConsumeTimestamp) {\n",
      "        this.lastConsumeTimestamp = lastConsumeTimestamp;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.impl.consumer;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "import org.apache.rocketmq.common.message.MessageExt;\n",
      "import org.apache.rocketmq.common.protocol.body.ProcessQueueInfo;\n",
      "import org.junit.Test;\n",
      "import org.junit.runner.RunWith;\n",
      "import org.mockito.junit.MockitoJUnitRunner;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "@RunWith(MockitoJUnitRunner.class)\n",
      "public class ProcessQueueTest {\n",
      "\n",
      "    @Test\n",
      "    public void testCachedMessageCount() {\n",
      "        ProcessQueue pq = new ProcessQueue();\n",
      "\n",
      "        pq.putMessage(createMessageList());\n",
      "\n",
      "        assertThat(pq.getMsgCount().get()).isEqualTo(100);\n",
      "\n",
      "        pq.takeMessages(10);\n",
      "        pq.commit();\n",
      "\n",
      "        assertThat(pq.getMsgCount().get()).isEqualTo(90);\n",
      "\n",
      "        pq.removeMessage(Collections.singletonList(pq.getMsgTreeMap().lastEntry().getValue()));\n",
      "        assertThat(pq.getMsgCount().get()).isEqualTo(89);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCachedMessageSize() {\n",
      "        ProcessQueue pq = new ProcessQueue();\n",
      "\n",
      "        pq.putMessage(createMessageList());\n",
      "\n",
      "        assertThat(pq.getMsgSize().get()).isEqualTo(100 * 123);\n",
      "\n",
      "        pq.takeMessages(10);\n",
      "        pq.commit();\n",
      "\n",
      "        assertThat(pq.getMsgSize().get()).isEqualTo(90 * 123);\n",
      "\n",
      "        pq.removeMessage(Collections.singletonList(pq.getMsgTreeMap().lastEntry().getValue()));\n",
      "        assertThat(pq.getMsgSize().get()).isEqualTo(89 * 123);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFillProcessQueueInfo() {\n",
      "        ProcessQueue pq = new ProcessQueue();\n",
      "        pq.putMessage(createMessageList(102400));\n",
      "\n",
      "        ProcessQueueInfo processQueueInfo = new ProcessQueueInfo();\n",
      "        pq.fillProcessQueueInfo(processQueueInfo);\n",
      "\n",
      "        assertThat(processQueueInfo.getCachedMsgSizeInMiB()).isEqualTo(12);\n",
      "\n",
      "        pq.takeMessages(10000);\n",
      "        pq.commit();\n",
      "        pq.fillProcessQueueInfo(processQueueInfo);\n",
      "        assertThat(processQueueInfo.getCachedMsgSizeInMiB()).isEqualTo(10);\n",
      "\n",
      "        pq.takeMessages(10000);\n",
      "        pq.commit();\n",
      "        pq.fillProcessQueueInfo(processQueueInfo);\n",
      "        assertThat(processQueueInfo.getCachedMsgSizeInMiB()).isEqualTo(9);\n",
      "\n",
      "        pq.takeMessages(80000);\n",
      "        pq.commit();\n",
      "        pq.fillProcessQueueInfo(processQueueInfo);\n",
      "        assertThat(processQueueInfo.getCachedMsgSizeInMiB()).isEqualTo(0);\n",
      "    }\n",
      "\n",
      "    private List<MessageExt> createMessageList() {\n",
      "        return createMessageList(100);\n",
      "    }\n",
      "\n",
      "    private List<MessageExt> createMessageList(int count) {\n",
      "        List<MessageExt> messageExtList = new ArrayList<MessageExt>();\n",
      "        for (int i = 0; i < count; i++) {\n",
      "            MessageExt messageExt = new MessageExt();\n",
      "            messageExt.setQueueOffset(i);\n",
      "            messageExt.setBody(new byte[123]);\n",
      "            messageExtList.add(messageExt);\n",
      "        }\n",
      "        return messageExtList;\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "ProcessQueue::::isLockExpired()": [
        76,
        78
      ],
      "ProcessQueue::::isPullExpired()": [
        81,
        83
      ],
      "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)": [
        89,
        142
      ],
      "ProcessQueue::::getMaxSpan()": [
        200,
        215
      ],
      "ProcessQueue::::getMsgTreeMap()": [
        256,
        258
      ],
      "ProcessQueue::::getMsgCount()": [
        260,
        262
      ],
      "ProcessQueue::::getMsgSize()": [
        264,
        266
      ],
      "ProcessQueue::::isDropped()": [
        268,
        270
      ],
      "ProcessQueue::::setDropped(boolean)": [
        272,
        274
      ],
      "ProcessQueue::::isLocked()": [
        276,
        278
      ],
      "ProcessQueue::::setLocked(boolean)": [
        280,
        282
      ],
      "ProcessQueue::::rollback()": [
        284,
        296
      ],
      "ProcessQueue::::commit()": [
        304,
        329
      ],
      "ProcessQueue::::takeMessages(int)": [
        353,
        385
      ],
      "ProcessQueue::::hasTempMessage()": [
        387,
        399
      ],
      "ProcessQueue::::clear()": [
        401,
        416
      ],
      "ProcessQueue::::getLastLockTimestamp()": [
        418,
        420
      ],
      "ProcessQueue::::setLastLockTimestamp(long)": [
        422,
        424
      ],
      "ProcessQueue::::getLockConsume()": [
        426,
        428
      ],
      "ProcessQueue::::getLastPullTimestamp()": [
        430,
        432
      ],
      "ProcessQueue::::setLastPullTimestamp(long)": [
        434,
        436
      ],
      "ProcessQueue::::getMsgAccCnt()": [
        438,
        440
      ],
      "ProcessQueue::::setMsgAccCnt(long)": [
        442,
        444
      ],
      "ProcessQueue::::getTryUnlockTimes()": [
        446,
        448
      ],
      "ProcessQueue::::incTryUnlockTimes()": [
        450,
        452
      ],
      "ProcessQueue::::getLastConsumeTimestamp()": [
        484,
        486
      ],
      "ProcessQueue::::setLastConsumeTimestamp(long)": [
        488,
        490
      ]
    },
    "test_method_lines_dic": {
      "ProcessQueueTest::::testCachedMessageCount()": [
        33,
        48
      ],
      "ProcessQueueTest::::testCachedMessageSize()": [
        50,
        65
      ],
      "ProcessQueueTest::::testFillProcessQueueInfo()": [
        67,
        91
      ],
      "ProcessQueueTest::::createMessageList()": [
        93,
        95
      ],
      "ProcessQueueTest::::createMessageList(int)": [
        97,
        106
      ]
    },
    "reverse_method_lines_dic": {
      "76": "ProcessQueue::::isLockExpired()",
      "77": "ProcessQueue::::isLockExpired()",
      "78": "ProcessQueue::::isLockExpired()",
      "81": "ProcessQueue::::isPullExpired()",
      "82": "ProcessQueue::::isPullExpired()",
      "83": "ProcessQueue::::isPullExpired()",
      "89": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "90": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "91": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "92": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "93": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "94": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "95": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "96": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "97": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "98": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "99": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "100": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "101": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "102": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "103": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "104": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "105": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "106": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "107": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "108": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "109": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "110": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "111": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "112": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "113": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "114": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "115": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "116": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "117": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "118": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "119": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "120": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "121": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "122": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "123": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "124": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "125": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "126": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "127": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "128": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "129": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "130": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "131": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "132": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "133": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "134": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "135": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "136": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "137": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "138": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "139": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "140": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "141": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "142": "ProcessQueue::::cleanExpiredMsg(org.apache.rocketmq.client.consumer.DefaultMQPushConsumer)",
      "200": "ProcessQueue::::getMaxSpan()",
      "201": "ProcessQueue::::getMaxSpan()",
      "202": "ProcessQueue::::getMaxSpan()",
      "203": "ProcessQueue::::getMaxSpan()",
      "204": "ProcessQueue::::getMaxSpan()",
      "205": "ProcessQueue::::getMaxSpan()",
      "206": "ProcessQueue::::getMaxSpan()",
      "207": "ProcessQueue::::getMaxSpan()",
      "208": "ProcessQueue::::getMaxSpan()",
      "209": "ProcessQueue::::getMaxSpan()",
      "210": "ProcessQueue::::getMaxSpan()",
      "211": "ProcessQueue::::getMaxSpan()",
      "212": "ProcessQueue::::getMaxSpan()",
      "213": "ProcessQueue::::getMaxSpan()",
      "214": "ProcessQueue::::getMaxSpan()",
      "215": "ProcessQueue::::getMaxSpan()",
      "256": "ProcessQueue::::getMsgTreeMap()",
      "257": "ProcessQueue::::getMsgTreeMap()",
      "258": "ProcessQueue::::getMsgTreeMap()",
      "260": "ProcessQueue::::getMsgCount()",
      "261": "ProcessQueue::::getMsgCount()",
      "262": "ProcessQueue::::getMsgCount()",
      "264": "ProcessQueue::::getMsgSize()",
      "265": "ProcessQueue::::getMsgSize()",
      "266": "ProcessQueue::::getMsgSize()",
      "268": "ProcessQueue::::isDropped()",
      "269": "ProcessQueue::::isDropped()",
      "270": "ProcessQueue::::isDropped()",
      "272": "ProcessQueue::::setDropped(boolean)",
      "273": "ProcessQueue::::setDropped(boolean)",
      "274": "ProcessQueue::::setDropped(boolean)",
      "276": "ProcessQueue::::isLocked()",
      "277": "ProcessQueue::::isLocked()",
      "278": "ProcessQueue::::isLocked()",
      "280": "ProcessQueue::::setLocked(boolean)",
      "281": "ProcessQueue::::setLocked(boolean)",
      "282": "ProcessQueue::::setLocked(boolean)",
      "284": "ProcessQueue::::rollback()",
      "285": "ProcessQueue::::rollback()",
      "286": "ProcessQueue::::rollback()",
      "287": "ProcessQueue::::rollback()",
      "288": "ProcessQueue::::rollback()",
      "289": "ProcessQueue::::rollback()",
      "290": "ProcessQueue::::rollback()",
      "291": "ProcessQueue::::rollback()",
      "292": "ProcessQueue::::rollback()",
      "293": "ProcessQueue::::rollback()",
      "294": "ProcessQueue::::rollback()",
      "295": "ProcessQueue::::rollback()",
      "296": "ProcessQueue::::rollback()",
      "304": "ProcessQueue::::commit()",
      "305": "ProcessQueue::::commit()",
      "306": "ProcessQueue::::commit()",
      "307": "ProcessQueue::::commit()",
      "308": "ProcessQueue::::commit()",
      "309": "ProcessQueue::::commit()",
      "310": "ProcessQueue::::commit()",
      "311": "ProcessQueue::::commit()",
      "312": "ProcessQueue::::commit()",
      "313": "ProcessQueue::::commit()",
      "314": "ProcessQueue::::commit()",
      "315": "ProcessQueue::::commit()",
      "316": "ProcessQueue::::commit()",
      "317": "ProcessQueue::::commit()",
      "318": "ProcessQueue::::commit()",
      "319": "ProcessQueue::::commit()",
      "320": "ProcessQueue::::commit()",
      "321": "ProcessQueue::::commit()",
      "322": "ProcessQueue::::commit()",
      "323": "ProcessQueue::::commit()",
      "324": "ProcessQueue::::commit()",
      "325": "ProcessQueue::::commit()",
      "326": "ProcessQueue::::commit()",
      "327": "ProcessQueue::::commit()",
      "328": "ProcessQueue::::commit()",
      "329": "ProcessQueue::::commit()",
      "353": "ProcessQueue::::takeMessages(int)",
      "354": "ProcessQueue::::takeMessages(int)",
      "355": "ProcessQueue::::takeMessages(int)",
      "356": "ProcessQueue::::takeMessages(int)",
      "357": "ProcessQueue::::takeMessages(int)",
      "358": "ProcessQueue::::takeMessages(int)",
      "359": "ProcessQueue::::takeMessages(int)",
      "360": "ProcessQueue::::takeMessages(int)",
      "361": "ProcessQueue::::takeMessages(int)",
      "362": "ProcessQueue::::takeMessages(int)",
      "363": "ProcessQueue::::takeMessages(int)",
      "364": "ProcessQueue::::takeMessages(int)",
      "365": "ProcessQueue::::takeMessages(int)",
      "366": "ProcessQueue::::takeMessages(int)",
      "367": "ProcessQueue::::takeMessages(int)",
      "368": "ProcessQueue::::takeMessages(int)",
      "369": "ProcessQueue::::takeMessages(int)",
      "370": "ProcessQueue::::takeMessages(int)",
      "371": "ProcessQueue::::takeMessages(int)",
      "372": "ProcessQueue::::takeMessages(int)",
      "373": "ProcessQueue::::takeMessages(int)",
      "374": "ProcessQueue::::takeMessages(int)",
      "375": "ProcessQueue::::takeMessages(int)",
      "376": "ProcessQueue::::takeMessages(int)",
      "377": "ProcessQueue::::takeMessages(int)",
      "378": "ProcessQueue::::takeMessages(int)",
      "379": "ProcessQueue::::takeMessages(int)",
      "380": "ProcessQueue::::takeMessages(int)",
      "381": "ProcessQueue::::takeMessages(int)",
      "382": "ProcessQueue::::takeMessages(int)",
      "383": "ProcessQueue::::takeMessages(int)",
      "384": "ProcessQueue::::takeMessages(int)",
      "385": "ProcessQueue::::takeMessages(int)",
      "387": "ProcessQueue::::hasTempMessage()",
      "388": "ProcessQueue::::hasTempMessage()",
      "389": "ProcessQueue::::hasTempMessage()",
      "390": "ProcessQueue::::hasTempMessage()",
      "391": "ProcessQueue::::hasTempMessage()",
      "392": "ProcessQueue::::hasTempMessage()",
      "393": "ProcessQueue::::hasTempMessage()",
      "394": "ProcessQueue::::hasTempMessage()",
      "395": "ProcessQueue::::hasTempMessage()",
      "396": "ProcessQueue::::hasTempMessage()",
      "397": "ProcessQueue::::hasTempMessage()",
      "398": "ProcessQueue::::hasTempMessage()",
      "399": "ProcessQueue::::hasTempMessage()",
      "401": "ProcessQueue::::clear()",
      "402": "ProcessQueue::::clear()",
      "403": "ProcessQueue::::clear()",
      "404": "ProcessQueue::::clear()",
      "405": "ProcessQueue::::clear()",
      "406": "ProcessQueue::::clear()",
      "407": "ProcessQueue::::clear()",
      "408": "ProcessQueue::::clear()",
      "409": "ProcessQueue::::clear()",
      "410": "ProcessQueue::::clear()",
      "411": "ProcessQueue::::clear()",
      "412": "ProcessQueue::::clear()",
      "413": "ProcessQueue::::clear()",
      "414": "ProcessQueue::::clear()",
      "415": "ProcessQueue::::clear()",
      "416": "ProcessQueue::::clear()",
      "418": "ProcessQueue::::getLastLockTimestamp()",
      "419": "ProcessQueue::::getLastLockTimestamp()",
      "420": "ProcessQueue::::getLastLockTimestamp()",
      "422": "ProcessQueue::::setLastLockTimestamp(long)",
      "423": "ProcessQueue::::setLastLockTimestamp(long)",
      "424": "ProcessQueue::::setLastLockTimestamp(long)",
      "426": "ProcessQueue::::getLockConsume()",
      "427": "ProcessQueue::::getLockConsume()",
      "428": "ProcessQueue::::getLockConsume()",
      "430": "ProcessQueue::::getLastPullTimestamp()",
      "431": "ProcessQueue::::getLastPullTimestamp()",
      "432": "ProcessQueue::::getLastPullTimestamp()",
      "434": "ProcessQueue::::setLastPullTimestamp(long)",
      "435": "ProcessQueue::::setLastPullTimestamp(long)",
      "436": "ProcessQueue::::setLastPullTimestamp(long)",
      "438": "ProcessQueue::::getMsgAccCnt()",
      "439": "ProcessQueue::::getMsgAccCnt()",
      "440": "ProcessQueue::::getMsgAccCnt()",
      "442": "ProcessQueue::::setMsgAccCnt(long)",
      "443": "ProcessQueue::::setMsgAccCnt(long)",
      "444": "ProcessQueue::::setMsgAccCnt(long)",
      "446": "ProcessQueue::::getTryUnlockTimes()",
      "447": "ProcessQueue::::getTryUnlockTimes()",
      "448": "ProcessQueue::::getTryUnlockTimes()",
      "450": "ProcessQueue::::incTryUnlockTimes()",
      "451": "ProcessQueue::::incTryUnlockTimes()",
      "452": "ProcessQueue::::incTryUnlockTimes()",
      "484": "ProcessQueue::::getLastConsumeTimestamp()",
      "485": "ProcessQueue::::getLastConsumeTimestamp()",
      "486": "ProcessQueue::::getLastConsumeTimestamp()",
      "488": "ProcessQueue::::setLastConsumeTimestamp(long)",
      "489": "ProcessQueue::::setLastConsumeTimestamp(long)",
      "490": "ProcessQueue::::setLastConsumeTimestamp(long)"
    },
    "test_reverse_method_lines_dic": {
      "33": "ProcessQueueTest::::testCachedMessageCount()",
      "34": "ProcessQueueTest::::testCachedMessageCount()",
      "35": "ProcessQueueTest::::testCachedMessageCount()",
      "36": "ProcessQueueTest::::testCachedMessageCount()",
      "37": "ProcessQueueTest::::testCachedMessageCount()",
      "38": "ProcessQueueTest::::testCachedMessageCount()",
      "39": "ProcessQueueTest::::testCachedMessageCount()",
      "40": "ProcessQueueTest::::testCachedMessageCount()",
      "41": "ProcessQueueTest::::testCachedMessageCount()",
      "42": "ProcessQueueTest::::testCachedMessageCount()",
      "43": "ProcessQueueTest::::testCachedMessageCount()",
      "44": "ProcessQueueTest::::testCachedMessageCount()",
      "45": "ProcessQueueTest::::testCachedMessageCount()",
      "46": "ProcessQueueTest::::testCachedMessageCount()",
      "47": "ProcessQueueTest::::testCachedMessageCount()",
      "48": "ProcessQueueTest::::testCachedMessageCount()",
      "50": "ProcessQueueTest::::testCachedMessageSize()",
      "51": "ProcessQueueTest::::testCachedMessageSize()",
      "52": "ProcessQueueTest::::testCachedMessageSize()",
      "53": "ProcessQueueTest::::testCachedMessageSize()",
      "54": "ProcessQueueTest::::testCachedMessageSize()",
      "55": "ProcessQueueTest::::testCachedMessageSize()",
      "56": "ProcessQueueTest::::testCachedMessageSize()",
      "57": "ProcessQueueTest::::testCachedMessageSize()",
      "58": "ProcessQueueTest::::testCachedMessageSize()",
      "59": "ProcessQueueTest::::testCachedMessageSize()",
      "60": "ProcessQueueTest::::testCachedMessageSize()",
      "61": "ProcessQueueTest::::testCachedMessageSize()",
      "62": "ProcessQueueTest::::testCachedMessageSize()",
      "63": "ProcessQueueTest::::testCachedMessageSize()",
      "64": "ProcessQueueTest::::testCachedMessageSize()",
      "65": "ProcessQueueTest::::testCachedMessageSize()",
      "67": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "68": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "69": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "70": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "71": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "72": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "73": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "74": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "75": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "76": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "77": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "78": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "79": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "80": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "81": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "82": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "83": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "84": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "85": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "86": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "87": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "88": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "89": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "90": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "91": "ProcessQueueTest::::testFillProcessQueueInfo()",
      "93": "ProcessQueueTest::::createMessageList()",
      "94": "ProcessQueueTest::::createMessageList()",
      "95": "ProcessQueueTest::::createMessageList()",
      "97": "ProcessQueueTest::::createMessageList(int)",
      "98": "ProcessQueueTest::::createMessageList(int)",
      "99": "ProcessQueueTest::::createMessageList(int)",
      "100": "ProcessQueueTest::::createMessageList(int)",
      "101": "ProcessQueueTest::::createMessageList(int)",
      "102": "ProcessQueueTest::::createMessageList(int)",
      "103": "ProcessQueueTest::::createMessageList(int)",
      "104": "ProcessQueueTest::::createMessageList(int)",
      "105": "ProcessQueueTest::::createMessageList(int)",
      "106": "ProcessQueueTest::::createMessageList(int)"
    },
    "tests": [
      {
        "test_lines": [
          33,
          48
        ],
        "covered_lines": [
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          50,
          52,
          53,
          55,
          57,
          59,
          61,
          63,
          65,
          66,
          67,
          69,
          71,
          73,
          146,
          148,
          150,
          151,
          153,
          154,
          155,
          157,
          158,
          160,
          162,
          167,
          169,
          170,
          173,
          174,
          176,
          177,
          186,
          187,
          190,
          192,
          219,
          220,
          222,
          223,
          225,
          226,
          227,
          229,
          230,
          231,
          234,
          235,
          237,
          239,
          242,
          243,
          247,
          248,
          251,
          253,
          257,
          261,
          306,
          309,
          311,
          312,
          313,
          314,
          316,
          317,
          319,
          322,
          354,
          355,
          357,
          358,
          360,
          362,
          363,
          364,
          366,
          367,
          374,
          378,
          379,
          382,
          384
        ]
      },
      {
        "test_lines": [
          50,
          65
        ],
        "covered_lines": [
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          50,
          52,
          53,
          55,
          57,
          59,
          61,
          63,
          65,
          66,
          67,
          69,
          71,
          73,
          146,
          148,
          150,
          151,
          153,
          154,
          155,
          157,
          158,
          160,
          162,
          167,
          169,
          170,
          173,
          174,
          176,
          177,
          186,
          187,
          190,
          192,
          219,
          220,
          222,
          223,
          225,
          226,
          227,
          229,
          230,
          231,
          234,
          235,
          237,
          239,
          242,
          243,
          247,
          248,
          251,
          253,
          257,
          265,
          306,
          309,
          311,
          312,
          313,
          314,
          316,
          317,
          319,
          322,
          354,
          355,
          357,
          358,
          360,
          362,
          363,
          364,
          366,
          367,
          374,
          378,
          379,
          382,
          384
        ]
      },
      {
        "test_lines": [
          67,
          91
        ],
        "covered_lines": [
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          50,
          52,
          53,
          55,
          57,
          59,
          61,
          63,
          65,
          66,
          67,
          69,
          71,
          73,
          146,
          148,
          150,
          151,
          153,
          154,
          155,
          157,
          158,
          160,
          162,
          167,
          169,
          170,
          173,
          174,
          176,
          177,
          186,
          187,
          190,
          192,
          306,
          309,
          311,
          312,
          313,
          314,
          316,
          317,
          319,
          322,
          354,
          355,
          357,
          358,
          360,
          362,
          363,
          364,
          366,
          367,
          374,
          378,
          379,
          382,
          384,
          456,
          458,
          459,
          460,
          461,
          462,
          465,
          471,
          472,
          473,
          475,
          476,
          477,
          480,
          481,
          482
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.impl.factory;\n",
      "\n",
      "import java.io.UnsupportedEncodingException;\n",
      "import java.util.Collections;\n",
      "import java.util.HashMap;\n",
      "import java.util.HashSet;\n",
      "import java.util.Iterator;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Map.Entry;\n",
      "import java.util.Random;\n",
      "import java.util.Set;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import java.util.concurrent.ConcurrentMap;\n",
      "import java.util.concurrent.Executors;\n",
      "import java.util.concurrent.ScheduledExecutorService;\n",
      "import java.util.concurrent.ThreadFactory;\n",
      "import java.util.concurrent.TimeUnit;\n",
      "import java.util.concurrent.atomic.AtomicLong;\n",
      "import java.util.concurrent.locks.Lock;\n",
      "import java.util.concurrent.locks.ReentrantLock;\n",
      "\n",
      "import org.apache.commons.lang3.StringUtils;\n",
      "import org.apache.rocketmq.client.ClientConfig;\n",
      "import org.apache.rocketmq.client.admin.MQAdminExtInner;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.exception.MQClientException;\n",
      "import org.apache.rocketmq.client.impl.ClientRemotingProcessor;\n",
      "import org.apache.rocketmq.client.impl.FindBrokerResult;\n",
      "import org.apache.rocketmq.client.impl.MQAdminImpl;\n",
      "import org.apache.rocketmq.client.impl.MQClientAPIImpl;\n",
      "import org.apache.rocketmq.client.impl.MQClientManager;\n",
      "import org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl;\n",
      "import org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl;\n",
      "import org.apache.rocketmq.client.impl.consumer.MQConsumerInner;\n",
      "import org.apache.rocketmq.client.impl.consumer.ProcessQueue;\n",
      "import org.apache.rocketmq.client.impl.consumer.PullMessageService;\n",
      "import org.apache.rocketmq.client.impl.consumer.RebalanceService;\n",
      "import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;\n",
      "import org.apache.rocketmq.client.impl.producer.MQProducerInner;\n",
      "import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;\n",
      "import org.apache.rocketmq.client.log.ClientLogger;\n",
      "import org.apache.rocketmq.client.producer.DefaultMQProducer;\n",
      "import org.apache.rocketmq.client.stat.ConsumerStatsManager;\n",
      "import org.apache.rocketmq.common.MQVersion;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.ServiceState;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.constant.PermName;\n",
      "import org.apache.rocketmq.common.filter.ExpressionType;\n",
      "import org.apache.rocketmq.common.protocol.NamespaceUtil;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.common.message.MessageExt;\n",
      "import org.apache.rocketmq.common.message.MessageQueue;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumeMessageDirectlyResult;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.ConsumerData;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.ProducerData;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n",
      "import org.apache.rocketmq.common.protocol.route.BrokerData;\n",
      "import org.apache.rocketmq.common.protocol.route.QueueData;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.common.RemotingHelper;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.apache.rocketmq.remoting.netty.NettyClientConfig;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n",
      "\n",
      "public class MQClientInstance {\n",
      "    private final static long LOCK_TIMEOUT_MILLIS = 3000;\n",
      "    private final InternalLogger log = ClientLogger.getLog();\n",
      "    private final ClientConfig clientConfig;\n",
      "    private final int instanceIndex;\n",
      "    private final String clientId;\n",
      "    private final long bootTimestamp = System.currentTimeMillis();\n",
      "    private final ConcurrentMap<String/* group */, MQProducerInner> producerTable = new ConcurrentHashMap<String, MQProducerInner>();\n",
      "    private final ConcurrentMap<String/* group */, MQConsumerInner> consumerTable = new ConcurrentHashMap<String, MQConsumerInner>();\n",
      "    private final ConcurrentMap<String/* group */, MQAdminExtInner> adminExtTable = new ConcurrentHashMap<String, MQAdminExtInner>();\n",
      "    private final NettyClientConfig nettyClientConfig;\n",
      "    private final MQClientAPIImpl mQClientAPIImpl;\n",
      "    private final MQAdminImpl mQAdminImpl;\n",
      "    private final ConcurrentMap<String/* Topic */, TopicRouteData> topicRouteTable = new ConcurrentHashMap<String, TopicRouteData>();\n",
      "    private final Lock lockNamesrv = new ReentrantLock();\n",
      "    private final Lock lockHeartbeat = new ReentrantLock();\n",
      "    private final ConcurrentMap<String/* Broker Name */, HashMap<Long/* brokerId */, String/* address */>> brokerAddrTable =\n",
      "        new ConcurrentHashMap<String, HashMap<Long, String>>();\n",
      "    private final ConcurrentMap<String/* Broker Name */, HashMap<String/* address */, Integer>> brokerVersionTable =\n",
      "        new ConcurrentHashMap<String, HashMap<String, Integer>>();\n",
      "    private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n",
      "        @Override\n",
      "        public Thread newThread(Runnable r) {\n",
      "            return new Thread(r, \"MQClientFactoryScheduledThread\");\n",
      "        }\n",
      "    });\n",
      "    private final ClientRemotingProcessor clientRemotingProcessor;\n",
      "    private final PullMessageService pullMessageService;\n",
      "    private final RebalanceService rebalanceService;\n",
      "    private final DefaultMQProducer defaultMQProducer;\n",
      "    private final ConsumerStatsManager consumerStatsManager;\n",
      "    private final AtomicLong sendHeartbeatTimesTotal = new AtomicLong(0);\n",
      "    private ServiceState serviceState = ServiceState.CREATE_JUST;\n",
      "    private Random random = new Random();\n",
      "\n",
      "    public MQClientInstance(ClientConfig clientConfig, int instanceIndex, String clientId) {\n",
      "        this(clientConfig, instanceIndex, clientId, null);\n",
      "    }\n",
      "\n",
      "    public MQClientInstance(ClientConfig clientConfig, int instanceIndex, String clientId, RPCHook rpcHook) {\n",
      "        this.clientConfig = clientConfig;\n",
      "        this.instanceIndex = instanceIndex;\n",
      "        this.nettyClientConfig = new NettyClientConfig();\n",
      "        this.nettyClientConfig.setClientCallbackExecutorThreads(clientConfig.getClientCallbackExecutorThreads());\n",
      "        this.nettyClientConfig.setUseTLS(clientConfig.isUseTLS());\n",
      "        this.clientRemotingProcessor = new ClientRemotingProcessor(this);\n",
      "        this.mQClientAPIImpl = new MQClientAPIImpl(this.nettyClientConfig, this.clientRemotingProcessor, rpcHook, clientConfig);\n",
      "\n",
      "        if (this.clientConfig.getNamesrvAddr() != null) {\n",
      "            this.mQClientAPIImpl.updateNameServerAddressList(this.clientConfig.getNamesrvAddr());\n",
      "            log.info(\"user specified name server address: {}\", this.clientConfig.getNamesrvAddr());\n",
      "        }\n",
      "\n",
      "        this.clientId = clientId;\n",
      "\n",
      "        this.mQAdminImpl = new MQAdminImpl(this);\n",
      "\n",
      "        this.pullMessageService = new PullMessageService(this);\n",
      "\n",
      "        this.rebalanceService = new RebalanceService(this);\n",
      "\n",
      "        this.defaultMQProducer = new DefaultMQProducer(MixAll.CLIENT_INNER_PRODUCER_GROUP);\n",
      "        this.defaultMQProducer.resetClientConfig(clientConfig);\n",
      "\n",
      "        this.consumerStatsManager = new ConsumerStatsManager(this.scheduledExecutorService);\n",
      "\n",
      "        log.info(\"Created a new client Instance, InstanceIndex:{}, ClientID:{}, ClientConfig:{}, ClientVersion:{}, SerializerType:{}\",\n",
      "            this.instanceIndex,\n",
      "            this.clientId,\n",
      "            this.clientConfig,\n",
      "            MQVersion.getVersionDesc(MQVersion.CURRENT_VERSION), RemotingCommand.getSerializeTypeConfigInThisServer());\n",
      "    }\n",
      "\n",
      "    public static TopicPublishInfo topicRouteData2TopicPublishInfo(final String topic, final TopicRouteData route) {\n",
      "        TopicPublishInfo info = new TopicPublishInfo();\n",
      "        info.setTopicRouteData(route);\n",
      "        if (route.getOrderTopicConf() != null && route.getOrderTopicConf().length() > 0) {\n",
      "            String[] brokers = route.getOrderTopicConf().split(\";\");\n",
      "            for (String broker : brokers) {\n",
      "                String[] item = broker.split(\":\");\n",
      "                int nums = Integer.parseInt(item[1]);\n",
      "                for (int i = 0; i < nums; i++) {\n",
      "                    MessageQueue mq = new MessageQueue(topic, item[0], i);\n",
      "                    info.getMessageQueueList().add(mq);\n",
      "                }\n",
      "            }\n",
      "\n",
      "            info.setOrderTopic(true);\n",
      "        } else {\n",
      "            List<QueueData> qds = route.getQueueDatas();\n",
      "            Collections.sort(qds);\n",
      "            for (QueueData qd : qds) {\n",
      "                if (PermName.isWriteable(qd.getPerm())) {\n",
      "                    BrokerData brokerData = null;\n",
      "                    for (BrokerData bd : route.getBrokerDatas()) {\n",
      "                        if (bd.getBrokerName().equals(qd.getBrokerName())) {\n",
      "                            brokerData = bd;\n",
      "                            break;\n",
      "                        }\n",
      "                    }\n",
      "\n",
      "                    if (null == brokerData) {\n",
      "                        continue;\n",
      "                    }\n",
      "\n",
      "                    if (!brokerData.getBrokerAddrs().containsKey(MixAll.MASTER_ID)) {\n",
      "                        continue;\n",
      "                    }\n",
      "\n",
      "                    for (int i = 0; i < qd.getWriteQueueNums(); i++) {\n",
      "                        MessageQueue mq = new MessageQueue(topic, qd.getBrokerName(), i);\n",
      "                        info.getMessageQueueList().add(mq);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "\n",
      "            info.setOrderTopic(false);\n",
      "        }\n",
      "\n",
      "        return info;\n",
      "    }\n",
      "\n",
      "    public static Set<MessageQueue> topicRouteData2TopicSubscribeInfo(final String topic, final TopicRouteData route) {\n",
      "        Set<MessageQueue> mqList = new HashSet<MessageQueue>();\n",
      "        List<QueueData> qds = route.getQueueDatas();\n",
      "        for (QueueData qd : qds) {\n",
      "            if (PermName.isReadable(qd.getPerm())) {\n",
      "                for (int i = 0; i < qd.getReadQueueNums(); i++) {\n",
      "                    MessageQueue mq = new MessageQueue(topic, qd.getBrokerName(), i);\n",
      "                    mqList.add(mq);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return mqList;\n",
      "    }\n",
      "\n",
      "    public void start() throws MQClientException {\n",
      "\n",
      "        synchronized (this) {\n",
      "            switch (this.serviceState) {\n",
      "                case CREATE_JUST:\n",
      "                    this.serviceState = ServiceState.START_FAILED;\n",
      "                    // If not specified,looking address from name server\n",
      "                    if (null == this.clientConfig.getNamesrvAddr()) {\n",
      "                        this.mQClientAPIImpl.fetchNameServerAddr();\n",
      "                    }\n",
      "                    // Start request-response channel\n",
      "                    this.mQClientAPIImpl.start();\n",
      "                    // Start various schedule tasks\n",
      "                    this.startScheduledTask();\n",
      "                    // Start pull service\n",
      "                    this.pullMessageService.start();\n",
      "                    // Start rebalance service\n",
      "                    this.rebalanceService.start();\n",
      "                    // Start push service\n",
      "                    this.defaultMQProducer.getDefaultMQProducerImpl().start(false);\n",
      "                    log.info(\"the client factory [{}] start OK\", this.clientId);\n",
      "                    this.serviceState = ServiceState.RUNNING;\n",
      "                    break;\n",
      "                case START_FAILED:\n",
      "                    throw new MQClientException(\"The Factory object[\" + this.getClientId() + \"] has been created before, and failed.\", null);\n",
      "                default:\n",
      "                    break;\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void startScheduledTask() {\n",
      "        //\u83b7\u53d6nameserver\u4fe1\u606f\n",
      "        if (null == this.clientConfig.getNamesrvAddr()) {\n",
      "            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n",
      "\n",
      "                @Override\n",
      "                public void run() {\n",
      "                    try {\n",
      "                        MQClientInstance.this.mQClientAPIImpl.fetchNameServerAddr();\n",
      "                    } catch (Exception e) {\n",
      "                        log.error(\"ScheduledTask fetchNameServerAddr exception\", e);\n",
      "                    }\n",
      "                }\n",
      "            }, 1000 * 10, 1000 * 60 * 2, TimeUnit.MILLISECONDS);\n",
      "        }\n",
      "        //\u4eceNameserver\u66f4\u65b0topic\u4fe1\u606f\n",
      "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n",
      "\n",
      "            @Override\n",
      "            public void run() {\n",
      "                try {\n",
      "                    MQClientInstance.this.updateTopicRouteInfoFromNameServer();\n",
      "                } catch (Exception e) {\n",
      "                    log.error(\"ScheduledTask updateTopicRouteInfoFromNameServer exception\", e);\n",
      "                }\n",
      "            }\n",
      "        }, 10, this.clientConfig.getPollNameServerInterval(), TimeUnit.MILLISECONDS);\n",
      "\n",
      "        //\u5411broker\u53d1\u9001\u5fc3\u8df3\uff0c\u5e76\u6e05\u9664client\u4e2d\u8d85\u65f6broker\n",
      "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n",
      "\n",
      "            @Override\n",
      "            public void run() {\n",
      "                try {\n",
      "                    MQClientInstance.this.cleanOfflineBroker();\n",
      "                    MQClientInstance.this.sendHeartbeatToAllBrokerWithLock();\n",
      "                } catch (Exception e) {\n",
      "                    log.error(\"ScheduledTask sendHeartbeatToAllBroker exception\", e);\n",
      "                }\n",
      "            }\n",
      "        }, 1000, this.clientConfig.getHeartbeatBrokerInterval(), TimeUnit.MILLISECONDS);\n",
      "\n",
      "        //consumer\u901a\u77e5broker\u66f4\u65b0\u6d88\u8d39\u8fdb\u5ea6\n",
      "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n",
      "\n",
      "            @Override\n",
      "            public void run() {\n",
      "                try {\n",
      "                    MQClientInstance.this.persistAllConsumerOffset();\n",
      "                } catch (Exception e) {\n",
      "                    log.error(\"ScheduledTask persistAllConsumerOffset exception\", e);\n",
      "                }\n",
      "            }\n",
      "        }, 1000 * 10, this.clientConfig.getPersistConsumerOffsetInterval(), TimeUnit.MILLISECONDS);\n",
      "\n",
      "        //\u52a8\u6001\u66f4\u65b0\u672c\u5730\u7ebf\u7a0b\u6c60\u5927\u5c0f\n",
      "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n",
      "\n",
      "            @Override\n",
      "            public void run() {\n",
      "                try {\n",
      "                    MQClientInstance.this.adjustThreadPool();\n",
      "                } catch (Exception e) {\n",
      "                    log.error(\"ScheduledTask adjustThreadPool exception\", e);\n",
      "                }\n",
      "            }\n",
      "        }, 1, 1, TimeUnit.MINUTES);\n",
      "    }\n",
      "\n",
      "    public String getClientId() {\n",
      "        return clientId;\n",
      "    }\n",
      "\n",
      "    public void updateTopicRouteInfoFromNameServer() {\n",
      "        Set<String> topicList = new HashSet<String>();\n",
      "\n",
      "        // Consumer\n",
      "        {\n",
      "            Iterator<Entry<String, MQConsumerInner>> it = this.consumerTable.entrySet().iterator();\n",
      "            while (it.hasNext()) {\n",
      "                Entry<String, MQConsumerInner> entry = it.next();\n",
      "                MQConsumerInner impl = entry.getValue();\n",
      "                if (impl != null) {\n",
      "                    Set<SubscriptionData> subList = impl.subscriptions();\n",
      "                    if (subList != null) {\n",
      "                        for (SubscriptionData subData : subList) {\n",
      "                            topicList.add(subData.getTopic());\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // Producer\n",
      "        {\n",
      "            Iterator<Entry<String, MQProducerInner>> it = this.producerTable.entrySet().iterator();\n",
      "            while (it.hasNext()) {\n",
      "                Entry<String, MQProducerInner> entry = it.next();\n",
      "                MQProducerInner impl = entry.getValue();\n",
      "                if (impl != null) {\n",
      "                    Set<String> lst = impl.getPublishTopicList();\n",
      "                    topicList.addAll(lst);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        for (String topic : topicList) {\n",
      "            this.updateTopicRouteInfoFromNameServer(topic);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @param offsetTable\n",
      "     * @param namespace\n",
      "     * @return newOffsetTable\n",
      "     */\n",
      "    public Map<MessageQueue, Long> parseOffsetTableFromBroker(Map<MessageQueue, Long> offsetTable, String namespace) {\n",
      "        HashMap<MessageQueue, Long> newOffsetTable = new HashMap<MessageQueue, Long>();\n",
      "        if (StringUtils.isNotEmpty(namespace)) {\n",
      "            for (Entry<MessageQueue, Long> entry : offsetTable.entrySet()) {\n",
      "                MessageQueue queue = entry.getKey();\n",
      "                queue.setTopic(NamespaceUtil.withoutNamespace(queue.getTopic(), namespace));\n",
      "                newOffsetTable.put(queue, entry.getValue());\n",
      "            }\n",
      "        } else {\n",
      "            newOffsetTable.putAll(offsetTable);\n",
      "        }\n",
      "\n",
      "        return newOffsetTable;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Remove offline broker\n",
      "     */\n",
      "    private void cleanOfflineBroker() {\n",
      "        try {\n",
      "            if (this.lockNamesrv.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS))\n",
      "                try {\n",
      "                    ConcurrentHashMap<String, HashMap<Long, String>> updatedTable = new ConcurrentHashMap<String, HashMap<Long, String>>();\n",
      "\n",
      "                    Iterator<Entry<String, HashMap<Long, String>>> itBrokerTable = this.brokerAddrTable.entrySet().iterator();\n",
      "                    while (itBrokerTable.hasNext()) {\n",
      "                        Entry<String, HashMap<Long, String>> entry = itBrokerTable.next();\n",
      "                        String brokerName = entry.getKey();\n",
      "                        HashMap<Long, String> oneTable = entry.getValue();\n",
      "\n",
      "                        HashMap<Long, String> cloneAddrTable = new HashMap<Long, String>();\n",
      "                        cloneAddrTable.putAll(oneTable);\n",
      "\n",
      "                        Iterator<Entry<Long, String>> it = cloneAddrTable.entrySet().iterator();\n",
      "                        while (it.hasNext()) {\n",
      "                            Entry<Long, String> ee = it.next();\n",
      "                            String addr = ee.getValue();\n",
      "                            if (!this.isBrokerAddrExistInTopicRouteTable(addr)) {\n",
      "                                it.remove();\n",
      "                                log.info(\"the broker addr[{} {}] is offline, remove it\", brokerName, addr);\n",
      "                            }\n",
      "                        }\n",
      "\n",
      "                        if (cloneAddrTable.isEmpty()) {\n",
      "                            itBrokerTable.remove();\n",
      "                            log.info(\"the broker[{}] name's host is offline, remove it\", brokerName);\n",
      "                        } else {\n",
      "                            updatedTable.put(brokerName, cloneAddrTable);\n",
      "                        }\n",
      "                    }\n",
      "\n",
      "                    if (!updatedTable.isEmpty()) {\n",
      "                        this.brokerAddrTable.putAll(updatedTable);\n",
      "                    }\n",
      "                } finally {\n",
      "                    this.lockNamesrv.unlock();\n",
      "                }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.warn(\"cleanOfflineBroker Exception\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void checkClientInBroker() throws MQClientException {\n",
      "        Iterator<Entry<String, MQConsumerInner>> it = this.consumerTable.entrySet().iterator();\n",
      "\n",
      "        while (it.hasNext()) {\n",
      "            Entry<String, MQConsumerInner> entry = it.next();\n",
      "            Set<SubscriptionData> subscriptionInner = entry.getValue().subscriptions();\n",
      "            if (subscriptionInner == null || subscriptionInner.isEmpty()) {\n",
      "                return;\n",
      "            }\n",
      "\n",
      "            for (SubscriptionData subscriptionData : subscriptionInner) {\n",
      "                if (ExpressionType.isTagType(subscriptionData.getExpressionType())) {\n",
      "                    continue;\n",
      "                }\n",
      "                // may need to check one broker every cluster...\n",
      "                // assume that the configs of every broker in cluster are the the same.\n",
      "                String addr = findBrokerAddrByTopic(subscriptionData.getTopic());\n",
      "\n",
      "                if (addr != null) {\n",
      "                    try {\n",
      "                        this.getMQClientAPIImpl().checkClientInBroker(\n",
      "                            addr, entry.getKey(), this.clientId, subscriptionData, 3 * 1000\n",
      "                        );\n",
      "                    } catch (Exception e) {\n",
      "                        if (e instanceof MQClientException) {\n",
      "                            throw (MQClientException) e;\n",
      "                        } else {\n",
      "                            throw new MQClientException(\"Check client in broker error, maybe because you use \"\n",
      "                                + subscriptionData.getExpressionType() + \" to filter message, but server has not been upgraded to support!\"\n",
      "                                + \"This error would not affect the launch of consumer, but may has impact on message receiving if you \" +\n",
      "                                \"have use the new features which are not supported by server, please check the log!\", e);\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void sendHeartbeatToAllBrokerWithLock() {\n",
      "        if (this.lockHeartbeat.tryLock()) {\n",
      "            try {\n",
      "                this.sendHeartbeatToAllBroker();\n",
      "                this.uploadFilterClassSource();\n",
      "            } catch (final Exception e) {\n",
      "                log.error(\"sendHeartbeatToAllBroker exception\", e);\n",
      "            } finally {\n",
      "                this.lockHeartbeat.unlock();\n",
      "            }\n",
      "        } else {\n",
      "            log.warn(\"lock heartBeat, but failed. [{}]\", this.clientId);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void persistAllConsumerOffset() {\n",
      "        Iterator<Entry<String, MQConsumerInner>> it = this.consumerTable.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Entry<String, MQConsumerInner> entry = it.next();\n",
      "            MQConsumerInner impl = entry.getValue();\n",
      "            impl.persistConsumerOffset();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void adjustThreadPool() {\n",
      "        Iterator<Entry<String, MQConsumerInner>> it = this.consumerTable.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Entry<String, MQConsumerInner> entry = it.next();\n",
      "            MQConsumerInner impl = entry.getValue();\n",
      "            if (impl != null) {\n",
      "                try {\n",
      "                    if (impl instanceof DefaultMQPushConsumerImpl) {\n",
      "                        DefaultMQPushConsumerImpl dmq = (DefaultMQPushConsumerImpl) impl;\n",
      "                        dmq.adjustThreadPool();\n",
      "                    }\n",
      "                } catch (Exception e) {\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public boolean updateTopicRouteInfoFromNameServer(final String topic) {\n",
      "        return updateTopicRouteInfoFromNameServer(topic, false, null);\n",
      "    }\n",
      "\n",
      "    private boolean isBrokerAddrExistInTopicRouteTable(final String addr) {\n",
      "        Iterator<Entry<String, TopicRouteData>> it = this.topicRouteTable.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Entry<String, TopicRouteData> entry = it.next();\n",
      "            TopicRouteData topicRouteData = entry.getValue();\n",
      "            List<BrokerData> bds = topicRouteData.getBrokerDatas();\n",
      "            for (BrokerData bd : bds) {\n",
      "                if (bd.getBrokerAddrs() != null) {\n",
      "                    boolean exist = bd.getBrokerAddrs().containsValue(addr);\n",
      "                    if (exist)\n",
      "                        return true;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    private void sendHeartbeatToAllBroker() {\n",
      "        final HeartbeatData heartbeatData = this.prepareHeartbeatData();\n",
      "        final boolean producerEmpty = heartbeatData.getProducerDataSet().isEmpty();\n",
      "        final boolean consumerEmpty = heartbeatData.getConsumerDataSet().isEmpty();\n",
      "        if (producerEmpty && consumerEmpty) {\n",
      "            log.warn(\"sending heartbeat, but no consumer and no producer. [{}]\", this.clientId);\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        if (!this.brokerAddrTable.isEmpty()) {\n",
      "            long times = this.sendHeartbeatTimesTotal.getAndIncrement();\n",
      "            Iterator<Entry<String, HashMap<Long, String>>> it = this.brokerAddrTable.entrySet().iterator();\n",
      "            while (it.hasNext()) {\n",
      "                Entry<String, HashMap<Long, String>> entry = it.next();\n",
      "                String brokerName = entry.getKey();\n",
      "                HashMap<Long, String> oneTable = entry.getValue();\n",
      "                if (oneTable != null) {\n",
      "                    for (Map.Entry<Long, String> entry1 : oneTable.entrySet()) {\n",
      "                        Long id = entry1.getKey();\n",
      "                        String addr = entry1.getValue();\n",
      "                        if (addr != null) {\n",
      "                            if (consumerEmpty) {\n",
      "                                if (id != MixAll.MASTER_ID)\n",
      "                                    continue;\n",
      "                            }\n",
      "\n",
      "                            try {\n",
      "                                int version = this.mQClientAPIImpl.sendHearbeat(addr, heartbeatData, 3000);\n",
      "                                if (!this.brokerVersionTable.containsKey(brokerName)) {\n",
      "                                    this.brokerVersionTable.put(brokerName, new HashMap<String, Integer>(4));\n",
      "                                }\n",
      "                                this.brokerVersionTable.get(brokerName).put(addr, version);\n",
      "                                if (times % 20 == 0) {\n",
      "                                    log.info(\"send heart beat to broker[{} {} {}] success\", brokerName, id, addr);\n",
      "                                    log.info(heartbeatData.toString());\n",
      "                                }\n",
      "                            } catch (Exception e) {\n",
      "                                if (this.isBrokerInNameServer(addr)) {\n",
      "                                    log.info(\"send heart beat to broker[{} {} {}] failed\", brokerName, id, addr, e);\n",
      "                                } else {\n",
      "                                    log.info(\"send heart beat to broker[{} {} {}] exception, because the broker not up, forget it\", brokerName,\n",
      "                                        id, addr, e);\n",
      "                                }\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void uploadFilterClassSource() {\n",
      "        Iterator<Entry<String, MQConsumerInner>> it = this.consumerTable.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Entry<String, MQConsumerInner> next = it.next();\n",
      "            MQConsumerInner consumer = next.getValue();\n",
      "            if (ConsumeType.CONSUME_PASSIVELY == consumer.consumeType()) {\n",
      "                Set<SubscriptionData> subscriptions = consumer.subscriptions();\n",
      "                for (SubscriptionData sub : subscriptions) {\n",
      "                    if (sub.isClassFilterMode() && sub.getFilterClassSource() != null) {\n",
      "                        final String consumerGroup = consumer.groupName();\n",
      "                        final String className = sub.getSubString();\n",
      "                        final String topic = sub.getTopic();\n",
      "                        final String filterClassSource = sub.getFilterClassSource();\n",
      "                        try {\n",
      "                            this.uploadFilterClassToAllFilterServer(consumerGroup, className, topic, filterClassSource);\n",
      "                        } catch (Exception e) {\n",
      "                            log.error(\"uploadFilterClassToAllFilterServer Exception\", e);\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public boolean updateTopicRouteInfoFromNameServer(final String topic, boolean isDefault,\n",
      "        DefaultMQProducer defaultMQProducer) {\n",
      "        try {\n",
      "            if (this.lockNamesrv.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)) {\n",
      "                try {\n",
      "                    TopicRouteData topicRouteData;\n",
      "                    if (isDefault && defaultMQProducer != null) {\n",
      "                        //Nameserver\u62c9\u53d6topic\uff1a\u901a\u8fc7netty\u8c03\u7528\u62c9\u53d6\n",
      "                        topicRouteData = this.mQClientAPIImpl.getDefaultTopicRouteInfoFromNameServer(defaultMQProducer.getCreateTopicKey(),\n",
      "                            1000 * 3);\n",
      "                        if (topicRouteData != null) {\n",
      "                            for (QueueData data : topicRouteData.getQueueDatas()) {\n",
      "                                int queueNums = Math.min(defaultMQProducer.getDefaultTopicQueueNums(), data.getReadQueueNums());\n",
      "                                data.setReadQueueNums(queueNums);\n",
      "                                data.setWriteQueueNums(queueNums);\n",
      "                            }\n",
      "                        }\n",
      "                    } else {\n",
      "                        topicRouteData = this.mQClientAPIImpl.getTopicRouteInfoFromNameServer(topic, 1000 * 3);\n",
      "                    }\n",
      "                    if (topicRouteData != null) {\n",
      "                        TopicRouteData old = this.topicRouteTable.get(topic);\n",
      "                        boolean changed = topicRouteDataIsChange(old, topicRouteData);\n",
      "                        if (!changed) {\n",
      "                            changed = this.isNeedUpdateTopicRouteInfo(topic);\n",
      "                        } else {\n",
      "                            log.info(\"the topic[{}] route info changed, old[{}] ,new[{}]\", topic, old, topicRouteData);\n",
      "                        }\n",
      "\n",
      "                        if (changed) {\n",
      "                            TopicRouteData cloneTopicRouteData = topicRouteData.cloneTopicRouteData();\n",
      "\n",
      "                            for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n",
      "                                this.brokerAddrTable.put(bd.getBrokerName(), bd.getBrokerAddrs());\n",
      "                            }\n",
      "\n",
      "                            // Update Pub info\n",
      "                            {\n",
      "                                TopicPublishInfo publishInfo = topicRouteData2TopicPublishInfo(topic, topicRouteData);\n",
      "                                publishInfo.setHaveTopicRouterInfo(true);\n",
      "                                Iterator<Entry<String, MQProducerInner>> it = this.producerTable.entrySet().iterator();\n",
      "                                while (it.hasNext()) {\n",
      "                                    Entry<String, MQProducerInner> entry = it.next();\n",
      "                                    MQProducerInner impl = entry.getValue();\n",
      "                                    if (impl != null) {\n",
      "                                        //\u66f4\u65b0\u672c\u5730\u8def\u7531\u8868\n",
      "                                        impl.updateTopicPublishInfo(topic, publishInfo);\n",
      "                                    }\n",
      "                                }\n",
      "                            }\n",
      "\n",
      "                            // Update sub info\n",
      "                            {\n",
      "                                Set<MessageQueue> subscribeInfo = topicRouteData2TopicSubscribeInfo(topic, topicRouteData);\n",
      "                                Iterator<Entry<String, MQConsumerInner>> it = this.consumerTable.entrySet().iterator();\n",
      "                                while (it.hasNext()) {\n",
      "                                    Entry<String, MQConsumerInner> entry = it.next();\n",
      "                                    MQConsumerInner impl = entry.getValue();\n",
      "                                    if (impl != null) {\n",
      "                                        impl.updateTopicSubscribeInfo(topic, subscribeInfo);\n",
      "                                    }\n",
      "                                }\n",
      "                            }\n",
      "                            log.info(\"topicRouteTable.put. Topic = {}, TopicRouteData[{}]\", topic, cloneTopicRouteData);\n",
      "                            this.topicRouteTable.put(topic, cloneTopicRouteData);\n",
      "                            return true;\n",
      "                        }\n",
      "                    } else {\n",
      "                        log.warn(\"updateTopicRouteInfoFromNameServer, getTopicRouteInfoFromNameServer return null, Topic: {}. [{}]\", topic, this.clientId);\n",
      "                    }\n",
      "                } catch (MQClientException e) {\n",
      "                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n",
      "                        log.warn(\"updateTopicRouteInfoFromNameServer Exception\", e);\n",
      "                    }\n",
      "                } catch (RemotingException e) {\n",
      "                    log.error(\"updateTopicRouteInfoFromNameServer Exception\", e);\n",
      "                    throw new IllegalStateException(e);\n",
      "                } finally {\n",
      "                    this.lockNamesrv.unlock();\n",
      "                }\n",
      "            } else {\n",
      "                log.warn(\"updateTopicRouteInfoFromNameServer tryLock timeout {}ms. [{}]\", LOCK_TIMEOUT_MILLIS, this.clientId);\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.warn(\"updateTopicRouteInfoFromNameServer Exception\", e);\n",
      "        }\n",
      "\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    private HeartbeatData prepareHeartbeatData() {\n",
      "        HeartbeatData heartbeatData = new HeartbeatData();\n",
      "\n",
      "        // clientID\n",
      "        heartbeatData.setClientID(this.clientId);\n",
      "\n",
      "        // Consumer\n",
      "        for (Map.Entry<String, MQConsumerInner> entry : this.consumerTable.entrySet()) {\n",
      "            MQConsumerInner impl = entry.getValue();\n",
      "            if (impl != null) {\n",
      "                ConsumerData consumerData = new ConsumerData();\n",
      "                consumerData.setGroupName(impl.groupName());\n",
      "                consumerData.setConsumeType(impl.consumeType());\n",
      "                consumerData.setMessageModel(impl.messageModel());\n",
      "                consumerData.setConsumeFromWhere(impl.consumeFromWhere());\n",
      "                consumerData.getSubscriptionDataSet().addAll(impl.subscriptions());\n",
      "                consumerData.setUnitMode(impl.isUnitMode());\n",
      "\n",
      "                heartbeatData.getConsumerDataSet().add(consumerData);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // Producer\n",
      "        for (Map.Entry<String/* group */, MQProducerInner> entry : this.producerTable.entrySet()) {\n",
      "            MQProducerInner impl = entry.getValue();\n",
      "            if (impl != null) {\n",
      "                ProducerData producerData = new ProducerData();\n",
      "                producerData.setGroupName(entry.getKey());\n",
      "\n",
      "                heartbeatData.getProducerDataSet().add(producerData);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return heartbeatData;\n",
      "    }\n",
      "\n",
      "    private boolean isBrokerInNameServer(final String brokerAddr) {\n",
      "        Iterator<Entry<String, TopicRouteData>> it = this.topicRouteTable.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Entry<String, TopicRouteData> itNext = it.next();\n",
      "            List<BrokerData> brokerDatas = itNext.getValue().getBrokerDatas();\n",
      "            for (BrokerData bd : brokerDatas) {\n",
      "                boolean contain = bd.getBrokerAddrs().containsValue(brokerAddr);\n",
      "                if (contain)\n",
      "                    return true;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method will be removed in the version 5.0.0,because filterServer was removed,and method\n",
      "     * <code>subscribe(final String topic, final MessageSelector messageSelector)</code> is recommended.\n",
      "     */\n",
      "    @Deprecated\n",
      "    private void uploadFilterClassToAllFilterServer(final String consumerGroup, final String fullClassName,\n",
      "        final String topic,\n",
      "        final String filterClassSource) throws UnsupportedEncodingException {\n",
      "        byte[] classBody = null;\n",
      "        int classCRC = 0;\n",
      "        try {\n",
      "            classBody = filterClassSource.getBytes(MixAll.DEFAULT_CHARSET);\n",
      "            classCRC = UtilAll.crc32(classBody);\n",
      "        } catch (Exception e1) {\n",
      "            log.warn(\"uploadFilterClassToAllFilterServer Exception, ClassName: {} {}\",\n",
      "                fullClassName,\n",
      "                RemotingHelper.exceptionSimpleDesc(e1));\n",
      "        }\n",
      "\n",
      "        TopicRouteData topicRouteData = this.topicRouteTable.get(topic);\n",
      "        if (topicRouteData != null\n",
      "            && topicRouteData.getFilterServerTable() != null && !topicRouteData.getFilterServerTable().isEmpty()) {\n",
      "            Iterator<Entry<String, List<String>>> it = topicRouteData.getFilterServerTable().entrySet().iterator();\n",
      "            while (it.hasNext()) {\n",
      "                Entry<String, List<String>> next = it.next();\n",
      "                List<String> value = next.getValue();\n",
      "                for (final String fsAddr : value) {\n",
      "                    try {\n",
      "                        this.mQClientAPIImpl.registerMessageFilterClass(fsAddr, consumerGroup, topic, fullClassName, classCRC, classBody,\n",
      "                            5000);\n",
      "\n",
      "                        log.info(\"register message class filter to {} OK, ConsumerGroup: {} Topic: {} ClassName: {}\", fsAddr, consumerGroup,\n",
      "                            topic, fullClassName);\n",
      "\n",
      "                    } catch (Exception e) {\n",
      "                        log.error(\"uploadFilterClassToAllFilterServer Exception\", e);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        } else {\n",
      "            log.warn(\"register message class filter failed, because no filter server, ConsumerGroup: {} Topic: {} ClassName: {}\",\n",
      "                consumerGroup, topic, fullClassName);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private boolean topicRouteDataIsChange(TopicRouteData olddata, TopicRouteData nowdata) {\n",
      "        if (olddata == null || nowdata == null)\n",
      "            return true;\n",
      "        TopicRouteData old = olddata.cloneTopicRouteData();\n",
      "        TopicRouteData now = nowdata.cloneTopicRouteData();\n",
      "        Collections.sort(old.getQueueDatas());\n",
      "        Collections.sort(old.getBrokerDatas());\n",
      "        Collections.sort(now.getQueueDatas());\n",
      "        Collections.sort(now.getBrokerDatas());\n",
      "        return !old.equals(now);\n",
      "\n",
      "    }\n",
      "\n",
      "    private boolean isNeedUpdateTopicRouteInfo(final String topic) {\n",
      "        boolean result = false;\n",
      "        {\n",
      "            Iterator<Entry<String, MQProducerInner>> it = this.producerTable.entrySet().iterator();\n",
      "            while (it.hasNext() && !result) {\n",
      "                Entry<String, MQProducerInner> entry = it.next();\n",
      "                MQProducerInner impl = entry.getValue();\n",
      "                if (impl != null) {\n",
      "                    result = impl.isPublishTopicNeedUpdate(topic);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        {\n",
      "            Iterator<Entry<String, MQConsumerInner>> it = this.consumerTable.entrySet().iterator();\n",
      "            while (it.hasNext() && !result) {\n",
      "                Entry<String, MQConsumerInner> entry = it.next();\n",
      "                MQConsumerInner impl = entry.getValue();\n",
      "                if (impl != null) {\n",
      "                    result = impl.isSubscribeTopicNeedUpdate(topic);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    public void shutdown() {\n",
      "        // Consumer\n",
      "        if (!this.consumerTable.isEmpty())\n",
      "            return;\n",
      "\n",
      "        // AdminExt\n",
      "        if (!this.adminExtTable.isEmpty())\n",
      "            return;\n",
      "\n",
      "        // Producer\n",
      "        if (this.producerTable.size() > 1)\n",
      "            return;\n",
      "\n",
      "        synchronized (this) {\n",
      "            switch (this.serviceState) {\n",
      "                case CREATE_JUST:\n",
      "                    break;\n",
      "                case RUNNING:\n",
      "                    this.defaultMQProducer.getDefaultMQProducerImpl().shutdown(false);\n",
      "\n",
      "                    this.serviceState = ServiceState.SHUTDOWN_ALREADY;\n",
      "                    this.pullMessageService.shutdown(true);\n",
      "                    this.scheduledExecutorService.shutdown();\n",
      "                    this.mQClientAPIImpl.shutdown();\n",
      "                    this.rebalanceService.shutdown();\n",
      "\n",
      "                    MQClientManager.getInstance().removeClientFactory(this.clientId);\n",
      "                    log.info(\"the client factory [{}] shutdown OK\", this.clientId);\n",
      "                    break;\n",
      "                case SHUTDOWN_ALREADY:\n",
      "                    break;\n",
      "                default:\n",
      "                    break;\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public boolean registerConsumer(final String group, final MQConsumerInner consumer) {\n",
      "        if (null == group || null == consumer) {\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        MQConsumerInner prev = this.consumerTable.putIfAbsent(group, consumer);\n",
      "        if (prev != null) {\n",
      "            log.warn(\"the consumer group[\" + group + \"] exist already.\");\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    public void unregisterConsumer(final String group) {\n",
      "        this.consumerTable.remove(group);\n",
      "        this.unregisterClientWithLock(null, group);\n",
      "    }\n",
      "\n",
      "    private void unregisterClientWithLock(final String producerGroup, final String consumerGroup) {\n",
      "        try {\n",
      "            if (this.lockHeartbeat.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)) {\n",
      "                try {\n",
      "                    this.unregisterClient(producerGroup, consumerGroup);\n",
      "                } catch (Exception e) {\n",
      "                    log.error(\"unregisterClient exception\", e);\n",
      "                } finally {\n",
      "                    this.lockHeartbeat.unlock();\n",
      "                }\n",
      "            } else {\n",
      "                log.warn(\"lock heartBeat, but failed. [{}]\", this.clientId);\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.warn(\"unregisterClientWithLock exception\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void unregisterClient(final String producerGroup, final String consumerGroup) {\n",
      "        Iterator<Entry<String, HashMap<Long, String>>> it = this.brokerAddrTable.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Entry<String, HashMap<Long, String>> entry = it.next();\n",
      "            String brokerName = entry.getKey();\n",
      "            HashMap<Long, String> oneTable = entry.getValue();\n",
      "\n",
      "            if (oneTable != null) {\n",
      "                for (Map.Entry<Long, String> entry1 : oneTable.entrySet()) {\n",
      "                    String addr = entry1.getValue();\n",
      "                    if (addr != null) {\n",
      "                        try {\n",
      "                            this.mQClientAPIImpl.unregisterClient(addr, this.clientId, producerGroup, consumerGroup, 3000);\n",
      "                            log.info(\"unregister client[Producer: {} Consumer: {}] from broker[{} {} {}] success\", producerGroup, consumerGroup, brokerName, entry1.getKey(), addr);\n",
      "                        } catch (RemotingException e) {\n",
      "                            log.error(\"unregister client exception from broker: \" + addr, e);\n",
      "                        } catch (InterruptedException e) {\n",
      "                            log.error(\"unregister client exception from broker: \" + addr, e);\n",
      "                        } catch (MQBrokerException e) {\n",
      "                            log.error(\"unregister client exception from broker: \" + addr, e);\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public boolean registerProducer(final String group, final DefaultMQProducerImpl producer) {\n",
      "        if (null == group || null == producer) {\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        MQProducerInner prev = this.producerTable.putIfAbsent(group, producer);\n",
      "        if (prev != null) {\n",
      "            log.warn(\"the producer group[{}] exist already.\", group);\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    public void unregisterProducer(final String group) {\n",
      "        this.producerTable.remove(group);\n",
      "        this.unregisterClientWithLock(group, null);\n",
      "    }\n",
      "\n",
      "    public boolean registerAdminExt(final String group, final MQAdminExtInner admin) {\n",
      "        if (null == group || null == admin) {\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        MQAdminExtInner prev = this.adminExtTable.putIfAbsent(group, admin);\n",
      "        if (prev != null) {\n",
      "            log.warn(\"the admin group[{}] exist already.\", group);\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    public void unregisterAdminExt(final String group) {\n",
      "        this.adminExtTable.remove(group);\n",
      "    }\n",
      "\n",
      "    public void rebalanceImmediately() {\n",
      "        this.rebalanceService.wakeup();\n",
      "    }\n",
      "\n",
      "    public void doRebalance() {\n",
      "        for (Map.Entry<String, MQConsumerInner> entry : this.consumerTable.entrySet()) {\n",
      "            MQConsumerInner impl = entry.getValue();\n",
      "            if (impl != null) {\n",
      "                try {\n",
      "                    impl.doRebalance();\n",
      "                } catch (Throwable e) {\n",
      "                    log.error(\"doRebalance exception\", e);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public MQProducerInner selectProducer(final String group) {\n",
      "        return this.producerTable.get(group);\n",
      "    }\n",
      "\n",
      "    public MQConsumerInner selectConsumer(final String group) {\n",
      "        return this.consumerTable.get(group);\n",
      "    }\n",
      "\n",
      "    public FindBrokerResult findBrokerAddressInAdmin(final String brokerName) {\n",
      "        String brokerAddr = null;\n",
      "        boolean slave = false;\n",
      "        boolean found = false;\n",
      "\n",
      "        HashMap<Long/* brokerId */, String/* address */> map = this.brokerAddrTable.get(brokerName);\n",
      "        if (map != null && !map.isEmpty()) {\n",
      "            for (Map.Entry<Long, String> entry : map.entrySet()) {\n",
      "                Long id = entry.getKey();\n",
      "                brokerAddr = entry.getValue();\n",
      "                if (brokerAddr != null) {\n",
      "                    found = true;\n",
      "                    if (MixAll.MASTER_ID == id) {\n",
      "                        slave = false;\n",
      "                    } else {\n",
      "                        slave = true;\n",
      "                    }\n",
      "                    break;\n",
      "\n",
      "                }\n",
      "            } // end of for\n",
      "        }\n",
      "\n",
      "        if (found) {\n",
      "            return new FindBrokerResult(brokerAddr, slave, findBrokerVersion(brokerName, brokerAddr));\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public String findBrokerAddressInPublish(final String brokerName) {\n",
      "        HashMap<Long/* brokerId */, String/* address */> map = this.brokerAddrTable.get(brokerName);\n",
      "        if (map != null && !map.isEmpty()) {\n",
      "            return map.get(MixAll.MASTER_ID);\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public FindBrokerResult findBrokerAddressInSubscribe(\n",
      "        final String brokerName,\n",
      "        final long brokerId,\n",
      "        final boolean onlyThisBroker\n",
      "    ) {\n",
      "        String brokerAddr = null;\n",
      "        boolean slave = false;\n",
      "        boolean found = false;\n",
      "\n",
      "        HashMap<Long/* brokerId */, String/* address */> map = this.brokerAddrTable.get(brokerName);\n",
      "        if (map != null && !map.isEmpty()) {\n",
      "            brokerAddr = map.get(brokerId);\n",
      "            slave = brokerId != MixAll.MASTER_ID;\n",
      "            found = brokerAddr != null;\n",
      "\n",
      "            if (!found && slave) {\n",
      "                brokerAddr = map.get(brokerId + 1);\n",
      "                found = brokerAddr != null;\n",
      "            }\n",
      "\n",
      "            if (!found && !onlyThisBroker) {\n",
      "                Entry<Long, String> entry = map.entrySet().iterator().next();\n",
      "                brokerAddr = entry.getValue();\n",
      "                slave = entry.getKey() != MixAll.MASTER_ID;\n",
      "                found = true;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (found) {\n",
      "            return new FindBrokerResult(brokerAddr, slave, findBrokerVersion(brokerName, brokerAddr));\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public int findBrokerVersion(String brokerName, String brokerAddr) {\n",
      "        if (this.brokerVersionTable.containsKey(brokerName)) {\n",
      "            if (this.brokerVersionTable.get(brokerName).containsKey(brokerAddr)) {\n",
      "                return this.brokerVersionTable.get(brokerName).get(brokerAddr);\n",
      "            }\n",
      "        }\n",
      "        //To do need to fresh the version\n",
      "        return 0;\n",
      "    }\n",
      "\n",
      "    public List<String> findConsumerIdList(final String topic, final String group) {\n",
      "        String brokerAddr = this.findBrokerAddrByTopic(topic);\n",
      "        if (null == brokerAddr) {\n",
      "            this.updateTopicRouteInfoFromNameServer(topic);\n",
      "            brokerAddr = this.findBrokerAddrByTopic(topic);\n",
      "        }\n",
      "\n",
      "        if (null != brokerAddr) {\n",
      "            try {\n",
      "                return this.mQClientAPIImpl.getConsumerIdListByGroup(brokerAddr, group, 3000);\n",
      "            } catch (Exception e) {\n",
      "                log.warn(\"getConsumerIdListByGroup exception, \" + brokerAddr + \" \" + group, e);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public String findBrokerAddrByTopic(final String topic) {\n",
      "        TopicRouteData topicRouteData = this.topicRouteTable.get(topic);\n",
      "        if (topicRouteData != null) {\n",
      "            List<BrokerData> brokers = topicRouteData.getBrokerDatas();\n",
      "            if (!brokers.isEmpty()) {\n",
      "                int index = random.nextInt(brokers.size());\n",
      "                BrokerData bd = brokers.get(index % brokers.size());\n",
      "                return bd.selectBrokerAddr();\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public void resetOffset(String topic, String group, Map<MessageQueue, Long> offsetTable) {\n",
      "        DefaultMQPushConsumerImpl consumer = null;\n",
      "        try {\n",
      "            MQConsumerInner impl = this.consumerTable.get(group);\n",
      "            if (impl != null && impl instanceof DefaultMQPushConsumerImpl) {\n",
      "                consumer = (DefaultMQPushConsumerImpl) impl;\n",
      "            } else {\n",
      "                log.info(\"[reset-offset] consumer dose not exist. group={}\", group);\n",
      "                return;\n",
      "            }\n",
      "            consumer.suspend();\n",
      "\n",
      "            ConcurrentMap<MessageQueue, ProcessQueue> processQueueTable = consumer.getRebalanceImpl().getProcessQueueTable();\n",
      "            for (Map.Entry<MessageQueue, ProcessQueue> entry : processQueueTable.entrySet()) {\n",
      "                MessageQueue mq = entry.getKey();\n",
      "                if (topic.equals(mq.getTopic()) && offsetTable.containsKey(mq)) {\n",
      "                    ProcessQueue pq = entry.getValue();\n",
      "                    pq.setDropped(true);\n",
      "                    pq.clear();\n",
      "                }\n",
      "            }\n",
      "\n",
      "            try {\n",
      "                TimeUnit.SECONDS.sleep(10);\n",
      "            } catch (InterruptedException e) {\n",
      "            }\n",
      "\n",
      "            Iterator<MessageQueue> iterator = processQueueTable.keySet().iterator();\n",
      "            while (iterator.hasNext()) {\n",
      "                MessageQueue mq = iterator.next();\n",
      "                Long offset = offsetTable.get(mq);\n",
      "                if (topic.equals(mq.getTopic()) && offset != null) {\n",
      "                    try {\n",
      "                        consumer.updateConsumeOffset(mq, offset);\n",
      "                        consumer.getRebalanceImpl().removeUnnecessaryMessageQueue(mq, processQueueTable.get(mq));\n",
      "                        iterator.remove();\n",
      "                    } catch (Exception e) {\n",
      "                        log.warn(\"reset offset failed. group={}, {}\", group, mq, e);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        } finally {\n",
      "            if (consumer != null) {\n",
      "                consumer.resume();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public Map<MessageQueue, Long> getConsumerStatus(String topic, String group) {\n",
      "        MQConsumerInner impl = this.consumerTable.get(group);\n",
      "        if (impl != null && impl instanceof DefaultMQPushConsumerImpl) {\n",
      "            DefaultMQPushConsumerImpl consumer = (DefaultMQPushConsumerImpl) impl;\n",
      "            return consumer.getOffsetStore().cloneOffsetTable(topic);\n",
      "        } else if (impl != null && impl instanceof DefaultMQPullConsumerImpl) {\n",
      "            DefaultMQPullConsumerImpl consumer = (DefaultMQPullConsumerImpl) impl;\n",
      "            return consumer.getOffsetStore().cloneOffsetTable(topic);\n",
      "        } else {\n",
      "            return Collections.EMPTY_MAP;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public TopicRouteData getAnExistTopicRouteData(final String topic) {\n",
      "        return this.topicRouteTable.get(topic);\n",
      "    }\n",
      "\n",
      "    public MQClientAPIImpl getMQClientAPIImpl() {\n",
      "        return mQClientAPIImpl;\n",
      "    }\n",
      "\n",
      "    public MQAdminImpl getMQAdminImpl() {\n",
      "        return mQAdminImpl;\n",
      "    }\n",
      "\n",
      "    public long getBootTimestamp() {\n",
      "        return bootTimestamp;\n",
      "    }\n",
      "\n",
      "    public ScheduledExecutorService getScheduledExecutorService() {\n",
      "        return scheduledExecutorService;\n",
      "    }\n",
      "\n",
      "    public PullMessageService getPullMessageService() {\n",
      "        return pullMessageService;\n",
      "    }\n",
      "\n",
      "    public DefaultMQProducer getDefaultMQProducer() {\n",
      "        return defaultMQProducer;\n",
      "    }\n",
      "\n",
      "    public ConcurrentMap<String, TopicRouteData> getTopicRouteTable() {\n",
      "        return topicRouteTable;\n",
      "    }\n",
      "\n",
      "    public ConsumeMessageDirectlyResult consumeMessageDirectly(final MessageExt msg,\n",
      "        final String consumerGroup,\n",
      "        final String brokerName) {\n",
      "        MQConsumerInner mqConsumerInner = this.consumerTable.get(consumerGroup);\n",
      "        if (null != mqConsumerInner) {\n",
      "            DefaultMQPushConsumerImpl consumer = (DefaultMQPushConsumerImpl) mqConsumerInner;\n",
      "\n",
      "            ConsumeMessageDirectlyResult result = consumer.getConsumeMessageService().consumeMessageDirectly(msg, brokerName);\n",
      "            return result;\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public ConsumerRunningInfo consumerRunningInfo(final String consumerGroup) {\n",
      "        MQConsumerInner mqConsumerInner = this.consumerTable.get(consumerGroup);\n",
      "        if (mqConsumerInner == null) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        ConsumerRunningInfo consumerRunningInfo = mqConsumerInner.consumerRunningInfo();\n",
      "\n",
      "        List<String> nsList = this.mQClientAPIImpl.getRemotingClient().getNameServerAddressList();\n",
      "\n",
      "        StringBuilder strBuilder = new StringBuilder();\n",
      "        if (nsList != null) {\n",
      "            for (String addr : nsList) {\n",
      "                strBuilder.append(addr).append(\";\");\n",
      "            }\n",
      "        }\n",
      "\n",
      "        String nsAddr = strBuilder.toString();\n",
      "        consumerRunningInfo.getProperties().put(ConsumerRunningInfo.PROP_NAMESERVER_ADDR, nsAddr);\n",
      "        consumerRunningInfo.getProperties().put(ConsumerRunningInfo.PROP_CONSUME_TYPE, mqConsumerInner.consumeType().name());\n",
      "        consumerRunningInfo.getProperties().put(ConsumerRunningInfo.PROP_CLIENT_VERSION,\n",
      "            MQVersion.getVersionDesc(MQVersion.CURRENT_VERSION));\n",
      "\n",
      "        return consumerRunningInfo;\n",
      "    }\n",
      "\n",
      "    public ConsumerStatsManager getConsumerStatsManager() {\n",
      "        return consumerStatsManager;\n",
      "    }\n",
      "\n",
      "    public NettyClientConfig getNettyClientConfig() {\n",
      "        return nettyClientConfig;\n",
      "    }\n",
      "\n",
      "    public ClientConfig getClientConfig() {\n",
      "        return clientConfig;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.impl.factory;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.List;\n",
      "import java.util.Properties;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import java.util.concurrent.ConcurrentMap;\n",
      "import org.apache.rocketmq.client.ClientConfig;\n",
      "import org.apache.rocketmq.client.admin.MQAdminExtInner;\n",
      "import org.apache.rocketmq.client.exception.MQBrokerException;\n",
      "import org.apache.rocketmq.client.impl.FindBrokerResult;\n",
      "import org.apache.rocketmq.client.impl.MQClientManager;\n",
      "import org.apache.rocketmq.client.impl.consumer.MQConsumerInner;\n",
      "import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;\n",
      "import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;\n",
      "import org.apache.rocketmq.common.protocol.route.BrokerData;\n",
      "import org.apache.rocketmq.common.protocol.route.QueueData;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingException;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "import org.junit.runner.RunWith;\n",
      "import org.mockito.internal.util.reflection.FieldSetter;\n",
      "import org.mockito.junit.MockitoJUnitRunner;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "@RunWith(MockitoJUnitRunner.class)\n",
      "public class MQClientInstanceTest {\n",
      "    private MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());\n",
      "    private String topic = \"FooBar\";\n",
      "    private String group = \"FooBarGroup\";\n",
      "    private ConcurrentMap<String, HashMap<Long, String>> brokerAddrTable = new ConcurrentHashMap<String, HashMap<Long, String>>();\n",
      "\n",
      "    @Before\n",
      "    public void init() throws Exception {\n",
      "        FieldSetter.setField(mqClientInstance, MQClientInstance.class.getDeclaredField(\"brokerAddrTable\"), brokerAddrTable);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testTopicRouteData2TopicPublishInfo() {\n",
      "        TopicRouteData topicRouteData = new TopicRouteData();\n",
      "\n",
      "        topicRouteData.setFilterServerTable(new HashMap<String, List<String>>());\n",
      "        List<BrokerData> brokerDataList = new ArrayList<BrokerData>();\n",
      "        BrokerData brokerData = new BrokerData();\n",
      "        brokerData.setBrokerName(\"BrokerA\");\n",
      "        brokerData.setCluster(\"DefaultCluster\");\n",
      "        HashMap<Long, String> brokerAddrs = new HashMap<Long, String>();\n",
      "        brokerAddrs.put(0L, \"127.0.0.1:10911\");\n",
      "        brokerData.setBrokerAddrs(brokerAddrs);\n",
      "        brokerDataList.add(brokerData);\n",
      "        topicRouteData.setBrokerDatas(brokerDataList);\n",
      "\n",
      "        List<QueueData> queueDataList = new ArrayList<QueueData>();\n",
      "        QueueData queueData = new QueueData();\n",
      "        queueData.setBrokerName(\"BrokerA\");\n",
      "        queueData.setPerm(6);\n",
      "        queueData.setReadQueueNums(3);\n",
      "        queueData.setWriteQueueNums(4);\n",
      "        queueData.setTopicSynFlag(0);\n",
      "        queueDataList.add(queueData);\n",
      "        topicRouteData.setQueueDatas(queueDataList);\n",
      "\n",
      "        TopicPublishInfo topicPublishInfo = MQClientInstance.topicRouteData2TopicPublishInfo(topic, topicRouteData);\n",
      "\n",
      "        assertThat(topicPublishInfo.isHaveTopicRouterInfo()).isFalse();\n",
      "        assertThat(topicPublishInfo.getMessageQueueList().size()).isEqualTo(4);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFindBrokerAddressInSubscribe() {\n",
      "        // dledger normal case\n",
      "        String brokerName = \"BrokerA\";\n",
      "        HashMap<Long, String> addrMap = new HashMap<Long, String>();\n",
      "        addrMap.put(0L, \"127.0.0.1:10911\");\n",
      "        addrMap.put(1L, \"127.0.0.1:10912\");\n",
      "        addrMap.put(2L, \"127.0.0.1:10913\");\n",
      "        brokerAddrTable.put(brokerName, addrMap);\n",
      "        long brokerId = 1;\n",
      "        FindBrokerResult brokerResult = mqClientInstance.findBrokerAddressInSubscribe(brokerName, brokerId, false);\n",
      "        assertThat(brokerResult).isNotNull();\n",
      "        assertThat(brokerResult.getBrokerAddr()).isEqualTo(\"127.0.0.1:10912\");\n",
      "        assertThat(brokerResult.isSlave()).isTrue();\n",
      "\n",
      "        // dledger case, when node n0 was voted as the leader\n",
      "        brokerName = \"BrokerB\";\n",
      "        HashMap<Long, String> addrMapNew = new HashMap<Long, String>();\n",
      "        addrMapNew.put(0L, \"127.0.0.1:10911\");\n",
      "        addrMapNew.put(2L, \"127.0.0.1:10912\");\n",
      "        addrMapNew.put(3L, \"127.0.0.1:10913\");\n",
      "        brokerAddrTable.put(brokerName, addrMapNew);\n",
      "        brokerResult = mqClientInstance.findBrokerAddressInSubscribe(brokerName, brokerId, false);\n",
      "        assertThat(brokerResult).isNotNull();\n",
      "        assertThat(brokerResult.getBrokerAddr()).isEqualTo(\"127.0.0.1:10912\");\n",
      "        assertThat(brokerResult.isSlave()).isTrue();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testRegisterProducer() {\n",
      "        boolean flag = mqClientInstance.registerProducer(group, mock(DefaultMQProducerImpl.class));\n",
      "        assertThat(flag).isTrue();\n",
      "\n",
      "        flag = mqClientInstance.registerProducer(group, mock(DefaultMQProducerImpl.class));\n",
      "        assertThat(flag).isFalse();\n",
      "\n",
      "        mqClientInstance.unregisterProducer(group);\n",
      "        flag = mqClientInstance.registerProducer(group, mock(DefaultMQProducerImpl.class));\n",
      "        assertThat(flag).isTrue();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testRegisterConsumer() throws RemotingException, InterruptedException, MQBrokerException {\n",
      "        boolean flag = mqClientInstance.registerConsumer(group, mock(MQConsumerInner.class));\n",
      "        assertThat(flag).isTrue();\n",
      "\n",
      "        flag = mqClientInstance.registerConsumer(group, mock(MQConsumerInner.class));\n",
      "        assertThat(flag).isFalse();\n",
      "\n",
      "        mqClientInstance.unregisterConsumer(group);\n",
      "        flag = mqClientInstance.registerConsumer(group, mock(MQConsumerInner.class));\n",
      "        assertThat(flag).isTrue();\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void testConsumerRunningInfoWhenConsumersIsEmptyOrNot() throws RemotingException, InterruptedException, MQBrokerException {\n",
      "        MQConsumerInner mockConsumerInner = mock(MQConsumerInner.class);\n",
      "        ConsumerRunningInfo mockConsumerRunningInfo = mock(ConsumerRunningInfo.class);\n",
      "        when(mockConsumerInner.consumerRunningInfo()).thenReturn(mockConsumerRunningInfo);\n",
      "        when(mockConsumerInner.consumeType()).thenReturn(ConsumeType.CONSUME_PASSIVELY);\n",
      "        Properties properties = new Properties();\n",
      "        when(mockConsumerRunningInfo.getProperties()).thenReturn(properties);\n",
      "        mqClientInstance.unregisterConsumer(group);\n",
      "\n",
      "        ConsumerRunningInfo runningInfo = mqClientInstance.consumerRunningInfo(group);\n",
      "        assertThat(runningInfo).isNull();\n",
      "        boolean flag = mqClientInstance.registerConsumer(group, mockConsumerInner);\n",
      "        assertThat(flag).isTrue();\n",
      "\n",
      "        runningInfo = mqClientInstance.consumerRunningInfo(group);\n",
      "        assertThat(runningInfo).isNotNull();\n",
      "        assertThat(mockConsumerInner.consumerRunningInfo().getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE));\n",
      "\n",
      "        mqClientInstance.unregisterConsumer(group);\n",
      "        flag = mqClientInstance.registerConsumer(group, mock(MQConsumerInner.class));\n",
      "        assertThat(flag).isTrue();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testRegisterAdminExt() {\n",
      "        boolean flag = mqClientInstance.registerAdminExt(group, mock(MQAdminExtInner.class));\n",
      "        assertThat(flag).isTrue();\n",
      "\n",
      "        flag = mqClientInstance.registerAdminExt(group, mock(MQAdminExtInner.class));\n",
      "        assertThat(flag).isFalse();\n",
      "\n",
      "        mqClientInstance.unregisterAdminExt(group);\n",
      "        flag = mqClientInstance.registerAdminExt(group, mock(MQAdminExtInner.class));\n",
      "        assertThat(flag).isTrue();\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "MQClientInstance::::newThread(java.lang.Runnable)": [
        108,
        111
      ],
      "MQClientInstance::::start()": [
        224,
        253
      ],
      "MQClientInstance::::startScheduledTask()": [
        255,
        322
      ],
      "MQClientInstance::::getClientId()": [
        324,
        326
      ],
      "MQClientInstance::::updateTopicRouteInfoFromNameServer()": [
        328,
        364
      ],
      "MQClientInstance::::cleanOfflineBroker()": [
        389,
        431
      ],
      "MQClientInstance::::checkClientInBroker()": [
        433,
        469
      ],
      "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()": [
        471,
        484
      ],
      "MQClientInstance::::persistAllConsumerOffset()": [
        486,
        493
      ],
      "MQClientInstance::::adjustThreadPool()": [
        495,
        510
      ],
      "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String)": [
        512,
        514
      ],
      "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)": [
        516,
        532
      ],
      "MQClientInstance::::sendHeartbeatToAllBroker()": [
        534,
        583
      ],
      "MQClientInstance::::uploadFilterClassSource()": [
        585,
        607
      ],
      "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)": [
        609,
        697
      ],
      "MQClientInstance::::prepareHeartbeatData()": [
        699,
        733
      ],
      "MQClientInstance::::isBrokerInNameServer(java.lang.String)": [
        735,
        748
      ],
      "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": [
        754,
        793
      ],
      "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)": [
        808,
        833
      ],
      "MQClientInstance::::shutdown()": [
        835,
        870
      ],
      "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)": [
        872,
        884
      ],
      "MQClientInstance::::unregisterConsumer(java.lang.String)": [
        886,
        889
      ],
      "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)": [
        891,
        907
      ],
      "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)": [
        909,
        934
      ],
      "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)": [
        936,
        948
      ],
      "MQClientInstance::::unregisterProducer(java.lang.String)": [
        950,
        953
      ],
      "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)": [
        955,
        967
      ],
      "MQClientInstance::::unregisterAdminExt(java.lang.String)": [
        969,
        971
      ],
      "MQClientInstance::::rebalanceImmediately()": [
        973,
        975
      ],
      "MQClientInstance::::doRebalance()": [
        977,
        988
      ],
      "MQClientInstance::::selectProducer(java.lang.String)": [
        990,
        992
      ],
      "MQClientInstance::::selectConsumer(java.lang.String)": [
        994,
        996
      ],
      "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)": [
        998,
        1026
      ],
      "MQClientInstance::::findBrokerAddressInPublish(java.lang.String)": [
        1028,
        1035
      ],
      "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)": [
        1037,
        1070
      ],
      "MQClientInstance::::findBrokerVersion(java.lang.String,java.lang.String)": [
        1072,
        1080
      ],
      "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)": [
        1082,
        1098
      ],
      "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)": [
        1100,
        1112
      ],
      "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)": [
        1162,
        1173
      ],
      "MQClientInstance::::getAnExistTopicRouteData(java.lang.String)": [
        1175,
        1177
      ],
      "MQClientInstance::::getMQClientAPIImpl()": [
        1179,
        1181
      ],
      "MQClientInstance::::getMQAdminImpl()": [
        1183,
        1185
      ],
      "MQClientInstance::::getBootTimestamp()": [
        1187,
        1189
      ],
      "MQClientInstance::::getScheduledExecutorService()": [
        1191,
        1193
      ],
      "MQClientInstance::::getPullMessageService()": [
        1195,
        1197
      ],
      "MQClientInstance::::getDefaultMQProducer()": [
        1199,
        1201
      ],
      "MQClientInstance::::getTopicRouteTable()": [
        1203,
        1205
      ],
      "MQClientInstance::::consumerRunningInfo(java.lang.String)": [
        1221,
        1245
      ],
      "MQClientInstance::::getConsumerStatsManager()": [
        1247,
        1249
      ],
      "MQClientInstance::::getNettyClientConfig()": [
        1251,
        1253
      ],
      "MQClientInstance::::getClientConfig()": [
        1255,
        1257
      ]
    },
    "test_method_lines_dic": {
      "MQClientInstanceTest::::init()": [
        56,
        59
      ],
      "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()": [
        61,
        90
      ],
      "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()": [
        92,
        118
      ],
      "MQClientInstanceTest::::testRegisterProducer()": [
        120,
        131
      ],
      "MQClientInstanceTest::::testRegisterConsumer()": [
        133,
        144
      ],
      "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()": [
        147,
        169
      ],
      "MQClientInstanceTest::::testRegisterAdminExt()": [
        171,
        182
      ]
    },
    "reverse_method_lines_dic": {
      "108": "MQClientInstance::::newThread(java.lang.Runnable)",
      "109": "MQClientInstance::::newThread(java.lang.Runnable)",
      "110": "MQClientInstance::::newThread(java.lang.Runnable)",
      "111": "MQClientInstance::::newThread(java.lang.Runnable)",
      "224": "MQClientInstance::::start()",
      "225": "MQClientInstance::::start()",
      "226": "MQClientInstance::::start()",
      "227": "MQClientInstance::::start()",
      "228": "MQClientInstance::::start()",
      "229": "MQClientInstance::::start()",
      "230": "MQClientInstance::::start()",
      "231": "MQClientInstance::::start()",
      "232": "MQClientInstance::::start()",
      "233": "MQClientInstance::::start()",
      "234": "MQClientInstance::::start()",
      "235": "MQClientInstance::::start()",
      "236": "MQClientInstance::::start()",
      "237": "MQClientInstance::::start()",
      "238": "MQClientInstance::::start()",
      "239": "MQClientInstance::::start()",
      "240": "MQClientInstance::::start()",
      "241": "MQClientInstance::::start()",
      "242": "MQClientInstance::::start()",
      "243": "MQClientInstance::::start()",
      "244": "MQClientInstance::::start()",
      "245": "MQClientInstance::::start()",
      "246": "MQClientInstance::::start()",
      "247": "MQClientInstance::::start()",
      "248": "MQClientInstance::::start()",
      "249": "MQClientInstance::::start()",
      "250": "MQClientInstance::::start()",
      "251": "MQClientInstance::::start()",
      "252": "MQClientInstance::::start()",
      "253": "MQClientInstance::::start()",
      "255": "MQClientInstance::::startScheduledTask()",
      "256": "MQClientInstance::::startScheduledTask()",
      "257": "MQClientInstance::::startScheduledTask()",
      "258": "MQClientInstance::::startScheduledTask()",
      "259": "MQClientInstance::::startScheduledTask()",
      "260": "MQClientInstance::::startScheduledTask()",
      "261": "MQClientInstance::::startScheduledTask()",
      "262": "MQClientInstance::::startScheduledTask()",
      "263": "MQClientInstance::::startScheduledTask()",
      "264": "MQClientInstance::::startScheduledTask()",
      "265": "MQClientInstance::::startScheduledTask()",
      "266": "MQClientInstance::::startScheduledTask()",
      "267": "MQClientInstance::::startScheduledTask()",
      "268": "MQClientInstance::::startScheduledTask()",
      "269": "MQClientInstance::::startScheduledTask()",
      "270": "MQClientInstance::::startScheduledTask()",
      "271": "MQClientInstance::::startScheduledTask()",
      "272": "MQClientInstance::::startScheduledTask()",
      "273": "MQClientInstance::::startScheduledTask()",
      "274": "MQClientInstance::::startScheduledTask()",
      "275": "MQClientInstance::::startScheduledTask()",
      "276": "MQClientInstance::::startScheduledTask()",
      "277": "MQClientInstance::::startScheduledTask()",
      "278": "MQClientInstance::::startScheduledTask()",
      "279": "MQClientInstance::::startScheduledTask()",
      "280": "MQClientInstance::::startScheduledTask()",
      "281": "MQClientInstance::::startScheduledTask()",
      "282": "MQClientInstance::::startScheduledTask()",
      "283": "MQClientInstance::::startScheduledTask()",
      "284": "MQClientInstance::::startScheduledTask()",
      "285": "MQClientInstance::::startScheduledTask()",
      "286": "MQClientInstance::::startScheduledTask()",
      "287": "MQClientInstance::::startScheduledTask()",
      "288": "MQClientInstance::::startScheduledTask()",
      "289": "MQClientInstance::::startScheduledTask()",
      "290": "MQClientInstance::::startScheduledTask()",
      "291": "MQClientInstance::::startScheduledTask()",
      "292": "MQClientInstance::::startScheduledTask()",
      "293": "MQClientInstance::::startScheduledTask()",
      "294": "MQClientInstance::::startScheduledTask()",
      "295": "MQClientInstance::::startScheduledTask()",
      "296": "MQClientInstance::::startScheduledTask()",
      "297": "MQClientInstance::::startScheduledTask()",
      "298": "MQClientInstance::::startScheduledTask()",
      "299": "MQClientInstance::::startScheduledTask()",
      "300": "MQClientInstance::::startScheduledTask()",
      "301": "MQClientInstance::::startScheduledTask()",
      "302": "MQClientInstance::::startScheduledTask()",
      "303": "MQClientInstance::::startScheduledTask()",
      "304": "MQClientInstance::::startScheduledTask()",
      "305": "MQClientInstance::::startScheduledTask()",
      "306": "MQClientInstance::::startScheduledTask()",
      "307": "MQClientInstance::::startScheduledTask()",
      "308": "MQClientInstance::::startScheduledTask()",
      "309": "MQClientInstance::::startScheduledTask()",
      "310": "MQClientInstance::::startScheduledTask()",
      "311": "MQClientInstance::::startScheduledTask()",
      "312": "MQClientInstance::::startScheduledTask()",
      "313": "MQClientInstance::::startScheduledTask()",
      "314": "MQClientInstance::::startScheduledTask()",
      "315": "MQClientInstance::::startScheduledTask()",
      "316": "MQClientInstance::::startScheduledTask()",
      "317": "MQClientInstance::::startScheduledTask()",
      "318": "MQClientInstance::::startScheduledTask()",
      "319": "MQClientInstance::::startScheduledTask()",
      "320": "MQClientInstance::::startScheduledTask()",
      "321": "MQClientInstance::::startScheduledTask()",
      "322": "MQClientInstance::::startScheduledTask()",
      "324": "MQClientInstance::::getClientId()",
      "325": "MQClientInstance::::getClientId()",
      "326": "MQClientInstance::::getClientId()",
      "328": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "329": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "330": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "331": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "332": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "333": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "334": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "335": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "336": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "337": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "338": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "339": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "340": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "341": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "342": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "343": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "344": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "345": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "346": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "347": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "348": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "349": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "350": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "351": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "352": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "353": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "354": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "355": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "356": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "357": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "358": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "359": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "360": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "361": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "362": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "363": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "364": "MQClientInstance::::updateTopicRouteInfoFromNameServer()",
      "389": "MQClientInstance::::cleanOfflineBroker()",
      "390": "MQClientInstance::::cleanOfflineBroker()",
      "391": "MQClientInstance::::cleanOfflineBroker()",
      "392": "MQClientInstance::::cleanOfflineBroker()",
      "393": "MQClientInstance::::cleanOfflineBroker()",
      "394": "MQClientInstance::::cleanOfflineBroker()",
      "395": "MQClientInstance::::cleanOfflineBroker()",
      "396": "MQClientInstance::::cleanOfflineBroker()",
      "397": "MQClientInstance::::cleanOfflineBroker()",
      "398": "MQClientInstance::::cleanOfflineBroker()",
      "399": "MQClientInstance::::cleanOfflineBroker()",
      "400": "MQClientInstance::::cleanOfflineBroker()",
      "401": "MQClientInstance::::cleanOfflineBroker()",
      "402": "MQClientInstance::::cleanOfflineBroker()",
      "403": "MQClientInstance::::cleanOfflineBroker()",
      "404": "MQClientInstance::::cleanOfflineBroker()",
      "405": "MQClientInstance::::cleanOfflineBroker()",
      "406": "MQClientInstance::::cleanOfflineBroker()",
      "407": "MQClientInstance::::cleanOfflineBroker()",
      "408": "MQClientInstance::::cleanOfflineBroker()",
      "409": "MQClientInstance::::cleanOfflineBroker()",
      "410": "MQClientInstance::::cleanOfflineBroker()",
      "411": "MQClientInstance::::cleanOfflineBroker()",
      "412": "MQClientInstance::::cleanOfflineBroker()",
      "413": "MQClientInstance::::cleanOfflineBroker()",
      "414": "MQClientInstance::::cleanOfflineBroker()",
      "415": "MQClientInstance::::cleanOfflineBroker()",
      "416": "MQClientInstance::::cleanOfflineBroker()",
      "417": "MQClientInstance::::cleanOfflineBroker()",
      "418": "MQClientInstance::::cleanOfflineBroker()",
      "419": "MQClientInstance::::cleanOfflineBroker()",
      "420": "MQClientInstance::::cleanOfflineBroker()",
      "421": "MQClientInstance::::cleanOfflineBroker()",
      "422": "MQClientInstance::::cleanOfflineBroker()",
      "423": "MQClientInstance::::cleanOfflineBroker()",
      "424": "MQClientInstance::::cleanOfflineBroker()",
      "425": "MQClientInstance::::cleanOfflineBroker()",
      "426": "MQClientInstance::::cleanOfflineBroker()",
      "427": "MQClientInstance::::cleanOfflineBroker()",
      "428": "MQClientInstance::::cleanOfflineBroker()",
      "429": "MQClientInstance::::cleanOfflineBroker()",
      "430": "MQClientInstance::::cleanOfflineBroker()",
      "431": "MQClientInstance::::cleanOfflineBroker()",
      "433": "MQClientInstance::::checkClientInBroker()",
      "434": "MQClientInstance::::checkClientInBroker()",
      "435": "MQClientInstance::::checkClientInBroker()",
      "436": "MQClientInstance::::checkClientInBroker()",
      "437": "MQClientInstance::::checkClientInBroker()",
      "438": "MQClientInstance::::checkClientInBroker()",
      "439": "MQClientInstance::::checkClientInBroker()",
      "440": "MQClientInstance::::checkClientInBroker()",
      "441": "MQClientInstance::::checkClientInBroker()",
      "442": "MQClientInstance::::checkClientInBroker()",
      "443": "MQClientInstance::::checkClientInBroker()",
      "444": "MQClientInstance::::checkClientInBroker()",
      "445": "MQClientInstance::::checkClientInBroker()",
      "446": "MQClientInstance::::checkClientInBroker()",
      "447": "MQClientInstance::::checkClientInBroker()",
      "448": "MQClientInstance::::checkClientInBroker()",
      "449": "MQClientInstance::::checkClientInBroker()",
      "450": "MQClientInstance::::checkClientInBroker()",
      "451": "MQClientInstance::::checkClientInBroker()",
      "452": "MQClientInstance::::checkClientInBroker()",
      "453": "MQClientInstance::::checkClientInBroker()",
      "454": "MQClientInstance::::checkClientInBroker()",
      "455": "MQClientInstance::::checkClientInBroker()",
      "456": "MQClientInstance::::checkClientInBroker()",
      "457": "MQClientInstance::::checkClientInBroker()",
      "458": "MQClientInstance::::checkClientInBroker()",
      "459": "MQClientInstance::::checkClientInBroker()",
      "460": "MQClientInstance::::checkClientInBroker()",
      "461": "MQClientInstance::::checkClientInBroker()",
      "462": "MQClientInstance::::checkClientInBroker()",
      "463": "MQClientInstance::::checkClientInBroker()",
      "464": "MQClientInstance::::checkClientInBroker()",
      "465": "MQClientInstance::::checkClientInBroker()",
      "466": "MQClientInstance::::checkClientInBroker()",
      "467": "MQClientInstance::::checkClientInBroker()",
      "468": "MQClientInstance::::checkClientInBroker()",
      "469": "MQClientInstance::::checkClientInBroker()",
      "471": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "472": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "473": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "474": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "475": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "476": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "477": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "478": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "479": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "480": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "481": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "482": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "483": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "484": "MQClientInstance::::sendHeartbeatToAllBrokerWithLock()",
      "486": "MQClientInstance::::persistAllConsumerOffset()",
      "487": "MQClientInstance::::persistAllConsumerOffset()",
      "488": "MQClientInstance::::persistAllConsumerOffset()",
      "489": "MQClientInstance::::persistAllConsumerOffset()",
      "490": "MQClientInstance::::persistAllConsumerOffset()",
      "491": "MQClientInstance::::persistAllConsumerOffset()",
      "492": "MQClientInstance::::persistAllConsumerOffset()",
      "493": "MQClientInstance::::persistAllConsumerOffset()",
      "495": "MQClientInstance::::adjustThreadPool()",
      "496": "MQClientInstance::::adjustThreadPool()",
      "497": "MQClientInstance::::adjustThreadPool()",
      "498": "MQClientInstance::::adjustThreadPool()",
      "499": "MQClientInstance::::adjustThreadPool()",
      "500": "MQClientInstance::::adjustThreadPool()",
      "501": "MQClientInstance::::adjustThreadPool()",
      "502": "MQClientInstance::::adjustThreadPool()",
      "503": "MQClientInstance::::adjustThreadPool()",
      "504": "MQClientInstance::::adjustThreadPool()",
      "505": "MQClientInstance::::adjustThreadPool()",
      "506": "MQClientInstance::::adjustThreadPool()",
      "507": "MQClientInstance::::adjustThreadPool()",
      "508": "MQClientInstance::::adjustThreadPool()",
      "509": "MQClientInstance::::adjustThreadPool()",
      "510": "MQClientInstance::::adjustThreadPool()",
      "512": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String)",
      "513": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String)",
      "514": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String)",
      "516": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "517": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "518": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "519": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "520": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "521": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "522": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "523": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "524": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "525": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "526": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "527": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "528": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "529": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "530": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "531": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "532": "MQClientInstance::::isBrokerAddrExistInTopicRouteTable(java.lang.String)",
      "534": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "535": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "536": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "537": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "538": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "539": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "540": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "541": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "542": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "543": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "544": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "545": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "546": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "547": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "548": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "549": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "550": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "551": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "552": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "553": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "554": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "555": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "556": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "557": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "558": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "559": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "560": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "561": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "562": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "563": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "564": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "565": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "566": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "567": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "568": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "569": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "570": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "571": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "572": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "573": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "574": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "575": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "576": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "577": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "578": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "579": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "580": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "581": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "582": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "583": "MQClientInstance::::sendHeartbeatToAllBroker()",
      "585": "MQClientInstance::::uploadFilterClassSource()",
      "586": "MQClientInstance::::uploadFilterClassSource()",
      "587": "MQClientInstance::::uploadFilterClassSource()",
      "588": "MQClientInstance::::uploadFilterClassSource()",
      "589": "MQClientInstance::::uploadFilterClassSource()",
      "590": "MQClientInstance::::uploadFilterClassSource()",
      "591": "MQClientInstance::::uploadFilterClassSource()",
      "592": "MQClientInstance::::uploadFilterClassSource()",
      "593": "MQClientInstance::::uploadFilterClassSource()",
      "594": "MQClientInstance::::uploadFilterClassSource()",
      "595": "MQClientInstance::::uploadFilterClassSource()",
      "596": "MQClientInstance::::uploadFilterClassSource()",
      "597": "MQClientInstance::::uploadFilterClassSource()",
      "598": "MQClientInstance::::uploadFilterClassSource()",
      "599": "MQClientInstance::::uploadFilterClassSource()",
      "600": "MQClientInstance::::uploadFilterClassSource()",
      "601": "MQClientInstance::::uploadFilterClassSource()",
      "602": "MQClientInstance::::uploadFilterClassSource()",
      "603": "MQClientInstance::::uploadFilterClassSource()",
      "604": "MQClientInstance::::uploadFilterClassSource()",
      "605": "MQClientInstance::::uploadFilterClassSource()",
      "606": "MQClientInstance::::uploadFilterClassSource()",
      "607": "MQClientInstance::::uploadFilterClassSource()",
      "609": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "610": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "611": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "612": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "613": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "614": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "615": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "616": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "617": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "618": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "619": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "620": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "621": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "622": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "623": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "624": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "625": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "626": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "627": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "628": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "629": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "630": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "631": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "632": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "633": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "634": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "635": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "636": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "637": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "638": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "639": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "640": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "641": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "642": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "643": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "644": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "645": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "646": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "647": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "648": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "649": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "650": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "651": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "652": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "653": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "654": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "655": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "656": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "657": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "658": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "659": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "660": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "661": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "662": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "663": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "664": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "665": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "666": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "667": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "668": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "669": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "670": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "671": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "672": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "673": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "674": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "675": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "676": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "677": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "678": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "679": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "680": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "681": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "682": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "683": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "684": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "685": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "686": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "687": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "688": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "689": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "690": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "691": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "692": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "693": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "694": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "695": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "696": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "697": "MQClientInstance::::updateTopicRouteInfoFromNameServer(java.lang.String,boolean,org.apache.rocketmq.client.producer.DefaultMQProducer)",
      "699": "MQClientInstance::::prepareHeartbeatData()",
      "700": "MQClientInstance::::prepareHeartbeatData()",
      "701": "MQClientInstance::::prepareHeartbeatData()",
      "702": "MQClientInstance::::prepareHeartbeatData()",
      "703": "MQClientInstance::::prepareHeartbeatData()",
      "704": "MQClientInstance::::prepareHeartbeatData()",
      "705": "MQClientInstance::::prepareHeartbeatData()",
      "706": "MQClientInstance::::prepareHeartbeatData()",
      "707": "MQClientInstance::::prepareHeartbeatData()",
      "708": "MQClientInstance::::prepareHeartbeatData()",
      "709": "MQClientInstance::::prepareHeartbeatData()",
      "710": "MQClientInstance::::prepareHeartbeatData()",
      "711": "MQClientInstance::::prepareHeartbeatData()",
      "712": "MQClientInstance::::prepareHeartbeatData()",
      "713": "MQClientInstance::::prepareHeartbeatData()",
      "714": "MQClientInstance::::prepareHeartbeatData()",
      "715": "MQClientInstance::::prepareHeartbeatData()",
      "716": "MQClientInstance::::prepareHeartbeatData()",
      "717": "MQClientInstance::::prepareHeartbeatData()",
      "718": "MQClientInstance::::prepareHeartbeatData()",
      "719": "MQClientInstance::::prepareHeartbeatData()",
      "720": "MQClientInstance::::prepareHeartbeatData()",
      "721": "MQClientInstance::::prepareHeartbeatData()",
      "722": "MQClientInstance::::prepareHeartbeatData()",
      "723": "MQClientInstance::::prepareHeartbeatData()",
      "724": "MQClientInstance::::prepareHeartbeatData()",
      "725": "MQClientInstance::::prepareHeartbeatData()",
      "726": "MQClientInstance::::prepareHeartbeatData()",
      "727": "MQClientInstance::::prepareHeartbeatData()",
      "728": "MQClientInstance::::prepareHeartbeatData()",
      "729": "MQClientInstance::::prepareHeartbeatData()",
      "730": "MQClientInstance::::prepareHeartbeatData()",
      "731": "MQClientInstance::::prepareHeartbeatData()",
      "732": "MQClientInstance::::prepareHeartbeatData()",
      "733": "MQClientInstance::::prepareHeartbeatData()",
      "735": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "736": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "737": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "738": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "739": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "740": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "741": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "742": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "743": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "744": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "745": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "746": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "747": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "748": "MQClientInstance::::isBrokerInNameServer(java.lang.String)",
      "754": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "755": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "756": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "757": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "758": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "759": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "760": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "761": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "762": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "763": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "764": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "765": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "766": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "767": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "768": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "769": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "770": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "771": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "772": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "773": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "774": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "775": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "776": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "777": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "778": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "779": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "780": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "781": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "782": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "783": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "784": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "785": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "786": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "787": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "788": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "789": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "790": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "791": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "792": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "793": "MQClientInstance::::uploadFilterClassToAllFilterServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "808": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "809": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "810": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "811": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "812": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "813": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "814": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "815": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "816": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "817": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "818": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "819": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "820": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "821": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "822": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "823": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "824": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "825": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "826": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "827": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "828": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "829": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "830": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "831": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "832": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "833": "MQClientInstance::::isNeedUpdateTopicRouteInfo(java.lang.String)",
      "835": "MQClientInstance::::shutdown()",
      "836": "MQClientInstance::::shutdown()",
      "837": "MQClientInstance::::shutdown()",
      "838": "MQClientInstance::::shutdown()",
      "839": "MQClientInstance::::shutdown()",
      "840": "MQClientInstance::::shutdown()",
      "841": "MQClientInstance::::shutdown()",
      "842": "MQClientInstance::::shutdown()",
      "843": "MQClientInstance::::shutdown()",
      "844": "MQClientInstance::::shutdown()",
      "845": "MQClientInstance::::shutdown()",
      "846": "MQClientInstance::::shutdown()",
      "847": "MQClientInstance::::shutdown()",
      "848": "MQClientInstance::::shutdown()",
      "849": "MQClientInstance::::shutdown()",
      "850": "MQClientInstance::::shutdown()",
      "851": "MQClientInstance::::shutdown()",
      "852": "MQClientInstance::::shutdown()",
      "853": "MQClientInstance::::shutdown()",
      "854": "MQClientInstance::::shutdown()",
      "855": "MQClientInstance::::shutdown()",
      "856": "MQClientInstance::::shutdown()",
      "857": "MQClientInstance::::shutdown()",
      "858": "MQClientInstance::::shutdown()",
      "859": "MQClientInstance::::shutdown()",
      "860": "MQClientInstance::::shutdown()",
      "861": "MQClientInstance::::shutdown()",
      "862": "MQClientInstance::::shutdown()",
      "863": "MQClientInstance::::shutdown()",
      "864": "MQClientInstance::::shutdown()",
      "865": "MQClientInstance::::shutdown()",
      "866": "MQClientInstance::::shutdown()",
      "867": "MQClientInstance::::shutdown()",
      "868": "MQClientInstance::::shutdown()",
      "869": "MQClientInstance::::shutdown()",
      "870": "MQClientInstance::::shutdown()",
      "872": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "873": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "874": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "875": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "876": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "877": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "878": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "879": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "880": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "881": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "882": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "883": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "884": "MQClientInstance::::registerConsumer(java.lang.String,org.apache.rocketmq.client.impl.consumer.MQConsumerInner)",
      "886": "MQClientInstance::::unregisterConsumer(java.lang.String)",
      "887": "MQClientInstance::::unregisterConsumer(java.lang.String)",
      "888": "MQClientInstance::::unregisterConsumer(java.lang.String)",
      "889": "MQClientInstance::::unregisterConsumer(java.lang.String)",
      "891": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "892": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "893": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "894": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "895": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "896": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "897": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "898": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "899": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "900": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "901": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "902": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "903": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "904": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "905": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "906": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "907": "MQClientInstance::::unregisterClientWithLock(java.lang.String,java.lang.String)",
      "909": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "910": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "911": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "912": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "913": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "914": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "915": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "916": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "917": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "918": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "919": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "920": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "921": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "922": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "923": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "924": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "925": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "926": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "927": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "928": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "929": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "930": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "931": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "932": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "933": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "934": "MQClientInstance::::unregisterClient(java.lang.String,java.lang.String)",
      "936": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "937": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "938": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "939": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "940": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "941": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "942": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "943": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "944": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "945": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "946": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "947": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "948": "MQClientInstance::::registerProducer(java.lang.String,org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl)",
      "950": "MQClientInstance::::unregisterProducer(java.lang.String)",
      "951": "MQClientInstance::::unregisterProducer(java.lang.String)",
      "952": "MQClientInstance::::unregisterProducer(java.lang.String)",
      "953": "MQClientInstance::::unregisterProducer(java.lang.String)",
      "955": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "956": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "957": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "958": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "959": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "960": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "961": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "962": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "963": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "964": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "965": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "966": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "967": "MQClientInstance::::registerAdminExt(java.lang.String,org.apache.rocketmq.client.admin.MQAdminExtInner)",
      "969": "MQClientInstance::::unregisterAdminExt(java.lang.String)",
      "970": "MQClientInstance::::unregisterAdminExt(java.lang.String)",
      "971": "MQClientInstance::::unregisterAdminExt(java.lang.String)",
      "973": "MQClientInstance::::rebalanceImmediately()",
      "974": "MQClientInstance::::rebalanceImmediately()",
      "975": "MQClientInstance::::rebalanceImmediately()",
      "977": "MQClientInstance::::doRebalance()",
      "978": "MQClientInstance::::doRebalance()",
      "979": "MQClientInstance::::doRebalance()",
      "980": "MQClientInstance::::doRebalance()",
      "981": "MQClientInstance::::doRebalance()",
      "982": "MQClientInstance::::doRebalance()",
      "983": "MQClientInstance::::doRebalance()",
      "984": "MQClientInstance::::doRebalance()",
      "985": "MQClientInstance::::doRebalance()",
      "986": "MQClientInstance::::doRebalance()",
      "987": "MQClientInstance::::doRebalance()",
      "988": "MQClientInstance::::doRebalance()",
      "990": "MQClientInstance::::selectProducer(java.lang.String)",
      "991": "MQClientInstance::::selectProducer(java.lang.String)",
      "992": "MQClientInstance::::selectProducer(java.lang.String)",
      "994": "MQClientInstance::::selectConsumer(java.lang.String)",
      "995": "MQClientInstance::::selectConsumer(java.lang.String)",
      "996": "MQClientInstance::::selectConsumer(java.lang.String)",
      "998": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "999": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1000": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1001": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1002": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1003": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1004": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1005": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1006": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1007": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1008": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1009": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1010": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1011": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1012": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1013": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1014": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1015": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1016": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1017": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1018": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1019": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1020": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1021": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1022": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1023": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1024": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1025": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1026": "MQClientInstance::::findBrokerAddressInAdmin(java.lang.String)",
      "1028": "MQClientInstance::::findBrokerAddressInPublish(java.lang.String)",
      "1029": "MQClientInstance::::findBrokerAddressInPublish(java.lang.String)",
      "1030": "MQClientInstance::::findBrokerAddressInPublish(java.lang.String)",
      "1031": "MQClientInstance::::findBrokerAddressInPublish(java.lang.String)",
      "1032": "MQClientInstance::::findBrokerAddressInPublish(java.lang.String)",
      "1033": "MQClientInstance::::findBrokerAddressInPublish(java.lang.String)",
      "1034": "MQClientInstance::::findBrokerAddressInPublish(java.lang.String)",
      "1035": "MQClientInstance::::findBrokerAddressInPublish(java.lang.String)",
      "1037": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1038": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1039": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1040": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1041": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1042": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1043": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1044": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1045": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1046": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1047": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1048": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1049": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1050": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1051": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1052": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1053": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1054": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1055": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1056": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1057": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1058": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1059": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1060": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1061": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1062": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1063": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1064": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1065": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1066": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1067": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1068": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1069": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1070": "MQClientInstance::::findBrokerAddressInSubscribe(java.lang.String,long,boolean)",
      "1072": "MQClientInstance::::findBrokerVersion(java.lang.String,java.lang.String)",
      "1073": "MQClientInstance::::findBrokerVersion(java.lang.String,java.lang.String)",
      "1074": "MQClientInstance::::findBrokerVersion(java.lang.String,java.lang.String)",
      "1075": "MQClientInstance::::findBrokerVersion(java.lang.String,java.lang.String)",
      "1076": "MQClientInstance::::findBrokerVersion(java.lang.String,java.lang.String)",
      "1077": "MQClientInstance::::findBrokerVersion(java.lang.String,java.lang.String)",
      "1078": "MQClientInstance::::findBrokerVersion(java.lang.String,java.lang.String)",
      "1079": "MQClientInstance::::findBrokerVersion(java.lang.String,java.lang.String)",
      "1080": "MQClientInstance::::findBrokerVersion(java.lang.String,java.lang.String)",
      "1082": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1083": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1084": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1085": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1086": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1087": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1088": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1089": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1090": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1091": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1092": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1093": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1094": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1095": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1096": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1097": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1098": "MQClientInstance::::findConsumerIdList(java.lang.String,java.lang.String)",
      "1100": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1101": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1102": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1103": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1104": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1105": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1106": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1107": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1108": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1109": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1110": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1111": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1112": "MQClientInstance::::findBrokerAddrByTopic(java.lang.String)",
      "1162": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1163": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1164": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1165": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1166": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1167": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1168": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1169": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1170": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1171": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1172": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1173": "MQClientInstance::::getConsumerStatus(java.lang.String,java.lang.String)",
      "1175": "MQClientInstance::::getAnExistTopicRouteData(java.lang.String)",
      "1176": "MQClientInstance::::getAnExistTopicRouteData(java.lang.String)",
      "1177": "MQClientInstance::::getAnExistTopicRouteData(java.lang.String)",
      "1179": "MQClientInstance::::getMQClientAPIImpl()",
      "1180": "MQClientInstance::::getMQClientAPIImpl()",
      "1181": "MQClientInstance::::getMQClientAPIImpl()",
      "1183": "MQClientInstance::::getMQAdminImpl()",
      "1184": "MQClientInstance::::getMQAdminImpl()",
      "1185": "MQClientInstance::::getMQAdminImpl()",
      "1187": "MQClientInstance::::getBootTimestamp()",
      "1188": "MQClientInstance::::getBootTimestamp()",
      "1189": "MQClientInstance::::getBootTimestamp()",
      "1191": "MQClientInstance::::getScheduledExecutorService()",
      "1192": "MQClientInstance::::getScheduledExecutorService()",
      "1193": "MQClientInstance::::getScheduledExecutorService()",
      "1195": "MQClientInstance::::getPullMessageService()",
      "1196": "MQClientInstance::::getPullMessageService()",
      "1197": "MQClientInstance::::getPullMessageService()",
      "1199": "MQClientInstance::::getDefaultMQProducer()",
      "1200": "MQClientInstance::::getDefaultMQProducer()",
      "1201": "MQClientInstance::::getDefaultMQProducer()",
      "1203": "MQClientInstance::::getTopicRouteTable()",
      "1204": "MQClientInstance::::getTopicRouteTable()",
      "1205": "MQClientInstance::::getTopicRouteTable()",
      "1221": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1222": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1223": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1224": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1225": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1226": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1227": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1228": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1229": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1230": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1231": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1232": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1233": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1234": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1235": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1236": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1237": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1238": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1239": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1240": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1241": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1242": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1243": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1244": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1245": "MQClientInstance::::consumerRunningInfo(java.lang.String)",
      "1247": "MQClientInstance::::getConsumerStatsManager()",
      "1248": "MQClientInstance::::getConsumerStatsManager()",
      "1249": "MQClientInstance::::getConsumerStatsManager()",
      "1251": "MQClientInstance::::getNettyClientConfig()",
      "1252": "MQClientInstance::::getNettyClientConfig()",
      "1253": "MQClientInstance::::getNettyClientConfig()",
      "1255": "MQClientInstance::::getClientConfig()",
      "1256": "MQClientInstance::::getClientConfig()",
      "1257": "MQClientInstance::::getClientConfig()"
    },
    "test_reverse_method_lines_dic": {
      "56": "MQClientInstanceTest::::init()",
      "57": "MQClientInstanceTest::::init()",
      "58": "MQClientInstanceTest::::init()",
      "59": "MQClientInstanceTest::::init()",
      "61": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "62": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "63": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "64": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "65": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "66": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "67": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "68": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "69": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "70": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "71": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "72": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "73": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "74": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "75": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "76": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "77": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "78": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "79": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "80": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "81": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "82": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "83": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "84": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "85": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "86": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "87": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "88": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "89": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "90": "MQClientInstanceTest::::testTopicRouteData2TopicPublishInfo()",
      "92": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "93": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "94": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "95": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "96": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "97": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "98": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "99": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "100": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "101": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "102": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "103": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "104": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "105": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "106": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "107": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "108": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "109": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "110": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "111": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "112": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "113": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "114": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "115": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "116": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "117": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "118": "MQClientInstanceTest::::testFindBrokerAddressInSubscribe()",
      "120": "MQClientInstanceTest::::testRegisterProducer()",
      "121": "MQClientInstanceTest::::testRegisterProducer()",
      "122": "MQClientInstanceTest::::testRegisterProducer()",
      "123": "MQClientInstanceTest::::testRegisterProducer()",
      "124": "MQClientInstanceTest::::testRegisterProducer()",
      "125": "MQClientInstanceTest::::testRegisterProducer()",
      "126": "MQClientInstanceTest::::testRegisterProducer()",
      "127": "MQClientInstanceTest::::testRegisterProducer()",
      "128": "MQClientInstanceTest::::testRegisterProducer()",
      "129": "MQClientInstanceTest::::testRegisterProducer()",
      "130": "MQClientInstanceTest::::testRegisterProducer()",
      "131": "MQClientInstanceTest::::testRegisterProducer()",
      "133": "MQClientInstanceTest::::testRegisterConsumer()",
      "134": "MQClientInstanceTest::::testRegisterConsumer()",
      "135": "MQClientInstanceTest::::testRegisterConsumer()",
      "136": "MQClientInstanceTest::::testRegisterConsumer()",
      "137": "MQClientInstanceTest::::testRegisterConsumer()",
      "138": "MQClientInstanceTest::::testRegisterConsumer()",
      "139": "MQClientInstanceTest::::testRegisterConsumer()",
      "140": "MQClientInstanceTest::::testRegisterConsumer()",
      "141": "MQClientInstanceTest::::testRegisterConsumer()",
      "142": "MQClientInstanceTest::::testRegisterConsumer()",
      "143": "MQClientInstanceTest::::testRegisterConsumer()",
      "144": "MQClientInstanceTest::::testRegisterConsumer()",
      "147": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "148": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "149": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "150": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "151": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "152": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "153": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "154": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "155": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "156": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "157": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "158": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "159": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "160": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "161": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "162": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "163": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "164": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "165": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "166": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "167": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "168": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "169": "MQClientInstanceTest::::testConsumerRunningInfoWhenConsumersIsEmptyOrNot()",
      "171": "MQClientInstanceTest::::testRegisterAdminExt()",
      "172": "MQClientInstanceTest::::testRegisterAdminExt()",
      "173": "MQClientInstanceTest::::testRegisterAdminExt()",
      "174": "MQClientInstanceTest::::testRegisterAdminExt()",
      "175": "MQClientInstanceTest::::testRegisterAdminExt()",
      "176": "MQClientInstanceTest::::testRegisterAdminExt()",
      "177": "MQClientInstanceTest::::testRegisterAdminExt()",
      "178": "MQClientInstanceTest::::testRegisterAdminExt()",
      "179": "MQClientInstanceTest::::testRegisterAdminExt()",
      "180": "MQClientInstanceTest::::testRegisterAdminExt()",
      "181": "MQClientInstanceTest::::testRegisterAdminExt()",
      "182": "MQClientInstanceTest::::testRegisterAdminExt()"
    },
    "tests": [
      {
        "test_lines": [
          61,
          90
        ],
        "covered_lines": [
          89,
          93,
          94,
          95,
          96,
          100,
          101,
          102,
          103,
          105,
          107,
          110,
          118,
          119,
          120,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          135,
          140,
          142,
          144,
          146,
          148,
          149,
          151,
          153,
          154,
          157,
          158,
          161,
          162,
          163,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          188,
          192,
          196,
          197,
          198,
          201,
          203,
          206
        ]
      },
      {
        "test_lines": [
          92,
          118
        ],
        "covered_lines": [
          89,
          93,
          94,
          95,
          96,
          100,
          101,
          102,
          103,
          105,
          107,
          110,
          118,
          119,
          120,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          135,
          140,
          142,
          144,
          146,
          148,
          149,
          151,
          153,
          154,
          157,
          158,
          1042,
          1043,
          1044,
          1046,
          1047,
          1048,
          1049,
          1050,
          1052,
          1053,
          1054,
          1057,
          1065,
          1066,
          1073,
          1079
        ]
      },
      {
        "test_lines": [
          120,
          131
        ],
        "covered_lines": [
          89,
          93,
          94,
          95,
          96,
          100,
          101,
          102,
          103,
          105,
          107,
          110,
          118,
          119,
          120,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          135,
          140,
          142,
          144,
          146,
          148,
          149,
          151,
          153,
          154,
          157,
          158,
          893,
          895,
          899,
          900,
          906,
          907,
          910,
          911,
          934,
          937,
          941,
          942,
          943,
          944,
          947,
          951,
          952,
          953
        ]
      },
      {
        "test_lines": [
          133,
          144
        ],
        "covered_lines": [
          89,
          93,
          94,
          95,
          96,
          100,
          101,
          102,
          103,
          105,
          107,
          110,
          118,
          119,
          120,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          135,
          140,
          142,
          144,
          146,
          148,
          149,
          151,
          153,
          154,
          157,
          158,
          873,
          877,
          878,
          879,
          880,
          883,
          887,
          888,
          889,
          893,
          895,
          899,
          900,
          906,
          907,
          910,
          911,
          934
        ]
      },
      {
        "test_lines": [
          147,
          169
        ],
        "covered_lines": [
          89,
          93,
          94,
          95,
          96,
          100,
          101,
          102,
          103,
          105,
          107,
          110,
          118,
          119,
          120,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          135,
          140,
          142,
          144,
          146,
          148,
          149,
          151,
          153,
          154,
          157,
          158,
          873,
          877,
          878,
          883,
          887,
          888,
          889,
          893,
          895,
          899,
          900,
          906,
          907,
          910,
          911,
          934,
          1222,
          1223,
          1224,
          1227,
          1229,
          1231,
          1232,
          1238,
          1239,
          1240,
          1241,
          1242,
          1244
        ]
      },
      {
        "test_lines": [
          171,
          182
        ],
        "covered_lines": [
          89,
          93,
          94,
          95,
          96,
          100,
          101,
          102,
          103,
          105,
          107,
          110,
          118,
          119,
          120,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          135,
          140,
          142,
          144,
          146,
          148,
          149,
          151,
          153,
          154,
          157,
          158,
          956,
          960,
          961,
          962,
          963,
          966,
          970,
          971
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/client/src/main/java/org/apache/rocketmq/client/trace/TraceView.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.client.trace;\n",
      "\n",
      "\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "public class TraceView {\n",
      "\n",
      "    private String msgId;\n",
      "    private String tags;\n",
      "    private String keys;\n",
      "    private String storeHost;\n",
      "    private String clientHost;//\u8ddf\u8e2a\u7c7b\u578b\u4e3aPUB\u65f6\u4e3a\u5b58\u50a8\u8be5\u6d88\u606f\u7684Broker\u670d\u52a1\u5668IP\uff1b\u8ddf\u8e2a\u7c7b\u578b\u4e3asubBefore\u3001subAfter\u65f6\u4e3a\u6d88\u8d39\u8005IP\u3002\n",
      "    private int costTime;\n",
      "    private String msgType;\n",
      "    private String offSetMsgId;\n",
      "    private long timeStamp;\n",
      "    private long bornTime;\n",
      "    private String topic;\n",
      "    private String groupName;\n",
      "    private String status;\n",
      "\n",
      "    public static List<TraceView> decodeFromTraceTransData(String key, String messageBody) {\n",
      "        List<TraceView> messageTraceViewList = new ArrayList<TraceView>();\n",
      "        if (messageBody == null || messageBody.length() <= 0) {\n",
      "            return messageTraceViewList;\n",
      "        }\n",
      "\n",
      "        List<TraceContext> traceContextList = TraceDataEncoder.decoderFromTraceDataString(messageBody);\n",
      "\n",
      "        for (TraceContext context : traceContextList) {\n",
      "            TraceView messageTraceView = new TraceView();\n",
      "            TraceBean traceBean = context.getTraceBeans().get(0);\n",
      "            if (!traceBean.getMsgId().equals(key)) {\n",
      "                continue;\n",
      "            }\n",
      "            messageTraceView.setCostTime(context.getCostTime());\n",
      "            messageTraceView.setGroupName(context.getGroupName());\n",
      "            if (context.isSuccess()) {\n",
      "                messageTraceView.setStatus(\"success\");\n",
      "            }\n",
      "            else {\n",
      "                messageTraceView.setStatus(\"failed\");\n",
      "            }\n",
      "            messageTraceView.setKeys(traceBean.getKeys());\n",
      "            messageTraceView.setMsgId(traceBean.getMsgId());\n",
      "            messageTraceView.setTags(traceBean.getTags());\n",
      "            messageTraceView.setTopic(traceBean.getTopic());\n",
      "            messageTraceView.setMsgType(context.getTraceType().name());\n",
      "            messageTraceView.setOffSetMsgId(traceBean.getOffsetMsgId());\n",
      "            messageTraceView.setTimeStamp(context.getTimeStamp());\n",
      "            messageTraceView.setStoreHost(traceBean.getStoreHost());\n",
      "            messageTraceView.setClientHost(traceBean.getClientHost());\n",
      "            messageTraceViewList.add(messageTraceView);\n",
      "        }\n",
      "        return messageTraceViewList;\n",
      "    }\n",
      "\n",
      "    public String getMsgId() {\n",
      "        return msgId;\n",
      "    }\n",
      "\n",
      "    public void setMsgId(String msgId) {\n",
      "        this.msgId = msgId;\n",
      "    }\n",
      "\n",
      "    public String getTags() {\n",
      "        return tags;\n",
      "    }\n",
      "\n",
      "    public void setTags(String tags) {\n",
      "        this.tags = tags;\n",
      "    }\n",
      "\n",
      "    public String getKeys() {\n",
      "        return keys;\n",
      "    }\n",
      "\n",
      "    public void setKeys(String keys) {\n",
      "        this.keys = keys;\n",
      "    }\n",
      "\n",
      "    public String getStoreHost() {\n",
      "        return storeHost;\n",
      "    }\n",
      "\n",
      "    public void setStoreHost(String storeHost) {\n",
      "        this.storeHost = storeHost;\n",
      "    }\n",
      "\n",
      "    public String getClientHost() {\n",
      "        return clientHost;\n",
      "    }\n",
      "\n",
      "    public void setClientHost(String clientHost) {\n",
      "        this.clientHost = clientHost;\n",
      "    }\n",
      "\n",
      "    public int getCostTime() {\n",
      "        return costTime;\n",
      "    }\n",
      "\n",
      "    public void setCostTime(int costTime) {\n",
      "        this.costTime = costTime;\n",
      "    }\n",
      "\n",
      "    public String getMsgType() {\n",
      "        return msgType;\n",
      "    }\n",
      "\n",
      "    public void setMsgType(String msgType) {\n",
      "        this.msgType = msgType;\n",
      "    }\n",
      "\n",
      "    public String getOffSetMsgId() {\n",
      "        return offSetMsgId;\n",
      "    }\n",
      "\n",
      "    public void setOffSetMsgId(String offSetMsgId) {\n",
      "        this.offSetMsgId = offSetMsgId;\n",
      "    }\n",
      "\n",
      "    public long getTimeStamp() {\n",
      "        return timeStamp;\n",
      "    }\n",
      "\n",
      "    public void setTimeStamp(long timeStamp) {\n",
      "        this.timeStamp = timeStamp;\n",
      "    }\n",
      "\n",
      "    public long getBornTime() {\n",
      "        return bornTime;\n",
      "    }\n",
      "\n",
      "    public void setBornTime(long bornTime) {\n",
      "        this.bornTime = bornTime;\n",
      "    }\n",
      "\n",
      "    public String getTopic() {\n",
      "        return topic;\n",
      "    }\n",
      "\n",
      "    public void setTopic(String topic) {\n",
      "        this.topic = topic;\n",
      "    }\n",
      "\n",
      "    public String getGroupName() {\n",
      "        return groupName;\n",
      "    }\n",
      "\n",
      "    public void setGroupName(String groupName) {\n",
      "        this.groupName = groupName;\n",
      "    }\n",
      "\n",
      "    public String getStatus() {\n",
      "        return status;\n",
      "    }\n",
      "\n",
      "    public void setStatus(String status) {\n",
      "        this.status = status;\n",
      "    }\n",
      "}"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.client.trace;\n",
      "\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.message.MessageType;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "public class TraceViewTest {\n",
      "\n",
      "    @Test\n",
      "    public void testDecodeFromTraceTransData() {\n",
      "        String messageBody = new StringBuilder()\n",
      "                .append(\"Pub\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(System.currentTimeMillis()).append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(\"DefaultRegion\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(\"PID-test\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(\"topic-test\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(\"AC1415116D1418B4AAC217FE1B4E0000\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(\"Tags\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(\"Keys\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(\"127.0.0.1:10911\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(26).append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(245).append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(MessageType.Normal_Msg.ordinal()).append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(\"0A9A002600002A9F0000000000002329\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(true).append(TraceConstants.CONTENT_SPLITOR)\n",
      "                .append(UtilAll.ipToIPv4Str(UtilAll.getIP())).append(TraceConstants.FIELD_SPLITOR)\n",
      "                .toString();\n",
      "        String key = \"AC1415116D1418B4AAC217FE1B4E0000\";\n",
      "        List<TraceView> traceViews = TraceView.decodeFromTraceTransData(key, messageBody);\n",
      "        Assert.assertEquals(traceViews.size(), 1);\n",
      "        Assert.assertEquals(traceViews.get(0).getMsgId(), key);\n",
      "\n",
      "        key = \"AD4233434334AAC217FEFFD0000\";\n",
      "        traceViews = TraceView.decodeFromTraceTransData(key, messageBody);\n",
      "        Assert.assertEquals(traceViews.size(), 0);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)": [
        41,
        75
      ],
      "TraceView::::getMsgId()": [
        77,
        79
      ],
      "TraceView::::setMsgId(java.lang.String)": [
        81,
        83
      ],
      "TraceView::::getTags()": [
        85,
        87
      ],
      "TraceView::::setTags(java.lang.String)": [
        89,
        91
      ],
      "TraceView::::getKeys()": [
        93,
        95
      ],
      "TraceView::::setKeys(java.lang.String)": [
        97,
        99
      ],
      "TraceView::::getStoreHost()": [
        101,
        103
      ],
      "TraceView::::setStoreHost(java.lang.String)": [
        105,
        107
      ],
      "TraceView::::getClientHost()": [
        109,
        111
      ],
      "TraceView::::setClientHost(java.lang.String)": [
        113,
        115
      ],
      "TraceView::::getCostTime()": [
        117,
        119
      ],
      "TraceView::::setCostTime(int)": [
        121,
        123
      ],
      "TraceView::::getMsgType()": [
        125,
        127
      ],
      "TraceView::::setMsgType(java.lang.String)": [
        129,
        131
      ],
      "TraceView::::getOffSetMsgId()": [
        133,
        135
      ],
      "TraceView::::setOffSetMsgId(java.lang.String)": [
        137,
        139
      ],
      "TraceView::::getTimeStamp()": [
        141,
        143
      ],
      "TraceView::::setTimeStamp(long)": [
        145,
        147
      ],
      "TraceView::::getBornTime()": [
        149,
        151
      ],
      "TraceView::::setBornTime(long)": [
        153,
        155
      ],
      "TraceView::::getTopic()": [
        157,
        159
      ],
      "TraceView::::setTopic(java.lang.String)": [
        161,
        163
      ],
      "TraceView::::getGroupName()": [
        165,
        167
      ],
      "TraceView::::setGroupName(java.lang.String)": [
        169,
        171
      ],
      "TraceView::::getStatus()": [
        173,
        175
      ],
      "TraceView::::setStatus(java.lang.String)": [
        177,
        179
      ]
    },
    "test_method_lines_dic": {
      "TraceViewTest::::testDecodeFromTraceTransData()": [
        29,
        56
      ]
    },
    "reverse_method_lines_dic": {
      "41": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "42": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "43": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "44": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "45": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "46": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "47": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "48": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "49": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "50": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "51": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "52": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "53": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "54": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "55": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "56": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "57": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "58": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "59": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "60": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "61": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "62": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "63": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "64": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "65": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "66": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "67": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "68": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "69": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "70": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "71": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "72": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "73": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "74": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "75": "TraceView::::decodeFromTraceTransData(java.lang.String,java.lang.String)",
      "77": "TraceView::::getMsgId()",
      "78": "TraceView::::getMsgId()",
      "79": "TraceView::::getMsgId()",
      "81": "TraceView::::setMsgId(java.lang.String)",
      "82": "TraceView::::setMsgId(java.lang.String)",
      "83": "TraceView::::setMsgId(java.lang.String)",
      "85": "TraceView::::getTags()",
      "86": "TraceView::::getTags()",
      "87": "TraceView::::getTags()",
      "89": "TraceView::::setTags(java.lang.String)",
      "90": "TraceView::::setTags(java.lang.String)",
      "91": "TraceView::::setTags(java.lang.String)",
      "93": "TraceView::::getKeys()",
      "94": "TraceView::::getKeys()",
      "95": "TraceView::::getKeys()",
      "97": "TraceView::::setKeys(java.lang.String)",
      "98": "TraceView::::setKeys(java.lang.String)",
      "99": "TraceView::::setKeys(java.lang.String)",
      "101": "TraceView::::getStoreHost()",
      "102": "TraceView::::getStoreHost()",
      "103": "TraceView::::getStoreHost()",
      "105": "TraceView::::setStoreHost(java.lang.String)",
      "106": "TraceView::::setStoreHost(java.lang.String)",
      "107": "TraceView::::setStoreHost(java.lang.String)",
      "109": "TraceView::::getClientHost()",
      "110": "TraceView::::getClientHost()",
      "111": "TraceView::::getClientHost()",
      "113": "TraceView::::setClientHost(java.lang.String)",
      "114": "TraceView::::setClientHost(java.lang.String)",
      "115": "TraceView::::setClientHost(java.lang.String)",
      "117": "TraceView::::getCostTime()",
      "118": "TraceView::::getCostTime()",
      "119": "TraceView::::getCostTime()",
      "121": "TraceView::::setCostTime(int)",
      "122": "TraceView::::setCostTime(int)",
      "123": "TraceView::::setCostTime(int)",
      "125": "TraceView::::getMsgType()",
      "126": "TraceView::::getMsgType()",
      "127": "TraceView::::getMsgType()",
      "129": "TraceView::::setMsgType(java.lang.String)",
      "130": "TraceView::::setMsgType(java.lang.String)",
      "131": "TraceView::::setMsgType(java.lang.String)",
      "133": "TraceView::::getOffSetMsgId()",
      "134": "TraceView::::getOffSetMsgId()",
      "135": "TraceView::::getOffSetMsgId()",
      "137": "TraceView::::setOffSetMsgId(java.lang.String)",
      "138": "TraceView::::setOffSetMsgId(java.lang.String)",
      "139": "TraceView::::setOffSetMsgId(java.lang.String)",
      "141": "TraceView::::getTimeStamp()",
      "142": "TraceView::::getTimeStamp()",
      "143": "TraceView::::getTimeStamp()",
      "145": "TraceView::::setTimeStamp(long)",
      "146": "TraceView::::setTimeStamp(long)",
      "147": "TraceView::::setTimeStamp(long)",
      "149": "TraceView::::getBornTime()",
      "150": "TraceView::::getBornTime()",
      "151": "TraceView::::getBornTime()",
      "153": "TraceView::::setBornTime(long)",
      "154": "TraceView::::setBornTime(long)",
      "155": "TraceView::::setBornTime(long)",
      "157": "TraceView::::getTopic()",
      "158": "TraceView::::getTopic()",
      "159": "TraceView::::getTopic()",
      "161": "TraceView::::setTopic(java.lang.String)",
      "162": "TraceView::::setTopic(java.lang.String)",
      "163": "TraceView::::setTopic(java.lang.String)",
      "165": "TraceView::::getGroupName()",
      "166": "TraceView::::getGroupName()",
      "167": "TraceView::::getGroupName()",
      "169": "TraceView::::setGroupName(java.lang.String)",
      "170": "TraceView::::setGroupName(java.lang.String)",
      "171": "TraceView::::setGroupName(java.lang.String)",
      "173": "TraceView::::getStatus()",
      "174": "TraceView::::getStatus()",
      "175": "TraceView::::getStatus()",
      "177": "TraceView::::setStatus(java.lang.String)",
      "178": "TraceView::::setStatus(java.lang.String)",
      "179": "TraceView::::setStatus(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "29": "TraceViewTest::::testDecodeFromTraceTransData()",
      "30": "TraceViewTest::::testDecodeFromTraceTransData()",
      "31": "TraceViewTest::::testDecodeFromTraceTransData()",
      "32": "TraceViewTest::::testDecodeFromTraceTransData()",
      "33": "TraceViewTest::::testDecodeFromTraceTransData()",
      "34": "TraceViewTest::::testDecodeFromTraceTransData()",
      "35": "TraceViewTest::::testDecodeFromTraceTransData()",
      "36": "TraceViewTest::::testDecodeFromTraceTransData()",
      "37": "TraceViewTest::::testDecodeFromTraceTransData()",
      "38": "TraceViewTest::::testDecodeFromTraceTransData()",
      "39": "TraceViewTest::::testDecodeFromTraceTransData()",
      "40": "TraceViewTest::::testDecodeFromTraceTransData()",
      "41": "TraceViewTest::::testDecodeFromTraceTransData()",
      "42": "TraceViewTest::::testDecodeFromTraceTransData()",
      "43": "TraceViewTest::::testDecodeFromTraceTransData()",
      "44": "TraceViewTest::::testDecodeFromTraceTransData()",
      "45": "TraceViewTest::::testDecodeFromTraceTransData()",
      "46": "TraceViewTest::::testDecodeFromTraceTransData()",
      "47": "TraceViewTest::::testDecodeFromTraceTransData()",
      "48": "TraceViewTest::::testDecodeFromTraceTransData()",
      "49": "TraceViewTest::::testDecodeFromTraceTransData()",
      "50": "TraceViewTest::::testDecodeFromTraceTransData()",
      "51": "TraceViewTest::::testDecodeFromTraceTransData()",
      "52": "TraceViewTest::::testDecodeFromTraceTransData()",
      "53": "TraceViewTest::::testDecodeFromTraceTransData()",
      "54": "TraceViewTest::::testDecodeFromTraceTransData()",
      "55": "TraceViewTest::::testDecodeFromTraceTransData()",
      "56": "TraceViewTest::::testDecodeFromTraceTransData()"
    },
    "tests": [
      {
        "test_lines": [
          29,
          56
        ],
        "covered_lines": [
          25,
          42,
          43,
          47,
          49,
          50,
          51,
          52,
          53,
          55,
          56,
          57,
          58,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          78,
          82,
          83,
          90,
          91,
          98,
          99,
          106,
          107,
          114,
          115,
          122,
          123,
          130,
          131,
          138,
          139,
          146,
          147,
          162,
          163,
          170,
          171,
          178,
          179
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/client/src/main/java/org/apache/rocketmq/client/trace/TraceDataEncoder.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.client.trace;\n",
      "\n",
      "import org.apache.rocketmq.common.message.MessageType;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * Encode/decode for Trace Data\n",
      " */\n",
      "public class TraceDataEncoder {\n",
      "\n",
      "    /**\n",
      "     * Resolving traceContext list From trace data String\n",
      "     *\n",
      "     * @param traceData\n",
      "     * @return\n",
      "     */\n",
      "    public static List<TraceContext> decoderFromTraceDataString(String traceData) {\n",
      "        List<TraceContext> resList = new ArrayList<TraceContext>();\n",
      "        if (traceData == null || traceData.length() <= 0) {\n",
      "            return resList;\n",
      "        }\n",
      "        String[] contextList = traceData.split(String.valueOf(TraceConstants.FIELD_SPLITOR));\n",
      "        for (String context : contextList) {\n",
      "            String[] line = context.split(String.valueOf(TraceConstants.CONTENT_SPLITOR));\n",
      "            if (line[0].equals(TraceType.Pub.name())) {\n",
      "                TraceContext pubContext = new TraceContext();\n",
      "                pubContext.setTraceType(TraceType.Pub);\n",
      "                pubContext.setTimeStamp(Long.parseLong(line[1]));\n",
      "                pubContext.setRegionId(line[2]);\n",
      "                pubContext.setGroupName(line[3]);\n",
      "                TraceBean bean = new TraceBean();\n",
      "                bean.setTopic(line[4]);\n",
      "                bean.setMsgId(line[5]);\n",
      "                bean.setTags(line[6]);\n",
      "                bean.setKeys(line[7]);\n",
      "                bean.setStoreHost(line[8]);\n",
      "                bean.setBodyLength(Integer.parseInt(line[9]));\n",
      "                pubContext.setCostTime(Integer.parseInt(line[10]));\n",
      "                bean.setMsgType(MessageType.values()[Integer.parseInt(line[11])]);\n",
      "\n",
      "                if (line.length == 13) {\n",
      "                    pubContext.setSuccess(Boolean.parseBoolean(line[12]));\n",
      "                } else if (line.length == 14) {\n",
      "                    bean.setOffsetMsgId(line[12]);\n",
      "                    pubContext.setSuccess(Boolean.parseBoolean(line[13]));\n",
      "                }\n",
      "\n",
      "                // compatible with the old version\n",
      "                if (line.length >= 15) {\n",
      "                    bean.setOffsetMsgId(line[12]);\n",
      "                    pubContext.setSuccess(Boolean.parseBoolean(line[13]));\n",
      "                    bean.setClientHost(line[14]);\n",
      "                }\n",
      "\n",
      "                pubContext.setTraceBeans(new ArrayList<TraceBean>(1));\n",
      "                pubContext.getTraceBeans().add(bean);\n",
      "                resList.add(pubContext);\n",
      "            } else if (line[0].equals(TraceType.SubBefore.name())) {\n",
      "                TraceContext subBeforeContext = new TraceContext();\n",
      "                subBeforeContext.setTraceType(TraceType.SubBefore);\n",
      "                subBeforeContext.setTimeStamp(Long.parseLong(line[1]));\n",
      "                subBeforeContext.setRegionId(line[2]);\n",
      "                subBeforeContext.setGroupName(line[3]);\n",
      "                subBeforeContext.setRequestId(line[4]);\n",
      "                TraceBean bean = new TraceBean();\n",
      "                bean.setMsgId(line[5]);\n",
      "                bean.setRetryTimes(Integer.parseInt(line[6]));\n",
      "                bean.setKeys(line[7]);\n",
      "                bean.setClientHost(line[8]);\n",
      "                subBeforeContext.setTraceBeans(new ArrayList<TraceBean>(1));\n",
      "                subBeforeContext.getTraceBeans().add(bean);\n",
      "                resList.add(subBeforeContext);\n",
      "            } else if (line[0].equals(TraceType.SubAfter.name())) {\n",
      "                TraceContext subAfterContext = new TraceContext();\n",
      "                subAfterContext.setTraceType(TraceType.SubAfter);\n",
      "                subAfterContext.setRequestId(line[1]);\n",
      "                TraceBean bean = new TraceBean();\n",
      "                bean.setMsgId(line[2]);\n",
      "                bean.setKeys(line[5]);\n",
      "                subAfterContext.setTraceBeans(new ArrayList<TraceBean>(1));\n",
      "                subAfterContext.getTraceBeans().add(bean);\n",
      "                subAfterContext.setCostTime(Integer.parseInt(line[3]));\n",
      "                subAfterContext.setSuccess(Boolean.parseBoolean(line[4]));\n",
      "                if (line.length >= 7) {\n",
      "                    // add the context type\n",
      "                    subAfterContext.setContextCode(Integer.parseInt(line[6]));\n",
      "                }\n",
      "                // compatible with the old version\n",
      "                if (line.length >= 9) {\n",
      "                    subAfterContext.setTimeStamp(Long.parseLong(line[7]));\n",
      "                    subAfterContext.setGroupName(line[8]);\n",
      "                }\n",
      "                resList.add(subAfterContext);\n",
      "            }\n",
      "        }\n",
      "        return resList;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Encoding the trace context into data strings and keyset sets\n",
      "     *\n",
      "     * @param ctx\n",
      "     * @return\n",
      "     */\n",
      "    public static TraceTransferBean encoderFromContextBean(TraceContext ctx) {\n",
      "        if (ctx == null) {\n",
      "            return null;\n",
      "        }\n",
      "        //build message trace of the transfering entity content bean\n",
      "        TraceTransferBean transferBean = new TraceTransferBean();\n",
      "        StringBuilder sb = new StringBuilder(256);\n",
      "        switch (ctx.getTraceType()) {\n",
      "            case Pub: {\n",
      "                TraceBean bean = ctx.getTraceBeans().get(0);\n",
      "                //append the content of context and traceBean to transferBean's TransData\n",
      "                sb.append(ctx.getTraceType()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(ctx.getTimeStamp()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(ctx.getRegionId()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(ctx.getGroupName()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(bean.getTopic()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(bean.getMsgId()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(bean.getTags()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(bean.getKeys()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(bean.getStoreHost()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(bean.getBodyLength()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(ctx.getCostTime()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(bean.getMsgType().ordinal()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(bean.getOffsetMsgId()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(ctx.isSuccess()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                    .append(bean.getClientHost()).append(TraceConstants.FIELD_SPLITOR);\n",
      "            }\n",
      "            break;\n",
      "            case SubBefore: {\n",
      "                for (TraceBean bean : ctx.getTraceBeans()) {\n",
      "                    sb.append(ctx.getTraceType()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(ctx.getTimeStamp()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(ctx.getRegionId()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(ctx.getGroupName()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(ctx.getRequestId()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(bean.getMsgId()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(bean.getRetryTimes()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(bean.getKeys()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(bean.getClientHost()).append(TraceConstants.FIELD_SPLITOR);//\n",
      "                }\n",
      "            }\n",
      "            break;\n",
      "            case SubAfter: {\n",
      "                for (TraceBean bean : ctx.getTraceBeans()) {\n",
      "                    sb.append(ctx.getTraceType()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(ctx.getRequestId()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(bean.getMsgId()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(ctx.getCostTime()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(ctx.isSuccess()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(bean.getKeys()).append(TraceConstants.CONTENT_SPLITOR)//\n",
      "                        .append(ctx.getContextCode()).append(TraceConstants.CONTENT_SPLITOR)\n",
      "                        .append(ctx.getTimeStamp()).append(TraceConstants.CONTENT_SPLITOR)\n",
      "                        .append(ctx.getGroupName()).append(TraceConstants.FIELD_SPLITOR);\n",
      "                    \n",
      "                }\n",
      "            }\n",
      "            break;\n",
      "            default:\n",
      "        }\n",
      "        transferBean.setTransData(sb.toString());\n",
      "        for (TraceBean bean : ctx.getTraceBeans()) {\n",
      "\n",
      "            transferBean.getTransKey().add(bean.getMsgId());\n",
      "            if (bean.getKeys() != null && bean.getKeys().length() > 0) {\n",
      "                transferBean.getTransKey().add(bean.getKeys());\n",
      "            }\n",
      "        }\n",
      "        return transferBean;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.client.trace;\n",
      "\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.message.MessageType;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "public class TraceDataEncoderTest {\n",
      "\n",
      "    private String traceData;\n",
      "\n",
      "    private long time;\n",
      "\n",
      "    @Before\n",
      "    public void init() {\n",
      "        time = System.currentTimeMillis();\n",
      "        traceData = new StringBuilder()\n",
      "            .append(\"Pub\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(time).append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(\"DefaultRegion\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(\"PID-test\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(\"topic-test\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(\"AC1415116D1418B4AAC217FE1B4E0000\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(\"Tags\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(\"Keys\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(\"127.0.0.1:10911\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(26).append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(245).append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(MessageType.Normal_Msg.ordinal()).append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(\"0A9A002600002A9F0000000000002329\").append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(true).append(TraceConstants.CONTENT_SPLITOR)\n",
      "            .append(UtilAll.ipToIPv4Str(UtilAll.getIP())).append(TraceConstants.FIELD_SPLITOR)\n",
      "            .toString();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testDecoderFromTraceDataString() {\n",
      "        List<TraceContext> contexts = TraceDataEncoder.decoderFromTraceDataString(traceData);\n",
      "        Assert.assertEquals(contexts.size(), 1);\n",
      "        Assert.assertEquals(contexts.get(0).getTraceType(), TraceType.Pub);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void testEncoderFromContextBean() {\n",
      "        TraceContext context = new TraceContext();\n",
      "        context.setTraceType(TraceType.Pub);\n",
      "        context.setGroupName(\"PID-test\");\n",
      "        context.setRegionId(\"DefaultRegion\");\n",
      "        context.setCostTime(245);\n",
      "        context.setSuccess(true);\n",
      "        context.setTimeStamp(time);\n",
      "        TraceBean traceBean = new TraceBean();\n",
      "        traceBean.setTopic(\"topic-test\");\n",
      "        traceBean.setKeys(\"Keys\");\n",
      "        traceBean.setTags(\"Tags\");\n",
      "        traceBean.setMsgId(\"AC1415116D1418B4AAC217FE1B4E0000\");\n",
      "        traceBean.setOffsetMsgId(\"0A9A002600002A9F0000000000002329\");\n",
      "        traceBean.setStoreHost(\"127.0.0.1:10911\");\n",
      "        traceBean.setStoreTime(time);\n",
      "        traceBean.setMsgType(MessageType.Normal_Msg);\n",
      "        traceBean.setBodyLength(26);\n",
      "        List<TraceBean> traceBeans = new ArrayList<TraceBean>();\n",
      "        traceBeans.add(traceBean);\n",
      "        context.setTraceBeans(traceBeans);\n",
      "        TraceTransferBean traceTransferBean = TraceDataEncoder.encoderFromContextBean(context);\n",
      "\n",
      "        Assert.assertEquals(traceTransferBean.getTransData(), traceData);\n",
      "        Assert.assertEquals(traceTransferBean.getTransKey().size(), 2);\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)": [
        35,
        115
      ],
      "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)": [
        123,
        191
      ]
    },
    "test_method_lines_dic": {
      "TraceDataEncoderTest::::init()": [
        35,
        55
      ],
      "TraceDataEncoderTest::::testDecoderFromTraceDataString()": [
        57,
        62
      ],
      "TraceDataEncoderTest::::testEncoderFromContextBean()": [
        65,
        91
      ]
    },
    "reverse_method_lines_dic": {
      "35": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "36": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "37": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "38": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "39": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "40": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "41": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "42": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "43": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "44": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "45": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "46": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "47": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "48": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "49": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "50": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "51": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "52": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "53": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "54": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "55": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "56": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "57": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "58": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "59": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "60": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "61": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "62": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "63": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "64": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "65": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "66": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "67": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "68": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "69": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "70": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "71": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "72": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "73": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "74": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "75": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "76": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "77": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "78": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "79": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "80": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "81": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "82": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "83": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "84": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "85": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "86": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "87": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "88": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "89": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "90": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "91": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "92": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "93": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "94": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "95": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "96": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "97": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "98": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "99": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "100": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "101": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "102": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "103": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "104": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "105": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "106": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "107": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "108": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "109": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "110": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "111": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "112": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "113": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "114": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "115": "TraceDataEncoder::::decoderFromTraceDataString(java.lang.String)",
      "123": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "124": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "125": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "126": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "127": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "128": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "129": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "130": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "131": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "132": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "133": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "134": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "135": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "136": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "137": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "138": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "139": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "140": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "141": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "142": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "143": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "144": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "145": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "146": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "147": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "148": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "149": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "150": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "151": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "152": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "153": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "154": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "155": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "156": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "157": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "158": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "159": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "160": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "161": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "162": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "163": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "164": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "165": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "166": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "167": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "168": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "169": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "170": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "171": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "172": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "173": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "174": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "175": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "176": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "177": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "178": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "179": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "180": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "181": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "182": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "183": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "184": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "185": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "186": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "187": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "188": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "189": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "190": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)",
      "191": "TraceDataEncoder::::encoderFromContextBean(org.apache.rocketmq.client.trace.TraceContext)"
    },
    "test_reverse_method_lines_dic": {
      "35": "TraceDataEncoderTest::::init()",
      "36": "TraceDataEncoderTest::::init()",
      "37": "TraceDataEncoderTest::::init()",
      "38": "TraceDataEncoderTest::::init()",
      "39": "TraceDataEncoderTest::::init()",
      "40": "TraceDataEncoderTest::::init()",
      "41": "TraceDataEncoderTest::::init()",
      "42": "TraceDataEncoderTest::::init()",
      "43": "TraceDataEncoderTest::::init()",
      "44": "TraceDataEncoderTest::::init()",
      "45": "TraceDataEncoderTest::::init()",
      "46": "TraceDataEncoderTest::::init()",
      "47": "TraceDataEncoderTest::::init()",
      "48": "TraceDataEncoderTest::::init()",
      "49": "TraceDataEncoderTest::::init()",
      "50": "TraceDataEncoderTest::::init()",
      "51": "TraceDataEncoderTest::::init()",
      "52": "TraceDataEncoderTest::::init()",
      "53": "TraceDataEncoderTest::::init()",
      "54": "TraceDataEncoderTest::::init()",
      "55": "TraceDataEncoderTest::::init()",
      "57": "TraceDataEncoderTest::::testDecoderFromTraceDataString()",
      "58": "TraceDataEncoderTest::::testDecoderFromTraceDataString()",
      "59": "TraceDataEncoderTest::::testDecoderFromTraceDataString()",
      "60": "TraceDataEncoderTest::::testDecoderFromTraceDataString()",
      "61": "TraceDataEncoderTest::::testDecoderFromTraceDataString()",
      "62": "TraceDataEncoderTest::::testDecoderFromTraceDataString()",
      "65": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "66": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "67": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "68": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "69": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "70": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "71": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "72": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "73": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "74": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "75": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "76": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "77": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "78": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "79": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "80": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "81": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "82": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "83": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "84": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "85": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "86": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "87": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "88": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "89": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "90": "TraceDataEncoderTest::::testEncoderFromContextBean()",
      "91": "TraceDataEncoderTest::::testEncoderFromContextBean()"
    },
    "tests": [
      {
        "test_lines": [
          57,
          62
        ],
        "covered_lines": [
          36,
          37,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          59,
          61,
          67,
          68,
          69,
          70,
          73,
          74,
          75,
          76,
          114
        ]
      },
      {
        "test_lines": [
          65,
          91
        ],
        "covered_lines": [
          124,
          128,
          129,
          130,
          132,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          145,
          146,
          147,
          148,
          150,
          182,
          183,
          185,
          186,
          187,
          189,
          190
        ]
      }
    ]
  }
}