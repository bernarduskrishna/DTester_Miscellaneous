{"/bernard/dataset_construction/prep/repos/RocketMQC/openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/PullConsumerImpl.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package io.openmessaging.rocketmq.consumer;\n", "\n", "import io.openmessaging.KeyValue;\n", "import io.openmessaging.Message;\n", "import io.openmessaging.OMSBuiltinKeys;\n", "import io.openmessaging.consumer.PullConsumer;\n", "import io.openmessaging.exception.OMSRuntimeException;\n", "import io.openmessaging.rocketmq.config.ClientConfig;\n", "import io.openmessaging.rocketmq.domain.ConsumeRequest;\n", "import io.openmessaging.rocketmq.utils.BeanUtils;\n", "import io.openmessaging.rocketmq.utils.OMSUtil;\n", "import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\n", "import org.apache.rocketmq.client.consumer.MQPullConsumer;\n", "import org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;\n", "import org.apache.rocketmq.client.consumer.PullResult;\n", "import org.apache.rocketmq.client.consumer.PullTaskCallback;\n", "import org.apache.rocketmq.client.consumer.PullTaskContext;\n", "import org.apache.rocketmq.client.exception.MQClientException;\n", "import org.apache.rocketmq.client.impl.consumer.ProcessQueue;\n", "import org.apache.rocketmq.client.log.ClientLogger;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.remoting.protocol.LanguageCode;\n", "\n", "public class PullConsumerImpl implements PullConsumer {\n", "    private final DefaultMQPullConsumer rocketmqPullConsumer;\n", "    private final KeyValue properties;\n", "    private boolean started = false;\n", "    private final MQPullConsumerScheduleService pullConsumerScheduleService;\n", "    private final LocalMessageCache localMessageCache;\n", "    private final ClientConfig clientConfig;\n", "\n", "    private final static InternalLogger log = ClientLogger.getLog();\n", "\n", "    public PullConsumerImpl(final KeyValue properties) {\n", "        this.properties = properties;\n", "        this.clientConfig = BeanUtils.populate(properties, ClientConfig.class);\n", "\n", "        String consumerGroup = clientConfig.getConsumerId();\n", "        if (null == consumerGroup || consumerGroup.isEmpty()) {\n", "            throw new OMSRuntimeException(\"-1\", \"Consumer Group is necessary for RocketMQ, please set it.\");\n", "        }\n", "        pullConsumerScheduleService = new MQPullConsumerScheduleService(consumerGroup);\n", "\n", "        this.rocketmqPullConsumer = pullConsumerScheduleService.getDefaultMQPullConsumer();\n", "\n", "        if (\"true\".equalsIgnoreCase(System.getenv(\"OMS_RMQ_DIRECT_NAME_SRV\"))) {\n", "            String accessPoints = clientConfig.getAccessPoints();\n", "            if (accessPoints == null || accessPoints.isEmpty()) {\n", "                throw new OMSRuntimeException(\"-1\", \"OMS AccessPoints is null or empty.\");\n", "            }\n", "            this.rocketmqPullConsumer.setNamesrvAddr(accessPoints.replace(',', ';'));\n", "        }\n", "\n", "        this.rocketmqPullConsumer.setConsumerGroup(consumerGroup);\n", "\n", "        int maxReDeliveryTimes = clientConfig.getRmqMaxRedeliveryTimes();\n", "        this.rocketmqPullConsumer.setMaxReconsumeTimes(maxReDeliveryTimes);\n", "\n", "        String consumerId = OMSUtil.buildInstanceName();\n", "        this.rocketmqPullConsumer.setInstanceName(consumerId);\n", "        properties.put(OMSBuiltinKeys.CONSUMER_ID, consumerId);\n", "\n", "        this.rocketmqPullConsumer.setLanguage(LanguageCode.OMS);\n", "\n", "        this.localMessageCache = new LocalMessageCache(this.rocketmqPullConsumer, clientConfig);\n", "    }\n", "\n", "    @Override\n", "    public KeyValue attributes() {\n", "        return properties;\n", "    }\n", "\n", "    @Override\n", "    public PullConsumer attachQueue(String queueName) {\n", "        registerPullTaskCallback(queueName);\n", "        return this;\n", "    }\n", "\n", "    @Override\n", "    public PullConsumer attachQueue(String queueName, KeyValue attributes) {\n", "        registerPullTaskCallback(queueName);\n", "        return this;\n", "    }\n", "\n", "    @Override\n", "    public PullConsumer detachQueue(String queueName) {\n", "        this.rocketmqPullConsumer.getRegisterTopics().remove(queueName);\n", "        return this;\n", "    }\n", "\n", "    @Override\n", "    public Message receive() {\n", "        MessageExt rmqMsg = localMessageCache.poll();\n", "        return rmqMsg == null ? null : OMSUtil.msgConvert(rmqMsg);\n", "    }\n", "\n", "    @Override\n", "    public Message receive(final KeyValue properties) {\n", "        MessageExt rmqMsg = localMessageCache.poll(properties);\n", "        return rmqMsg == null ? null : OMSUtil.msgConvert(rmqMsg);\n", "    }\n", "\n", "    @Override\n", "    public void ack(final String messageId) {\n", "        localMessageCache.ack(messageId);\n", "    }\n", "\n", "    @Override\n", "    public void ack(final String messageId, final KeyValue properties) {\n", "        localMessageCache.ack(messageId);\n", "    }\n", "\n", "    @Override\n", "    public synchronized void startup() {\n", "        if (!started) {\n", "            try {\n", "                this.pullConsumerScheduleService.start();\n", "                this.localMessageCache.startup();\n", "            } catch (MQClientException e) {\n", "                throw new OMSRuntimeException(\"-1\", e);\n", "            }\n", "        }\n", "        this.started = true;\n", "    }\n", "\n", "    private void registerPullTaskCallback(final String targetQueueName) {\n", "        this.pullConsumerScheduleService.registerPullTaskCallback(targetQueueName, new PullTaskCallback() {\n", "            @Override\n", "            public void doPullTask(final MessageQueue mq, final PullTaskContext context) {\n", "                MQPullConsumer consumer = context.getPullConsumer();\n", "                try {\n", "                    long offset = localMessageCache.nextPullOffset(mq);\n", "\n", "                    PullResult pullResult = consumer.pull(mq, \"*\",\n", "                        offset, localMessageCache.nextPullBatchNums());\n", "                    ProcessQueue pq = rocketmqPullConsumer.getDefaultMQPullConsumerImpl().getRebalanceImpl()\n", "                        .getProcessQueueTable().get(mq);\n", "                    switch (pullResult.getPullStatus()) {\n", "                        case FOUND:\n", "                            if (pq != null) {\n", "                                pq.putMessage(pullResult.getMsgFoundList());\n", "                                for (final MessageExt messageExt : pullResult.getMsgFoundList()) {\n", "                                    localMessageCache.submitConsumeRequest(new ConsumeRequest(messageExt, mq, pq));\n", "                                }\n", "                            }\n", "                            break;\n", "                        default:\n", "                            break;\n", "                    }\n", "                    localMessageCache.updatePullOffset(mq, pullResult.getNextBeginOffset());\n", "                } catch (Exception e) {\n", "                    log.error(\"An error occurred in pull message process.\", e);\n", "                }\n", "            }\n", "        });\n", "    }\n", "\n", "    @Override\n", "    public synchronized void shutdown() {\n", "        if (this.started) {\n", "            this.localMessageCache.shutdown();\n", "            this.pullConsumerScheduleService.shutdown();\n", "            this.rocketmqPullConsumer.shutdown();\n", "        }\n", "        this.started = false;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package io.openmessaging.rocketmq.consumer;\n", "\n", "import io.openmessaging.BytesMessage;\n", "import io.openmessaging.Message;\n", "import io.openmessaging.MessagingAccessPoint;\n", "import io.openmessaging.OMS;\n", "import io.openmessaging.OMSBuiltinKeys;\n", "import io.openmessaging.consumer.PullConsumer;\n", "import io.openmessaging.rocketmq.config.ClientConfig;\n", "import io.openmessaging.rocketmq.domain.NonStandardKeys;\n", "import java.lang.reflect.Field;\n", "import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.runner.RunWith;\n", "import org.mockito.Mock;\n", "import org.mockito.junit.MockitoJUnitRunner;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.mockito.Mockito.spy;\n", "import static org.mockito.Mockito.when;\n", "\n", "@RunWith(MockitoJUnitRunner.class)\n", "public class PullConsumerImplTest {\n", "    private PullConsumer consumer;\n", "    private String queueName = \"HELLO_QUEUE\";\n", "\n", "    @Mock\n", "    private DefaultMQPullConsumer rocketmqPullConsumer;\n", "    private LocalMessageCache localMessageCache = null;\n", "\n", "    @Before\n", "    public void init() throws NoSuchFieldException, IllegalAccessException {\n", "        final MessagingAccessPoint messagingAccessPoint = OMS\n", "            .getMessagingAccessPoint(\"oms:rocketmq://IP1:9876,IP2:9876/namespace\");\n", "\n", "        consumer = messagingAccessPoint.createPullConsumer(OMS.newKeyValue().put(OMSBuiltinKeys.CONSUMER_ID, \"TestGroup\"));\n", "        consumer.attachQueue(queueName);\n", "\n", "        Field field = PullConsumerImpl.class.getDeclaredField(\"rocketmqPullConsumer\");\n", "        field.setAccessible(true);\n", "        field.set(consumer, rocketmqPullConsumer); //Replace\n", "\n", "        ClientConfig clientConfig = new ClientConfig();\n", "        clientConfig.setOperationTimeout(200);\n", "        localMessageCache = spy(new LocalMessageCache(rocketmqPullConsumer, clientConfig));\n", "\n", "        field = PullConsumerImpl.class.getDeclaredField(\"localMessageCache\");\n", "        field.setAccessible(true);\n", "        field.set(consumer, localMessageCache);\n", "\n", "        messagingAccessPoint.startup();\n", "        consumer.startup();\n", "    }\n", "\n", "    @Test\n", "    public void testPoll() {\n", "        final byte[] testBody = new byte[] {'a', 'b'};\n", "        MessageExt consumedMsg = new MessageExt();\n", "        consumedMsg.setMsgId(\"NewMsgId\");\n", "        consumedMsg.setBody(testBody);\n", "        consumedMsg.putUserProperty(NonStandardKeys.MESSAGE_DESTINATION, \"TOPIC\");\n", "        consumedMsg.setTopic(queueName);\n", "\n", "        when(localMessageCache.poll()).thenReturn(consumedMsg);\n", "\n", "        Message message = consumer.receive();\n", "        assertThat(message.sysHeaders().getString(Message.BuiltinKeys.MESSAGE_ID)).isEqualTo(\"NewMsgId\");\n", "        assertThat(((BytesMessage) message).getBody(byte[].class)).isEqualTo(testBody);\n", "    }\n", "\n", "    @Test\n", "    public void testPoll_WithTimeout() {\n", "        //There is a default timeout value, @see ClientConfig#omsOperationTimeout.\n", "        Message message = consumer.receive();\n", "        assertThat(message).isNull();\n", "\n", "        message = consumer.receive(OMS.newKeyValue().put(Message.BuiltinKeys.TIMEOUT, 100));\n", "        assertThat(message).isNull();\n", "    }\n", "}"], "method_lines_dic": {"PullConsumerImpl::::attributes()": [86, 89], "PullConsumerImpl::::attachQueue(java.lang.String)": [91, 95], "PullConsumerImpl::::detachQueue(java.lang.String)": [103, 107], "PullConsumerImpl::::receive()": [109, 113], "PullConsumerImpl::::ack(java.lang.String)": [121, 124], "PullConsumerImpl::::startup()": [131, 142], "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)": [144, 174], "PullConsumerImpl::::shutdown()": [176, 184]}, "test_method_lines_dic": {"PullConsumerImplTest::::init()": [49, 71], "PullConsumerImplTest::::testPoll()": [73, 87], "PullConsumerImplTest::::testPoll_WithTimeout()": [89, 97]}, "reverse_method_lines_dic": {"86": "PullConsumerImpl::::attributes()", "87": "PullConsumerImpl::::attributes()", "88": "PullConsumerImpl::::attributes()", "89": "PullConsumerImpl::::attributes()", "91": "PullConsumerImpl::::attachQueue(java.lang.String)", "92": "PullConsumerImpl::::attachQueue(java.lang.String)", "93": "PullConsumerImpl::::attachQueue(java.lang.String)", "94": "PullConsumerImpl::::attachQueue(java.lang.String)", "95": "PullConsumerImpl::::attachQueue(java.lang.String)", "103": "PullConsumerImpl::::detachQueue(java.lang.String)", "104": "PullConsumerImpl::::detachQueue(java.lang.String)", "105": "PullConsumerImpl::::detachQueue(java.lang.String)", "106": "PullConsumerImpl::::detachQueue(java.lang.String)", "107": "PullConsumerImpl::::detachQueue(java.lang.String)", "109": "PullConsumerImpl::::receive()", "110": "PullConsumerImpl::::receive()", "111": "PullConsumerImpl::::receive()", "112": "PullConsumerImpl::::receive()", "113": "PullConsumerImpl::::receive()", "121": "PullConsumerImpl::::ack(java.lang.String)", "122": "PullConsumerImpl::::ack(java.lang.String)", "123": "PullConsumerImpl::::ack(java.lang.String)", "124": "PullConsumerImpl::::ack(java.lang.String)", "131": "PullConsumerImpl::::startup()", "132": "PullConsumerImpl::::startup()", "133": "PullConsumerImpl::::startup()", "134": "PullConsumerImpl::::startup()", "135": "PullConsumerImpl::::startup()", "136": "PullConsumerImpl::::startup()", "137": "PullConsumerImpl::::startup()", "138": "PullConsumerImpl::::startup()", "139": "PullConsumerImpl::::startup()", "140": "PullConsumerImpl::::startup()", "141": "PullConsumerImpl::::startup()", "142": "PullConsumerImpl::::startup()", "144": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "145": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "146": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "147": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "148": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "149": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "150": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "151": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "152": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "153": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "154": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "155": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "156": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "157": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "158": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "159": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "160": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "161": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "162": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "163": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "164": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "165": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "166": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "167": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "168": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "169": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "170": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "171": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "172": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "173": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "174": "PullConsumerImpl::::registerPullTaskCallback(java.lang.String)", "176": "PullConsumerImpl::::shutdown()", "177": "PullConsumerImpl::::shutdown()", "178": "PullConsumerImpl::::shutdown()", "179": "PullConsumerImpl::::shutdown()", "180": "PullConsumerImpl::::shutdown()", "181": "PullConsumerImpl::::shutdown()", "182": "PullConsumerImpl::::shutdown()", "183": "PullConsumerImpl::::shutdown()", "184": "PullConsumerImpl::::shutdown()"}, "test_reverse_method_lines_dic": {"49": "PullConsumerImplTest::::init()", "50": "PullConsumerImplTest::::init()", "51": "PullConsumerImplTest::::init()", "52": "PullConsumerImplTest::::init()", "53": "PullConsumerImplTest::::init()", "54": "PullConsumerImplTest::::init()", "55": "PullConsumerImplTest::::init()", "56": "PullConsumerImplTest::::init()", "57": "PullConsumerImplTest::::init()", "58": "PullConsumerImplTest::::init()", "59": "PullConsumerImplTest::::init()", "60": "PullConsumerImplTest::::init()", "61": "PullConsumerImplTest::::init()", "62": "PullConsumerImplTest::::init()", "63": "PullConsumerImplTest::::init()", "64": "PullConsumerImplTest::::init()", "65": "PullConsumerImplTest::::init()", "66": "PullConsumerImplTest::::init()", "67": "PullConsumerImplTest::::init()", "68": "PullConsumerImplTest::::init()", "69": "PullConsumerImplTest::::init()", "70": "PullConsumerImplTest::::init()", "71": "PullConsumerImplTest::::init()", "73": "PullConsumerImplTest::::testPoll()", "74": "PullConsumerImplTest::::testPoll()", "75": "PullConsumerImplTest::::testPoll()", "76": "PullConsumerImplTest::::testPoll()", "77": "PullConsumerImplTest::::testPoll()", "78": "PullConsumerImplTest::::testPoll()", "79": "PullConsumerImplTest::::testPoll()", "80": "PullConsumerImplTest::::testPoll()", "81": "PullConsumerImplTest::::testPoll()", "82": "PullConsumerImplTest::::testPoll()", "83": "PullConsumerImplTest::::testPoll()", "84": "PullConsumerImplTest::::testPoll()", "85": "PullConsumerImplTest::::testPoll()", "86": "PullConsumerImplTest::::testPoll()", "87": "PullConsumerImplTest::::testPoll()", "89": "PullConsumerImplTest::::testPoll_WithTimeout()", "90": "PullConsumerImplTest::::testPoll_WithTimeout()", "91": "PullConsumerImplTest::::testPoll_WithTimeout()", "92": "PullConsumerImplTest::::testPoll_WithTimeout()", "93": "PullConsumerImplTest::::testPoll_WithTimeout()", "94": "PullConsumerImplTest::::testPoll_WithTimeout()", "95": "PullConsumerImplTest::::testPoll_WithTimeout()", "96": "PullConsumerImplTest::::testPoll_WithTimeout()", "97": "PullConsumerImplTest::::testPoll_WithTimeout()"}, "tests": [{"test_lines": [73, 87], "covered_lines": [45, 50, 52, 53, 54, 56, 57, 60, 62, 64, 72, 74, 75, 77, 78, 79, 81, 83, 84, 93, 94, 111, 112, 133, 135, 136, 139, 141, 142, 145, 174]}, {"test_lines": [89, 97], "covered_lines": [45, 50, 52, 53, 54, 56, 57, 60, 62, 64, 72, 74, 75, 77, 78, 79, 81, 83, 84, 93, 94, 111, 112, 117, 118, 133, 135, 136, 139, 141, 142, 145, 174]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/LocalMessageCache.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package io.openmessaging.rocketmq.consumer;\n", "\n", "import io.openmessaging.KeyValue;\n", "import io.openmessaging.Message;\n", "import io.openmessaging.ServiceLifecycle;\n", "import io.openmessaging.rocketmq.config.ClientConfig;\n", "import io.openmessaging.rocketmq.domain.ConsumeRequest;\n", "import java.util.Collections;\n", "import java.util.Map;\n", "import java.util.TreeMap;\n", "import java.util.concurrent.BlockingQueue;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "import java.util.concurrent.Executors;\n", "import java.util.concurrent.LinkedBlockingQueue;\n", "import java.util.concurrent.ScheduledExecutorService;\n", "import java.util.concurrent.TimeUnit;\n", "import java.util.concurrent.locks.ReadWriteLock;\n", "import org.apache.commons.lang3.reflect.FieldUtils;\n", "import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\n", "import org.apache.rocketmq.client.exception.MQClientException;\n", "import org.apache.rocketmq.client.impl.consumer.ProcessQueue;\n", "import org.apache.rocketmq.client.log.ClientLogger;\n", "import org.apache.rocketmq.common.ThreadFactoryImpl;\n", "import org.apache.rocketmq.common.message.MessageAccessor;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.common.utils.ThreadUtils;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "\n", "class LocalMessageCache implements ServiceLifecycle {\n", "    private final BlockingQueue<ConsumeRequest> consumeRequestCache;\n", "    private final Map<String, ConsumeRequest> consumedRequest;\n", "    private final ConcurrentHashMap<MessageQueue, Long> pullOffsetTable;\n", "    private final DefaultMQPullConsumer rocketmqPullConsumer;\n", "    private final ClientConfig clientConfig;\n", "    private final ScheduledExecutorService cleanExpireMsgExecutors;\n", "\n", "    private final static InternalLogger log = ClientLogger.getLog();\n", "\n", "    LocalMessageCache(final DefaultMQPullConsumer rocketmqPullConsumer, final ClientConfig clientConfig) {\n", "        consumeRequestCache = new LinkedBlockingQueue<>(clientConfig.getRmqPullMessageCacheCapacity());\n", "        this.consumedRequest = new ConcurrentHashMap<>();\n", "        this.pullOffsetTable = new ConcurrentHashMap<>();\n", "        this.rocketmqPullConsumer = rocketmqPullConsumer;\n", "        this.clientConfig = clientConfig;\n", "        this.cleanExpireMsgExecutors = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\n", "            \"OMS_CleanExpireMsgScheduledThread_\"));\n", "    }\n", "\n", "    int nextPullBatchNums() {\n", "        return Math.min(clientConfig.getRmqPullMessageBatchNums(), consumeRequestCache.remainingCapacity());\n", "    }\n", "\n", "    long nextPullOffset(MessageQueue remoteQueue) {\n", "        if (!pullOffsetTable.containsKey(remoteQueue)) {\n", "            try {\n", "                pullOffsetTable.putIfAbsent(remoteQueue,\n", "                    rocketmqPullConsumer.fetchConsumeOffset(remoteQueue, false));\n", "            } catch (MQClientException e) {\n", "                log.error(\"An error occurred in fetch consume offset process.\", e);\n", "            }\n", "        }\n", "        return pullOffsetTable.get(remoteQueue);\n", "    }\n", "\n", "    void updatePullOffset(MessageQueue remoteQueue, long nextPullOffset) {\n", "        pullOffsetTable.put(remoteQueue, nextPullOffset);\n", "    }\n", "\n", "    void submitConsumeRequest(ConsumeRequest consumeRequest) {\n", "        try {\n", "            consumeRequestCache.put(consumeRequest);\n", "        } catch (InterruptedException ignore) {\n", "        }\n", "    }\n", "\n", "    MessageExt poll() {\n", "        return poll(clientConfig.getOperationTimeout());\n", "    }\n", "\n", "    MessageExt poll(final KeyValue properties) {\n", "        int currentPollTimeout = clientConfig.getOperationTimeout();\n", "        if (properties.containsKey(Message.BuiltinKeys.TIMEOUT)) {\n", "            currentPollTimeout = properties.getInt(Message.BuiltinKeys.TIMEOUT);\n", "        }\n", "        return poll(currentPollTimeout);\n", "    }\n", "\n", "    private MessageExt poll(long timeout) {\n", "        try {\n", "            ConsumeRequest consumeRequest = consumeRequestCache.poll(timeout, TimeUnit.MILLISECONDS);\n", "            if (consumeRequest != null) {\n", "                MessageExt messageExt = consumeRequest.getMessageExt();\n", "                consumeRequest.setStartConsumeTimeMillis(System.currentTimeMillis());\n", "                MessageAccessor.setConsumeStartTimeStamp(messageExt, String.valueOf(consumeRequest.getStartConsumeTimeMillis()));\n", "                consumedRequest.put(messageExt.getMsgId(), consumeRequest);\n", "                return messageExt;\n", "            }\n", "        } catch (InterruptedException ignore) {\n", "        }\n", "        return null;\n", "    }\n", "\n", "    void ack(final String messageId) {\n", "        ConsumeRequest consumeRequest = consumedRequest.remove(messageId);\n", "        if (consumeRequest != null) {\n", "            long offset = consumeRequest.getProcessQueue().removeMessage(Collections.singletonList(consumeRequest.getMessageExt()));\n", "            try {\n", "                rocketmqPullConsumer.updateConsumeOffset(consumeRequest.getMessageQueue(), offset);\n", "            } catch (MQClientException e) {\n", "                log.error(\"An error occurred in update consume offset process.\", e);\n", "            }\n", "        }\n", "    }\n", "\n", "    void ack(final MessageQueue messageQueue, final ProcessQueue processQueue, final MessageExt messageExt) {\n", "        consumedRequest.remove(messageExt.getMsgId());\n", "        long offset = processQueue.removeMessage(Collections.singletonList(messageExt));\n", "        try {\n", "            rocketmqPullConsumer.updateConsumeOffset(messageQueue, offset);\n", "        } catch (MQClientException e) {\n", "            log.error(\"An error occurred in update consume offset process.\", e);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public void startup() {\n", "        this.cleanExpireMsgExecutors.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                cleanExpireMsg();\n", "            }\n", "        }, clientConfig.getRmqMessageConsumeTimeout(), clientConfig.getRmqMessageConsumeTimeout(), TimeUnit.MINUTES);\n", "    }\n", "\n", "    @Override\n", "    public void shutdown() {\n", "        ThreadUtils.shutdownGracefully(cleanExpireMsgExecutors, 5000, TimeUnit.MILLISECONDS);\n", "    }\n", "\n", "    private void cleanExpireMsg() {\n", "        for (final Map.Entry<MessageQueue, ProcessQueue> next : rocketmqPullConsumer.getDefaultMQPullConsumerImpl()\n", "            .getRebalanceImpl().getProcessQueueTable().entrySet()) {\n", "            ProcessQueue pq = next.getValue();\n", "            MessageQueue mq = next.getKey();\n", "            ReadWriteLock lockTreeMap = getLockInProcessQueue(pq);\n", "            if (lockTreeMap == null) {\n", "                log.error(\"Gets tree map lock in process queue error, may be has compatibility issue\");\n", "                return;\n", "            }\n", "\n", "            TreeMap<Long, MessageExt> msgTreeMap = pq.getMsgTreeMap();\n", "\n", "            int loop = msgTreeMap.size();\n", "            for (int i = 0; i < loop; i++) {\n", "                MessageExt msg = null;\n", "                try {\n", "                    lockTreeMap.readLock().lockInterruptibly();\n", "                    try {\n", "                        if (!msgTreeMap.isEmpty()) {\n", "                            msg = msgTreeMap.firstEntry().getValue();\n", "                            if (System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msg))\n", "                                > clientConfig.getRmqMessageConsumeTimeout() * 60 * 1000) {\n", "                                //Expired, ack and remove it.\n", "                            } else {\n", "                                break;\n", "                            }\n", "                        } else {\n", "                            break;\n", "                        }\n", "                    } finally {\n", "                        lockTreeMap.readLock().unlock();\n", "                    }\n", "                } catch (InterruptedException e) {\n", "                    log.error(\"Gets expired message exception\", e);\n", "                }\n", "\n", "                try {\n", "                    rocketmqPullConsumer.sendMessageBack(msg, 3);\n", "                    log.info(\"Send expired msg back. topic={}, msgId={}, storeHost={}, queueId={}, queueOffset={}\",\n", "                        msg.getTopic(), msg.getMsgId(), msg.getStoreHost(), msg.getQueueId(), msg.getQueueOffset());\n", "                    ack(mq, pq, msg);\n", "                } catch (Exception e) {\n", "                    log.error(\"Send back expired msg exception\", e);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    private ReadWriteLock getLockInProcessQueue(ProcessQueue pq) {\n", "        try {\n", "            return (ReadWriteLock) FieldUtils.readDeclaredField(pq, \"lockTreeMap\", true);\n", "        } catch (IllegalAccessException e) {\n", "            return null;\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package io.openmessaging.rocketmq.consumer;\n", "\n", "import io.openmessaging.rocketmq.config.ClientConfig;\n", "import io.openmessaging.rocketmq.domain.ConsumeRequest;\n", "import io.openmessaging.rocketmq.domain.NonStandardKeys;\n", "import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.runner.RunWith;\n", "import org.mockito.Mock;\n", "import org.mockito.junit.MockitoJUnitRunner;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.mockito.ArgumentMatchers.any;\n", "import static org.mockito.ArgumentMatchers.anyBoolean;\n", "import static org.mockito.Mockito.when;\n", "\n", "@RunWith(MockitoJUnitRunner.class)\n", "public class LocalMessageCacheTest {\n", "    private LocalMessageCache localMessageCache;\n", "    @Mock\n", "    private DefaultMQPullConsumer rocketmqPullConsume;\n", "    @Mock\n", "    private ConsumeRequest consumeRequest;\n", "\n", "    @Before\n", "    public void init() {\n", "        ClientConfig clientConfig = new ClientConfig();\n", "        clientConfig.setRmqPullMessageBatchNums(512);\n", "        clientConfig.setRmqPullMessageCacheCapacity(1024);\n", "        localMessageCache = new LocalMessageCache(rocketmqPullConsume, clientConfig);\n", "    }\n", "\n", "    @Test\n", "    public void testNextPullBatchNums() throws Exception {\n", "        assertThat(localMessageCache.nextPullBatchNums()).isEqualTo(512);\n", "        for (int i = 0; i < 513; i++) {\n", "            localMessageCache.submitConsumeRequest(consumeRequest);\n", "        }\n", "        assertThat(localMessageCache.nextPullBatchNums()).isEqualTo(511);\n", "    }\n", "\n", "    @Test\n", "    public void testNextPullOffset() throws Exception {\n", "        MessageQueue messageQueue = new MessageQueue();\n", "        when(rocketmqPullConsume.fetchConsumeOffset(any(MessageQueue.class), anyBoolean()))\n", "            .thenReturn(123L);\n", "        assertThat(localMessageCache.nextPullOffset(new MessageQueue())).isEqualTo(123L);\n", "    }\n", "\n", "    @Test\n", "    public void testUpdatePullOffset() throws Exception {\n", "        MessageQueue messageQueue = new MessageQueue();\n", "        localMessageCache.updatePullOffset(messageQueue, 124L);\n", "        assertThat(localMessageCache.nextPullOffset(messageQueue)).isEqualTo(124L);\n", "    }\n", "\n", "    @Test\n", "    public void testSubmitConsumeRequest() throws Exception {\n", "        byte[] body = new byte[] {'1', '2', '3'};\n", "        MessageExt consumedMsg = new MessageExt();\n", "        consumedMsg.setMsgId(\"NewMsgId\");\n", "        consumedMsg.setBody(body);\n", "        consumedMsg.putUserProperty(NonStandardKeys.MESSAGE_DESTINATION, \"TOPIC\");\n", "        consumedMsg.setTopic(\"HELLO_QUEUE\");\n", "\n", "        when(consumeRequest.getMessageExt()).thenReturn(consumedMsg);\n", "        localMessageCache.submitConsumeRequest(consumeRequest);\n", "        assertThat(localMessageCache.poll()).isEqualTo(consumedMsg);\n", "    }\n", "}"], "method_lines_dic": {"LocalMessageCache::::nextPullBatchNums()": [66, 68], "LocalMessageCache::::submitConsumeRequest(io.openmessaging.rocketmq.domain.ConsumeRequest)": [86, 91], "LocalMessageCache::::poll()": [93, 95], "LocalMessageCache::::poll(long)": [105, 118], "LocalMessageCache::::ack(java.lang.String)": [120, 130], "LocalMessageCache::::startup()": [142, 150], "LocalMessageCache::::shutdown()": [152, 155], "LocalMessageCache::::cleanExpireMsg()": [157, 204]}, "test_method_lines_dic": {"LocalMessageCacheTest::::init()": [44, 50], "LocalMessageCacheTest::::testNextPullBatchNums()": [52, 59], "LocalMessageCacheTest::::testNextPullOffset()": [61, 67], "LocalMessageCacheTest::::testUpdatePullOffset()": [69, 74], "LocalMessageCacheTest::::testSubmitConsumeRequest()": [76, 88]}, "reverse_method_lines_dic": {"66": "LocalMessageCache::::nextPullBatchNums()", "67": "LocalMessageCache::::nextPullBatchNums()", "68": "LocalMessageCache::::nextPullBatchNums()", "86": "LocalMessageCache::::submitConsumeRequest(io.openmessaging.rocketmq.domain.ConsumeRequest)", "87": "LocalMessageCache::::submitConsumeRequest(io.openmessaging.rocketmq.domain.ConsumeRequest)", "88": "LocalMessageCache::::submitConsumeRequest(io.openmessaging.rocketmq.domain.ConsumeRequest)", "89": "LocalMessageCache::::submitConsumeRequest(io.openmessaging.rocketmq.domain.ConsumeRequest)", "90": "LocalMessageCache::::submitConsumeRequest(io.openmessaging.rocketmq.domain.ConsumeRequest)", "91": "LocalMessageCache::::submitConsumeRequest(io.openmessaging.rocketmq.domain.ConsumeRequest)", "93": "LocalMessageCache::::poll()", "94": "LocalMessageCache::::poll()", "95": "LocalMessageCache::::poll()", "105": "LocalMessageCache::::poll(long)", "106": "LocalMessageCache::::poll(long)", "107": "LocalMessageCache::::poll(long)", "108": "LocalMessageCache::::poll(long)", "109": "LocalMessageCache::::poll(long)", "110": "LocalMessageCache::::poll(long)", "111": "LocalMessageCache::::poll(long)", "112": "LocalMessageCache::::poll(long)", "113": "LocalMessageCache::::poll(long)", "114": "LocalMessageCache::::poll(long)", "115": "LocalMessageCache::::poll(long)", "116": "LocalMessageCache::::poll(long)", "117": "LocalMessageCache::::poll(long)", "118": "LocalMessageCache::::poll(long)", "120": "LocalMessageCache::::ack(java.lang.String)", "121": "LocalMessageCache::::ack(java.lang.String)", "122": "LocalMessageCache::::ack(java.lang.String)", "123": "LocalMessageCache::::ack(java.lang.String)", "124": "LocalMessageCache::::ack(java.lang.String)", "125": "LocalMessageCache::::ack(java.lang.String)", "126": "LocalMessageCache::::ack(java.lang.String)", "127": "LocalMessageCache::::ack(java.lang.String)", "128": "LocalMessageCache::::ack(java.lang.String)", "129": "LocalMessageCache::::ack(java.lang.String)", "130": "LocalMessageCache::::ack(java.lang.String)", "142": "LocalMessageCache::::startup()", "143": "LocalMessageCache::::startup()", "144": "LocalMessageCache::::startup()", "145": "LocalMessageCache::::startup()", "146": "LocalMessageCache::::startup()", "147": "LocalMessageCache::::startup()", "148": "LocalMessageCache::::startup()", "149": "LocalMessageCache::::startup()", "150": "LocalMessageCache::::startup()", "152": "LocalMessageCache::::shutdown()", "153": "LocalMessageCache::::shutdown()", "154": "LocalMessageCache::::shutdown()", "155": "LocalMessageCache::::shutdown()", "157": "LocalMessageCache::::cleanExpireMsg()", "158": "LocalMessageCache::::cleanExpireMsg()", "159": "LocalMessageCache::::cleanExpireMsg()", "160": "LocalMessageCache::::cleanExpireMsg()", "161": "LocalMessageCache::::cleanExpireMsg()", "162": "LocalMessageCache::::cleanExpireMsg()", "163": "LocalMessageCache::::cleanExpireMsg()", "164": "LocalMessageCache::::cleanExpireMsg()", "165": "LocalMessageCache::::cleanExpireMsg()", "166": "LocalMessageCache::::cleanExpireMsg()", "167": "LocalMessageCache::::cleanExpireMsg()", "168": "LocalMessageCache::::cleanExpireMsg()", "169": "LocalMessageCache::::cleanExpireMsg()", "170": "LocalMessageCache::::cleanExpireMsg()", "171": "LocalMessageCache::::cleanExpireMsg()", "172": "LocalMessageCache::::cleanExpireMsg()", "173": "LocalMessageCache::::cleanExpireMsg()", "174": "LocalMessageCache::::cleanExpireMsg()", "175": "LocalMessageCache::::cleanExpireMsg()", "176": "LocalMessageCache::::cleanExpireMsg()", "177": "LocalMessageCache::::cleanExpireMsg()", "178": "LocalMessageCache::::cleanExpireMsg()", "179": "LocalMessageCache::::cleanExpireMsg()", "180": "LocalMessageCache::::cleanExpireMsg()", "181": "LocalMessageCache::::cleanExpireMsg()", "182": "LocalMessageCache::::cleanExpireMsg()", "183": "LocalMessageCache::::cleanExpireMsg()", "184": "LocalMessageCache::::cleanExpireMsg()", "185": "LocalMessageCache::::cleanExpireMsg()", "186": "LocalMessageCache::::cleanExpireMsg()", "187": "LocalMessageCache::::cleanExpireMsg()", "188": "LocalMessageCache::::cleanExpireMsg()", "189": "LocalMessageCache::::cleanExpireMsg()", "190": "LocalMessageCache::::cleanExpireMsg()", "191": "LocalMessageCache::::cleanExpireMsg()", "192": "LocalMessageCache::::cleanExpireMsg()", "193": "LocalMessageCache::::cleanExpireMsg()", "194": "LocalMessageCache::::cleanExpireMsg()", "195": "LocalMessageCache::::cleanExpireMsg()", "196": "LocalMessageCache::::cleanExpireMsg()", "197": "LocalMessageCache::::cleanExpireMsg()", "198": "LocalMessageCache::::cleanExpireMsg()", "199": "LocalMessageCache::::cleanExpireMsg()", "200": "LocalMessageCache::::cleanExpireMsg()", "201": "LocalMessageCache::::cleanExpireMsg()", "202": "LocalMessageCache::::cleanExpireMsg()", "203": "LocalMessageCache::::cleanExpireMsg()", "204": "LocalMessageCache::::cleanExpireMsg()"}, "test_reverse_method_lines_dic": {"44": "LocalMessageCacheTest::::init()", "45": "LocalMessageCacheTest::::init()", "46": "LocalMessageCacheTest::::init()", "47": "LocalMessageCacheTest::::init()", "48": "LocalMessageCacheTest::::init()", "49": "LocalMessageCacheTest::::init()", "50": "LocalMessageCacheTest::::init()", "52": "LocalMessageCacheTest::::testNextPullBatchNums()", "53": "LocalMessageCacheTest::::testNextPullBatchNums()", "54": "LocalMessageCacheTest::::testNextPullBatchNums()", "55": "LocalMessageCacheTest::::testNextPullBatchNums()", "56": "LocalMessageCacheTest::::testNextPullBatchNums()", "57": "LocalMessageCacheTest::::testNextPullBatchNums()", "58": "LocalMessageCacheTest::::testNextPullBatchNums()", "59": "LocalMessageCacheTest::::testNextPullBatchNums()", "61": "LocalMessageCacheTest::::testNextPullOffset()", "62": "LocalMessageCacheTest::::testNextPullOffset()", "63": "LocalMessageCacheTest::::testNextPullOffset()", "64": "LocalMessageCacheTest::::testNextPullOffset()", "65": "LocalMessageCacheTest::::testNextPullOffset()", "66": "LocalMessageCacheTest::::testNextPullOffset()", "67": "LocalMessageCacheTest::::testNextPullOffset()", "69": "LocalMessageCacheTest::::testUpdatePullOffset()", "70": "LocalMessageCacheTest::::testUpdatePullOffset()", "71": "LocalMessageCacheTest::::testUpdatePullOffset()", "72": "LocalMessageCacheTest::::testUpdatePullOffset()", "73": "LocalMessageCacheTest::::testUpdatePullOffset()", "74": "LocalMessageCacheTest::::testUpdatePullOffset()", "76": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "77": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "78": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "79": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "80": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "81": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "82": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "83": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "84": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "85": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "86": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "87": "LocalMessageCacheTest::::testSubmitConsumeRequest()", "88": "LocalMessageCacheTest::::testSubmitConsumeRequest()"}, "tests": [{"test_lines": [52, 59], "covered_lines": [54, 56, 57, 58, 59, 60, 61, 62, 64, 67, 88, 90, 91]}, {"test_lines": [61, 67], "covered_lines": [54, 56, 57, 58, 59, 60, 61, 62, 64, 71, 73, 74, 77, 79]}, {"test_lines": [69, 74], "covered_lines": [54, 56, 57, 58, 59, 60, 61, 62, 64, 71, 79, 83, 84]}, {"test_lines": [76, 88], "covered_lines": [54, 56, 57, 58, 59, 60, 61, 62, 64, 88, 90, 91, 94, 107, 108, 109, 110, 111, 112, 113]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/openmessaging/src/main/java/io/openmessaging/rocketmq/producer/ProducerImpl.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package io.openmessaging.rocketmq.producer;\n", "\n", "import io.openmessaging.BytesMessage;\n", "import io.openmessaging.KeyValue;\n", "import io.openmessaging.Message;\n", "import io.openmessaging.Promise;\n", "import io.openmessaging.exception.OMSRuntimeException;\n", "import io.openmessaging.interceptor.ProducerInterceptor;\n", "import io.openmessaging.producer.BatchMessageSender;\n", "import io.openmessaging.producer.LocalTransactionExecutor;\n", "import io.openmessaging.producer.Producer;\n", "import io.openmessaging.producer.SendResult;\n", "import io.openmessaging.rocketmq.promise.DefaultPromise;\n", "import io.openmessaging.rocketmq.utils.OMSUtil;\n", "import org.apache.rocketmq.client.producer.SendCallback;\n", "import org.apache.rocketmq.client.producer.SendStatus;\n", "\n", "import static io.openmessaging.rocketmq.utils.OMSUtil.msgConvert;\n", "\n", "public class ProducerImpl extends AbstractOMSProducer implements Producer {\n", "\n", "    public ProducerImpl(final KeyValue properties) {\n", "        super(properties);\n", "    }\n", "\n", "    @Override\n", "    public KeyValue attributes() {\n", "        return properties;\n", "    }\n", "\n", "    @Override\n", "    public SendResult send(final Message message) {\n", "        return send(message, this.rocketmqProducer.getSendMsgTimeout());\n", "    }\n", "\n", "    @Override\n", "    public SendResult send(final Message message, final KeyValue properties) {\n", "        long timeout = properties.containsKey(Message.BuiltinKeys.TIMEOUT)\n", "            ? properties.getInt(Message.BuiltinKeys.TIMEOUT) : this.rocketmqProducer.getSendMsgTimeout();\n", "        return send(message, timeout);\n", "    }\n", "\n", "    @Override\n", "    public SendResult send(Message message, LocalTransactionExecutor branchExecutor, KeyValue attributes) {\n", "        return null;\n", "    }\n", "\n", "    private SendResult send(final Message message, long timeout) {\n", "        checkMessageType(message);\n", "        org.apache.rocketmq.common.message.Message rmqMessage = msgConvert((BytesMessage) message);\n", "        try {\n", "            org.apache.rocketmq.client.producer.SendResult rmqResult = this.rocketmqProducer.send(rmqMessage, timeout);\n", "            if (!rmqResult.getSendStatus().equals(SendStatus.SEND_OK)) {\n", "                log.error(String.format(\"Send message to RocketMQ failed, %s\", message));\n", "                throw new OMSRuntimeException(\"-1\", \"Send message to RocketMQ broker failed.\");\n", "            }\n", "            message.sysHeaders().put(Message.BuiltinKeys.MESSAGE_ID, rmqResult.getMsgId());\n", "            return OMSUtil.sendResultConvert(rmqResult);\n", "        } catch (Exception e) {\n", "            log.error(String.format(\"Send message to RocketMQ failed, %s\", message), e);\n", "            throw checkProducerException(rmqMessage.getTopic(), message.sysHeaders().getString(Message.BuiltinKeys.MESSAGE_ID), e);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public Promise<SendResult> sendAsync(final Message message) {\n", "        return sendAsync(message, this.rocketmqProducer.getSendMsgTimeout());\n", "    }\n", "\n", "    @Override\n", "    public Promise<SendResult> sendAsync(final Message message, final KeyValue properties) {\n", "        long timeout = properties.containsKey(Message.BuiltinKeys.TIMEOUT)\n", "            ? properties.getInt(Message.BuiltinKeys.TIMEOUT) : this.rocketmqProducer.getSendMsgTimeout();\n", "        return sendAsync(message, timeout);\n", "    }\n", "\n", "    private Promise<SendResult> sendAsync(final Message message, long timeout) {\n", "        checkMessageType(message);\n", "        org.apache.rocketmq.common.message.Message rmqMessage = msgConvert((BytesMessage) message);\n", "        final Promise<SendResult> promise = new DefaultPromise<>();\n", "        try {\n", "            this.rocketmqProducer.send(rmqMessage, new SendCallback() {\n", "                @Override\n", "                public void onSuccess(final org.apache.rocketmq.client.producer.SendResult rmqResult) {\n", "                    message.sysHeaders().put(Message.BuiltinKeys.MESSAGE_ID, rmqResult.getMsgId());\n", "                    promise.set(OMSUtil.sendResultConvert(rmqResult));\n", "                }\n", "\n", "                @Override\n", "                public void onException(final Throwable e) {\n", "                    promise.setFailure(e);\n", "                }\n", "            }, timeout);\n", "        } catch (Exception e) {\n", "            promise.setFailure(e);\n", "        }\n", "        return promise;\n", "    }\n", "\n", "    @Override\n", "    public void sendOneway(final Message message) {\n", "        checkMessageType(message);\n", "        org.apache.rocketmq.common.message.Message rmqMessage = msgConvert((BytesMessage) message);\n", "        try {\n", "            this.rocketmqProducer.sendOneway(rmqMessage);\n", "        } catch (Exception ignore) { //Ignore the oneway exception.\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public void sendOneway(final Message message, final KeyValue properties) {\n", "        sendOneway(message);\n", "    }\n", "\n", "    @Override\n", "    public BatchMessageSender createBatchMessageSender() {\n", "        return null;\n", "    }\n", "\n", "    @Override\n", "    public void addInterceptor(ProducerInterceptor interceptor) {\n", "\n", "    }\n", "\n", "    @Override\n", "    public void removeInterceptor(ProducerInterceptor interceptor) {\n", "\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package io.openmessaging.rocketmq.producer;\n", "\n", "import io.openmessaging.MessagingAccessPoint;\n", "import io.openmessaging.OMS;\n", "import io.openmessaging.exception.OMSRuntimeException;\n", "import io.openmessaging.producer.Producer;\n", "import java.lang.reflect.Field;\n", "import org.apache.rocketmq.client.exception.MQBrokerException;\n", "import org.apache.rocketmq.client.exception.MQClientException;\n", "import org.apache.rocketmq.client.producer.DefaultMQProducer;\n", "import org.apache.rocketmq.client.producer.SendResult;\n", "import org.apache.rocketmq.client.producer.SendStatus;\n", "import org.apache.rocketmq.common.message.Message;\n", "import org.apache.rocketmq.remoting.exception.RemotingException;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.runner.RunWith;\n", "import org.mockito.Mock;\n", "import org.mockito.junit.MockitoJUnitRunner;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;\n", "import static org.mockito.ArgumentMatchers.any;\n", "import static org.mockito.ArgumentMatchers.anyLong;\n", "import static org.mockito.Mockito.when;\n", "\n", "@RunWith(MockitoJUnitRunner.class)\n", "public class ProducerImplTest {\n", "    private Producer producer;\n", "\n", "    @Mock\n", "    private DefaultMQProducer rocketmqProducer;\n", "\n", "    @Before\n", "    public void init() throws NoSuchFieldException, IllegalAccessException {\n", "        final MessagingAccessPoint messagingAccessPoint = OMS\n", "            .getMessagingAccessPoint(\"oms:rocketmq://IP1:9876,IP2:9876/namespace\");\n", "        producer = messagingAccessPoint.createProducer();\n", "\n", "        Field field = AbstractOMSProducer.class.getDeclaredField(\"rocketmqProducer\");\n", "        field.setAccessible(true);\n", "        field.set(producer, rocketmqProducer);\n", "\n", "        messagingAccessPoint.startup();\n", "        producer.startup();\n", "    }\n", "\n", "    @Test\n", "    public void testSend_OK() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n", "        SendResult sendResult = new SendResult();\n", "        sendResult.setMsgId(\"TestMsgID\");\n", "        sendResult.setSendStatus(SendStatus.SEND_OK);\n", "        when(rocketmqProducer.send(any(Message.class), anyLong())).thenReturn(sendResult);\n", "        io.openmessaging.producer.SendResult omsResult =\n", "            producer.send(producer.createBytesMessage(\"HELLO_TOPIC\", new byte[] {'a'}));\n", "\n", "        assertThat(omsResult.messageId()).isEqualTo(\"TestMsgID\");\n", "    }\n", "\n", "    @Test\n", "    public void testSend_Not_OK() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n", "        SendResult sendResult = new SendResult();\n", "        sendResult.setSendStatus(SendStatus.FLUSH_DISK_TIMEOUT);\n", "\n", "        when(rocketmqProducer.send(any(Message.class), anyLong())).thenReturn(sendResult);\n", "        try {\n", "            producer.send(producer.createBytesMessage(\"HELLO_TOPIC\", new byte[] {'a'}));\n", "            failBecauseExceptionWasNotThrown(OMSRuntimeException.class);\n", "        } catch (Exception e) {\n", "            assertThat(e).hasMessageContaining(\"Send message to RocketMQ broker failed.\");\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testSend_WithException() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {\n", "        when(rocketmqProducer.send(any(Message.class), anyLong())).thenThrow(MQClientException.class);\n", "        try {\n", "            producer.send(producer.createBytesMessage(\"HELLO_TOPIC\", new byte[] {'a'}));\n", "            failBecauseExceptionWasNotThrown(OMSRuntimeException.class);\n", "        } catch (Exception e) {\n", "            assertThat(e).hasMessageContaining(\"Send message to RocketMQ broker failed.\");\n", "        }\n", "    }\n", "\n", "}"], "method_lines_dic": {"ProducerImpl::::attributes()": [42, 45], "ProducerImpl::::createBatchMessageSender()": [131, 134]}, "test_method_lines_dic": {"ProducerImplTest::::init()": [50, 62], "ProducerImplTest::::testSend_OK()": [64, 74], "ProducerImplTest::::testSend_Not_OK()": [76, 88], "ProducerImplTest::::testSend_WithException()": [90, 99]}, "reverse_method_lines_dic": {"42": "ProducerImpl::::attributes()", "43": "ProducerImpl::::attributes()", "44": "ProducerImpl::::attributes()", "45": "ProducerImpl::::attributes()", "131": "ProducerImpl::::createBatchMessageSender()", "132": "ProducerImpl::::createBatchMessageSender()", "133": "ProducerImpl::::createBatchMessageSender()", "134": "ProducerImpl::::createBatchMessageSender()"}, "test_reverse_method_lines_dic": {"50": "ProducerImplTest::::init()", "51": "ProducerImplTest::::init()", "52": "ProducerImplTest::::init()", "53": "ProducerImplTest::::init()", "54": "ProducerImplTest::::init()", "55": "ProducerImplTest::::init()", "56": "ProducerImplTest::::init()", "57": "ProducerImplTest::::init()", "58": "ProducerImplTest::::init()", "59": "ProducerImplTest::::init()", "60": "ProducerImplTest::::init()", "61": "ProducerImplTest::::init()", "62": "ProducerImplTest::::init()", "64": "ProducerImplTest::::testSend_OK()", "65": "ProducerImplTest::::testSend_OK()", "66": "ProducerImplTest::::testSend_OK()", "67": "ProducerImplTest::::testSend_OK()", "68": "ProducerImplTest::::testSend_OK()", "69": "ProducerImplTest::::testSend_OK()", "70": "ProducerImplTest::::testSend_OK()", "71": "ProducerImplTest::::testSend_OK()", "72": "ProducerImplTest::::testSend_OK()", "73": "ProducerImplTest::::testSend_OK()", "74": "ProducerImplTest::::testSend_OK()", "76": "ProducerImplTest::::testSend_Not_OK()", "77": "ProducerImplTest::::testSend_Not_OK()", "78": "ProducerImplTest::::testSend_Not_OK()", "79": "ProducerImplTest::::testSend_Not_OK()", "80": "ProducerImplTest::::testSend_Not_OK()", "81": "ProducerImplTest::::testSend_Not_OK()", "82": "ProducerImplTest::::testSend_Not_OK()", "83": "ProducerImplTest::::testSend_Not_OK()", "84": "ProducerImplTest::::testSend_Not_OK()", "85": "ProducerImplTest::::testSend_Not_OK()", "86": "ProducerImplTest::::testSend_Not_OK()", "87": "ProducerImplTest::::testSend_Not_OK()", "88": "ProducerImplTest::::testSend_Not_OK()", "90": "ProducerImplTest::::testSend_WithException()", "91": "ProducerImplTest::::testSend_WithException()", "92": "ProducerImplTest::::testSend_WithException()", "93": "ProducerImplTest::::testSend_WithException()", "94": "ProducerImplTest::::testSend_WithException()", "95": "ProducerImplTest::::testSend_WithException()", "96": "ProducerImplTest::::testSend_WithException()", "97": "ProducerImplTest::::testSend_WithException()", "98": "ProducerImplTest::::testSend_WithException()", "99": "ProducerImplTest::::testSend_WithException()"}, "tests": [{"test_lines": [64, 74], "covered_lines": [39, 40, 49, 65, 66, 68, 69, 73, 74]}, {"test_lines": [76, 88], "covered_lines": [39, 40, 65, 66, 68, 69, 70, 71, 75, 76, 77]}, {"test_lines": [90, 99], "covered_lines": [39, 40, 65, 66, 75, 76, 77]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/openmessaging/src/main/java/io/openmessaging/rocketmq/utils/BeanUtils.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package io.openmessaging.rocketmq.utils;\n", "\n", "import io.openmessaging.KeyValue;\n", "import java.lang.reflect.InvocationTargetException;\n", "import java.lang.reflect.Method;\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "import java.util.Properties;\n", "import java.util.Set;\n", "import org.apache.commons.lang3.StringUtils;\n", "import org.apache.rocketmq.client.log.ClientLogger;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "\n", "public final class BeanUtils {\n", "    final static InternalLogger log = ClientLogger.getLog();\n", "\n", "    /**\n", "     * Maps primitive {@code Class}es to their corresponding wrapper {@code Class}.\n", "     */\n", "    private static Map<Class<?>, Class<?>> primitiveWrapperMap = new HashMap<Class<?>, Class<?>>();\n", "\n", "    static {\n", "        primitiveWrapperMap.put(Boolean.TYPE, Boolean.class);\n", "        primitiveWrapperMap.put(Byte.TYPE, Byte.class);\n", "        primitiveWrapperMap.put(Character.TYPE, Character.class);\n", "        primitiveWrapperMap.put(Short.TYPE, Short.class);\n", "        primitiveWrapperMap.put(Integer.TYPE, Integer.class);\n", "        primitiveWrapperMap.put(Long.TYPE, Long.class);\n", "        primitiveWrapperMap.put(Double.TYPE, Double.class);\n", "        primitiveWrapperMap.put(Float.TYPE, Float.class);\n", "        primitiveWrapperMap.put(Void.TYPE, Void.TYPE);\n", "    }\n", "\n", "    private static Map<Class<?>, Class<?>> wrapperMap = new HashMap<Class<?>, Class<?>>();\n", "\n", "    static {\n", "        for (final Class<?> primitiveClass : primitiveWrapperMap.keySet()) {\n", "            final Class<?> wrapperClass = primitiveWrapperMap.get(primitiveClass);\n", "            if (!primitiveClass.equals(wrapperClass)) {\n", "                wrapperMap.put(wrapperClass, primitiveClass);\n", "            }\n", "        }\n", "        wrapperMap.put(String.class, String.class);\n", "    }\n", "\n", "    /**\n", "     * <p>Populate the JavaBeans properties of the specified bean, based on\n", "     * the specified name/value pairs.  This method uses Java reflection APIs\n", "     * to identify corresponding \"property setter\" method names, and deals\n", "     * with setter arguments of type <Code>String</Code>, <Code>boolean</Code>,\n", "     * <Code>int</Code>, <Code>long</Code>, <Code>float</Code>, and\n", "     * <Code>double</Code>.</p>\n", "     *\n", "     * <p>The particular setter method to be called for each property is\n", "     * determined using the usual JavaBeans introspection mechanisms.  Thus,\n", "     * you may identify custom setter methods using a BeanInfo class that is\n", "     * associated with the class of the bean itself.  If no such BeanInfo\n", "     * class is available, the standard method name conversion (\"set\" plus\n", "     * the capitalized name of the property in question) is used.</p>\n", "     *\n", "     * <p><strong>NOTE</strong>:  It is contrary to the JavaBeans Specification\n", "     * to have more than one setter method (with different argument\n", "     * signatures) for the same property.</p>\n", "     *\n", "     * @param clazz JavaBean class whose properties are being populated\n", "     * @param properties Map keyed by property name, with the corresponding (String or String[]) value(s) to be set\n", "     * @param <T> Class type\n", "     * @return Class instance\n", "     */\n", "    public static <T> T populate(final Properties properties, final Class<T> clazz) {\n", "        T obj = null;\n", "        try {\n", "            obj = clazz.newInstance();\n", "            return populate(properties, obj);\n", "        } catch (Throwable e) {\n", "            log.warn(\"Error occurs !\", e);\n", "        }\n", "        return obj;\n", "    }\n", "\n", "    public static <T> T populate(final KeyValue properties, final Class<T> clazz) {\n", "        T obj = null;\n", "        try {\n", "            obj = clazz.newInstance();\n", "            return populate(properties, obj);\n", "        } catch (Throwable e) {\n", "            log.warn(\"Error occurs !\", e);\n", "        }\n", "        return obj;\n", "    }\n", "\n", "    public static Class<?> getMethodClass(Class<?> clazz, String methodName) {\n", "        Method[] methods = clazz.getMethods();\n", "        for (Method method : methods) {\n", "            if (method.getName().equalsIgnoreCase(methodName)) {\n", "                return method.getParameterTypes()[0];\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    public static void setProperties(Class<?> clazz, Object obj, String methodName,\n", "        Object value) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n", "        Class<?> parameterClass = getMethodClass(clazz, methodName);\n", "        Method setterMethod = clazz.getMethod(methodName, parameterClass);\n", "        if (parameterClass == Boolean.TYPE) {\n", "            setterMethod.invoke(obj, Boolean.valueOf(value.toString()));\n", "        } else if (parameterClass == Integer.TYPE) {\n", "            setterMethod.invoke(obj, Integer.valueOf(value.toString()));\n", "        } else if (parameterClass == Double.TYPE) {\n", "            setterMethod.invoke(obj, Double.valueOf(value.toString()));\n", "        } else if (parameterClass == Float.TYPE) {\n", "            setterMethod.invoke(obj, Float.valueOf(value.toString()));\n", "        } else if (parameterClass == Long.TYPE) {\n", "            setterMethod.invoke(obj, Long.valueOf(value.toString()));\n", "        } else\n", "            setterMethod.invoke(obj, value);\n", "    }\n", "\n", "    public static <T> T populate(final Properties properties, final T obj) {\n", "        Class<?> clazz = obj.getClass();\n", "        try {\n", "\n", "            Set<Map.Entry<Object, Object>> entries = properties.entrySet();\n", "            for (Map.Entry<Object, Object> entry : entries) {\n", "                String entryKey = entry.getKey().toString();\n", "                String[] keyGroup = entryKey.split(\"\\\\.\");\n", "                for (int i = 0; i < keyGroup.length; i++) {\n", "                    keyGroup[i] = keyGroup[i].toLowerCase();\n", "                    keyGroup[i] = StringUtils.capitalize(keyGroup[i]);\n", "                }\n", "                String beanFieldNameWithCapitalization = StringUtils.join(keyGroup);\n", "                try {\n", "                    setProperties(clazz, obj, \"set\" + beanFieldNameWithCapitalization, entry.getValue());\n", "                } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException ignored) {\n", "                    //ignored...\n", "                }\n", "            }\n", "        } catch (RuntimeException e) {\n", "            log.warn(\"Error occurs !\", e);\n", "        }\n", "        return obj;\n", "    }\n", "\n", "    public static <T> T populate(final KeyValue properties, final T obj) {\n", "        Class<?> clazz = obj.getClass();\n", "        try {\n", "\n", "            final Set<String> keySet = properties.keySet();\n", "            for (String key : keySet) {\n", "                String[] keyGroup = key.split(\"[\\\\._]\");\n", "                for (int i = 0; i < keyGroup.length; i++) {\n", "                    keyGroup[i] = keyGroup[i].toLowerCase();\n", "                    keyGroup[i] = StringUtils.capitalize(keyGroup[i]);\n", "                }\n", "                String beanFieldNameWithCapitalization = StringUtils.join(keyGroup);\n", "                try {\n", "                    setProperties(clazz, obj, \"set\" + beanFieldNameWithCapitalization, properties.getString(key));\n", "                } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException ignored) {\n", "                    //ignored...\n", "                }\n", "            }\n", "        } catch (RuntimeException e) {\n", "            log.warn(\"Error occurs !\", e);\n", "        }\n", "        return obj;\n", "    }\n", "}\n", "\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package io.openmessaging.rocketmq.utils;\n", "\n", "import io.openmessaging.KeyValue;\n", "import io.openmessaging.OMS;\n", "import io.openmessaging.rocketmq.config.ClientConfig;\n", "import io.openmessaging.rocketmq.domain.NonStandardKeys;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "\n", "public class BeanUtilsTest {\n", "    private KeyValue properties = OMS.newKeyValue();\n", "\n", "    public static class CustomizedConfig extends ClientConfig {\n", "        final static String STRING_TEST = \"string.test\";\n", "        String stringTest = \"foobar\";\n", "\n", "        final static String DOUBLE_TEST = \"double.test\";\n", "        double doubleTest = 123.0;\n", "\n", "        final static String LONG_TEST = \"long.test\";\n", "        long longTest = 123L;\n", "\n", "        String getStringTest() {\n", "            return stringTest;\n", "        }\n", "\n", "        public void setStringTest(String stringTest) {\n", "            this.stringTest = stringTest;\n", "        }\n", "\n", "        double getDoubleTest() {\n", "            return doubleTest;\n", "        }\n", "\n", "        public void setDoubleTest(final double doubleTest) {\n", "            this.doubleTest = doubleTest;\n", "        }\n", "\n", "        long getLongTest() {\n", "            return longTest;\n", "        }\n", "\n", "        public void setLongTest(final long longTest) {\n", "            this.longTest = longTest;\n", "        }\n", "\n", "        CustomizedConfig() {\n", "        }\n", "    }\n", "\n", "    @Before\n", "    public void init() {\n", "        properties.put(NonStandardKeys.MAX_REDELIVERY_TIMES, 120);\n", "        properties.put(CustomizedConfig.STRING_TEST, \"kaka\");\n", "        properties.put(NonStandardKeys.CONSUMER_GROUP, \"Default_Consumer_Group\");\n", "        properties.put(NonStandardKeys.MESSAGE_CONSUME_TIMEOUT, 101);\n", "\n", "        properties.put(CustomizedConfig.LONG_TEST, 1234567890L);\n", "        properties.put(CustomizedConfig.DOUBLE_TEST, 10.234);\n", "    }\n", "\n", "    @Test\n", "    public void testPopulate() {\n", "        CustomizedConfig config = BeanUtils.populate(properties, CustomizedConfig.class);\n", "\n", "        //RemotingConfig config = BeanUtils.populate(properties, RemotingConfig.class);\n", "        Assert.assertEquals(config.getRmqMaxRedeliveryTimes(), 120);\n", "        Assert.assertEquals(config.getStringTest(), \"kaka\");\n", "        Assert.assertEquals(config.getRmqConsumerGroup(), \"Default_Consumer_Group\");\n", "        Assert.assertEquals(config.getRmqMessageConsumeTimeout(), 101);\n", "        Assert.assertEquals(config.getLongTest(), 1234567890L);\n", "        Assert.assertEquals(config.getDoubleTest(), 10.234, 0.000001);\n", "    }\n", "\n", "    @Test\n", "    public void testPopulate_ExistObj() {\n", "        CustomizedConfig config = new CustomizedConfig();\n", "        config.setConsumerId(\"NewConsumerId\");\n", "\n", "        Assert.assertEquals(config.getConsumerId(), \"NewConsumerId\");\n", "\n", "        config = BeanUtils.populate(properties, config);\n", "\n", "        //RemotingConfig config = BeanUtils.populate(properties, RemotingConfig.class);\n", "        Assert.assertEquals(config.getRmqMaxRedeliveryTimes(), 120);\n", "        Assert.assertEquals(config.getStringTest(), \"kaka\");\n", "        Assert.assertEquals(config.getRmqConsumerGroup(), \"Default_Consumer_Group\");\n", "        Assert.assertEquals(config.getRmqMessageConsumeTimeout(), 101);\n", "        Assert.assertEquals(config.getLongTest(), 1234567890L);\n", "        Assert.assertEquals(config.getDoubleTest(), 10.234, 0.000001);\n", "    }\n", "\n", "}"], "method_lines_dic": {"BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)": [86, 95], "BeanUtils::::getMethodClass(java.lang.Class<?>,java.lang.String)": [108, 116], "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)": [118, 134], "BeanUtils::::populate(java.util.Properties,T)": [136, 159]}, "test_method_lines_dic": {"BeanUtilsTest.CustomizedConfig::::getStringTest()": [40, 42], "BeanUtilsTest.CustomizedConfig::::setStringTest(java.lang.String)": [44, 46], "BeanUtilsTest.CustomizedConfig::::getDoubleTest()": [48, 50], "BeanUtilsTest.CustomizedConfig::::setDoubleTest(double)": [52, 54], "BeanUtilsTest.CustomizedConfig::::getLongTest()": [56, 58], "BeanUtilsTest.CustomizedConfig::::setLongTest(long)": [60, 62], "BeanUtilsTest::::init()": [68, 77], "BeanUtilsTest::::testPopulate()": [79, 90], "BeanUtilsTest::::testPopulate_ExistObj()": [92, 108]}, "reverse_method_lines_dic": {"86": "BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)", "87": "BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)", "88": "BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)", "89": "BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)", "90": "BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)", "91": "BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)", "92": "BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)", "93": "BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)", "94": "BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)", "95": "BeanUtils::::populate(java.util.Properties,java.lang.Class<T>)", "108": "BeanUtils::::getMethodClass(java.lang.Class<?>,java.lang.String)", "109": "BeanUtils::::getMethodClass(java.lang.Class<?>,java.lang.String)", "110": "BeanUtils::::getMethodClass(java.lang.Class<?>,java.lang.String)", "111": "BeanUtils::::getMethodClass(java.lang.Class<?>,java.lang.String)", "112": "BeanUtils::::getMethodClass(java.lang.Class<?>,java.lang.String)", "113": "BeanUtils::::getMethodClass(java.lang.Class<?>,java.lang.String)", "114": "BeanUtils::::getMethodClass(java.lang.Class<?>,java.lang.String)", "115": "BeanUtils::::getMethodClass(java.lang.Class<?>,java.lang.String)", "116": "BeanUtils::::getMethodClass(java.lang.Class<?>,java.lang.String)", "118": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "119": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "120": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "121": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "122": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "123": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "124": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "125": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "126": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "127": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "128": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "129": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "130": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "131": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "132": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "133": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "134": "BeanUtils::::setProperties(java.lang.Class<?>,java.lang.Object,java.lang.String,java.lang.Object)", "136": "BeanUtils::::populate(java.util.Properties,T)", "137": "BeanUtils::::populate(java.util.Properties,T)", "138": "BeanUtils::::populate(java.util.Properties,T)", "139": "BeanUtils::::populate(java.util.Properties,T)", "140": "BeanUtils::::populate(java.util.Properties,T)", "141": "BeanUtils::::populate(java.util.Properties,T)", "142": "BeanUtils::::populate(java.util.Properties,T)", "143": "BeanUtils::::populate(java.util.Properties,T)", "144": "BeanUtils::::populate(java.util.Properties,T)", "145": "BeanUtils::::populate(java.util.Properties,T)", "146": "BeanUtils::::populate(java.util.Properties,T)", "147": "BeanUtils::::populate(java.util.Properties,T)", "148": "BeanUtils::::populate(java.util.Properties,T)", "149": "BeanUtils::::populate(java.util.Properties,T)", "150": "BeanUtils::::populate(java.util.Properties,T)", "151": "BeanUtils::::populate(java.util.Properties,T)", "152": "BeanUtils::::populate(java.util.Properties,T)", "153": "BeanUtils::::populate(java.util.Properties,T)", "154": "BeanUtils::::populate(java.util.Properties,T)", "155": "BeanUtils::::populate(java.util.Properties,T)", "156": "BeanUtils::::populate(java.util.Properties,T)", "157": "BeanUtils::::populate(java.util.Properties,T)", "158": "BeanUtils::::populate(java.util.Properties,T)", "159": "BeanUtils::::populate(java.util.Properties,T)"}, "test_reverse_method_lines_dic": {"40": "BeanUtilsTest.CustomizedConfig::::getStringTest()", "41": "BeanUtilsTest.CustomizedConfig::::getStringTest()", "42": "BeanUtilsTest.CustomizedConfig::::getStringTest()", "44": "BeanUtilsTest.CustomizedConfig::::setStringTest(java.lang.String)", "45": "BeanUtilsTest.CustomizedConfig::::setStringTest(java.lang.String)", "46": "BeanUtilsTest.CustomizedConfig::::setStringTest(java.lang.String)", "48": "BeanUtilsTest.CustomizedConfig::::getDoubleTest()", "49": "BeanUtilsTest.CustomizedConfig::::getDoubleTest()", "50": "BeanUtilsTest.CustomizedConfig::::getDoubleTest()", "52": "BeanUtilsTest.CustomizedConfig::::setDoubleTest(double)", "53": "BeanUtilsTest.CustomizedConfig::::setDoubleTest(double)", "54": "BeanUtilsTest.CustomizedConfig::::setDoubleTest(double)", "56": "BeanUtilsTest.CustomizedConfig::::getLongTest()", "57": "BeanUtilsTest.CustomizedConfig::::getLongTest()", "58": "BeanUtilsTest.CustomizedConfig::::getLongTest()", "60": "BeanUtilsTest.CustomizedConfig::::setLongTest(long)", "61": "BeanUtilsTest.CustomizedConfig::::setLongTest(long)", "62": "BeanUtilsTest.CustomizedConfig::::setLongTest(long)", "68": "BeanUtilsTest::::init()", "69": "BeanUtilsTest::::init()", "70": "BeanUtilsTest::::init()", "71": "BeanUtilsTest::::init()", "72": "BeanUtilsTest::::init()", "73": "BeanUtilsTest::::init()", "74": "BeanUtilsTest::::init()", "75": "BeanUtilsTest::::init()", "76": "BeanUtilsTest::::init()", "77": "BeanUtilsTest::::init()", "79": "BeanUtilsTest::::testPopulate()", "80": "BeanUtilsTest::::testPopulate()", "81": "BeanUtilsTest::::testPopulate()", "82": "BeanUtilsTest::::testPopulate()", "83": "BeanUtilsTest::::testPopulate()", "84": "BeanUtilsTest::::testPopulate()", "85": "BeanUtilsTest::::testPopulate()", "86": "BeanUtilsTest::::testPopulate()", "87": "BeanUtilsTest::::testPopulate()", "88": "BeanUtilsTest::::testPopulate()", "89": "BeanUtilsTest::::testPopulate()", "90": "BeanUtilsTest::::testPopulate()", "92": "BeanUtilsTest::::testPopulate_ExistObj()", "93": "BeanUtilsTest::::testPopulate_ExistObj()", "94": "BeanUtilsTest::::testPopulate_ExistObj()", "95": "BeanUtilsTest::::testPopulate_ExistObj()", "96": "BeanUtilsTest::::testPopulate_ExistObj()", "97": "BeanUtilsTest::::testPopulate_ExistObj()", "98": "BeanUtilsTest::::testPopulate_ExistObj()", "99": "BeanUtilsTest::::testPopulate_ExistObj()", "100": "BeanUtilsTest::::testPopulate_ExistObj()", "101": "BeanUtilsTest::::testPopulate_ExistObj()", "102": "BeanUtilsTest::::testPopulate_ExistObj()", "103": "BeanUtilsTest::::testPopulate_ExistObj()", "104": "BeanUtilsTest::::testPopulate_ExistObj()", "105": "BeanUtilsTest::::testPopulate_ExistObj()", "106": "BeanUtilsTest::::testPopulate_ExistObj()", "107": "BeanUtilsTest::::testPopulate_ExistObj()", "108": "BeanUtilsTest::::testPopulate_ExistObj()"}, "tests": [{"test_lines": [79, 90], "covered_lines": [31, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 53, 54, 55, 56, 58, 59, 60, 98, 100, 101, 109, 110, 111, 112, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 162, 165, 166, 167, 168, 169, 170, 172, 174, 177, 178, 181, 182]}, {"test_lines": [92, 108], "covered_lines": [31, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 53, 54, 55, 56, 58, 59, 60, 109, 110, 111, 112, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 162, 165, 166, 167, 168, 169, 170, 172, 174, 177, 178, 181, 182]}]}}