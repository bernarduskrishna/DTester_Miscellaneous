{"/bernard/dataset_construction/prep/repos/imglib/core/src/main/java/cn/core/tool/Range.java":{"class_content":["package cn.core.tool;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.utils.ObjectUtils;\n","\n","/**\n"," * Indicates a range whose boundary is [{@link Range#min}, {@link Range#max}].\n"," *\n"," * @param <T> The type of range's element.\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class Range<T extends Comparable<T>> {\n","\n","    private final T min;\n","\n","    private final T max;\n","\n","    public Range(T min, T max) {\n","        ObjectUtils.excNull(min, \"The lower bound of the range is null.\");\n","        ObjectUtils.excNull(max, \"The upper bound of the range is null.\");\n","        if (min.compareTo(max) > 0) {\n","            throw new InvalidSettingException(\"The lower bound has crossed the upper bound.\");\n","        }\n","        this.min = min;\n","        this.max = max;\n","    }\n","\n","    public T getMin() {\n","        return min;\n","    }\n","\n","    public T getMax() {\n","        return max;\n","    }\n","\n","    public boolean within(T val) {\n","        return !notWithin(val);\n","    }\n","\n","    public boolean notWithin(T val) {\n","        boolean lessOfMin = val.compareTo(min) < 0;\n","        boolean greatOfMax = val.compareTo(max) > 0;\n","        return lessOfMin || greatOfMax;\n","    }\n","\n","    public static Range<Short> ofShort(Short min, Short max) {\n","        return new Range<>(min, max);\n","    }\n","\n","    public static Range<Integer> ofInt(Integer min, Integer max) {\n","        return new Range<>(min, max);\n","    }\n","\n","    public static Range<Long> ofLong(Long min, Long max) {\n","        return new Range<>(min, max);\n","    }\n","\n","    public static Range<Float> ofFloat(Float min, Float max) {\n","        return new Range<>(min, max);\n","    }\n","\n","    public static Range<Double> ofDouble(Double min, Double max) {return new Range<>(min, max); }\n","\n","}\n"],"test_content":["package cn.core.tool;\n","\n","import cn.core.ex.InvalidSettingException;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.math.BigDecimal;\n","\n","public class RangeTest {\n","\n","    @Test\n","    public void test_notWithin_correctUsage() {\n","        // given\n","        BigDecimal lower = BigDecimal.ONE;\n","        BigDecimal upper = BigDecimal.valueOf(20);\n","        Range<BigDecimal> range = new Range<>(lower, upper);\n","\n","        // when\n","        boolean notWithin = range.notWithin(BigDecimal.valueOf(58));\n","\n","        // then\n","        Assert.assertTrue(notWithin);\n","        Assert.assertEquals(lower, range.getMin());\n","        Assert.assertEquals(upper, range.getMax());\n","    }\n","\n","    @Test\n","    public void testEx_constructor_nullMin() {\n","        NullPointerException exception = Assert.assertThrows(NullPointerException.class,\n","                () -> new Range<>(null, 10));\n","        Assert.assertEquals(\"The lower bound of the range is null.\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_constructor_nullMax() {\n","        NullPointerException exception = Assert.assertThrows(NullPointerException.class,\n","                () -> new Range<>(2, null));\n","        Assert.assertEquals(\"The upper bound of the range is null.\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_constructor_minCrossedMax() {\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> new Range<>(20, 17));\n","        Assert.assertEquals(\"The lower bound has crossed the upper bound.\",\n","                exception.getMessage());\n","    }\n","\n","}"],"method_lines_dic":{"Range::::getMin()":[29,31],"Range::::getMax()":[33,35],"Range::::within(T)":[37,39],"Range::::notWithin(T)":[41,45],"Range::::ofShort(java.lang.Short,java.lang.Short)":[47,49],"Range::::ofInt(java.lang.Integer,java.lang.Integer)":[51,53],"Range::::ofLong(java.lang.Long,java.lang.Long)":[55,57],"Range::::ofFloat(java.lang.Float,java.lang.Float)":[59,61],"Range::::ofDouble(java.lang.Double,java.lang.Double)":[63,63]},"test_method_lines_dic":{"RangeTest::::test_notWithin_correctUsage()":[10,24],"RangeTest::::testEx_constructor_nullMin()":[26,32],"RangeTest::::testEx_constructor_nullMax()":[34,40],"RangeTest::::testEx_constructor_minCrossedMax()":[42,48]},"reverse_method_lines_dic":{"29":"Range::::getMin()","30":"Range::::getMin()","31":"Range::::getMin()","33":"Range::::getMax()","34":"Range::::getMax()","35":"Range::::getMax()","37":"Range::::within(T)","38":"Range::::within(T)","39":"Range::::within(T)","41":"Range::::notWithin(T)","42":"Range::::notWithin(T)","43":"Range::::notWithin(T)","44":"Range::::notWithin(T)","45":"Range::::notWithin(T)","47":"Range::::ofShort(java.lang.Short,java.lang.Short)","48":"Range::::ofShort(java.lang.Short,java.lang.Short)","49":"Range::::ofShort(java.lang.Short,java.lang.Short)","51":"Range::::ofInt(java.lang.Integer,java.lang.Integer)","52":"Range::::ofInt(java.lang.Integer,java.lang.Integer)","53":"Range::::ofInt(java.lang.Integer,java.lang.Integer)","55":"Range::::ofLong(java.lang.Long,java.lang.Long)","56":"Range::::ofLong(java.lang.Long,java.lang.Long)","57":"Range::::ofLong(java.lang.Long,java.lang.Long)","59":"Range::::ofFloat(java.lang.Float,java.lang.Float)","60":"Range::::ofFloat(java.lang.Float,java.lang.Float)","61":"Range::::ofFloat(java.lang.Float,java.lang.Float)","63":"Range::::ofDouble(java.lang.Double,java.lang.Double)"},"test_reverse_method_lines_dic":{"10":"RangeTest::::test_notWithin_correctUsage()","11":"RangeTest::::test_notWithin_correctUsage()","12":"RangeTest::::test_notWithin_correctUsage()","13":"RangeTest::::test_notWithin_correctUsage()","14":"RangeTest::::test_notWithin_correctUsage()","15":"RangeTest::::test_notWithin_correctUsage()","16":"RangeTest::::test_notWithin_correctUsage()","17":"RangeTest::::test_notWithin_correctUsage()","18":"RangeTest::::test_notWithin_correctUsage()","19":"RangeTest::::test_notWithin_correctUsage()","20":"RangeTest::::test_notWithin_correctUsage()","21":"RangeTest::::test_notWithin_correctUsage()","22":"RangeTest::::test_notWithin_correctUsage()","23":"RangeTest::::test_notWithin_correctUsage()","24":"RangeTest::::test_notWithin_correctUsage()","26":"RangeTest::::testEx_constructor_nullMin()","27":"RangeTest::::testEx_constructor_nullMin()","28":"RangeTest::::testEx_constructor_nullMin()","29":"RangeTest::::testEx_constructor_nullMin()","30":"RangeTest::::testEx_constructor_nullMin()","31":"RangeTest::::testEx_constructor_nullMin()","32":"RangeTest::::testEx_constructor_nullMin()","34":"RangeTest::::testEx_constructor_nullMax()","35":"RangeTest::::testEx_constructor_nullMax()","36":"RangeTest::::testEx_constructor_nullMax()","37":"RangeTest::::testEx_constructor_nullMax()","38":"RangeTest::::testEx_constructor_nullMax()","39":"RangeTest::::testEx_constructor_nullMax()","40":"RangeTest::::testEx_constructor_nullMax()","42":"RangeTest::::testEx_constructor_minCrossedMax()","43":"RangeTest::::testEx_constructor_minCrossedMax()","44":"RangeTest::::testEx_constructor_minCrossedMax()","45":"RangeTest::::testEx_constructor_minCrossedMax()","46":"RangeTest::::testEx_constructor_minCrossedMax()","47":"RangeTest::::testEx_constructor_minCrossedMax()","48":"RangeTest::::testEx_constructor_minCrossedMax()"},"tests":[{"test_lines":[10,24],"covered_lines":[19,20,21,22,25,26,27,30,34,42,43,44],"label":"Range::::notWithin(T)"},{"test_lines":[26,32],"covered_lines":[19],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[34,40],"covered_lines":[19,20],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[42,48],"covered_lines":[19,20,21,22,23],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/imglib/core/src/main/java/cn/core/in/FileImageSource.java":{"class_content":["package cn.core.in;\n","\n","import cn.core.ex.HandlingException;\n","import cn.core.ex.UnsupportedFormatException;\n","import cn.core.utils.ObjectUtils;\n","import cn.core.utils.StringUtils;\n","\n","import javax.imageio.IIOException;\n","import javax.imageio.ImageIO;\n","import javax.imageio.ImageReadParam;\n","import javax.imageio.ImageReader;\n","import javax.imageio.stream.ImageInputStream;\n","import java.awt.image.BufferedImage;\n","import java.io.File;\n","import java.io.IOException;\n","import java.util.Iterator;\n","\n","/**\n"," * Buffered image data source whose from image File.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class FileImageSource implements BufferedImageSource<File> {\n","\n","    protected final File source;\n","    protected boolean readCompleted = false;\n","    protected String originalFormatName;\n","\n","    public FileImageSource(File file) {\n","        if (ObjectUtils.isNull(file)) {\n","            throw new NullPointerException(\"File is null.\");\n","        }\n","        this.source = file;\n","    }\n","\n","    public FileImageSource(String filename) {\n","        if (StringUtils.isEmpty(filename)) {\n","            throw new NullPointerException(\"File name is null.\");\n","        }\n","        this.source = new File(filename);\n","    }\n","\n","    @Override\n","    public BufferedImage read() throws IOException {\n","        if (readCompleted) {\n","            throw new HandlingException(\"File reading has already completed.\");\n","        }\n","        // check the file is readable\n","        if (!source.canRead()) {\n","            throw new IIOException(\"Cannot read the source file.\");\n","        }\n","        // get image input stream\n","        ImageInputStream stream = ImageIO.createImageInputStream(source);\n","\n","        // read from file\n","        BufferedImage bi = read(stream);\n","\n","        // mark the status to completed\n","        completeRead();\n","        return bi;\n","    }\n","\n","    protected BufferedImage read(ImageInputStream stream) throws IOException {\n","        Iterator<ImageReader> iter = ImageIO.getImageReaders(stream);\n","        if (!iter.hasNext()) {\n","            // can not parse input stream\n","            stream.close();\n","            throw new UnsupportedFormatException(\"No suitable ImageReader found for source file.\");\n","        }\n","\n","        ImageReader reader = iter.next();\n","        ImageReadParam param = reader.getDefaultReadParam();\n","        reader.setInput(stream, true, true);\n","\n","        // set the format\n","        originalFormatName = reader.getFormatName();\n","\n","        BufferedImage bi;\n","        try {\n","            bi = reader.read(0, param);\n","        } finally {\n","            reader.dispose();\n","            stream.close();\n","        }\n","        return bi;\n","    }\n","\n","    @Override\n","    public String getOriginalFormatName() {\n","        return originalFormatName;\n","    }\n","\n","    @Override\n","    public File getSource() {\n","        return source;\n","    }\n","\n","    @Override\n","    public boolean isReadCompleted() {\n","        return readCompleted;\n","    }\n","\n","    protected void completeRead() {\n","        this.readCompleted = true;\n","    }\n","\n","}\n"],"test_content":["package cn.core.in;\n","\n","import cn.core.TestUtils;\n","import org.junit.Assert;\n","import org.junit.Rule;\n","import org.junit.Test;\n","import org.junit.rules.TemporaryFolder;\n","import java.io.File;\n","import java.io.IOException;\n","\n","public class FileImageSourceTest {\n","\n","    @Rule\n","    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n","\n","    @Test\n","    public void test_read_correctUsage() throws IOException {\n","        // given\n","        File inputFile = TestUtils.copyResourceToTemporaryFile(\n","                \"input/nothing.jpg\",\n","                temporaryFolder);\n","\n","        // when\n","        FileImageSource source = new FileImageSource(inputFile);\n","        source.read();\n","\n","        // then\n","        Assert.assertEquals(inputFile, source.getSource());\n","        Assert.assertEquals(\"JPEG\", source.getOriginalFormatName());\n","        Assert.assertTrue(source.isReadCompleted());\n","    }\n","\n","    @Test\n","    public void testEx_constructor_nullFile() {\n","        NullPointerException exception = Assert.assertThrows(NullPointerException.class,\n","                () -> new FileImageSource((File) null));\n","        Assert.assertEquals(\"File is null.\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_constructor_emptyFilename() {\n","        NullPointerException exception = Assert.assertThrows(NullPointerException.class,\n","                () -> new FileImageSource(\"\"));\n","        Assert.assertEquals(\"File name is null.\",\n","                exception.getMessage());\n","    }\n","}"],"method_lines_dic":{"FileImageSource::::read()":[44,62],"FileImageSource::::read(javax.imageio.stream.ImageInputStream)":[64,87],"FileImageSource::::getOriginalFormatName()":[89,92],"FileImageSource::::getSource()":[94,97],"FileImageSource::::isReadCompleted()":[99,102],"FileImageSource::::completeRead()":[104,106]},"test_method_lines_dic":{"FileImageSourceTest::::test_read_correctUsage()":[16,31],"FileImageSourceTest::::testEx_constructor_nullFile()":[33,39],"FileImageSourceTest::::testEx_constructor_emptyFilename()":[41,47]},"reverse_method_lines_dic":{"44":"FileImageSource::::read()","45":"FileImageSource::::read()","46":"FileImageSource::::read()","47":"FileImageSource::::read()","48":"FileImageSource::::read()","49":"FileImageSource::::read()","50":"FileImageSource::::read()","51":"FileImageSource::::read()","52":"FileImageSource::::read()","53":"FileImageSource::::read()","54":"FileImageSource::::read()","55":"FileImageSource::::read()","56":"FileImageSource::::read()","57":"FileImageSource::::read()","58":"FileImageSource::::read()","59":"FileImageSource::::read()","60":"FileImageSource::::read()","61":"FileImageSource::::read()","62":"FileImageSource::::read()","64":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","65":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","66":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","67":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","68":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","69":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","70":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","71":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","72":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","73":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","74":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","75":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","76":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","77":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","78":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","79":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","80":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","81":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","82":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","83":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","84":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","85":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","86":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","87":"FileImageSource::::read(javax.imageio.stream.ImageInputStream)","89":"FileImageSource::::getOriginalFormatName()","90":"FileImageSource::::getOriginalFormatName()","91":"FileImageSource::::getOriginalFormatName()","92":"FileImageSource::::getOriginalFormatName()","94":"FileImageSource::::getSource()","95":"FileImageSource::::getSource()","96":"FileImageSource::::getSource()","97":"FileImageSource::::getSource()","99":"FileImageSource::::isReadCompleted()","100":"FileImageSource::::isReadCompleted()","101":"FileImageSource::::isReadCompleted()","102":"FileImageSource::::isReadCompleted()","104":"FileImageSource::::completeRead()","105":"FileImageSource::::completeRead()","106":"FileImageSource::::completeRead()"},"test_reverse_method_lines_dic":{"16":"FileImageSourceTest::::test_read_correctUsage()","17":"FileImageSourceTest::::test_read_correctUsage()","18":"FileImageSourceTest::::test_read_correctUsage()","19":"FileImageSourceTest::::test_read_correctUsage()","20":"FileImageSourceTest::::test_read_correctUsage()","21":"FileImageSourceTest::::test_read_correctUsage()","22":"FileImageSourceTest::::test_read_correctUsage()","23":"FileImageSourceTest::::test_read_correctUsage()","24":"FileImageSourceTest::::test_read_correctUsage()","25":"FileImageSourceTest::::test_read_correctUsage()","26":"FileImageSourceTest::::test_read_correctUsage()","27":"FileImageSourceTest::::test_read_correctUsage()","28":"FileImageSourceTest::::test_read_correctUsage()","29":"FileImageSourceTest::::test_read_correctUsage()","30":"FileImageSourceTest::::test_read_correctUsage()","31":"FileImageSourceTest::::test_read_correctUsage()","33":"FileImageSourceTest::::testEx_constructor_nullFile()","34":"FileImageSourceTest::::testEx_constructor_nullFile()","35":"FileImageSourceTest::::testEx_constructor_nullFile()","36":"FileImageSourceTest::::testEx_constructor_nullFile()","37":"FileImageSourceTest::::testEx_constructor_nullFile()","38":"FileImageSourceTest::::testEx_constructor_nullFile()","39":"FileImageSourceTest::::testEx_constructor_nullFile()","41":"FileImageSourceTest::::testEx_constructor_emptyFilename()","42":"FileImageSourceTest::::testEx_constructor_emptyFilename()","43":"FileImageSourceTest::::testEx_constructor_emptyFilename()","44":"FileImageSourceTest::::testEx_constructor_emptyFilename()","45":"FileImageSourceTest::::testEx_constructor_emptyFilename()","46":"FileImageSourceTest::::testEx_constructor_emptyFilename()","47":"FileImageSourceTest::::testEx_constructor_emptyFilename()"},"tests":[{"test_lines":[16,31],"covered_lines":[27,30,31,34,35,46,50,54,57,60,61,65,66,72,73,74,77,81,83,84,85,86,91,96,101,105,106],"label":"FileImageSource::::read()"},{"test_lines":[33,39],"covered_lines":[27,30,31,32],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[41,47],"covered_lines":[27,37,38,39],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/imglib/core/src/main/java/cn/core/in/InputStreamImageSource.java":{"class_content":["package cn.core.in;\n","\n","import cn.core.ex.UnsupportedFormatException;\n","import cn.core.utils.ObjectUtils;\n","import javax.imageio.ImageIO;\n","import javax.imageio.ImageReadParam;\n","import javax.imageio.ImageReader;\n","import javax.imageio.stream.ImageInputStream;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.util.Iterator;\n","\n","/**\n"," * Buffered image data source whose from input stream.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class InputStreamImageSource implements BufferedImageSource<InputStream> {\n","\n","    protected final InputStream source;\n","    protected boolean readCompleted = false;\n","    protected String originalFormatName;\n","\n","    public InputStreamImageSource(InputStream source) {\n","        if (ObjectUtils.isNull(source)) {\n","            throw new NullPointerException(\"InputStream is null.\");\n","        }\n","        this.source = source;\n","    }\n","\n","    @Override\n","    public BufferedImage read() throws IOException {\n","        ImageInputStream iis = ImageIO.createImageInputStream(source);\n","        Iterator<ImageReader> readers = ImageIO.getImageReaders(iis);\n","        if (!readers.hasNext()) {\n","            // can not parse input stream\n","            iis.close();\n","            throw new UnsupportedFormatException(\"No suitable ImageReader found for source input stream.\");\n","        }\n","\n","        ImageReader reader = readers.next();\n","        ImageReadParam param = reader.getDefaultReadParam();\n","        reader.setInput(iis);\n","\n","        BufferedImage image;\n","        try {\n","            // original format name\n","            originalFormatName = reader.getFormatName();\n","            // read image\n","            image = reader.read(0, param);\n","        } finally {\n","            reader.dispose();\n","            iis.close();\n","        }\n","\n","        readCompleted = true;\n","        return image;\n","    }\n","\n","\n","    @Override\n","    public String getOriginalFormatName() {\n","        return originalFormatName;\n","    }\n","\n","    @Override\n","    public InputStream getSource() {\n","        return source;\n","    }\n","\n","    @Override\n","    public boolean isReadCompleted() {\n","        return readCompleted;\n","    }\n","\n","}\n"],"test_content":["package cn.core.in;\n","\n","import cn.core.TestUtils;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.io.IOException;\n","import java.io.InputStream;\n","\n","public class InputStreamImageSourceTest {\n","\n","    @Test\n","    public void test_read_correctUsage() throws IOException {\n","        // given\n","        InputStream inputStream = TestUtils.getResourceStream(\"input/nothing.jpg\");\n","\n","        // when\n","        InputStreamImageSource source = new InputStreamImageSource(inputStream);\n","        source.read();\n","\n","        // then\n","        Assert.assertEquals(inputStream, source.getSource());\n","        Assert.assertTrue(source.isReadCompleted());\n","    }\n","\n","    @Test\n","    public void testEx_constructor_nullBufferedImage() {\n","        NullPointerException exception = Assert.assertThrows(NullPointerException.class,\n","                () -> new ThisBufferedImageSource(null));\n","        Assert.assertEquals(\"BufferedImage is null.\",\n","                exception.getMessage());\n","    }\n","\n","}"],"method_lines_dic":{"InputStreamImageSource::::read()":[33,60],"InputStreamImageSource::::getOriginalFormatName()":[63,66],"InputStreamImageSource::::getSource()":[68,71],"InputStreamImageSource::::isReadCompleted()":[73,76]},"test_method_lines_dic":{"InputStreamImageSourceTest::::test_read_correctUsage()":[11,23],"InputStreamImageSourceTest::::testEx_constructor_nullBufferedImage()":[25,31]},"reverse_method_lines_dic":{"33":"InputStreamImageSource::::read()","34":"InputStreamImageSource::::read()","35":"InputStreamImageSource::::read()","36":"InputStreamImageSource::::read()","37":"InputStreamImageSource::::read()","38":"InputStreamImageSource::::read()","39":"InputStreamImageSource::::read()","40":"InputStreamImageSource::::read()","41":"InputStreamImageSource::::read()","42":"InputStreamImageSource::::read()","43":"InputStreamImageSource::::read()","44":"InputStreamImageSource::::read()","45":"InputStreamImageSource::::read()","46":"InputStreamImageSource::::read()","47":"InputStreamImageSource::::read()","48":"InputStreamImageSource::::read()","49":"InputStreamImageSource::::read()","50":"InputStreamImageSource::::read()","51":"InputStreamImageSource::::read()","52":"InputStreamImageSource::::read()","53":"InputStreamImageSource::::read()","54":"InputStreamImageSource::::read()","55":"InputStreamImageSource::::read()","56":"InputStreamImageSource::::read()","57":"InputStreamImageSource::::read()","58":"InputStreamImageSource::::read()","59":"InputStreamImageSource::::read()","60":"InputStreamImageSource::::read()","63":"InputStreamImageSource::::getOriginalFormatName()","64":"InputStreamImageSource::::getOriginalFormatName()","65":"InputStreamImageSource::::getOriginalFormatName()","66":"InputStreamImageSource::::getOriginalFormatName()","68":"InputStreamImageSource::::getSource()","69":"InputStreamImageSource::::getSource()","70":"InputStreamImageSource::::getSource()","71":"InputStreamImageSource::::getSource()","73":"InputStreamImageSource::::isReadCompleted()","74":"InputStreamImageSource::::isReadCompleted()","75":"InputStreamImageSource::::isReadCompleted()","76":"InputStreamImageSource::::isReadCompleted()"},"test_reverse_method_lines_dic":{"11":"InputStreamImageSourceTest::::test_read_correctUsage()","12":"InputStreamImageSourceTest::::test_read_correctUsage()","13":"InputStreamImageSourceTest::::test_read_correctUsage()","14":"InputStreamImageSourceTest::::test_read_correctUsage()","15":"InputStreamImageSourceTest::::test_read_correctUsage()","16":"InputStreamImageSourceTest::::test_read_correctUsage()","17":"InputStreamImageSourceTest::::test_read_correctUsage()","18":"InputStreamImageSourceTest::::test_read_correctUsage()","19":"InputStreamImageSourceTest::::test_read_correctUsage()","20":"InputStreamImageSourceTest::::test_read_correctUsage()","21":"InputStreamImageSourceTest::::test_read_correctUsage()","22":"InputStreamImageSourceTest::::test_read_correctUsage()","23":"InputStreamImageSourceTest::::test_read_correctUsage()","25":"InputStreamImageSourceTest::::testEx_constructor_nullBufferedImage()","26":"InputStreamImageSourceTest::::testEx_constructor_nullBufferedImage()","27":"InputStreamImageSourceTest::::testEx_constructor_nullBufferedImage()","28":"InputStreamImageSourceTest::::testEx_constructor_nullBufferedImage()","29":"InputStreamImageSourceTest::::testEx_constructor_nullBufferedImage()","30":"InputStreamImageSourceTest::::testEx_constructor_nullBufferedImage()","31":"InputStreamImageSourceTest::::testEx_constructor_nullBufferedImage()"},"tests":[{"test_lines":[11,23],"covered_lines":[23,26,27,30,31,35,36,37,43,44,45,50,52,54,55,56,58,59,70,75],"label":"InputStreamImageSource::::read()"}]},"/bernard/dataset_construction/prep/repos/imglib/core/src/main/java/cn/core/in/ThisBufferedImageSource.java":{"class_content":["package cn.core.in;\n","\n","import cn.core.utils.ObjectUtils;\n","\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","/**\n"," * Buffered image data source whose from BufferedImage object.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class ThisBufferedImageSource implements BufferedImageSource<BufferedImage> {\n","\n","    private final BufferedImage image;\n","    protected boolean readCompleted = false;\n","\n","    public ThisBufferedImageSource(BufferedImage source) {\n","        if (ObjectUtils.isNull(source)) {\n","            throw new NullPointerException(\"BufferedImage is null.\");\n","        }\n","        this.image = source;\n","    }\n","\n","    @Override\n","    public BufferedImage read() throws IOException {\n","        readCompleted = true;\n","        return image;\n","    }\n","\n","    @Override\n","    public String getOriginalFormatName() {\n","        return null;\n","    }\n","\n","    @Override\n","    public BufferedImage getSource() {\n","        return image;\n","    }\n","\n","    @Override\n","    public boolean isReadCompleted() {\n","        return readCompleted;\n","    }\n","}\n"],"test_content":["package cn.core.in;\n","\n","import cn.core.TestUtils;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","public class ThisBufferedImageSourceTest {\n","\n","    @Test\n","    public void test_read_correctUsage() throws IOException {\n","        // given\n","        BufferedImage originalImage = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","\n","        // when\n","        ThisBufferedImageSource source = new ThisBufferedImageSource(originalImage);\n","        BufferedImage readImage = source.read();\n","\n","        // then\n","        Assert.assertEquals(originalImage, source.getSource());\n","        Assert.assertEquals(originalImage, readImage);\n","        Assert.assertTrue(source.isReadCompleted());\n","    }\n","\n","    @Test\n","    public void testEx_constructor_nullBufferedImage() {\n","        NullPointerException exception = Assert.assertThrows(NullPointerException.class,\n","                () -> new ThisBufferedImageSource(null));\n","        Assert.assertEquals(\"BufferedImage is null.\",\n","                exception.getMessage());\n","    }\n","\n","}"],"method_lines_dic":{"ThisBufferedImageSource::::read()":[26,30],"ThisBufferedImageSource::::getOriginalFormatName()":[32,35],"ThisBufferedImageSource::::getSource()":[37,40],"ThisBufferedImageSource::::isReadCompleted()":[42,45]},"test_method_lines_dic":{"ThisBufferedImageSourceTest::::test_read_correctUsage()":[11,24],"ThisBufferedImageSourceTest::::testEx_constructor_nullBufferedImage()":[26,32]},"reverse_method_lines_dic":{"26":"ThisBufferedImageSource::::read()","27":"ThisBufferedImageSource::::read()","28":"ThisBufferedImageSource::::read()","29":"ThisBufferedImageSource::::read()","30":"ThisBufferedImageSource::::read()","32":"ThisBufferedImageSource::::getOriginalFormatName()","33":"ThisBufferedImageSource::::getOriginalFormatName()","34":"ThisBufferedImageSource::::getOriginalFormatName()","35":"ThisBufferedImageSource::::getOriginalFormatName()","37":"ThisBufferedImageSource::::getSource()","38":"ThisBufferedImageSource::::getSource()","39":"ThisBufferedImageSource::::getSource()","40":"ThisBufferedImageSource::::getSource()","42":"ThisBufferedImageSource::::isReadCompleted()","43":"ThisBufferedImageSource::::isReadCompleted()","44":"ThisBufferedImageSource::::isReadCompleted()","45":"ThisBufferedImageSource::::isReadCompleted()"},"test_reverse_method_lines_dic":{"11":"ThisBufferedImageSourceTest::::test_read_correctUsage()","12":"ThisBufferedImageSourceTest::::test_read_correctUsage()","13":"ThisBufferedImageSourceTest::::test_read_correctUsage()","14":"ThisBufferedImageSourceTest::::test_read_correctUsage()","15":"ThisBufferedImageSourceTest::::test_read_correctUsage()","16":"ThisBufferedImageSourceTest::::test_read_correctUsage()","17":"ThisBufferedImageSourceTest::::test_read_correctUsage()","18":"ThisBufferedImageSourceTest::::test_read_correctUsage()","19":"ThisBufferedImageSourceTest::::test_read_correctUsage()","20":"ThisBufferedImageSourceTest::::test_read_correctUsage()","21":"ThisBufferedImageSourceTest::::test_read_correctUsage()","22":"ThisBufferedImageSourceTest::::test_read_correctUsage()","23":"ThisBufferedImageSourceTest::::test_read_correctUsage()","24":"ThisBufferedImageSourceTest::::test_read_correctUsage()","26":"ThisBufferedImageSourceTest::::testEx_constructor_nullBufferedImage()","27":"ThisBufferedImageSourceTest::::testEx_constructor_nullBufferedImage()","28":"ThisBufferedImageSourceTest::::testEx_constructor_nullBufferedImage()","29":"ThisBufferedImageSourceTest::::testEx_constructor_nullBufferedImage()","30":"ThisBufferedImageSourceTest::::testEx_constructor_nullBufferedImage()","31":"ThisBufferedImageSourceTest::::testEx_constructor_nullBufferedImage()","32":"ThisBufferedImageSourceTest::::testEx_constructor_nullBufferedImage()"},"tests":[{"test_lines":[11,24],"covered_lines":[17,19,20,23,24,28,29,39,44],"label":"ThisBufferedImageSource::::read()"},{"test_lines":[26,32],"covered_lines":[17,19,20,21],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/imglib/core/src/main/java/cn/core/utils/BufferedImageUtils.java":{"class_content":["package cn.core.utils;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.ex.UnsupportedFormatException;\n","import cn.core.tool.Range;\n","import javax.imageio.IIOImage;\n","import javax.imageio.ImageIO;\n","import javax.imageio.ImageWriteParam;\n","import javax.imageio.ImageWriter;\n","import javax.imageio.stream.ImageOutputStream;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.File;\n","import java.io.FileOutputStream;\n","import java.io.IOException;\n","import java.text.MessageFormat;\n","import java.util.Iterator;\n","\n","/**\n"," * An util class for buffered image.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public final class BufferedImageUtils {\n","\n","    private BufferedImageUtils(){}\n","\n","    public static BufferedImage newBackgroundImage(int width, int height, Color fillColor) {\n","        return newBackgroundImage(1f, width, height, fillColor);\n","    }\n","\n","    /**\n","     * Create a background image.\n","     *\n","     * @param alpha The alpha of image.\n","     * @param width The width of image.\n","     * @param height The height of image.\n","     * @param fillColor The fill color of image.\n","     * @return The final created image.\n","     */\n","    public static BufferedImage newBackgroundImage(float alpha, int width, int height, Color fillColor) {\n","        if (alpha == 0) {\n","            return newTransparentImage(width, height);\n","        } else {\n","            return newColoredImage(width, height, alpha, fillColor);\n","        }\n","    }\n","\n","    /**\n","     * Create a transparent image.\n","     *\n","     * @param width The width of image.\n","     * @param height The height of image.\n","     * @return The final created image.\n","     */\n","    public static BufferedImage newTransparentImage(int width, int height) {\n","        if (width <= 0) {\n","            throw new InvalidSettingException(\"The image width must be greater than 0.\");\n","        }\n","        if (height <= 0) {\n","            throw new InvalidSettingException(\"The image height must be greater than 0.\");\n","        }\n","        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n","        Graphics2D g = bi.createGraphics();\n","        // make the background transparent\n","        bi = g.getDeviceConfiguration().createCompatibleImage(width, height, Transparency.TRANSLUCENT);\n","        g.dispose();\n","        return bi;\n","    }\n","\n","    /**\n","     * Create a colored image.\n","     *\n","     * @param width The width of image.\n","     * @param height The height of image.\n","     * @param alpha The alpha of image.\n","     * @param c The color of image.\n","     * @return The final created image.\n","     */\n","    public static BufferedImage newColoredImage(int width, int height, float alpha, Color c) {\n","        if (Range.ofFloat(0f, 1f).notWithin(alpha)) {\n","            throw new InvalidSettingException(\"Alpha out of bounds:[0, 1].\");\n","        }\n","        ObjectUtils.excNull(c, \"The color is null.\");\n","        BufferedImage image = newTransparentImage(width, height);\n","\n","        Graphics2D g = image.createGraphics();\n","        g.setColor(c);\n","        // AlphaComposite.SRC should be added before drawing anything in image with alpha if you want to secure source color.\n","        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, alpha));\n","        g.fillRect(0, 0, image.getWidth(), image.getHeight());\n","        g.dispose();\n","\n","        return image;\n","    }\n","\n","    /**\n","     * Returns a {@link BufferedImage} with the specified image type, where the\n","     * graphical content is a copy of the specified image.\n","     *\n","     * @param source the image to copy\n","     * @param imageType\tthe image type for the image to return\n","     * @return target image\n","     */\n","    public static BufferedImage copy(BufferedImage source, int imageType) {\n","        BufferedImage target = new BufferedImage(source.getWidth(), source.getHeight(), imageType);\n","        Graphics g = target.createGraphics();\n","\n","        g.drawImage(source, 0, 0, null);\n","\n","        g.dispose();\n","        return target;\n","    }\n","\n","    public static void write(BufferedImage img, String filename, String formatName) throws IOException {\n","        if (StringUtils.isEmpty(filename)) {\n","            throw new InvalidSettingException(\"Output file name is null.\");\n","        }\n","        write(img, formatName, new File(filename));\n","    }\n","\n","    public static void write(BufferedImage img, String filename) throws IOException {\n","        if (StringUtils.isEmpty(filename)) {\n","            throw new InvalidSettingException(\"Output file name is null.\");\n","        }\n","        // get the file's extension\n","        String formatName = StringUtils.getExtensionName(filename);\n","        write(img, formatName, new File(filename));\n","    }\n","\n","    public static void write(BufferedImage img, File f) throws IOException {\n","        ObjectUtils.excNull(f, \"Output file is null.\");\n","        // get the file's extension\n","        String formatName = StringUtils.getExtensionName(f);\n","        write(img, formatName, f);\n","    }\n","\n","    public static void write(BufferedImage img, String formatName, File f) throws IOException {\n","        ObjectUtils.excNull(img, \"Buffered image is null.\");\n","        ObjectUtils.excNull(f, \"Output file is null.\");\n","        if (StringUtils.isEmpty(formatName)) {\n","            throw new NullPointerException(\"Output format name is null.\");\n","        }\n","\n","        // check for available writers for the current output format name\n","        Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(formatName);\n","        if (!writers.hasNext()) {\n","            throw new UnsupportedFormatException(MessageFormat.format(\n","                    \"No suitable ImageWriter found for {0}.\", formatName));\n","        }\n","        ImageWriter writer = writers.next();\n","        ImageWriteParam iwp = writer.getDefaultWriteParam();\n","        FileOutputStream fos = new FileOutputStream(f);\n","        ImageOutputStream ios = ImageIO.createImageOutputStream(fos);\n","\n","        // fix the pink background for jpeg/bmp format\n","        boolean jpg = \"JPG\".equalsIgnoreCase(formatName);\n","        boolean jpeg = \"JPEG\".equalsIgnoreCase(formatName);\n","        boolean bmp = \"BMP\".equalsIgnoreCase(formatName);\n","        if (jpg || jpeg || bmp) {\n","            img = copy(img, BufferedImage.TYPE_INT_RGB);\n","        }\n","\n","        // do write file\n","        writer.setOutput(ios);\n","        writer.write(null, new IIOImage(img, null, null), iwp);\n","\n","        // release resources\n","        writer.dispose();\n","        ios.close();\n","        fos.close();\n","    }\n","\n","}\n"],"test_content":["package cn.core.utils;\n","\n","import cn.core.TestUtils;\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.ex.UnsupportedFormatException;\n","import org.junit.Assert;\n","import org.junit.Rule;\n","import org.junit.Test;\n","import org.junit.rules.TemporaryFolder;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.File;\n","import java.io.IOException;\n","\n","public class BufferedImageUtilsTest {\n","\n","    @Rule\n","    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n","\n","    @Test\n","    public void test_newBackgroundImage_correctUsage_transparent() {\n","        // given\n","        int width = 200;\n","        int height = 100;\n","        float alpha = 0f;\n","\n","        // when\n","        BufferedImage image = BufferedImageUtils.newBackgroundImage(alpha, width, height, null);\n","\n","        // then\n","        Assert.assertEquals(width, image.getWidth());\n","        Assert.assertEquals(height, image.getHeight());\n","\n","        int rgb = image.getRGB(0, 0);\n","        // pixel transparent when equal to 0\n","        boolean isTransparent = (rgb >> 24) == 0;\n","        Assert.assertTrue(isTransparent);\n","    }\n","\n","    @Test\n","    public void test_newBackgroundImage_correctUsage_colored() {\n","        // given\n","        int width = 200, height = 100;\n","        int r = 15, g = 89, b = 231;\n","        Color color = ColorUtils.of(r, g, b);\n","\n","        // when\n","        BufferedImage image = BufferedImageUtils.newBackgroundImage(0.5f, width, height, color);\n","\n","        // then\n","        Assert.assertEquals(width, image.getWidth());\n","        Assert.assertEquals(height, image.getHeight());\n","\n","        int rgb = image.getRGB(0, 0);\n","\n","        // alpha\n","        if (image.getType() != BufferedImage.TYPE_INT_ARGB) {\n","            Assert.fail(\"Unexpected image type.\");\n","        }\n","        int alphaComponent = (rgb >> 24) & 0xff;\n","        // alpha=0.5 means translucency, the standard alpha value -> 255 * 0.5 = 127.5 -> 128\n","        Assert.assertEquals(128, alphaComponent);\n","\n","        // RGB\n","        int redComponent = (rgb >> 16) & 0xFF;\n","        int greenComponent = (rgb >> 8) & 0xFF;\n","        int blueComponent = rgb & 0xFF;\n","        Assert.assertEquals(r, redComponent);\n","        Assert.assertEquals(g, greenComponent);\n","        Assert.assertEquals(b, blueComponent);\n","    }\n","\n","    @Test\n","    public void testEx_newBackgroundImage_invalidWidth() {\n","        Color color = ColorUtils.random();\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> BufferedImageUtils.newBackgroundImage(0, 100, color));\n","        Assert.assertEquals(\"The image width must be greater than 0.\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_newBackgroundImage_invalidHeight() {\n","        Color color = ColorUtils.random();\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> BufferedImageUtils.newBackgroundImage(100, 0, color));\n","        Assert.assertEquals(\"The image height must be greater than 0.\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_newBackgroundImage_invalidAlpha() {\n","        Color color = ColorUtils.random();\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> BufferedImageUtils.newBackgroundImage(1.1f, 100, 100, color));\n","        Assert.assertEquals(\"Alpha out of bounds:[0, 1].\",\n","                exception.getMessage());\n","    }\n","\n","\n","    @Test\n","    public void test_write_correctUsage_withFilename() throws IOException {\n","        // given\n","        BufferedImage image = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        String filename = temporaryFolder.newFile(\"output.png\").getAbsolutePath();\n","\n","        // when\n","        BufferedImageUtils.write(image, filename);\n","\n","        // then\n","        boolean exists = new File(filename).exists();\n","        Assert.assertTrue(exists);\n","    }\n","\n","    @Test\n","    public void test_write_correctUsage_withFilename_withFormat() throws IOException {\n","        // given\n","        BufferedImage image = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        String filename = temporaryFolder.newFile(\"output.png\").getAbsolutePath();\n","        String formatName = \"PNG\";\n","\n","        // when\n","        BufferedImageUtils.write(image, filename, formatName);\n","\n","        // then\n","        File targetFile = new File(filename);\n","        Assert.assertTrue(targetFile.exists());\n","    }\n","\n","    @Test\n","    public void test_write_correctUsage_withFile() throws IOException {\n","        // given\n","        BufferedImage image = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        File targetFile = temporaryFolder.newFile(\"output.png\");\n","\n","        // when\n","        BufferedImageUtils.write(image, targetFile);\n","\n","        // then\n","        Assert.assertTrue(targetFile.exists());\n","    }\n","\n","    @Test\n","    public void test_write_correctUsage_withFile_withFormat() throws IOException {\n","        // given\n","        BufferedImage image = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        File targetFile = temporaryFolder.newFile(\"output.png\");\n","        String formatName = \"PNG\";\n","\n","        // when\n","        BufferedImageUtils.write(image, formatName, targetFile);\n","\n","        // then\n","        Assert.assertTrue(targetFile.exists());\n","    }\n","\n","    @Test\n","    public void testEx_write_withNullParameter() throws IOException {\n","        BufferedImage image = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        File target = temporaryFolder.newFile(\"output\");\n","\n","        // null BufferedImage\n","        NullPointerException nullImageException = Assert.assertThrows(NullPointerException.class,\n","                () -> BufferedImageUtils.write(null, \"PNG\", target));\n","        Assert.assertEquals(\"Buffered image is null.\",\n","                nullImageException.getMessage());\n","\n","        // null FormatName\n","        NullPointerException nullFormatException = Assert.assertThrows(NullPointerException.class,\n","                () -> BufferedImageUtils.write(image, null, target));\n","        Assert.assertEquals(\"Output format name is null.\",\n","                nullFormatException.getMessage());\n","\n","        // null File\n","        NullPointerException nullFileException = Assert.assertThrows(NullPointerException.class,\n","                () -> BufferedImageUtils.write(image, \"PNG\", (File) null));\n","        Assert.assertEquals(\"Output file is null.\",\n","                nullFileException.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_write_wrongFormat() throws IOException {\n","        BufferedImage image = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        File target = temporaryFolder.newFile(\"output\");\n","        String format = \"TIFF\";\n","\n","        // assert exception\n","        UnsupportedFormatException exception = Assert.assertThrows(UnsupportedFormatException.class,\n","                () -> BufferedImageUtils.write(image, format, target));\n","        Assert.assertEquals(\"No suitable ImageWriter found for TIFF.\",\n","                exception.getMessage());\n","    }\n","\n","}"],"method_lines_dic":{"BufferedImageUtils::::newBackgroundImage(int,int,java.awt.Color)":[29,31],"BufferedImageUtils::::newBackgroundImage(float,int,int,java.awt.Color)":[42,48],"BufferedImageUtils::::newTransparentImage(int,int)":[57,70],"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)":[81,96],"BufferedImageUtils::::copy(java.awt.image.BufferedImage,int)":[106,114],"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.lang.String)":[116,121],"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String)":[123,130],"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.io.File)":[132,137],"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)":[139,173]},"test_method_lines_dic":{"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()":[20,38],"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()":[40,71],"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidWidth()":[73,80],"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidHeight()":[82,89],"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidAlpha()":[91,98],"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()":[101,113],"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()":[115,128],"BufferedImageUtilsTest::::test_write_correctUsage_withFile()":[130,141],"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()":[143,155],"BufferedImageUtilsTest::::testEx_write_withNullParameter()":[157,179],"BufferedImageUtilsTest::::testEx_write_wrongFormat()":[181,192]},"reverse_method_lines_dic":{"29":"BufferedImageUtils::::newBackgroundImage(int,int,java.awt.Color)","30":"BufferedImageUtils::::newBackgroundImage(int,int,java.awt.Color)","31":"BufferedImageUtils::::newBackgroundImage(int,int,java.awt.Color)","42":"BufferedImageUtils::::newBackgroundImage(float,int,int,java.awt.Color)","43":"BufferedImageUtils::::newBackgroundImage(float,int,int,java.awt.Color)","44":"BufferedImageUtils::::newBackgroundImage(float,int,int,java.awt.Color)","45":"BufferedImageUtils::::newBackgroundImage(float,int,int,java.awt.Color)","46":"BufferedImageUtils::::newBackgroundImage(float,int,int,java.awt.Color)","47":"BufferedImageUtils::::newBackgroundImage(float,int,int,java.awt.Color)","48":"BufferedImageUtils::::newBackgroundImage(float,int,int,java.awt.Color)","57":"BufferedImageUtils::::newTransparentImage(int,int)","58":"BufferedImageUtils::::newTransparentImage(int,int)","59":"BufferedImageUtils::::newTransparentImage(int,int)","60":"BufferedImageUtils::::newTransparentImage(int,int)","61":"BufferedImageUtils::::newTransparentImage(int,int)","62":"BufferedImageUtils::::newTransparentImage(int,int)","63":"BufferedImageUtils::::newTransparentImage(int,int)","64":"BufferedImageUtils::::newTransparentImage(int,int)","65":"BufferedImageUtils::::newTransparentImage(int,int)","66":"BufferedImageUtils::::newTransparentImage(int,int)","67":"BufferedImageUtils::::newTransparentImage(int,int)","68":"BufferedImageUtils::::newTransparentImage(int,int)","69":"BufferedImageUtils::::newTransparentImage(int,int)","70":"BufferedImageUtils::::newTransparentImage(int,int)","81":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","82":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","83":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","84":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","85":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","86":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","87":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","88":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","89":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","90":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","91":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","92":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","93":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","94":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","95":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","96":"BufferedImageUtils::::newColoredImage(int,int,float,java.awt.Color)","106":"BufferedImageUtils::::copy(java.awt.image.BufferedImage,int)","107":"BufferedImageUtils::::copy(java.awt.image.BufferedImage,int)","108":"BufferedImageUtils::::copy(java.awt.image.BufferedImage,int)","109":"BufferedImageUtils::::copy(java.awt.image.BufferedImage,int)","110":"BufferedImageUtils::::copy(java.awt.image.BufferedImage,int)","111":"BufferedImageUtils::::copy(java.awt.image.BufferedImage,int)","112":"BufferedImageUtils::::copy(java.awt.image.BufferedImage,int)","113":"BufferedImageUtils::::copy(java.awt.image.BufferedImage,int)","114":"BufferedImageUtils::::copy(java.awt.image.BufferedImage,int)","116":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.lang.String)","117":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.lang.String)","118":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.lang.String)","119":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.lang.String)","120":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.lang.String)","121":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.lang.String)","123":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String)","124":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String)","125":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String)","126":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String)","127":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String)","128":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String)","129":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String)","130":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String)","132":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.io.File)","133":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.io.File)","134":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.io.File)","135":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.io.File)","136":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.io.File)","137":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.io.File)","139":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","140":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","141":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","142":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","143":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","144":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","145":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","146":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","147":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","148":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","149":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","150":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","151":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","152":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","153":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","154":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","155":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","156":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","157":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","158":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","159":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","160":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","161":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","162":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","163":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","164":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","165":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","166":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","167":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","168":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","169":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","170":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","171":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","172":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)","173":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)"},"test_reverse_method_lines_dic":{"20":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","21":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","22":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","23":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","24":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","25":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","26":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","27":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","28":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","29":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","30":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","31":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","32":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","33":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","34":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","35":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","36":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","37":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","38":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_transparent()","40":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","41":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","42":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","43":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","44":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","45":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","46":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","47":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","48":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","49":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","50":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","51":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","52":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","53":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","54":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","55":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","56":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","57":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","58":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","59":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","60":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","61":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","62":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","63":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","64":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","65":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","66":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","67":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","68":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","69":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","70":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","71":"BufferedImageUtilsTest::::test_newBackgroundImage_correctUsage_colored()","73":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidWidth()","74":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidWidth()","75":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidWidth()","76":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidWidth()","77":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidWidth()","78":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidWidth()","79":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidWidth()","80":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidWidth()","82":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidHeight()","83":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidHeight()","84":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidHeight()","85":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidHeight()","86":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidHeight()","87":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidHeight()","88":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidHeight()","89":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidHeight()","91":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidAlpha()","92":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidAlpha()","93":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidAlpha()","94":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidAlpha()","95":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidAlpha()","96":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidAlpha()","97":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidAlpha()","98":"BufferedImageUtilsTest::::testEx_newBackgroundImage_invalidAlpha()","101":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","102":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","103":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","104":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","105":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","106":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","107":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","108":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","109":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","110":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","111":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","112":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","113":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename()","115":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","116":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","117":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","118":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","119":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","120":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","121":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","122":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","123":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","124":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","125":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","126":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","127":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","128":"BufferedImageUtilsTest::::test_write_correctUsage_withFilename_withFormat()","130":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","131":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","132":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","133":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","134":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","135":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","136":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","137":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","138":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","139":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","140":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","141":"BufferedImageUtilsTest::::test_write_correctUsage_withFile()","143":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","144":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","145":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","146":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","147":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","148":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","149":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","150":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","151":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","152":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","153":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","154":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","155":"BufferedImageUtilsTest::::test_write_correctUsage_withFile_withFormat()","157":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","158":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","159":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","160":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","161":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","162":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","163":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","164":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","165":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","166":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","167":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","168":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","169":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","170":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","171":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","172":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","173":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","174":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","175":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","176":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","177":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","178":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","179":"BufferedImageUtilsTest::::testEx_write_withNullParameter()","181":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","182":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","183":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","184":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","185":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","186":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","187":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","188":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","189":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","190":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","191":"BufferedImageUtilsTest::::testEx_write_wrongFormat()","192":"BufferedImageUtilsTest::::testEx_write_wrongFormat()"},"tests":[{"test_lines":[20,38],"covered_lines":[43,44,58,61,64,65,67,68,69],"label":"BufferedImageUtils::::newBackgroundImage(float,int,int,java.awt.Color)"},{"test_lines":[40,71],"covered_lines":[43,46,58,61,64,65,67,68,69,82,85,86,88,89,91,92,93,95],"label":"BufferedImageUtils::::newBackgroundImage(float,int,int,java.awt.Color)"},{"test_lines":[73,80],"covered_lines":[58,59,82,85],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[82,89],"covered_lines":[58,61,62,82,85],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[91,98],"covered_lines":[82,83],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[101,113],"covered_lines":[124,128,129,130,140,141,142,147,148,152,153,154,155,158,159,160,161,166,167,170,171,172,173],"label":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String)"},{"test_lines":[115,128],"covered_lines":[117,120,121,140,141,142,147,148,152,153,154,155,158,159,160,161,166,167,170,171,172,173],"label":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.lang.String)"},{"test_lines":[130,141],"covered_lines":[133,135,136,137,140,141,142,147,148,152,153,154,155,158,159,160,161,166,167,170,171,172,173],"label":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.io.File)"},{"test_lines":[143,155],"covered_lines":[140,141,142,147,148,152,153,154,155,158,159,160,161,166,167,170,171,172,173],"label":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)"},{"test_lines":[157,179],"covered_lines":[140,141,142,143],"label":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)"},{"test_lines":[181,192],"covered_lines":[140,141,142,147,148,149],"label":"BufferedImageUtils::::write(java.awt.image.BufferedImage,java.lang.String,java.io.File)"}]},"/bernard/dataset_construction/prep/repos/imglib/core/src/main/java/cn/core/utils/CollectionUtils.java":{"class_content":["package cn.core.utils;\n","\n","import cn.core.ex.InvalidSettingException;\n","import java.util.Collection;\n","import java.util.Iterator;\n","\n","/**\n"," * An util class for collection.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public final class CollectionUtils {\n","    private CollectionUtils(){}\n","\n","    public static boolean isNullOrEmpty(Collection<?> col) {\n","        return col == null || col.isEmpty();\n","    }\n","\n","    public static boolean isNullOrEmpty(Object[] os) {\n","        return os == null || os.length == 0;\n","    }\n","\n","    public static void excEmpty(Collection<?> col, String msg) {\n","        if (col.isEmpty()) {\n","            throw new InvalidSettingException(msg);\n","        }\n","    }\n","\n","    public static void excEmpty(Object[] os, String msg) {\n","        if (os.length == 0) {\n","            throw new InvalidSettingException(msg);\n","        }\n","    }\n","\n","    public static void excEmpty(Iterable<?> is, String msg) {\n","        Iterator<?> ite = is.iterator();\n","        if (!ite.hasNext()) {\n","            throw new InvalidSettingException(msg);\n","        }\n","    }\n","\n","}\n"],"test_content":["package cn.core.utils;\n","\n","import cn.core.ex.InvalidSettingException;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.util.ArrayList;\n","import java.util.Collections;\n","import java.util.List;\n","\n","\n","public class CollectionUtilsTest {\n","\n","    @Test\n","    public void test_isNullOrEmpty_emptyCollection() {\n","        boolean nullOrEmpty = CollectionUtils.isNullOrEmpty(Collections.emptyList());\n","        Assert.assertTrue(nullOrEmpty);\n","    }\n","\n","    @Test\n","    public void test_isNullOrEmpty_emptyArray() {\n","        boolean nullOrEmpty = CollectionUtils.isNullOrEmpty(new Object[0]);\n","        Assert.assertTrue(nullOrEmpty);\n","    }\n","\n","    @Test\n","    public void testEx_excEmpty_emptyCollection() {\n","        List<Object> collection = Collections.emptyList();\n","        String exceptionMessage = \"Empty collection.\";\n","\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> CollectionUtils.excEmpty(collection, exceptionMessage));\n","        Assert.assertEquals(exceptionMessage,\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_excEmpty_emptyArray() {\n","        String exceptionMessage = \"Empty array.\";\n","\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> CollectionUtils.excEmpty(new Object[0], exceptionMessage));\n","        Assert.assertEquals(exceptionMessage,\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_excEmpty_emptyIterable() {\n","        String exceptionMessage = \"Empty iterable.\";\n","        Iterable<String> iterable = new ArrayList<>();\n","\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> CollectionUtils.excEmpty(iterable, exceptionMessage));\n","        Assert.assertEquals(exceptionMessage,\n","                exception.getMessage());\n","    }\n","\n","}"],"method_lines_dic":{"CollectionUtils::::isNullOrEmpty(java.util.Collection<?>)":[16,18],"CollectionUtils::::isNullOrEmpty(java.lang.Object[])":[20,22],"CollectionUtils::::excEmpty(java.util.Collection<?>,java.lang.String)":[24,28],"CollectionUtils::::excEmpty(java.lang.Object[],java.lang.String)":[30,34],"CollectionUtils::::excEmpty(java.lang.Iterable<?>,java.lang.String)":[36,41]},"test_method_lines_dic":{"CollectionUtilsTest::::test_isNullOrEmpty_emptyCollection()":[13,17],"CollectionUtilsTest::::test_isNullOrEmpty_emptyArray()":[19,23],"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()":[25,34],"CollectionUtilsTest::::testEx_excEmpty_emptyArray()":[36,44],"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()":[46,55]},"reverse_method_lines_dic":{"16":"CollectionUtils::::isNullOrEmpty(java.util.Collection<?>)","17":"CollectionUtils::::isNullOrEmpty(java.util.Collection<?>)","18":"CollectionUtils::::isNullOrEmpty(java.util.Collection<?>)","20":"CollectionUtils::::isNullOrEmpty(java.lang.Object[])","21":"CollectionUtils::::isNullOrEmpty(java.lang.Object[])","22":"CollectionUtils::::isNullOrEmpty(java.lang.Object[])","24":"CollectionUtils::::excEmpty(java.util.Collection<?>,java.lang.String)","25":"CollectionUtils::::excEmpty(java.util.Collection<?>,java.lang.String)","26":"CollectionUtils::::excEmpty(java.util.Collection<?>,java.lang.String)","27":"CollectionUtils::::excEmpty(java.util.Collection<?>,java.lang.String)","28":"CollectionUtils::::excEmpty(java.util.Collection<?>,java.lang.String)","30":"CollectionUtils::::excEmpty(java.lang.Object[],java.lang.String)","31":"CollectionUtils::::excEmpty(java.lang.Object[],java.lang.String)","32":"CollectionUtils::::excEmpty(java.lang.Object[],java.lang.String)","33":"CollectionUtils::::excEmpty(java.lang.Object[],java.lang.String)","34":"CollectionUtils::::excEmpty(java.lang.Object[],java.lang.String)","36":"CollectionUtils::::excEmpty(java.lang.Iterable<?>,java.lang.String)","37":"CollectionUtils::::excEmpty(java.lang.Iterable<?>,java.lang.String)","38":"CollectionUtils::::excEmpty(java.lang.Iterable<?>,java.lang.String)","39":"CollectionUtils::::excEmpty(java.lang.Iterable<?>,java.lang.String)","40":"CollectionUtils::::excEmpty(java.lang.Iterable<?>,java.lang.String)","41":"CollectionUtils::::excEmpty(java.lang.Iterable<?>,java.lang.String)"},"test_reverse_method_lines_dic":{"13":"CollectionUtilsTest::::test_isNullOrEmpty_emptyCollection()","14":"CollectionUtilsTest::::test_isNullOrEmpty_emptyCollection()","15":"CollectionUtilsTest::::test_isNullOrEmpty_emptyCollection()","16":"CollectionUtilsTest::::test_isNullOrEmpty_emptyCollection()","17":"CollectionUtilsTest::::test_isNullOrEmpty_emptyCollection()","19":"CollectionUtilsTest::::test_isNullOrEmpty_emptyArray()","20":"CollectionUtilsTest::::test_isNullOrEmpty_emptyArray()","21":"CollectionUtilsTest::::test_isNullOrEmpty_emptyArray()","22":"CollectionUtilsTest::::test_isNullOrEmpty_emptyArray()","23":"CollectionUtilsTest::::test_isNullOrEmpty_emptyArray()","25":"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()","26":"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()","27":"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()","28":"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()","29":"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()","30":"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()","31":"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()","32":"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()","33":"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()","34":"CollectionUtilsTest::::testEx_excEmpty_emptyCollection()","36":"CollectionUtilsTest::::testEx_excEmpty_emptyArray()","37":"CollectionUtilsTest::::testEx_excEmpty_emptyArray()","38":"CollectionUtilsTest::::testEx_excEmpty_emptyArray()","39":"CollectionUtilsTest::::testEx_excEmpty_emptyArray()","40":"CollectionUtilsTest::::testEx_excEmpty_emptyArray()","41":"CollectionUtilsTest::::testEx_excEmpty_emptyArray()","42":"CollectionUtilsTest::::testEx_excEmpty_emptyArray()","43":"CollectionUtilsTest::::testEx_excEmpty_emptyArray()","44":"CollectionUtilsTest::::testEx_excEmpty_emptyArray()","46":"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()","47":"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()","48":"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()","49":"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()","50":"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()","51":"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()","52":"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()","53":"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()","54":"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()","55":"CollectionUtilsTest::::testEx_excEmpty_emptyIterable()"},"tests":[{"test_lines":[13,17],"covered_lines":[17],"label":"CollectionUtils::::isNullOrEmpty(java.util.Collection<?>)"},{"test_lines":[19,23],"covered_lines":[21],"label":"CollectionUtils::::isNullOrEmpty(java.lang.Object[])"},{"test_lines":[25,34],"covered_lines":[25,26],"label":"CollectionUtils::::excEmpty(java.util.Collection<?>,java.lang.String)"},{"test_lines":[36,44],"covered_lines":[31,32],"label":"CollectionUtils::::excEmpty(java.lang.Object[],java.lang.String)"},{"test_lines":[46,55],"covered_lines":[37,38,39],"label":"CollectionUtils::::excEmpty(java.lang.Iterable<?>,java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/imglib/core/src/main/java/cn/core/utils/StringUtils.java":{"class_content":["package cn.core.utils;\n","\n","import java.io.File;\n","import java.util.Arrays;\n","import java.util.Collection;\n","\n","/**\n"," * An util class for string.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public final class StringUtils {\n","    private StringUtils(){}\n","    private static final String EMPTY = \"\";\n","\n","    public static boolean isEmpty(String str) {\n","        return str == null || \"\".equals(str);\n","    }\n","\n","    public static boolean isNotEmpty(String str) {\n","        return !isEmpty(str);\n","    }\n","\n","    public static String join(String[] array) {\n","        if (array == null) {\n","            return EMPTY;\n","        }\n","        return join(Arrays.asList(array));\n","    }\n","\n","    public static String join(String[] array, String separator) {\n","        if (array == null) {\n","            return EMPTY;\n","        }\n","        return join(Arrays.asList(array), separator);\n","    }\n","\n","    public static String join(Collection<String> col) {\n","        if (col == null || col.isEmpty()) {\n","            return EMPTY;\n","        }\n","        StringBuilder builder = new StringBuilder();\n","        join(col, \"\", builder);\n","        return builder.toString();\n","    }\n","\n","    public static String join(Collection<String> col, String separator) {\n","        if (col == null || col.isEmpty()) {\n","            return EMPTY;\n","        }\n","        StringBuilder builder = new StringBuilder();\n","        join(col, separator, builder);\n","        return builder.toString();\n","    }\n","\n","    public static void join(Iterable<String> iterable, String separator, StringBuilder sb) {\n","        if (iterable == null) {\n","            return;\n","        }\n","        boolean first = true;\n","        for (String value : iterable) {\n","            if (first) {\n","                first = false;\n","            } else {\n","                sb.append(separator);\n","            }\n","            sb.append(value);\n","        }\n","    }\n","\n","\n","    /**\n","     * Returns the file extension of {@link File}.\n","     *\n","     * @param f The file.\n","     * @return The extension of the file.\n","     */\n","    public static String getExtensionName(File f) {\n","        return getExtensionName(f.getName());\n","    }\n","\n","    /**\n","     * Returns the file extension of file name.\n","     *\n","     * @param filename The file name.\n","     * @return The extension of the file.\n","     */\n","    public static String getExtensionName(String filename) {\n","        if (isEmpty(filename)) {\n","            return null;\n","        }\n","        boolean c1 = filename.indexOf('.') != -1;\n","        boolean c2 = filename.lastIndexOf('.') != filename.length() - 1;\n","        if (c1 && c2) {\n","            int lastIndex = filename.lastIndexOf('.');\n","            return filename.substring(lastIndex + 1);\n","        }\n","        return null;\n","    }\n","}\n"],"test_content":["package cn.core.utils;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.util.*;\n","\n","public class StringUtilsTest {\n","\n","    @Test\n","    public void test_isEmpty() {\n","        boolean empty = StringUtils.isEmpty(\"\");\n","        Assert.assertTrue(empty);\n","\n","        boolean notEmpty = StringUtils.isEmpty(\"any\");\n","        Assert.assertFalse(notEmpty);\n","    }\n","\n","    @Test\n","    public void test_isNotEmpty() {\n","        boolean notEmpty = StringUtils.isNotEmpty(\"any\");\n","        Assert.assertTrue(notEmpty);\n","\n","        boolean empty = StringUtils.isNotEmpty(\"\");\n","        Assert.assertFalse(empty);\n","    }\n","\n","    @Test\n","    public void test_join_array_withNull() {\n","        String join = StringUtils.join(new String[0]);\n","        Assert.assertEquals(\"\", join);\n","    }\n","\n","    @Test\n","    public void test_join_array() {\n","        String join = StringUtils.join(new String[]{\"wha\", \"te\", \"ver\"});\n","        Assert.assertEquals(\"whatever\", join);\n","    }\n","\n","    @Test\n","    public void test_join_array_withNull_withSeparator() {\n","        String join = StringUtils.join(new String[0], \",\");\n","        Assert.assertEquals(\"\", join);\n","    }\n","\n","    @Test\n","    public void test_join_array_withSeparator() {\n","        String join = StringUtils.join(new String[]{\"chen\", \"wang\", \"jiang\"}, \",\");\n","        Assert.assertEquals(\"chen,wang,jiang\", join);\n","    }\n","\n","\n","    @Test\n","    public void test_join_collection_withNull() {\n","        String join = StringUtils.join(Collections.emptyList());\n","        Assert.assertEquals(\"\", join);\n","    }\n","\n","    @Test\n","    public void test_join_collection() {\n","        String join = StringUtils.join(Arrays.asList(\"he\", \"ll\", \"o\"));\n","        Assert.assertEquals(\"hello\", join);\n","    }\n","\n","    @Test\n","    public void test_join_collection_withNull_withSeparator() {\n","        String join = StringUtils.join(Collections.emptyList(), \",\");\n","        Assert.assertEquals(\"\", join);\n","    }\n","\n","    @Test\n","    public void test_join_collection_withSeparator() {\n","        String join = StringUtils.join(Arrays.asList(\"first\", \"second\", \"third\"), \"-\");\n","        Assert.assertEquals(\"first-second-third\", join);\n","    }\n","\n","    @Test\n","    public void test_join_iterable_withNull_withSeparator() {\n","        // given\n","        StringBuilder sb = new StringBuilder();\n","        Iterable<String> iterable = new LinkedList<>();\n","\n","        // when\n","        StringUtils.join(iterable, \",\", sb);\n","\n","        // then\n","        Assert.assertTrue(StringUtils.isEmpty(sb.toString()));\n","    }\n","\n","    @Test\n","    public void test_join_iterable_withSeparator() {\n","        // given\n","        StringBuilder sb = new StringBuilder();\n","        Iterable<String> iterable = () -> {\n","            List<String> list = new LinkedList<>();\n","            list.add(\"1\");\n","            list.add(\"2\");\n","            list.add(\"3\");\n","            return list.iterator();};\n","\n","        // when\n","        StringUtils.join(iterable, \"|\", sb);\n","\n","        // then\n","        Assert.assertEquals(\"1|2|3\", sb.toString());\n","    }\n","\n","\n","    @Test\n","    public void test_getExtensionName() {\n","        String extension = StringUtils.getExtensionName(\"/folder/file.stg\");\n","\n","        Assert.assertEquals(\"stg\", extension);\n","    }\n","\n","    @Test\n","    public void test_getExtensionName_withEmptyFileName() {\n","        String extension = StringUtils.getExtensionName((String) null);\n","        Assert.assertNull(extension);\n","    }\n","\n","\n","    @Test\n","    public void test_getExtensionName_withNoDot() {\n","        String extension = StringUtils.getExtensionName(\"/folder/file\");\n","\n","        Assert.assertNull(extension);\n","    }\n","\n","    @Test\n","    public void test_getExtensionName_withMultipleDots() {\n","        String extension = StringUtils.getExtensionName(\"/folder.font/song.ft\");\n","\n","        Assert.assertEquals(\"ft\", extension);\n","    }\n","}"],"method_lines_dic":{"StringUtils::::isEmpty(java.lang.String)":[17,19],"StringUtils::::isNotEmpty(java.lang.String)":[21,23],"StringUtils::::join(java.lang.String[])":[25,30],"StringUtils::::join(java.lang.String[],java.lang.String)":[32,37],"StringUtils::::join(java.util.Collection<java.lang.String>)":[39,46],"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)":[48,55],"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)":[57,70],"StringUtils::::getExtensionName(java.io.File)":[79,81],"StringUtils::::getExtensionName(java.lang.String)":[89,100]},"test_method_lines_dic":{"StringUtilsTest::::test_isEmpty()":[9,16],"StringUtilsTest::::test_isNotEmpty()":[18,25],"StringUtilsTest::::test_join_array_withNull()":[27,31],"StringUtilsTest::::test_join_array()":[33,37],"StringUtilsTest::::test_join_array_withNull_withSeparator()":[39,43],"StringUtilsTest::::test_join_array_withSeparator()":[45,49],"StringUtilsTest::::test_join_collection_withNull()":[52,56],"StringUtilsTest::::test_join_collection()":[58,62],"StringUtilsTest::::test_join_collection_withNull_withSeparator()":[64,68],"StringUtilsTest::::test_join_collection_withSeparator()":[70,74],"StringUtilsTest::::test_join_iterable_withNull_withSeparator()":[76,87],"StringUtilsTest::::test_join_iterable_withSeparator()":[89,105],"StringUtilsTest::::test_getExtensionName()":[108,113],"StringUtilsTest::::test_getExtensionName_withEmptyFileName()":[115,119],"StringUtilsTest::::test_getExtensionName_withNoDot()":[122,127],"StringUtilsTest::::test_getExtensionName_withMultipleDots()":[129,134]},"reverse_method_lines_dic":{"17":"StringUtils::::isEmpty(java.lang.String)","18":"StringUtils::::isEmpty(java.lang.String)","19":"StringUtils::::isEmpty(java.lang.String)","21":"StringUtils::::isNotEmpty(java.lang.String)","22":"StringUtils::::isNotEmpty(java.lang.String)","23":"StringUtils::::isNotEmpty(java.lang.String)","25":"StringUtils::::join(java.lang.String[])","26":"StringUtils::::join(java.lang.String[])","27":"StringUtils::::join(java.lang.String[])","28":"StringUtils::::join(java.lang.String[])","29":"StringUtils::::join(java.lang.String[])","30":"StringUtils::::join(java.lang.String[])","32":"StringUtils::::join(java.lang.String[],java.lang.String)","33":"StringUtils::::join(java.lang.String[],java.lang.String)","34":"StringUtils::::join(java.lang.String[],java.lang.String)","35":"StringUtils::::join(java.lang.String[],java.lang.String)","36":"StringUtils::::join(java.lang.String[],java.lang.String)","37":"StringUtils::::join(java.lang.String[],java.lang.String)","39":"StringUtils::::join(java.util.Collection<java.lang.String>)","40":"StringUtils::::join(java.util.Collection<java.lang.String>)","41":"StringUtils::::join(java.util.Collection<java.lang.String>)","42":"StringUtils::::join(java.util.Collection<java.lang.String>)","43":"StringUtils::::join(java.util.Collection<java.lang.String>)","44":"StringUtils::::join(java.util.Collection<java.lang.String>)","45":"StringUtils::::join(java.util.Collection<java.lang.String>)","46":"StringUtils::::join(java.util.Collection<java.lang.String>)","48":"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)","49":"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)","50":"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)","51":"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)","52":"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)","53":"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)","54":"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)","55":"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)","57":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","58":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","59":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","60":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","61":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","62":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","63":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","64":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","65":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","66":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","67":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","68":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","69":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","70":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)","79":"StringUtils::::getExtensionName(java.io.File)","80":"StringUtils::::getExtensionName(java.io.File)","81":"StringUtils::::getExtensionName(java.io.File)","89":"StringUtils::::getExtensionName(java.lang.String)","90":"StringUtils::::getExtensionName(java.lang.String)","91":"StringUtils::::getExtensionName(java.lang.String)","92":"StringUtils::::getExtensionName(java.lang.String)","93":"StringUtils::::getExtensionName(java.lang.String)","94":"StringUtils::::getExtensionName(java.lang.String)","95":"StringUtils::::getExtensionName(java.lang.String)","96":"StringUtils::::getExtensionName(java.lang.String)","97":"StringUtils::::getExtensionName(java.lang.String)","98":"StringUtils::::getExtensionName(java.lang.String)","99":"StringUtils::::getExtensionName(java.lang.String)","100":"StringUtils::::getExtensionName(java.lang.String)"},"test_reverse_method_lines_dic":{"9":"StringUtilsTest::::test_isEmpty()","10":"StringUtilsTest::::test_isEmpty()","11":"StringUtilsTest::::test_isEmpty()","12":"StringUtilsTest::::test_isEmpty()","13":"StringUtilsTest::::test_isEmpty()","14":"StringUtilsTest::::test_isEmpty()","15":"StringUtilsTest::::test_isEmpty()","16":"StringUtilsTest::::test_isEmpty()","18":"StringUtilsTest::::test_isNotEmpty()","19":"StringUtilsTest::::test_isNotEmpty()","20":"StringUtilsTest::::test_isNotEmpty()","21":"StringUtilsTest::::test_isNotEmpty()","22":"StringUtilsTest::::test_isNotEmpty()","23":"StringUtilsTest::::test_isNotEmpty()","24":"StringUtilsTest::::test_isNotEmpty()","25":"StringUtilsTest::::test_isNotEmpty()","27":"StringUtilsTest::::test_join_array_withNull()","28":"StringUtilsTest::::test_join_array_withNull()","29":"StringUtilsTest::::test_join_array_withNull()","30":"StringUtilsTest::::test_join_array_withNull()","31":"StringUtilsTest::::test_join_array_withNull()","33":"StringUtilsTest::::test_join_array()","34":"StringUtilsTest::::test_join_array()","35":"StringUtilsTest::::test_join_array()","36":"StringUtilsTest::::test_join_array()","37":"StringUtilsTest::::test_join_array()","39":"StringUtilsTest::::test_join_array_withNull_withSeparator()","40":"StringUtilsTest::::test_join_array_withNull_withSeparator()","41":"StringUtilsTest::::test_join_array_withNull_withSeparator()","42":"StringUtilsTest::::test_join_array_withNull_withSeparator()","43":"StringUtilsTest::::test_join_array_withNull_withSeparator()","45":"StringUtilsTest::::test_join_array_withSeparator()","46":"StringUtilsTest::::test_join_array_withSeparator()","47":"StringUtilsTest::::test_join_array_withSeparator()","48":"StringUtilsTest::::test_join_array_withSeparator()","49":"StringUtilsTest::::test_join_array_withSeparator()","52":"StringUtilsTest::::test_join_collection_withNull()","53":"StringUtilsTest::::test_join_collection_withNull()","54":"StringUtilsTest::::test_join_collection_withNull()","55":"StringUtilsTest::::test_join_collection_withNull()","56":"StringUtilsTest::::test_join_collection_withNull()","58":"StringUtilsTest::::test_join_collection()","59":"StringUtilsTest::::test_join_collection()","60":"StringUtilsTest::::test_join_collection()","61":"StringUtilsTest::::test_join_collection()","62":"StringUtilsTest::::test_join_collection()","64":"StringUtilsTest::::test_join_collection_withNull_withSeparator()","65":"StringUtilsTest::::test_join_collection_withNull_withSeparator()","66":"StringUtilsTest::::test_join_collection_withNull_withSeparator()","67":"StringUtilsTest::::test_join_collection_withNull_withSeparator()","68":"StringUtilsTest::::test_join_collection_withNull_withSeparator()","70":"StringUtilsTest::::test_join_collection_withSeparator()","71":"StringUtilsTest::::test_join_collection_withSeparator()","72":"StringUtilsTest::::test_join_collection_withSeparator()","73":"StringUtilsTest::::test_join_collection_withSeparator()","74":"StringUtilsTest::::test_join_collection_withSeparator()","76":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","77":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","78":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","79":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","80":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","81":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","82":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","83":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","84":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","85":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","86":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","87":"StringUtilsTest::::test_join_iterable_withNull_withSeparator()","89":"StringUtilsTest::::test_join_iterable_withSeparator()","90":"StringUtilsTest::::test_join_iterable_withSeparator()","91":"StringUtilsTest::::test_join_iterable_withSeparator()","92":"StringUtilsTest::::test_join_iterable_withSeparator()","93":"StringUtilsTest::::test_join_iterable_withSeparator()","94":"StringUtilsTest::::test_join_iterable_withSeparator()","95":"StringUtilsTest::::test_join_iterable_withSeparator()","96":"StringUtilsTest::::test_join_iterable_withSeparator()","97":"StringUtilsTest::::test_join_iterable_withSeparator()","98":"StringUtilsTest::::test_join_iterable_withSeparator()","99":"StringUtilsTest::::test_join_iterable_withSeparator()","100":"StringUtilsTest::::test_join_iterable_withSeparator()","101":"StringUtilsTest::::test_join_iterable_withSeparator()","102":"StringUtilsTest::::test_join_iterable_withSeparator()","103":"StringUtilsTest::::test_join_iterable_withSeparator()","104":"StringUtilsTest::::test_join_iterable_withSeparator()","105":"StringUtilsTest::::test_join_iterable_withSeparator()","108":"StringUtilsTest::::test_getExtensionName()","109":"StringUtilsTest::::test_getExtensionName()","110":"StringUtilsTest::::test_getExtensionName()","111":"StringUtilsTest::::test_getExtensionName()","112":"StringUtilsTest::::test_getExtensionName()","113":"StringUtilsTest::::test_getExtensionName()","115":"StringUtilsTest::::test_getExtensionName_withEmptyFileName()","116":"StringUtilsTest::::test_getExtensionName_withEmptyFileName()","117":"StringUtilsTest::::test_getExtensionName_withEmptyFileName()","118":"StringUtilsTest::::test_getExtensionName_withEmptyFileName()","119":"StringUtilsTest::::test_getExtensionName_withEmptyFileName()","122":"StringUtilsTest::::test_getExtensionName_withNoDot()","123":"StringUtilsTest::::test_getExtensionName_withNoDot()","124":"StringUtilsTest::::test_getExtensionName_withNoDot()","125":"StringUtilsTest::::test_getExtensionName_withNoDot()","126":"StringUtilsTest::::test_getExtensionName_withNoDot()","127":"StringUtilsTest::::test_getExtensionName_withNoDot()","129":"StringUtilsTest::::test_getExtensionName_withMultipleDots()","130":"StringUtilsTest::::test_getExtensionName_withMultipleDots()","131":"StringUtilsTest::::test_getExtensionName_withMultipleDots()","132":"StringUtilsTest::::test_getExtensionName_withMultipleDots()","133":"StringUtilsTest::::test_getExtensionName_withMultipleDots()","134":"StringUtilsTest::::test_getExtensionName_withMultipleDots()"},"tests":[{"test_lines":[9,16],"covered_lines":[18],"label":"StringUtils::::isEmpty(java.lang.String)"},{"test_lines":[18,25],"covered_lines":[18,22],"label":"StringUtils::::isNotEmpty(java.lang.String)"},{"test_lines":[27,31],"covered_lines":[26,29,40,41],"label":"StringUtils::::join(java.lang.String[])"},{"test_lines":[33,37],"covered_lines":[26,29,40,43,44,45,58,61,62,63,64,66,68,69,70],"label":"StringUtils::::join(java.lang.String[])"},{"test_lines":[39,43],"covered_lines":[33,36,49,50],"label":"StringUtils::::join(java.lang.String[],java.lang.String)"},{"test_lines":[45,49],"covered_lines":[33,36,49,52,53,54,58,61,62,63,64,66,68,69,70],"label":"StringUtils::::join(java.lang.String[],java.lang.String)"},{"test_lines":[52,56],"covered_lines":[40,41],"label":"StringUtils::::join(java.util.Collection<java.lang.String>)"},{"test_lines":[58,62],"covered_lines":[40,43,44,45,58,61,62,63,64,66,68,69,70],"label":"StringUtils::::join(java.util.Collection<java.lang.String>)"},{"test_lines":[64,68],"covered_lines":[49,50],"label":"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)"},{"test_lines":[70,74],"covered_lines":[49,52,53,54,58,61,62,63,64,66,68,69,70],"label":"StringUtils::::join(java.util.Collection<java.lang.String>,java.lang.String)"},{"test_lines":[76,87],"covered_lines":[18,58,61,62,70],"label":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)"},{"test_lines":[89,105],"covered_lines":[58,61,62,63,64,66,68,69,70],"label":"StringUtils::::join(java.lang.Iterable<java.lang.String>,java.lang.String,java.lang.StringBuilder)"},{"test_lines":[108,113],"covered_lines":[18,90,93,94,95,96,97],"label":"StringUtils::::getExtensionName(java.lang.String)"},{"test_lines":[115,119],"covered_lines":[18,90,91],"label":"StringUtils::::getExtensionName(java.lang.String)"},{"test_lines":[122,127],"covered_lines":[18,90,93,94,95,99],"label":"StringUtils::::getExtensionName(java.lang.String)"},{"test_lines":[129,134],"covered_lines":[18,90,93,94,95,96,97],"label":"StringUtils::::getExtensionName(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/imglib/core/src/main/java/cn/core/utils/ColorUtils.java":{"class_content":["package cn.core.utils;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.tool.Range;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","\n","/**\n"," * An util class for color.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public final class ColorUtils {\n","    private ColorUtils(){}\n","\n","    /**\n","     * Get a color.\n","     *\n","     * @param r The red component.\n","     * @param g The green component.\n","     * @param b The blue component.\n","     * @return The final color.\n","     */\n","    public static Color of(int r, int g, int b) {\n","        return new Color(r, g, b);\n","    }\n","\n","    /**\n","     * Get a color.\n","     *\n","     * @param rgb The RGB value.\n","     * @return The final color.\n","     */\n","    public static Color ofRGB(int rgb) {\n","        return new Color(rgb);\n","    }\n","\n","    /**\n","     * Get a random color.\n","     *\n","     * @return The final color.\n","     */\n","    public static Color random() {\n","        Range<Integer> range = Range.ofInt(0, 255);\n","        return random(range, range, range);\n","    }\n","\n","    /**\n","     * Get a random color.\n","     *\n","     * @param rRange The range of red component.\n","     * @param gRange The range of green component.\n","     * @param bRange The range of blue component.\n","     * @return The final color.\n","     */\n","    public static Color random(Range<Integer> rRange, Range<Integer> gRange, Range<Integer> bRange) {\n","        if (rRange.getMin() < 0 || rRange.getMax() > 255) {\n","            throw new InvalidSettingException(\"Color's R-value out of bounds, must limited to [0, 255].\");\n","        }\n","        if (gRange.getMin() < 0 || gRange.getMax() > 255) {\n","            throw new InvalidSettingException(\"Color's G-value out of bounds, must limited to [0, 255].\");\n","        }\n","        if (bRange.getMin() < 0 || bRange.getMax() > 255) {\n","            throw new InvalidSettingException(\"Color's B-value out of bounds, must limited to [0, 255].\");\n","        }\n","\n","        int r = RandomUtils.randomInt(rRange.getMin(), rRange.getMax());\n","        int g = RandomUtils.randomInt(gRange.getMin(), gRange.getMax());\n","        int b = RandomUtils.randomInt(bRange.getMin(), bRange.getMax());\n","        return new Color(r, g, b);\n","    }\n","\n","    /**\n","     * Select a color from multiple options.\n","     *\n","     * @param options All options.\n","     * @return The selected color.\n","     */\n","    public static Color anyOf(Color... options) {\n","        if (CollectionUtils.isNullOrEmpty(options)) {\n","            throw new InvalidSettingException(\"No options.\");\n","        }\n","        int index = RandomUtils.randomInt(0, options.length - 1);\n","        return options[index];\n","    }\n","\n","    /**\n","     * Gets the color's RGB of the center of the region.\n","     *\n","     * @param img The original image.\n","     * @param x The x coordinate of the upper left corner of the rectangle.\n","     * @param y The y coordinate of the upper left corner of the rectangle.\n","     * @param w The width of the rectangle.\n","     * @param h The height of the rectangle.\n","     * @return The color's RGB value.\n","     */\n","    public static int obtainRectCenterRGB(BufferedImage img, int x, int y, int w, int h) {\n","        ObjectUtils.excNull(img, \"BufferedImage is null.\");\n","        if(w <= 0) {\n","            throw new InvalidSettingException(\"The width of region cannot be less than or equal to 0.\");\n","        }\n","        if(h <= 0) {\n","            throw new InvalidSettingException(\"The height of region cannot be less than or equal to 0.\");\n","        }\n","        if(x < 0) {\n","            throw new InvalidSettingException(\"The x coordinate of the upper left corner cannot be less than or equal to 0.\");\n","        }\n","        if(y < 0) {\n","            throw new InvalidSettingException(\"The y coordinate of the upper left corner cannot be less than or equal to 0.\");\n","        }\n","\n","        if((x + w) > img.getWidth()) {\n","            throw new InvalidSettingException(\"The specified region crosses the width of the image.\");\n","        }\n","        if((y + h) > img.getHeight()) {\n","            throw new InvalidSettingException(\"The specified region crosses the height of the image.\");\n","        }\n","\n","        int centerX = x + w / 2;\n","        int centerY = y + h / 2;\n","        return img.getRGB(centerX, centerY);\n","    }\n","\n","}\n"],"test_content":["package cn.core.utils;\n","\n","import cn.core.TestUtils;\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.tool.Range;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","\n","public class ColorUtilsTest {\n","\n","    @Test\n","    public void test_of_correctUsage() {\n","        // given\n","        int redComponent = 157;\n","        int greenComponent = 23;\n","        int blueComponent = 249;\n","\n","        // when\n","        Color color = ColorUtils.of(redComponent, greenComponent, blueComponent);\n","\n","        // then\n","        Assert.assertEquals(redComponent, color.getRed());\n","        Assert.assertEquals(greenComponent, color.getGreen());\n","        Assert.assertEquals(blueComponent, color.getBlue());\n","    }\n","\n","    @Test\n","    public void testEx_of_redComponentOutOfBound() {\n","\n","        IllegalArgumentException exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> ColorUtils.of(256, 0, 0));\n","\n","        Assert.assertEquals(\"Color parameter outside of expected range: Red\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void test_ofRGB_correctUsage() {\n","        // given\n","        int redComponent = 157;\n","        int greenComponent = 23;\n","        int blueComponent = 249;\n","        int rgb = (redComponent << 16) + (greenComponent << 8) + blueComponent;\n","\n","        // when\n","        Color color = ColorUtils.ofRGB(rgb);\n","\n","        // then\n","        Assert.assertEquals(redComponent, color.getRed());\n","        Assert.assertEquals(greenComponent, color.getGreen());\n","        Assert.assertEquals(blueComponent, color.getBlue());\n","    }\n","\n","    @Test\n","    public void test_random_correctUsage() {\n","        // given\n","        Range<Integer> redComponentRange = Range.ofInt(25, 70);\n","        Range<Integer> greenComponentRange = Range.ofInt(0, 200);\n","        Range<Integer> blueComponentRange = Range.ofInt(156, 158);\n","\n","        // when\n","        Color randomColor = ColorUtils.random(redComponentRange, greenComponentRange, blueComponentRange);\n","\n","        // then\n","        Assert.assertTrue(redComponentRange.within(randomColor.getRed()));\n","        Assert.assertTrue(greenComponentRange.within(randomColor.getGreen()));\n","        Assert.assertTrue(blueComponentRange.within(randomColor.getBlue()));\n","    }\n","\n","    @Test\n","    public void testEx_random_greenRangeOutOfBound() {\n","        Range<Integer> redComponentRange = Range.ofInt(25, 70);\n","        Range<Integer> greenComponentRange = Range.ofInt(-1, 200);\n","        Range<Integer> blueComponentRange = Range.ofInt(156, 158);\n","\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> ColorUtils.random(redComponentRange, greenComponentRange, blueComponentRange));\n","        Assert.assertEquals(\"Color's G-value out of bounds, must limited to [0, 255].\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void test_anyOf_correctUsage() {\n","        // given\n","        Color one = Color.BLACK;\n","        Color two = Color.WHITE;\n","        Color three = Color.RED;\n","        Color four = Color.GRAY;\n","        \n","        // when\n","        Color selectedItem = ColorUtils.anyOf(one, two, three, four);\n","\n","        // then\n","        Assert.assertNotNull(selectedItem);\n","\n","        boolean withinScope = selectedItem == one || selectedItem == two ||\n","                selectedItem == three || selectedItem == four;\n","        Assert.assertTrue(withinScope);\n","    }\n","\n","    @Test\n","    public void testEx_anyOf_emptyOptions() {\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> ColorUtils.anyOf(new Color[0]));\n","        Assert.assertEquals(\"No options.\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void test_obtainRectCenterRGB_correctUsage() throws IOException {\n","        // given\n","        int x = 20;\n","        int y = 30;\n","        int width = 5;\n","        int height = 14;\n","        BufferedImage img = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","\n","        // when\n","        int rgb = ColorUtils.obtainRectCenterRGB(img, x, y, width, height);\n","\n","        // then\n","        int centerX = x + (width / 2);\n","        int centerY = y + (height / 2);\n","        Assert.assertEquals(rgb, img.getRGB(centerX, centerY));\n","    }\n","\n","    @Test\n","    public void testEx_obtainRectCenterRGB_nullImage() {\n","        NullPointerException exception = Assert.assertThrows(NullPointerException.class,\n","                () -> ColorUtils.obtainRectCenterRGB(null, 0, 0, 2, 2));\n","        Assert.assertEquals(\"BufferedImage is null.\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_obtainRectCenterRGB_invalidWidth() throws IOException {\n","        BufferedImage image = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> ColorUtils.obtainRectCenterRGB(image, 0, 0, 0, 2));\n","        Assert.assertEquals(\"The width of region cannot be less than or equal to 0.\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_obtainRectCenterRGB_xOutOfBound() throws IOException {\n","        BufferedImage image = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> ColorUtils.obtainRectCenterRGB(image, 100, 0, 57, 2));\n","        Assert.assertEquals(\"The specified region crosses the width of the image.\",\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_obtainRectCenterRGB_yOutOfBound() throws IOException {\n","        BufferedImage image = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","\n","        InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                () -> ColorUtils.obtainRectCenterRGB(image, 0, 70, 2, 29));\n","        Assert.assertEquals(\"The specified region crosses the height of the image.\",\n","                exception.getMessage());\n","    }\n","}\n"],"method_lines_dic":{"ColorUtils::::of(int,int,int)":[25,27],"ColorUtils::::ofRGB(int)":[35,37],"ColorUtils::::random()":[44,47],"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)":[57,72],"ColorUtils::::anyOf(java.awt.Color[])":[80,86],"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)":[98,123]},"test_method_lines_dic":{"ColorUtilsTest::::test_of_correctUsage()":[15,29],"ColorUtilsTest::::testEx_of_redComponentOutOfBound()":[31,39],"ColorUtilsTest::::test_ofRGB_correctUsage()":[41,56],"ColorUtilsTest::::test_random_correctUsage()":[58,72],"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()":[74,84],"ColorUtilsTest::::test_anyOf_correctUsage()":[86,103],"ColorUtilsTest::::testEx_anyOf_emptyOptions()":[105,111],"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()":[113,129],"ColorUtilsTest::::testEx_obtainRectCenterRGB_nullImage()":[131,137],"ColorUtilsTest::::testEx_obtainRectCenterRGB_invalidWidth()":[139,147],"ColorUtilsTest::::testEx_obtainRectCenterRGB_xOutOfBound()":[149,157],"ColorUtilsTest::::testEx_obtainRectCenterRGB_yOutOfBound()":[159,167]},"reverse_method_lines_dic":{"25":"ColorUtils::::of(int,int,int)","26":"ColorUtils::::of(int,int,int)","27":"ColorUtils::::of(int,int,int)","35":"ColorUtils::::ofRGB(int)","36":"ColorUtils::::ofRGB(int)","37":"ColorUtils::::ofRGB(int)","44":"ColorUtils::::random()","45":"ColorUtils::::random()","46":"ColorUtils::::random()","47":"ColorUtils::::random()","57":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","58":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","59":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","60":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","61":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","62":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","63":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","64":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","65":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","66":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","67":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","68":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","69":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","70":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","71":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","72":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)","80":"ColorUtils::::anyOf(java.awt.Color[])","81":"ColorUtils::::anyOf(java.awt.Color[])","82":"ColorUtils::::anyOf(java.awt.Color[])","83":"ColorUtils::::anyOf(java.awt.Color[])","84":"ColorUtils::::anyOf(java.awt.Color[])","85":"ColorUtils::::anyOf(java.awt.Color[])","86":"ColorUtils::::anyOf(java.awt.Color[])","98":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","99":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","100":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","101":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","102":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","103":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","104":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","105":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","106":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","107":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","108":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","109":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","110":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","111":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","112":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","113":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","114":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","115":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","116":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","117":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","118":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","119":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","120":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","121":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","122":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)","123":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)"},"test_reverse_method_lines_dic":{"15":"ColorUtilsTest::::test_of_correctUsage()","16":"ColorUtilsTest::::test_of_correctUsage()","17":"ColorUtilsTest::::test_of_correctUsage()","18":"ColorUtilsTest::::test_of_correctUsage()","19":"ColorUtilsTest::::test_of_correctUsage()","20":"ColorUtilsTest::::test_of_correctUsage()","21":"ColorUtilsTest::::test_of_correctUsage()","22":"ColorUtilsTest::::test_of_correctUsage()","23":"ColorUtilsTest::::test_of_correctUsage()","24":"ColorUtilsTest::::test_of_correctUsage()","25":"ColorUtilsTest::::test_of_correctUsage()","26":"ColorUtilsTest::::test_of_correctUsage()","27":"ColorUtilsTest::::test_of_correctUsage()","28":"ColorUtilsTest::::test_of_correctUsage()","29":"ColorUtilsTest::::test_of_correctUsage()","31":"ColorUtilsTest::::testEx_of_redComponentOutOfBound()","32":"ColorUtilsTest::::testEx_of_redComponentOutOfBound()","33":"ColorUtilsTest::::testEx_of_redComponentOutOfBound()","34":"ColorUtilsTest::::testEx_of_redComponentOutOfBound()","35":"ColorUtilsTest::::testEx_of_redComponentOutOfBound()","36":"ColorUtilsTest::::testEx_of_redComponentOutOfBound()","37":"ColorUtilsTest::::testEx_of_redComponentOutOfBound()","38":"ColorUtilsTest::::testEx_of_redComponentOutOfBound()","39":"ColorUtilsTest::::testEx_of_redComponentOutOfBound()","41":"ColorUtilsTest::::test_ofRGB_correctUsage()","42":"ColorUtilsTest::::test_ofRGB_correctUsage()","43":"ColorUtilsTest::::test_ofRGB_correctUsage()","44":"ColorUtilsTest::::test_ofRGB_correctUsage()","45":"ColorUtilsTest::::test_ofRGB_correctUsage()","46":"ColorUtilsTest::::test_ofRGB_correctUsage()","47":"ColorUtilsTest::::test_ofRGB_correctUsage()","48":"ColorUtilsTest::::test_ofRGB_correctUsage()","49":"ColorUtilsTest::::test_ofRGB_correctUsage()","50":"ColorUtilsTest::::test_ofRGB_correctUsage()","51":"ColorUtilsTest::::test_ofRGB_correctUsage()","52":"ColorUtilsTest::::test_ofRGB_correctUsage()","53":"ColorUtilsTest::::test_ofRGB_correctUsage()","54":"ColorUtilsTest::::test_ofRGB_correctUsage()","55":"ColorUtilsTest::::test_ofRGB_correctUsage()","56":"ColorUtilsTest::::test_ofRGB_correctUsage()","58":"ColorUtilsTest::::test_random_correctUsage()","59":"ColorUtilsTest::::test_random_correctUsage()","60":"ColorUtilsTest::::test_random_correctUsage()","61":"ColorUtilsTest::::test_random_correctUsage()","62":"ColorUtilsTest::::test_random_correctUsage()","63":"ColorUtilsTest::::test_random_correctUsage()","64":"ColorUtilsTest::::test_random_correctUsage()","65":"ColorUtilsTest::::test_random_correctUsage()","66":"ColorUtilsTest::::test_random_correctUsage()","67":"ColorUtilsTest::::test_random_correctUsage()","68":"ColorUtilsTest::::test_random_correctUsage()","69":"ColorUtilsTest::::test_random_correctUsage()","70":"ColorUtilsTest::::test_random_correctUsage()","71":"ColorUtilsTest::::test_random_correctUsage()","72":"ColorUtilsTest::::test_random_correctUsage()","74":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","75":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","76":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","77":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","78":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","79":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","80":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","81":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","82":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","83":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","84":"ColorUtilsTest::::testEx_random_greenRangeOutOfBound()","86":"ColorUtilsTest::::test_anyOf_correctUsage()","87":"ColorUtilsTest::::test_anyOf_correctUsage()","88":"ColorUtilsTest::::test_anyOf_correctUsage()","89":"ColorUtilsTest::::test_anyOf_correctUsage()","90":"ColorUtilsTest::::test_anyOf_correctUsage()","91":"ColorUtilsTest::::test_anyOf_correctUsage()","92":"ColorUtilsTest::::test_anyOf_correctUsage()","93":"ColorUtilsTest::::test_anyOf_correctUsage()","94":"ColorUtilsTest::::test_anyOf_correctUsage()","95":"ColorUtilsTest::::test_anyOf_correctUsage()","96":"ColorUtilsTest::::test_anyOf_correctUsage()","97":"ColorUtilsTest::::test_anyOf_correctUsage()","98":"ColorUtilsTest::::test_anyOf_correctUsage()","99":"ColorUtilsTest::::test_anyOf_correctUsage()","100":"ColorUtilsTest::::test_anyOf_correctUsage()","101":"ColorUtilsTest::::test_anyOf_correctUsage()","102":"ColorUtilsTest::::test_anyOf_correctUsage()","103":"ColorUtilsTest::::test_anyOf_correctUsage()","105":"ColorUtilsTest::::testEx_anyOf_emptyOptions()","106":"ColorUtilsTest::::testEx_anyOf_emptyOptions()","107":"ColorUtilsTest::::testEx_anyOf_emptyOptions()","108":"ColorUtilsTest::::testEx_anyOf_emptyOptions()","109":"ColorUtilsTest::::testEx_anyOf_emptyOptions()","110":"ColorUtilsTest::::testEx_anyOf_emptyOptions()","111":"ColorUtilsTest::::testEx_anyOf_emptyOptions()","113":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","114":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","115":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","116":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","117":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","118":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","119":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","120":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","121":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","122":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","123":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","124":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","125":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","126":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","127":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","128":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","129":"ColorUtilsTest::::test_obtainRectCenterRGB_correctUsage()","131":"ColorUtilsTest::::testEx_obtainRectCenterRGB_nullImage()","132":"ColorUtilsTest::::testEx_obtainRectCenterRGB_nullImage()","133":"ColorUtilsTest::::testEx_obtainRectCenterRGB_nullImage()","134":"ColorUtilsTest::::testEx_obtainRectCenterRGB_nullImage()","135":"ColorUtilsTest::::testEx_obtainRectCenterRGB_nullImage()","136":"ColorUtilsTest::::testEx_obtainRectCenterRGB_nullImage()","137":"ColorUtilsTest::::testEx_obtainRectCenterRGB_nullImage()","139":"ColorUtilsTest::::testEx_obtainRectCenterRGB_invalidWidth()","140":"ColorUtilsTest::::testEx_obtainRectCenterRGB_invalidWidth()","141":"ColorUtilsTest::::testEx_obtainRectCenterRGB_invalidWidth()","142":"ColorUtilsTest::::testEx_obtainRectCenterRGB_invalidWidth()","143":"ColorUtilsTest::::testEx_obtainRectCenterRGB_invalidWidth()","144":"ColorUtilsTest::::testEx_obtainRectCenterRGB_invalidWidth()","145":"ColorUtilsTest::::testEx_obtainRectCenterRGB_invalidWidth()","146":"ColorUtilsTest::::testEx_obtainRectCenterRGB_invalidWidth()","147":"ColorUtilsTest::::testEx_obtainRectCenterRGB_invalidWidth()","149":"ColorUtilsTest::::testEx_obtainRectCenterRGB_xOutOfBound()","150":"ColorUtilsTest::::testEx_obtainRectCenterRGB_xOutOfBound()","151":"ColorUtilsTest::::testEx_obtainRectCenterRGB_xOutOfBound()","152":"ColorUtilsTest::::testEx_obtainRectCenterRGB_xOutOfBound()","153":"ColorUtilsTest::::testEx_obtainRectCenterRGB_xOutOfBound()","154":"ColorUtilsTest::::testEx_obtainRectCenterRGB_xOutOfBound()","155":"ColorUtilsTest::::testEx_obtainRectCenterRGB_xOutOfBound()","156":"ColorUtilsTest::::testEx_obtainRectCenterRGB_xOutOfBound()","157":"ColorUtilsTest::::testEx_obtainRectCenterRGB_xOutOfBound()","159":"ColorUtilsTest::::testEx_obtainRectCenterRGB_yOutOfBound()","160":"ColorUtilsTest::::testEx_obtainRectCenterRGB_yOutOfBound()","161":"ColorUtilsTest::::testEx_obtainRectCenterRGB_yOutOfBound()","162":"ColorUtilsTest::::testEx_obtainRectCenterRGB_yOutOfBound()","163":"ColorUtilsTest::::testEx_obtainRectCenterRGB_yOutOfBound()","164":"ColorUtilsTest::::testEx_obtainRectCenterRGB_yOutOfBound()","165":"ColorUtilsTest::::testEx_obtainRectCenterRGB_yOutOfBound()","166":"ColorUtilsTest::::testEx_obtainRectCenterRGB_yOutOfBound()","167":"ColorUtilsTest::::testEx_obtainRectCenterRGB_yOutOfBound()"},"tests":[{"test_lines":[15,29],"covered_lines":[26],"label":"ColorUtils::::of(int,int,int)"},{"test_lines":[41,56],"covered_lines":[36],"label":"ColorUtils::::ofRGB(int)"},{"test_lines":[58,72],"covered_lines":[58,61,64,68,69,70,71],"label":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)"},{"test_lines":[74,84],"covered_lines":[58,61,62],"label":"ColorUtils::::random(cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>,cn.core.tool.Range<java.lang.Integer>)"},{"test_lines":[86,103],"covered_lines":[81,84,85],"label":"ColorUtils::::anyOf(java.awt.Color[])"},{"test_lines":[105,111],"covered_lines":[81,82],"label":"ColorUtils::::anyOf(java.awt.Color[])"},{"test_lines":[113,129],"covered_lines":[99,100,103,106,109,113,116,120,121,122],"label":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)"},{"test_lines":[139,147],"covered_lines":[99,100,101],"label":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)"},{"test_lines":[149,157],"covered_lines":[99,100,103,106,109,113,114],"label":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)"},{"test_lines":[159,167],"covered_lines":[99,100,103,106,109,113,116,117],"label":"ColorUtils::::obtainRectCenterRGB(java.awt.image.BufferedImage,int,int,int,int)"}]},"/bernard/dataset_construction/prep/repos/imglib/core/src/main/java/cn/core/utils/RandomUtils.java":{"class_content":["package cn.core.utils;\n","\n","import java.util.Random;\n","\n","/**\n"," * An util class for random.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public final class RandomUtils {\n","    private RandomUtils(){}\n","\n","    private static final Random RANDOM = new Random();\n","\n","    /**\n","     * Get a random integer.\n","     *\n","     * @param min The lower limit of the value range.\n","     * @param max The upper limit of the value range.\n","     * @return The random integer which limited to [min, max].\n","     */\n","    public static int randomInt(int min, int max) {\n","        return RANDOM.nextInt(max - min + 1) + min;\n","    }\n","\n","    /**\n","     * Get a random float.\n","     *\n","     * @param min The lower limit of the value range.\n","     * @param max The upper limit of the value range.\n","     * @return The random integer which limited to [min, max).\n","     */\n","    public static float randomFloat(float min, float max) {\n","        return RANDOM.nextFloat() * (max - min) + min;\n","    }\n","}\n"],"test_content":["package cn.core.utils;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","\n","public class RandomUtilsTest {\n","\n","    @Test\n","    public void test_randomInt() {\n","        int randomInt = RandomUtils.randomInt(1, 8);\n","        Assert.assertTrue(randomInt <= 8);\n","        Assert.assertTrue(randomInt >= 1);\n","    }\n","\n","    @Test\n","    public void test_randomFloat() {\n","        float randomFloat = RandomUtils.randomFloat(0.2f, 2.7f);\n","        Assert.assertTrue(randomFloat <= 2.7f);\n","        Assert.assertTrue(randomFloat >= 0.2f);\n","    }\n","}"],"method_lines_dic":{"RandomUtils::::randomInt(int,int)":[23,25],"RandomUtils::::randomFloat(float,float)":[34,36]},"test_method_lines_dic":{"RandomUtilsTest::::test_randomInt()":[8,13],"RandomUtilsTest::::test_randomFloat()":[15,20]},"reverse_method_lines_dic":{"23":"RandomUtils::::randomInt(int,int)","24":"RandomUtils::::randomInt(int,int)","25":"RandomUtils::::randomInt(int,int)","34":"RandomUtils::::randomFloat(float,float)","35":"RandomUtils::::randomFloat(float,float)","36":"RandomUtils::::randomFloat(float,float)"},"test_reverse_method_lines_dic":{"8":"RandomUtilsTest::::test_randomInt()","9":"RandomUtilsTest::::test_randomInt()","10":"RandomUtilsTest::::test_randomInt()","11":"RandomUtilsTest::::test_randomInt()","12":"RandomUtilsTest::::test_randomInt()","13":"RandomUtilsTest::::test_randomInt()","15":"RandomUtilsTest::::test_randomFloat()","16":"RandomUtilsTest::::test_randomFloat()","17":"RandomUtilsTest::::test_randomFloat()","18":"RandomUtilsTest::::test_randomFloat()","19":"RandomUtilsTest::::test_randomFloat()","20":"RandomUtilsTest::::test_randomFloat()"},"tests":[{"test_lines":[8,13],"covered_lines":[14,24],"label":"RandomUtils::::randomInt(int,int)"},{"test_lines":[15,20],"covered_lines":[14,35],"label":"RandomUtils::::randomFloat(float,float)"}]},"/bernard/dataset_construction/prep/repos/imglib/core/src/main/java/cn/core/utils/ObjectUtils.java":{"class_content":["package cn.core.utils;\n","\n","/**\n"," * An util class for Object.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public final class ObjectUtils {\n","    private ObjectUtils(){}\n","\n","    public static boolean isNull(Object o) {\n","        return o == null;\n","    }\n","\n","    public static void excNull(Object o, String msg) {\n","        if (isNull(o)) {\n","            throw new NullPointerException(msg);\n","        }\n","    }\n","}\n"],"test_content":["package cn.core.utils;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","\n","public class ObjectUtilsTest {\n","\n","    @Test\n","    public void testEx_nullObject() {\n","        String exceptionMsg = \"Object is null.\";\n","        NullPointerException exception = Assert.assertThrows(NullPointerException.class,\n","                () -> ObjectUtils.excNull(null, exceptionMsg));\n","        Assert.assertEquals(exceptionMsg,\n","                exception.getMessage());\n","    }\n","}"],"method_lines_dic":{"ObjectUtils::::isNull(java.lang.Object)":[12,14],"ObjectUtils::::excNull(java.lang.Object,java.lang.String)":[16,20]},"test_method_lines_dic":{"ObjectUtilsTest::::testEx_nullObject()":[8,15]},"reverse_method_lines_dic":{"12":"ObjectUtils::::isNull(java.lang.Object)","13":"ObjectUtils::::isNull(java.lang.Object)","14":"ObjectUtils::::isNull(java.lang.Object)","16":"ObjectUtils::::excNull(java.lang.Object,java.lang.String)","17":"ObjectUtils::::excNull(java.lang.Object,java.lang.String)","18":"ObjectUtils::::excNull(java.lang.Object,java.lang.String)","19":"ObjectUtils::::excNull(java.lang.Object,java.lang.String)","20":"ObjectUtils::::excNull(java.lang.Object,java.lang.String)"},"test_reverse_method_lines_dic":{"8":"ObjectUtilsTest::::testEx_nullObject()","9":"ObjectUtilsTest::::testEx_nullObject()","10":"ObjectUtilsTest::::testEx_nullObject()","11":"ObjectUtilsTest::::testEx_nullObject()","12":"ObjectUtilsTest::::testEx_nullObject()","13":"ObjectUtilsTest::::testEx_nullObject()","14":"ObjectUtilsTest::::testEx_nullObject()","15":"ObjectUtilsTest::::testEx_nullObject()"},"tests":[{"test_lines":[8,15],"covered_lines":[13,17,18],"label":"ObjectUtils::::excNull(java.lang.Object,java.lang.String)"}]}}