{"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/filter/RoundRectHandler.java":{"class_content":["package cn.t8s.filter;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.GenericBuilder;\n","import cn.core.utils.BufferedImageUtils;\n","import cn.core.utils.ObjectUtils;\n","import net.coobird.thumbnailator.filters.ImageFilter;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","\n","/**\n"," * An image filter that can add a round rect for image.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class RoundRectHandler implements ImageFilter {\n","\n","    /**\n","     * the horizontal diameter of the arc at the four corners\n","     */\n","    private final int arcWidth;\n","\n","    /**\n","     * the vertical diameter of the arc at the four corners\n","     */\n","    private final int arcHeight;\n","\n","\n","    public RoundRectHandler(Builder bu) {\n","        this.arcWidth = bu.arcWidth;\n","        this.arcHeight = bu.arcHeight;\n","    }\n","\n","    @Override\n","    public BufferedImage apply(BufferedImage img) {\n","        ObjectUtils.excNull(img, \"Original image is null.\");\n","        int w = img.getWidth();\n","        int h = img.getHeight();\n","        // new an t image\n","        BufferedImage tar = BufferedImageUtils.newTransparentImage(w, h);\n","        // paint round rectangle\n","        Graphics2D g2d = tar.createGraphics();\n","        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n","        g2d.fillRoundRect(0, 0, w, h, arcWidth, arcHeight);\n","        g2d.setComposite(AlphaComposite.SrcIn);\n","\n","        g2d.drawImage(img, 0, 0, w, h, null);\n","\n","        g2d.dispose();\n","        return tar;\n","    }\n","\n","    public static class Builder implements GenericBuilder<RoundRectHandler> {\n","        private int arcWidth;\n","        private int arcHeight;\n","\n","        public Builder arcWidth(int arcWidth) {\n","            this.arcWidth = arcWidth;\n","            return this;\n","        }\n","\n","        public Builder arcHeight(int arcHeight) {\n","            this.arcHeight = arcHeight;\n","            return this;\n","        }\n","\n","        @Override\n","        public RoundRectHandler build() {\n","            if (arcWidth < 0) {\n","                throw new InvalidSettingException(\"The horizontal diameter of the arc must be greater than 0.\");\n","            }\n","            if (arcHeight < 0) {\n","                throw new InvalidSettingException(\"The vertical diameter of the arc must be greater than 0.\");\n","            }\n","\n","            boolean invalidAw = arcWidth == 0;\n","            boolean invalidAh = arcHeight == 0;\n","            if (invalidAw && invalidAh) {\n","                throw new InvalidSettingException(\"The horizontal diameter and vertical diameter of the arc cannot both be less than or equal to 0.\");\n","            }\n","\n","            if (invalidAw || invalidAh) {\n","                arcWidth = arcHeight = Math.max(arcHeight, arcWidth);\n","            }\n","\n","            return new RoundRectHandler(this);\n","        }\n","    }\n","}\n"],"test_content":["package cn.t8s.filter;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.t8s.BufferedImageComparer;\n","import cn.t8s.ReflectionUtils;\n","import cn.t8s.TestUtils;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","public class RoundRectHandlerTest {\n","\n","    @Test\n","    public void test_apply_correctUsage() throws IOException {\n","        // given\n","        RoundRectHandler handler = new RoundRectHandler.Builder()\n","                .arcHeight(50)\n","                .arcWidth(25)\n","                .build();\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","\n","        // when\n","        BufferedImage target = handler.apply(source);\n","\n","        // then\n","        BufferedImage image = new BufferedImage(source.getWidth(), source.getHeight(), BufferedImage.TYPE_INT_ARGB);\n","        Graphics2D g = image.createGraphics();\n","        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n","        g.fillRoundRect(0, 0, image.getWidth(), image.getHeight(), 25, 50);\n","        g.setComposite(AlphaComposite.SrcIn);\n","        g.drawImage(source, 0, 0, image.getWidth(), image.getHeight(), null);\n","        g.dispose();\n","\n","        Assert.assertTrue(BufferedImageComparer.isSame(target, image));\n","    }\n","\n","    @Test\n","    public void testEx_apply_nullImage() {\n","        RoundRectHandler handler = new RoundRectHandler.Builder()\n","                .arcHeight(50)\n","                .arcWidth(25)\n","                .build();\n","\n","        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n","                () -> handler.apply(null));\n","        Assert.assertEquals(\"Original image is null.\", ex.getMessage());\n","    }\n","\n","\n","    public static class BuilderTest {\n","\n","        @Test\n","        public void test_build_correctUsage() {\n","            // given\n","            int arc_w = 7;\n","            int arc_h = 185;\n","\n","            // when\n","            RoundRectHandler handler = new RoundRectHandler.Builder()\n","                    .arcHeight(arc_h)\n","                    .arcWidth(arc_w)\n","                    .build();\n","\n","            // then\n","            Assert.assertEquals(arc_w, ReflectionUtils.get(\"arcWidth\", handler));\n","            Assert.assertEquals(arc_h, ReflectionUtils.get(\"arcHeight\", handler));\n","        }\n","\n","        @Test\n","        public void testEx_build_withNullParam() {\n","            RoundRectHandler.Builder builder = new RoundRectHandler.Builder();\n","            InvalidSettingException exception = Assert.assertThrows(InvalidSettingException.class,\n","                    builder::build);\n","            Assert.assertEquals(\"The horizontal diameter and vertical diameter of the arc cannot both be less than or equal to 0.\",\n","                    exception.getMessage());\n","        }\n","\n","        @Test\n","        public void testEx_build_withInvalidParam() {\n","            // the width of arc less than 0\n","            RoundRectHandler.Builder builder1 = new RoundRectHandler.Builder()\n","                    .arcWidth(-80);\n","            InvalidSettingException e1 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder1::build);\n","            Assert.assertEquals(\"The horizontal diameter of the arc must be greater than 0.\",\n","                    e1.getMessage());\n","\n","            // the height of arc less than 0\n","            RoundRectHandler.Builder builder2 = new RoundRectHandler.Builder()\n","                    .arcHeight(-80);\n","            InvalidSettingException e2 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder2::build);\n","            Assert.assertEquals(\"The vertical diameter of the arc must be greater than 0.\",\n","                    e2.getMessage());\n","        }\n","    }\n","\n","}"],"method_lines_dic":{"RoundRectHandler::::apply(java.awt.image.BufferedImage)":[35,52],"RoundRectHandler.Builder::::arcWidth(int)":[58,61],"RoundRectHandler.Builder::::arcHeight(int)":[63,66],"RoundRectHandler.Builder::::build()":[68,88]},"test_method_lines_dic":{"RoundRectHandlerTest::::test_apply_correctUsage()":[15,37],"RoundRectHandlerTest::::testEx_apply_nullImage()":[39,49],"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()":[54,69],"RoundRectHandlerTest.BuilderTest::::testEx_build_withNullParam()":[71,78],"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()":[80,97]},"reverse_method_lines_dic":{"35":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","36":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","37":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","38":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","39":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","40":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","41":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","42":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","43":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","44":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","45":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","46":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","47":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","48":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","49":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","50":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","51":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","52":"RoundRectHandler::::apply(java.awt.image.BufferedImage)","58":"RoundRectHandler.Builder::::arcWidth(int)","59":"RoundRectHandler.Builder::::arcWidth(int)","60":"RoundRectHandler.Builder::::arcWidth(int)","61":"RoundRectHandler.Builder::::arcWidth(int)","63":"RoundRectHandler.Builder::::arcHeight(int)","64":"RoundRectHandler.Builder::::arcHeight(int)","65":"RoundRectHandler.Builder::::arcHeight(int)","66":"RoundRectHandler.Builder::::arcHeight(int)","68":"RoundRectHandler.Builder::::build()","69":"RoundRectHandler.Builder::::build()","70":"RoundRectHandler.Builder::::build()","71":"RoundRectHandler.Builder::::build()","72":"RoundRectHandler.Builder::::build()","73":"RoundRectHandler.Builder::::build()","74":"RoundRectHandler.Builder::::build()","75":"RoundRectHandler.Builder::::build()","76":"RoundRectHandler.Builder::::build()","77":"RoundRectHandler.Builder::::build()","78":"RoundRectHandler.Builder::::build()","79":"RoundRectHandler.Builder::::build()","80":"RoundRectHandler.Builder::::build()","81":"RoundRectHandler.Builder::::build()","82":"RoundRectHandler.Builder::::build()","83":"RoundRectHandler.Builder::::build()","84":"RoundRectHandler.Builder::::build()","85":"RoundRectHandler.Builder::::build()","86":"RoundRectHandler.Builder::::build()","87":"RoundRectHandler.Builder::::build()","88":"RoundRectHandler.Builder::::build()"},"test_reverse_method_lines_dic":{"15":"RoundRectHandlerTest::::test_apply_correctUsage()","16":"RoundRectHandlerTest::::test_apply_correctUsage()","17":"RoundRectHandlerTest::::test_apply_correctUsage()","18":"RoundRectHandlerTest::::test_apply_correctUsage()","19":"RoundRectHandlerTest::::test_apply_correctUsage()","20":"RoundRectHandlerTest::::test_apply_correctUsage()","21":"RoundRectHandlerTest::::test_apply_correctUsage()","22":"RoundRectHandlerTest::::test_apply_correctUsage()","23":"RoundRectHandlerTest::::test_apply_correctUsage()","24":"RoundRectHandlerTest::::test_apply_correctUsage()","25":"RoundRectHandlerTest::::test_apply_correctUsage()","26":"RoundRectHandlerTest::::test_apply_correctUsage()","27":"RoundRectHandlerTest::::test_apply_correctUsage()","28":"RoundRectHandlerTest::::test_apply_correctUsage()","29":"RoundRectHandlerTest::::test_apply_correctUsage()","30":"RoundRectHandlerTest::::test_apply_correctUsage()","31":"RoundRectHandlerTest::::test_apply_correctUsage()","32":"RoundRectHandlerTest::::test_apply_correctUsage()","33":"RoundRectHandlerTest::::test_apply_correctUsage()","34":"RoundRectHandlerTest::::test_apply_correctUsage()","35":"RoundRectHandlerTest::::test_apply_correctUsage()","36":"RoundRectHandlerTest::::test_apply_correctUsage()","37":"RoundRectHandlerTest::::test_apply_correctUsage()","39":"RoundRectHandlerTest::::testEx_apply_nullImage()","40":"RoundRectHandlerTest::::testEx_apply_nullImage()","41":"RoundRectHandlerTest::::testEx_apply_nullImage()","42":"RoundRectHandlerTest::::testEx_apply_nullImage()","43":"RoundRectHandlerTest::::testEx_apply_nullImage()","44":"RoundRectHandlerTest::::testEx_apply_nullImage()","45":"RoundRectHandlerTest::::testEx_apply_nullImage()","46":"RoundRectHandlerTest::::testEx_apply_nullImage()","47":"RoundRectHandlerTest::::testEx_apply_nullImage()","48":"RoundRectHandlerTest::::testEx_apply_nullImage()","49":"RoundRectHandlerTest::::testEx_apply_nullImage()","54":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","55":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","56":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","57":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","58":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","59":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","60":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","61":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","62":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","63":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","64":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","65":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","66":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","67":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","68":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","69":"RoundRectHandlerTest.BuilderTest::::test_build_correctUsage()","71":"RoundRectHandlerTest.BuilderTest::::testEx_build_withNullParam()","72":"RoundRectHandlerTest.BuilderTest::::testEx_build_withNullParam()","73":"RoundRectHandlerTest.BuilderTest::::testEx_build_withNullParam()","74":"RoundRectHandlerTest.BuilderTest::::testEx_build_withNullParam()","75":"RoundRectHandlerTest.BuilderTest::::testEx_build_withNullParam()","76":"RoundRectHandlerTest.BuilderTest::::testEx_build_withNullParam()","77":"RoundRectHandlerTest.BuilderTest::::testEx_build_withNullParam()","78":"RoundRectHandlerTest.BuilderTest::::testEx_build_withNullParam()","80":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","81":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","82":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","83":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","84":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","85":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","86":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","87":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","88":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","89":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","90":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","91":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","92":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","93":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","94":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","95":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","96":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","97":"RoundRectHandlerTest.BuilderTest::::testEx_build_withInvalidParam()"},"tests":[{"test_lines":[15,37],"covered_lines":[30,31,32,33,37,38,39,41,43,44,45,46,48,50,51,54,59,60,64,65,70,73,77,78,79,83,87],"label":"RoundRectHandler::::apply(java.awt.image.BufferedImage)"},{"test_lines":[39,49],"covered_lines":[30,31,32,33,54,59,60,64,65,70,73,77,78,79,83,87],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/filter/HighQualityExpandHandler.java":{"class_content":["package cn.t8s.filter;\n","\n","import cn.core.ex.HandlingException;\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.GenericBuilder;\n","import cn.core.utils.ObjectUtils;\n","import net.coobird.thumbnailator.filters.ImageFilter;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","\n","/**\n"," * An image filter that can enlarge an image lossless.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class HighQualityExpandHandler implements ImageFilter {\n","\n","    /**\n","     * Set keep the aspect ratio. If true, only one of width and height should be set.\n","     */\n","    private final boolean keepAspectRatio;\n","\n","    /**\n","     * The final width after expanded.\n","     */\n","    private int finalWidth;\n","\n","    /**\n","     * The final height after expanded.\n","     */\n","    private int finalHeight;\n","\n","    public HighQualityExpandHandler(Builder bu) {\n","        this.keepAspectRatio = bu.keepAspectRatio;\n","        this.finalWidth = bu.finalWidth;\n","        this.finalHeight = bu.finalHeight;\n","    }\n","\n","    @Override\n","    public BufferedImage apply(BufferedImage img) {\n","        ObjectUtils.excNull(img, \"Original image is null.\");\n","\n","        adjust(img.getWidth(), img.getHeight());\n","        // expand and write to new image\n","        Image tmp = img.getScaledInstance(finalWidth, finalHeight, Image.SCALE_FAST);\n","        BufferedImage tar = new BufferedImage(tmp.getWidth(null), tmp.getHeight(null), img.getType());\n","        Graphics2D g2d = tar.createGraphics();\n","        g2d.drawImage(tmp, 0, 0, null);\n","        g2d.dispose();\n","        return tar;\n","    }\n","\n","    private void adjust(int originalWidth, int originalHeight) {\n","        // calculate the scale of expand\n","        float radioW = (float) finalWidth / (float) originalWidth;\n","        float radioH = (float) finalHeight / (float) originalHeight;\n","        float maxRadio = Math.max(radioW, radioH);\n","\n","        // reset the setting if necessary\n","        if (keepAspectRatio) {\n","            if (Float.valueOf(maxRadio).equals(radioW)) {\n","                finalHeight = (int) (maxRadio * originalHeight);\n","            } else {\n","                finalWidth = (int) (maxRadio * originalWidth);\n","            }\n","        }\n","\n","        // check setting validity\n","        if (originalWidth > finalWidth) {\n","            throw new HandlingException(String.format(\"The final width(%s) is less than the original width(%s).\",\n","                    finalWidth, originalWidth));\n","        }\n","        if (originalHeight > finalHeight) {\n","            throw new HandlingException(String.format(\"The final height(%s) is less than the original height(%s).\",\n","                    finalHeight, originalHeight));\n","        }\n","    }\n","\n","    public static class Builder implements GenericBuilder<HighQualityExpandHandler> {\n","        private boolean keepAspectRatio = true;\n","        private int finalWidth;\n","        private int finalHeight;\n","\n","        public Builder keepAspectRatio(boolean keepAspectRatio) {\n","            this.keepAspectRatio = keepAspectRatio;\n","            return this;\n","        }\n","\n","        public Builder finalWidth(int finalWidth) {\n","            this.finalWidth = finalWidth;\n","            return this;\n","        }\n","\n","        public Builder finalHeight(int finalHeight) {\n","            this.finalHeight = finalHeight;\n","            return this;\n","        }\n","\n","        @Override\n","        public HighQualityExpandHandler build() {\n","            if (finalWidth < 0) {\n","                throw new InvalidSettingException(\"The final width after expanded must greater than 0.\");\n","            }\n","            if (finalHeight < 0) {\n","                throw new InvalidSettingException(\"The final height after expanded must greater than 0.\");\n","            }\n","\n","            boolean nonValidWidth = finalWidth <= 0;\n","            boolean nonValidHeight = finalHeight <= 0;\n","\n","            if (keepAspectRatio) {\n","                if (nonValidWidth && nonValidHeight) {\n","                    throw new InvalidSettingException(\"At least one dimension should be set when expected not to keep the aspect ratio.\");\n","                }\n","            } else {\n","                if (nonValidWidth || nonValidHeight) {\n","                    throw new InvalidSettingException(\"Both of dimensions should be set when expected not to keep the aspect ratio.\");\n","                }\n","            }\n","\n","            return new HighQualityExpandHandler(this);\n","        }\n","\n","    }\n","}\n"],"test_content":["package cn.t8s.filter;\n","\n","import cn.core.ex.HandlingException;\n","import cn.core.ex.InvalidSettingException;\n","import cn.t8s.BufferedImageComparer;\n","import cn.t8s.ReflectionUtils;\n","import cn.t8s.TestUtils;\n","import org.junit.Assert;\n","import org.junit.Test;\n","\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","public class HighQualityExpandHandlerTest {\n","\n","    @Test\n","    public void test_apply_correctUsage() throws IOException {\n","        // given\n","        int finalWidth = 500;\n","        int finalHeight = 318; // (500 / 154) * 98\n","        HighQualityExpandHandler handler = new HighQualityExpandHandler.Builder()\n","                .keepAspectRatio(true)\n","                .finalWidth(finalWidth)\n","                .build();\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","\n","        // when\n","        BufferedImage target = handler.apply(source);\n","\n","        // then\n","        Assert.assertEquals(finalWidth, target.getWidth());\n","        Assert.assertEquals(finalHeight, target.getHeight());\n","\n","        // and then\n","        Image tmp = source.getScaledInstance(finalWidth, finalHeight, Image.SCALE_FAST);\n","        BufferedImage image = new BufferedImage(tmp.getWidth(null), tmp.getHeight(null), source.getType());\n","        Graphics g = image.getGraphics();\n","        g.drawImage(tmp, 0, 0, null);\n","        g.dispose();\n","        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n","    }\n","\n","    @Test\n","    public void testEx_apply_nullImage() {\n","        HighQualityExpandHandler handler = new HighQualityExpandHandler.Builder()\n","                .keepAspectRatio(true)\n","                .finalWidth(500)\n","                .build();\n","\n","        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n","                () -> handler.apply(null));\n","        Assert.assertEquals(\"Original image is null.\", ex.getMessage());\n","    }\n","\n","    @Test\n","    public void testEx_apply_invalidFinalSize() throws IOException {\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","\n","        // invalid final width\n","        HighQualityExpandHandler invalidWidthHandler = new HighQualityExpandHandler.Builder()\n","                .keepAspectRatio(false)\n","                .finalWidth(85)\n","                .finalHeight(160)\n","                .build();\n","\n","        HandlingException ex1 = Assert.assertThrows(HandlingException.class,\n","                () -> invalidWidthHandler.apply(source));\n","        Assert.assertEquals(\"The final width(85) is less than the original width(154).\",\n","                ex1.getMessage());\n","\n","        // when not keep aspect ratio\n","        HighQualityExpandHandler invalidHeightHandler = new HighQualityExpandHandler.Builder()\n","                .keepAspectRatio(false)\n","                .finalWidth(200)\n","                .finalHeight(45)\n","                .build();\n","\n","        HandlingException ex2 = Assert.assertThrows(HandlingException.class,\n","                () -> invalidHeightHandler.apply(source));\n","        Assert.assertEquals(\"The final height(45) is less than the original height(98).\",\n","                ex2.getMessage());\n","    }\n","\n","    public static class BuilderTest {\n","\n","        @Test\n","        public void test_build_correctUsage() {\n","            // given\n","            int fw = 200;\n","            int fh = 150;\n","\n","            // when\n","            HighQualityExpandHandler handler = new HighQualityExpandHandler.Builder()\n","                    .keepAspectRatio(false)\n","                    .finalWidth(fw)\n","                    .finalHeight(fh)\n","                    .build();\n","\n","            // then\n","            Assert.assertFalse((Boolean) ReflectionUtils.get(\"keepAspectRatio\", handler));\n","            Assert.assertEquals(fw, ReflectionUtils.get(\"finalWidth\", handler));\n","            Assert.assertEquals(fh, ReflectionUtils.get(\"finalHeight\", handler));\n","        }\n","\n","        @Test\n","        public void testEx_build_invalidParam() {\n","            // final width less than 0\n","            HighQualityExpandHandler.Builder builder1 = new HighQualityExpandHandler.Builder()\n","                    .keepAspectRatio(false)\n","                    .finalWidth(-100)\n","                    .finalHeight(50);\n","            InvalidSettingException e1 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder1::build);\n","            Assert.assertEquals(\"The final width after expanded must greater than 0.\", e1.getMessage());\n","\n","            // final width less than 0\n","            HighQualityExpandHandler.Builder builder2 = new HighQualityExpandHandler.Builder()\n","                    .keepAspectRatio(false)\n","                    .finalWidth(100)\n","                    .finalHeight(-50);\n","            InvalidSettingException e2 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder2::build);\n","            Assert.assertEquals(\"The final height after expanded must greater than 0.\", e2.getMessage());\n","        }\n","\n","        @Test\n","        public void testEx_build_missingParam() {\n","            // missing final width\n","            HighQualityExpandHandler.Builder builder1 = new HighQualityExpandHandler.Builder()\n","                    .keepAspectRatio(false)\n","                    .finalWidth(50);\n","            InvalidSettingException e1 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder1::build);\n","            Assert.assertEquals(\"Both of dimensions should be set when expected not to keep the aspect ratio.\", e1.getMessage());\n","\n","            // missing final height\n","            HighQualityExpandHandler.Builder builder2 = new HighQualityExpandHandler.Builder()\n","                    .keepAspectRatio(false)\n","                    .finalHeight(50);\n","            InvalidSettingException e2 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder2::build);\n","            Assert.assertEquals(\"Both of dimensions should be set when expected not to keep the aspect ratio.\", e2.getMessage());\n","\n","            // missing all\n","            HighQualityExpandHandler.Builder builder3 = new HighQualityExpandHandler.Builder();\n","            InvalidSettingException e3 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder3::build);\n","            Assert.assertEquals(\"At least one dimension should be set when expected not to keep the aspect ratio.\", e3.getMessage());\n","\n","        }\n","    }\n","\n","}"],"method_lines_dic":{"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)":[40,52],"HighQualityExpandHandler::::adjust(int,int)":[54,78],"HighQualityExpandHandler.Builder::::keepAspectRatio(boolean)":[85,88],"HighQualityExpandHandler.Builder::::finalWidth(int)":[90,93],"HighQualityExpandHandler.Builder::::finalHeight(int)":[95,98],"HighQualityExpandHandler.Builder::::build()":[100,123]},"test_method_lines_dic":{"HighQualityExpandHandlerTest::::test_apply_correctUsage()":[17,42],"HighQualityExpandHandlerTest::::testEx_apply_nullImage()":[44,54],"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()":[56,83],"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()":[87,104],"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()":[106,125],"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()":[127,151]},"reverse_method_lines_dic":{"40":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","41":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","42":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","43":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","44":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","45":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","46":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","47":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","48":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","49":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","50":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","51":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","52":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)","54":"HighQualityExpandHandler::::adjust(int,int)","55":"HighQualityExpandHandler::::adjust(int,int)","56":"HighQualityExpandHandler::::adjust(int,int)","57":"HighQualityExpandHandler::::adjust(int,int)","58":"HighQualityExpandHandler::::adjust(int,int)","59":"HighQualityExpandHandler::::adjust(int,int)","60":"HighQualityExpandHandler::::adjust(int,int)","61":"HighQualityExpandHandler::::adjust(int,int)","62":"HighQualityExpandHandler::::adjust(int,int)","63":"HighQualityExpandHandler::::adjust(int,int)","64":"HighQualityExpandHandler::::adjust(int,int)","65":"HighQualityExpandHandler::::adjust(int,int)","66":"HighQualityExpandHandler::::adjust(int,int)","67":"HighQualityExpandHandler::::adjust(int,int)","68":"HighQualityExpandHandler::::adjust(int,int)","69":"HighQualityExpandHandler::::adjust(int,int)","70":"HighQualityExpandHandler::::adjust(int,int)","71":"HighQualityExpandHandler::::adjust(int,int)","72":"HighQualityExpandHandler::::adjust(int,int)","73":"HighQualityExpandHandler::::adjust(int,int)","74":"HighQualityExpandHandler::::adjust(int,int)","75":"HighQualityExpandHandler::::adjust(int,int)","76":"HighQualityExpandHandler::::adjust(int,int)","77":"HighQualityExpandHandler::::adjust(int,int)","78":"HighQualityExpandHandler::::adjust(int,int)","85":"HighQualityExpandHandler.Builder::::keepAspectRatio(boolean)","86":"HighQualityExpandHandler.Builder::::keepAspectRatio(boolean)","87":"HighQualityExpandHandler.Builder::::keepAspectRatio(boolean)","88":"HighQualityExpandHandler.Builder::::keepAspectRatio(boolean)","90":"HighQualityExpandHandler.Builder::::finalWidth(int)","91":"HighQualityExpandHandler.Builder::::finalWidth(int)","92":"HighQualityExpandHandler.Builder::::finalWidth(int)","93":"HighQualityExpandHandler.Builder::::finalWidth(int)","95":"HighQualityExpandHandler.Builder::::finalHeight(int)","96":"HighQualityExpandHandler.Builder::::finalHeight(int)","97":"HighQualityExpandHandler.Builder::::finalHeight(int)","98":"HighQualityExpandHandler.Builder::::finalHeight(int)","100":"HighQualityExpandHandler.Builder::::build()","101":"HighQualityExpandHandler.Builder::::build()","102":"HighQualityExpandHandler.Builder::::build()","103":"HighQualityExpandHandler.Builder::::build()","104":"HighQualityExpandHandler.Builder::::build()","105":"HighQualityExpandHandler.Builder::::build()","106":"HighQualityExpandHandler.Builder::::build()","107":"HighQualityExpandHandler.Builder::::build()","108":"HighQualityExpandHandler.Builder::::build()","109":"HighQualityExpandHandler.Builder::::build()","110":"HighQualityExpandHandler.Builder::::build()","111":"HighQualityExpandHandler.Builder::::build()","112":"HighQualityExpandHandler.Builder::::build()","113":"HighQualityExpandHandler.Builder::::build()","114":"HighQualityExpandHandler.Builder::::build()","115":"HighQualityExpandHandler.Builder::::build()","116":"HighQualityExpandHandler.Builder::::build()","117":"HighQualityExpandHandler.Builder::::build()","118":"HighQualityExpandHandler.Builder::::build()","119":"HighQualityExpandHandler.Builder::::build()","120":"HighQualityExpandHandler.Builder::::build()","121":"HighQualityExpandHandler.Builder::::build()","122":"HighQualityExpandHandler.Builder::::build()","123":"HighQualityExpandHandler.Builder::::build()"},"test_reverse_method_lines_dic":{"17":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","18":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","19":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","20":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","21":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","22":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","23":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","24":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","25":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","26":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","27":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","28":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","29":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","30":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","31":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","32":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","33":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","34":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","35":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","36":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","37":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","38":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","39":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","40":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","41":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","42":"HighQualityExpandHandlerTest::::test_apply_correctUsage()","44":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","45":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","46":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","47":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","48":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","49":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","50":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","51":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","52":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","53":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","54":"HighQualityExpandHandlerTest::::testEx_apply_nullImage()","56":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","57":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","58":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","59":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","60":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","61":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","62":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","63":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","64":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","65":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","66":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","67":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","68":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","69":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","70":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","71":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","72":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","73":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","74":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","75":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","76":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","77":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","78":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","79":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","80":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","81":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","82":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","83":"HighQualityExpandHandlerTest::::testEx_apply_invalidFinalSize()","87":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","88":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","89":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","90":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","91":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","92":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","93":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","94":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","95":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","96":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","97":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","98":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","99":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","100":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","101":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","102":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","103":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","104":"HighQualityExpandHandlerTest.BuilderTest::::test_build_correctUsage()","106":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","107":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","108":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","109":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","110":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","111":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","112":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","113":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","114":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","115":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","116":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","117":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","118":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","119":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","120":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","121":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","122":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","123":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","124":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","125":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_invalidParam()","127":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","128":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","129":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","130":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","131":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","132":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","133":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","134":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","135":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","136":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","137":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","138":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","139":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","140":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","141":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","142":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","143":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","144":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","145":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","146":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","147":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","148":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","149":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","150":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()","151":"HighQualityExpandHandlerTest.BuilderTest::::testEx_build_missingParam()"},"tests":[{"test_lines":[17,42],"covered_lines":[34,35,36,37,38,42,44,46,47,48,49,50,51,56,57,58,61,62,63,70,74,78,80,81,86,87,91,92,102,105,109,110,112,113,122],"label":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)"},{"test_lines":[44,54],"covered_lines":[34,35,36,37,38,80,81,86,87,91,92,102,105,109,110,112,113,122],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[56,83],"covered_lines":[34,35,36,37,38,42,56,57,58,61,70,71,72,74,75,76,80,81,86,87,91,92,96,97,102,105,109,110,112,117,122],"label":"HighQualityExpandHandler::::apply(java.awt.image.BufferedImage)"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/filter/BorderHandler.java":{"class_content":["package cn.t8s.filter;\n","\n","import cn.core.GenericBuilder;\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.tool.Range;\n","import cn.core.utils.BufferedImageUtils;\n","import cn.core.utils.ObjectUtils;\n","import net.coobird.thumbnailator.filters.ImageFilter;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","\n","/**\n"," * An image filter that can add a border for image.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class BorderHandler implements ImageFilter {\n","\n","    /**\n","     * The vertical margin of the border.\n","     */\n","    protected final int vMargins;\n","\n","    /**\n","     * The horizontal margin of the border.\n","     */\n","    protected final int hMargins;\n","\n","    /**\n","     * The alpha of the border which is limited to [0, 1]. When the alpha\n","     * is equal to 0, the border is completely transparent.\n","     */\n","    protected final float alpha;\n","\n","    /**\n","     * The fill color of the border.\n","     */\n","    protected Color fillColor;\n","\n","    public BorderHandler(Builder bu) {\n","        vMargins = bu.vMargins;\n","        hMargins = bu.hMargins;\n","        alpha = bu.alpha;\n","        if (bu.alpha == 0) {\n","            fillColor = null;\n","        } else {\n","            fillColor = bu.fillColor;\n","        }\n","    }\n","\n","    @Override\n","    public BufferedImage apply(BufferedImage img) {\n","        ObjectUtils.excNull(img, \"Original image is null.\");\n","        // create new image\n","        int width = img.getWidth() + (hMargins << 1);\n","        int height = img.getHeight() + (vMargins << 1);\n","        BufferedImage tar = BufferedImageUtils.newBackgroundImage(alpha, width, height, fillColor);\n","        // copy source image to new image\n","        Graphics g = tar.getGraphics();\n","        g.drawImage(img, hMargins, vMargins, null);\n","        g.dispose();\n","        return tar;\n","    }\n","\n","\n","    public static class Builder implements GenericBuilder<BorderHandler> {\n","        private int vMargins;\n","        private int hMargins;\n","        private float alpha = 0f;\n","        private Color fillColor = Color.WHITE;\n","\n","        public Builder vMargins(int vMargins) {\n","            this.vMargins = vMargins;\n","            return this;\n","        }\n","\n","        public Builder hMargins(int hMargins) {\n","            this.hMargins = hMargins;\n","            return this;\n","        }\n","\n","        public Builder alpha(float alpha) {\n","            this.alpha = alpha;\n","            return this;\n","        }\n","\n","        public Builder fillColor(Color fillColor) {\n","            this.fillColor = fillColor;\n","            return this;\n","        }\n","\n","        @Override\n","        public BorderHandler build() {\n","            if (vMargins <= 0) {\n","                throw new InvalidSettingException(\"The vertical margins of border must be greater than 0.\");\n","            }\n","            if (hMargins <= 0) {\n","                throw new InvalidSettingException(\"The horizontal margins of border must be greater than 0.\");\n","            }\n","            if (Range.ofFloat(0f, 1f).notWithin(alpha)) {\n","                throw new InvalidSettingException(\"Alpha out of bounds:[0, 1].\");\n","            }\n","            ObjectUtils.excNull(fillColor, \"Fill color is null.\");\n","\n","            return new BorderHandler(this);\n","        }\n","    }\n","}\n"],"test_content":["package cn.t8s.filter;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.utils.BufferedImageUtils;\n","import cn.t8s.BufferedImageComparer;\n","import cn.t8s.ReflectionUtils;\n","import cn.t8s.TestUtils;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","public class BorderHandlerTest {\n","\n","    @Test\n","    public void test_apply_correctUsage() throws IOException {\n","        // given\n","        BorderHandler handler = new BorderHandler.Builder()\n","                .vMargins(3)\n","                .hMargins(7)\n","                .alpha(0.5f)\n","                .fillColor(Color.BLUE)\n","                .build();\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","\n","        // when\n","        BufferedImage target = handler.apply(source);\n","\n","        // then\n","        Assert.assertEquals(source.getWidth() + 14, target.getWidth());\n","        Assert.assertEquals(source.getHeight() + 6, target.getHeight());\n","\n","        // and then\n","        BufferedImage image = new BufferedImage(source.getWidth() + 14, source.getHeight() + 6, BufferedImage.TYPE_INT_ARGB);\n","        Graphics2D g2d = image.createGraphics();\n","        g2d.setColor(Color.BLUE);\n","        g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, 0.5f));\n","        g2d.fillRect(0, 0, image.getWidth(), image.getHeight());\n","        g2d.dispose();\n","        Graphics g = image.getGraphics();\n","        g.drawImage(source, 7, 3, null);\n","        g.dispose();\n","\n","        Assert.assertTrue(BufferedImageComparer.isSame(target, image));\n","    }\n","\n","    @Test\n","    public void testEx_apply_nullImage() {\n","        BorderHandler handler = new BorderHandler.Builder()\n","                .vMargins(3)\n","                .hMargins(7)\n","                .alpha(0.5f)\n","                .fillColor(Color.BLUE)\n","                .build();\n","\n","        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n","                () -> handler.apply(null));\n","        Assert.assertEquals(\"Original image is null.\", ex.getMessage());\n","    }\n","\n","    public static class BuilderTest {\n","\n","        @Test\n","        public void test_build_correctUsage() {\n","            // given\n","            int horizontalMargins = 8;\n","            int verticalMargins = 12;\n","            float alpha = 0.5f;\n","            Color color = Color.BLACK;\n","\n","            // when\n","            BorderHandler handler = new BorderHandler.Builder()\n","                    .vMargins(verticalMargins)\n","                    .hMargins(horizontalMargins)\n","                    .alpha(alpha)\n","                    .fillColor(color)\n","                    .build();\n","\n","            // then\n","            Assert.assertEquals(horizontalMargins, ReflectionUtils.get(\"hMargins\", handler));\n","            Assert.assertEquals(verticalMargins, ReflectionUtils.get(\"vMargins\", handler));\n","            Assert.assertEquals(alpha, ReflectionUtils.get(\"alpha\", handler));\n","            Assert.assertEquals(color, ReflectionUtils.get(\"fillColor\", handler));\n","        }\n","\n","        @Test\n","        public void testEx_build_withNullParam() {\n","            // null horizontal margins\n","            BorderHandler.Builder nullHMargin = new BorderHandler.Builder()\n","                    .vMargins(10)\n","                    .alpha(0f)\n","                    .fillColor(Color.BLACK);\n","            InvalidSettingException exNullHMargin = Assert.assertThrows(InvalidSettingException.class,\n","                    nullHMargin::build);\n","            Assert.assertEquals(\"The horizontal margins of border must be greater than 0.\",\n","                    exNullHMargin.getMessage());\n","\n","            // null vertical margins\n","            BorderHandler.Builder nullVMargin = new BorderHandler.Builder()\n","                    .hMargins(10)\n","                    .alpha(0f)\n","                    .fillColor(Color.BLACK);\n","            InvalidSettingException exNullVMargin = Assert.assertThrows(InvalidSettingException.class,\n","                    nullVMargin::build);\n","            Assert.assertEquals(\"The vertical margins of border must be greater than 0.\",\n","                    exNullVMargin.getMessage());\n","\n","            // null fill color\n","            BorderHandler.Builder nullColor = new BorderHandler.Builder()\n","                    .vMargins(5)\n","                    .hMargins(10)\n","                    .alpha(0f)\n","                    .fillColor(null);\n","            NullPointerException exNullColor = Assert.assertThrows(NullPointerException.class,\n","                    nullColor::build);\n","            Assert.assertEquals(\"Fill color is null.\",\n","                    exNullColor.getMessage());\n","        }\n","\n","        @Test\n","        public void testEx_build_withInvalidParam() {\n","            // alpha out of range\n","            BorderHandler.Builder invalidAlpha = new BorderHandler.Builder()\n","                    .vMargins(5)\n","                    .hMargins(10)\n","                    .alpha(2f)\n","                    .fillColor(Color.BLACK);\n","            InvalidSettingException exInvalidAlpha = Assert.assertThrows(InvalidSettingException.class,\n","                    invalidAlpha::build);\n","            Assert.assertEquals(\"Alpha out of bounds:[0, 1].\",\n","                    exInvalidAlpha.getMessage());\n","\n","            // horizontal margins less than 0\n","            BorderHandler.Builder invalidVMargin = new BorderHandler.Builder()\n","                    .vMargins(-5)\n","                    .hMargins(10)\n","                    .alpha(0.5f)\n","                    .fillColor(Color.BLACK);\n","            InvalidSettingException exInvalidVMargin = Assert.assertThrows(InvalidSettingException.class,\n","                    invalidVMargin::build);\n","            Assert.assertEquals(\"The vertical margins of border must be greater than 0.\",\n","                    exInvalidVMargin.getMessage());\n","\n","            // vertical margins less than 0\n","            BorderHandler.Builder invalidHMargin = new BorderHandler.Builder()\n","                    .vMargins(5)\n","                    .hMargins(-10)\n","                    .alpha(0.5f)\n","                    .fillColor(Color.BLACK);\n","            InvalidSettingException exInvalidHMargin = Assert.assertThrows(InvalidSettingException.class,\n","                    invalidHMargin::build);\n","            Assert.assertEquals(\"The horizontal margins of border must be greater than 0.\",\n","                    exInvalidHMargin.getMessage());\n","        }\n","    }\n","}\n"],"method_lines_dic":{"BorderHandler::::apply(java.awt.image.BufferedImage)":[52,64],"BorderHandler.Builder::::vMargins(int)":[73,76],"BorderHandler.Builder::::hMargins(int)":[78,81],"BorderHandler.Builder::::alpha(float)":[83,86],"BorderHandler.Builder::::fillColor(java.awt.Color)":[88,91],"BorderHandler.Builder::::build()":[93,107]},"test_method_lines_dic":{"BorderHandlerTest::::test_apply_correctUsage()":[16,46],"BorderHandlerTest::::testEx_apply_nullImage()":[48,60],"BorderHandlerTest.BuilderTest::::test_build_correctUsage()":[64,85],"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()":[87,119],"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()":[121,155]},"reverse_method_lines_dic":{"52":"BorderHandler::::apply(java.awt.image.BufferedImage)","53":"BorderHandler::::apply(java.awt.image.BufferedImage)","54":"BorderHandler::::apply(java.awt.image.BufferedImage)","55":"BorderHandler::::apply(java.awt.image.BufferedImage)","56":"BorderHandler::::apply(java.awt.image.BufferedImage)","57":"BorderHandler::::apply(java.awt.image.BufferedImage)","58":"BorderHandler::::apply(java.awt.image.BufferedImage)","59":"BorderHandler::::apply(java.awt.image.BufferedImage)","60":"BorderHandler::::apply(java.awt.image.BufferedImage)","61":"BorderHandler::::apply(java.awt.image.BufferedImage)","62":"BorderHandler::::apply(java.awt.image.BufferedImage)","63":"BorderHandler::::apply(java.awt.image.BufferedImage)","64":"BorderHandler::::apply(java.awt.image.BufferedImage)","73":"BorderHandler.Builder::::vMargins(int)","74":"BorderHandler.Builder::::vMargins(int)","75":"BorderHandler.Builder::::vMargins(int)","76":"BorderHandler.Builder::::vMargins(int)","78":"BorderHandler.Builder::::hMargins(int)","79":"BorderHandler.Builder::::hMargins(int)","80":"BorderHandler.Builder::::hMargins(int)","81":"BorderHandler.Builder::::hMargins(int)","83":"BorderHandler.Builder::::alpha(float)","84":"BorderHandler.Builder::::alpha(float)","85":"BorderHandler.Builder::::alpha(float)","86":"BorderHandler.Builder::::alpha(float)","88":"BorderHandler.Builder::::fillColor(java.awt.Color)","89":"BorderHandler.Builder::::fillColor(java.awt.Color)","90":"BorderHandler.Builder::::fillColor(java.awt.Color)","91":"BorderHandler.Builder::::fillColor(java.awt.Color)","93":"BorderHandler.Builder::::build()","94":"BorderHandler.Builder::::build()","95":"BorderHandler.Builder::::build()","96":"BorderHandler.Builder::::build()","97":"BorderHandler.Builder::::build()","98":"BorderHandler.Builder::::build()","99":"BorderHandler.Builder::::build()","100":"BorderHandler.Builder::::build()","101":"BorderHandler.Builder::::build()","102":"BorderHandler.Builder::::build()","103":"BorderHandler.Builder::::build()","104":"BorderHandler.Builder::::build()","105":"BorderHandler.Builder::::build()","106":"BorderHandler.Builder::::build()","107":"BorderHandler.Builder::::build()"},"test_reverse_method_lines_dic":{"16":"BorderHandlerTest::::test_apply_correctUsage()","17":"BorderHandlerTest::::test_apply_correctUsage()","18":"BorderHandlerTest::::test_apply_correctUsage()","19":"BorderHandlerTest::::test_apply_correctUsage()","20":"BorderHandlerTest::::test_apply_correctUsage()","21":"BorderHandlerTest::::test_apply_correctUsage()","22":"BorderHandlerTest::::test_apply_correctUsage()","23":"BorderHandlerTest::::test_apply_correctUsage()","24":"BorderHandlerTest::::test_apply_correctUsage()","25":"BorderHandlerTest::::test_apply_correctUsage()","26":"BorderHandlerTest::::test_apply_correctUsage()","27":"BorderHandlerTest::::test_apply_correctUsage()","28":"BorderHandlerTest::::test_apply_correctUsage()","29":"BorderHandlerTest::::test_apply_correctUsage()","30":"BorderHandlerTest::::test_apply_correctUsage()","31":"BorderHandlerTest::::test_apply_correctUsage()","32":"BorderHandlerTest::::test_apply_correctUsage()","33":"BorderHandlerTest::::test_apply_correctUsage()","34":"BorderHandlerTest::::test_apply_correctUsage()","35":"BorderHandlerTest::::test_apply_correctUsage()","36":"BorderHandlerTest::::test_apply_correctUsage()","37":"BorderHandlerTest::::test_apply_correctUsage()","38":"BorderHandlerTest::::test_apply_correctUsage()","39":"BorderHandlerTest::::test_apply_correctUsage()","40":"BorderHandlerTest::::test_apply_correctUsage()","41":"BorderHandlerTest::::test_apply_correctUsage()","42":"BorderHandlerTest::::test_apply_correctUsage()","43":"BorderHandlerTest::::test_apply_correctUsage()","44":"BorderHandlerTest::::test_apply_correctUsage()","45":"BorderHandlerTest::::test_apply_correctUsage()","46":"BorderHandlerTest::::test_apply_correctUsage()","48":"BorderHandlerTest::::testEx_apply_nullImage()","49":"BorderHandlerTest::::testEx_apply_nullImage()","50":"BorderHandlerTest::::testEx_apply_nullImage()","51":"BorderHandlerTest::::testEx_apply_nullImage()","52":"BorderHandlerTest::::testEx_apply_nullImage()","53":"BorderHandlerTest::::testEx_apply_nullImage()","54":"BorderHandlerTest::::testEx_apply_nullImage()","55":"BorderHandlerTest::::testEx_apply_nullImage()","56":"BorderHandlerTest::::testEx_apply_nullImage()","57":"BorderHandlerTest::::testEx_apply_nullImage()","58":"BorderHandlerTest::::testEx_apply_nullImage()","59":"BorderHandlerTest::::testEx_apply_nullImage()","60":"BorderHandlerTest::::testEx_apply_nullImage()","64":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","65":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","66":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","67":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","68":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","69":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","70":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","71":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","72":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","73":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","74":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","75":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","76":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","77":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","78":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","79":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","80":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","81":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","82":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","83":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","84":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","85":"BorderHandlerTest.BuilderTest::::test_build_correctUsage()","87":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","88":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","89":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","90":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","91":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","92":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","93":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","94":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","95":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","96":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","97":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","98":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","99":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","100":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","101":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","102":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","103":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","104":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","105":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","106":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","107":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","108":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","109":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","110":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","111":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","112":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","113":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","114":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","115":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","116":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","117":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","118":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","119":"BorderHandlerTest.BuilderTest::::testEx_build_withNullParam()","121":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","122":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","123":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","124":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","125":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","126":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","127":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","128":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","129":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","130":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","131":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","132":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","133":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","134":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","135":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","136":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","137":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","138":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","139":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","140":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","141":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","142":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","143":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","144":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","145":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","146":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","147":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","148":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","149":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","150":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","151":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","152":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","153":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","154":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()","155":"BorderHandlerTest.BuilderTest::::testEx_build_withInvalidParam()"},"tests":[{"test_lines":[16,46],"covered_lines":[41,42,43,44,45,48,50,54,56,57,58,60,61,62,63,67,70,71,74,75,79,80,84,85,89,90,95,98,101,104,106],"label":"BorderHandler::::apply(java.awt.image.BufferedImage)"},{"test_lines":[48,60],"covered_lines":[41,42,43,44,45,48,50,67,70,71,74,75,79,80,84,85,89,90,95,98,101,104,106],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/filter/MosaicHandler.java":{"class_content":["package cn.t8s.filter;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.GenericBuilder;\n","import cn.core.utils.BufferedImageUtils;\n","import cn.core.utils.ColorUtils;\n","import cn.core.utils.ObjectUtils;\n","import net.coobird.thumbnailator.filters.ImageFilter;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.text.MessageFormat;\n","\n","/**\n"," * An image filter that can add a mosaic for image.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class MosaicHandler implements ImageFilter {\n","\n","    /**\n","     * The side length of the mosaic block.\n","     */\n","    private final int sideLength;\n","\n","    /**\n","     * The x coordinate of the upper left corner of the mosaic region.\n","     */\n","    private final int startX;\n","\n","    /**\n","     * The y coordinate of the upper left corner of the mosaic region.\n","     */\n","    private final int startY;\n","\n","    /**\n","     * The x coordinate of the down right corner of the mosaic region.\n","     */\n","    private int endX;\n","\n","    /**\n","     * The y coordinate of the down right corner of the mosaic region.\n","     */\n","    private int endY;\n","\n","    public MosaicHandler(Builder bu) {\n","        this.sideLength = bu.sideLength;\n","        this.startX = bu.startX;\n","        this.startY = bu.startY;\n","        this.endX = bu.startX + bu.width;\n","        this.endY = bu.startY + bu.height;\n","    }\n","\n","    @Override\n","    public BufferedImage apply(BufferedImage img) {\n","        ObjectUtils.excNull(img, \"Original image is null.\");\n","        adjustRect(img.getWidth(), img.getHeight());\n","        // copy an image from original image\n","        BufferedImage tar = BufferedImageUtils.copy(img, img.getType());\n","        Graphics g = tar.getGraphics();\n","\n","        int currentX = startX;\n","        while (currentX < endX) {\n","            int nextWidth = Math.min(sideLength, endX - currentX);\n","            int currentY = startY;\n","            while (currentY < endY) {\n","                int nextHeight = Math.min(sideLength, endY - currentY);\n","                // obtain RGB of color of the center\n","                int centerRgb = ColorUtils.obtainRectCenterRGB(img, currentX, currentY, nextWidth, nextHeight);\n","                g.setColor(ColorUtils.ofRGB(centerRgb));\n","                // painting rectangle\n","                g.fillRect(currentX, currentY, nextWidth, nextHeight);\n","                currentY += sideLength;\n","            }\n","            currentX += sideLength;\n","        }\n","\n","        g.dispose();\n","        return tar;\n","    }\n","\n","    private void adjustRect(int originalWidth, int originalHeight) {\n","        if (startX > originalWidth || startY > originalHeight) {\n","            throw new InvalidSettingException(MessageFormat.format(\n","                    \"The starting point:[{0}, {1}] are not in image range:[{2}, {3}].\",\n","                    startX, startY,\n","                    originalWidth, originalHeight));\n","        }\n","\n","        endX = Math.min(originalWidth, endX);\n","        endY = Math.min(originalHeight, endY);\n","    }\n","\n","\n","    public static class Builder implements GenericBuilder<MosaicHandler> {\n","\n","        private int sideLength;\n","        private int startX;\n","        private int startY;\n","        private Integer width;\n","        private Integer height;\n","\n","        public Builder sideLength(int sideLength) {\n","            this.sideLength = sideLength;\n","            return this;\n","        }\n","        public Builder startX(int startX) {\n","            this.startX = startX;\n","            return this;\n","        }\n","        public Builder startY(int startY) {\n","            this.startY = startY;\n","            return this;\n","        }\n","        public Builder width(int width) {\n","            this.width = width;\n","            return this;\n","        }\n","        public Builder height(int height) {\n","            this.height = height;\n","            return this;\n","        }\n","\n","        @Override\n","        public MosaicHandler build() {\n","            if (sideLength <= 0) {\n","                throw new InvalidSettingException(\"Side length must be greater than 0.\");\n","            }\n","            if (startX < 0) {\n","                throw new InvalidSettingException(\"The start point's X must be greater than 0.\");\n","            }\n","            if (startY < 0) {\n","                throw new InvalidSettingException(\"The start point's Y must be greater than 0.\");\n","            }\n","            if (!ObjectUtils.isNull(width) && width <= 0) {\n","                throw new InvalidSettingException(\"The rectangle's width must be greater than 0.\");\n","            }\n","            if (!ObjectUtils.isNull(height) && height <= 0) {\n","                throw new InvalidSettingException(\"The rectangle's height must be greater than 0.\");\n","            }\n","\n","            width = ObjectUtils.isNull(width) ? sideLength : width;\n","            height = ObjectUtils.isNull(height) ? sideLength : height;\n","\n","            return new MosaicHandler(this);\n","        }\n","    }\n","}\n"],"test_content":["package cn.t8s.filter;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.utils.BufferedImageUtils;\n","import cn.core.utils.ColorUtils;\n","import cn.t8s.BufferedImageComparer;\n","import cn.t8s.ReflectionUtils;\n","import cn.t8s.TestUtils;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","public class MosaicHandlerTest {\n","\n","    @Test\n","    public void test_apply_correctUsage() throws IOException {\n","        // given\n","        int side = 10, x = 55, y = 35, w = 60, h = 39;\n","        MosaicHandler handler = new MosaicHandler.Builder()\n","                .sideLength(side)\n","                .startX(x)\n","                .startY(y)\n","                .width(w)\n","                .height(h)\n","                .build();\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","\n","        // when\n","        BufferedImage target = handler.apply(source);\n","\n","        // then\n","        BufferedImage image = BufferedImageUtils.copy(source, source.getType());\n","        Graphics g = image.getGraphics();\n","        int i = x;\n","        while (i < x + w) {\n","            int rw = Math.min(side, x + w - i);\n","            int j = y;\n","            while (j < y + h) {\n","                int rh = Math.min(side, y + h - j);\n","                int centerRgb = ColorUtils.obtainRectCenterRGB(source, i, j, rw, rh);\n","                g.setColor(ColorUtils.ofRGB(centerRgb));\n","                g.fillRect(i, j, rw, rh);\n","                j += side;\n","            }\n","            i += side;\n","        }\n","        g.dispose();\n","\n","        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n","    }\n","\n","    @Test\n","    public void testEx_apply_nullImage() {\n","        MosaicHandler handler = new MosaicHandler.Builder()\n","                .sideLength(10)\n","                .startX(0)\n","                .startY(0)\n","                .width(60)\n","                .height(50)\n","                .build();\n","\n","        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n","                () -> handler.apply(null));\n","        Assert.assertEquals(\"Original image is null.\", ex.getMessage());\n","    }\n","\n","\n","    public static class BuilderTest {\n","\n","        @Test\n","        public void test_build_correctUsage() {\n","            // given\n","            int side = 10, x = 20, y = 30, w = 40, h = 50;\n","\n","            // when\n","            MosaicHandler handler = new MosaicHandler.Builder()\n","                    .sideLength(side)\n","                    .startX(x)\n","                    .startY(y)\n","                    .width(w)\n","                    .height(h)\n","                    .build();\n","\n","            // then\n","            Assert.assertEquals(10, ReflectionUtils.get(\"sideLength\", handler));\n","            Assert.assertEquals(20, ReflectionUtils.get(\"startX\", handler));\n","            Assert.assertEquals(30, ReflectionUtils.get(\"startY\", handler));\n","            Assert.assertEquals(60, ReflectionUtils.get(\"endX\", handler));\n","            Assert.assertEquals(80, ReflectionUtils.get(\"endY\", handler));\n","        }\n","\n","        @Test\n","        public void test_build_defaultValue() {\n","            // given\n","            int side = 10, x = 20, y = 30;\n","\n","            // when\n","            MosaicHandler handler = new MosaicHandler.Builder()\n","                    .sideLength(side)\n","                    .startX(x)\n","                    .startY(y)\n","                    .build();\n","\n","            // then\n","            Assert.assertEquals(10, ReflectionUtils.get(\"sideLength\", handler));\n","            Assert.assertEquals(20, ReflectionUtils.get(\"startX\", handler));\n","            Assert.assertEquals(30, ReflectionUtils.get(\"startY\", handler));\n","            Assert.assertEquals((10 + 20), ReflectionUtils.get(\"endX\", handler));\n","            Assert.assertEquals((10 + 30), ReflectionUtils.get(\"endY\", handler));\n","        }\n","\n","        @Test\n","        public void testEx_build_nullParam() {\n","            // null side length\n","            MosaicHandler.Builder builder1 = new MosaicHandler.Builder()\n","                    .startX(0).startY(0)\n","                    .width(60).height(50);\n","            InvalidSettingException e1 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder1::build);\n","            Assert.assertEquals(\"Side length must be greater than 0.\",\n","                    e1.getMessage());\n","        }\n","\n","        @Test\n","        public void testEx_build_invalidParam() {\n","            // side length < 0\n","            MosaicHandler.Builder builder1 = new MosaicHandler.Builder()\n","                    .sideLength(-1)\n","                    .startX(0).startY(0)\n","                    .width(60).height(50);\n","            InvalidSettingException e1 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder1::build);\n","            Assert.assertEquals(\"Side length must be greater than 0.\",\n","                    e1.getMessage());\n","\n","            // width < 0\n","            MosaicHandler.Builder builder2 = new MosaicHandler.Builder()\n","                    .sideLength(10)\n","                    .startX(0).startY(0)\n","                    .height(50).width(-5);\n","            InvalidSettingException e2 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder2::build);\n","            Assert.assertEquals(\"The rectangle's width must be greater than 0.\",\n","                    e2.getMessage());\n","\n","            // height < 0\n","            MosaicHandler.Builder builder3 = new MosaicHandler.Builder()\n","                    .sideLength(10)\n","                    .startX(0).startY(0)\n","                    .width(40).height(-5);\n","            InvalidSettingException e3 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder3::build);\n","            Assert.assertEquals(\"The rectangle's height must be greater than 0.\",\n","                    e3.getMessage());\n","\n","            // start_x < 0\n","            MosaicHandler.Builder builder4 = new MosaicHandler.Builder()\n","                    .sideLength(10)\n","                    .startX(-20).startY(0)\n","                    .width(40).height(50);\n","            InvalidSettingException e4 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder4::build);\n","            Assert.assertEquals(\"The start point's X must be greater than 0.\",\n","                    e4.getMessage());\n","\n","            // start_y < 0\n","            MosaicHandler.Builder builder5 = new MosaicHandler.Builder()\n","                    .sideLength(10)\n","                    .startX(20).startY(-30)\n","                    .width(40).height(50);\n","            InvalidSettingException e5 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder5::build);\n","            Assert.assertEquals(\"The start point's Y must be greater than 0.\",\n","                    e5.getMessage());\n","        }\n","    }\n","\n","}"],"method_lines_dic":{"MosaicHandler::::apply(java.awt.image.BufferedImage)":[54,80],"MosaicHandler::::adjustRect(int,int)":[82,92],"MosaicHandler.Builder::::sideLength(int)":[103,106],"MosaicHandler.Builder::::startX(int)":[107,110],"MosaicHandler.Builder::::startY(int)":[111,114],"MosaicHandler.Builder::::width(int)":[115,118],"MosaicHandler.Builder::::height(int)":[119,122],"MosaicHandler.Builder::::build()":[124,146]},"test_method_lines_dic":{"MosaicHandlerTest::::test_apply_correctUsage()":[17,52],"MosaicHandlerTest::::testEx_apply_nullImage()":[54,67],"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()":[72,92],"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()":[94,112],"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()":[114,124],"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()":[126,177]},"reverse_method_lines_dic":{"54":"MosaicHandler::::apply(java.awt.image.BufferedImage)","55":"MosaicHandler::::apply(java.awt.image.BufferedImage)","56":"MosaicHandler::::apply(java.awt.image.BufferedImage)","57":"MosaicHandler::::apply(java.awt.image.BufferedImage)","58":"MosaicHandler::::apply(java.awt.image.BufferedImage)","59":"MosaicHandler::::apply(java.awt.image.BufferedImage)","60":"MosaicHandler::::apply(java.awt.image.BufferedImage)","61":"MosaicHandler::::apply(java.awt.image.BufferedImage)","62":"MosaicHandler::::apply(java.awt.image.BufferedImage)","63":"MosaicHandler::::apply(java.awt.image.BufferedImage)","64":"MosaicHandler::::apply(java.awt.image.BufferedImage)","65":"MosaicHandler::::apply(java.awt.image.BufferedImage)","66":"MosaicHandler::::apply(java.awt.image.BufferedImage)","67":"MosaicHandler::::apply(java.awt.image.BufferedImage)","68":"MosaicHandler::::apply(java.awt.image.BufferedImage)","69":"MosaicHandler::::apply(java.awt.image.BufferedImage)","70":"MosaicHandler::::apply(java.awt.image.BufferedImage)","71":"MosaicHandler::::apply(java.awt.image.BufferedImage)","72":"MosaicHandler::::apply(java.awt.image.BufferedImage)","73":"MosaicHandler::::apply(java.awt.image.BufferedImage)","74":"MosaicHandler::::apply(java.awt.image.BufferedImage)","75":"MosaicHandler::::apply(java.awt.image.BufferedImage)","76":"MosaicHandler::::apply(java.awt.image.BufferedImage)","77":"MosaicHandler::::apply(java.awt.image.BufferedImage)","78":"MosaicHandler::::apply(java.awt.image.BufferedImage)","79":"MosaicHandler::::apply(java.awt.image.BufferedImage)","80":"MosaicHandler::::apply(java.awt.image.BufferedImage)","82":"MosaicHandler::::adjustRect(int,int)","83":"MosaicHandler::::adjustRect(int,int)","84":"MosaicHandler::::adjustRect(int,int)","85":"MosaicHandler::::adjustRect(int,int)","86":"MosaicHandler::::adjustRect(int,int)","87":"MosaicHandler::::adjustRect(int,int)","88":"MosaicHandler::::adjustRect(int,int)","89":"MosaicHandler::::adjustRect(int,int)","90":"MosaicHandler::::adjustRect(int,int)","91":"MosaicHandler::::adjustRect(int,int)","92":"MosaicHandler::::adjustRect(int,int)","103":"MosaicHandler.Builder::::sideLength(int)","104":"MosaicHandler.Builder::::sideLength(int)","105":"MosaicHandler.Builder::::sideLength(int)","106":"MosaicHandler.Builder::::sideLength(int)","107":"MosaicHandler.Builder::::startX(int)","108":"MosaicHandler.Builder::::startX(int)","109":"MosaicHandler.Builder::::startX(int)","110":"MosaicHandler.Builder::::startX(int)","111":"MosaicHandler.Builder::::startY(int)","112":"MosaicHandler.Builder::::startY(int)","113":"MosaicHandler.Builder::::startY(int)","114":"MosaicHandler.Builder::::startY(int)","115":"MosaicHandler.Builder::::width(int)","116":"MosaicHandler.Builder::::width(int)","117":"MosaicHandler.Builder::::width(int)","118":"MosaicHandler.Builder::::width(int)","119":"MosaicHandler.Builder::::height(int)","120":"MosaicHandler.Builder::::height(int)","121":"MosaicHandler.Builder::::height(int)","122":"MosaicHandler.Builder::::height(int)","124":"MosaicHandler.Builder::::build()","125":"MosaicHandler.Builder::::build()","126":"MosaicHandler.Builder::::build()","127":"MosaicHandler.Builder::::build()","128":"MosaicHandler.Builder::::build()","129":"MosaicHandler.Builder::::build()","130":"MosaicHandler.Builder::::build()","131":"MosaicHandler.Builder::::build()","132":"MosaicHandler.Builder::::build()","133":"MosaicHandler.Builder::::build()","134":"MosaicHandler.Builder::::build()","135":"MosaicHandler.Builder::::build()","136":"MosaicHandler.Builder::::build()","137":"MosaicHandler.Builder::::build()","138":"MosaicHandler.Builder::::build()","139":"MosaicHandler.Builder::::build()","140":"MosaicHandler.Builder::::build()","141":"MosaicHandler.Builder::::build()","142":"MosaicHandler.Builder::::build()","143":"MosaicHandler.Builder::::build()","144":"MosaicHandler.Builder::::build()","145":"MosaicHandler.Builder::::build()","146":"MosaicHandler.Builder::::build()"},"test_reverse_method_lines_dic":{"17":"MosaicHandlerTest::::test_apply_correctUsage()","18":"MosaicHandlerTest::::test_apply_correctUsage()","19":"MosaicHandlerTest::::test_apply_correctUsage()","20":"MosaicHandlerTest::::test_apply_correctUsage()","21":"MosaicHandlerTest::::test_apply_correctUsage()","22":"MosaicHandlerTest::::test_apply_correctUsage()","23":"MosaicHandlerTest::::test_apply_correctUsage()","24":"MosaicHandlerTest::::test_apply_correctUsage()","25":"MosaicHandlerTest::::test_apply_correctUsage()","26":"MosaicHandlerTest::::test_apply_correctUsage()","27":"MosaicHandlerTest::::test_apply_correctUsage()","28":"MosaicHandlerTest::::test_apply_correctUsage()","29":"MosaicHandlerTest::::test_apply_correctUsage()","30":"MosaicHandlerTest::::test_apply_correctUsage()","31":"MosaicHandlerTest::::test_apply_correctUsage()","32":"MosaicHandlerTest::::test_apply_correctUsage()","33":"MosaicHandlerTest::::test_apply_correctUsage()","34":"MosaicHandlerTest::::test_apply_correctUsage()","35":"MosaicHandlerTest::::test_apply_correctUsage()","36":"MosaicHandlerTest::::test_apply_correctUsage()","37":"MosaicHandlerTest::::test_apply_correctUsage()","38":"MosaicHandlerTest::::test_apply_correctUsage()","39":"MosaicHandlerTest::::test_apply_correctUsage()","40":"MosaicHandlerTest::::test_apply_correctUsage()","41":"MosaicHandlerTest::::test_apply_correctUsage()","42":"MosaicHandlerTest::::test_apply_correctUsage()","43":"MosaicHandlerTest::::test_apply_correctUsage()","44":"MosaicHandlerTest::::test_apply_correctUsage()","45":"MosaicHandlerTest::::test_apply_correctUsage()","46":"MosaicHandlerTest::::test_apply_correctUsage()","47":"MosaicHandlerTest::::test_apply_correctUsage()","48":"MosaicHandlerTest::::test_apply_correctUsage()","49":"MosaicHandlerTest::::test_apply_correctUsage()","50":"MosaicHandlerTest::::test_apply_correctUsage()","51":"MosaicHandlerTest::::test_apply_correctUsage()","52":"MosaicHandlerTest::::test_apply_correctUsage()","54":"MosaicHandlerTest::::testEx_apply_nullImage()","55":"MosaicHandlerTest::::testEx_apply_nullImage()","56":"MosaicHandlerTest::::testEx_apply_nullImage()","57":"MosaicHandlerTest::::testEx_apply_nullImage()","58":"MosaicHandlerTest::::testEx_apply_nullImage()","59":"MosaicHandlerTest::::testEx_apply_nullImage()","60":"MosaicHandlerTest::::testEx_apply_nullImage()","61":"MosaicHandlerTest::::testEx_apply_nullImage()","62":"MosaicHandlerTest::::testEx_apply_nullImage()","63":"MosaicHandlerTest::::testEx_apply_nullImage()","64":"MosaicHandlerTest::::testEx_apply_nullImage()","65":"MosaicHandlerTest::::testEx_apply_nullImage()","66":"MosaicHandlerTest::::testEx_apply_nullImage()","67":"MosaicHandlerTest::::testEx_apply_nullImage()","72":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","73":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","74":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","75":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","76":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","77":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","78":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","79":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","80":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","81":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","82":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","83":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","84":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","85":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","86":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","87":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","88":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","89":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","90":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","91":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","92":"MosaicHandlerTest.BuilderTest::::test_build_correctUsage()","94":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","95":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","96":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","97":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","98":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","99":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","100":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","101":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","102":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","103":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","104":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","105":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","106":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","107":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","108":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","109":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","110":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","111":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","112":"MosaicHandlerTest.BuilderTest::::test_build_defaultValue()","114":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","115":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","116":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","117":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","118":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","119":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","120":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","121":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","122":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","123":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","124":"MosaicHandlerTest.BuilderTest::::testEx_build_nullParam()","126":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","127":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","128":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","129":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","130":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","131":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","132":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","133":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","134":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","135":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","136":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","137":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","138":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","139":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","140":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","141":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","142":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","143":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","144":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","145":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","146":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","147":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","148":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","149":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","150":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","151":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","152":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","153":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","154":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","155":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","156":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","157":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","158":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","159":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","160":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","161":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","162":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","163":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","164":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","165":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","166":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","167":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","168":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","169":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","170":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","171":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","172":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","173":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","174":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","175":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","176":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()","177":"MosaicHandlerTest.BuilderTest::::testEx_build_invalidParam()"},"tests":[{"test_lines":[17,52],"covered_lines":[46,47,48,49,50,51,52,56,57,59,60,62,63,64,65,66,67,69,70,72,73,74,75,76,78,79,83,90,91,92,95,104,105,108,109,112,113,116,117,120,121,126,129,132,135,138,142,143,145],"label":"MosaicHandler::::apply(java.awt.image.BufferedImage)"},{"test_lines":[54,67],"covered_lines":[46,47,48,49,50,51,52,95,104,105,108,109,112,113,116,117,120,121,126,129,132,135,138,142,143,145],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/shape/opened/Line.java":{"class_content":["package cn.t8s.shape.opened;\n","\n","import cn.core.ex.HandlingException;\n","import cn.core.strategy.shape.AbstractOpenedShape;\n","import cn.core.utils.ObjectUtils;\n","import java.awt.*;\n","\n","/**\n"," * An opened shape of line.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class Line extends AbstractOpenedShape {\n","\n","    /**\n","     * 起点\n","     */\n","    private final Point start;\n","\n","    /**\n","     * 终点\n","     */\n","    private final Point end;\n","\n","    public Line(Builder csb) {\n","        super(csb);\n","        this.start = csb.start;\n","        this.end = csb.end;\n","    }\n","\n","    @Override\n","    public void draw(int canvasWidth, int canvasHeight, Graphics2D g2d) {\n","        if (start.x > canvasWidth || start.y > canvasHeight) {\n","            throw new HandlingException(\"The starting point is out of bounds of this image.\");\n","        }\n","        if (end.x > canvasWidth || end.y > canvasHeight) {\n","            throw new HandlingException(\"The ending point is out of bounds of this image.\");\n","        }\n","        g2d.drawLine(start.x, start.y, end.x, end.y);\n","    }\n","\n","    public static class Builder extends AbstractOpenedShapeBuilder {\n","        private Point start;\n","        private Point end;\n","\n","        @Override\n","        public Builder stroke(Stroke stroke) {\n","            return (Builder) super.stroke(stroke);\n","        }\n","\n","        @Override\n","        public Builder color(Color color) {\n","            return (Builder) super.color(color);\n","        }\n","\n","        public Builder start(Point start) {\n","            this.start = start;\n","            return this;\n","        }\n","\n","        public Builder end(Point end) {\n","            this.end = end;\n","            return this;\n","        }\n","\n","        @Override\n","        public Line build() {\n","            ObjectUtils.excNull(start, \"The starting point is null.\");\n","            ObjectUtils.excNull(end, \"The ending point is null.\");\n","            return new Line(this);\n","        }\n","    }\n","}\n"],"test_content":["package cn.t8s.shape.opened;\n","\n","import cn.core.ex.HandlingException;\n","import cn.core.utils.BufferedImageUtils;\n","import cn.t8s.BufferedImageComparer;\n","import cn.t8s.ReflectionUtils;\n","import cn.t8s.TestUtils;\n","import cn.t8s.shape.closed.Oval;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","public class LineTest {\n","\n","    @Test\n","    public void test_draw_correctUsage() throws IOException {\n","        // given\n","        Color color = Color.BLACK;\n","        Stroke stroke = new BasicStroke();\n","        Line line = new Line.Builder()\n","                .color(color)\n","                .stroke(stroke)\n","                .start(new Point(10, 10))\n","                .end(new Point(60, 70))\n","                .build();\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        int canvasWidth = source.getWidth();\n","        int canvasHeight = source.getHeight();\n","\n","        // when\n","        BufferedImage target = BufferedImageUtils.copy(source, source.getType());\n","        Graphics2D g = target.createGraphics();\n","        g.setColor(color);\n","        g.setStroke(stroke);\n","        line.draw(canvasWidth, canvasHeight, g);\n","        g.dispose();\n","\n","        // then\n","        BufferedImage image = BufferedImageUtils.copy(source, source.getType());\n","        Graphics2D gh = image.createGraphics();\n","        gh.setColor(color);\n","        gh.setStroke(stroke);\n","        gh.drawLine(10, 10, 60, 70);\n","        gh.dispose();\n","\n","        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n","    }\n","\n","    @Test\n","    public void testEx_draw_startPointOutOfBound() throws IOException {\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        int canvasWidth = source.getWidth();\n","        int canvasHeight = source.getHeight();\n","        // starting point out of bound\n","        Line line = new Line.Builder()\n","                .end(new Point(60, 70))\n","                .start(new Point(200, 300))\n","                .build();\n","\n","        Graphics2D g = source.createGraphics();\n","\n","        HandlingException ex = Assert.assertThrows(HandlingException.class,\n","                () -> line.draw(canvasWidth, canvasHeight, g));\n","        Assert.assertEquals(\"The starting point is out of bounds of this image.\",\n","                ex.getMessage());\n","\n","        g.dispose();\n","    }\n","\n","    @Test\n","    public void testEx_draw_endPointOutOfBound() throws IOException {\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        int canvasWidth = source.getWidth();\n","        int canvasHeight = source.getHeight();\n","        // starting point out of bound\n","        Line line = new Line.Builder()\n","                .end(new Point(200, 300))\n","                .start(new Point(60, 70))\n","                .build();\n","\n","        Graphics2D g = source.createGraphics();\n","\n","        HandlingException ex = Assert.assertThrows(HandlingException.class,\n","                () -> line.draw(canvasWidth, canvasHeight, g));\n","        Assert.assertEquals(\"The ending point is out of bounds of this image.\",\n","                ex.getMessage());\n","\n","        g.dispose();\n","    }\n","\n","    public static class BuilderTest {\n","\n","        @Test\n","        public void test_build_correctUsage() {\n","            // given\n","            Color color = Color.BLACK;\n","            Stroke stroke = new BasicStroke();\n","            Point start = new Point(10, 10);\n","            Point end = new Point(60, 70);\n","\n","            // when\n","            Line line = new Line.Builder()\n","                    .color(color)\n","                    .stroke(stroke)\n","                    .start(start).end(end)\n","                    .build();\n","\n","            // then\n","            Assert.assertEquals(start, ReflectionUtils.get(\"start\", line));\n","            Assert.assertEquals(end, ReflectionUtils.get(\"end\", line));\n","            Assert.assertEquals(color, ReflectionUtils.getFromSuper(\"color\", line));\n","            Assert.assertEquals(stroke, ReflectionUtils.getFromSuper(\"stroke\", line));\n","        }\n","\n","        @Test\n","        public void testEx_build_nullParam() {\n","            // null starting point\n","            Line.Builder builder1 = new Line.Builder()\n","                    .end(new Point(60, 70));\n","            NullPointerException ex1 = Assert.assertThrows(NullPointerException.class,\n","                    builder1::build);\n","            Assert.assertEquals(\"The starting point is null.\", ex1.getMessage());\n","\n","            // null ending point\n","            Line.Builder builder2 = new Line.Builder()\n","                    .start(new Point(60, 70));\n","            NullPointerException ex2 = Assert.assertThrows(NullPointerException.class,\n","                    builder2::build);\n","            Assert.assertEquals(\"The ending point is null.\", ex2.getMessage());\n","        }\n","    }\n","\n","}\n"],"method_lines_dic":{"Line::::draw(int,int,java.awt.Graphics2D)":[32,41],"Line.Builder::::stroke(java.awt.Stroke)":[47,50],"Line.Builder::::color(java.awt.Color)":[52,55],"Line.Builder::::start(java.awt.Point)":[57,60],"Line.Builder::::end(java.awt.Point)":[62,65],"Line.Builder::::build()":[67,72]},"test_method_lines_dic":{"LineTest::::test_draw_correctUsage()":[17,49],"LineTest::::testEx_draw_startPointOutOfBound()":[51,70],"LineTest::::testEx_draw_endPointOutOfBound()":[72,91],"LineTest.BuilderTest::::test_build_correctUsage()":[95,115],"LineTest.BuilderTest::::testEx_build_nullParam()":[117,132]},"reverse_method_lines_dic":{"32":"Line::::draw(int,int,java.awt.Graphics2D)","33":"Line::::draw(int,int,java.awt.Graphics2D)","34":"Line::::draw(int,int,java.awt.Graphics2D)","35":"Line::::draw(int,int,java.awt.Graphics2D)","36":"Line::::draw(int,int,java.awt.Graphics2D)","37":"Line::::draw(int,int,java.awt.Graphics2D)","38":"Line::::draw(int,int,java.awt.Graphics2D)","39":"Line::::draw(int,int,java.awt.Graphics2D)","40":"Line::::draw(int,int,java.awt.Graphics2D)","41":"Line::::draw(int,int,java.awt.Graphics2D)","47":"Line.Builder::::stroke(java.awt.Stroke)","48":"Line.Builder::::stroke(java.awt.Stroke)","49":"Line.Builder::::stroke(java.awt.Stroke)","50":"Line.Builder::::stroke(java.awt.Stroke)","52":"Line.Builder::::color(java.awt.Color)","53":"Line.Builder::::color(java.awt.Color)","54":"Line.Builder::::color(java.awt.Color)","55":"Line.Builder::::color(java.awt.Color)","57":"Line.Builder::::start(java.awt.Point)","58":"Line.Builder::::start(java.awt.Point)","59":"Line.Builder::::start(java.awt.Point)","60":"Line.Builder::::start(java.awt.Point)","62":"Line.Builder::::end(java.awt.Point)","63":"Line.Builder::::end(java.awt.Point)","64":"Line.Builder::::end(java.awt.Point)","65":"Line.Builder::::end(java.awt.Point)","67":"Line.Builder::::build()","68":"Line.Builder::::build()","69":"Line.Builder::::build()","70":"Line.Builder::::build()","71":"Line.Builder::::build()","72":"Line.Builder::::build()"},"test_reverse_method_lines_dic":{"17":"LineTest::::test_draw_correctUsage()","18":"LineTest::::test_draw_correctUsage()","19":"LineTest::::test_draw_correctUsage()","20":"LineTest::::test_draw_correctUsage()","21":"LineTest::::test_draw_correctUsage()","22":"LineTest::::test_draw_correctUsage()","23":"LineTest::::test_draw_correctUsage()","24":"LineTest::::test_draw_correctUsage()","25":"LineTest::::test_draw_correctUsage()","26":"LineTest::::test_draw_correctUsage()","27":"LineTest::::test_draw_correctUsage()","28":"LineTest::::test_draw_correctUsage()","29":"LineTest::::test_draw_correctUsage()","30":"LineTest::::test_draw_correctUsage()","31":"LineTest::::test_draw_correctUsage()","32":"LineTest::::test_draw_correctUsage()","33":"LineTest::::test_draw_correctUsage()","34":"LineTest::::test_draw_correctUsage()","35":"LineTest::::test_draw_correctUsage()","36":"LineTest::::test_draw_correctUsage()","37":"LineTest::::test_draw_correctUsage()","38":"LineTest::::test_draw_correctUsage()","39":"LineTest::::test_draw_correctUsage()","40":"LineTest::::test_draw_correctUsage()","41":"LineTest::::test_draw_correctUsage()","42":"LineTest::::test_draw_correctUsage()","43":"LineTest::::test_draw_correctUsage()","44":"LineTest::::test_draw_correctUsage()","45":"LineTest::::test_draw_correctUsage()","46":"LineTest::::test_draw_correctUsage()","47":"LineTest::::test_draw_correctUsage()","48":"LineTest::::test_draw_correctUsage()","49":"LineTest::::test_draw_correctUsage()","51":"LineTest::::testEx_draw_startPointOutOfBound()","52":"LineTest::::testEx_draw_startPointOutOfBound()","53":"LineTest::::testEx_draw_startPointOutOfBound()","54":"LineTest::::testEx_draw_startPointOutOfBound()","55":"LineTest::::testEx_draw_startPointOutOfBound()","56":"LineTest::::testEx_draw_startPointOutOfBound()","57":"LineTest::::testEx_draw_startPointOutOfBound()","58":"LineTest::::testEx_draw_startPointOutOfBound()","59":"LineTest::::testEx_draw_startPointOutOfBound()","60":"LineTest::::testEx_draw_startPointOutOfBound()","61":"LineTest::::testEx_draw_startPointOutOfBound()","62":"LineTest::::testEx_draw_startPointOutOfBound()","63":"LineTest::::testEx_draw_startPointOutOfBound()","64":"LineTest::::testEx_draw_startPointOutOfBound()","65":"LineTest::::testEx_draw_startPointOutOfBound()","66":"LineTest::::testEx_draw_startPointOutOfBound()","67":"LineTest::::testEx_draw_startPointOutOfBound()","68":"LineTest::::testEx_draw_startPointOutOfBound()","69":"LineTest::::testEx_draw_startPointOutOfBound()","70":"LineTest::::testEx_draw_startPointOutOfBound()","72":"LineTest::::testEx_draw_endPointOutOfBound()","73":"LineTest::::testEx_draw_endPointOutOfBound()","74":"LineTest::::testEx_draw_endPointOutOfBound()","75":"LineTest::::testEx_draw_endPointOutOfBound()","76":"LineTest::::testEx_draw_endPointOutOfBound()","77":"LineTest::::testEx_draw_endPointOutOfBound()","78":"LineTest::::testEx_draw_endPointOutOfBound()","79":"LineTest::::testEx_draw_endPointOutOfBound()","80":"LineTest::::testEx_draw_endPointOutOfBound()","81":"LineTest::::testEx_draw_endPointOutOfBound()","82":"LineTest::::testEx_draw_endPointOutOfBound()","83":"LineTest::::testEx_draw_endPointOutOfBound()","84":"LineTest::::testEx_draw_endPointOutOfBound()","85":"LineTest::::testEx_draw_endPointOutOfBound()","86":"LineTest::::testEx_draw_endPointOutOfBound()","87":"LineTest::::testEx_draw_endPointOutOfBound()","88":"LineTest::::testEx_draw_endPointOutOfBound()","89":"LineTest::::testEx_draw_endPointOutOfBound()","90":"LineTest::::testEx_draw_endPointOutOfBound()","91":"LineTest::::testEx_draw_endPointOutOfBound()","95":"LineTest.BuilderTest::::test_build_correctUsage()","96":"LineTest.BuilderTest::::test_build_correctUsage()","97":"LineTest.BuilderTest::::test_build_correctUsage()","98":"LineTest.BuilderTest::::test_build_correctUsage()","99":"LineTest.BuilderTest::::test_build_correctUsage()","100":"LineTest.BuilderTest::::test_build_correctUsage()","101":"LineTest.BuilderTest::::test_build_correctUsage()","102":"LineTest.BuilderTest::::test_build_correctUsage()","103":"LineTest.BuilderTest::::test_build_correctUsage()","104":"LineTest.BuilderTest::::test_build_correctUsage()","105":"LineTest.BuilderTest::::test_build_correctUsage()","106":"LineTest.BuilderTest::::test_build_correctUsage()","107":"LineTest.BuilderTest::::test_build_correctUsage()","108":"LineTest.BuilderTest::::test_build_correctUsage()","109":"LineTest.BuilderTest::::test_build_correctUsage()","110":"LineTest.BuilderTest::::test_build_correctUsage()","111":"LineTest.BuilderTest::::test_build_correctUsage()","112":"LineTest.BuilderTest::::test_build_correctUsage()","113":"LineTest.BuilderTest::::test_build_correctUsage()","114":"LineTest.BuilderTest::::test_build_correctUsage()","115":"LineTest.BuilderTest::::test_build_correctUsage()","117":"LineTest.BuilderTest::::testEx_build_nullParam()","118":"LineTest.BuilderTest::::testEx_build_nullParam()","119":"LineTest.BuilderTest::::testEx_build_nullParam()","120":"LineTest.BuilderTest::::testEx_build_nullParam()","121":"LineTest.BuilderTest::::testEx_build_nullParam()","122":"LineTest.BuilderTest::::testEx_build_nullParam()","123":"LineTest.BuilderTest::::testEx_build_nullParam()","124":"LineTest.BuilderTest::::testEx_build_nullParam()","125":"LineTest.BuilderTest::::testEx_build_nullParam()","126":"LineTest.BuilderTest::::testEx_build_nullParam()","127":"LineTest.BuilderTest::::testEx_build_nullParam()","128":"LineTest.BuilderTest::::testEx_build_nullParam()","129":"LineTest.BuilderTest::::testEx_build_nullParam()","130":"LineTest.BuilderTest::::testEx_build_nullParam()","131":"LineTest.BuilderTest::::testEx_build_nullParam()","132":"LineTest.BuilderTest::::testEx_build_nullParam()"},"tests":[{"test_lines":[17,49],"covered_lines":[27,28,29,30,34,37,40,41,43,49,54,58,59,63,64,69,70,71],"label":"Line::::draw(int,int,java.awt.Graphics2D)"},{"test_lines":[51,70],"covered_lines":[27,28,29,30,34,35,43,58,59,63,64,69,70,71],"label":"Line::::draw(int,int,java.awt.Graphics2D)"},{"test_lines":[72,91],"covered_lines":[27,28,29,30,34,37,38,43,58,59,63,64,69,70,71],"label":"Line::::draw(int,int,java.awt.Graphics2D)"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/shape/closed/Rect.java":{"class_content":["package cn.t8s.shape.closed;\n","\n","import cn.core.strategy.shape.AbstractClosedShape;\n","import cn.core.utils.ObjectUtils;\n","\n","import java.awt.*;\n","\n","/**\n"," * A closed shape of rectangle.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class Rect extends AbstractClosedShape {\n","\n","    public Rect(Builder bu) {\n","        super(bu);\n","    }\n","\n","    @Override\n","    public void drawBorder(int canvasWidth, int canvasHeight, Graphics2D g2d) {\n","        g2d.drawRect(rect.x, rect.y, rect.width, rect.height);\n","    }\n","\n","    @Override\n","    public void fillInside(int canvasWidth, int canvasHeight, Graphics2D g2d) {\n","        g2d.fillRect(rect.x, rect.y, rect.width, rect.height);\n","    }\n","\n","\n","    public static class Builder extends AbstractClosedShapeBuilder {\n","\n","        @Override\n","        public Builder rect(Rectangle rect) {\n","            return (Builder) super.rect(rect);\n","        }\n","\n","        @Override\n","        public Builder stroke(Stroke stroke) {\n","            return (Builder) super.stroke(stroke);\n","        }\n","\n","        @Override\n","        public Builder fill(boolean fill) {\n","            return (Builder) super.fill(fill);\n","        }\n","\n","        @Override\n","        public Builder color(Color color) {\n","            return (Builder) super.color(color);\n","        }\n","\n","        @Override\n","        public Rect build() {\n","            ObjectUtils.excNull(rect, \"Rectangle not specified.\");\n","            return new Rect(this);\n","        }\n","    }\n","}\n"],"test_content":["package cn.t8s.shape.closed;\n","\n","import cn.core.utils.BufferedImageUtils;\n","import cn.t8s.BufferedImageComparer;\n","import cn.t8s.ReflectionUtils;\n","import cn.t8s.TestUtils;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","public class RectTest {\n","\n","    @Test\n","    public void test_drawBorder_correctUsage() throws IOException {\n","        // given\n","        Color color = Color.BLACK;\n","        Stroke stroke = new BasicStroke();\n","        Rect rect = new Rect.Builder()\n","                .rect(new Rectangle(10, 20, 80, 30))\n","                .color(color)\n","                .stroke(stroke)\n","                .build();\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        int canvasWidth = source.getWidth();\n","        int canvasHeight = source.getHeight();\n","\n","        // when\n","        BufferedImage target = BufferedImageUtils.copy(source, source.getType());\n","        Graphics2D g = target.createGraphics();\n","        g.setColor(color);\n","        g.setStroke(stroke);\n","        rect.drawBorder(canvasWidth, canvasHeight, g);\n","        g.dispose();\n","\n","        // then\n","        BufferedImage image = BufferedImageUtils.copy(source, source.getType());\n","        Graphics2D gh = image.createGraphics();\n","        gh.setColor(color);\n","        gh.setStroke(stroke);\n","        gh.drawRect(10, 20, 80, 30);\n","        gh.dispose();\n","\n","        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n","    }\n","\n","    @Test\n","    public void test_fillInside_correctUsage() throws IOException {\n","        // given\n","        Color color = Color.GRAY;\n","        Stroke stroke = new BasicStroke();\n","        Rect rect = new Rect.Builder()\n","                .rect(new Rectangle(10, 20, 80, 30))\n","                .color(color)\n","                .stroke(stroke)\n","                .build();\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        int canvasWidth = source.getWidth();\n","        int canvasHeight = source.getHeight();\n","\n","        // when\n","        BufferedImage target = BufferedImageUtils.copy(source, source.getType());\n","        Graphics2D g = target.createGraphics();\n","        g.setColor(color);\n","        g.setStroke(stroke);\n","        rect.fillInside(canvasWidth, canvasHeight, g);\n","        g.dispose();\n","\n","        // then\n","        BufferedImage image = BufferedImageUtils.copy(source, source.getType());\n","        Graphics2D gh = image.createGraphics();\n","        gh.setColor(color);\n","        gh.setStroke(stroke);\n","        gh.fillRect(10, 20, 80, 30);\n","        gh.dispose();\n","\n","        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n","    }\n","\n","\n","    public static class BuilderTest {\n","\n","        @Test\n","        public void test_build_correctUsage() {\n","            // given\n","            Color color = Color.BLACK;\n","            Stroke stroke = new BasicStroke();\n","            Rectangle rectangle = new Rectangle(10, 20, 80, 30);\n","            Rect.Builder builder = new Rect.Builder()\n","                    .rect(rectangle)\n","                    .color(color)\n","                    .stroke(stroke)\n","                    .fill(false);\n","\n","            // when\n","            Rect r = builder.build();\n","\n","            // then\n","            Assert.assertEquals(color, ReflectionUtils.getFromSuper(\"color\", r));\n","            Assert.assertEquals(stroke, ReflectionUtils.getFromSuper(\"stroke\", r));\n","            Assert.assertEquals(rectangle, ReflectionUtils.getFromSuper(\"rect\", r));\n","            Assert.assertFalse((Boolean) ReflectionUtils.getFromSuper(\"fill\", r));\n","        }\n","\n","        @Test\n","        public void testEx_build_nullParam() {\n","            Rect.Builder builder = new Rect.Builder()\n","                    .color(Color.GRAY)\n","                    .stroke(new BasicStroke());\n","            NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n","                    builder::build);\n","            Assert.assertEquals(\"Rectangle not specified.\", ex.getMessage());\n","        }\n","    }\n","}\n"],"method_lines_dic":{"Rect::::drawBorder(int,int,java.awt.Graphics2D)":[20,23],"Rect::::fillInside(int,int,java.awt.Graphics2D)":[25,28],"Rect.Builder::::rect(java.awt.Rectangle)":[33,36],"Rect.Builder::::stroke(java.awt.Stroke)":[38,41],"Rect.Builder::::fill(boolean)":[43,46],"Rect.Builder::::color(java.awt.Color)":[48,51],"Rect.Builder::::build()":[53,57]},"test_method_lines_dic":{"RectTest::::test_drawBorder_correctUsage()":[15,46],"RectTest::::test_fillInside_correctUsage()":[48,79],"RectTest.BuilderTest::::test_build_correctUsage()":[84,104],"RectTest.BuilderTest::::testEx_build_nullParam()":[106,114]},"reverse_method_lines_dic":{"20":"Rect::::drawBorder(int,int,java.awt.Graphics2D)","21":"Rect::::drawBorder(int,int,java.awt.Graphics2D)","22":"Rect::::drawBorder(int,int,java.awt.Graphics2D)","23":"Rect::::drawBorder(int,int,java.awt.Graphics2D)","25":"Rect::::fillInside(int,int,java.awt.Graphics2D)","26":"Rect::::fillInside(int,int,java.awt.Graphics2D)","27":"Rect::::fillInside(int,int,java.awt.Graphics2D)","28":"Rect::::fillInside(int,int,java.awt.Graphics2D)","33":"Rect.Builder::::rect(java.awt.Rectangle)","34":"Rect.Builder::::rect(java.awt.Rectangle)","35":"Rect.Builder::::rect(java.awt.Rectangle)","36":"Rect.Builder::::rect(java.awt.Rectangle)","38":"Rect.Builder::::stroke(java.awt.Stroke)","39":"Rect.Builder::::stroke(java.awt.Stroke)","40":"Rect.Builder::::stroke(java.awt.Stroke)","41":"Rect.Builder::::stroke(java.awt.Stroke)","43":"Rect.Builder::::fill(boolean)","44":"Rect.Builder::::fill(boolean)","45":"Rect.Builder::::fill(boolean)","46":"Rect.Builder::::fill(boolean)","48":"Rect.Builder::::color(java.awt.Color)","49":"Rect.Builder::::color(java.awt.Color)","50":"Rect.Builder::::color(java.awt.Color)","51":"Rect.Builder::::color(java.awt.Color)","53":"Rect.Builder::::build()","54":"Rect.Builder::::build()","55":"Rect.Builder::::build()","56":"Rect.Builder::::build()","57":"Rect.Builder::::build()"},"test_reverse_method_lines_dic":{"15":"RectTest::::test_drawBorder_correctUsage()","16":"RectTest::::test_drawBorder_correctUsage()","17":"RectTest::::test_drawBorder_correctUsage()","18":"RectTest::::test_drawBorder_correctUsage()","19":"RectTest::::test_drawBorder_correctUsage()","20":"RectTest::::test_drawBorder_correctUsage()","21":"RectTest::::test_drawBorder_correctUsage()","22":"RectTest::::test_drawBorder_correctUsage()","23":"RectTest::::test_drawBorder_correctUsage()","24":"RectTest::::test_drawBorder_correctUsage()","25":"RectTest::::test_drawBorder_correctUsage()","26":"RectTest::::test_drawBorder_correctUsage()","27":"RectTest::::test_drawBorder_correctUsage()","28":"RectTest::::test_drawBorder_correctUsage()","29":"RectTest::::test_drawBorder_correctUsage()","30":"RectTest::::test_drawBorder_correctUsage()","31":"RectTest::::test_drawBorder_correctUsage()","32":"RectTest::::test_drawBorder_correctUsage()","33":"RectTest::::test_drawBorder_correctUsage()","34":"RectTest::::test_drawBorder_correctUsage()","35":"RectTest::::test_drawBorder_correctUsage()","36":"RectTest::::test_drawBorder_correctUsage()","37":"RectTest::::test_drawBorder_correctUsage()","38":"RectTest::::test_drawBorder_correctUsage()","39":"RectTest::::test_drawBorder_correctUsage()","40":"RectTest::::test_drawBorder_correctUsage()","41":"RectTest::::test_drawBorder_correctUsage()","42":"RectTest::::test_drawBorder_correctUsage()","43":"RectTest::::test_drawBorder_correctUsage()","44":"RectTest::::test_drawBorder_correctUsage()","45":"RectTest::::test_drawBorder_correctUsage()","46":"RectTest::::test_drawBorder_correctUsage()","48":"RectTest::::test_fillInside_correctUsage()","49":"RectTest::::test_fillInside_correctUsage()","50":"RectTest::::test_fillInside_correctUsage()","51":"RectTest::::test_fillInside_correctUsage()","52":"RectTest::::test_fillInside_correctUsage()","53":"RectTest::::test_fillInside_correctUsage()","54":"RectTest::::test_fillInside_correctUsage()","55":"RectTest::::test_fillInside_correctUsage()","56":"RectTest::::test_fillInside_correctUsage()","57":"RectTest::::test_fillInside_correctUsage()","58":"RectTest::::test_fillInside_correctUsage()","59":"RectTest::::test_fillInside_correctUsage()","60":"RectTest::::test_fillInside_correctUsage()","61":"RectTest::::test_fillInside_correctUsage()","62":"RectTest::::test_fillInside_correctUsage()","63":"RectTest::::test_fillInside_correctUsage()","64":"RectTest::::test_fillInside_correctUsage()","65":"RectTest::::test_fillInside_correctUsage()","66":"RectTest::::test_fillInside_correctUsage()","67":"RectTest::::test_fillInside_correctUsage()","68":"RectTest::::test_fillInside_correctUsage()","69":"RectTest::::test_fillInside_correctUsage()","70":"RectTest::::test_fillInside_correctUsage()","71":"RectTest::::test_fillInside_correctUsage()","72":"RectTest::::test_fillInside_correctUsage()","73":"RectTest::::test_fillInside_correctUsage()","74":"RectTest::::test_fillInside_correctUsage()","75":"RectTest::::test_fillInside_correctUsage()","76":"RectTest::::test_fillInside_correctUsage()","77":"RectTest::::test_fillInside_correctUsage()","78":"RectTest::::test_fillInside_correctUsage()","79":"RectTest::::test_fillInside_correctUsage()","84":"RectTest.BuilderTest::::test_build_correctUsage()","85":"RectTest.BuilderTest::::test_build_correctUsage()","86":"RectTest.BuilderTest::::test_build_correctUsage()","87":"RectTest.BuilderTest::::test_build_correctUsage()","88":"RectTest.BuilderTest::::test_build_correctUsage()","89":"RectTest.BuilderTest::::test_build_correctUsage()","90":"RectTest.BuilderTest::::test_build_correctUsage()","91":"RectTest.BuilderTest::::test_build_correctUsage()","92":"RectTest.BuilderTest::::test_build_correctUsage()","93":"RectTest.BuilderTest::::test_build_correctUsage()","94":"RectTest.BuilderTest::::test_build_correctUsage()","95":"RectTest.BuilderTest::::test_build_correctUsage()","96":"RectTest.BuilderTest::::test_build_correctUsage()","97":"RectTest.BuilderTest::::test_build_correctUsage()","98":"RectTest.BuilderTest::::test_build_correctUsage()","99":"RectTest.BuilderTest::::test_build_correctUsage()","100":"RectTest.BuilderTest::::test_build_correctUsage()","101":"RectTest.BuilderTest::::test_build_correctUsage()","102":"RectTest.BuilderTest::::test_build_correctUsage()","103":"RectTest.BuilderTest::::test_build_correctUsage()","104":"RectTest.BuilderTest::::test_build_correctUsage()","106":"RectTest.BuilderTest::::testEx_build_nullParam()","107":"RectTest.BuilderTest::::testEx_build_nullParam()","108":"RectTest.BuilderTest::::testEx_build_nullParam()","109":"RectTest.BuilderTest::::testEx_build_nullParam()","110":"RectTest.BuilderTest::::testEx_build_nullParam()","111":"RectTest.BuilderTest::::testEx_build_nullParam()","112":"RectTest.BuilderTest::::testEx_build_nullParam()","113":"RectTest.BuilderTest::::testEx_build_nullParam()","114":"RectTest.BuilderTest::::testEx_build_nullParam()"},"tests":[{"test_lines":[15,46],"covered_lines":[17,18,22,23,31,35,40,50,55,56],"label":"Rect::::drawBorder(int,int,java.awt.Graphics2D)"},{"test_lines":[48,79],"covered_lines":[17,18,27,28,31,35,40,50,55,56],"label":"Rect::::fillInside(int,int,java.awt.Graphics2D)"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/shape/closed/Oval.java":{"class_content":["package cn.t8s.shape.closed;\n","\n","import cn.core.strategy.shape.AbstractClosedShape;\n","import cn.core.utils.ObjectUtils;\n","\n","import java.awt.*;\n","\n","/**\n"," * A closed shape of oval.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class Oval extends AbstractClosedShape {\n","\n","\n","    public Oval(Builder csb) {\n","        super(csb);\n","    }\n","\n","    @Override\n","    public void drawBorder(int canvasWidth, int canvasHeight, Graphics2D g2d) {\n","        g2d.drawOval(rect.x, rect.y, rect.width, rect.height);\n","    }\n","\n","    @Override\n","    public void fillInside(int canvasWidth, int canvasHeight, Graphics2D g2d) {\n","        g2d.fillOval(rect.x, rect.y, rect.width, rect.height);\n","    }\n","\n","    public static class Builder extends AbstractClosedShapeBuilder {\n","\n","        @Override\n","        public Oval.Builder rect(Rectangle rect) {\n","            return (Oval.Builder) super.rect(rect);\n","        }\n","\n","        @Override\n","        public Oval.Builder stroke(Stroke stroke) {\n","            return (Oval.Builder) super.stroke(stroke);\n","        }\n","\n","        @Override\n","        public Oval.Builder fill(boolean fill) {\n","            return (Oval.Builder) super.fill(fill);\n","        }\n","\n","        @Override\n","        public Oval.Builder color(Color color) {\n","            return (Oval.Builder) super.color(color);\n","        }\n","\n","        @Override\n","        public Oval build() {\n","            ObjectUtils.excNull(rect, \"Rectangle for this oval not specified.\");\n","            return new Oval(this);\n","        }\n","    }\n","}\n"],"test_content":["package cn.t8s.shape.closed;\n","\n","import cn.core.utils.BufferedImageUtils;\n","import cn.t8s.BufferedImageComparer;\n","import cn.t8s.ReflectionUtils;\n","import cn.t8s.TestUtils;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","public class OvalTest {\n","\n","    @Test\n","    public void test_drawBorder_correctUsage() throws IOException {\n","        // given\n","        Color color = Color.BLACK;\n","        Stroke stroke = new BasicStroke();\n","        Oval oval = new Oval.Builder()\n","                .rect(new Rectangle(10, 20, 80, 30))\n","                .color(color)\n","                .stroke(stroke)\n","                .build();\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        int canvasWidth = source.getWidth();\n","        int canvasHeight = source.getHeight();\n","\n","        // when\n","        BufferedImage target = BufferedImageUtils.copy(source, source.getType());\n","        Graphics2D g = target.createGraphics();\n","        g.setColor(color);\n","        g.setStroke(stroke);\n","        oval.drawBorder(canvasWidth, canvasHeight, g);\n","        g.dispose();\n","\n","        // then\n","        BufferedImage image = BufferedImageUtils.copy(source, source.getType());\n","        Graphics2D gh = image.createGraphics();\n","        gh.setColor(color);\n","        gh.setStroke(stroke);\n","        gh.drawOval(10, 20, 80, 30);\n","        gh.dispose();\n","\n","        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n","    }\n","\n","    @Test\n","    public void test_fillInside_correctUsage() throws IOException {\n","        // given\n","        Color color = Color.GRAY;\n","        Stroke stroke = new BasicStroke();\n","        Oval oval = new Oval.Builder()\n","                .rect(new Rectangle(10, 20, 80, 30))\n","                .color(color)\n","                .stroke(stroke)\n","                .build();\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        int canvasWidth = source.getWidth();\n","        int canvasHeight = source.getHeight();\n","\n","        // when\n","        BufferedImage target = BufferedImageUtils.copy(source, source.getType());\n","        Graphics2D g = target.createGraphics();\n","        g.setColor(color);\n","        g.setStroke(stroke);\n","        oval.fillInside(canvasWidth, canvasHeight, g);\n","        g.dispose();\n","\n","        // then\n","        BufferedImage image = BufferedImageUtils.copy(source, source.getType());\n","        Graphics2D gh = image.createGraphics();\n","        gh.setColor(color);\n","        gh.setStroke(stroke);\n","        gh.fillOval(10, 20, 80, 30);\n","        gh.dispose();\n","\n","        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n","    }\n","\n","\n","    public static class BuilderTest {\n","\n","        @Test\n","        public void test_build_correctUsage() {\n","            // given\n","            Color color = Color.BLACK;\n","            Stroke stroke = new BasicStroke();\n","            Rectangle rectangle = new Rectangle(10, 20, 80, 30);\n","            Oval.Builder builder = new Oval.Builder()\n","                    .rect(rectangle)\n","                    .color(color)\n","                    .stroke(stroke)\n","                    .fill(false);\n","\n","            // when\n","            Oval o = builder.build();\n","\n","            // then\n","            Assert.assertEquals(color, ReflectionUtils.getFromSuper(\"color\", o));\n","            Assert.assertEquals(stroke, ReflectionUtils.getFromSuper(\"stroke\", o));\n","            Assert.assertEquals(rectangle, ReflectionUtils.getFromSuper(\"rect\", o));\n","            Assert.assertFalse((Boolean) ReflectionUtils.getFromSuper(\"fill\", o));\n","        }\n","\n","        @Test\n","        public void testEx_build_nullParam() {\n","            Oval.Builder builder = new Oval.Builder()\n","                    .color(Color.GRAY)\n","                    .stroke(new BasicStroke());\n","            NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n","                    builder::build);\n","            Assert.assertEquals(\"Rectangle for this oval not specified.\", ex.getMessage());\n","        }\n","    }\n","}\n"],"method_lines_dic":{"Oval::::drawBorder(int,int,java.awt.Graphics2D)":[21,24],"Oval::::fillInside(int,int,java.awt.Graphics2D)":[26,29],"Oval.Builder::::rect(java.awt.Rectangle)":[33,36],"Oval.Builder::::stroke(java.awt.Stroke)":[38,41],"Oval.Builder::::fill(boolean)":[43,46],"Oval.Builder::::color(java.awt.Color)":[48,51],"Oval.Builder::::build()":[53,57]},"test_method_lines_dic":{"OvalTest::::test_drawBorder_correctUsage()":[15,46],"OvalTest::::test_fillInside_correctUsage()":[48,79],"OvalTest.BuilderTest::::test_build_correctUsage()":[84,104],"OvalTest.BuilderTest::::testEx_build_nullParam()":[106,114]},"reverse_method_lines_dic":{"21":"Oval::::drawBorder(int,int,java.awt.Graphics2D)","22":"Oval::::drawBorder(int,int,java.awt.Graphics2D)","23":"Oval::::drawBorder(int,int,java.awt.Graphics2D)","24":"Oval::::drawBorder(int,int,java.awt.Graphics2D)","26":"Oval::::fillInside(int,int,java.awt.Graphics2D)","27":"Oval::::fillInside(int,int,java.awt.Graphics2D)","28":"Oval::::fillInside(int,int,java.awt.Graphics2D)","29":"Oval::::fillInside(int,int,java.awt.Graphics2D)","33":"Oval.Builder::::rect(java.awt.Rectangle)","34":"Oval.Builder::::rect(java.awt.Rectangle)","35":"Oval.Builder::::rect(java.awt.Rectangle)","36":"Oval.Builder::::rect(java.awt.Rectangle)","38":"Oval.Builder::::stroke(java.awt.Stroke)","39":"Oval.Builder::::stroke(java.awt.Stroke)","40":"Oval.Builder::::stroke(java.awt.Stroke)","41":"Oval.Builder::::stroke(java.awt.Stroke)","43":"Oval.Builder::::fill(boolean)","44":"Oval.Builder::::fill(boolean)","45":"Oval.Builder::::fill(boolean)","46":"Oval.Builder::::fill(boolean)","48":"Oval.Builder::::color(java.awt.Color)","49":"Oval.Builder::::color(java.awt.Color)","50":"Oval.Builder::::color(java.awt.Color)","51":"Oval.Builder::::color(java.awt.Color)","53":"Oval.Builder::::build()","54":"Oval.Builder::::build()","55":"Oval.Builder::::build()","56":"Oval.Builder::::build()","57":"Oval.Builder::::build()"},"test_reverse_method_lines_dic":{"15":"OvalTest::::test_drawBorder_correctUsage()","16":"OvalTest::::test_drawBorder_correctUsage()","17":"OvalTest::::test_drawBorder_correctUsage()","18":"OvalTest::::test_drawBorder_correctUsage()","19":"OvalTest::::test_drawBorder_correctUsage()","20":"OvalTest::::test_drawBorder_correctUsage()","21":"OvalTest::::test_drawBorder_correctUsage()","22":"OvalTest::::test_drawBorder_correctUsage()","23":"OvalTest::::test_drawBorder_correctUsage()","24":"OvalTest::::test_drawBorder_correctUsage()","25":"OvalTest::::test_drawBorder_correctUsage()","26":"OvalTest::::test_drawBorder_correctUsage()","27":"OvalTest::::test_drawBorder_correctUsage()","28":"OvalTest::::test_drawBorder_correctUsage()","29":"OvalTest::::test_drawBorder_correctUsage()","30":"OvalTest::::test_drawBorder_correctUsage()","31":"OvalTest::::test_drawBorder_correctUsage()","32":"OvalTest::::test_drawBorder_correctUsage()","33":"OvalTest::::test_drawBorder_correctUsage()","34":"OvalTest::::test_drawBorder_correctUsage()","35":"OvalTest::::test_drawBorder_correctUsage()","36":"OvalTest::::test_drawBorder_correctUsage()","37":"OvalTest::::test_drawBorder_correctUsage()","38":"OvalTest::::test_drawBorder_correctUsage()","39":"OvalTest::::test_drawBorder_correctUsage()","40":"OvalTest::::test_drawBorder_correctUsage()","41":"OvalTest::::test_drawBorder_correctUsage()","42":"OvalTest::::test_drawBorder_correctUsage()","43":"OvalTest::::test_drawBorder_correctUsage()","44":"OvalTest::::test_drawBorder_correctUsage()","45":"OvalTest::::test_drawBorder_correctUsage()","46":"OvalTest::::test_drawBorder_correctUsage()","48":"OvalTest::::test_fillInside_correctUsage()","49":"OvalTest::::test_fillInside_correctUsage()","50":"OvalTest::::test_fillInside_correctUsage()","51":"OvalTest::::test_fillInside_correctUsage()","52":"OvalTest::::test_fillInside_correctUsage()","53":"OvalTest::::test_fillInside_correctUsage()","54":"OvalTest::::test_fillInside_correctUsage()","55":"OvalTest::::test_fillInside_correctUsage()","56":"OvalTest::::test_fillInside_correctUsage()","57":"OvalTest::::test_fillInside_correctUsage()","58":"OvalTest::::test_fillInside_correctUsage()","59":"OvalTest::::test_fillInside_correctUsage()","60":"OvalTest::::test_fillInside_correctUsage()","61":"OvalTest::::test_fillInside_correctUsage()","62":"OvalTest::::test_fillInside_correctUsage()","63":"OvalTest::::test_fillInside_correctUsage()","64":"OvalTest::::test_fillInside_correctUsage()","65":"OvalTest::::test_fillInside_correctUsage()","66":"OvalTest::::test_fillInside_correctUsage()","67":"OvalTest::::test_fillInside_correctUsage()","68":"OvalTest::::test_fillInside_correctUsage()","69":"OvalTest::::test_fillInside_correctUsage()","70":"OvalTest::::test_fillInside_correctUsage()","71":"OvalTest::::test_fillInside_correctUsage()","72":"OvalTest::::test_fillInside_correctUsage()","73":"OvalTest::::test_fillInside_correctUsage()","74":"OvalTest::::test_fillInside_correctUsage()","75":"OvalTest::::test_fillInside_correctUsage()","76":"OvalTest::::test_fillInside_correctUsage()","77":"OvalTest::::test_fillInside_correctUsage()","78":"OvalTest::::test_fillInside_correctUsage()","79":"OvalTest::::test_fillInside_correctUsage()","84":"OvalTest.BuilderTest::::test_build_correctUsage()","85":"OvalTest.BuilderTest::::test_build_correctUsage()","86":"OvalTest.BuilderTest::::test_build_correctUsage()","87":"OvalTest.BuilderTest::::test_build_correctUsage()","88":"OvalTest.BuilderTest::::test_build_correctUsage()","89":"OvalTest.BuilderTest::::test_build_correctUsage()","90":"OvalTest.BuilderTest::::test_build_correctUsage()","91":"OvalTest.BuilderTest::::test_build_correctUsage()","92":"OvalTest.BuilderTest::::test_build_correctUsage()","93":"OvalTest.BuilderTest::::test_build_correctUsage()","94":"OvalTest.BuilderTest::::test_build_correctUsage()","95":"OvalTest.BuilderTest::::test_build_correctUsage()","96":"OvalTest.BuilderTest::::test_build_correctUsage()","97":"OvalTest.BuilderTest::::test_build_correctUsage()","98":"OvalTest.BuilderTest::::test_build_correctUsage()","99":"OvalTest.BuilderTest::::test_build_correctUsage()","100":"OvalTest.BuilderTest::::test_build_correctUsage()","101":"OvalTest.BuilderTest::::test_build_correctUsage()","102":"OvalTest.BuilderTest::::test_build_correctUsage()","103":"OvalTest.BuilderTest::::test_build_correctUsage()","104":"OvalTest.BuilderTest::::test_build_correctUsage()","106":"OvalTest.BuilderTest::::testEx_build_nullParam()","107":"OvalTest.BuilderTest::::testEx_build_nullParam()","108":"OvalTest.BuilderTest::::testEx_build_nullParam()","109":"OvalTest.BuilderTest::::testEx_build_nullParam()","110":"OvalTest.BuilderTest::::testEx_build_nullParam()","111":"OvalTest.BuilderTest::::testEx_build_nullParam()","112":"OvalTest.BuilderTest::::testEx_build_nullParam()","113":"OvalTest.BuilderTest::::testEx_build_nullParam()","114":"OvalTest.BuilderTest::::testEx_build_nullParam()"},"tests":[{"test_lines":[15,46],"covered_lines":[18,19,23,24,31,35,40,50,55,56],"label":"Oval::::drawBorder(int,int,java.awt.Graphics2D)"},{"test_lines":[48,79],"covered_lines":[18,19,28,29,31,35,40,50,55,56],"label":"Oval::::fillInside(int,int,java.awt.Graphics2D)"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/mode/bina/SimpleBinaryStrategy.java":{"class_content":["package cn.t8s.mode.bina;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.strategy.mode.AbstractBinaryStrategy;\n","import cn.t8s.mode.graying.AvgGrayingStrategy;\n","import cn.core.strategy.mode.AbstractGrayingStrategy;\n","import cn.core.GenericBuilder;\n","import cn.core.tool.Range;\n","import java.awt.image.BufferedImage;\n","\n","/**\n"," * A simple binary strategy that requires setting a threshold value.\n"," * Any pixel whose gray value is greater than the threshold value\n"," * will be set as the {@link SimpleBinaryStrategy#BINARY_MAX},\n"," * otherwise it will be set as the {@link SimpleBinaryStrategy#BINARY_MIN}.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class SimpleBinaryStrategy extends AbstractBinaryStrategy {\n","\n","    /**\n","     * The larger value of the binarization.\n","     */\n","    public static final int BINARY_MIN = 0;\n","\n","    /**\n","     * The smaller value of the binarization.\n","     */\n","    public static final int BINARY_MAX = 255;\n","\n","    /**\n","     * The threshold value.\n","     */\n","    protected final int threshold;\n","\n","    public SimpleBinaryStrategy(Builder bu) {\n","        super(bu.grayingStrategy);\n","        this.threshold = bu.threshold;\n","    }\n","\n","    @Override\n","    public void binaryImage (BufferedImage img) {\n","        int w = img.getWidth();\n","        int h = img.getHeight();\n","        for (int x = 0; x < w; x++) {\n","            for (int y = 0; y < h; y++) {\n","\n","                int currentGraynessValue = img.getRGB(x, y) & 0xff;\n","                int binaryValue = currentGraynessValue > threshold ? BINARY_MAX : BINARY_MIN;\n","\n","                int binaryRgb = (binaryValue << 16) | (binaryValue << 8) | binaryValue;\n","                img.setRGB(x, y, binaryRgb);\n","            }\n","        }\n","    }\n","\n","    public static class Builder implements GenericBuilder<SimpleBinaryStrategy> {\n","        protected AbstractGrayingStrategy grayingStrategy;\n","        protected int threshold;\n","\n","        public Builder grayingStrategy(AbstractGrayingStrategy grayingStrategy) {\n","            this.grayingStrategy = grayingStrategy;\n","            return this;\n","        }\n","        public Builder threshold(int threshold) {\n","            this.threshold = threshold;\n","            return this;\n","        }\n","\n","        @Override\n","        public SimpleBinaryStrategy build() {\n","            if (Range.ofInt(0, 255).notWithin(threshold)) {\n","                throw new InvalidSettingException(\"The threshold out of bounds:[0, 255].\");\n","            }\n","            // the default threshold is 128\n","            threshold = threshold <= 0 ? 128 : threshold;\n","            // the default graying strategy is average\n","            grayingStrategy = grayingStrategy == null ? new AvgGrayingStrategy() : grayingStrategy;\n","\n","            return new SimpleBinaryStrategy(this);\n","        }\n","    }\n","}\n"],"test_content":["package cn.t8s.mode.bina;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.strategy.mode.AbstractGrayingStrategy;\n","import cn.core.utils.BufferedImageUtils;\n","import cn.t8s.BufferedImageComparer;\n","import cn.t8s.ReflectionUtils;\n","import cn.t8s.TestUtils;\n","import cn.t8s.mode.graying.AvgGrayingStrategy;\n","import cn.t8s.mode.graying.FixedGrayingStrategy;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import java.awt.image.BufferedImage;\n","import java.io.IOException;\n","\n","public class SimpleBinaryStrategyTest {\n","\n","    @Test\n","    public void test_binaryImage() throws IOException {\n","        // given\n","        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n","        AbstractGrayingStrategy grayingStrategy = new FixedGrayingStrategy();\n","        int threshold = 130;\n","        // do gray first\n","        BufferedImage target = BufferedImageUtils.copy(source, source.getType());\n","        SimpleBinaryStrategy binaryStrategy = new SimpleBinaryStrategy.Builder()\n","                .grayingStrategy(grayingStrategy)\n","                .threshold(threshold)\n","                .build();\n","        grayingStrategy.execute(target);\n","\n","        // when\n","        binaryStrategy.binaryImage(target);\n","\n","        // then\n","        BufferedImage image = BufferedImageUtils.copy(source, source.getType());\n","        grayingStrategy.execute(image); // do gray first\n","        int w = image.getWidth(), h = image.getHeight();\n","        for (int x = 0; x < w; x++) {\n","            for (int y = 0; y < h; y++) {\n","\n","                int currentGraynessValue = image.getRGB(x, y) & 0xff;\n","                int binaryValue = currentGraynessValue > threshold ?\n","                        SimpleBinaryStrategy.BINARY_MAX :\n","                        SimpleBinaryStrategy.BINARY_MIN;\n","\n","                int binaryRgb = (binaryValue << 16) | (binaryValue << 8) | binaryValue;\n","                image.setRGB(x, y, binaryRgb);\n","            }\n","        }\n","\n","        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n","    }\n","\n","    public static class BuilderTest {\n","\n","        @Test\n","        public void test_build_correctUsage() {\n","            // given\n","            AbstractGrayingStrategy grayingStrategy = new FixedGrayingStrategy();\n","            int threshold = 130;\n","\n","            // when\n","            SimpleBinaryStrategy strategy = new SimpleBinaryStrategy.Builder()\n","                    .grayingStrategy(grayingStrategy)\n","                    .threshold(threshold)\n","                    .build();\n","\n","            // then\n","            Assert.assertEquals(grayingStrategy, ReflectionUtils.getFromSuper(\"grayingStrategy\", strategy));\n","            Assert.assertEquals(threshold, ReflectionUtils.get(\"threshold\", strategy));\n","        }\n","\n","        @Test\n","        public void test_build_defaultParam() {\n","            // when\n","            SimpleBinaryStrategy strategy = new SimpleBinaryStrategy.Builder().build();\n","\n","            // then\n","            Assert.assertEquals(128, ReflectionUtils.get(\"threshold\", strategy));\n","            Object grayingStrategy = ReflectionUtils.getFromSuper(\"grayingStrategy\", strategy);\n","            Assert.assertTrue(grayingStrategy instanceof AvgGrayingStrategy);\n","        }\n","\n","        @Test\n","        public void testEx_build_withInvalidParam() {\n","            SimpleBinaryStrategy.Builder builder = new SimpleBinaryStrategy.Builder()\n","                    .threshold(260);\n","            InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n","                    builder::build);\n","            Assert.assertEquals(\"The threshold out of bounds:[0, 255].\",\n","                    ex.getMessage());\n","        }\n","    }\n","\n","}"],"method_lines_dic":{"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)":[42,56],"SimpleBinaryStrategy.Builder::::threshold(int)":[66,69],"SimpleBinaryStrategy.Builder::::build()":[71,82]},"test_method_lines_dic":{"SimpleBinaryStrategyTest::::test_binaryImage()":[18,53],"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()":[57,72],"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()":[74,83],"SimpleBinaryStrategyTest.BuilderTest::::testEx_build_withInvalidParam()":[85,93]},"reverse_method_lines_dic":{"42":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","43":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","44":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","45":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","46":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","47":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","48":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","49":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","50":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","51":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","52":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","53":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","54":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","55":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","56":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)","66":"SimpleBinaryStrategy.Builder::::threshold(int)","67":"SimpleBinaryStrategy.Builder::::threshold(int)","68":"SimpleBinaryStrategy.Builder::::threshold(int)","69":"SimpleBinaryStrategy.Builder::::threshold(int)","71":"SimpleBinaryStrategy.Builder::::build()","72":"SimpleBinaryStrategy.Builder::::build()","73":"SimpleBinaryStrategy.Builder::::build()","74":"SimpleBinaryStrategy.Builder::::build()","75":"SimpleBinaryStrategy.Builder::::build()","76":"SimpleBinaryStrategy.Builder::::build()","77":"SimpleBinaryStrategy.Builder::::build()","78":"SimpleBinaryStrategy.Builder::::build()","79":"SimpleBinaryStrategy.Builder::::build()","80":"SimpleBinaryStrategy.Builder::::build()","81":"SimpleBinaryStrategy.Builder::::build()","82":"SimpleBinaryStrategy.Builder::::build()"},"test_reverse_method_lines_dic":{"18":"SimpleBinaryStrategyTest::::test_binaryImage()","19":"SimpleBinaryStrategyTest::::test_binaryImage()","20":"SimpleBinaryStrategyTest::::test_binaryImage()","21":"SimpleBinaryStrategyTest::::test_binaryImage()","22":"SimpleBinaryStrategyTest::::test_binaryImage()","23":"SimpleBinaryStrategyTest::::test_binaryImage()","24":"SimpleBinaryStrategyTest::::test_binaryImage()","25":"SimpleBinaryStrategyTest::::test_binaryImage()","26":"SimpleBinaryStrategyTest::::test_binaryImage()","27":"SimpleBinaryStrategyTest::::test_binaryImage()","28":"SimpleBinaryStrategyTest::::test_binaryImage()","29":"SimpleBinaryStrategyTest::::test_binaryImage()","30":"SimpleBinaryStrategyTest::::test_binaryImage()","31":"SimpleBinaryStrategyTest::::test_binaryImage()","32":"SimpleBinaryStrategyTest::::test_binaryImage()","33":"SimpleBinaryStrategyTest::::test_binaryImage()","34":"SimpleBinaryStrategyTest::::test_binaryImage()","35":"SimpleBinaryStrategyTest::::test_binaryImage()","36":"SimpleBinaryStrategyTest::::test_binaryImage()","37":"SimpleBinaryStrategyTest::::test_binaryImage()","38":"SimpleBinaryStrategyTest::::test_binaryImage()","39":"SimpleBinaryStrategyTest::::test_binaryImage()","40":"SimpleBinaryStrategyTest::::test_binaryImage()","41":"SimpleBinaryStrategyTest::::test_binaryImage()","42":"SimpleBinaryStrategyTest::::test_binaryImage()","43":"SimpleBinaryStrategyTest::::test_binaryImage()","44":"SimpleBinaryStrategyTest::::test_binaryImage()","45":"SimpleBinaryStrategyTest::::test_binaryImage()","46":"SimpleBinaryStrategyTest::::test_binaryImage()","47":"SimpleBinaryStrategyTest::::test_binaryImage()","48":"SimpleBinaryStrategyTest::::test_binaryImage()","49":"SimpleBinaryStrategyTest::::test_binaryImage()","50":"SimpleBinaryStrategyTest::::test_binaryImage()","51":"SimpleBinaryStrategyTest::::test_binaryImage()","52":"SimpleBinaryStrategyTest::::test_binaryImage()","53":"SimpleBinaryStrategyTest::::test_binaryImage()","57":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","58":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","59":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","60":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","61":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","62":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","63":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","64":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","65":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","66":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","67":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","68":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","69":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","70":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","71":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","72":"SimpleBinaryStrategyTest.BuilderTest::::test_build_correctUsage()","74":"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()","75":"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()","76":"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()","77":"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()","78":"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()","79":"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()","80":"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()","81":"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()","82":"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()","83":"SimpleBinaryStrategyTest.BuilderTest::::test_build_defaultParam()","85":"SimpleBinaryStrategyTest.BuilderTest::::testEx_build_withInvalidParam()","86":"SimpleBinaryStrategyTest.BuilderTest::::testEx_build_withInvalidParam()","87":"SimpleBinaryStrategyTest.BuilderTest::::testEx_build_withInvalidParam()","88":"SimpleBinaryStrategyTest.BuilderTest::::testEx_build_withInvalidParam()","89":"SimpleBinaryStrategyTest.BuilderTest::::testEx_build_withInvalidParam()","90":"SimpleBinaryStrategyTest.BuilderTest::::testEx_build_withInvalidParam()","91":"SimpleBinaryStrategyTest.BuilderTest::::testEx_build_withInvalidParam()","92":"SimpleBinaryStrategyTest.BuilderTest::::testEx_build_withInvalidParam()","93":"SimpleBinaryStrategyTest.BuilderTest::::testEx_build_withInvalidParam()"},"tests":[{"test_lines":[18,53],"covered_lines":[38,39,40,44,45,46,47,49,50,52,53,56,58,63,64,67,68,73,77,79,81],"label":"SimpleBinaryStrategy::::binaryImage(java.awt.image.BufferedImage)"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/mode/graying/MinGrayingStrategy.java":{"class_content":["package cn.t8s.mode.graying;\n","\n","import cn.core.strategy.mode.AbstractGrayingStrategy;\n","\n","/**\n"," * A maximum graying strategy. The gray value of any pixel is equal to the maximum value of\n"," * the red component, green component and blue component.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class MinGrayingStrategy extends AbstractGrayingStrategy {\n","    @Override\n","    public int getGraynessValue(int r, int g, int b) {\n","        return Math.min(Math.min(r, g), b);\n","    }\n","}\n"],"test_content":["package cn.t8s.mode.graying;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","\n","\n","public class MinGrayingStrategyTest {\n","\n","    @Test\n","    public void test_getGraynessValue() {\n","        // given\n","        int red = 67, green = 255, blue = 184;\n","\n","        // when\n","        MinGrayingStrategy strategy = new MinGrayingStrategy();\n","        int graynessValue = strategy.getGraynessValue(red, green, blue);\n","\n","        // then\n","        Assert.assertEquals(67, graynessValue);\n","    }\n","\n","}"],"method_lines_dic":{"MinGrayingStrategy::::getGraynessValue(int,int,int)":[13,16]},"test_method_lines_dic":{"MinGrayingStrategyTest::::test_getGraynessValue()":[9,20]},"reverse_method_lines_dic":{"13":"MinGrayingStrategy::::getGraynessValue(int,int,int)","14":"MinGrayingStrategy::::getGraynessValue(int,int,int)","15":"MinGrayingStrategy::::getGraynessValue(int,int,int)","16":"MinGrayingStrategy::::getGraynessValue(int,int,int)"},"test_reverse_method_lines_dic":{"9":"MinGrayingStrategyTest::::test_getGraynessValue()","10":"MinGrayingStrategyTest::::test_getGraynessValue()","11":"MinGrayingStrategyTest::::test_getGraynessValue()","12":"MinGrayingStrategyTest::::test_getGraynessValue()","13":"MinGrayingStrategyTest::::test_getGraynessValue()","14":"MinGrayingStrategyTest::::test_getGraynessValue()","15":"MinGrayingStrategyTest::::test_getGraynessValue()","16":"MinGrayingStrategyTest::::test_getGraynessValue()","17":"MinGrayingStrategyTest::::test_getGraynessValue()","18":"MinGrayingStrategyTest::::test_getGraynessValue()","19":"MinGrayingStrategyTest::::test_getGraynessValue()","20":"MinGrayingStrategyTest::::test_getGraynessValue()"},"tests":[{"test_lines":[9,20],"covered_lines":[12,15],"label":"MinGrayingStrategy::::getGraynessValue(int,int,int)"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/mode/graying/FixedGrayingStrategy.java":{"class_content":["package cn.t8s.mode.graying;\n","\n","import cn.core.strategy.mode.AbstractGrayingStrategy;\n","\n","/**\n"," * A fixed graying strategy. The gray value of any pixel is equal to the selected component.\n"," * View {@link FixedOption} for all options, and the default option is {@link FixedOption#R}.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class FixedGrayingStrategy extends AbstractGrayingStrategy {\n","\n","    private final FixedOption fo;\n","\n","    public FixedGrayingStrategy() {\n","        this.fo = FixedOption.R;\n","    }\n","\n","    public FixedGrayingStrategy(FixedOption fo) {\n","        this.fo = fo;\n","    }\n","\n","    @Override\n","    public int getGraynessValue(int r, int g, int b) {\n","        return fo.chose(r, g, b);\n","    }\n","\n","\n","    public interface FixedOption {\n","\n","        /**\n","         * Chose a component.\n","         *\n","         * @param r The red component.\n","         * @param g The green component.\n","         * @param b The blue component.\n","         * @return The final gray value.\n","         */\n","        int chose(int r, int g, int b);\n","\n","        FixedOption R = (o1, o2, o3) -> o1;\n","\n","        FixedOption G = (o1, o2, o3) -> o2;\n","\n","        FixedOption B = (o1, o2, o3) -> o3;\n","    }\n","}\n"],"test_content":["package cn.t8s.mode.graying;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","\n","public class FixedGrayingStrategyTest {\n","\n","    @Test\n","    public void test_getGraynessValue_fixedR() {\n","        // given\n","        int red = 67, green = 255, blue = 184;\n","\n","        // when\n","        FixedGrayingStrategy strategy = new FixedGrayingStrategy(FixedGrayingStrategy.FixedOption.R);\n","        int graynessValue = strategy.getGraynessValue(red, green, blue);\n","\n","        // then\n","        Assert.assertEquals(red, graynessValue);\n","    }\n","\n","    @Test\n","    public void test_getGraynessValue_fixedG() {\n","        // given\n","        int red = 67, green = 255, blue = 184;\n","\n","        // when\n","        FixedGrayingStrategy strategy = new FixedGrayingStrategy(FixedGrayingStrategy.FixedOption.G);\n","        int graynessValue = strategy.getGraynessValue(red, green, blue);\n","\n","        // then\n","        Assert.assertEquals(green, graynessValue);\n","    }\n","\n","    @Test\n","    public void test_getGraynessValue_fixedB() {\n","        // given\n","        int red = 67, green = 255, blue = 184;\n","\n","        // when\n","        FixedGrayingStrategy strategy = new FixedGrayingStrategy(FixedGrayingStrategy.FixedOption.B);\n","        int graynessValue = strategy.getGraynessValue(red, green, blue);\n","\n","        // then\n","        Assert.assertEquals(blue, graynessValue);\n","    }\n","\n","}"],"method_lines_dic":{"FixedGrayingStrategy::::getGraynessValue(int,int,int)":[24,27],"FixedGrayingStrategy.FixedOption::::chose(int,int,int)":[40,40]},"test_method_lines_dic":{"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()":[8,19],"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()":[21,32],"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()":[34,45]},"reverse_method_lines_dic":{"24":"FixedGrayingStrategy::::getGraynessValue(int,int,int)","25":"FixedGrayingStrategy::::getGraynessValue(int,int,int)","26":"FixedGrayingStrategy::::getGraynessValue(int,int,int)","27":"FixedGrayingStrategy::::getGraynessValue(int,int,int)","40":"FixedGrayingStrategy.FixedOption::::chose(int,int,int)"},"test_reverse_method_lines_dic":{"8":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","9":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","10":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","11":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","12":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","13":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","14":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","15":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","16":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","17":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","18":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","19":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedR()","21":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","22":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","23":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","24":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","25":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","26":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","27":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","28":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","29":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","30":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","31":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","32":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedG()","34":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","35":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","36":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","37":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","38":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","39":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","40":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","41":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","42":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","43":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","44":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()","45":"FixedGrayingStrategyTest::::test_getGraynessValue_fixedB()"},"tests":[{"test_lines":[8,19],"covered_lines":[20,21,22,26,42,44,46],"label":"FixedGrayingStrategy::::getGraynessValue(int,int,int)"},{"test_lines":[21,32],"covered_lines":[20,21,22,26,42,44,46],"label":"FixedGrayingStrategy::::getGraynessValue(int,int,int)"},{"test_lines":[34,45],"covered_lines":[20,21,22,26,42,44,46],"label":"FixedGrayingStrategy::::getGraynessValue(int,int,int)"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/mode/graying/WeightGrayingStrategy.java":{"class_content":["package cn.t8s.mode.graying;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.core.strategy.mode.AbstractGrayingStrategy;\n","import cn.core.GenericBuilder;\n","import cn.core.tool.Range;\n","import java.text.MessageFormat;\n","\n","/**\n"," * A weight graying strategy. The gray value of any pixel is equal to the weighted sum of\n"," * the red component, green component and blue component.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class WeightGrayingStrategy extends AbstractGrayingStrategy {\n","\n","    /**\n","     * The red component weight.\n","     */\n","    private final double redWeight;\n","\n","    /**\n","     * The green component weight.\n","     */\n","    private final double greenWeight;\n","\n","    public WeightGrayingStrategy(Builder bu) {\n","        this.redWeight = bu.redWeight;\n","        this.greenWeight = bu.greenWeight;\n","    }\n","\n","    @Override\n","    public int getGraynessValue(int r, int g, int b) {\n","        double blueWeight = 1.0 - redWeight - greenWeight;\n","        // calculate the graying value\n","        int target = (int)(redWeight * r + greenWeight * g + blueWeight * b);\n","        // ensure the graying value are within the range\n","        target = Math.min(target, 255);\n","        return target;\n","    }\n","\n","    public static class Builder implements GenericBuilder<WeightGrayingStrategy> {\n","        private static final Range<Double> WEIGHT_RANGE = Range.ofDouble(0D, 1D);\n","\n","        private double redWeight = 0;\n","        private double greenWeight = 0;\n","\n","\n","        public Builder redWeight(double redWeight) {\n","            this.redWeight = redWeight;\n","            return this;\n","        }\n","        public Builder greenWeight(double greenWeight) {\n","            this.greenWeight = greenWeight;\n","            return this;\n","        }\n","\n","        @Override\n","        public WeightGrayingStrategy build() {\n","            // the default weight allocate rule is: Red = 0.3, Green = 0.59, Blue = 0.11\n","            if (redWeight == 0 && greenWeight == 0) {\n","                redWeight = 0.3D;\n","                greenWeight = 0.59D;\n","            }\n","            // check whether the setting is completed\n","            if (redWeight == 0 || greenWeight == 0) {\n","                throw new InvalidSettingException(MessageFormat.format(\"{0} weight not set.\",\n","                        redWeight == 0 ? \"Red\" : \"Green\"));\n","            }\n","            // check whether the setting is correct\n","            if (WEIGHT_RANGE.notWithin(redWeight)) {\n","                throw new InvalidSettingException(MessageFormat.format(\"Red weight out of bounds:[{0}, {1}].\",\n","                        WEIGHT_RANGE.getMin(), WEIGHT_RANGE.getMax()));\n","            }\n","            if (WEIGHT_RANGE.notWithin(greenWeight)) {\n","                throw new InvalidSettingException(MessageFormat.format(\"Green weight out of bounds:[{0}, {1}].\",\n","                        WEIGHT_RANGE.getMin(), WEIGHT_RANGE.getMax()));\n","            }\n","            if (redWeight + greenWeight > 1.0) {\n","                throw new InvalidSettingException(\"The sum of red weight and green weight has exceeded 1.\");\n","            }\n","            return new WeightGrayingStrategy(this);\n","        }\n","    }\n","}\n"],"test_content":["package cn.t8s.mode.graying;\n","\n","import cn.core.ex.InvalidSettingException;\n","import cn.t8s.ReflectionUtils;\n","import org.junit.Assert;\n","import org.junit.Test;\n","\n","public class WeightGrayingStrategyTest {\n","\n","    @Test\n","    public void test_getGraynessValue() {\n","        // given\n","        int red = 67, green = 255, blue = 184;\n","        double redWeight = 0.35, greenWeight = 0.25;\n","\n","        // when\n","        WeightGrayingStrategy strategy = new WeightGrayingStrategy.Builder()\n","                .redWeight(redWeight)\n","                .greenWeight(greenWeight)\n","                .build();\n","        int graynessValue = strategy.getGraynessValue(red, green, blue);\n","\n","        // then\n","        double blueWeight = 1.0 - redWeight - greenWeight;\n","        double val = (red * redWeight) + (green * greenWeight) + (blue * blueWeight);\n","\n","        Assert.assertEquals((int) val, graynessValue);\n","    }\n","\n","    public static class BuilderTest {\n","\n","        @Test\n","        public void test_build_correctUsage() {\n","            // given\n","            double redWeight = 0.35, greenWeight = 0.25;\n","\n","            // when\n","            WeightGrayingStrategy strategy = new WeightGrayingStrategy.Builder()\n","                    .redWeight(redWeight)\n","                    .greenWeight(greenWeight)\n","                    .build();\n","\n","            // then\n","            Assert.assertEquals(redWeight, ReflectionUtils.get(\"redWeight\", strategy));\n","            Assert.assertEquals(greenWeight, ReflectionUtils.get(\"greenWeight\", strategy));\n","        }\n","\n","        @Test\n","        public void test_build_defaultParam() {\n","            // when\n","            WeightGrayingStrategy strategy = new WeightGrayingStrategy.Builder()\n","                    .build();\n","\n","            // then\n","            Assert.assertEquals(0.3D, ReflectionUtils.get(\"redWeight\", strategy));\n","            Assert.assertEquals(0.59D, ReflectionUtils.get(\"greenWeight\", strategy));\n","        }\n","\n","        @Test\n","        public void testEx_build_nullParam() {\n","            // null red weight\n","            WeightGrayingStrategy.Builder builder1 = new WeightGrayingStrategy.Builder()\n","                    .greenWeight(0.5);\n","            InvalidSettingException e1 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder1::build);\n","            Assert.assertEquals(\"Red weight not set.\", e1.getMessage());\n","\n","            // null green weight\n","            WeightGrayingStrategy.Builder builder2 = new WeightGrayingStrategy.Builder()\n","                    .redWeight(0.5);\n","            InvalidSettingException e2 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder2::build);\n","            Assert.assertEquals(\"Green weight not set.\", e2.getMessage());\n","        }\n","\n","        @Test\n","        public void testEx_build_invalidParam() {\n","            // red weight out of bound\n","            WeightGrayingStrategy.Builder builder1 = new WeightGrayingStrategy.Builder()\n","                    .redWeight(1.5)\n","                    .greenWeight(0.2);\n","            InvalidSettingException e1 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder1::build);\n","            Assert.assertEquals(\"Red weight out of bounds:[0, 1].\", e1.getMessage());\n","\n","            // green weight out of bound\n","            WeightGrayingStrategy.Builder builder2 = new WeightGrayingStrategy.Builder()\n","                    .redWeight(0.5)\n","                    .greenWeight(1.2);\n","            InvalidSettingException e2 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder2::build);\n","            Assert.assertEquals(\"Green weight out of bounds:[0, 1].\", e2.getMessage());\n","\n","            // the sum of the two weight is greater than 1\n","            WeightGrayingStrategy.Builder builder3 = new WeightGrayingStrategy.Builder()\n","                    .redWeight(0.5)\n","                    .greenWeight(0.51);\n","            InvalidSettingException e3 = Assert.assertThrows(InvalidSettingException.class,\n","                    builder3::build);\n","            Assert.assertEquals(\"The sum of red weight and green weight has exceeded 1.\", e3.getMessage());\n","        }\n","    }\n","}"],"method_lines_dic":{"WeightGrayingStrategy::::getGraynessValue(int,int,int)":[33,41],"WeightGrayingStrategy.Builder::::redWeight(double)":[50,53],"WeightGrayingStrategy.Builder::::greenWeight(double)":[54,57],"WeightGrayingStrategy.Builder::::build()":[59,84]},"test_method_lines_dic":{"WeightGrayingStrategyTest::::test_getGraynessValue()":[10,28],"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()":[32,46],"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()":[48,57],"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()":[59,74],"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()":[76,101]},"reverse_method_lines_dic":{"33":"WeightGrayingStrategy::::getGraynessValue(int,int,int)","34":"WeightGrayingStrategy::::getGraynessValue(int,int,int)","35":"WeightGrayingStrategy::::getGraynessValue(int,int,int)","36":"WeightGrayingStrategy::::getGraynessValue(int,int,int)","37":"WeightGrayingStrategy::::getGraynessValue(int,int,int)","38":"WeightGrayingStrategy::::getGraynessValue(int,int,int)","39":"WeightGrayingStrategy::::getGraynessValue(int,int,int)","40":"WeightGrayingStrategy::::getGraynessValue(int,int,int)","41":"WeightGrayingStrategy::::getGraynessValue(int,int,int)","50":"WeightGrayingStrategy.Builder::::redWeight(double)","51":"WeightGrayingStrategy.Builder::::redWeight(double)","52":"WeightGrayingStrategy.Builder::::redWeight(double)","53":"WeightGrayingStrategy.Builder::::redWeight(double)","54":"WeightGrayingStrategy.Builder::::greenWeight(double)","55":"WeightGrayingStrategy.Builder::::greenWeight(double)","56":"WeightGrayingStrategy.Builder::::greenWeight(double)","57":"WeightGrayingStrategy.Builder::::greenWeight(double)","59":"WeightGrayingStrategy.Builder::::build()","60":"WeightGrayingStrategy.Builder::::build()","61":"WeightGrayingStrategy.Builder::::build()","62":"WeightGrayingStrategy.Builder::::build()","63":"WeightGrayingStrategy.Builder::::build()","64":"WeightGrayingStrategy.Builder::::build()","65":"WeightGrayingStrategy.Builder::::build()","66":"WeightGrayingStrategy.Builder::::build()","67":"WeightGrayingStrategy.Builder::::build()","68":"WeightGrayingStrategy.Builder::::build()","69":"WeightGrayingStrategy.Builder::::build()","70":"WeightGrayingStrategy.Builder::::build()","71":"WeightGrayingStrategy.Builder::::build()","72":"WeightGrayingStrategy.Builder::::build()","73":"WeightGrayingStrategy.Builder::::build()","74":"WeightGrayingStrategy.Builder::::build()","75":"WeightGrayingStrategy.Builder::::build()","76":"WeightGrayingStrategy.Builder::::build()","77":"WeightGrayingStrategy.Builder::::build()","78":"WeightGrayingStrategy.Builder::::build()","79":"WeightGrayingStrategy.Builder::::build()","80":"WeightGrayingStrategy.Builder::::build()","81":"WeightGrayingStrategy.Builder::::build()","82":"WeightGrayingStrategy.Builder::::build()","83":"WeightGrayingStrategy.Builder::::build()","84":"WeightGrayingStrategy.Builder::::build()"},"test_reverse_method_lines_dic":{"10":"WeightGrayingStrategyTest::::test_getGraynessValue()","11":"WeightGrayingStrategyTest::::test_getGraynessValue()","12":"WeightGrayingStrategyTest::::test_getGraynessValue()","13":"WeightGrayingStrategyTest::::test_getGraynessValue()","14":"WeightGrayingStrategyTest::::test_getGraynessValue()","15":"WeightGrayingStrategyTest::::test_getGraynessValue()","16":"WeightGrayingStrategyTest::::test_getGraynessValue()","17":"WeightGrayingStrategyTest::::test_getGraynessValue()","18":"WeightGrayingStrategyTest::::test_getGraynessValue()","19":"WeightGrayingStrategyTest::::test_getGraynessValue()","20":"WeightGrayingStrategyTest::::test_getGraynessValue()","21":"WeightGrayingStrategyTest::::test_getGraynessValue()","22":"WeightGrayingStrategyTest::::test_getGraynessValue()","23":"WeightGrayingStrategyTest::::test_getGraynessValue()","24":"WeightGrayingStrategyTest::::test_getGraynessValue()","25":"WeightGrayingStrategyTest::::test_getGraynessValue()","26":"WeightGrayingStrategyTest::::test_getGraynessValue()","27":"WeightGrayingStrategyTest::::test_getGraynessValue()","28":"WeightGrayingStrategyTest::::test_getGraynessValue()","32":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","33":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","34":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","35":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","36":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","37":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","38":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","39":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","40":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","41":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","42":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","43":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","44":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","45":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","46":"WeightGrayingStrategyTest.BuilderTest::::test_build_correctUsage()","48":"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()","49":"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()","50":"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()","51":"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()","52":"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()","53":"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()","54":"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()","55":"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()","56":"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()","57":"WeightGrayingStrategyTest.BuilderTest::::test_build_defaultParam()","59":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","60":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","61":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","62":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","63":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","64":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","65":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","66":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","67":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","68":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","69":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","70":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","71":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","72":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","73":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","74":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_nullParam()","76":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","77":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","78":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","79":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","80":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","81":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","82":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","83":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","84":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","85":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","86":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","87":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","88":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","89":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","90":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","91":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","92":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","93":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","94":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","95":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","96":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","97":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","98":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","99":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","100":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()","101":"WeightGrayingStrategyTest.BuilderTest::::testEx_build_invalidParam()"},"tests":[{"test_lines":[10,28],"covered_lines":[28,29,30,31,35,37,39,40,43,44,46,47,51,52,55,56,62,67,72,76,80,83],"label":"WeightGrayingStrategy::::getGraynessValue(int,int,int)"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/mode/graying/AvgGrayingStrategy.java":{"class_content":["package cn.t8s.mode.graying;\n","\n","import cn.core.strategy.mode.AbstractGrayingStrategy;\n","\n","/**\n"," * An average graying strategy. The gray value of any pixel is equal to the average value\n"," * of the red component, green component and blue component.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class AvgGrayingStrategy extends AbstractGrayingStrategy {\n","    @Override\n","    public int getGraynessValue(int r, int g, int b) {\n","        return (r + g + b) / 3;\n","    }\n","}\n"],"test_content":["package cn.t8s.mode.graying;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","\n","public class AvgGrayingStrategyTest {\n","\n","    @Test\n","    public void test_getGraynessValue() {\n","        // given\n","        int red = 67, green = 255, blue = 184;\n","\n","        // when\n","        AvgGrayingStrategy strategy = new AvgGrayingStrategy();\n","        int graynessValue = strategy.getGraynessValue(red, green, blue);\n","\n","        // then\n","        int avg = (67 + 255 + 184) / 3;\n","        Assert.assertEquals(avg, graynessValue);\n","    }\n","}\n"],"method_lines_dic":{"AvgGrayingStrategy::::getGraynessValue(int,int,int)":[13,16]},"test_method_lines_dic":{"AvgGrayingStrategyTest::::test_getGraynessValue()":[8,20]},"reverse_method_lines_dic":{"13":"AvgGrayingStrategy::::getGraynessValue(int,int,int)","14":"AvgGrayingStrategy::::getGraynessValue(int,int,int)","15":"AvgGrayingStrategy::::getGraynessValue(int,int,int)","16":"AvgGrayingStrategy::::getGraynessValue(int,int,int)"},"test_reverse_method_lines_dic":{"8":"AvgGrayingStrategyTest::::test_getGraynessValue()","9":"AvgGrayingStrategyTest::::test_getGraynessValue()","10":"AvgGrayingStrategyTest::::test_getGraynessValue()","11":"AvgGrayingStrategyTest::::test_getGraynessValue()","12":"AvgGrayingStrategyTest::::test_getGraynessValue()","13":"AvgGrayingStrategyTest::::test_getGraynessValue()","14":"AvgGrayingStrategyTest::::test_getGraynessValue()","15":"AvgGrayingStrategyTest::::test_getGraynessValue()","16":"AvgGrayingStrategyTest::::test_getGraynessValue()","17":"AvgGrayingStrategyTest::::test_getGraynessValue()","18":"AvgGrayingStrategyTest::::test_getGraynessValue()","19":"AvgGrayingStrategyTest::::test_getGraynessValue()","20":"AvgGrayingStrategyTest::::test_getGraynessValue()"},"tests":[{"test_lines":[8,20],"covered_lines":[12,15],"label":"AvgGrayingStrategy::::getGraynessValue(int,int,int)"}]},"/bernard/dataset_construction/prep/repos/imglib/ext-t8s/src/main/java/cn/t8s/mode/graying/MaxGrayingStrategy.java":{"class_content":["package cn.t8s.mode.graying;\n","\n","import cn.core.strategy.mode.AbstractGrayingStrategy;\n","\n","/**\n"," * A maximum graying strategy. The gray value of any pixel is equal to the maximum value of\n"," * the red component, green component and blue component.\n"," *\n"," * @author tracy\n"," * @since 0.2.1\n"," */\n","public class MaxGrayingStrategy extends AbstractGrayingStrategy {\n","    @Override\n","    public int getGraynessValue(int r, int g, int b) {\n","        return Math.max(Math.max(r, g), b);\n","    }\n","}\n"],"test_content":["package cn.t8s.mode.graying;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","\n","public class MaxGrayingStrategyTest {\n","\n","    @Test\n","    public void test_getGraynessValue() {\n","        // given\n","        int red = 67, green = 255, blue = 184;\n","\n","        // when\n","        MaxGrayingStrategy strategy = new MaxGrayingStrategy();\n","        int graynessValue = strategy.getGraynessValue(red, green, blue);\n","\n","        // then\n","        Assert.assertEquals(255, graynessValue);\n","    }\n","}"],"method_lines_dic":{"MaxGrayingStrategy::::getGraynessValue(int,int,int)":[13,16]},"test_method_lines_dic":{"MaxGrayingStrategyTest::::test_getGraynessValue()":[8,19]},"reverse_method_lines_dic":{"13":"MaxGrayingStrategy::::getGraynessValue(int,int,int)","14":"MaxGrayingStrategy::::getGraynessValue(int,int,int)","15":"MaxGrayingStrategy::::getGraynessValue(int,int,int)","16":"MaxGrayingStrategy::::getGraynessValue(int,int,int)"},"test_reverse_method_lines_dic":{"8":"MaxGrayingStrategyTest::::test_getGraynessValue()","9":"MaxGrayingStrategyTest::::test_getGraynessValue()","10":"MaxGrayingStrategyTest::::test_getGraynessValue()","11":"MaxGrayingStrategyTest::::test_getGraynessValue()","12":"MaxGrayingStrategyTest::::test_getGraynessValue()","13":"MaxGrayingStrategyTest::::test_getGraynessValue()","14":"MaxGrayingStrategyTest::::test_getGraynessValue()","15":"MaxGrayingStrategyTest::::test_getGraynessValue()","16":"MaxGrayingStrategyTest::::test_getGraynessValue()","17":"MaxGrayingStrategyTest::::test_getGraynessValue()","18":"MaxGrayingStrategyTest::::test_getGraynessValue()","19":"MaxGrayingStrategyTest::::test_getGraynessValue()"},"tests":[{"test_lines":[8,19],"covered_lines":[12,15]}]}}