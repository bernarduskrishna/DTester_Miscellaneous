{
  "/bernard/dataset_construction/prep/repos/imglib/all/src/main/java/cn/usage/AbstractSourceBuilder.java": {
    "class_content": [
      "package cn.usage;\n",
      "\n",
      "import cn.core.BufferedImageEncoder;\n",
      "import cn.core.PipeFilter;\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.ex.UnsupportedFormatException;\n",
      "import cn.core.utils.BufferedImageUtils;\n",
      "import cn.core.utils.CollectionUtils;\n",
      "import cn.core.utils.ObjectUtils;\n",
      "import cn.core.utils.StringUtils;\n",
      "import net.coobird.thumbnailator.Thumbnails;\n",
      "import javax.imageio.ImageIO;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.File;\n",
      "import java.io.IOException;\n",
      "import java.io.OutputStream;\n",
      "import java.util.*;\n",
      "\n",
      "/**\n",
      " * An abstract superclass of source builder.\n",
      " *\n",
      " * @param <T> The type of children.\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "@SuppressWarnings(\"unchecked\")\n",
      "public abstract class AbstractSourceBuilder<T> {\n",
      "\n",
      "    public static final String NULL_FILTER = \"PipeFilter is null.\";\n",
      "    private final T typeThis = (T) this;\n",
      "    protected List<PipeFilter> filters = new ArrayList<>();\n",
      "\n",
      "    /**\n",
      "     * The output format name.\n",
      "     */\n",
      "    protected String formatName;\n",
      "\n",
      "    /**\n",
      "     * Set the output format name.\n",
      "     * @param formatName The format name.\n",
      "     * @return The object of children.\n",
      "     */\n",
      "    public T formatName(String formatName) {\n",
      "        if (StringUtils.isEmpty(formatName)) {\n",
      "            throw new InvalidSettingException(\"Format name can not be null.\");\n",
      "        }\n",
      "        this.formatName = formatName;\n",
      "        return typeThis;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Add a filter to the end of the pipe.\n",
      "     *\n",
      "     * @param ypf The filter that to add.\n",
      "     * @return The object of children.\n",
      "     */\n",
      "    public T addFilter(PipeFilter ypf) {\n",
      "        ObjectUtils.excNull(ypf, NULL_FILTER);\n",
      "        filters.add(ypf);\n",
      "        return typeThis;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Add filters to the end of the pipe.\n",
      "     *\n",
      "     * @param ypf The filters that to add.\n",
      "     * @return The object of children.\n",
      "     */\n",
      "    public T addFilter(PipeFilter... ypf) {\n",
      "        CollectionUtils.excEmpty(ypf, \"No PipeFilter need to be added.\");\n",
      "        filters.addAll(Arrays.asList(ypf));\n",
      "        return typeThis;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Remove a filter from the pipe.\n",
      "     *\n",
      "     * @param ypf The filters that to remove.\n",
      "     * @return The object of children.\n",
      "     */\n",
      "    public T removeFilter(PipeFilter ypf) {\n",
      "        ObjectUtils.excNull(ypf, NULL_FILTER);\n",
      "        filters.remove(ypf);\n",
      "        return typeThis;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Obtain the buffered image.\n",
      "     *\n",
      "     * @return The buffered image.\n",
      "     * @throws IOException If some I/O exceptions occurred.\n",
      "     * @throws HandlingException If there is no image or multiple images in the pipe.\n",
      "     */\n",
      "    public BufferedImage obtainBufferedImage() throws IOException {\n",
      "        List<BufferedImage> images = obtainBufferedImages();\n",
      "        if (CollectionUtils.isNullOrEmpty(images)) {\n",
      "            throw new HandlingException(\"No images was found.\");\n",
      "        }\n",
      "        if (images.size() > 1) {\n",
      "            throw new HandlingException(\"Cannot create an image from multiple original image sources.\");\n",
      "        }\n",
      "        return images.get(0);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Obtain all buffered images.\n",
      "     *\n",
      "     * @return The buffered images.\n",
      "     * @throws IOException If some I/O exceptions occurred.\n",
      "     * @throws HandlingException If there is no image in the pipe.\n",
      "     */\n",
      "    public List<BufferedImage> obtainBufferedImages() throws IOException {\n",
      "        List<BufferedImage> sourceImages = obtainSourceImages();\n",
      "        if (CollectionUtils.isNullOrEmpty(sourceImages)) {\n",
      "            throw new HandlingException(\"No images was found.\");\n",
      "        }\n",
      "        // execute all filters\n",
      "        List<BufferedImage> targetImages = sourceImages;\n",
      "        for (PipeFilter ypf : filters) {\n",
      "            targetImages = ypf.execute(sourceImages);\n",
      "            sourceImages = targetImages;\n",
      "        }\n",
      "        return targetImages;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get all images from image sources.\n",
      "     *\n",
      "     * @return The images after loaded from sources.\n",
      "     * @throws IOException If some I/O exceptions occurred when loading sources.\n",
      "     */\n",
      "    protected abstract List<BufferedImage> obtainSourceImages() throws IOException;\n",
      "\n",
      "\n",
      "    public Thumbnails.Builder<BufferedImage> toThumbnails() throws IOException {\n",
      "        BufferedImage[] images = obtainBufferedImages().toArray(new BufferedImage[0]);\n",
      "        return Thumbnails.of(images);\n",
      "    }\n",
      "\n",
      "    public void toFile(BufferedImageEncoder encoder) throws IOException {\n",
      "        if (encoder.supportMultiple()) {\n",
      "            encoder.encode(obtainBufferedImages());\n",
      "        } else {\n",
      "            encoder.encode(Collections.singletonList(obtainBufferedImage()));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void toFile(File dest) throws IOException {\n",
      "        BufferedImage image = obtainBufferedImage();\n",
      "        writeFile(image, dest);\n",
      "    }\n",
      "\n",
      "    public void toFile(String fn) throws IOException {\n",
      "        toFile(new File(fn));\n",
      "    }\n",
      "\n",
      "    public void toFiles(Iterable<File> iterable) throws IOException {\n",
      "        ObjectUtils.excNull(iterable, \"File iterable is null.\");\n",
      "\n",
      "        List<BufferedImage> images = obtainBufferedImages();\n",
      "        Iterator<File> iter = iterable.iterator();\n",
      "        for (BufferedImage o : images) {\n",
      "            if (!iter.hasNext()) {\n",
      "                throw new IndexOutOfBoundsException(\"Not enough File provided by iterable.\");\n",
      "            }\n",
      "            writeFile(o, iter.next());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void toFiles(String... filenames) throws IOException {\n",
      "        if (CollectionUtils.isNullOrEmpty(filenames)) {\n",
      "            throw new NullPointerException(\"File names is null.\");\n",
      "        }\n",
      "\n",
      "        List<BufferedImage> images = obtainBufferedImages();\n",
      "        if (images.size() > filenames.length) {\n",
      "            throw new IndexOutOfBoundsException(\"Not enough file name provided by iterator.\");\n",
      "        }\n",
      "        for (int i = 0; i < filenames.length; i++) {\n",
      "            writeFile(images.get(i), new File(filenames[i]));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void toOutputStream(OutputStream os) throws IOException {\n",
      "        writeStream(obtainBufferedImage(), os);\n",
      "    }\n",
      "\n",
      "    public void toOutputStreams(Iterable<OutputStream> iterable) throws IOException {\n",
      "        ObjectUtils.excNull(iterable, \"OutputStream iterable is null.\");\n",
      "\n",
      "        List<BufferedImage> images = obtainBufferedImages();\n",
      "        Iterator<OutputStream> iter = iterable.iterator();\n",
      "        for (BufferedImage o : images) {\n",
      "            if (!iter.hasNext()) {\n",
      "                throw new IndexOutOfBoundsException(\"Not enough OutputStream provided by iterable.\");\n",
      "            }\n",
      "            writeStream(o, iter.next());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    protected void writeFile(BufferedImage image, File file) throws IOException {\n",
      "        File f = choseFormat(file);\n",
      "        BufferedImageUtils.write(image, formatName, f);\n",
      "    }\n",
      "\n",
      "    protected void writeStream(BufferedImage image, OutputStream os) throws IOException {\n",
      "        if (StringUtils.isEmpty(formatName)) {\n",
      "            throw new HandlingException(\"The output format is not set.\");\n",
      "        }\n",
      "        if (!ImageIO.write(image, formatName, os)) {\n",
      "            throw new UnsupportedFormatException(String\n",
      "                    .format(\"No appropriate writer is found for: %s.\", formatName));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Select a format for this input file.\n",
      "     *\n",
      "     * <li>Use the original input file when {@link AbstractSourceBuilder#formatName}\n",
      "     * is null and input file contains a extension.</li>\n",
      "     *\n",
      "     * <li>Append {@link AbstractSourceBuilder#formatName} to path of input file when\n",
      "     * {@link AbstractSourceBuilder#formatName} is not null.</li>\n",
      "     *\n",
      "     * <DD>\n",
      "     *     May get an unexpected file path when {@link AbstractSourceBuilder#formatName}\n",
      "     *     is not null and input file contains a extension.\n",
      "     *     <pre>\n",
      "     *         ...\n",
      "     *         .formatName(\"png\")\n",
      "     *         .toFile(\"/test.jpg\");\n",
      "     *     </pre>\n",
      "     *     Then, we will get a file name of <code>test.jpg.png</code>.\n",
      "     *     <br>\n",
      "     *     Otherwise, a similar situation will occur when exporting to various files.\n",
      "     *     <pre>\n",
      "     *         ...\n",
      "     *         .toFiles(\"test1.png\", \"test2.jpg\", \"test3.bmp\");\n",
      "     *     </pre>\n",
      "     *     Then, we will get a list files name of <code>test1.png</code>,\n",
      "     *     <code>test2.jpg.png</code>, <code>test3.bmp.png</code>.\n",
      "     * </DD>\n",
      "     *\n",
      "     * @param f The file object of input.\n",
      "     * @return The final file object, maybe after adjust.\n",
      "     * @throws InvalidSettingException When {@link AbstractSourceBuilder#formatName}\n",
      "     * is null and input file not contains an extension.\n",
      "     */\n",
      "    private File choseFormat(File f) {\n",
      "        ObjectUtils.excNull(f, \"Output file is null.\");\n",
      "        String extension = StringUtils.getExtensionName(f);\n",
      "\n",
      "        if (StringUtils.isEmpty(formatName)) {\n",
      "            if (StringUtils.isEmpty(extension)) {\n",
      "                throw new HandlingException(\"No output format was specified.\");\n",
      "            }\n",
      "            // initial the output format name\n",
      "            formatName = extension;\n",
      "        } else {\n",
      "            // adjust the output file's if necessary\n",
      "            if (!extension.equalsIgnoreCase(formatName)) {\n",
      "                String newFilename = f.getAbsolutePath() + \".\" + formatName;\n",
      "                return new File(newFilename);\n",
      "            }\n",
      "        }\n",
      "        return f;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package cn.usage;\n",
      "\n",
      "import cn.core.PipeFilter;\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.utils.BufferedImageUtils;\n",
      "import cn.pipe.ypipe.merge.GridMergeHandler;\n",
      "import cn.pipe.ypipe.split.GridSplitHandler;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import java.awt.*;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "@SuppressWarnings(\"unchecked\")\n",
      "public class AbstractSourceBuilderTest {\n",
      "\n",
      "    /**\n",
      "     * A source builder that can batch create images.\n",
      "     * <br>\n",
      "     * For testing only.\n",
      "     */\n",
      "    public static final class BatchSourceBuilder extends AbstractSourceBuilder<BatchSourceBuilder> {\n",
      "        private final int count;\n",
      "        public BatchSourceBuilder() {\n",
      "            this(1);\n",
      "        }\n",
      "        public BatchSourceBuilder(int count) {\n",
      "            this.count = count;\n",
      "        }\n",
      "        @Override\n",
      "        protected List<BufferedImage> obtainSourceImages() throws IOException {\n",
      "            List<BufferedImage> images = new ArrayList<>();\n",
      "            if (count > 0) {\n",
      "                for (int i = 0; i < count; i++) {\n",
      "                    images.add(BufferedImageUtils.newColoredImage(30, 45, 1.0f, Color.WHITE));\n",
      "                }\n",
      "            }\n",
      "            return images;\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    private AbstractSourceBuilder<BatchSourceBuilder> builder;\n",
      "    @Before\n",
      "    public void init() {\n",
      "        builder = new BatchSourceBuilder();\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void test_formatName() {\n",
      "        // given\n",
      "        String format = \"png\";\n",
      "\n",
      "        // when\n",
      "        builder.formatName(format);\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(format, ReflectionUtils.getFromSuper(\"formatName\", builder));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_formatName_empty() {\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> builder.formatName(\"\"));\n",
      "        Assert.assertEquals(\"Format name can not be null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_addFilter_single() {\n",
      "        // given\n",
      "        PipeFilter filter = new GridSplitHandler.Builder()\n",
      "                .gridWidth(20).gridHeight(20)\n",
      "                .build();\n",
      "\n",
      "        // when\n",
      "        builder.addFilter(filter);\n",
      "\n",
      "        // then\n",
      "        List<PipeFilter> filters = (List<PipeFilter>) ReflectionUtils.getFromSuper(\"filters\", builder);\n",
      "        Assert.assertEquals(1, filters.size());\n",
      "        Assert.assertEquals(filter, filters.get(0));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_addFilter_single_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> builder.addFilter((PipeFilter) null));\n",
      "        Assert.assertEquals(\"PipeFilter is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_addFilter_array() {\n",
      "        // given\n",
      "        PipeFilter filter = new GridSplitHandler.Builder()\n",
      "                .gridWidth(20).gridHeight(20)\n",
      "                .build();\n",
      "\n",
      "        // when\n",
      "        builder.addFilter(filter, filter);\n",
      "\n",
      "        // then\n",
      "        List<PipeFilter> filters = (List<PipeFilter>) ReflectionUtils.getFromSuper(\"filters\", builder);\n",
      "\n",
      "        Assert.assertEquals(2, filters.size());\n",
      "        Assert.assertEquals(filter, filters.get(0));\n",
      "        Assert.assertEquals(filter, filters.get(1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_addFilter_array_empty() {\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> builder.addFilter());\n",
      "        Assert.assertEquals(\"No PipeFilter need to be added.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_removeFilter() {\n",
      "        // given\n",
      "        PipeFilter filter = new GridSplitHandler.Builder()\n",
      "                .gridWidth(20).gridHeight(20)\n",
      "                .build();\n",
      "        builder.addFilter(filter);\n",
      "\n",
      "        // when\n",
      "        List<PipeFilter> filters = (List<PipeFilter>) ReflectionUtils.getFromSuper(\"filters\", builder);\n",
      "        int beforeSize = filters.size();\n",
      "\n",
      "        builder.removeFilter(filter);\n",
      "        int afterSize = filters.size();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(1, beforeSize);\n",
      "        Assert.assertEquals(0, afterSize);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_removeFilter_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> builder.removeFilter((PipeFilter) null));\n",
      "        Assert.assertEquals(\"PipeFilter is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_obtainBufferedImage() throws IOException {\n",
      "        // when\n",
      "        BufferedImage target = builder.obtainBufferedImage();\n",
      "\n",
      "        // then\n",
      "        BufferedImage standard = BufferedImageUtils.newColoredImage(30, 45, 1.0f, Color.WHITE);\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(standard, target));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainBufferedImage_noImage() throws IOException {\n",
      "        /*\n",
      "         * The next BatchSourceBuilder will not get any images.\n",
      "         */\n",
      "        BatchSourceBuilder bsb = new BatchSourceBuilder(0);\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                bsb::obtainBufferedImage);\n",
      "        Assert.assertEquals(\"No images was found.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainBufferedImage_multipleImages() throws IOException {\n",
      "        /*\n",
      "         * The next BatchSourceBuilder will not get multiple images.\n",
      "         */\n",
      "        BatchSourceBuilder bsb = new BatchSourceBuilder(2);\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                bsb::obtainBufferedImage);\n",
      "        Assert.assertEquals(\"Cannot create an image from multiple original image sources.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_obtainBufferedImages() throws IOException {\n",
      "        // given\n",
      "        AbstractSourceBuilder<BatchSourceBuilder> asb = new BatchSourceBuilder(3);\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = asb.obtainBufferedImages();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(3, target.size());\n",
      "\n",
      "        BufferedImage standard = BufferedImageUtils.newColoredImage(30, 45, 1.0f, Color.WHITE);\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(standard, target.get(0)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(standard, target.get(1)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(standard, target.get(2)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainBufferedImages_noImage() throws IOException {\n",
      "        /*\n",
      "         * The next BatchSourceBuilder will not get any images.\n",
      "         */\n",
      "        BatchSourceBuilder bsb = new BatchSourceBuilder(0);\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                bsb::obtainBufferedImages);\n",
      "        Assert.assertEquals(\"No images was found.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_obtainBufferedImage_withMergeFilter() throws IOException {\n",
      "        // given\n",
      "        int grid_w = 50, grid_h = 60, h_num = 2;\n",
      "        GridMergeHandler handler = new GridMergeHandler.Builder()\n",
      "                .gridWidth(grid_w).gridHeight(grid_h)\n",
      "                .horizontalNum(h_num)\n",
      "                .fillColor(Color.BLUE)\n",
      "                .build();\n",
      "        BatchSourceBuilder bsb = new BatchSourceBuilder(3);\n",
      "\n",
      "        // when\n",
      "        BufferedImage target = bsb.addFilter(handler)\n",
      "                .obtainBufferedImage();\n",
      "\n",
      "        // then\n",
      "        BufferedImage standard = BufferedImageUtils.newColoredImage(30, 45, 1.0f, Color.WHITE);\n",
      "\n",
      "        // width = 50 * 2\n",
      "        // height = 60 * 2\n",
      "        BufferedImage image = BufferedImageUtils.newColoredImage(\n",
      "                grid_w * h_num, grid_h * h_num, 1.0f, Color.BLUE);\n",
      "        Graphics g = image.getGraphics();\n",
      "        g.drawImage(standard, 0, 0, null);\n",
      "        g.drawImage(standard, grid_w, 0, null);\n",
      "        g.drawImage(standard, 0, grid_h, null);\n",
      "        g.dispose();\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_obtainBufferedImages_withSplitFilter() throws IOException {\n",
      "        // given\n",
      "        int grid_w = 20, grid_h = 30;\n",
      "        GridSplitHandler handler = new GridSplitHandler.Builder()\n",
      "                .gridWidth(grid_w).gridHeight(grid_h)\n",
      "                .build();\n",
      "        // when\n",
      "        List<BufferedImage> target = builder.addFilter(handler)\n",
      "                .obtainBufferedImages();\n",
      "\n",
      "        // then\n",
      "        /*\n",
      "         * |-----------|-----------|\n",
      "         * |   20*30   |   10*30   |\n",
      "         * |-----------|-----------|\n",
      "         * |   20*15   |   10*15   |\n",
      "         * |-----------|-----------|\n",
      "         */\n",
      "        Assert.assertEquals(4, target.size());\n",
      "\n",
      "        BufferedImage standard = BufferedImageUtils.newColoredImage(30, 45, 1.0f, Color.WHITE);\n",
      "        BufferedImage image0 = standard.getSubimage(0, 0, 20, 30);\n",
      "        BufferedImage image1 = standard.getSubimage(20, 0, 10, 30);\n",
      "        BufferedImage image2 = standard.getSubimage(0, 30, 20, 15);\n",
      "        BufferedImage image3 = standard.getSubimage(20, 30, 10, 15);\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image0, target.get(0)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image1, target.get(1)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image2, target.get(2)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image3, target.get(3)));\n",
      "    }\n",
      "\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "AbstractSourceBuilder::::formatName(java.lang.String)": [
        44,
        50
      ],
      "AbstractSourceBuilder::::obtainBufferedImage()": [
        95,
        104
      ],
      "AbstractSourceBuilder::::obtainBufferedImages()": [
        113,
        125
      ],
      "AbstractSourceBuilder::::obtainSourceImages()": [
        133,
        133
      ],
      "AbstractSourceBuilder::::toThumbnails()": [
        136,
        139
      ],
      "AbstractSourceBuilder::::toFile(java.io.File)": [
        149,
        152
      ],
      "AbstractSourceBuilder::::toFile(java.lang.String)": [
        154,
        156
      ],
      "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)": [
        158,
        169
      ],
      "AbstractSourceBuilder::::toFiles(java.lang.String[])": [
        171,
        183
      ],
      "AbstractSourceBuilder::::toOutputStream(java.io.OutputStream)": [
        185,
        187
      ],
      "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)": [
        189,
        200
      ],
      "AbstractSourceBuilder::::writeFile(java.awt.image.BufferedImage,java.io.File)": [
        202,
        205
      ],
      "AbstractSourceBuilder::::writeStream(java.awt.image.BufferedImage,java.io.OutputStream)": [
        207,
        215
      ],
      "AbstractSourceBuilder::::choseFormat(java.io.File)": [
        250,
        268
      ]
    },
    "test_method_lines_dic": {
      "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()": [
        35,
        44
      ],
      "AbstractSourceBuilderTest::::init()": [
        49,
        52
      ],
      "AbstractSourceBuilderTest::::test_formatName()": [
        55,
        65
      ],
      "AbstractSourceBuilderTest::::testEx_formatName_empty()": [
        67,
        73
      ],
      "AbstractSourceBuilderTest::::test_addFilter_single()": [
        75,
        89
      ],
      "AbstractSourceBuilderTest::::testEx_addFilter_single_null()": [
        91,
        97
      ],
      "AbstractSourceBuilderTest::::test_addFilter_array()": [
        99,
        115
      ],
      "AbstractSourceBuilderTest::::testEx_addFilter_array_empty()": [
        117,
        123
      ],
      "AbstractSourceBuilderTest::::testEx_removeFilter()": [
        125,
        143
      ],
      "AbstractSourceBuilderTest::::testEx_removeFilter_null()": [
        145,
        151
      ],
      "AbstractSourceBuilderTest::::test_obtainBufferedImage()": [
        153,
        161
      ],
      "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()": [
        163,
        173
      ],
      "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()": [
        175,
        185
      ],
      "AbstractSourceBuilderTest::::test_obtainBufferedImages()": [
        187,
        202
      ],
      "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()": [
        204,
        214
      ],
      "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()": [
        216,
        245
      ],
      "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()": [
        247,
        278
      ]
    },
    "reverse_method_lines_dic": {
      "44": "AbstractSourceBuilder::::formatName(java.lang.String)",
      "45": "AbstractSourceBuilder::::formatName(java.lang.String)",
      "46": "AbstractSourceBuilder::::formatName(java.lang.String)",
      "47": "AbstractSourceBuilder::::formatName(java.lang.String)",
      "48": "AbstractSourceBuilder::::formatName(java.lang.String)",
      "49": "AbstractSourceBuilder::::formatName(java.lang.String)",
      "50": "AbstractSourceBuilder::::formatName(java.lang.String)",
      "95": "AbstractSourceBuilder::::obtainBufferedImage()",
      "96": "AbstractSourceBuilder::::obtainBufferedImage()",
      "97": "AbstractSourceBuilder::::obtainBufferedImage()",
      "98": "AbstractSourceBuilder::::obtainBufferedImage()",
      "99": "AbstractSourceBuilder::::obtainBufferedImage()",
      "100": "AbstractSourceBuilder::::obtainBufferedImage()",
      "101": "AbstractSourceBuilder::::obtainBufferedImage()",
      "102": "AbstractSourceBuilder::::obtainBufferedImage()",
      "103": "AbstractSourceBuilder::::obtainBufferedImage()",
      "104": "AbstractSourceBuilder::::obtainBufferedImage()",
      "113": "AbstractSourceBuilder::::obtainBufferedImages()",
      "114": "AbstractSourceBuilder::::obtainBufferedImages()",
      "115": "AbstractSourceBuilder::::obtainBufferedImages()",
      "116": "AbstractSourceBuilder::::obtainBufferedImages()",
      "117": "AbstractSourceBuilder::::obtainBufferedImages()",
      "118": "AbstractSourceBuilder::::obtainBufferedImages()",
      "119": "AbstractSourceBuilder::::obtainBufferedImages()",
      "120": "AbstractSourceBuilder::::obtainBufferedImages()",
      "121": "AbstractSourceBuilder::::obtainBufferedImages()",
      "122": "AbstractSourceBuilder::::obtainBufferedImages()",
      "123": "AbstractSourceBuilder::::obtainBufferedImages()",
      "124": "AbstractSourceBuilder::::obtainBufferedImages()",
      "125": "AbstractSourceBuilder::::obtainBufferedImages()",
      "133": "AbstractSourceBuilder::::obtainSourceImages()",
      "136": "AbstractSourceBuilder::::toThumbnails()",
      "137": "AbstractSourceBuilder::::toThumbnails()",
      "138": "AbstractSourceBuilder::::toThumbnails()",
      "139": "AbstractSourceBuilder::::toThumbnails()",
      "149": "AbstractSourceBuilder::::toFile(java.io.File)",
      "150": "AbstractSourceBuilder::::toFile(java.io.File)",
      "151": "AbstractSourceBuilder::::toFile(java.io.File)",
      "152": "AbstractSourceBuilder::::toFile(java.io.File)",
      "154": "AbstractSourceBuilder::::toFile(java.lang.String)",
      "155": "AbstractSourceBuilder::::toFile(java.lang.String)",
      "156": "AbstractSourceBuilder::::toFile(java.lang.String)",
      "158": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "159": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "160": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "161": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "162": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "163": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "164": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "165": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "166": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "167": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "168": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "169": "AbstractSourceBuilder::::toFiles(java.lang.Iterable<java.io.File>)",
      "171": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "172": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "173": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "174": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "175": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "176": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "177": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "178": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "179": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "180": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "181": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "182": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "183": "AbstractSourceBuilder::::toFiles(java.lang.String[])",
      "185": "AbstractSourceBuilder::::toOutputStream(java.io.OutputStream)",
      "186": "AbstractSourceBuilder::::toOutputStream(java.io.OutputStream)",
      "187": "AbstractSourceBuilder::::toOutputStream(java.io.OutputStream)",
      "189": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "190": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "191": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "192": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "193": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "194": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "195": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "196": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "197": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "198": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "199": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "200": "AbstractSourceBuilder::::toOutputStreams(java.lang.Iterable<java.io.OutputStream>)",
      "202": "AbstractSourceBuilder::::writeFile(java.awt.image.BufferedImage,java.io.File)",
      "203": "AbstractSourceBuilder::::writeFile(java.awt.image.BufferedImage,java.io.File)",
      "204": "AbstractSourceBuilder::::writeFile(java.awt.image.BufferedImage,java.io.File)",
      "205": "AbstractSourceBuilder::::writeFile(java.awt.image.BufferedImage,java.io.File)",
      "207": "AbstractSourceBuilder::::writeStream(java.awt.image.BufferedImage,java.io.OutputStream)",
      "208": "AbstractSourceBuilder::::writeStream(java.awt.image.BufferedImage,java.io.OutputStream)",
      "209": "AbstractSourceBuilder::::writeStream(java.awt.image.BufferedImage,java.io.OutputStream)",
      "210": "AbstractSourceBuilder::::writeStream(java.awt.image.BufferedImage,java.io.OutputStream)",
      "211": "AbstractSourceBuilder::::writeStream(java.awt.image.BufferedImage,java.io.OutputStream)",
      "212": "AbstractSourceBuilder::::writeStream(java.awt.image.BufferedImage,java.io.OutputStream)",
      "213": "AbstractSourceBuilder::::writeStream(java.awt.image.BufferedImage,java.io.OutputStream)",
      "214": "AbstractSourceBuilder::::writeStream(java.awt.image.BufferedImage,java.io.OutputStream)",
      "215": "AbstractSourceBuilder::::writeStream(java.awt.image.BufferedImage,java.io.OutputStream)",
      "250": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "251": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "252": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "253": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "254": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "255": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "256": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "257": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "258": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "259": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "260": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "261": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "262": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "263": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "264": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "265": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "266": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "267": "AbstractSourceBuilder::::choseFormat(java.io.File)",
      "268": "AbstractSourceBuilder::::choseFormat(java.io.File)"
    },
    "test_reverse_method_lines_dic": {
      "35": "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()",
      "36": "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()",
      "37": "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()",
      "38": "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()",
      "39": "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()",
      "40": "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()",
      "41": "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()",
      "42": "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()",
      "43": "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()",
      "44": "AbstractSourceBuilderTest.BatchSourceBuilder::::obtainSourceImages()",
      "49": "AbstractSourceBuilderTest::::init()",
      "50": "AbstractSourceBuilderTest::::init()",
      "51": "AbstractSourceBuilderTest::::init()",
      "52": "AbstractSourceBuilderTest::::init()",
      "55": "AbstractSourceBuilderTest::::test_formatName()",
      "56": "AbstractSourceBuilderTest::::test_formatName()",
      "57": "AbstractSourceBuilderTest::::test_formatName()",
      "58": "AbstractSourceBuilderTest::::test_formatName()",
      "59": "AbstractSourceBuilderTest::::test_formatName()",
      "60": "AbstractSourceBuilderTest::::test_formatName()",
      "61": "AbstractSourceBuilderTest::::test_formatName()",
      "62": "AbstractSourceBuilderTest::::test_formatName()",
      "63": "AbstractSourceBuilderTest::::test_formatName()",
      "64": "AbstractSourceBuilderTest::::test_formatName()",
      "65": "AbstractSourceBuilderTest::::test_formatName()",
      "67": "AbstractSourceBuilderTest::::testEx_formatName_empty()",
      "68": "AbstractSourceBuilderTest::::testEx_formatName_empty()",
      "69": "AbstractSourceBuilderTest::::testEx_formatName_empty()",
      "70": "AbstractSourceBuilderTest::::testEx_formatName_empty()",
      "71": "AbstractSourceBuilderTest::::testEx_formatName_empty()",
      "72": "AbstractSourceBuilderTest::::testEx_formatName_empty()",
      "73": "AbstractSourceBuilderTest::::testEx_formatName_empty()",
      "75": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "76": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "77": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "78": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "79": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "80": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "81": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "82": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "83": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "84": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "85": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "86": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "87": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "88": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "89": "AbstractSourceBuilderTest::::test_addFilter_single()",
      "91": "AbstractSourceBuilderTest::::testEx_addFilter_single_null()",
      "92": "AbstractSourceBuilderTest::::testEx_addFilter_single_null()",
      "93": "AbstractSourceBuilderTest::::testEx_addFilter_single_null()",
      "94": "AbstractSourceBuilderTest::::testEx_addFilter_single_null()",
      "95": "AbstractSourceBuilderTest::::testEx_addFilter_single_null()",
      "96": "AbstractSourceBuilderTest::::testEx_addFilter_single_null()",
      "97": "AbstractSourceBuilderTest::::testEx_addFilter_single_null()",
      "99": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "100": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "101": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "102": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "103": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "104": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "105": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "106": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "107": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "108": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "109": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "110": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "111": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "112": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "113": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "114": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "115": "AbstractSourceBuilderTest::::test_addFilter_array()",
      "117": "AbstractSourceBuilderTest::::testEx_addFilter_array_empty()",
      "118": "AbstractSourceBuilderTest::::testEx_addFilter_array_empty()",
      "119": "AbstractSourceBuilderTest::::testEx_addFilter_array_empty()",
      "120": "AbstractSourceBuilderTest::::testEx_addFilter_array_empty()",
      "121": "AbstractSourceBuilderTest::::testEx_addFilter_array_empty()",
      "122": "AbstractSourceBuilderTest::::testEx_addFilter_array_empty()",
      "123": "AbstractSourceBuilderTest::::testEx_addFilter_array_empty()",
      "125": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "126": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "127": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "128": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "129": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "130": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "131": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "132": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "133": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "134": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "135": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "136": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "137": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "138": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "139": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "140": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "141": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "142": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "143": "AbstractSourceBuilderTest::::testEx_removeFilter()",
      "145": "AbstractSourceBuilderTest::::testEx_removeFilter_null()",
      "146": "AbstractSourceBuilderTest::::testEx_removeFilter_null()",
      "147": "AbstractSourceBuilderTest::::testEx_removeFilter_null()",
      "148": "AbstractSourceBuilderTest::::testEx_removeFilter_null()",
      "149": "AbstractSourceBuilderTest::::testEx_removeFilter_null()",
      "150": "AbstractSourceBuilderTest::::testEx_removeFilter_null()",
      "151": "AbstractSourceBuilderTest::::testEx_removeFilter_null()",
      "153": "AbstractSourceBuilderTest::::test_obtainBufferedImage()",
      "154": "AbstractSourceBuilderTest::::test_obtainBufferedImage()",
      "155": "AbstractSourceBuilderTest::::test_obtainBufferedImage()",
      "156": "AbstractSourceBuilderTest::::test_obtainBufferedImage()",
      "157": "AbstractSourceBuilderTest::::test_obtainBufferedImage()",
      "158": "AbstractSourceBuilderTest::::test_obtainBufferedImage()",
      "159": "AbstractSourceBuilderTest::::test_obtainBufferedImage()",
      "160": "AbstractSourceBuilderTest::::test_obtainBufferedImage()",
      "161": "AbstractSourceBuilderTest::::test_obtainBufferedImage()",
      "163": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "164": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "165": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "166": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "167": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "168": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "169": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "170": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "171": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "172": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "173": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_noImage()",
      "175": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "176": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "177": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "178": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "179": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "180": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "181": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "182": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "183": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "184": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "185": "AbstractSourceBuilderTest::::testEx_obtainBufferedImage_multipleImages()",
      "187": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "188": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "189": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "190": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "191": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "192": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "193": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "194": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "195": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "196": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "197": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "198": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "199": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "200": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "201": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "202": "AbstractSourceBuilderTest::::test_obtainBufferedImages()",
      "204": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "205": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "206": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "207": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "208": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "209": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "210": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "211": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "212": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "213": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "214": "AbstractSourceBuilderTest::::testEx_obtainBufferedImages_noImage()",
      "216": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "217": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "218": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "219": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "220": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "221": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "222": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "223": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "224": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "225": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "226": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "227": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "228": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "229": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "230": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "231": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "232": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "233": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "234": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "235": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "236": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "237": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "238": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "239": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "240": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "241": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "242": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "243": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "244": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "245": "AbstractSourceBuilderTest::::test_obtainBufferedImage_withMergeFilter()",
      "247": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "248": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "249": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "250": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "251": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "252": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "253": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "254": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "255": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "256": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "257": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "258": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "259": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "260": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "261": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "262": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "263": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "264": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "265": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "266": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "267": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "268": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "269": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "270": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "271": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "272": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "273": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "274": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "275": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "276": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "277": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()",
      "278": "AbstractSourceBuilderTest::::test_obtainBufferedImages_withSplitFilter()"
    },
    "tests": [
      {
        "test_lines": [
          55,
          65
        ],
        "covered_lines": [
          28,
          31,
          32,
          45,
          48,
          49
        ]
      },
      {
        "test_lines": [
          67,
          73
        ],
        "covered_lines": [
          28,
          31,
          32,
          45,
          46
        ]
      },
      {
        "test_lines": [
          75,
          89
        ],
        "covered_lines": [
          28,
          31,
          32,
          59,
          60,
          61
        ]
      },
      {
        "test_lines": [
          91,
          97
        ],
        "covered_lines": [
          28,
          31,
          32
        ]
      },
      {
        "test_lines": [
          99,
          115
        ],
        "covered_lines": [
          28,
          31,
          32,
          71,
          72,
          73
        ]
      },
      {
        "test_lines": [
          117,
          123
        ],
        "covered_lines": [
          28,
          31,
          32
        ]
      },
      {
        "test_lines": [
          125,
          143
        ],
        "covered_lines": [
          28,
          31,
          32,
          59,
          60,
          61,
          83,
          84,
          85
        ]
      },
      {
        "test_lines": [
          145,
          151
        ],
        "covered_lines": [
          28,
          31,
          32
        ]
      },
      {
        "test_lines": [
          153,
          161
        ],
        "covered_lines": [
          28,
          31,
          32,
          96,
          97,
          100,
          103,
          114,
          115,
          119,
          120,
          124
        ]
      },
      {
        "test_lines": [
          163,
          173
        ],
        "covered_lines": [
          28,
          31,
          32,
          114,
          115,
          116
        ]
      },
      {
        "test_lines": [
          175,
          185
        ],
        "covered_lines": [
          28,
          31,
          32,
          96,
          97,
          100,
          101,
          114,
          115,
          119,
          120,
          124
        ]
      },
      {
        "test_lines": [
          187,
          202
        ],
        "covered_lines": [
          28,
          31,
          32,
          114,
          115,
          119,
          120,
          124
        ]
      },
      {
        "test_lines": [
          204,
          214
        ],
        "covered_lines": [
          28,
          31,
          32,
          114,
          115,
          116
        ]
      },
      {
        "test_lines": [
          216,
          245
        ],
        "covered_lines": [
          28,
          31,
          32,
          59,
          60,
          61,
          96,
          97,
          100,
          103,
          114,
          115,
          119,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          247,
          278
        ],
        "covered_lines": [
          28,
          31,
          32,
          59,
          60,
          61,
          114,
          115,
          119,
          120,
          121,
          122,
          123,
          124
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/all/src/main/java/cn/usage/ImagePipes.java": {
    "class_content": [
      "package cn.usage;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.in.BufferedImageSource;\n",
      "import cn.core.in.FileImageSource;\n",
      "import cn.core.in.InputStreamImageSource;\n",
      "import cn.core.in.ThisBufferedImageSource;\n",
      "import cn.core.utils.CollectionUtils;\n",
      "import cn.core.utils.ObjectUtils;\n",
      "import cn.core.utils.StringUtils;\n",
      "import cn.pipe.in.gif.ByteArrayGifSource;\n",
      "import cn.pipe.in.gif.FileGifSource;\n",
      "import cn.pipe.in.gif.InputStreamGifSource;\n",
      "import cn.pipe.in.pdf.ByteArrayPdfSource;\n",
      "import cn.pipe.in.pdf.FilePdfSource;\n",
      "import cn.pipe.in.pdf.InputStreamPdfSource;\n",
      "import cn.usage.builder.EmptySourceBuilder;\n",
      "import cn.usage.builder.GifSourceBuilder;\n",
      "import cn.usage.builder.ImageSourceBuilder;\n",
      "import cn.usage.builder.PdfSourceBuilder;\n",
      "import net.coobird.thumbnailator.Thumbnails;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.*;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.Iterator;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * Provides a fluent interface to processing image.\n",
      " * <p>\n",
      " *     This is the main entry point for processing image with <B>Imglib</B>.\n",
      " * </p>\n",
      " * <DL>\n",
      " * <DT><B>Usage:</B></DT>\n",
      " * <DD>\n",
      " * The following example code demonstrates how to use the fluent interface\n",
      " * to create a hash avatar for the user, the avatar setting to 8px*8px,\n",
      " * the image size setting to 300px*300px, and add a border with a margin of 20px.\n",
      " * <pre>\n",
      "ImagePipes.ofEmptySource()\n",
      "    .register(new HashImageGenerator.Builder(\"Tracy\")\n",
      "        .gridVerticalNum(8)\n",
      "        .bgColor(ColorUtils.of(240, 240, 240))\n",
      "        .fgColor(ColorUtils.of(50, 150, 50))\n",
      "        .build())\n",
      "    .toThumbnails()\n",
      "    .addFilter(new HighQualityExpandHandler.Builder()\n",
      "        .finalWidth(300)\n",
      "        .keepAspectRatio(true)\n",
      "        .build())\n",
      "    .addFilter(new BorderHandler.Builder()\n",
      "        .fillColor(ColorUtils.of(200, 200, 200))\n",
      "        .vMargins(20)\n",
      "        .hMargins(20)\n",
      "        .build())\n",
      "    .scale(1.0)\n",
      "    .toFile(\".../avatar.png\");\n",
      " * </pre>\n",
      " * </DD>\n",
      " * </DL>\n",
      " *\n",
      " * For more examples, please visit the <a href=\"https://github.com/nackily/imglib\">\n",
      " * Imglib</a> project page.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public final class ImagePipes {\n",
      "    private ImagePipes() {}\n",
      "\n",
      "    public static EmptySourceBuilder ofEmptySource() {\n",
      "        return new EmptySourceBuilder();\n",
      "    }\n",
      "\n",
      "    public static ImageSourceBuilder<File> of(String... filenames) {\n",
      "        ObjectUtils.excNull(filenames, \"File names is null.\");\n",
      "        CollectionUtils.excEmpty(filenames, \"Not any file name was specified.\");\n",
      "        Iterator<String> iter = Arrays.asList(filenames).iterator();\n",
      "        List<File> files = new ArrayList<>();\n",
      "        while (iter.hasNext()) {\n",
      "            files.add(new File(iter.next()));\n",
      "        }\n",
      "        return new ImageSourceBuilder<>(new FileImageSourceIterator(files));\n",
      "    }\n",
      "\n",
      "    public static ImageSourceBuilder<File> of(File... files) {\n",
      "        ObjectUtils.excNull(files, \"File array is null.\");\n",
      "        CollectionUtils.excEmpty(files, \"Not any files was specified.\");\n",
      "        return new ImageSourceBuilder<>(new FileImageSourceIterator(Arrays.asList(files)));\n",
      "    }\n",
      "\n",
      "    public static ImageSourceBuilder<InputStream> of(InputStream... iss) {\n",
      "        ObjectUtils.excNull(iss, \"InputStream array is null.\");\n",
      "        CollectionUtils.excEmpty(iss, \"No any input stream was specified\");\n",
      "        return new ImageSourceBuilder<>(new InputStreamImageSourceIterator(Arrays.asList(iss)));\n",
      "    }\n",
      "\n",
      "    public static ImageSourceBuilder<BufferedImage> of(BufferedImage... bis) {\n",
      "        ObjectUtils.excNull(bis, \"BufferedImage array is null.\");\n",
      "        CollectionUtils.excEmpty(bis, \"Not any buffered image was specified.\");\n",
      "        return new ImageSourceBuilder<>(new ThisImageSourceIterator(Arrays.asList(bis)));\n",
      "    }\n",
      "\n",
      "    public static ImageSourceBuilder<BufferedImage> of(Thumbnails.Builder<?> th) throws IOException {\n",
      "        ObjectUtils.excNull(th, \"Thumbnails.Builder is null.\");\n",
      "        List<BufferedImage> images = th.asBufferedImages();\n",
      "        return new ImageSourceBuilder<>(new ThisImageSourceIterator(images));\n",
      "    }\n",
      "\n",
      "    public static ImageSourceBuilder<BufferedImage> of(AbstractSourceBuilder<?> asb) throws IOException {\n",
      "        ObjectUtils.excNull(asb, \"Source builder is null.\");\n",
      "        List<BufferedImage> images = asb.obtainBufferedImages();\n",
      "        return new ImageSourceBuilder<>(new ThisImageSourceIterator(images));\n",
      "    }\n",
      "\n",
      "    public static PdfSourceBuilder<InputStream> ofPdf(InputStream is) {\n",
      "        ObjectUtils.excNull(is, \"Pdf InputStream is null.\");\n",
      "        return new PdfSourceBuilder<>(new InputStreamPdfSource(is));\n",
      "    }\n",
      "\n",
      "    public static PdfSourceBuilder<File> ofPdf(File pdf) {\n",
      "        ObjectUtils.excNull(pdf, \"Pdf File is null.\");\n",
      "        return new PdfSourceBuilder<>(new FilePdfSource(pdf));\n",
      "    }\n",
      "\n",
      "    public static PdfSourceBuilder<File> ofPdf(String filename) {\n",
      "        if (StringUtils.isEmpty(filename)) {\n",
      "            throw new InvalidSettingException(\"Pdf file name is null.\");\n",
      "        }\n",
      "        return new PdfSourceBuilder<>(new FilePdfSource(new File(filename)));\n",
      "    }\n",
      "\n",
      "    public static PdfSourceBuilder<byte[]> ofPdf(byte[] bytes) {\n",
      "        ObjectUtils.excNull(bytes, \"Pdf byte array is null.\");\n",
      "        return new PdfSourceBuilder<>(new ByteArrayPdfSource(bytes));\n",
      "    }\n",
      "\n",
      "    public static GifSourceBuilder<InputStream> ofGif(InputStream is) {\n",
      "        ObjectUtils.excNull(is, \"Gif InputStream is null.\");\n",
      "        return new GifSourceBuilder<>(new InputStreamGifSource(is));\n",
      "    }\n",
      "\n",
      "    public static GifSourceBuilder<File> ofGif(File gif) {\n",
      "        ObjectUtils.excNull(gif, \"Gif File is null.\");\n",
      "        return new GifSourceBuilder<>(new FileGifSource(gif));\n",
      "    }\n",
      "\n",
      "    public static GifSourceBuilder<File> ofGif(String filename) {\n",
      "        if (StringUtils.isEmpty(filename)) {\n",
      "            throw new InvalidSettingException(\"Gif file name is null.\");\n",
      "        }\n",
      "        return new GifSourceBuilder<>(new FileGifSource(new File(filename)));\n",
      "    }\n",
      "\n",
      "    public static GifSourceBuilder<byte[]> ofGif(byte[] bytes) {\n",
      "        ObjectUtils.excNull(bytes, \"Gif byte array is null.\");\n",
      "        return new GifSourceBuilder<>(new ByteArrayGifSource(bytes));\n",
      "    }\n",
      "\n",
      "\n",
      "    private static class FileImageSourceIterator implements Iterable<BufferedImageSource<File>> {\n",
      "\n",
      "        private final Iterable<File> files;\n",
      "\n",
      "        private FileImageSourceIterator(Iterable<File> files) {\n",
      "            this.files = files;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Iterator<BufferedImageSource<File>> iterator() {\n",
      "            return new Iterator<BufferedImageSource<File>>() {\n",
      "                private final Iterator<File> iter = files.iterator();\n",
      "                @Override\n",
      "                public boolean hasNext() {\n",
      "                    return iter.hasNext();\n",
      "                }\n",
      "                @Override\n",
      "                public BufferedImageSource<File> next() {\n",
      "                    return new FileImageSource(iter.next());\n",
      "                }\n",
      "                @Override\n",
      "                public void remove() {\n",
      "                    throw new UnsupportedOperationException();\n",
      "                }\n",
      "            };\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static class InputStreamImageSourceIterator implements Iterable<BufferedImageSource<InputStream>> {\n",
      "\n",
      "        private final Iterable<InputStream> iss;\n",
      "\n",
      "        private InputStreamImageSourceIterator(Iterable<InputStream> iss) {\n",
      "            this.iss = iss;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Iterator<BufferedImageSource<InputStream>> iterator() {\n",
      "            return new Iterator<BufferedImageSource<InputStream>>() {\n",
      "                private final Iterator<InputStream> iter = iss.iterator();\n",
      "                @Override\n",
      "                public boolean hasNext() {\n",
      "                    return iter.hasNext();\n",
      "                }\n",
      "                @Override\n",
      "                public BufferedImageSource<InputStream> next() {\n",
      "                    return new InputStreamImageSource(iter.next());\n",
      "                }\n",
      "                @Override\n",
      "                public void remove() {\n",
      "                    throw new UnsupportedOperationException();\n",
      "                }\n",
      "            };\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static class ThisImageSourceIterator implements Iterable<BufferedImageSource<BufferedImage>> {\n",
      "\n",
      "        private final Iterable<BufferedImage> bis;\n",
      "\n",
      "        private ThisImageSourceIterator(Iterable<BufferedImage> bis) {\n",
      "            this.bis = bis;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Iterator<BufferedImageSource<BufferedImage>> iterator() {\n",
      "            return new Iterator<BufferedImageSource<BufferedImage>>() {\n",
      "                private final Iterator<BufferedImage> iter = bis.iterator();\n",
      "                @Override\n",
      "                public boolean hasNext() {\n",
      "                    return iter.hasNext();\n",
      "                }\n",
      "                @Override\n",
      "                public BufferedImageSource<BufferedImage> next() {\n",
      "                    return new ThisBufferedImageSource(iter.next());\n",
      "                }\n",
      "                @Override\n",
      "                public void remove() {\n",
      "                    throw new UnsupportedOperationException();\n",
      "                }\n",
      "            };\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.usage;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.in.BufferedImageSource;\n",
      "import cn.core.in.GifSource;\n",
      "import cn.core.in.PdfSource;\n",
      "import cn.usage.builder.EmptySourceBuilder;\n",
      "import cn.usage.builder.GifSourceBuilder;\n",
      "import cn.usage.builder.ImageSourceBuilder;\n",
      "import cn.usage.builder.PdfSourceBuilder;\n",
      "import net.coobird.thumbnailator.Thumbnails;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.*;\n",
      "import java.util.Iterator;\n",
      "import java.util.List;\n",
      "\n",
      "@SuppressWarnings(\"unchecked\")\n",
      "public class ImagePipesTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_ofEmptySource() {\n",
      "        // when\n",
      "        EmptySourceBuilder builder = ImagePipes.ofEmptySource();\n",
      "\n",
      "        // then\n",
      "        Assert.assertNotNull(builder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_of_fromFilenames() {\n",
      "        // given\n",
      "        String[] filenames = {\"file1\", \"file2\", \"file3\"};\n",
      "\n",
      "        // when\n",
      "        ImageSourceBuilder<File> builder = ImagePipes.of(filenames);\n",
      "\n",
      "        // then\n",
      "        Iterable<BufferedImageSource<File>> sources = (Iterable<BufferedImageSource<File>>)\n",
      "                ReflectionUtils.get(\"sources\", builder);\n",
      "        Iterator<BufferedImageSource<File>> iterator = sources.iterator();\n",
      "\n",
      "        int index = 0;\n",
      "        while (iterator.hasNext()) {\n",
      "            BufferedImageSource<File> next = iterator.next();\n",
      "            Assert.assertEquals(filenames[index], next.getSource().getName());\n",
      "            index++;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_of_fromFilenames_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.of((String[]) null));\n",
      "        Assert.assertEquals(\"File names is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_of_fromFilenames_empty() {\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> ImagePipes.of(new String[0]));\n",
      "        Assert.assertEquals(\"Not any file name was specified.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_of_fromFiles() {\n",
      "        // given\n",
      "        File[] files = {new File(\"file1\"), new File(\"file2\"), new File(\"file3\")};\n",
      "\n",
      "        // when\n",
      "        ImageSourceBuilder<File> builder = ImagePipes.of(files);\n",
      "\n",
      "        // then\n",
      "        Iterable<BufferedImageSource<File>> sources = (Iterable<BufferedImageSource<File>>)\n",
      "                ReflectionUtils.get(\"sources\", builder);\n",
      "        Iterator<BufferedImageSource<File>> iterator = sources.iterator();\n",
      "\n",
      "        int index = 0;\n",
      "        while (iterator.hasNext()) {\n",
      "            BufferedImageSource<File> next = iterator.next();\n",
      "            Assert.assertEquals(files[index], next.getSource());\n",
      "            index++;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_of_fromFiles_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.of((File[]) null));\n",
      "        Assert.assertEquals(\"File array is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_of_fromFiles_empty() {\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> ImagePipes.of(new File[0]));\n",
      "        Assert.assertEquals(\"Not any files was specified.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_of_fromInputStreams() {\n",
      "        // given\n",
      "        InputStream[] iss = {\n",
      "                new ByteArrayInputStream(\"anything1\".getBytes()),\n",
      "                new ByteArrayInputStream(\"anything2\".getBytes()),\n",
      "                new ByteArrayInputStream(\"anything3\".getBytes()),\n",
      "        };\n",
      "\n",
      "        // when\n",
      "        ImageSourceBuilder<InputStream> builder = ImagePipes.of(iss);\n",
      "\n",
      "        // then\n",
      "        Iterable<BufferedImageSource<InputStream>> sources = (Iterable<BufferedImageSource<InputStream>>)\n",
      "                ReflectionUtils.get(\"sources\", builder);\n",
      "        Iterator<BufferedImageSource<InputStream>> iterator = sources.iterator();\n",
      "\n",
      "        int index = 0;\n",
      "        while (iterator.hasNext()) {\n",
      "            BufferedImageSource<InputStream> next = iterator.next();\n",
      "            Assert.assertEquals(iss[index], next.getSource());\n",
      "            index++;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_of_fromInputStreams_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.of((InputStream[]) null));\n",
      "        Assert.assertEquals(\"InputStream array is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_of_fromInputStreams_empty() {\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> ImagePipes.of(new InputStream[0]));\n",
      "        Assert.assertEquals(\"No any input stream was specified\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_of_fromBufferedImages() {\n",
      "        // given\n",
      "        BufferedImage[] bis = {\n",
      "                new BufferedImage(30, 40, BufferedImage.TYPE_INT_ARGB),\n",
      "                new BufferedImage(50, 70, BufferedImage.TYPE_INT_RGB),\n",
      "                new BufferedImage(10, 80, BufferedImage.TYPE_INT_ARGB)\n",
      "        };\n",
      "\n",
      "        // when\n",
      "        ImageSourceBuilder<BufferedImage> builder = ImagePipes.of(bis);\n",
      "\n",
      "        // then\n",
      "        Iterable<BufferedImageSource<BufferedImage>> sources = (Iterable<BufferedImageSource<BufferedImage>>)\n",
      "                ReflectionUtils.get(\"sources\", builder);\n",
      "        Iterator<BufferedImageSource<BufferedImage>> iterator = sources.iterator();\n",
      "\n",
      "        int index = 0;\n",
      "        while (iterator.hasNext()) {\n",
      "            BufferedImageSource<BufferedImage> next = iterator.next();\n",
      "            Assert.assertEquals(bis[index], next.getSource());\n",
      "            index++;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_of_fromBufferedImages_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.of((BufferedImage[]) null));\n",
      "        Assert.assertEquals(\"BufferedImage array is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_of_fromBufferedImages_empty() {\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> ImagePipes.of(new BufferedImage[0]));\n",
      "        Assert.assertEquals(\"Not any buffered image was specified.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_of_fromThumbnails() throws IOException {\n",
      "        // given\n",
      "        Thumbnails.Builder<BufferedImage> thumbnailsBuilder = Thumbnails.of(\n",
      "                new BufferedImage(30, 40, BufferedImage.TYPE_INT_ARGB),\n",
      "                new BufferedImage(50, 70, BufferedImage.TYPE_INT_RGB),\n",
      "                new BufferedImage(10, 80, BufferedImage.TYPE_INT_ARGB)\n",
      "        ).scale(1);\n",
      "\n",
      "\n",
      "        // when\n",
      "        ImageSourceBuilder<BufferedImage> builder = ImagePipes.of(thumbnailsBuilder);\n",
      "\n",
      "        // then\n",
      "        Iterable<BufferedImageSource<BufferedImage>> sources = (Iterable<BufferedImageSource<BufferedImage>>)\n",
      "                ReflectionUtils.get(\"sources\", builder);\n",
      "        Iterator<BufferedImageSource<BufferedImage>> iterator = sources.iterator();\n",
      "\n",
      "        List<BufferedImage> thumbnails = thumbnailsBuilder.asBufferedImages();\n",
      "\n",
      "        int index = 0;\n",
      "        while (iterator.hasNext()) {\n",
      "            BufferedImageSource<BufferedImage> next = iterator.next();\n",
      "            // Compare images.\n",
      "            Assert.assertTrue(BufferedImageComparer.isSame(thumbnails.get(index), next.getSource()));\n",
      "            index++;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_of_fromThumbnails_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.of((Thumbnails.Builder<?>) null));\n",
      "        Assert.assertEquals(\"Thumbnails.Builder is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_of_fromSourceBuilder() throws IOException {\n",
      "        // given\n",
      "        AbstractSourceBuilder<?> asb = ImagePipes.of(\n",
      "                new BufferedImage(30, 40, BufferedImage.TYPE_INT_ARGB),\n",
      "                new BufferedImage(50, 70, BufferedImage.TYPE_INT_RGB),\n",
      "                new BufferedImage(10, 80, BufferedImage.TYPE_INT_ARGB)\n",
      "        );\n",
      "\n",
      "\n",
      "        // when\n",
      "        ImageSourceBuilder<BufferedImage> builder = ImagePipes.of(asb);\n",
      "\n",
      "        // then\n",
      "        Iterable<BufferedImageSource<BufferedImage>> sources = (Iterable<BufferedImageSource<BufferedImage>>)\n",
      "                ReflectionUtils.get(\"sources\", builder);\n",
      "        Iterator<BufferedImageSource<BufferedImage>> iterator = sources.iterator();\n",
      "\n",
      "        List<BufferedImage> images = asb.obtainBufferedImages();\n",
      "\n",
      "        int index = 0;\n",
      "        while (iterator.hasNext()) {\n",
      "            BufferedImageSource<BufferedImage> next = iterator.next();\n",
      "            Assert.assertEquals(images.get(index), next.getSource());\n",
      "            index++;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_of_fromSourceBuilder_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.of((AbstractSourceBuilder<?>) null));\n",
      "        Assert.assertEquals(\"Source builder is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_ofPdf_fromInputStream() {\n",
      "        // given\n",
      "        InputStream is = new ByteArrayInputStream(\"any\".getBytes());\n",
      "\n",
      "        // when\n",
      "        PdfSourceBuilder<InputStream> builder = ImagePipes.ofPdf(is);\n",
      "\n",
      "        // then\n",
      "        PdfSource<InputStream> source = (PdfSource<InputStream>)\n",
      "                ReflectionUtils.get(\"source\", builder);\n",
      "\n",
      "        Assert.assertEquals(is, source.getSource());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_ofPdf_fromInputStream_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.ofPdf((InputStream) null));\n",
      "        Assert.assertEquals(\"Pdf InputStream is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_ofPdf_fromFile() {\n",
      "        // given\n",
      "        File f = new File(\"file1\");\n",
      "\n",
      "        // when\n",
      "        PdfSourceBuilder<File> builder = ImagePipes.ofPdf(f);\n",
      "\n",
      "        // then\n",
      "        PdfSource<File> source = (PdfSource<File>)\n",
      "                ReflectionUtils.get(\"source\", builder);\n",
      "\n",
      "        Assert.assertEquals(f, source.getSource());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_ofPdf_fromFile_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.ofPdf((File) null));\n",
      "        Assert.assertEquals(\"Pdf File is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_ofPdf_fromFilename() {\n",
      "        // given\n",
      "        String filename = \"file1\";\n",
      "\n",
      "        // when\n",
      "        PdfSourceBuilder<File> builder = ImagePipes.ofPdf(filename);\n",
      "\n",
      "        // then\n",
      "        PdfSource<File> source = (PdfSource<File>)\n",
      "                ReflectionUtils.get(\"source\", builder);\n",
      "\n",
      "        Assert.assertEquals(filename, source.getSource().getName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_ofPdf_fromFilename_null() {\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> ImagePipes.ofPdf((String) null));\n",
      "        Assert.assertEquals(\"Pdf file name is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_ofPdf_fromByteArray() {\n",
      "        // given\n",
      "        byte[] bytes = \"file1\".getBytes();\n",
      "\n",
      "        // when\n",
      "        PdfSourceBuilder<byte[]> builder = ImagePipes.ofPdf(bytes);\n",
      "\n",
      "        // then\n",
      "        PdfSource<byte[]> source = (PdfSource<byte[]>)\n",
      "                ReflectionUtils.get(\"source\", builder);\n",
      "\n",
      "        Assert.assertArrayEquals(bytes, source.getSource());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_ofPdf_fromByteArray_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.ofPdf((byte[]) null));\n",
      "        Assert.assertEquals(\"Pdf byte array is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_ofGif_fromInputStream() {\n",
      "        // given\n",
      "        InputStream is = new ByteArrayInputStream(\"any\".getBytes());\n",
      "\n",
      "        // when\n",
      "        GifSourceBuilder<InputStream> builder = ImagePipes.ofGif(is);\n",
      "\n",
      "        // then\n",
      "        GifSource<InputStream> source = (GifSource<InputStream>)\n",
      "                ReflectionUtils.get(\"source\", builder);\n",
      "\n",
      "        Assert.assertEquals(is, source.getSource());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_ofGif_fromInputStream_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.ofGif((InputStream) null));\n",
      "        Assert.assertEquals(\"Gif InputStream is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_ofGif_fromFile() {\n",
      "        // given\n",
      "        File f = new File(\"file1\");\n",
      "\n",
      "        // when\n",
      "        GifSourceBuilder<File> builder = ImagePipes.ofGif(f);\n",
      "\n",
      "        // then\n",
      "        GifSource<File> source = (GifSource<File>)\n",
      "                ReflectionUtils.get(\"source\", builder);\n",
      "\n",
      "        Assert.assertEquals(f, source.getSource());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_ofGif_fromFile_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.ofGif((File) null));\n",
      "        Assert.assertEquals(\"Gif File is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_ofGif_fromFilename() {\n",
      "        // given\n",
      "        String filename = \"file1\";\n",
      "\n",
      "        // when\n",
      "        GifSourceBuilder<File> builder = ImagePipes.ofGif(filename);\n",
      "\n",
      "        // then\n",
      "        GifSource<File> source = (GifSource<File>)\n",
      "                ReflectionUtils.get(\"source\", builder);\n",
      "\n",
      "        Assert.assertEquals(filename, source.getSource().getName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_ofGif_fromFilename_null() {\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> ImagePipes.ofGif((String) null));\n",
      "        Assert.assertEquals(\"Gif file name is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_ofGif_fromByteArray() {\n",
      "        // given\n",
      "        byte[] bytes = \"file1\".getBytes();\n",
      "\n",
      "        // when\n",
      "        GifSourceBuilder<byte[]> builder = ImagePipes.ofGif(bytes);\n",
      "\n",
      "        // then\n",
      "        GifSource<byte[]> source = (GifSource<byte[]>)\n",
      "                ReflectionUtils.get(\"source\", builder);\n",
      "\n",
      "        Assert.assertArrayEquals(bytes, source.getSource());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_ofGif_fromByteArray_null() {\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> ImagePipes.ofGif((byte[]) null));\n",
      "        Assert.assertEquals(\"Gif byte array is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "ImagePipes::::ofEmptySource()": [
        72,
        74
      ],
      "ImagePipes::::of(java.lang.String[])": [
        76,
        85
      ],
      "ImagePipes::::of(java.io.File[])": [
        87,
        91
      ],
      "ImagePipes::::of(java.io.InputStream[])": [
        93,
        97
      ],
      "ImagePipes::::of(java.awt.image.BufferedImage[])": [
        99,
        103
      ],
      "ImagePipes::::of(cn.usage.AbstractSourceBuilder<?>)": [
        111,
        115
      ],
      "ImagePipes::::ofPdf(java.io.InputStream)": [
        117,
        120
      ],
      "ImagePipes::::ofPdf(java.io.File)": [
        122,
        125
      ],
      "ImagePipes::::ofPdf(java.lang.String)": [
        127,
        132
      ],
      "ImagePipes::::ofPdf(byte[])": [
        134,
        137
      ],
      "ImagePipes::::ofGif(java.io.InputStream)": [
        139,
        142
      ],
      "ImagePipes::::ofGif(java.io.File)": [
        144,
        147
      ],
      "ImagePipes::::ofGif(java.lang.String)": [
        149,
        154
      ],
      "ImagePipes::::ofGif(byte[])": [
        156,
        159
      ],
      "ImagePipes.FileImageSourceIterator::::iterator()": [
        170,
        187
      ],
      "ImagePipes.InputStreamImageSourceIterator::::iterator()": [
        198,
        215
      ],
      "ImagePipes.ThisImageSourceIterator::::iterator()": [
        226,
        243
      ]
    },
    "test_method_lines_dic": {
      "ImagePipesTest::::test_ofEmptySource()": [
        22,
        29
      ],
      "ImagePipesTest::::test_of_fromFilenames()": [
        31,
        50
      ],
      "ImagePipesTest::::testEx_of_fromFilenames_null()": [
        52,
        58
      ],
      "ImagePipesTest::::testEx_of_fromFilenames_empty()": [
        60,
        66
      ],
      "ImagePipesTest::::test_of_fromFiles()": [
        68,
        87
      ],
      "ImagePipesTest::::testEx_of_fromFiles_null()": [
        89,
        95
      ],
      "ImagePipesTest::::testEx_of_fromFiles_empty()": [
        97,
        103
      ],
      "ImagePipesTest::::test_of_fromInputStreams()": [
        105,
        128
      ],
      "ImagePipesTest::::testEx_of_fromInputStreams_null()": [
        130,
        136
      ],
      "ImagePipesTest::::testEx_of_fromInputStreams_empty()": [
        138,
        144
      ],
      "ImagePipesTest::::test_of_fromBufferedImages()": [
        146,
        169
      ],
      "ImagePipesTest::::testEx_of_fromBufferedImages_null()": [
        171,
        177
      ],
      "ImagePipesTest::::testEx_of_fromBufferedImages_empty()": [
        179,
        185
      ],
      "ImagePipesTest::::test_of_fromThumbnails()": [
        187,
        214
      ],
      "ImagePipesTest::::testEx_of_fromThumbnails_null()": [
        216,
        222
      ],
      "ImagePipesTest::::test_of_fromSourceBuilder()": [
        224,
        250
      ],
      "ImagePipesTest::::testEx_of_fromSourceBuilder_null()": [
        252,
        258
      ],
      "ImagePipesTest::::test_ofPdf_fromInputStream()": [
        260,
        273
      ],
      "ImagePipesTest::::testEx_ofPdf_fromInputStream_null()": [
        275,
        281
      ],
      "ImagePipesTest::::test_ofPdf_fromFile()": [
        283,
        296
      ],
      "ImagePipesTest::::testEx_ofPdf_fromFile_null()": [
        298,
        304
      ],
      "ImagePipesTest::::test_ofPdf_fromFilename()": [
        306,
        319
      ],
      "ImagePipesTest::::testEx_ofPdf_fromFilename_null()": [
        321,
        327
      ],
      "ImagePipesTest::::test_ofPdf_fromByteArray()": [
        329,
        342
      ],
      "ImagePipesTest::::testEx_ofPdf_fromByteArray_null()": [
        344,
        350
      ],
      "ImagePipesTest::::test_ofGif_fromInputStream()": [
        352,
        365
      ],
      "ImagePipesTest::::testEx_ofGif_fromInputStream_null()": [
        367,
        373
      ],
      "ImagePipesTest::::test_ofGif_fromFile()": [
        375,
        388
      ],
      "ImagePipesTest::::testEx_ofGif_fromFile_null()": [
        390,
        396
      ],
      "ImagePipesTest::::test_ofGif_fromFilename()": [
        398,
        411
      ],
      "ImagePipesTest::::testEx_ofGif_fromFilename_null()": [
        413,
        419
      ],
      "ImagePipesTest::::test_ofGif_fromByteArray()": [
        421,
        434
      ],
      "ImagePipesTest::::testEx_ofGif_fromByteArray_null()": [
        436,
        442
      ]
    },
    "reverse_method_lines_dic": {
      "72": "ImagePipes::::ofEmptySource()",
      "73": "ImagePipes::::ofEmptySource()",
      "74": "ImagePipes::::ofEmptySource()",
      "76": "ImagePipes::::of(java.lang.String[])",
      "77": "ImagePipes::::of(java.lang.String[])",
      "78": "ImagePipes::::of(java.lang.String[])",
      "79": "ImagePipes::::of(java.lang.String[])",
      "80": "ImagePipes::::of(java.lang.String[])",
      "81": "ImagePipes::::of(java.lang.String[])",
      "82": "ImagePipes::::of(java.lang.String[])",
      "83": "ImagePipes::::of(java.lang.String[])",
      "84": "ImagePipes::::of(java.lang.String[])",
      "85": "ImagePipes::::of(java.lang.String[])",
      "87": "ImagePipes::::of(java.io.File[])",
      "88": "ImagePipes::::of(java.io.File[])",
      "89": "ImagePipes::::of(java.io.File[])",
      "90": "ImagePipes::::of(java.io.File[])",
      "91": "ImagePipes::::of(java.io.File[])",
      "93": "ImagePipes::::of(java.io.InputStream[])",
      "94": "ImagePipes::::of(java.io.InputStream[])",
      "95": "ImagePipes::::of(java.io.InputStream[])",
      "96": "ImagePipes::::of(java.io.InputStream[])",
      "97": "ImagePipes::::of(java.io.InputStream[])",
      "99": "ImagePipes::::of(java.awt.image.BufferedImage[])",
      "100": "ImagePipes::::of(java.awt.image.BufferedImage[])",
      "101": "ImagePipes::::of(java.awt.image.BufferedImage[])",
      "102": "ImagePipes::::of(java.awt.image.BufferedImage[])",
      "103": "ImagePipes::::of(java.awt.image.BufferedImage[])",
      "111": "ImagePipes::::of(cn.usage.AbstractSourceBuilder<?>)",
      "112": "ImagePipes::::of(cn.usage.AbstractSourceBuilder<?>)",
      "113": "ImagePipes::::of(cn.usage.AbstractSourceBuilder<?>)",
      "114": "ImagePipes::::of(cn.usage.AbstractSourceBuilder<?>)",
      "115": "ImagePipes::::of(cn.usage.AbstractSourceBuilder<?>)",
      "117": "ImagePipes::::ofPdf(java.io.InputStream)",
      "118": "ImagePipes::::ofPdf(java.io.InputStream)",
      "119": "ImagePipes::::ofPdf(java.io.InputStream)",
      "120": "ImagePipes::::ofPdf(java.io.InputStream)",
      "122": "ImagePipes::::ofPdf(java.io.File)",
      "123": "ImagePipes::::ofPdf(java.io.File)",
      "124": "ImagePipes::::ofPdf(java.io.File)",
      "125": "ImagePipes::::ofPdf(java.io.File)",
      "127": "ImagePipes::::ofPdf(java.lang.String)",
      "128": "ImagePipes::::ofPdf(java.lang.String)",
      "129": "ImagePipes::::ofPdf(java.lang.String)",
      "130": "ImagePipes::::ofPdf(java.lang.String)",
      "131": "ImagePipes::::ofPdf(java.lang.String)",
      "132": "ImagePipes::::ofPdf(java.lang.String)",
      "134": "ImagePipes::::ofPdf(byte[])",
      "135": "ImagePipes::::ofPdf(byte[])",
      "136": "ImagePipes::::ofPdf(byte[])",
      "137": "ImagePipes::::ofPdf(byte[])",
      "139": "ImagePipes::::ofGif(java.io.InputStream)",
      "140": "ImagePipes::::ofGif(java.io.InputStream)",
      "141": "ImagePipes::::ofGif(java.io.InputStream)",
      "142": "ImagePipes::::ofGif(java.io.InputStream)",
      "144": "ImagePipes::::ofGif(java.io.File)",
      "145": "ImagePipes::::ofGif(java.io.File)",
      "146": "ImagePipes::::ofGif(java.io.File)",
      "147": "ImagePipes::::ofGif(java.io.File)",
      "149": "ImagePipes::::ofGif(java.lang.String)",
      "150": "ImagePipes::::ofGif(java.lang.String)",
      "151": "ImagePipes::::ofGif(java.lang.String)",
      "152": "ImagePipes::::ofGif(java.lang.String)",
      "153": "ImagePipes::::ofGif(java.lang.String)",
      "154": "ImagePipes::::ofGif(java.lang.String)",
      "156": "ImagePipes::::ofGif(byte[])",
      "157": "ImagePipes::::ofGif(byte[])",
      "158": "ImagePipes::::ofGif(byte[])",
      "159": "ImagePipes::::ofGif(byte[])",
      "170": "ImagePipes.FileImageSourceIterator::::iterator()",
      "171": "ImagePipes.FileImageSourceIterator::::iterator()",
      "172": "ImagePipes.FileImageSourceIterator::::iterator()",
      "173": "ImagePipes.FileImageSourceIterator::::iterator()",
      "174": "ImagePipes.FileImageSourceIterator::::iterator()",
      "175": "ImagePipes.FileImageSourceIterator::::iterator()",
      "176": "ImagePipes.FileImageSourceIterator::::iterator()",
      "177": "ImagePipes.FileImageSourceIterator::::iterator()",
      "178": "ImagePipes.FileImageSourceIterator::::iterator()",
      "179": "ImagePipes.FileImageSourceIterator::::iterator()",
      "180": "ImagePipes.FileImageSourceIterator::::iterator()",
      "181": "ImagePipes.FileImageSourceIterator::::iterator()",
      "182": "ImagePipes.FileImageSourceIterator::::iterator()",
      "183": "ImagePipes.FileImageSourceIterator::::iterator()",
      "184": "ImagePipes.FileImageSourceIterator::::iterator()",
      "185": "ImagePipes.FileImageSourceIterator::::iterator()",
      "186": "ImagePipes.FileImageSourceIterator::::iterator()",
      "187": "ImagePipes.FileImageSourceIterator::::iterator()",
      "198": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "199": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "200": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "201": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "202": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "203": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "204": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "205": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "206": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "207": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "208": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "209": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "210": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "211": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "212": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "213": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "214": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "215": "ImagePipes.InputStreamImageSourceIterator::::iterator()",
      "226": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "227": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "228": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "229": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "230": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "231": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "232": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "233": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "234": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "235": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "236": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "237": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "238": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "239": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "240": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "241": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "242": "ImagePipes.ThisImageSourceIterator::::iterator()",
      "243": "ImagePipes.ThisImageSourceIterator::::iterator()"
    },
    "test_reverse_method_lines_dic": {
      "22": "ImagePipesTest::::test_ofEmptySource()",
      "23": "ImagePipesTest::::test_ofEmptySource()",
      "24": "ImagePipesTest::::test_ofEmptySource()",
      "25": "ImagePipesTest::::test_ofEmptySource()",
      "26": "ImagePipesTest::::test_ofEmptySource()",
      "27": "ImagePipesTest::::test_ofEmptySource()",
      "28": "ImagePipesTest::::test_ofEmptySource()",
      "29": "ImagePipesTest::::test_ofEmptySource()",
      "31": "ImagePipesTest::::test_of_fromFilenames()",
      "32": "ImagePipesTest::::test_of_fromFilenames()",
      "33": "ImagePipesTest::::test_of_fromFilenames()",
      "34": "ImagePipesTest::::test_of_fromFilenames()",
      "35": "ImagePipesTest::::test_of_fromFilenames()",
      "36": "ImagePipesTest::::test_of_fromFilenames()",
      "37": "ImagePipesTest::::test_of_fromFilenames()",
      "38": "ImagePipesTest::::test_of_fromFilenames()",
      "39": "ImagePipesTest::::test_of_fromFilenames()",
      "40": "ImagePipesTest::::test_of_fromFilenames()",
      "41": "ImagePipesTest::::test_of_fromFilenames()",
      "42": "ImagePipesTest::::test_of_fromFilenames()",
      "43": "ImagePipesTest::::test_of_fromFilenames()",
      "44": "ImagePipesTest::::test_of_fromFilenames()",
      "45": "ImagePipesTest::::test_of_fromFilenames()",
      "46": "ImagePipesTest::::test_of_fromFilenames()",
      "47": "ImagePipesTest::::test_of_fromFilenames()",
      "48": "ImagePipesTest::::test_of_fromFilenames()",
      "49": "ImagePipesTest::::test_of_fromFilenames()",
      "50": "ImagePipesTest::::test_of_fromFilenames()",
      "52": "ImagePipesTest::::testEx_of_fromFilenames_null()",
      "53": "ImagePipesTest::::testEx_of_fromFilenames_null()",
      "54": "ImagePipesTest::::testEx_of_fromFilenames_null()",
      "55": "ImagePipesTest::::testEx_of_fromFilenames_null()",
      "56": "ImagePipesTest::::testEx_of_fromFilenames_null()",
      "57": "ImagePipesTest::::testEx_of_fromFilenames_null()",
      "58": "ImagePipesTest::::testEx_of_fromFilenames_null()",
      "60": "ImagePipesTest::::testEx_of_fromFilenames_empty()",
      "61": "ImagePipesTest::::testEx_of_fromFilenames_empty()",
      "62": "ImagePipesTest::::testEx_of_fromFilenames_empty()",
      "63": "ImagePipesTest::::testEx_of_fromFilenames_empty()",
      "64": "ImagePipesTest::::testEx_of_fromFilenames_empty()",
      "65": "ImagePipesTest::::testEx_of_fromFilenames_empty()",
      "66": "ImagePipesTest::::testEx_of_fromFilenames_empty()",
      "68": "ImagePipesTest::::test_of_fromFiles()",
      "69": "ImagePipesTest::::test_of_fromFiles()",
      "70": "ImagePipesTest::::test_of_fromFiles()",
      "71": "ImagePipesTest::::test_of_fromFiles()",
      "72": "ImagePipesTest::::test_of_fromFiles()",
      "73": "ImagePipesTest::::test_of_fromFiles()",
      "74": "ImagePipesTest::::test_of_fromFiles()",
      "75": "ImagePipesTest::::test_of_fromFiles()",
      "76": "ImagePipesTest::::test_of_fromFiles()",
      "77": "ImagePipesTest::::test_of_fromFiles()",
      "78": "ImagePipesTest::::test_of_fromFiles()",
      "79": "ImagePipesTest::::test_of_fromFiles()",
      "80": "ImagePipesTest::::test_of_fromFiles()",
      "81": "ImagePipesTest::::test_of_fromFiles()",
      "82": "ImagePipesTest::::test_of_fromFiles()",
      "83": "ImagePipesTest::::test_of_fromFiles()",
      "84": "ImagePipesTest::::test_of_fromFiles()",
      "85": "ImagePipesTest::::test_of_fromFiles()",
      "86": "ImagePipesTest::::test_of_fromFiles()",
      "87": "ImagePipesTest::::test_of_fromFiles()",
      "89": "ImagePipesTest::::testEx_of_fromFiles_null()",
      "90": "ImagePipesTest::::testEx_of_fromFiles_null()",
      "91": "ImagePipesTest::::testEx_of_fromFiles_null()",
      "92": "ImagePipesTest::::testEx_of_fromFiles_null()",
      "93": "ImagePipesTest::::testEx_of_fromFiles_null()",
      "94": "ImagePipesTest::::testEx_of_fromFiles_null()",
      "95": "ImagePipesTest::::testEx_of_fromFiles_null()",
      "97": "ImagePipesTest::::testEx_of_fromFiles_empty()",
      "98": "ImagePipesTest::::testEx_of_fromFiles_empty()",
      "99": "ImagePipesTest::::testEx_of_fromFiles_empty()",
      "100": "ImagePipesTest::::testEx_of_fromFiles_empty()",
      "101": "ImagePipesTest::::testEx_of_fromFiles_empty()",
      "102": "ImagePipesTest::::testEx_of_fromFiles_empty()",
      "103": "ImagePipesTest::::testEx_of_fromFiles_empty()",
      "105": "ImagePipesTest::::test_of_fromInputStreams()",
      "106": "ImagePipesTest::::test_of_fromInputStreams()",
      "107": "ImagePipesTest::::test_of_fromInputStreams()",
      "108": "ImagePipesTest::::test_of_fromInputStreams()",
      "109": "ImagePipesTest::::test_of_fromInputStreams()",
      "110": "ImagePipesTest::::test_of_fromInputStreams()",
      "111": "ImagePipesTest::::test_of_fromInputStreams()",
      "112": "ImagePipesTest::::test_of_fromInputStreams()",
      "113": "ImagePipesTest::::test_of_fromInputStreams()",
      "114": "ImagePipesTest::::test_of_fromInputStreams()",
      "115": "ImagePipesTest::::test_of_fromInputStreams()",
      "116": "ImagePipesTest::::test_of_fromInputStreams()",
      "117": "ImagePipesTest::::test_of_fromInputStreams()",
      "118": "ImagePipesTest::::test_of_fromInputStreams()",
      "119": "ImagePipesTest::::test_of_fromInputStreams()",
      "120": "ImagePipesTest::::test_of_fromInputStreams()",
      "121": "ImagePipesTest::::test_of_fromInputStreams()",
      "122": "ImagePipesTest::::test_of_fromInputStreams()",
      "123": "ImagePipesTest::::test_of_fromInputStreams()",
      "124": "ImagePipesTest::::test_of_fromInputStreams()",
      "125": "ImagePipesTest::::test_of_fromInputStreams()",
      "126": "ImagePipesTest::::test_of_fromInputStreams()",
      "127": "ImagePipesTest::::test_of_fromInputStreams()",
      "128": "ImagePipesTest::::test_of_fromInputStreams()",
      "130": "ImagePipesTest::::testEx_of_fromInputStreams_null()",
      "131": "ImagePipesTest::::testEx_of_fromInputStreams_null()",
      "132": "ImagePipesTest::::testEx_of_fromInputStreams_null()",
      "133": "ImagePipesTest::::testEx_of_fromInputStreams_null()",
      "134": "ImagePipesTest::::testEx_of_fromInputStreams_null()",
      "135": "ImagePipesTest::::testEx_of_fromInputStreams_null()",
      "136": "ImagePipesTest::::testEx_of_fromInputStreams_null()",
      "138": "ImagePipesTest::::testEx_of_fromInputStreams_empty()",
      "139": "ImagePipesTest::::testEx_of_fromInputStreams_empty()",
      "140": "ImagePipesTest::::testEx_of_fromInputStreams_empty()",
      "141": "ImagePipesTest::::testEx_of_fromInputStreams_empty()",
      "142": "ImagePipesTest::::testEx_of_fromInputStreams_empty()",
      "143": "ImagePipesTest::::testEx_of_fromInputStreams_empty()",
      "144": "ImagePipesTest::::testEx_of_fromInputStreams_empty()",
      "146": "ImagePipesTest::::test_of_fromBufferedImages()",
      "147": "ImagePipesTest::::test_of_fromBufferedImages()",
      "148": "ImagePipesTest::::test_of_fromBufferedImages()",
      "149": "ImagePipesTest::::test_of_fromBufferedImages()",
      "150": "ImagePipesTest::::test_of_fromBufferedImages()",
      "151": "ImagePipesTest::::test_of_fromBufferedImages()",
      "152": "ImagePipesTest::::test_of_fromBufferedImages()",
      "153": "ImagePipesTest::::test_of_fromBufferedImages()",
      "154": "ImagePipesTest::::test_of_fromBufferedImages()",
      "155": "ImagePipesTest::::test_of_fromBufferedImages()",
      "156": "ImagePipesTest::::test_of_fromBufferedImages()",
      "157": "ImagePipesTest::::test_of_fromBufferedImages()",
      "158": "ImagePipesTest::::test_of_fromBufferedImages()",
      "159": "ImagePipesTest::::test_of_fromBufferedImages()",
      "160": "ImagePipesTest::::test_of_fromBufferedImages()",
      "161": "ImagePipesTest::::test_of_fromBufferedImages()",
      "162": "ImagePipesTest::::test_of_fromBufferedImages()",
      "163": "ImagePipesTest::::test_of_fromBufferedImages()",
      "164": "ImagePipesTest::::test_of_fromBufferedImages()",
      "165": "ImagePipesTest::::test_of_fromBufferedImages()",
      "166": "ImagePipesTest::::test_of_fromBufferedImages()",
      "167": "ImagePipesTest::::test_of_fromBufferedImages()",
      "168": "ImagePipesTest::::test_of_fromBufferedImages()",
      "169": "ImagePipesTest::::test_of_fromBufferedImages()",
      "171": "ImagePipesTest::::testEx_of_fromBufferedImages_null()",
      "172": "ImagePipesTest::::testEx_of_fromBufferedImages_null()",
      "173": "ImagePipesTest::::testEx_of_fromBufferedImages_null()",
      "174": "ImagePipesTest::::testEx_of_fromBufferedImages_null()",
      "175": "ImagePipesTest::::testEx_of_fromBufferedImages_null()",
      "176": "ImagePipesTest::::testEx_of_fromBufferedImages_null()",
      "177": "ImagePipesTest::::testEx_of_fromBufferedImages_null()",
      "179": "ImagePipesTest::::testEx_of_fromBufferedImages_empty()",
      "180": "ImagePipesTest::::testEx_of_fromBufferedImages_empty()",
      "181": "ImagePipesTest::::testEx_of_fromBufferedImages_empty()",
      "182": "ImagePipesTest::::testEx_of_fromBufferedImages_empty()",
      "183": "ImagePipesTest::::testEx_of_fromBufferedImages_empty()",
      "184": "ImagePipesTest::::testEx_of_fromBufferedImages_empty()",
      "185": "ImagePipesTest::::testEx_of_fromBufferedImages_empty()",
      "187": "ImagePipesTest::::test_of_fromThumbnails()",
      "188": "ImagePipesTest::::test_of_fromThumbnails()",
      "189": "ImagePipesTest::::test_of_fromThumbnails()",
      "190": "ImagePipesTest::::test_of_fromThumbnails()",
      "191": "ImagePipesTest::::test_of_fromThumbnails()",
      "192": "ImagePipesTest::::test_of_fromThumbnails()",
      "193": "ImagePipesTest::::test_of_fromThumbnails()",
      "194": "ImagePipesTest::::test_of_fromThumbnails()",
      "195": "ImagePipesTest::::test_of_fromThumbnails()",
      "196": "ImagePipesTest::::test_of_fromThumbnails()",
      "197": "ImagePipesTest::::test_of_fromThumbnails()",
      "198": "ImagePipesTest::::test_of_fromThumbnails()",
      "199": "ImagePipesTest::::test_of_fromThumbnails()",
      "200": "ImagePipesTest::::test_of_fromThumbnails()",
      "201": "ImagePipesTest::::test_of_fromThumbnails()",
      "202": "ImagePipesTest::::test_of_fromThumbnails()",
      "203": "ImagePipesTest::::test_of_fromThumbnails()",
      "204": "ImagePipesTest::::test_of_fromThumbnails()",
      "205": "ImagePipesTest::::test_of_fromThumbnails()",
      "206": "ImagePipesTest::::test_of_fromThumbnails()",
      "207": "ImagePipesTest::::test_of_fromThumbnails()",
      "208": "ImagePipesTest::::test_of_fromThumbnails()",
      "209": "ImagePipesTest::::test_of_fromThumbnails()",
      "210": "ImagePipesTest::::test_of_fromThumbnails()",
      "211": "ImagePipesTest::::test_of_fromThumbnails()",
      "212": "ImagePipesTest::::test_of_fromThumbnails()",
      "213": "ImagePipesTest::::test_of_fromThumbnails()",
      "214": "ImagePipesTest::::test_of_fromThumbnails()",
      "216": "ImagePipesTest::::testEx_of_fromThumbnails_null()",
      "217": "ImagePipesTest::::testEx_of_fromThumbnails_null()",
      "218": "ImagePipesTest::::testEx_of_fromThumbnails_null()",
      "219": "ImagePipesTest::::testEx_of_fromThumbnails_null()",
      "220": "ImagePipesTest::::testEx_of_fromThumbnails_null()",
      "221": "ImagePipesTest::::testEx_of_fromThumbnails_null()",
      "222": "ImagePipesTest::::testEx_of_fromThumbnails_null()",
      "224": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "225": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "226": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "227": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "228": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "229": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "230": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "231": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "232": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "233": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "234": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "235": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "236": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "237": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "238": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "239": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "240": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "241": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "242": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "243": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "244": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "245": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "246": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "247": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "248": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "249": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "250": "ImagePipesTest::::test_of_fromSourceBuilder()",
      "252": "ImagePipesTest::::testEx_of_fromSourceBuilder_null()",
      "253": "ImagePipesTest::::testEx_of_fromSourceBuilder_null()",
      "254": "ImagePipesTest::::testEx_of_fromSourceBuilder_null()",
      "255": "ImagePipesTest::::testEx_of_fromSourceBuilder_null()",
      "256": "ImagePipesTest::::testEx_of_fromSourceBuilder_null()",
      "257": "ImagePipesTest::::testEx_of_fromSourceBuilder_null()",
      "258": "ImagePipesTest::::testEx_of_fromSourceBuilder_null()",
      "260": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "261": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "262": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "263": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "264": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "265": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "266": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "267": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "268": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "269": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "270": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "271": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "272": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "273": "ImagePipesTest::::test_ofPdf_fromInputStream()",
      "275": "ImagePipesTest::::testEx_ofPdf_fromInputStream_null()",
      "276": "ImagePipesTest::::testEx_ofPdf_fromInputStream_null()",
      "277": "ImagePipesTest::::testEx_ofPdf_fromInputStream_null()",
      "278": "ImagePipesTest::::testEx_ofPdf_fromInputStream_null()",
      "279": "ImagePipesTest::::testEx_ofPdf_fromInputStream_null()",
      "280": "ImagePipesTest::::testEx_ofPdf_fromInputStream_null()",
      "281": "ImagePipesTest::::testEx_ofPdf_fromInputStream_null()",
      "283": "ImagePipesTest::::test_ofPdf_fromFile()",
      "284": "ImagePipesTest::::test_ofPdf_fromFile()",
      "285": "ImagePipesTest::::test_ofPdf_fromFile()",
      "286": "ImagePipesTest::::test_ofPdf_fromFile()",
      "287": "ImagePipesTest::::test_ofPdf_fromFile()",
      "288": "ImagePipesTest::::test_ofPdf_fromFile()",
      "289": "ImagePipesTest::::test_ofPdf_fromFile()",
      "290": "ImagePipesTest::::test_ofPdf_fromFile()",
      "291": "ImagePipesTest::::test_ofPdf_fromFile()",
      "292": "ImagePipesTest::::test_ofPdf_fromFile()",
      "293": "ImagePipesTest::::test_ofPdf_fromFile()",
      "294": "ImagePipesTest::::test_ofPdf_fromFile()",
      "295": "ImagePipesTest::::test_ofPdf_fromFile()",
      "296": "ImagePipesTest::::test_ofPdf_fromFile()",
      "298": "ImagePipesTest::::testEx_ofPdf_fromFile_null()",
      "299": "ImagePipesTest::::testEx_ofPdf_fromFile_null()",
      "300": "ImagePipesTest::::testEx_ofPdf_fromFile_null()",
      "301": "ImagePipesTest::::testEx_ofPdf_fromFile_null()",
      "302": "ImagePipesTest::::testEx_ofPdf_fromFile_null()",
      "303": "ImagePipesTest::::testEx_ofPdf_fromFile_null()",
      "304": "ImagePipesTest::::testEx_ofPdf_fromFile_null()",
      "306": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "307": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "308": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "309": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "310": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "311": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "312": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "313": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "314": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "315": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "316": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "317": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "318": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "319": "ImagePipesTest::::test_ofPdf_fromFilename()",
      "321": "ImagePipesTest::::testEx_ofPdf_fromFilename_null()",
      "322": "ImagePipesTest::::testEx_ofPdf_fromFilename_null()",
      "323": "ImagePipesTest::::testEx_ofPdf_fromFilename_null()",
      "324": "ImagePipesTest::::testEx_ofPdf_fromFilename_null()",
      "325": "ImagePipesTest::::testEx_ofPdf_fromFilename_null()",
      "326": "ImagePipesTest::::testEx_ofPdf_fromFilename_null()",
      "327": "ImagePipesTest::::testEx_ofPdf_fromFilename_null()",
      "329": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "330": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "331": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "332": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "333": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "334": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "335": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "336": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "337": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "338": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "339": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "340": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "341": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "342": "ImagePipesTest::::test_ofPdf_fromByteArray()",
      "344": "ImagePipesTest::::testEx_ofPdf_fromByteArray_null()",
      "345": "ImagePipesTest::::testEx_ofPdf_fromByteArray_null()",
      "346": "ImagePipesTest::::testEx_ofPdf_fromByteArray_null()",
      "347": "ImagePipesTest::::testEx_ofPdf_fromByteArray_null()",
      "348": "ImagePipesTest::::testEx_ofPdf_fromByteArray_null()",
      "349": "ImagePipesTest::::testEx_ofPdf_fromByteArray_null()",
      "350": "ImagePipesTest::::testEx_ofPdf_fromByteArray_null()",
      "352": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "353": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "354": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "355": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "356": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "357": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "358": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "359": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "360": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "361": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "362": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "363": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "364": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "365": "ImagePipesTest::::test_ofGif_fromInputStream()",
      "367": "ImagePipesTest::::testEx_ofGif_fromInputStream_null()",
      "368": "ImagePipesTest::::testEx_ofGif_fromInputStream_null()",
      "369": "ImagePipesTest::::testEx_ofGif_fromInputStream_null()",
      "370": "ImagePipesTest::::testEx_ofGif_fromInputStream_null()",
      "371": "ImagePipesTest::::testEx_ofGif_fromInputStream_null()",
      "372": "ImagePipesTest::::testEx_ofGif_fromInputStream_null()",
      "373": "ImagePipesTest::::testEx_ofGif_fromInputStream_null()",
      "375": "ImagePipesTest::::test_ofGif_fromFile()",
      "376": "ImagePipesTest::::test_ofGif_fromFile()",
      "377": "ImagePipesTest::::test_ofGif_fromFile()",
      "378": "ImagePipesTest::::test_ofGif_fromFile()",
      "379": "ImagePipesTest::::test_ofGif_fromFile()",
      "380": "ImagePipesTest::::test_ofGif_fromFile()",
      "381": "ImagePipesTest::::test_ofGif_fromFile()",
      "382": "ImagePipesTest::::test_ofGif_fromFile()",
      "383": "ImagePipesTest::::test_ofGif_fromFile()",
      "384": "ImagePipesTest::::test_ofGif_fromFile()",
      "385": "ImagePipesTest::::test_ofGif_fromFile()",
      "386": "ImagePipesTest::::test_ofGif_fromFile()",
      "387": "ImagePipesTest::::test_ofGif_fromFile()",
      "388": "ImagePipesTest::::test_ofGif_fromFile()",
      "390": "ImagePipesTest::::testEx_ofGif_fromFile_null()",
      "391": "ImagePipesTest::::testEx_ofGif_fromFile_null()",
      "392": "ImagePipesTest::::testEx_ofGif_fromFile_null()",
      "393": "ImagePipesTest::::testEx_ofGif_fromFile_null()",
      "394": "ImagePipesTest::::testEx_ofGif_fromFile_null()",
      "395": "ImagePipesTest::::testEx_ofGif_fromFile_null()",
      "396": "ImagePipesTest::::testEx_ofGif_fromFile_null()",
      "398": "ImagePipesTest::::test_ofGif_fromFilename()",
      "399": "ImagePipesTest::::test_ofGif_fromFilename()",
      "400": "ImagePipesTest::::test_ofGif_fromFilename()",
      "401": "ImagePipesTest::::test_ofGif_fromFilename()",
      "402": "ImagePipesTest::::test_ofGif_fromFilename()",
      "403": "ImagePipesTest::::test_ofGif_fromFilename()",
      "404": "ImagePipesTest::::test_ofGif_fromFilename()",
      "405": "ImagePipesTest::::test_ofGif_fromFilename()",
      "406": "ImagePipesTest::::test_ofGif_fromFilename()",
      "407": "ImagePipesTest::::test_ofGif_fromFilename()",
      "408": "ImagePipesTest::::test_ofGif_fromFilename()",
      "409": "ImagePipesTest::::test_ofGif_fromFilename()",
      "410": "ImagePipesTest::::test_ofGif_fromFilename()",
      "411": "ImagePipesTest::::test_ofGif_fromFilename()",
      "413": "ImagePipesTest::::testEx_ofGif_fromFilename_null()",
      "414": "ImagePipesTest::::testEx_ofGif_fromFilename_null()",
      "415": "ImagePipesTest::::testEx_ofGif_fromFilename_null()",
      "416": "ImagePipesTest::::testEx_ofGif_fromFilename_null()",
      "417": "ImagePipesTest::::testEx_ofGif_fromFilename_null()",
      "418": "ImagePipesTest::::testEx_ofGif_fromFilename_null()",
      "419": "ImagePipesTest::::testEx_ofGif_fromFilename_null()",
      "421": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "422": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "423": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "424": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "425": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "426": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "427": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "428": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "429": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "430": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "431": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "432": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "433": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "434": "ImagePipesTest::::test_ofGif_fromByteArray()",
      "436": "ImagePipesTest::::testEx_ofGif_fromByteArray_null()",
      "437": "ImagePipesTest::::testEx_ofGif_fromByteArray_null()",
      "438": "ImagePipesTest::::testEx_ofGif_fromByteArray_null()",
      "439": "ImagePipesTest::::testEx_ofGif_fromByteArray_null()",
      "440": "ImagePipesTest::::testEx_ofGif_fromByteArray_null()",
      "441": "ImagePipesTest::::testEx_ofGif_fromByteArray_null()",
      "442": "ImagePipesTest::::testEx_ofGif_fromByteArray_null()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          29
        ],
        "covered_lines": [
          73
        ]
      },
      {
        "test_lines": [
          31,
          50
        ],
        "covered_lines": [
          77,
          78,
          79,
          80,
          81,
          82,
          84,
          166,
          167,
          168,
          172,
          173,
          176,
          180
        ]
      },
      {
        "test_lines": [
          60,
          66
        ],
        "covered_lines": [
          77
        ]
      },
      {
        "test_lines": [
          68,
          87
        ],
        "covered_lines": [
          88,
          89,
          90,
          166,
          167,
          168,
          172,
          173,
          176,
          180
        ]
      },
      {
        "test_lines": [
          97,
          103
        ],
        "covered_lines": [
          88
        ]
      },
      {
        "test_lines": [
          105,
          128
        ],
        "covered_lines": [
          94,
          95,
          96,
          194,
          195,
          196,
          200,
          201,
          204,
          208
        ]
      },
      {
        "test_lines": [
          138,
          144
        ],
        "covered_lines": [
          94
        ]
      },
      {
        "test_lines": [
          146,
          169
        ],
        "covered_lines": [
          100,
          101,
          102,
          222,
          223,
          224,
          228,
          229,
          232,
          236
        ]
      },
      {
        "test_lines": [
          179,
          185
        ],
        "covered_lines": [
          100
        ]
      },
      {
        "test_lines": [
          187,
          214
        ],
        "covered_lines": [
          106,
          107,
          108,
          222,
          223,
          224,
          228,
          229,
          232,
          236
        ]
      },
      {
        "test_lines": [
          224,
          250
        ],
        "covered_lines": [
          100,
          101,
          102,
          112,
          113,
          114,
          222,
          223,
          224,
          228,
          229,
          232,
          236
        ]
      },
      {
        "test_lines": [
          260,
          273
        ],
        "covered_lines": [
          118,
          119
        ]
      },
      {
        "test_lines": [
          283,
          296
        ],
        "covered_lines": [
          123,
          124
        ]
      },
      {
        "test_lines": [
          306,
          319
        ],
        "covered_lines": [
          128,
          131
        ]
      },
      {
        "test_lines": [
          321,
          327
        ],
        "covered_lines": [
          128,
          129
        ]
      },
      {
        "test_lines": [
          329,
          342
        ],
        "covered_lines": [
          135,
          136
        ]
      },
      {
        "test_lines": [
          352,
          365
        ],
        "covered_lines": [
          140,
          141
        ]
      },
      {
        "test_lines": [
          375,
          388
        ],
        "covered_lines": [
          145,
          146
        ]
      },
      {
        "test_lines": [
          398,
          411
        ],
        "covered_lines": [
          150,
          153
        ]
      },
      {
        "test_lines": [
          413,
          419
        ],
        "covered_lines": [
          150,
          151
        ]
      },
      {
        "test_lines": [
          421,
          434
        ],
        "covered_lines": [
          157,
          158
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/all/src/main/java/cn/usage/builder/PdfSourceBuilder.java": {
    "class_content": [
      "package cn.usage.builder;\n",
      "\n",
      "import cn.core.in.PdfSource;\n",
      "import cn.core.utils.ObjectUtils;\n",
      "import cn.usage.AbstractSourceBuilder;\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.tool.Range;\n",
      "import cn.core.utils.CollectionUtils;\n",
      "import cn.core.utils.StringUtils;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.*;\n",
      "import java.text.MessageFormat;\n",
      "import java.util.*;\n",
      "import java.util.logging.Logger;\n",
      "import java.util.stream.Collectors;\n",
      "\n",
      "/**\n",
      " * A source builder which form PDF source.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class PdfSourceBuilder<S> extends AbstractSourceBuilder<PdfSourceBuilder<S>> {\n",
      "\n",
      "    private static final Logger LOGGER = Logger.getLogger(PdfSourceBuilder.class.getName());\n",
      "\n",
      "    /**\n",
      "     * The PDF source.\n",
      "     */\n",
      "    protected final PdfSource<S> source;\n",
      "\n",
      "    /**\n",
      "     * Whether to include all pages.\n",
      "     */\n",
      "    private boolean containsAll = false;\n",
      "\n",
      "    /**\n",
      "     * The page indexes to be extracted.\n",
      "     */\n",
      "    private final Set<Integer> pages = new HashSet<>();\n",
      "\n",
      "    /**\n",
      "     * The DPI (dots per inch) to render at.\n",
      "     */\n",
      "    private float dpi;\n",
      "\n",
      "    /**\n",
      "     * Indicates whether the pdf source object is one-time. May need to\n",
      "     * call the method {@link PdfSourceBuilder#release()} to release\n",
      "     * resources when it is set to {@code false}.\n",
      "     */\n",
      "    private boolean disposable = true;\n",
      "\n",
      "    public PdfSourceBuilder(PdfSource<S> pdfSource) {\n",
      "        this.source = pdfSource;\n",
      "    }\n",
      "\n",
      "    public PdfSourceBuilder<S> unDisposable() {\n",
      "        disposable = false;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public PdfSourceBuilder<S> registerAll() {\n",
      "        containsAll = true;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public PdfSourceBuilder<S> register(int pageIndex) {\n",
      "        checkPageIndex(pageIndex);\n",
      "        pages.add(pageIndex);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public PdfSourceBuilder<S> register(int... pageIndexes) {\n",
      "        for (int index : pageIndexes) {\n",
      "            checkPageIndex(index);\n",
      "            pages.add(index);\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public PdfSourceBuilder<S> register(Range<Integer> range) {\n",
      "        ObjectUtils.excNull(range, \"Range is null.\");\n",
      "        checkPageIndex(range.getMin());\n",
      "        for (int i = range.getMin(); i <= range.getMax(); i++) {\n",
      "            pages.add(i);\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public PdfSourceBuilder<S> dpi(float dpi) {\n",
      "        if (dpi <= 0) {\n",
      "            throw new InvalidSettingException(\"DPI must be greater than 0.\");\n",
      "        }\n",
      "        this.dpi = dpi;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Release some resources and reset the status of source object.\n",
      "     *\n",
      "     * @throws IOException If some I/O exceptions occurred when closing resource.\n",
      "     */\n",
      "    public void release() throws IOException {\n",
      "        if (! source.isClosed()) {\n",
      "            source.close();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<BufferedImage> obtainSourceImages() throws IOException {\n",
      "        try {\n",
      "            checkReadiness();\n",
      "\n",
      "            // the max page index of the pdf\n",
      "            int maxPageIndex = source.maxPageNumber() - 1;\n",
      "\n",
      "            float val = dpi <= 0 ? 300 : dpi;\n",
      "\n",
      "            // export all pages\n",
      "            if (containsAll) {\n",
      "                for (int index = 0; index <= maxPageIndex; index++) {\n",
      "                    pages.add(index);\n",
      "                }\n",
      "            }\n",
      "\n",
      "            // check all page was in bound\n",
      "            Set<String> invalidPages = pages.stream()\n",
      "                    .filter(p -> maxPageIndex < p)\n",
      "                    .map(Objects::toString)\n",
      "                    .collect(Collectors.toSet());\n",
      "            if (!CollectionUtils.isNullOrEmpty(invalidPages)) {\n",
      "                throw new HandlingException(MessageFormat.format(\n",
      "                        \"The page indexes:[{0}] has exceeded the max page number of the pdf document.\",\n",
      "                        StringUtils.join(invalidPages, \",\")));\n",
      "            }\n",
      "\n",
      "            return source.read(pages.toArray(new Integer[0]), val);\n",
      "        } finally {\n",
      "            // Release resources when the pdf source is not-time.\n",
      "            if (disposable) {\n",
      "                release();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    protected void checkReadiness() {\n",
      "        if (containsAll) {\n",
      "            return;\n",
      "        }\n",
      "        if (CollectionUtils.isNullOrEmpty(pages)) {\n",
      "            throw new HandlingException(\"No page indexes are registered.\");\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    private static void checkPageIndex(int pageIndex) {\n",
      "        if (pageIndex < 0) {\n",
      "            throw new InvalidSettingException(\"Page index must be greater than or equal to 0.\");\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Release some resources when developer forget.\n",
      "     *\n",
      "     * @throws Throwable If some I/O exceptions occurred when closing resource.\n",
      "     */\n",
      "    @Override\n",
      "    protected void finalize() throws Throwable {\n",
      "        try {\n",
      "            if (source != null && !source.isClosed()) {\n",
      "                LOGGER.warning( \"Warning: You did not close a PDF Source.\" );\n",
      "                release();\n",
      "            }\n",
      "        } finally {\n",
      "            super.finalize();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.usage.builder;\n",
      "\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.in.PdfSource;\n",
      "import cn.core.tool.Range;\n",
      "import cn.pipe.in.pdf.InputStreamPdfSource;\n",
      "import cn.usage.BufferedImageComparer;\n",
      "import cn.usage.ReflectionUtils;\n",
      "import cn.usage.TestUtils;\n",
      "import org.apache.pdfbox.pdmodel.PDDocument;\n",
      "import org.apache.pdfbox.rendering.ImageType;\n",
      "import org.apache.pdfbox.rendering.PDFRenderer;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.util.List;\n",
      "import java.util.Set;\n",
      "\n",
      "@SuppressWarnings(\"unchecked\")\n",
      "public class PdfSourceBuilderTest {\n",
      "\n",
      "    PdfSource<InputStream> source;\n",
      "    @Before\n",
      "    public void init() throws IOException {\n",
      "        source = new InputStreamPdfSource(TestUtils.getResourceStream(\"input/sequence.pdf\"));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void test_unDisposable() throws IOException {\n",
      "        // given\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source);\n",
      "\n",
      "        // when\n",
      "        boolean before = (boolean) ReflectionUtils.get(\"disposable\", builder);\n",
      "        builder.unDisposable();\n",
      "        boolean after = (boolean) ReflectionUtils.get(\"disposable\", builder);\n",
      "\n",
      "        // then\n",
      "        Assert.assertTrue(before);\n",
      "        Assert.assertFalse(after);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_register_single() {\n",
      "        // when\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source)\n",
      "                .register(3);\n",
      "\n",
      "        // then\n",
      "        Set<Integer> pages = (Set<Integer>) ReflectionUtils.get(\"pages\", builder);\n",
      "        Assert.assertTrue(pages.contains(3));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_register_invalid() {\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source);\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> builder.register(-3));\n",
      "        Assert.assertEquals(\"Page index must be greater than or equal to 0.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_register_array() {\n",
      "        // when\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source)\n",
      "                .register(3, 5);\n",
      "\n",
      "        // then\n",
      "        Set<Integer> pages = (Set<Integer>) ReflectionUtils.get(\"pages\", builder);\n",
      "        Assert.assertTrue(pages.contains(3));\n",
      "        Assert.assertTrue(pages.contains(5));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_register_range() {\n",
      "        // when\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source)\n",
      "                .register(Range.ofInt(3, 5));\n",
      "\n",
      "        // then\n",
      "        Set<Integer> pages = (Set<Integer>) ReflectionUtils.get(\"pages\", builder);\n",
      "        Assert.assertTrue(pages.contains(3));\n",
      "        Assert.assertTrue(pages.contains(4));\n",
      "        Assert.assertTrue(pages.contains(5));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_register_range_null() {\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source);\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> builder.register((Range<Integer>) null));\n",
      "        Assert.assertEquals(\"Range is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_register_withDuplicateElement() {\n",
      "        // given\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source);\n",
      "\n",
      "        // when\n",
      "        builder.register(2)\n",
      "                .register(2, 5, 1, 2, 1)\n",
      "                .register(Range.ofInt(1, 2));\n",
      "\n",
      "        // then\n",
      "        Set<Integer> pages = (Set<Integer>) ReflectionUtils.get(\"pages\", builder);\n",
      "\n",
      "        Assert.assertEquals(3, pages.size());\n",
      "        Assert.assertTrue(pages.contains(2));\n",
      "        Assert.assertTrue(pages.contains(5));\n",
      "        Assert.assertTrue(pages.contains(1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_register_all() {\n",
      "        // given\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source);\n",
      "\n",
      "        // when\n",
      "        boolean before = (boolean) ReflectionUtils.get(\"containsAll\", builder);\n",
      "        builder.registerAll();\n",
      "        boolean after = (boolean) ReflectionUtils.get(\"containsAll\", builder);\n",
      "\n",
      "        // then\n",
      "        Assert.assertFalse(before);\n",
      "        Assert.assertTrue(after);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_dpi() {\n",
      "        // when\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source)\n",
      "                .dpi(300);\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(300f, ReflectionUtils.get(\"dpi\", builder));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_dpi_invalid() {\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source);\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> builder.dpi(-20));\n",
      "        Assert.assertEquals(\"DPI must be greater than 0.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_release() throws IOException {\n",
      "        // given\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source)\n",
      "                .registerAll()\n",
      "                .unDisposable();\n",
      "\n",
      "        // Need to load the document first, otherwise don't need to release resources.\n",
      "        builder.unDisposable().obtainSourceImages();\n",
      "\n",
      "        // when\n",
      "        boolean before = source.isClosed();\n",
      "        builder.release();\n",
      "        boolean after = source.isClosed();\n",
      "\n",
      "        // then\n",
      "        Assert.assertFalse(before);\n",
      "        Assert.assertTrue(after);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_obtainSourceImages_specified() throws IOException {\n",
      "        // given\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source)\n",
      "                .register(0, 2)\n",
      "                .dpi(270);\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = builder.obtainSourceImages();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(2, target.size());\n",
      "\n",
      "        // and then\n",
      "        try (PDDocument doc = PDDocument.load(TestUtils.getResourceStream(\"input/sequence.pdf\"))) {\n",
      "            PDFRenderer renderer = new PDFRenderer(doc);\n",
      "            BufferedImage image0 = renderer.renderImageWithDPI(0, 270, ImageType.RGB);\n",
      "            BufferedImage image2 = renderer.renderImageWithDPI(2, 270, ImageType.RGB);\n",
      "\n",
      "            Assert.assertTrue(BufferedImageComparer.isSame(image0, target.get(0)));\n",
      "            Assert.assertTrue(BufferedImageComparer.isSame(image2, target.get(1)));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_obtainSourceImages_all() throws IOException {\n",
      "        // given\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source)\n",
      "                .registerAll()\n",
      "                .dpi(270);\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = builder.obtainSourceImages();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(3, target.size());\n",
      "\n",
      "        // and then\n",
      "        try (PDDocument doc = PDDocument.load(TestUtils.getResourceStream(\"input/sequence.pdf\"))) {\n",
      "            PDFRenderer renderer = new PDFRenderer(doc);\n",
      "            BufferedImage image0 = renderer.renderImageWithDPI(0, 270, ImageType.RGB);\n",
      "            BufferedImage image1 = renderer.renderImageWithDPI(1, 270, ImageType.RGB);\n",
      "            BufferedImage image2 = renderer.renderImageWithDPI(2, 270, ImageType.RGB);\n",
      "\n",
      "            Assert.assertTrue(BufferedImageComparer.isSame(image0, target.get(0)));\n",
      "            Assert.assertTrue(BufferedImageComparer.isSame(image1, target.get(1)));\n",
      "            Assert.assertTrue(BufferedImageComparer.isSame(image2, target.get(2)));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainSourceImages_noPageRegistered() {\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source)\n",
      "                .dpi(270);\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                builder::obtainSourceImages);\n",
      "        Assert.assertEquals(\"No page indexes are registered.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainSourceImages_frameIndexOutOfBound() {\n",
      "        // This pdf document has just only 3 pages.\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source)\n",
      "                .register(0, 1, 3, 5)\n",
      "                .dpi(270);\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                builder::obtainSourceImages);\n",
      "        Assert.assertEquals(\"The page indexes:[3,5] has exceeded the max page number of the pdf document.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainSourceImages_withUnDisposable() throws IOException {\n",
      "        // given\n",
      "        PdfSourceBuilder<InputStream> builder = new PdfSourceBuilder<>(source)\n",
      "                .register(0)\n",
      "                .unDisposable()\n",
      "                .dpi(270);\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = builder.obtainSourceImages();\n",
      "\n",
      "        boolean before = source.isClosed();\n",
      "        builder.release();\n",
      "        boolean after = source.isClosed();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(1, target.size());\n",
      "\n",
      "        Assert.assertFalse(before);\n",
      "        Assert.assertTrue(after);\n",
      "\n",
      "        // and then\n",
      "        try (PDDocument doc = PDDocument.load(TestUtils.getResourceStream(\"input/sequence.pdf\"))) {\n",
      "            PDFRenderer renderer = new PDFRenderer(doc);\n",
      "            BufferedImage image0 = renderer.renderImageWithDPI(0, 270, ImageType.RGB);\n",
      "\n",
      "            Assert.assertTrue(BufferedImageComparer.isSame(image0, target.get(0)));\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "PdfSourceBuilder::::unDisposable()": [
        59,
        62
      ],
      "PdfSourceBuilder::::registerAll()": [
        64,
        67
      ],
      "PdfSourceBuilder::::register(int)": [
        69,
        73
      ],
      "PdfSourceBuilder::::register(int[])": [
        75,
        81
      ],
      "PdfSourceBuilder::::dpi(float)": [
        92,
        98
      ],
      "PdfSourceBuilder::::release()": [
        105,
        109
      ],
      "PdfSourceBuilder::::obtainSourceImages()": [
        111,
        146
      ],
      "PdfSourceBuilder::::checkReadiness()": [
        149,
        156
      ],
      "PdfSourceBuilder::::checkPageIndex(int)": [
        159,
        163
      ],
      "PdfSourceBuilder::::finalize()": [
        170,
        180
      ]
    },
    "test_method_lines_dic": {
      "PdfSourceBuilderTest::::init()": [
        27,
        30
      ],
      "PdfSourceBuilderTest::::test_unDisposable()": [
        33,
        46
      ],
      "PdfSourceBuilderTest::::test_register_single()": [
        48,
        57
      ],
      "PdfSourceBuilderTest::::testEx_register_invalid()": [
        59,
        66
      ],
      "PdfSourceBuilderTest::::test_register_array()": [
        68,
        78
      ],
      "PdfSourceBuilderTest::::test_register_range()": [
        80,
        91
      ],
      "PdfSourceBuilderTest::::testEx_register_range_null()": [
        93,
        100
      ],
      "PdfSourceBuilderTest::::test_register_withDuplicateElement()": [
        102,
        119
      ],
      "PdfSourceBuilderTest::::test_register_all()": [
        121,
        134
      ],
      "PdfSourceBuilderTest::::test_dpi()": [
        136,
        144
      ],
      "PdfSourceBuilderTest::::testEx_dpi_invalid()": [
        146,
        153
      ],
      "PdfSourceBuilderTest::::test_release()": [
        155,
        173
      ],
      "PdfSourceBuilderTest::::test_obtainSourceImages_specified()": [
        175,
        197
      ],
      "PdfSourceBuilderTest::::test_obtainSourceImages_all()": [
        199,
        223
      ],
      "PdfSourceBuilderTest::::testEx_obtainSourceImages_noPageRegistered()": [
        225,
        233
      ],
      "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()": [
        235,
        245
      ],
      "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()": [
        247,
        275
      ]
    },
    "reverse_method_lines_dic": {
      "59": "PdfSourceBuilder::::unDisposable()",
      "60": "PdfSourceBuilder::::unDisposable()",
      "61": "PdfSourceBuilder::::unDisposable()",
      "62": "PdfSourceBuilder::::unDisposable()",
      "64": "PdfSourceBuilder::::registerAll()",
      "65": "PdfSourceBuilder::::registerAll()",
      "66": "PdfSourceBuilder::::registerAll()",
      "67": "PdfSourceBuilder::::registerAll()",
      "69": "PdfSourceBuilder::::register(int)",
      "70": "PdfSourceBuilder::::register(int)",
      "71": "PdfSourceBuilder::::register(int)",
      "72": "PdfSourceBuilder::::register(int)",
      "73": "PdfSourceBuilder::::register(int)",
      "75": "PdfSourceBuilder::::register(int[])",
      "76": "PdfSourceBuilder::::register(int[])",
      "77": "PdfSourceBuilder::::register(int[])",
      "78": "PdfSourceBuilder::::register(int[])",
      "79": "PdfSourceBuilder::::register(int[])",
      "80": "PdfSourceBuilder::::register(int[])",
      "81": "PdfSourceBuilder::::register(int[])",
      "92": "PdfSourceBuilder::::dpi(float)",
      "93": "PdfSourceBuilder::::dpi(float)",
      "94": "PdfSourceBuilder::::dpi(float)",
      "95": "PdfSourceBuilder::::dpi(float)",
      "96": "PdfSourceBuilder::::dpi(float)",
      "97": "PdfSourceBuilder::::dpi(float)",
      "98": "PdfSourceBuilder::::dpi(float)",
      "105": "PdfSourceBuilder::::release()",
      "106": "PdfSourceBuilder::::release()",
      "107": "PdfSourceBuilder::::release()",
      "108": "PdfSourceBuilder::::release()",
      "109": "PdfSourceBuilder::::release()",
      "111": "PdfSourceBuilder::::obtainSourceImages()",
      "112": "PdfSourceBuilder::::obtainSourceImages()",
      "113": "PdfSourceBuilder::::obtainSourceImages()",
      "114": "PdfSourceBuilder::::obtainSourceImages()",
      "115": "PdfSourceBuilder::::obtainSourceImages()",
      "116": "PdfSourceBuilder::::obtainSourceImages()",
      "117": "PdfSourceBuilder::::obtainSourceImages()",
      "118": "PdfSourceBuilder::::obtainSourceImages()",
      "119": "PdfSourceBuilder::::obtainSourceImages()",
      "120": "PdfSourceBuilder::::obtainSourceImages()",
      "121": "PdfSourceBuilder::::obtainSourceImages()",
      "122": "PdfSourceBuilder::::obtainSourceImages()",
      "123": "PdfSourceBuilder::::obtainSourceImages()",
      "124": "PdfSourceBuilder::::obtainSourceImages()",
      "125": "PdfSourceBuilder::::obtainSourceImages()",
      "126": "PdfSourceBuilder::::obtainSourceImages()",
      "127": "PdfSourceBuilder::::obtainSourceImages()",
      "128": "PdfSourceBuilder::::obtainSourceImages()",
      "129": "PdfSourceBuilder::::obtainSourceImages()",
      "130": "PdfSourceBuilder::::obtainSourceImages()",
      "131": "PdfSourceBuilder::::obtainSourceImages()",
      "132": "PdfSourceBuilder::::obtainSourceImages()",
      "133": "PdfSourceBuilder::::obtainSourceImages()",
      "134": "PdfSourceBuilder::::obtainSourceImages()",
      "135": "PdfSourceBuilder::::obtainSourceImages()",
      "136": "PdfSourceBuilder::::obtainSourceImages()",
      "137": "PdfSourceBuilder::::obtainSourceImages()",
      "138": "PdfSourceBuilder::::obtainSourceImages()",
      "139": "PdfSourceBuilder::::obtainSourceImages()",
      "140": "PdfSourceBuilder::::obtainSourceImages()",
      "141": "PdfSourceBuilder::::obtainSourceImages()",
      "142": "PdfSourceBuilder::::obtainSourceImages()",
      "143": "PdfSourceBuilder::::obtainSourceImages()",
      "144": "PdfSourceBuilder::::obtainSourceImages()",
      "145": "PdfSourceBuilder::::obtainSourceImages()",
      "146": "PdfSourceBuilder::::obtainSourceImages()",
      "149": "PdfSourceBuilder::::checkReadiness()",
      "150": "PdfSourceBuilder::::checkReadiness()",
      "151": "PdfSourceBuilder::::checkReadiness()",
      "152": "PdfSourceBuilder::::checkReadiness()",
      "153": "PdfSourceBuilder::::checkReadiness()",
      "154": "PdfSourceBuilder::::checkReadiness()",
      "155": "PdfSourceBuilder::::checkReadiness()",
      "156": "PdfSourceBuilder::::checkReadiness()",
      "159": "PdfSourceBuilder::::checkPageIndex(int)",
      "160": "PdfSourceBuilder::::checkPageIndex(int)",
      "161": "PdfSourceBuilder::::checkPageIndex(int)",
      "162": "PdfSourceBuilder::::checkPageIndex(int)",
      "163": "PdfSourceBuilder::::checkPageIndex(int)",
      "170": "PdfSourceBuilder::::finalize()",
      "171": "PdfSourceBuilder::::finalize()",
      "172": "PdfSourceBuilder::::finalize()",
      "173": "PdfSourceBuilder::::finalize()",
      "174": "PdfSourceBuilder::::finalize()",
      "175": "PdfSourceBuilder::::finalize()",
      "176": "PdfSourceBuilder::::finalize()",
      "177": "PdfSourceBuilder::::finalize()",
      "178": "PdfSourceBuilder::::finalize()",
      "179": "PdfSourceBuilder::::finalize()",
      "180": "PdfSourceBuilder::::finalize()"
    },
    "test_reverse_method_lines_dic": {
      "27": "PdfSourceBuilderTest::::init()",
      "28": "PdfSourceBuilderTest::::init()",
      "29": "PdfSourceBuilderTest::::init()",
      "30": "PdfSourceBuilderTest::::init()",
      "33": "PdfSourceBuilderTest::::test_unDisposable()",
      "34": "PdfSourceBuilderTest::::test_unDisposable()",
      "35": "PdfSourceBuilderTest::::test_unDisposable()",
      "36": "PdfSourceBuilderTest::::test_unDisposable()",
      "37": "PdfSourceBuilderTest::::test_unDisposable()",
      "38": "PdfSourceBuilderTest::::test_unDisposable()",
      "39": "PdfSourceBuilderTest::::test_unDisposable()",
      "40": "PdfSourceBuilderTest::::test_unDisposable()",
      "41": "PdfSourceBuilderTest::::test_unDisposable()",
      "42": "PdfSourceBuilderTest::::test_unDisposable()",
      "43": "PdfSourceBuilderTest::::test_unDisposable()",
      "44": "PdfSourceBuilderTest::::test_unDisposable()",
      "45": "PdfSourceBuilderTest::::test_unDisposable()",
      "46": "PdfSourceBuilderTest::::test_unDisposable()",
      "48": "PdfSourceBuilderTest::::test_register_single()",
      "49": "PdfSourceBuilderTest::::test_register_single()",
      "50": "PdfSourceBuilderTest::::test_register_single()",
      "51": "PdfSourceBuilderTest::::test_register_single()",
      "52": "PdfSourceBuilderTest::::test_register_single()",
      "53": "PdfSourceBuilderTest::::test_register_single()",
      "54": "PdfSourceBuilderTest::::test_register_single()",
      "55": "PdfSourceBuilderTest::::test_register_single()",
      "56": "PdfSourceBuilderTest::::test_register_single()",
      "57": "PdfSourceBuilderTest::::test_register_single()",
      "59": "PdfSourceBuilderTest::::testEx_register_invalid()",
      "60": "PdfSourceBuilderTest::::testEx_register_invalid()",
      "61": "PdfSourceBuilderTest::::testEx_register_invalid()",
      "62": "PdfSourceBuilderTest::::testEx_register_invalid()",
      "63": "PdfSourceBuilderTest::::testEx_register_invalid()",
      "64": "PdfSourceBuilderTest::::testEx_register_invalid()",
      "65": "PdfSourceBuilderTest::::testEx_register_invalid()",
      "66": "PdfSourceBuilderTest::::testEx_register_invalid()",
      "68": "PdfSourceBuilderTest::::test_register_array()",
      "69": "PdfSourceBuilderTest::::test_register_array()",
      "70": "PdfSourceBuilderTest::::test_register_array()",
      "71": "PdfSourceBuilderTest::::test_register_array()",
      "72": "PdfSourceBuilderTest::::test_register_array()",
      "73": "PdfSourceBuilderTest::::test_register_array()",
      "74": "PdfSourceBuilderTest::::test_register_array()",
      "75": "PdfSourceBuilderTest::::test_register_array()",
      "76": "PdfSourceBuilderTest::::test_register_array()",
      "77": "PdfSourceBuilderTest::::test_register_array()",
      "78": "PdfSourceBuilderTest::::test_register_array()",
      "80": "PdfSourceBuilderTest::::test_register_range()",
      "81": "PdfSourceBuilderTest::::test_register_range()",
      "82": "PdfSourceBuilderTest::::test_register_range()",
      "83": "PdfSourceBuilderTest::::test_register_range()",
      "84": "PdfSourceBuilderTest::::test_register_range()",
      "85": "PdfSourceBuilderTest::::test_register_range()",
      "86": "PdfSourceBuilderTest::::test_register_range()",
      "87": "PdfSourceBuilderTest::::test_register_range()",
      "88": "PdfSourceBuilderTest::::test_register_range()",
      "89": "PdfSourceBuilderTest::::test_register_range()",
      "90": "PdfSourceBuilderTest::::test_register_range()",
      "91": "PdfSourceBuilderTest::::test_register_range()",
      "93": "PdfSourceBuilderTest::::testEx_register_range_null()",
      "94": "PdfSourceBuilderTest::::testEx_register_range_null()",
      "95": "PdfSourceBuilderTest::::testEx_register_range_null()",
      "96": "PdfSourceBuilderTest::::testEx_register_range_null()",
      "97": "PdfSourceBuilderTest::::testEx_register_range_null()",
      "98": "PdfSourceBuilderTest::::testEx_register_range_null()",
      "99": "PdfSourceBuilderTest::::testEx_register_range_null()",
      "100": "PdfSourceBuilderTest::::testEx_register_range_null()",
      "102": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "103": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "104": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "105": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "106": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "107": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "108": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "109": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "110": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "111": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "112": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "113": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "114": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "115": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "116": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "117": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "118": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "119": "PdfSourceBuilderTest::::test_register_withDuplicateElement()",
      "121": "PdfSourceBuilderTest::::test_register_all()",
      "122": "PdfSourceBuilderTest::::test_register_all()",
      "123": "PdfSourceBuilderTest::::test_register_all()",
      "124": "PdfSourceBuilderTest::::test_register_all()",
      "125": "PdfSourceBuilderTest::::test_register_all()",
      "126": "PdfSourceBuilderTest::::test_register_all()",
      "127": "PdfSourceBuilderTest::::test_register_all()",
      "128": "PdfSourceBuilderTest::::test_register_all()",
      "129": "PdfSourceBuilderTest::::test_register_all()",
      "130": "PdfSourceBuilderTest::::test_register_all()",
      "131": "PdfSourceBuilderTest::::test_register_all()",
      "132": "PdfSourceBuilderTest::::test_register_all()",
      "133": "PdfSourceBuilderTest::::test_register_all()",
      "134": "PdfSourceBuilderTest::::test_register_all()",
      "136": "PdfSourceBuilderTest::::test_dpi()",
      "137": "PdfSourceBuilderTest::::test_dpi()",
      "138": "PdfSourceBuilderTest::::test_dpi()",
      "139": "PdfSourceBuilderTest::::test_dpi()",
      "140": "PdfSourceBuilderTest::::test_dpi()",
      "141": "PdfSourceBuilderTest::::test_dpi()",
      "142": "PdfSourceBuilderTest::::test_dpi()",
      "143": "PdfSourceBuilderTest::::test_dpi()",
      "144": "PdfSourceBuilderTest::::test_dpi()",
      "146": "PdfSourceBuilderTest::::testEx_dpi_invalid()",
      "147": "PdfSourceBuilderTest::::testEx_dpi_invalid()",
      "148": "PdfSourceBuilderTest::::testEx_dpi_invalid()",
      "149": "PdfSourceBuilderTest::::testEx_dpi_invalid()",
      "150": "PdfSourceBuilderTest::::testEx_dpi_invalid()",
      "151": "PdfSourceBuilderTest::::testEx_dpi_invalid()",
      "152": "PdfSourceBuilderTest::::testEx_dpi_invalid()",
      "153": "PdfSourceBuilderTest::::testEx_dpi_invalid()",
      "155": "PdfSourceBuilderTest::::test_release()",
      "156": "PdfSourceBuilderTest::::test_release()",
      "157": "PdfSourceBuilderTest::::test_release()",
      "158": "PdfSourceBuilderTest::::test_release()",
      "159": "PdfSourceBuilderTest::::test_release()",
      "160": "PdfSourceBuilderTest::::test_release()",
      "161": "PdfSourceBuilderTest::::test_release()",
      "162": "PdfSourceBuilderTest::::test_release()",
      "163": "PdfSourceBuilderTest::::test_release()",
      "164": "PdfSourceBuilderTest::::test_release()",
      "165": "PdfSourceBuilderTest::::test_release()",
      "166": "PdfSourceBuilderTest::::test_release()",
      "167": "PdfSourceBuilderTest::::test_release()",
      "168": "PdfSourceBuilderTest::::test_release()",
      "169": "PdfSourceBuilderTest::::test_release()",
      "170": "PdfSourceBuilderTest::::test_release()",
      "171": "PdfSourceBuilderTest::::test_release()",
      "172": "PdfSourceBuilderTest::::test_release()",
      "173": "PdfSourceBuilderTest::::test_release()",
      "175": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "176": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "177": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "178": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "179": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "180": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "181": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "182": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "183": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "184": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "185": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "186": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "187": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "188": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "189": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "190": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "191": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "192": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "193": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "194": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "195": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "196": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "197": "PdfSourceBuilderTest::::test_obtainSourceImages_specified()",
      "199": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "200": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "201": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "202": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "203": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "204": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "205": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "206": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "207": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "208": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "209": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "210": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "211": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "212": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "213": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "214": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "215": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "216": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "217": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "218": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "219": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "220": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "221": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "222": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "223": "PdfSourceBuilderTest::::test_obtainSourceImages_all()",
      "225": "PdfSourceBuilderTest::::testEx_obtainSourceImages_noPageRegistered()",
      "226": "PdfSourceBuilderTest::::testEx_obtainSourceImages_noPageRegistered()",
      "227": "PdfSourceBuilderTest::::testEx_obtainSourceImages_noPageRegistered()",
      "228": "PdfSourceBuilderTest::::testEx_obtainSourceImages_noPageRegistered()",
      "229": "PdfSourceBuilderTest::::testEx_obtainSourceImages_noPageRegistered()",
      "230": "PdfSourceBuilderTest::::testEx_obtainSourceImages_noPageRegistered()",
      "231": "PdfSourceBuilderTest::::testEx_obtainSourceImages_noPageRegistered()",
      "232": "PdfSourceBuilderTest::::testEx_obtainSourceImages_noPageRegistered()",
      "233": "PdfSourceBuilderTest::::testEx_obtainSourceImages_noPageRegistered()",
      "235": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "236": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "237": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "238": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "239": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "240": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "241": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "242": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "243": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "244": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "245": "PdfSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "247": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "248": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "249": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "250": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "251": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "252": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "253": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "254": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "255": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "256": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "257": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "258": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "259": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "260": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "261": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "262": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "263": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "264": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "265": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "266": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "267": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "268": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "269": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "270": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "271": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "272": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "273": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "274": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()",
      "275": "PdfSourceBuilderTest::::testEx_obtainSourceImages_withUnDisposable()"
    },
    "tests": [
      {
        "test_lines": [
          33,
          46
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          60,
          61
        ]
      },
      {
        "test_lines": [
          48,
          57
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          70,
          71,
          72,
          160,
          163
        ]
      },
      {
        "test_lines": [
          59,
          66
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          160,
          161
        ]
      },
      {
        "test_lines": [
          68,
          78
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          76,
          77,
          78,
          80,
          160,
          163
        ]
      },
      {
        "test_lines": [
          80,
          91
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          84,
          85,
          86,
          87,
          89,
          160,
          163
        ]
      },
      {
        "test_lines": [
          93,
          100
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57
        ]
      },
      {
        "test_lines": [
          102,
          119
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          70,
          71,
          72,
          76,
          77,
          78,
          80,
          84,
          85,
          86,
          87,
          89,
          160,
          163
        ]
      },
      {
        "test_lines": [
          121,
          134
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          65,
          66
        ]
      },
      {
        "test_lines": [
          136,
          144
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          93,
          96,
          97
        ]
      },
      {
        "test_lines": [
          146,
          153
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          93,
          94
        ]
      },
      {
        "test_lines": [
          155,
          173
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          60,
          61,
          65,
          66,
          106,
          107,
          109,
          114,
          117,
          119,
          122,
          123,
          124,
          129,
          130,
          131,
          132,
          133,
          139,
          142,
          150,
          151
        ]
      },
      {
        "test_lines": [
          175,
          197
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          76,
          77,
          78,
          80,
          93,
          96,
          97,
          106,
          107,
          109,
          114,
          117,
          119,
          122,
          129,
          130,
          131,
          132,
          133,
          139,
          142,
          143,
          150,
          153,
          156,
          160,
          163
        ]
      },
      {
        "test_lines": [
          199,
          223
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          65,
          66,
          93,
          96,
          97,
          106,
          107,
          109,
          114,
          117,
          119,
          122,
          123,
          124,
          129,
          130,
          131,
          132,
          133,
          139,
          142,
          143,
          150,
          151
        ]
      },
      {
        "test_lines": [
          225,
          233
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          93,
          96,
          97,
          106,
          109,
          142,
          143,
          145,
          150,
          153,
          154
        ]
      },
      {
        "test_lines": [
          235,
          245
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          76,
          77,
          78,
          80,
          93,
          96,
          97,
          106,
          107,
          109,
          114,
          117,
          119,
          122,
          129,
          130,
          131,
          132,
          133,
          134,
          136,
          142,
          143,
          145,
          150,
          153,
          156,
          160,
          163
        ]
      },
      {
        "test_lines": [
          247,
          275
        ],
        "covered_lines": [
          26,
          36,
          41,
          53,
          55,
          56,
          57,
          60,
          61,
          70,
          71,
          72,
          93,
          96,
          97,
          106,
          107,
          109,
          114,
          117,
          119,
          122,
          129,
          130,
          131,
          132,
          133,
          139,
          142,
          150,
          153,
          156,
          160,
          163
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/all/src/main/java/cn/usage/builder/GifSourceBuilder.java": {
    "class_content": [
      "package cn.usage.builder;\n",
      "\n",
      "import cn.core.utils.ObjectUtils;\n",
      "import cn.usage.AbstractSourceBuilder;\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.in.GifSource;\n",
      "import cn.core.tool.Range;\n",
      "import cn.core.utils.CollectionUtils;\n",
      "import cn.core.utils.StringUtils;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.text.MessageFormat;\n",
      "import java.util.HashSet;\n",
      "import java.util.List;\n",
      "import java.util.Objects;\n",
      "import java.util.Set;\n",
      "import java.util.stream.Collectors;\n",
      "\n",
      "/**\n",
      " * A source builder which form GIF source.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class GifSourceBuilder<S> extends AbstractSourceBuilder<GifSourceBuilder<S>> {\n",
      "\n",
      "    /**\n",
      "     * The GIF source.\n",
      "     */\n",
      "    protected final GifSource<S> source;\n",
      "\n",
      "    /**\n",
      "     * Whether to include all frames.\n",
      "     */\n",
      "    private boolean containsAll = false;\n",
      "\n",
      "    /**\n",
      "     * The frame indexes to be extracted.\n",
      "     */\n",
      "    private final Set<Integer> frames = new HashSet<>();\n",
      "\n",
      "    public GifSourceBuilder(GifSource<S> gifSource) {\n",
      "        this.source = gifSource;\n",
      "    }\n",
      "\n",
      "    public GifSourceBuilder<S> registerAll() {\n",
      "        containsAll = true;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public GifSourceBuilder<S> register(int frameIndex) {\n",
      "        checkFrameIndex(frameIndex);\n",
      "        frames.add(frameIndex);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public GifSourceBuilder<S> register(int... frameIndexes) {\n",
      "        for (int index : frameIndexes) {\n",
      "            checkFrameIndex(index);\n",
      "            frames.add(index);\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public GifSourceBuilder<S> register(Range<Integer> range) {\n",
      "        ObjectUtils.excNull(range, \"Range is null.\");\n",
      "        checkFrameIndex(range.getMin());\n",
      "        for (int i = range.getMin(); i <= range.getMax(); i++) {\n",
      "            frames.add(i);\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<BufferedImage> obtainSourceImages() throws IOException {\n",
      "        checkReadiness();\n",
      "\n",
      "        // the max frame size index of the gif\n",
      "        int maxFrameIndex = source.size() - 1;\n",
      "\n",
      "        // export all frame\n",
      "        if (containsAll) {\n",
      "            return source.readAll();\n",
      "        }\n",
      "\n",
      "        // export specified frames\n",
      "        // check all frame was in bound\n",
      "        List<String> invalidPages = frames.stream()\n",
      "                .filter(p -> maxFrameIndex < p)\n",
      "                .sorted()\n",
      "                .map(Objects::toString)\n",
      "                .collect(Collectors.toList());\n",
      "        if (!CollectionUtils.isNullOrEmpty(invalidPages)) {\n",
      "            throw new HandlingException(MessageFormat.format(\n",
      "                    \"Frame indexes:[{0}] has exceeded the max frame index of the gif document.\",\n",
      "                    StringUtils.join(invalidPages, \",\")));\n",
      "        }\n",
      "\n",
      "        return source.read(frames.toArray(new Integer[0]));\n",
      "    }\n",
      "\n",
      "    protected void checkReadiness() {\n",
      "        if (CollectionUtils.isNullOrEmpty(frames) && !containsAll) {\n",
      "            throw new HandlingException(\"No frame indexes are registered.\");\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static void checkFrameIndex(int frameIndex) {\n",
      "        if (frameIndex < 0) {\n",
      "            throw new InvalidSettingException(\"Frame index must be greater than or equal to 0.\");\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.usage.builder;\n",
      "\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.in.GifSource;\n",
      "import cn.core.tool.Range;\n",
      "import cn.pipe.in.gif.InputStreamGifSource;\n",
      "import cn.usage.BufferedImageComparer;\n",
      "import cn.usage.ReflectionUtils;\n",
      "import cn.usage.TestUtils;\n",
      "import com.madgag.gif.fmsware.GifDecoder;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.util.List;\n",
      "import java.util.Set;\n",
      "\n",
      "@SuppressWarnings(\"unchecked\")\n",
      "public class GifSourceBuilderTest {\n",
      "\n",
      "    GifSource<InputStream> source;\n",
      "    @Before\n",
      "    public void init() throws IOException {\n",
      "        InputStream is = TestUtils.getResourceStream(\"input/seasons.gif\");\n",
      "        source = new InputStreamGifSource(is);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_registerAll() {\n",
      "        // given\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source);\n",
      "\n",
      "        // when\n",
      "        boolean before = (boolean) ReflectionUtils.get(\"containsAll\", builder);\n",
      "        builder.registerAll();\n",
      "        boolean after = (boolean) ReflectionUtils.get(\"containsAll\", builder);\n",
      "\n",
      "        // then\n",
      "        Assert.assertFalse(before);\n",
      "        Assert.assertTrue(after);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_register_single() {\n",
      "        // given\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source);\n",
      "\n",
      "        // when\n",
      "        builder.register(3);\n",
      "\n",
      "        // then\n",
      "        Set<Integer> frames = (Set<Integer>) ReflectionUtils.get(\"frames\", builder);\n",
      "\n",
      "        Assert.assertEquals(1, frames.size());\n",
      "        Assert.assertTrue(frames.contains(3));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_register_array() {\n",
      "        // given\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source);\n",
      "\n",
      "        // when\n",
      "        builder.register(2, 4, 1);\n",
      "\n",
      "        // then\n",
      "        Set<Integer> frames = (Set<Integer>) ReflectionUtils.get(\"frames\", builder);\n",
      "\n",
      "        Assert.assertEquals(3, frames.size());\n",
      "        Assert.assertTrue(frames.contains(2));\n",
      "        Assert.assertTrue(frames.contains(4));\n",
      "        Assert.assertTrue(frames.contains(1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_register_range() {\n",
      "        // given\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source);\n",
      "\n",
      "        // when\n",
      "        builder.register(Range.ofInt(2, 4));\n",
      "\n",
      "        // then\n",
      "        Set<Integer> frames = (Set<Integer>) ReflectionUtils.get(\"frames\", builder);\n",
      "\n",
      "        Assert.assertEquals(3, frames.size());\n",
      "        Assert.assertTrue(frames.contains(2));\n",
      "        Assert.assertTrue(frames.contains(3));\n",
      "        Assert.assertTrue(frames.contains(4));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_register_withDuplicateElement() {\n",
      "        // given\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source);\n",
      "\n",
      "        // when\n",
      "        builder.register(2)\n",
      "                .register(2, 5, 1, 2, 1)\n",
      "                .register(Range.ofInt(1, 2));\n",
      "\n",
      "        // then\n",
      "        Set<Integer> frames = (Set<Integer>) ReflectionUtils.get(\"frames\", builder);\n",
      "\n",
      "        Assert.assertEquals(3, frames.size());\n",
      "        Assert.assertTrue(frames.contains(2));\n",
      "        Assert.assertTrue(frames.contains(5));\n",
      "        Assert.assertTrue(frames.contains(1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_register_range_null() {\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source);\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> builder.register((Range<Integer>) null));\n",
      "        Assert.assertEquals(\"Range is null.\", ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_register_invalid() {\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source);\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> builder.register(-1));\n",
      "        Assert.assertEquals(\"Frame index must be greater than or equal to 0.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_obtainSourceImages_specified() throws IOException {\n",
      "        // given\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source);\n",
      "        int[] frameIndexes = {0, 1, 3};\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = builder.register(frameIndexes)\n",
      "                .obtainSourceImages();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(3, target.size());\n",
      "\n",
      "        GifDecoder decoder = new GifDecoder();\n",
      "        decoder.read(TestUtils.getResourceStream(\"input/seasons.gif\"));\n",
      "        BufferedImage frame0 = decoder.getFrame(0);\n",
      "        BufferedImage frame1 = decoder.getFrame(1);\n",
      "        BufferedImage frame3 = decoder.getFrame(3);\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(frame0, target.get(0)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(frame1, target.get(1)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(frame3, target.get(2)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_obtainSourceImages_all() throws IOException {\n",
      "        // given\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source);\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = builder.registerAll()\n",
      "                .obtainSourceImages();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(4, target.size());\n",
      "\n",
      "        GifDecoder decoder = new GifDecoder();\n",
      "        decoder.read(TestUtils.getResourceStream(\"input/seasons.gif\"));\n",
      "\n",
      "        for (int i = 0; i < decoder.getFrameCount(); i++) {\n",
      "            BufferedImage frame = decoder.getFrame(i);\n",
      "            Assert.assertTrue(BufferedImageComparer.isSame(frame, target.get(i)));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainSourceImages_frameIndexOutOfBound() {\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source)\n",
      "                .register(0, 1, 3, 6, 5);\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                builder::obtainSourceImages);\n",
      "        Assert.assertEquals(\"Frame indexes:[5,6] has exceeded the max frame index of the gif document.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainSourceImages_noFrameRegistered() {\n",
      "        GifSourceBuilder<InputStream> builder = new GifSourceBuilder<>(source);\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                builder::obtainSourceImages);\n",
      "        Assert.assertEquals(\"No frame indexes are registered.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "GifSourceBuilder::::registerAll()": [
        47,
        50
      ],
      "GifSourceBuilder::::register(int)": [
        52,
        56
      ],
      "GifSourceBuilder::::register(int[])": [
        58,
        64
      ],
      "GifSourceBuilder::::obtainSourceImages()": [
        75,
        101
      ],
      "GifSourceBuilder::::checkReadiness()": [
        103,
        107
      ],
      "GifSourceBuilder::::checkFrameIndex(int)": [
        109,
        113
      ]
    },
    "test_method_lines_dic": {
      "GifSourceBuilderTest::::init()": [
        25,
        29
      ],
      "GifSourceBuilderTest::::test_registerAll()": [
        31,
        44
      ],
      "GifSourceBuilderTest::::test_register_single()": [
        46,
        59
      ],
      "GifSourceBuilderTest::::test_register_array()": [
        61,
        76
      ],
      "GifSourceBuilderTest::::test_register_range()": [
        78,
        93
      ],
      "GifSourceBuilderTest::::test_register_withDuplicateElement()": [
        95,
        112
      ],
      "GifSourceBuilderTest::::testEx_register_range_null()": [
        114,
        120
      ],
      "GifSourceBuilderTest::::testEx_register_invalid()": [
        122,
        129
      ],
      "GifSourceBuilderTest::::test_obtainSourceImages_specified()": [
        131,
        153
      ],
      "GifSourceBuilderTest::::test_obtainSourceImages_all()": [
        155,
        174
      ],
      "GifSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()": [
        176,
        184
      ],
      "GifSourceBuilderTest::::testEx_obtainSourceImages_noFrameRegistered()": [
        186,
        193
      ]
    },
    "reverse_method_lines_dic": {
      "47": "GifSourceBuilder::::registerAll()",
      "48": "GifSourceBuilder::::registerAll()",
      "49": "GifSourceBuilder::::registerAll()",
      "50": "GifSourceBuilder::::registerAll()",
      "52": "GifSourceBuilder::::register(int)",
      "53": "GifSourceBuilder::::register(int)",
      "54": "GifSourceBuilder::::register(int)",
      "55": "GifSourceBuilder::::register(int)",
      "56": "GifSourceBuilder::::register(int)",
      "58": "GifSourceBuilder::::register(int[])",
      "59": "GifSourceBuilder::::register(int[])",
      "60": "GifSourceBuilder::::register(int[])",
      "61": "GifSourceBuilder::::register(int[])",
      "62": "GifSourceBuilder::::register(int[])",
      "63": "GifSourceBuilder::::register(int[])",
      "64": "GifSourceBuilder::::register(int[])",
      "75": "GifSourceBuilder::::obtainSourceImages()",
      "76": "GifSourceBuilder::::obtainSourceImages()",
      "77": "GifSourceBuilder::::obtainSourceImages()",
      "78": "GifSourceBuilder::::obtainSourceImages()",
      "79": "GifSourceBuilder::::obtainSourceImages()",
      "80": "GifSourceBuilder::::obtainSourceImages()",
      "81": "GifSourceBuilder::::obtainSourceImages()",
      "82": "GifSourceBuilder::::obtainSourceImages()",
      "83": "GifSourceBuilder::::obtainSourceImages()",
      "84": "GifSourceBuilder::::obtainSourceImages()",
      "85": "GifSourceBuilder::::obtainSourceImages()",
      "86": "GifSourceBuilder::::obtainSourceImages()",
      "87": "GifSourceBuilder::::obtainSourceImages()",
      "88": "GifSourceBuilder::::obtainSourceImages()",
      "89": "GifSourceBuilder::::obtainSourceImages()",
      "90": "GifSourceBuilder::::obtainSourceImages()",
      "91": "GifSourceBuilder::::obtainSourceImages()",
      "92": "GifSourceBuilder::::obtainSourceImages()",
      "93": "GifSourceBuilder::::obtainSourceImages()",
      "94": "GifSourceBuilder::::obtainSourceImages()",
      "95": "GifSourceBuilder::::obtainSourceImages()",
      "96": "GifSourceBuilder::::obtainSourceImages()",
      "97": "GifSourceBuilder::::obtainSourceImages()",
      "98": "GifSourceBuilder::::obtainSourceImages()",
      "99": "GifSourceBuilder::::obtainSourceImages()",
      "100": "GifSourceBuilder::::obtainSourceImages()",
      "101": "GifSourceBuilder::::obtainSourceImages()",
      "103": "GifSourceBuilder::::checkReadiness()",
      "104": "GifSourceBuilder::::checkReadiness()",
      "105": "GifSourceBuilder::::checkReadiness()",
      "106": "GifSourceBuilder::::checkReadiness()",
      "107": "GifSourceBuilder::::checkReadiness()",
      "109": "GifSourceBuilder::::checkFrameIndex(int)",
      "110": "GifSourceBuilder::::checkFrameIndex(int)",
      "111": "GifSourceBuilder::::checkFrameIndex(int)",
      "112": "GifSourceBuilder::::checkFrameIndex(int)",
      "113": "GifSourceBuilder::::checkFrameIndex(int)"
    },
    "test_reverse_method_lines_dic": {
      "25": "GifSourceBuilderTest::::init()",
      "26": "GifSourceBuilderTest::::init()",
      "27": "GifSourceBuilderTest::::init()",
      "28": "GifSourceBuilderTest::::init()",
      "29": "GifSourceBuilderTest::::init()",
      "31": "GifSourceBuilderTest::::test_registerAll()",
      "32": "GifSourceBuilderTest::::test_registerAll()",
      "33": "GifSourceBuilderTest::::test_registerAll()",
      "34": "GifSourceBuilderTest::::test_registerAll()",
      "35": "GifSourceBuilderTest::::test_registerAll()",
      "36": "GifSourceBuilderTest::::test_registerAll()",
      "37": "GifSourceBuilderTest::::test_registerAll()",
      "38": "GifSourceBuilderTest::::test_registerAll()",
      "39": "GifSourceBuilderTest::::test_registerAll()",
      "40": "GifSourceBuilderTest::::test_registerAll()",
      "41": "GifSourceBuilderTest::::test_registerAll()",
      "42": "GifSourceBuilderTest::::test_registerAll()",
      "43": "GifSourceBuilderTest::::test_registerAll()",
      "44": "GifSourceBuilderTest::::test_registerAll()",
      "46": "GifSourceBuilderTest::::test_register_single()",
      "47": "GifSourceBuilderTest::::test_register_single()",
      "48": "GifSourceBuilderTest::::test_register_single()",
      "49": "GifSourceBuilderTest::::test_register_single()",
      "50": "GifSourceBuilderTest::::test_register_single()",
      "51": "GifSourceBuilderTest::::test_register_single()",
      "52": "GifSourceBuilderTest::::test_register_single()",
      "53": "GifSourceBuilderTest::::test_register_single()",
      "54": "GifSourceBuilderTest::::test_register_single()",
      "55": "GifSourceBuilderTest::::test_register_single()",
      "56": "GifSourceBuilderTest::::test_register_single()",
      "57": "GifSourceBuilderTest::::test_register_single()",
      "58": "GifSourceBuilderTest::::test_register_single()",
      "59": "GifSourceBuilderTest::::test_register_single()",
      "61": "GifSourceBuilderTest::::test_register_array()",
      "62": "GifSourceBuilderTest::::test_register_array()",
      "63": "GifSourceBuilderTest::::test_register_array()",
      "64": "GifSourceBuilderTest::::test_register_array()",
      "65": "GifSourceBuilderTest::::test_register_array()",
      "66": "GifSourceBuilderTest::::test_register_array()",
      "67": "GifSourceBuilderTest::::test_register_array()",
      "68": "GifSourceBuilderTest::::test_register_array()",
      "69": "GifSourceBuilderTest::::test_register_array()",
      "70": "GifSourceBuilderTest::::test_register_array()",
      "71": "GifSourceBuilderTest::::test_register_array()",
      "72": "GifSourceBuilderTest::::test_register_array()",
      "73": "GifSourceBuilderTest::::test_register_array()",
      "74": "GifSourceBuilderTest::::test_register_array()",
      "75": "GifSourceBuilderTest::::test_register_array()",
      "76": "GifSourceBuilderTest::::test_register_array()",
      "78": "GifSourceBuilderTest::::test_register_range()",
      "79": "GifSourceBuilderTest::::test_register_range()",
      "80": "GifSourceBuilderTest::::test_register_range()",
      "81": "GifSourceBuilderTest::::test_register_range()",
      "82": "GifSourceBuilderTest::::test_register_range()",
      "83": "GifSourceBuilderTest::::test_register_range()",
      "84": "GifSourceBuilderTest::::test_register_range()",
      "85": "GifSourceBuilderTest::::test_register_range()",
      "86": "GifSourceBuilderTest::::test_register_range()",
      "87": "GifSourceBuilderTest::::test_register_range()",
      "88": "GifSourceBuilderTest::::test_register_range()",
      "89": "GifSourceBuilderTest::::test_register_range()",
      "90": "GifSourceBuilderTest::::test_register_range()",
      "91": "GifSourceBuilderTest::::test_register_range()",
      "92": "GifSourceBuilderTest::::test_register_range()",
      "93": "GifSourceBuilderTest::::test_register_range()",
      "95": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "96": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "97": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "98": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "99": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "100": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "101": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "102": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "103": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "104": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "105": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "106": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "107": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "108": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "109": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "110": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "111": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "112": "GifSourceBuilderTest::::test_register_withDuplicateElement()",
      "114": "GifSourceBuilderTest::::testEx_register_range_null()",
      "115": "GifSourceBuilderTest::::testEx_register_range_null()",
      "116": "GifSourceBuilderTest::::testEx_register_range_null()",
      "117": "GifSourceBuilderTest::::testEx_register_range_null()",
      "118": "GifSourceBuilderTest::::testEx_register_range_null()",
      "119": "GifSourceBuilderTest::::testEx_register_range_null()",
      "120": "GifSourceBuilderTest::::testEx_register_range_null()",
      "122": "GifSourceBuilderTest::::testEx_register_invalid()",
      "123": "GifSourceBuilderTest::::testEx_register_invalid()",
      "124": "GifSourceBuilderTest::::testEx_register_invalid()",
      "125": "GifSourceBuilderTest::::testEx_register_invalid()",
      "126": "GifSourceBuilderTest::::testEx_register_invalid()",
      "127": "GifSourceBuilderTest::::testEx_register_invalid()",
      "128": "GifSourceBuilderTest::::testEx_register_invalid()",
      "129": "GifSourceBuilderTest::::testEx_register_invalid()",
      "131": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "132": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "133": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "134": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "135": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "136": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "137": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "138": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "139": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "140": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "141": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "142": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "143": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "144": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "145": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "146": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "147": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "148": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "149": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "150": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "151": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "152": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "153": "GifSourceBuilderTest::::test_obtainSourceImages_specified()",
      "155": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "156": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "157": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "158": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "159": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "160": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "161": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "162": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "163": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "164": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "165": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "166": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "167": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "168": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "169": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "170": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "171": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "172": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "173": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "174": "GifSourceBuilderTest::::test_obtainSourceImages_all()",
      "176": "GifSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "177": "GifSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "178": "GifSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "179": "GifSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "180": "GifSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "181": "GifSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "182": "GifSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "183": "GifSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "184": "GifSourceBuilderTest::::testEx_obtainSourceImages_frameIndexOutOfBound()",
      "186": "GifSourceBuilderTest::::testEx_obtainSourceImages_noFrameRegistered()",
      "187": "GifSourceBuilderTest::::testEx_obtainSourceImages_noFrameRegistered()",
      "188": "GifSourceBuilderTest::::testEx_obtainSourceImages_noFrameRegistered()",
      "189": "GifSourceBuilderTest::::testEx_obtainSourceImages_noFrameRegistered()",
      "190": "GifSourceBuilderTest::::testEx_obtainSourceImages_noFrameRegistered()",
      "191": "GifSourceBuilderTest::::testEx_obtainSourceImages_noFrameRegistered()",
      "192": "GifSourceBuilderTest::::testEx_obtainSourceImages_noFrameRegistered()",
      "193": "GifSourceBuilderTest::::testEx_obtainSourceImages_noFrameRegistered()"
    },
    "tests": [
      {
        "test_lines": [
          31,
          44
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45,
          48,
          49
        ]
      },
      {
        "test_lines": [
          46,
          59
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45,
          53,
          54,
          55,
          110,
          113
        ]
      },
      {
        "test_lines": [
          61,
          76
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45,
          59,
          60,
          61,
          63,
          110,
          113
        ]
      },
      {
        "test_lines": [
          78,
          93
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45,
          67,
          68,
          69,
          70,
          72,
          110,
          113
        ]
      },
      {
        "test_lines": [
          95,
          112
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45,
          53,
          54,
          55,
          59,
          60,
          61,
          63,
          67,
          68,
          69,
          70,
          72,
          110,
          113
        ]
      },
      {
        "test_lines": [
          114,
          120
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45
        ]
      },
      {
        "test_lines": [
          122,
          129
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45,
          110,
          111
        ]
      },
      {
        "test_lines": [
          131,
          153
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45,
          59,
          60,
          61,
          63,
          77,
          80,
          83,
          89,
          90,
          91,
          92,
          93,
          94,
          100,
          104,
          107,
          110,
          113
        ]
      },
      {
        "test_lines": [
          155,
          174
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45,
          48,
          49,
          77,
          80,
          83,
          84,
          104,
          107
        ]
      },
      {
        "test_lines": [
          176,
          184
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45,
          59,
          60,
          61,
          63,
          77,
          80,
          83,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          97,
          104,
          107,
          110,
          113
        ]
      },
      {
        "test_lines": [
          186,
          193
        ],
        "covered_lines": [
          36,
          41,
          43,
          44,
          45,
          104,
          105
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/all/src/main/java/cn/usage/builder/ImageSourceBuilder.java": {
    "class_content": [
      "package cn.usage.builder;\n",
      "\n",
      "import cn.usage.AbstractSourceBuilder;\n",
      "import cn.core.in.BufferedImageSource;\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.utils.StringUtils;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.text.MessageFormat;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * A source builder which form buffered image source.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class ImageSourceBuilder<S> extends AbstractSourceBuilder<ImageSourceBuilder<S>> {\n",
      "\n",
      "    /**\n",
      "     * Whether to use the original format.\n",
      "     */\n",
      "    protected boolean useOriginalFormat;\n",
      "\n",
      "    /**\n",
      "     * The iterable of the buffered image source.\n",
      "     */\n",
      "    protected final Iterable<BufferedImageSource<S>> sources;\n",
      "\n",
      "    public ImageSourceBuilder(Iterable<BufferedImageSource<S>> sources) {\n",
      "        this.sources = sources;\n",
      "    }\n",
      "\n",
      "\n",
      "    @Override\n",
      "    protected List<BufferedImage> obtainSourceImages() throws IOException {\n",
      "        // obtain the source images\n",
      "        List<BufferedImage> originalImages = new ArrayList<>();\n",
      "        List<String> formatNames = new ArrayList<>();\n",
      "        for (BufferedImageSource<S> o : sources) {\n",
      "            originalImages.add(o.read());\n",
      "            formatNames.add(o.getOriginalFormatName());\n",
      "        }\n",
      "        // setting the format name\n",
      "        if (useOriginalFormat) {\n",
      "            String[] formats = formatNames.stream().filter(StringUtils::isNotEmpty).distinct().toArray(String[]::new);\n",
      "            if (formats.length == 0) {\n",
      "                throw new HandlingException(\"No available original format.\");\n",
      "            } else if (formats.length > 1) {\n",
      "                throw new HandlingException(MessageFormat.format(\"Multiple available original formats found:[{0}].\",\n",
      "                        StringUtils.join(formats, \",\")));\n",
      "            } else {\n",
      "                formatName(formats[0]);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return originalImages;\n",
      "    }\n",
      "\n",
      "    public ImageSourceBuilder<S> useOriginalFormat() {\n",
      "        useOriginalFormat = true;\n",
      "        return this;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.usage.builder;\n",
      "\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.in.BufferedImageSource;\n",
      "import cn.core.in.InputStreamImageSource;\n",
      "import cn.core.in.ThisBufferedImageSource;\n",
      "import cn.usage.BufferedImageComparer;\n",
      "import cn.usage.ReflectionUtils;\n",
      "import cn.usage.TestUtils;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.List;\n",
      "\n",
      "public class ImageSourceBuilderTest {\n",
      "\n",
      "    Iterable<BufferedImageSource<InputStream>> sources;\n",
      "    @Before\n",
      "    public void init() throws IOException {\n",
      "        sources = Arrays.asList(\n",
      "                new InputStreamImageSource(TestUtils.getResourceStream(\"input/nothing.jpg\")),\n",
      "                new InputStreamImageSource(TestUtils.getResourceStream(\"input/frame.jpg\"))\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_useOriginalFormat() {\n",
      "        // given\n",
      "        ImageSourceBuilder<InputStream> builder = new ImageSourceBuilder<>(sources);\n",
      "\n",
      "        // when\n",
      "        boolean before = (boolean) ReflectionUtils.get(\"useOriginalFormat\", builder);\n",
      "        builder.useOriginalFormat();\n",
      "        boolean after = (boolean) ReflectionUtils.get(\"useOriginalFormat\", builder);\n",
      "\n",
      "        // then\n",
      "        Assert.assertFalse(before);\n",
      "        Assert.assertTrue(after);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_obtainSourceImages() throws IOException {\n",
      "        // given\n",
      "        ImageSourceBuilder<InputStream> builder = new ImageSourceBuilder<>(sources)\n",
      "                .useOriginalFormat();\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = builder.obtainSourceImages();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(2, target.size());\n",
      "        Assert.assertEquals(\"JPEG\",\n",
      "                ReflectionUtils.getFromSuper(\"formatName\", builder));\n",
      "\n",
      "        // and then\n",
      "        BufferedImage image0 = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n",
      "        BufferedImage image1 = TestUtils.getImageFromResource(\"input/frame.jpg\");\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image0, target.get(0)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image1, target.get(1)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainSourceImages_multipleFormats() throws IOException {\n",
      "\n",
      "        List<BufferedImageSource<InputStream>> list = Arrays.asList(\n",
      "                new InputStreamImageSource(TestUtils.getResourceStream(\"input/nothing.jpg\")),\n",
      "                new InputStreamImageSource(TestUtils.getResourceStream(\"input/whiteboard.bmp\"))\n",
      "        );\n",
      "\n",
      "        ImageSourceBuilder<InputStream> builder = new ImageSourceBuilder<>(list)\n",
      "                .useOriginalFormat();\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                builder::obtainSourceImages);\n",
      "        Assert.assertTrue(ex.getMessage()\n",
      "                .startsWith(\"Multiple available original formats found:\")\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainSourceImages_noFormat() {\n",
      "\n",
      "        // Instantiate some unformatted BufferedImage(s).\n",
      "        List<BufferedImageSource<BufferedImage>> list = Arrays.asList(\n",
      "                new ThisBufferedImageSource(new BufferedImage(10, 20, BufferedImage.TYPE_INT_RGB)),\n",
      "                new ThisBufferedImageSource(new BufferedImage(20, 30, BufferedImage.TYPE_INT_RGB))\n",
      "        );\n",
      "\n",
      "        // Test for no original format.\n",
      "        ImageSourceBuilder<BufferedImage> builder = new ImageSourceBuilder<>(list)\n",
      "                .useOriginalFormat();\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                builder::obtainSourceImages);\n",
      "        Assert.assertEquals(\"No available original format.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "ImageSourceBuilder::::obtainSourceImages()": [
        36,
        59
      ],
      "ImageSourceBuilder::::useOriginalFormat()": [
        61,
        64
      ]
    },
    "test_method_lines_dic": {
      "ImageSourceBuilderTest::::init()": [
        23,
        29
      ],
      "ImageSourceBuilderTest::::test_useOriginalFormat()": [
        31,
        44
      ],
      "ImageSourceBuilderTest::::test_obtainSourceImages()": [
        46,
        66
      ],
      "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()": [
        68,
        83
      ],
      "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()": [
        85,
        101
      ]
    },
    "reverse_method_lines_dic": {
      "36": "ImageSourceBuilder::::obtainSourceImages()",
      "37": "ImageSourceBuilder::::obtainSourceImages()",
      "38": "ImageSourceBuilder::::obtainSourceImages()",
      "39": "ImageSourceBuilder::::obtainSourceImages()",
      "40": "ImageSourceBuilder::::obtainSourceImages()",
      "41": "ImageSourceBuilder::::obtainSourceImages()",
      "42": "ImageSourceBuilder::::obtainSourceImages()",
      "43": "ImageSourceBuilder::::obtainSourceImages()",
      "44": "ImageSourceBuilder::::obtainSourceImages()",
      "45": "ImageSourceBuilder::::obtainSourceImages()",
      "46": "ImageSourceBuilder::::obtainSourceImages()",
      "47": "ImageSourceBuilder::::obtainSourceImages()",
      "48": "ImageSourceBuilder::::obtainSourceImages()",
      "49": "ImageSourceBuilder::::obtainSourceImages()",
      "50": "ImageSourceBuilder::::obtainSourceImages()",
      "51": "ImageSourceBuilder::::obtainSourceImages()",
      "52": "ImageSourceBuilder::::obtainSourceImages()",
      "53": "ImageSourceBuilder::::obtainSourceImages()",
      "54": "ImageSourceBuilder::::obtainSourceImages()",
      "55": "ImageSourceBuilder::::obtainSourceImages()",
      "56": "ImageSourceBuilder::::obtainSourceImages()",
      "57": "ImageSourceBuilder::::obtainSourceImages()",
      "58": "ImageSourceBuilder::::obtainSourceImages()",
      "59": "ImageSourceBuilder::::obtainSourceImages()",
      "61": "ImageSourceBuilder::::useOriginalFormat()",
      "62": "ImageSourceBuilder::::useOriginalFormat()",
      "63": "ImageSourceBuilder::::useOriginalFormat()",
      "64": "ImageSourceBuilder::::useOriginalFormat()"
    },
    "test_reverse_method_lines_dic": {
      "23": "ImageSourceBuilderTest::::init()",
      "24": "ImageSourceBuilderTest::::init()",
      "25": "ImageSourceBuilderTest::::init()",
      "26": "ImageSourceBuilderTest::::init()",
      "27": "ImageSourceBuilderTest::::init()",
      "28": "ImageSourceBuilderTest::::init()",
      "29": "ImageSourceBuilderTest::::init()",
      "31": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "32": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "33": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "34": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "35": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "36": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "37": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "38": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "39": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "40": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "41": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "42": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "43": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "44": "ImageSourceBuilderTest::::test_useOriginalFormat()",
      "46": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "47": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "48": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "49": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "50": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "51": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "52": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "53": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "54": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "55": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "56": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "57": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "58": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "59": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "60": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "61": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "62": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "63": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "64": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "65": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "66": "ImageSourceBuilderTest::::test_obtainSourceImages()",
      "68": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "69": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "70": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "71": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "72": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "73": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "74": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "75": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "76": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "77": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "78": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "79": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "80": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "81": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "82": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "83": "ImageSourceBuilderTest::::testEx_obtainSourceImages_multipleFormats()",
      "85": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "86": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "87": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "88": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "89": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "90": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "91": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "92": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "93": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "94": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "95": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "96": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "97": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "98": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "99": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "100": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()",
      "101": "ImageSourceBuilderTest::::testEx_obtainSourceImages_noFormat()"
    },
    "tests": [
      {
        "test_lines": [
          31,
          44
        ],
        "covered_lines": [
          31,
          32,
          33,
          62,
          63
        ]
      },
      {
        "test_lines": [
          46,
          66
        ],
        "covered_lines": [
          31,
          32,
          33,
          39,
          40,
          41,
          42,
          43,
          44,
          46,
          47,
          48,
          50,
          54,
          58,
          62,
          63
        ]
      },
      {
        "test_lines": [
          68,
          83
        ],
        "covered_lines": [
          31,
          32,
          33,
          39,
          40,
          41,
          42,
          43,
          44,
          46,
          47,
          48,
          50,
          51,
          52,
          62,
          63
        ]
      },
      {
        "test_lines": [
          85,
          101
        ],
        "covered_lines": [
          31,
          32,
          33,
          39,
          40,
          41,
          42,
          43,
          44,
          46,
          47,
          48,
          49,
          62,
          63
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/all/src/main/java/cn/usage/builder/EmptySourceBuilder.java": {
    "class_content": [
      "package cn.usage.builder;\n",
      "\n",
      "import cn.usage.AbstractSourceBuilder;\n",
      "import cn.core.ImageGenerator;\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.utils.CollectionUtils;\n",
      "import cn.core.utils.ObjectUtils;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * A source builder which have no source.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class EmptySourceBuilder extends AbstractSourceBuilder<EmptySourceBuilder> {\n",
      "\n",
      "    protected List<ImageGenerator> captors = new ArrayList<>();\n",
      "\n",
      "    public EmptySourceBuilder register(ImageGenerator ig) {\n",
      "        ObjectUtils.excNull(ig, \"ImageGenerator is null.\");\n",
      "        captors.add(ig);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public EmptySourceBuilder register(ImageGenerator... igs) {\n",
      "        ObjectUtils.excNull(igs, \"No ImageGenerator was found.\");\n",
      "        CollectionUtils.excEmpty(igs, \"Empty ImageGenerator array.\");\n",
      "        captors.addAll(Arrays.asList(igs));\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    protected void checkReadiness() {\n",
      "        if (CollectionUtils.isNullOrEmpty(captors)) {\n",
      "            throw new HandlingException(\"No captors are registered.\");\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<BufferedImage> obtainSourceImages(){\n",
      "        checkReadiness();\n",
      "        List<BufferedImage> images = new ArrayList<>();\n",
      "        for (ImageGenerator ca : captors) {\n",
      "            images.add(ca.generate());\n",
      "        }\n",
      "        return images;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package cn.usage.builder;\n",
      "\n",
      "import cn.core.ImageGenerator;\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.pipe.captor.TransparentImageGenerator;\n",
      "import cn.usage.BufferedImageComparer;\n",
      "import cn.usage.ReflectionUtils;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.util.List;\n",
      "\n",
      "@SuppressWarnings(\"unchecked\")\n",
      "public class EmptySourceBuilderTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_register_single() {\n",
      "        // given\n",
      "        ImageGenerator ge = new TransparentImageGenerator.Builder()\n",
      "                .width(30).height(40)\n",
      "                .build();\n",
      "\n",
      "        // when\n",
      "        EmptySourceBuilder builder = new EmptySourceBuilder()\n",
      "                .register(ge);\n",
      "\n",
      "        // then\n",
      "        List<ImageGenerator> handlers = (List<ImageGenerator>) ReflectionUtils.get(\"captors\", builder);\n",
      "\n",
      "        Assert.assertEquals(1, handlers.size());\n",
      "        Assert.assertEquals(ge, handlers.get(0));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_register_single_null() {\n",
      "        EmptySourceBuilder builder = new EmptySourceBuilder();\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> builder.register((ImageGenerator) null));\n",
      "        Assert.assertEquals(\"ImageGenerator is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_register_array() {\n",
      "        // given\n",
      "        ImageGenerator ge = new TransparentImageGenerator.Builder()\n",
      "                .width(30).height(40)\n",
      "                .build();\n",
      "\n",
      "        // when\n",
      "        EmptySourceBuilder builder = new EmptySourceBuilder()\n",
      "                .register(ge, ge, ge);\n",
      "\n",
      "        // then\n",
      "        List<ImageGenerator> handlers = (List<ImageGenerator>) ReflectionUtils.get(\"captors\", builder);\n",
      "\n",
      "        Assert.assertEquals(3, handlers.size());\n",
      "        Assert.assertEquals(ge, handlers.get(0));\n",
      "        Assert.assertEquals(ge, handlers.get(1));\n",
      "        Assert.assertEquals(ge, handlers.get(2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_register_array_nullOrEmpty() {\n",
      "        EmptySourceBuilder builder = new EmptySourceBuilder();\n",
      "        // null\n",
      "        NullPointerException ex1 = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> builder.register((ImageGenerator[]) null));\n",
      "        Assert.assertEquals(\"No ImageGenerator was found.\",\n",
      "                ex1.getMessage());\n",
      "\n",
      "        // empty\n",
      "        InvalidSettingException ex2 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                builder::register);\n",
      "        Assert.assertEquals(\"Empty ImageGenerator array.\",\n",
      "                ex2.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_obtainSourceImages() {\n",
      "        // given\n",
      "        ImageGenerator ge = new TransparentImageGenerator.Builder()\n",
      "                .width(30).height(40)\n",
      "                .build();\n",
      "        BufferedImage standard = ge.generate();\n",
      "\n",
      "        // when\n",
      "        EmptySourceBuilder builder = new EmptySourceBuilder()\n",
      "                .register(ge);\n",
      "\n",
      "        // then\n",
      "        List<BufferedImage> target = builder.obtainSourceImages();\n",
      "\n",
      "        Assert.assertEquals(1, target.size());\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(standard, target.get(0)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_obtainSourceImages_withNoCaptor() {\n",
      "        EmptySourceBuilder builder = new EmptySourceBuilder();\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                builder::obtainSourceImages);\n",
      "        Assert.assertEquals(\"No captors are registered.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "EmptySourceBuilder::::checkReadiness()": [
        36,
        40
      ],
      "EmptySourceBuilder::::obtainSourceImages()": [
        42,
        50
      ]
    },
    "test_method_lines_dic": {
      "EmptySourceBuilderTest::::test_register_single()": [
        17,
        33
      ],
      "EmptySourceBuilderTest::::testEx_register_single_null()": [
        35,
        42
      ],
      "EmptySourceBuilderTest::::test_register_array()": [
        44,
        62
      ],
      "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()": [
        64,
        78
      ],
      "EmptySourceBuilderTest::::test_obtainSourceImages()": [
        80,
        97
      ],
      "EmptySourceBuilderTest::::testEx_obtainSourceImages_withNoCaptor()": [
        99,
        106
      ]
    },
    "reverse_method_lines_dic": {
      "36": "EmptySourceBuilder::::checkReadiness()",
      "37": "EmptySourceBuilder::::checkReadiness()",
      "38": "EmptySourceBuilder::::checkReadiness()",
      "39": "EmptySourceBuilder::::checkReadiness()",
      "40": "EmptySourceBuilder::::checkReadiness()",
      "42": "EmptySourceBuilder::::obtainSourceImages()",
      "43": "EmptySourceBuilder::::obtainSourceImages()",
      "44": "EmptySourceBuilder::::obtainSourceImages()",
      "45": "EmptySourceBuilder::::obtainSourceImages()",
      "46": "EmptySourceBuilder::::obtainSourceImages()",
      "47": "EmptySourceBuilder::::obtainSourceImages()",
      "48": "EmptySourceBuilder::::obtainSourceImages()",
      "49": "EmptySourceBuilder::::obtainSourceImages()",
      "50": "EmptySourceBuilder::::obtainSourceImages()"
    },
    "test_reverse_method_lines_dic": {
      "17": "EmptySourceBuilderTest::::test_register_single()",
      "18": "EmptySourceBuilderTest::::test_register_single()",
      "19": "EmptySourceBuilderTest::::test_register_single()",
      "20": "EmptySourceBuilderTest::::test_register_single()",
      "21": "EmptySourceBuilderTest::::test_register_single()",
      "22": "EmptySourceBuilderTest::::test_register_single()",
      "23": "EmptySourceBuilderTest::::test_register_single()",
      "24": "EmptySourceBuilderTest::::test_register_single()",
      "25": "EmptySourceBuilderTest::::test_register_single()",
      "26": "EmptySourceBuilderTest::::test_register_single()",
      "27": "EmptySourceBuilderTest::::test_register_single()",
      "28": "EmptySourceBuilderTest::::test_register_single()",
      "29": "EmptySourceBuilderTest::::test_register_single()",
      "30": "EmptySourceBuilderTest::::test_register_single()",
      "31": "EmptySourceBuilderTest::::test_register_single()",
      "32": "EmptySourceBuilderTest::::test_register_single()",
      "33": "EmptySourceBuilderTest::::test_register_single()",
      "35": "EmptySourceBuilderTest::::testEx_register_single_null()",
      "36": "EmptySourceBuilderTest::::testEx_register_single_null()",
      "37": "EmptySourceBuilderTest::::testEx_register_single_null()",
      "38": "EmptySourceBuilderTest::::testEx_register_single_null()",
      "39": "EmptySourceBuilderTest::::testEx_register_single_null()",
      "40": "EmptySourceBuilderTest::::testEx_register_single_null()",
      "41": "EmptySourceBuilderTest::::testEx_register_single_null()",
      "42": "EmptySourceBuilderTest::::testEx_register_single_null()",
      "44": "EmptySourceBuilderTest::::test_register_array()",
      "45": "EmptySourceBuilderTest::::test_register_array()",
      "46": "EmptySourceBuilderTest::::test_register_array()",
      "47": "EmptySourceBuilderTest::::test_register_array()",
      "48": "EmptySourceBuilderTest::::test_register_array()",
      "49": "EmptySourceBuilderTest::::test_register_array()",
      "50": "EmptySourceBuilderTest::::test_register_array()",
      "51": "EmptySourceBuilderTest::::test_register_array()",
      "52": "EmptySourceBuilderTest::::test_register_array()",
      "53": "EmptySourceBuilderTest::::test_register_array()",
      "54": "EmptySourceBuilderTest::::test_register_array()",
      "55": "EmptySourceBuilderTest::::test_register_array()",
      "56": "EmptySourceBuilderTest::::test_register_array()",
      "57": "EmptySourceBuilderTest::::test_register_array()",
      "58": "EmptySourceBuilderTest::::test_register_array()",
      "59": "EmptySourceBuilderTest::::test_register_array()",
      "60": "EmptySourceBuilderTest::::test_register_array()",
      "61": "EmptySourceBuilderTest::::test_register_array()",
      "62": "EmptySourceBuilderTest::::test_register_array()",
      "64": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "65": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "66": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "67": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "68": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "69": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "70": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "71": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "72": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "73": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "74": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "75": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "76": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "77": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "78": "EmptySourceBuilderTest::::testEx_register_array_nullOrEmpty()",
      "80": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "81": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "82": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "83": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "84": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "85": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "86": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "87": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "88": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "89": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "90": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "91": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "92": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "93": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "94": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "95": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "96": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "97": "EmptySourceBuilderTest::::test_obtainSourceImages()",
      "99": "EmptySourceBuilderTest::::testEx_obtainSourceImages_withNoCaptor()",
      "100": "EmptySourceBuilderTest::::testEx_obtainSourceImages_withNoCaptor()",
      "101": "EmptySourceBuilderTest::::testEx_obtainSourceImages_withNoCaptor()",
      "102": "EmptySourceBuilderTest::::testEx_obtainSourceImages_withNoCaptor()",
      "103": "EmptySourceBuilderTest::::testEx_obtainSourceImages_withNoCaptor()",
      "104": "EmptySourceBuilderTest::::testEx_obtainSourceImages_withNoCaptor()",
      "105": "EmptySourceBuilderTest::::testEx_obtainSourceImages_withNoCaptor()",
      "106": "EmptySourceBuilderTest::::testEx_obtainSourceImages_withNoCaptor()"
    },
    "tests": [
      {
        "test_lines": [
          17,
          33
        ],
        "covered_lines": [
          19,
          21,
          24,
          25,
          26
        ]
      },
      {
        "test_lines": [
          35,
          42
        ],
        "covered_lines": [
          19,
          21
        ]
      },
      {
        "test_lines": [
          44,
          62
        ],
        "covered_lines": [
          19,
          21,
          30,
          31,
          32,
          33
        ]
      },
      {
        "test_lines": [
          64,
          78
        ],
        "covered_lines": [
          19,
          21,
          30
        ]
      },
      {
        "test_lines": [
          80,
          97
        ],
        "covered_lines": [
          19,
          21,
          24,
          25,
          26,
          37,
          40,
          44,
          45,
          46,
          47,
          48,
          49
        ]
      },
      {
        "test_lines": [
          99,
          106
        ],
        "covered_lines": [
          19,
          21,
          37,
          38
        ]
      }
    ]
  }
}