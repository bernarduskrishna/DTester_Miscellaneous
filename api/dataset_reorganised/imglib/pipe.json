{
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/in/AbstractGifSource.java": {
    "class_content": [
      "package cn.pipe.in;\n",
      "\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.in.GifSource;\n",
      "import com.madgag.gif.fmsware.GifDecoder;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * An abstract superclass of gif source.\n",
      " *\n",
      " * @param <T> The type of gif source.\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public abstract class AbstractGifSource<T> implements GifSource<T> {\n",
      "\n",
      "    /**\n",
      "     * The source.\n",
      "     */\n",
      "    protected final T source;\n",
      "\n",
      "    /**\n",
      "     * The flag that indicating the completion of reading.\n",
      "     */\n",
      "    protected boolean readCompleted = false;\n",
      "\n",
      "    /**\n",
      "     * The gif decoder.\n",
      "     */\n",
      "    protected final GifDecoder decoder = new GifDecoder();\n",
      "\n",
      "\n",
      "    protected AbstractGifSource(T source) {\n",
      "        this.source = source;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int size() throws IOException {\n",
      "        loadIfNot();\n",
      "        return decoder.getFrameCount();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public BufferedImage read(int frameIndex) throws IOException {\n",
      "        loadIfNot();\n",
      "        return decoder.getFrame(frameIndex);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<BufferedImage> read(Integer[] frameIndexes) throws IOException {\n",
      "        loadIfNot();\n",
      "        List<BufferedImage> res = new ArrayList<>();\n",
      "        for (Integer index : frameIndexes) {\n",
      "            res.add(decoder.getFrame(index));\n",
      "        }\n",
      "        return res;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<BufferedImage> readAll() throws IOException {\n",
      "        loadIfNot();\n",
      "        List<BufferedImage> res = new ArrayList<>();\n",
      "        int size = decoder.getFrameCount();\n",
      "        for (int i = 0; i < size; i++) {\n",
      "            res.add(decoder.getFrame(i));\n",
      "        }\n",
      "        return res;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public T getSource() {\n",
      "        return source;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isReadCompleted() {\n",
      "        return readCompleted;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Load the gif source if the source have not loaded.\n",
      "     * @throws IOException If some I/O exceptions occurred when loading the gif source.\n",
      "     * @throws HandlingException If some runtime exceptions occurred when loading the gif source.\n",
      "     */\n",
      "    protected void loadIfNot() throws IOException {\n",
      "        if (readCompleted) {\n",
      "            return;\n",
      "        }\n",
      "        int status = doLoad();\n",
      "        switch (status) {\n",
      "            case GifDecoder.STATUS_OK:\n",
      "                readCompleted = true;\n",
      "                return;\n",
      "            case GifDecoder.STATUS_FORMAT_ERROR:\n",
      "                throw new HandlingException(\"Error decoding file (may be partially decoded).\");\n",
      "            case GifDecoder.STATUS_OPEN_ERROR:\n",
      "                throw new HandlingException(\"Unable to open source.\");\n",
      "            default:\n",
      "                throw new HandlingException(\"Unknown error.\");\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Load the gif source.\n",
      "     * @return The read status.\n",
      "     * @throws IOException If some I/O exceptions occurred when loading the gif source.\n",
      "     */\n",
      "    protected abstract int doLoad() throws IOException;\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.in;\n",
      "\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.pipe.BufferedImageComparer;\n",
      "import cn.pipe.TestUtils;\n",
      "import com.madgag.gif.fmsware.GifDecoder;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "public class AbstractGifSourceTest {\n",
      "\n",
      "    /**\n",
      "     * A fixed template file of gif source which loaded from '.../input/seasons.gif'.\n",
      "     * <br>\n",
      "     * Just for unit testing.\n",
      "     */\n",
      "    private static class FixedTemplateGifSource extends AbstractGifSource<Void> {\n",
      "        /**\n",
      "         * The configuration of loading.\n",
      "         *\n",
      "         * <li>Set to 0: loading the template file and return the actual status\n",
      "         * when executing the method of {@link FixedTemplateGifSource#doLoad()}.</li>\n",
      "         *\n",
      "         * <li>Set to 1: return 1 when executing the method of\n",
      "         * {@link FixedTemplateGifSource#doLoad()}.</li>\n",
      "         *\n",
      "         * <li>Set to 2: return 2 when executing the method of\n",
      "         * {@link FixedTemplateGifSource#doLoad()}.</li>\n",
      "         *\n",
      "         * <li>Set to other: return itself when executing the method of\n",
      "         * {@link FixedTemplateGifSource#doLoad()}.</li>\n",
      "         */\n",
      "        private final int joint;\n",
      "        protected FixedTemplateGifSource(int joint) {\n",
      "            super(null);\n",
      "            this.joint = joint;\n",
      "        }\n",
      "        protected FixedTemplateGifSource() {\n",
      "            this(GifDecoder.STATUS_OK);\n",
      "        }\n",
      "        @Override\n",
      "        protected int doLoad() throws IOException {\n",
      "            if (joint == GifDecoder.STATUS_OK) {\n",
      "                InputStream is = TestUtils.getResourceStream(\"input/seasons.gif\");\n",
      "                int status = decoder.read(is);\n",
      "                readCompleted = true;\n",
      "                return status;\n",
      "            } else {\n",
      "                return joint;\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_getSource() {\n",
      "        // given\n",
      "        FixedTemplateGifSource source = new FixedTemplateGifSource();\n",
      "        // when\n",
      "        Void sr = source.getSource();\n",
      "        // then\n",
      "        Assert.assertNull(sr);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_isReadCompleted() throws IOException {\n",
      "        // given\n",
      "        FixedTemplateGifSource source = new FixedTemplateGifSource();\n",
      "\n",
      "        // when\n",
      "        boolean before = source.isReadCompleted();\n",
      "        source.loadIfNot();\n",
      "        boolean after = source.isReadCompleted();\n",
      "\n",
      "        // then\n",
      "        Assert.assertFalse(before);\n",
      "        Assert.assertTrue(after);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_size() throws IOException {\n",
      "        // given\n",
      "        FixedTemplateGifSource source = new FixedTemplateGifSource();\n",
      "\n",
      "        // when\n",
      "        int size = source.size();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(4, size);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_read() throws IOException {\n",
      "        // given\n",
      "        FixedTemplateGifSource source = new FixedTemplateGifSource();\n",
      "\n",
      "        // when\n",
      "        BufferedImage target = source.read(0);\n",
      "\n",
      "        // then\n",
      "        GifDecoder decoder = new GifDecoder();\n",
      "        decoder.read(TestUtils.getResourceStream(\"input/seasons.gif\"));\n",
      "        BufferedImage frame0 = decoder.getFrame(0);\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(frame0, target));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_read_withMultipart() throws IOException {\n",
      "        // given\n",
      "        FixedTemplateGifSource source = new FixedTemplateGifSource();\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = source.read(new Integer[]{0, 2});\n",
      "\n",
      "        // then\n",
      "        GifDecoder decoder = new GifDecoder();\n",
      "        decoder.read(TestUtils.getResourceStream(\"input/seasons.gif\"));\n",
      "        List<BufferedImage> frames = new ArrayList<>();\n",
      "        frames.add(decoder.getFrame(0));\n",
      "        frames.add(decoder.getFrame(2));\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(frames.get(0), target.get(0)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(frames.get(1), target.get(1)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_readAll() throws IOException {\n",
      "        // given\n",
      "        FixedTemplateGifSource source = new FixedTemplateGifSource();\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = source.readAll();\n",
      "\n",
      "        // then\n",
      "        GifDecoder decoder = new GifDecoder();\n",
      "        decoder.read(TestUtils.getResourceStream(\"input/seasons.gif\"));\n",
      "        List<BufferedImage> frames = new ArrayList<>();\n",
      "        for (int i = 0; i < decoder.getFrameCount(); i++) {\n",
      "            frames.add(decoder.getFrame(i));\n",
      "        }\n",
      "\n",
      "        for (int i = 0; i < frames.size(); i++) {\n",
      "            Assert.assertTrue(BufferedImageComparer.isSame(frames.get(i), target.get(i)));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_loadIfNot_statusError() {\n",
      "        // decode error\n",
      "        FixedTemplateGifSource source1 = new FixedTemplateGifSource(GifDecoder.STATUS_FORMAT_ERROR);\n",
      "        HandlingException ex1 = Assert.assertThrows(HandlingException.class,\n",
      "                source1::loadIfNot);\n",
      "        Assert.assertEquals(\"Error decoding file (may be partially decoded).\",\n",
      "                ex1.getMessage());\n",
      "\n",
      "        // open source error\n",
      "        FixedTemplateGifSource source2 = new FixedTemplateGifSource(GifDecoder.STATUS_OPEN_ERROR);\n",
      "        HandlingException ex2 = Assert.assertThrows(HandlingException.class,\n",
      "                source2::loadIfNot);\n",
      "        Assert.assertEquals(\"Unable to open source.\",\n",
      "                ex2.getMessage());\n",
      "\n",
      "        // unknown error\n",
      "        FixedTemplateGifSource source3 = new FixedTemplateGifSource(3);\n",
      "        HandlingException ex3 = Assert.assertThrows(HandlingException.class,\n",
      "                source3::loadIfNot);\n",
      "        Assert.assertEquals(\"Unknown error.\",\n",
      "                ex3.getMessage());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "AbstractGifSource::::size()": [
        40,
        44
      ],
      "AbstractGifSource::::read(int)": [
        46,
        50
      ],
      "AbstractGifSource::::read(java.lang.Integer[])": [
        52,
        60
      ],
      "AbstractGifSource::::readAll()": [
        62,
        71
      ],
      "AbstractGifSource::::getSource()": [
        73,
        76
      ],
      "AbstractGifSource::::isReadCompleted()": [
        78,
        81
      ],
      "AbstractGifSource::::loadIfNot()": [
        88,
        104
      ],
      "AbstractGifSource::::doLoad()": [
        111,
        111
      ]
    },
    "test_method_lines_dic": {
      "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()": [
        47,
        57
      ],
      "AbstractGifSourceTest::::test_getSource()": [
        60,
        68
      ],
      "AbstractGifSourceTest::::test_isReadCompleted()": [
        70,
        83
      ],
      "AbstractGifSourceTest::::test_size()": [
        85,
        95
      ],
      "AbstractGifSourceTest::::test_read()": [
        97,
        111
      ],
      "AbstractGifSourceTest::::test_read_withMultipart()": [
        113,
        130
      ],
      "AbstractGifSourceTest::::test_readAll()": [
        132,
        151
      ],
      "AbstractGifSourceTest::::testEx_loadIfNot_statusError()": [
        153,
        175
      ]
    },
    "reverse_method_lines_dic": {
      "40": "AbstractGifSource::::size()",
      "41": "AbstractGifSource::::size()",
      "42": "AbstractGifSource::::size()",
      "43": "AbstractGifSource::::size()",
      "44": "AbstractGifSource::::size()",
      "46": "AbstractGifSource::::read(int)",
      "47": "AbstractGifSource::::read(int)",
      "48": "AbstractGifSource::::read(int)",
      "49": "AbstractGifSource::::read(int)",
      "50": "AbstractGifSource::::read(int)",
      "52": "AbstractGifSource::::read(java.lang.Integer[])",
      "53": "AbstractGifSource::::read(java.lang.Integer[])",
      "54": "AbstractGifSource::::read(java.lang.Integer[])",
      "55": "AbstractGifSource::::read(java.lang.Integer[])",
      "56": "AbstractGifSource::::read(java.lang.Integer[])",
      "57": "AbstractGifSource::::read(java.lang.Integer[])",
      "58": "AbstractGifSource::::read(java.lang.Integer[])",
      "59": "AbstractGifSource::::read(java.lang.Integer[])",
      "60": "AbstractGifSource::::read(java.lang.Integer[])",
      "62": "AbstractGifSource::::readAll()",
      "63": "AbstractGifSource::::readAll()",
      "64": "AbstractGifSource::::readAll()",
      "65": "AbstractGifSource::::readAll()",
      "66": "AbstractGifSource::::readAll()",
      "67": "AbstractGifSource::::readAll()",
      "68": "AbstractGifSource::::readAll()",
      "69": "AbstractGifSource::::readAll()",
      "70": "AbstractGifSource::::readAll()",
      "71": "AbstractGifSource::::readAll()",
      "73": "AbstractGifSource::::getSource()",
      "74": "AbstractGifSource::::getSource()",
      "75": "AbstractGifSource::::getSource()",
      "76": "AbstractGifSource::::getSource()",
      "78": "AbstractGifSource::::isReadCompleted()",
      "79": "AbstractGifSource::::isReadCompleted()",
      "80": "AbstractGifSource::::isReadCompleted()",
      "81": "AbstractGifSource::::isReadCompleted()",
      "88": "AbstractGifSource::::loadIfNot()",
      "89": "AbstractGifSource::::loadIfNot()",
      "90": "AbstractGifSource::::loadIfNot()",
      "91": "AbstractGifSource::::loadIfNot()",
      "92": "AbstractGifSource::::loadIfNot()",
      "93": "AbstractGifSource::::loadIfNot()",
      "94": "AbstractGifSource::::loadIfNot()",
      "95": "AbstractGifSource::::loadIfNot()",
      "96": "AbstractGifSource::::loadIfNot()",
      "97": "AbstractGifSource::::loadIfNot()",
      "98": "AbstractGifSource::::loadIfNot()",
      "99": "AbstractGifSource::::loadIfNot()",
      "100": "AbstractGifSource::::loadIfNot()",
      "101": "AbstractGifSource::::loadIfNot()",
      "102": "AbstractGifSource::::loadIfNot()",
      "103": "AbstractGifSource::::loadIfNot()",
      "104": "AbstractGifSource::::loadIfNot()",
      "111": "AbstractGifSource::::doLoad()"
    },
    "test_reverse_method_lines_dic": {
      "47": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "48": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "49": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "50": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "51": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "52": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "53": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "54": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "55": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "56": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "57": "AbstractGifSourceTest.FixedTemplateGifSource::::doLoad()",
      "60": "AbstractGifSourceTest::::test_getSource()",
      "61": "AbstractGifSourceTest::::test_getSource()",
      "62": "AbstractGifSourceTest::::test_getSource()",
      "63": "AbstractGifSourceTest::::test_getSource()",
      "64": "AbstractGifSourceTest::::test_getSource()",
      "65": "AbstractGifSourceTest::::test_getSource()",
      "66": "AbstractGifSourceTest::::test_getSource()",
      "67": "AbstractGifSourceTest::::test_getSource()",
      "68": "AbstractGifSourceTest::::test_getSource()",
      "70": "AbstractGifSourceTest::::test_isReadCompleted()",
      "71": "AbstractGifSourceTest::::test_isReadCompleted()",
      "72": "AbstractGifSourceTest::::test_isReadCompleted()",
      "73": "AbstractGifSourceTest::::test_isReadCompleted()",
      "74": "AbstractGifSourceTest::::test_isReadCompleted()",
      "75": "AbstractGifSourceTest::::test_isReadCompleted()",
      "76": "AbstractGifSourceTest::::test_isReadCompleted()",
      "77": "AbstractGifSourceTest::::test_isReadCompleted()",
      "78": "AbstractGifSourceTest::::test_isReadCompleted()",
      "79": "AbstractGifSourceTest::::test_isReadCompleted()",
      "80": "AbstractGifSourceTest::::test_isReadCompleted()",
      "81": "AbstractGifSourceTest::::test_isReadCompleted()",
      "82": "AbstractGifSourceTest::::test_isReadCompleted()",
      "83": "AbstractGifSourceTest::::test_isReadCompleted()",
      "85": "AbstractGifSourceTest::::test_size()",
      "86": "AbstractGifSourceTest::::test_size()",
      "87": "AbstractGifSourceTest::::test_size()",
      "88": "AbstractGifSourceTest::::test_size()",
      "89": "AbstractGifSourceTest::::test_size()",
      "90": "AbstractGifSourceTest::::test_size()",
      "91": "AbstractGifSourceTest::::test_size()",
      "92": "AbstractGifSourceTest::::test_size()",
      "93": "AbstractGifSourceTest::::test_size()",
      "94": "AbstractGifSourceTest::::test_size()",
      "95": "AbstractGifSourceTest::::test_size()",
      "97": "AbstractGifSourceTest::::test_read()",
      "98": "AbstractGifSourceTest::::test_read()",
      "99": "AbstractGifSourceTest::::test_read()",
      "100": "AbstractGifSourceTest::::test_read()",
      "101": "AbstractGifSourceTest::::test_read()",
      "102": "AbstractGifSourceTest::::test_read()",
      "103": "AbstractGifSourceTest::::test_read()",
      "104": "AbstractGifSourceTest::::test_read()",
      "105": "AbstractGifSourceTest::::test_read()",
      "106": "AbstractGifSourceTest::::test_read()",
      "107": "AbstractGifSourceTest::::test_read()",
      "108": "AbstractGifSourceTest::::test_read()",
      "109": "AbstractGifSourceTest::::test_read()",
      "110": "AbstractGifSourceTest::::test_read()",
      "111": "AbstractGifSourceTest::::test_read()",
      "113": "AbstractGifSourceTest::::test_read_withMultipart()",
      "114": "AbstractGifSourceTest::::test_read_withMultipart()",
      "115": "AbstractGifSourceTest::::test_read_withMultipart()",
      "116": "AbstractGifSourceTest::::test_read_withMultipart()",
      "117": "AbstractGifSourceTest::::test_read_withMultipart()",
      "118": "AbstractGifSourceTest::::test_read_withMultipart()",
      "119": "AbstractGifSourceTest::::test_read_withMultipart()",
      "120": "AbstractGifSourceTest::::test_read_withMultipart()",
      "121": "AbstractGifSourceTest::::test_read_withMultipart()",
      "122": "AbstractGifSourceTest::::test_read_withMultipart()",
      "123": "AbstractGifSourceTest::::test_read_withMultipart()",
      "124": "AbstractGifSourceTest::::test_read_withMultipart()",
      "125": "AbstractGifSourceTest::::test_read_withMultipart()",
      "126": "AbstractGifSourceTest::::test_read_withMultipart()",
      "127": "AbstractGifSourceTest::::test_read_withMultipart()",
      "128": "AbstractGifSourceTest::::test_read_withMultipart()",
      "129": "AbstractGifSourceTest::::test_read_withMultipart()",
      "130": "AbstractGifSourceTest::::test_read_withMultipart()",
      "132": "AbstractGifSourceTest::::test_readAll()",
      "133": "AbstractGifSourceTest::::test_readAll()",
      "134": "AbstractGifSourceTest::::test_readAll()",
      "135": "AbstractGifSourceTest::::test_readAll()",
      "136": "AbstractGifSourceTest::::test_readAll()",
      "137": "AbstractGifSourceTest::::test_readAll()",
      "138": "AbstractGifSourceTest::::test_readAll()",
      "139": "AbstractGifSourceTest::::test_readAll()",
      "140": "AbstractGifSourceTest::::test_readAll()",
      "141": "AbstractGifSourceTest::::test_readAll()",
      "142": "AbstractGifSourceTest::::test_readAll()",
      "143": "AbstractGifSourceTest::::test_readAll()",
      "144": "AbstractGifSourceTest::::test_readAll()",
      "145": "AbstractGifSourceTest::::test_readAll()",
      "146": "AbstractGifSourceTest::::test_readAll()",
      "147": "AbstractGifSourceTest::::test_readAll()",
      "148": "AbstractGifSourceTest::::test_readAll()",
      "149": "AbstractGifSourceTest::::test_readAll()",
      "150": "AbstractGifSourceTest::::test_readAll()",
      "151": "AbstractGifSourceTest::::test_readAll()",
      "153": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "154": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "155": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "156": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "157": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "158": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "159": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "160": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "161": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "162": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "163": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "164": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "165": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "166": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "167": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "168": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "169": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "170": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "171": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "172": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "173": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "174": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()",
      "175": "AbstractGifSourceTest::::testEx_loadIfNot_statusError()"
    },
    "tests": [
      {
        "test_lines": [
          60,
          68
        ],
        "covered_lines": [
          28,
          33,
          36,
          37,
          38,
          75
        ]
      },
      {
        "test_lines": [
          70,
          83
        ],
        "covered_lines": [
          28,
          33,
          36,
          37,
          38,
          80,
          89,
          92,
          93,
          95,
          96
        ]
      },
      {
        "test_lines": [
          85,
          95
        ],
        "covered_lines": [
          28,
          33,
          36,
          37,
          38,
          42,
          43,
          89,
          92,
          93,
          95,
          96
        ]
      },
      {
        "test_lines": [
          97,
          111
        ],
        "covered_lines": [
          28,
          33,
          36,
          37,
          38,
          48,
          49,
          89,
          92,
          93,
          95,
          96
        ]
      },
      {
        "test_lines": [
          113,
          130
        ],
        "covered_lines": [
          28,
          33,
          36,
          37,
          38,
          54,
          55,
          56,
          57,
          59,
          89,
          92,
          93,
          95,
          96
        ]
      },
      {
        "test_lines": [
          132,
          151
        ],
        "covered_lines": [
          28,
          33,
          36,
          37,
          38,
          64,
          65,
          66,
          67,
          68,
          70,
          89,
          92,
          93,
          95,
          96
        ]
      },
      {
        "test_lines": [
          153,
          175
        ],
        "covered_lines": [
          28,
          33,
          36,
          37,
          38,
          89,
          92,
          93,
          98,
          100,
          102
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/in/AbstractPdfBoxSource.java": {
    "class_content": [
      "package cn.pipe.in;\n",
      "\n",
      "import cn.core.in.PdfSource;\n",
      "import org.apache.pdfbox.pdmodel.PDDocument;\n",
      "import org.apache.pdfbox.rendering.ImageType;\n",
      "import org.apache.pdfbox.rendering.PDFRenderer;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * An abstract superclass of pdf source.\n",
      " *\n",
      " * @param <T> The type of pdf source.\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public abstract class AbstractPdfBoxSource<T> implements PdfSource<T> {\n",
      "\n",
      "    /**\n",
      "     * The source.\n",
      "     */\n",
      "    protected final T source;\n",
      "\n",
      "    /**\n",
      "     * The flag that indicating the completion of reading.\n",
      "     */\n",
      "    protected boolean readCompleted = false;\n",
      "\n",
      "    /**\n",
      "     * The pdf document object.\n",
      "     */\n",
      "    protected PDDocument pdf;\n",
      "\n",
      "    /**\n",
      "     * Indicates whether the source is closed.\n",
      "     * <ul>\n",
      "     * <li>It will be set to <code>true</code> because there has no resource to\n",
      "     * release when object is instantiated.</li>\n",
      "     *\n",
      "     * <li>It will become <code>false</code> when the pdf document is loaded.</li>\n",
      "     *\n",
      "     * <li>It will become <code>true</code> when method of\n",
      "     * {@link AbstractPdfBoxSource#close()} is called.</li>\n",
      "     * </ul>\n",
      "     */\n",
      "    protected boolean closed = true;\n",
      "\n",
      "\n",
      "    protected AbstractPdfBoxSource(T source) {\n",
      "        this.source = source;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int maxPageNumber() throws IOException {\n",
      "        loadIfNot();\n",
      "        return pdf.getNumberOfPages();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public BufferedImage read(int pageIndex, float dpi) throws IOException {\n",
      "        loadIfNot();\n",
      "        PDFRenderer renderer = new PDFRenderer(pdf);\n",
      "        return renderer.renderImageWithDPI(pageIndex, dpi, ImageType.RGB);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public T getSource() {\n",
      "        return source;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<BufferedImage> read(Integer[] pageIndexes, float dpi) throws IOException {\n",
      "        loadIfNot();\n",
      "        PDFRenderer renderer = new PDFRenderer(pdf);\n",
      "\n",
      "        List<BufferedImage> tars = new ArrayList<>();\n",
      "        for (Integer pIndex : pageIndexes) {\n",
      "            tars.add(renderer.renderImageWithDPI(pIndex, dpi, ImageType.RGB));\n",
      "        }\n",
      "        return tars;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isReadCompleted() {\n",
      "        return readCompleted;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Load the pdf source if the source have not loaded.\n",
      "     * @throws IOException If some I/O exceptions occurred when loading the pdf source.\n",
      "     */\n",
      "    protected void loadIfNot() throws IOException {\n",
      "        if (readCompleted) {\n",
      "            return;\n",
      "        }\n",
      "        pdf = doLoad();\n",
      "        readCompleted = true;\n",
      "        closed = false;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Load the pdf source.\n",
      "     * @return The object of loaded GIF.\n",
      "     * @throws IOException If some I/O exceptions occurred when loading the pdf source.\n",
      "     */\n",
      "    protected abstract PDDocument doLoad() throws IOException;\n",
      "\n",
      "    /**\n",
      "     * Free resources and reset status.\n",
      "     *\n",
      "     * @throws IOException If some I/O exceptions occurred when loading the pdf source.\n",
      "     */\n",
      "    @Override\n",
      "    public void close() throws IOException {\n",
      "        if (pdf != null && !pdf.getDocument().isClosed()) {\n",
      "            // release the object of PDDocument\n",
      "            pdf.close();\n",
      "            // reset the closed flag\n",
      "            closed = true;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isClosed() {\n",
      "        return closed;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.in;\n",
      "\n",
      "import cn.pipe.BufferedImageComparer;\n",
      "import cn.pipe.TestUtils;\n",
      "import org.apache.pdfbox.pdmodel.PDDocument;\n",
      "import org.apache.pdfbox.rendering.ImageType;\n",
      "import org.apache.pdfbox.rendering.PDFRenderer;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "public class AbstractPdfBoxSourceTest {\n",
      "\n",
      "    /**\n",
      "     * A fixed template file of pdf source which loaded from '.../input/sequence.pdf'.\n",
      "     * <br>\n",
      "     * Just for unit testing.\n",
      "     */\n",
      "    private static class FixedTemplatePdfSource extends AbstractPdfBoxSource<Void> {\n",
      "        protected FixedTemplatePdfSource() {\n",
      "            super(null);\n",
      "        }\n",
      "        @Override\n",
      "        protected PDDocument doLoad() throws IOException {\n",
      "            InputStream is = TestUtils.getResourceStream(\"input/sequence.pdf\");\n",
      "            return PDDocument.load(is);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void test_getSource() throws IOException {\n",
      "        // given\n",
      "        FixedTemplatePdfSource source = new FixedTemplatePdfSource();\n",
      "        // when\n",
      "        Void sr = source.getSource();\n",
      "        // then\n",
      "        Assert.assertNull(sr);\n",
      "\n",
      "        // finally\n",
      "        source.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_isReadCompleted() throws IOException {\n",
      "        // given\n",
      "        FixedTemplatePdfSource source = new FixedTemplatePdfSource();\n",
      "\n",
      "        // when\n",
      "        boolean before = source.isReadCompleted();\n",
      "        source.loadIfNot();\n",
      "        boolean after = source.isReadCompleted();\n",
      "\n",
      "        // then\n",
      "        Assert.assertFalse(before);\n",
      "        Assert.assertTrue(after);\n",
      "\n",
      "        // finally\n",
      "        source.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_maxPageNumber() throws IOException {\n",
      "        // given\n",
      "        FixedTemplatePdfSource source = new FixedTemplatePdfSource();\n",
      "\n",
      "        // when\n",
      "        int pageSize = source.maxPageNumber();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(3, pageSize);\n",
      "\n",
      "        // finally\n",
      "        source.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_read() throws IOException {\n",
      "        // given\n",
      "        FixedTemplatePdfSource source = new FixedTemplatePdfSource();\n",
      "\n",
      "        // when\n",
      "        BufferedImage target = source.read(0, 300);\n",
      "\n",
      "        // then\n",
      "        PDDocument pdfDoc = PDDocument.load(TestUtils.getResourceStream(\"input/sequence.pdf\"));\n",
      "        BufferedImage image = new PDFRenderer(pdfDoc).renderImageWithDPI(0, 300, ImageType.RGB);\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n",
      "\n",
      "        // finally\n",
      "        source.close();\n",
      "        pdfDoc.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_read_withMultipart() throws IOException {\n",
      "        // given\n",
      "        FixedTemplatePdfSource source = new FixedTemplatePdfSource();\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = source.read(new Integer[]{0, 2}, 300);\n",
      "\n",
      "        // then\n",
      "        PDDocument pdfDoc = PDDocument.load(TestUtils.getResourceStream(\"input/sequence.pdf\"));\n",
      "        List<BufferedImage> pages = new ArrayList<>();\n",
      "        PDFRenderer pdfRenderer = new PDFRenderer(pdfDoc);\n",
      "        pages.add(pdfRenderer.renderImageWithDPI(0, 300, ImageType.RGB));\n",
      "        pages.add(pdfRenderer.renderImageWithDPI(2, 300, ImageType.RGB));\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(pages.get(0), target.get(0)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(pages.get(1), target.get(1)));\n",
      "\n",
      "        // finally\n",
      "        source.close();\n",
      "        pdfDoc.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_close() throws IOException {\n",
      "        // given\n",
      "        FixedTemplatePdfSource source = new FixedTemplatePdfSource();\n",
      "        source.loadIfNot();\n",
      "\n",
      "        // Before: unclose but read completed.\n",
      "        Assert.assertFalse(source.isClosed());\n",
      "        Assert.assertTrue(source.isReadCompleted());\n",
      "\n",
      "        // when\n",
      "        source.close();\n",
      "\n",
      "        // After: closed.\n",
      "        Assert.assertTrue(source.isClosed());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "AbstractPdfBoxSource::::maxPageNumber()": [
        55,
        59
      ],
      "AbstractPdfBoxSource::::read(int,float)": [
        61,
        66
      ],
      "AbstractPdfBoxSource::::getSource()": [
        68,
        71
      ],
      "AbstractPdfBoxSource::::read(java.lang.Integer[],float)": [
        73,
        83
      ],
      "AbstractPdfBoxSource::::isReadCompleted()": [
        85,
        88
      ],
      "AbstractPdfBoxSource::::loadIfNot()": [
        94,
        101
      ],
      "AbstractPdfBoxSource::::doLoad()": [
        108,
        108
      ],
      "AbstractPdfBoxSource::::close()": [
        115,
        123
      ],
      "AbstractPdfBoxSource::::isClosed()": [
        125,
        128
      ]
    },
    "test_method_lines_dic": {
      "AbstractPdfBoxSourceTest.FixedTemplatePdfSource::::doLoad()": [
        27,
        31
      ],
      "AbstractPdfBoxSourceTest::::test_getSource()": [
        35,
        46
      ],
      "AbstractPdfBoxSourceTest::::test_isReadCompleted()": [
        48,
        64
      ],
      "AbstractPdfBoxSourceTest::::test_maxPageNumber()": [
        66,
        79
      ],
      "AbstractPdfBoxSourceTest::::test_read()": [
        81,
        98
      ],
      "AbstractPdfBoxSourceTest::::test_read_withMultipart()": [
        100,
        121
      ],
      "AbstractPdfBoxSourceTest::::test_close()": [
        123,
        138
      ]
    },
    "reverse_method_lines_dic": {
      "55": "AbstractPdfBoxSource::::maxPageNumber()",
      "56": "AbstractPdfBoxSource::::maxPageNumber()",
      "57": "AbstractPdfBoxSource::::maxPageNumber()",
      "58": "AbstractPdfBoxSource::::maxPageNumber()",
      "59": "AbstractPdfBoxSource::::maxPageNumber()",
      "61": "AbstractPdfBoxSource::::read(int,float)",
      "62": "AbstractPdfBoxSource::::read(int,float)",
      "63": "AbstractPdfBoxSource::::read(int,float)",
      "64": "AbstractPdfBoxSource::::read(int,float)",
      "65": "AbstractPdfBoxSource::::read(int,float)",
      "66": "AbstractPdfBoxSource::::read(int,float)",
      "68": "AbstractPdfBoxSource::::getSource()",
      "69": "AbstractPdfBoxSource::::getSource()",
      "70": "AbstractPdfBoxSource::::getSource()",
      "71": "AbstractPdfBoxSource::::getSource()",
      "73": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "74": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "75": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "76": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "77": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "78": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "79": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "80": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "81": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "82": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "83": "AbstractPdfBoxSource::::read(java.lang.Integer[],float)",
      "85": "AbstractPdfBoxSource::::isReadCompleted()",
      "86": "AbstractPdfBoxSource::::isReadCompleted()",
      "87": "AbstractPdfBoxSource::::isReadCompleted()",
      "88": "AbstractPdfBoxSource::::isReadCompleted()",
      "94": "AbstractPdfBoxSource::::loadIfNot()",
      "95": "AbstractPdfBoxSource::::loadIfNot()",
      "96": "AbstractPdfBoxSource::::loadIfNot()",
      "97": "AbstractPdfBoxSource::::loadIfNot()",
      "98": "AbstractPdfBoxSource::::loadIfNot()",
      "99": "AbstractPdfBoxSource::::loadIfNot()",
      "100": "AbstractPdfBoxSource::::loadIfNot()",
      "101": "AbstractPdfBoxSource::::loadIfNot()",
      "108": "AbstractPdfBoxSource::::doLoad()",
      "115": "AbstractPdfBoxSource::::close()",
      "116": "AbstractPdfBoxSource::::close()",
      "117": "AbstractPdfBoxSource::::close()",
      "118": "AbstractPdfBoxSource::::close()",
      "119": "AbstractPdfBoxSource::::close()",
      "120": "AbstractPdfBoxSource::::close()",
      "121": "AbstractPdfBoxSource::::close()",
      "122": "AbstractPdfBoxSource::::close()",
      "123": "AbstractPdfBoxSource::::close()",
      "125": "AbstractPdfBoxSource::::isClosed()",
      "126": "AbstractPdfBoxSource::::isClosed()",
      "127": "AbstractPdfBoxSource::::isClosed()",
      "128": "AbstractPdfBoxSource::::isClosed()"
    },
    "test_reverse_method_lines_dic": {
      "27": "AbstractPdfBoxSourceTest.FixedTemplatePdfSource::::doLoad()",
      "28": "AbstractPdfBoxSourceTest.FixedTemplatePdfSource::::doLoad()",
      "29": "AbstractPdfBoxSourceTest.FixedTemplatePdfSource::::doLoad()",
      "30": "AbstractPdfBoxSourceTest.FixedTemplatePdfSource::::doLoad()",
      "31": "AbstractPdfBoxSourceTest.FixedTemplatePdfSource::::doLoad()",
      "35": "AbstractPdfBoxSourceTest::::test_getSource()",
      "36": "AbstractPdfBoxSourceTest::::test_getSource()",
      "37": "AbstractPdfBoxSourceTest::::test_getSource()",
      "38": "AbstractPdfBoxSourceTest::::test_getSource()",
      "39": "AbstractPdfBoxSourceTest::::test_getSource()",
      "40": "AbstractPdfBoxSourceTest::::test_getSource()",
      "41": "AbstractPdfBoxSourceTest::::test_getSource()",
      "42": "AbstractPdfBoxSourceTest::::test_getSource()",
      "43": "AbstractPdfBoxSourceTest::::test_getSource()",
      "44": "AbstractPdfBoxSourceTest::::test_getSource()",
      "45": "AbstractPdfBoxSourceTest::::test_getSource()",
      "46": "AbstractPdfBoxSourceTest::::test_getSource()",
      "48": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "49": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "50": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "51": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "52": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "53": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "54": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "55": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "56": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "57": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "58": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "59": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "60": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "61": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "62": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "63": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "64": "AbstractPdfBoxSourceTest::::test_isReadCompleted()",
      "66": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "67": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "68": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "69": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "70": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "71": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "72": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "73": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "74": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "75": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "76": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "77": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "78": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "79": "AbstractPdfBoxSourceTest::::test_maxPageNumber()",
      "81": "AbstractPdfBoxSourceTest::::test_read()",
      "82": "AbstractPdfBoxSourceTest::::test_read()",
      "83": "AbstractPdfBoxSourceTest::::test_read()",
      "84": "AbstractPdfBoxSourceTest::::test_read()",
      "85": "AbstractPdfBoxSourceTest::::test_read()",
      "86": "AbstractPdfBoxSourceTest::::test_read()",
      "87": "AbstractPdfBoxSourceTest::::test_read()",
      "88": "AbstractPdfBoxSourceTest::::test_read()",
      "89": "AbstractPdfBoxSourceTest::::test_read()",
      "90": "AbstractPdfBoxSourceTest::::test_read()",
      "91": "AbstractPdfBoxSourceTest::::test_read()",
      "92": "AbstractPdfBoxSourceTest::::test_read()",
      "93": "AbstractPdfBoxSourceTest::::test_read()",
      "94": "AbstractPdfBoxSourceTest::::test_read()",
      "95": "AbstractPdfBoxSourceTest::::test_read()",
      "96": "AbstractPdfBoxSourceTest::::test_read()",
      "97": "AbstractPdfBoxSourceTest::::test_read()",
      "98": "AbstractPdfBoxSourceTest::::test_read()",
      "100": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "101": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "102": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "103": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "104": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "105": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "106": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "107": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "108": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "109": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "110": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "111": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "112": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "113": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "114": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "115": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "116": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "117": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "118": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "119": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "120": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "121": "AbstractPdfBoxSourceTest::::test_read_withMultipart()",
      "123": "AbstractPdfBoxSourceTest::::test_close()",
      "124": "AbstractPdfBoxSourceTest::::test_close()",
      "125": "AbstractPdfBoxSourceTest::::test_close()",
      "126": "AbstractPdfBoxSourceTest::::test_close()",
      "127": "AbstractPdfBoxSourceTest::::test_close()",
      "128": "AbstractPdfBoxSourceTest::::test_close()",
      "129": "AbstractPdfBoxSourceTest::::test_close()",
      "130": "AbstractPdfBoxSourceTest::::test_close()",
      "131": "AbstractPdfBoxSourceTest::::test_close()",
      "132": "AbstractPdfBoxSourceTest::::test_close()",
      "133": "AbstractPdfBoxSourceTest::::test_close()",
      "134": "AbstractPdfBoxSourceTest::::test_close()",
      "135": "AbstractPdfBoxSourceTest::::test_close()",
      "136": "AbstractPdfBoxSourceTest::::test_close()",
      "137": "AbstractPdfBoxSourceTest::::test_close()",
      "138": "AbstractPdfBoxSourceTest::::test_close()"
    },
    "tests": [
      {
        "test_lines": [
          35,
          46
        ],
        "covered_lines": [
          29,
          48,
          51,
          52,
          53,
          70,
          117,
          123
        ]
      },
      {
        "test_lines": [
          48,
          64
        ],
        "covered_lines": [
          29,
          48,
          51,
          52,
          53,
          87,
          95,
          98,
          99,
          100,
          101,
          117,
          119,
          121,
          123
        ]
      },
      {
        "test_lines": [
          66,
          79
        ],
        "covered_lines": [
          29,
          48,
          51,
          52,
          53,
          57,
          58,
          95,
          98,
          99,
          100,
          101,
          117,
          119,
          121,
          123
        ]
      },
      {
        "test_lines": [
          81,
          98
        ],
        "covered_lines": [
          29,
          48,
          51,
          52,
          53,
          63,
          64,
          65,
          95,
          98,
          99,
          100,
          101,
          117,
          119,
          121,
          123
        ]
      },
      {
        "test_lines": [
          100,
          121
        ],
        "covered_lines": [
          29,
          48,
          51,
          52,
          53,
          75,
          76,
          78,
          79,
          80,
          82,
          95,
          98,
          99,
          100,
          101,
          117,
          119,
          121,
          123
        ]
      },
      {
        "test_lines": [
          123,
          138
        ],
        "covered_lines": [
          29,
          48,
          51,
          52,
          53,
          87,
          95,
          98,
          99,
          100,
          101,
          117,
          119,
          121,
          123,
          127
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/in/gif/ByteArrayGifSource.java": {
    "class_content": [
      "package cn.pipe.in.gif;\n",
      "\n",
      "import cn.pipe.in.AbstractGifSource;\n",
      "import java.io.ByteArrayInputStream;\n",
      "import java.io.IOException;\n",
      "\n",
      "/**\n",
      " * A gif source that from byte array.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class ByteArrayGifSource extends AbstractGifSource<byte[]> {\n",
      "\n",
      "    public ByteArrayGifSource(byte[] source) {\n",
      "        super(source);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected int doLoad() throws IOException {\n",
      "        return decoder.read(new ByteArrayInputStream(source));\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.in.gif;\n",
      "\n",
      "import cn.pipe.TestUtils;\n",
      "import com.madgag.gif.fmsware.GifDecoder;\n",
      "import org.apache.pdfbox.io.IOUtils;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "\n",
      "public class ByteArrayGifSourceTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_doLoad() throws IOException {\n",
      "        // given\n",
      "        InputStream is = TestUtils.getResourceStream(\"input/seasons.gif\");\n",
      "        byte[] bytes = IOUtils.toByteArray(is);\n",
      "\n",
      "        // when\n",
      "        ByteArrayGifSource source = new ByteArrayGifSource(bytes);\n",
      "        int status = source.doLoad();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(GifDecoder.STATUS_OK, status);\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "ByteArrayGifSource::::doLoad()": [
        19,
        22
      ]
    },
    "test_method_lines_dic": {
      "ByteArrayGifSourceTest::::test_doLoad()": [
        13,
        25
      ]
    },
    "reverse_method_lines_dic": {
      "19": "ByteArrayGifSource::::doLoad()",
      "20": "ByteArrayGifSource::::doLoad()",
      "21": "ByteArrayGifSource::::doLoad()",
      "22": "ByteArrayGifSource::::doLoad()"
    },
    "test_reverse_method_lines_dic": {
      "13": "ByteArrayGifSourceTest::::test_doLoad()",
      "14": "ByteArrayGifSourceTest::::test_doLoad()",
      "15": "ByteArrayGifSourceTest::::test_doLoad()",
      "16": "ByteArrayGifSourceTest::::test_doLoad()",
      "17": "ByteArrayGifSourceTest::::test_doLoad()",
      "18": "ByteArrayGifSourceTest::::test_doLoad()",
      "19": "ByteArrayGifSourceTest::::test_doLoad()",
      "20": "ByteArrayGifSourceTest::::test_doLoad()",
      "21": "ByteArrayGifSourceTest::::test_doLoad()",
      "22": "ByteArrayGifSourceTest::::test_doLoad()",
      "23": "ByteArrayGifSourceTest::::test_doLoad()",
      "24": "ByteArrayGifSourceTest::::test_doLoad()",
      "25": "ByteArrayGifSourceTest::::test_doLoad()"
    },
    "tests": [
      {
        "test_lines": [
          13,
          25
        ],
        "covered_lines": [
          16,
          17,
          21
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/in/gif/FileGifSource.java": {
    "class_content": [
      "package cn.pipe.in.gif;\n",
      "\n",
      "import cn.pipe.in.AbstractGifSource;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.FileInputStream;\n",
      "import java.io.IOException;\n",
      "\n",
      "/**\n",
      " * A gif source that from file.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class FileGifSource extends AbstractGifSource<File> {\n",
      "\n",
      "    public FileGifSource(File source) {\n",
      "        super(source);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected int doLoad() throws IOException {\n",
      "        return decoder.read(new FileInputStream(source));\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.in.gif;\n",
      "\n",
      "import com.madgag.gif.fmsware.GifDecoder;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.io.File;\n",
      "import java.io.IOException;\n",
      "import java.util.Objects;\n",
      "\n",
      "public class FileGifSourceTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_doLoad() throws IOException {\n",
      "        // given\n",
      "        String path = Objects.requireNonNull(\n",
      "                ClassLoader.getSystemClassLoader().getResource(\"input/seasons.gif\")\n",
      "        ).getPath();\n",
      "        File file = new File(path);\n",
      "\n",
      "        // when\n",
      "        FileGifSource source = new FileGifSource(file);\n",
      "        int status = source.doLoad();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(GifDecoder.STATUS_OK, status);\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "FileGifSource::::doLoad()": [
        21,
        24
      ]
    },
    "test_method_lines_dic": {
      "FileGifSourceTest::::test_doLoad()": [
        12,
        26
      ]
    },
    "reverse_method_lines_dic": {
      "21": "FileGifSource::::doLoad()",
      "22": "FileGifSource::::doLoad()",
      "23": "FileGifSource::::doLoad()",
      "24": "FileGifSource::::doLoad()"
    },
    "test_reverse_method_lines_dic": {
      "12": "FileGifSourceTest::::test_doLoad()",
      "13": "FileGifSourceTest::::test_doLoad()",
      "14": "FileGifSourceTest::::test_doLoad()",
      "15": "FileGifSourceTest::::test_doLoad()",
      "16": "FileGifSourceTest::::test_doLoad()",
      "17": "FileGifSourceTest::::test_doLoad()",
      "18": "FileGifSourceTest::::test_doLoad()",
      "19": "FileGifSourceTest::::test_doLoad()",
      "20": "FileGifSourceTest::::test_doLoad()",
      "21": "FileGifSourceTest::::test_doLoad()",
      "22": "FileGifSourceTest::::test_doLoad()",
      "23": "FileGifSourceTest::::test_doLoad()",
      "24": "FileGifSourceTest::::test_doLoad()",
      "25": "FileGifSourceTest::::test_doLoad()",
      "26": "FileGifSourceTest::::test_doLoad()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          26
        ],
        "covered_lines": [
          18,
          19,
          23
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/in/gif/InputStreamGifSource.java": {
    "class_content": [
      "package cn.pipe.in.gif;\n",
      "\n",
      "import cn.pipe.in.AbstractGifSource;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "\n",
      "/**\n",
      " * A gif source that from input stream.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class InputStreamGifSource extends AbstractGifSource<InputStream> {\n",
      "\n",
      "    public InputStreamGifSource(InputStream source) {\n",
      "        super(source);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected int doLoad() throws IOException {\n",
      "        return decoder.read(source);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.in.gif;\n",
      "\n",
      "import cn.pipe.TestUtils;\n",
      "import com.madgag.gif.fmsware.GifDecoder;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "\n",
      "public class InputStreamGifSourceTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_doLoad() throws IOException {\n",
      "        // given\n",
      "        InputStream is = TestUtils.getResourceStream(\"input/seasons.gif\");\n",
      "\n",
      "        // when\n",
      "        InputStreamGifSource source = new InputStreamGifSource(is);\n",
      "        int status = source.doLoad();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(GifDecoder.STATUS_OK, status);\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "InputStreamGifSource::::doLoad()": [
        19,
        22
      ]
    },
    "test_method_lines_dic": {
      "InputStreamGifSourceTest::::test_doLoad()": [
        12,
        23
      ]
    },
    "reverse_method_lines_dic": {
      "19": "InputStreamGifSource::::doLoad()",
      "20": "InputStreamGifSource::::doLoad()",
      "21": "InputStreamGifSource::::doLoad()",
      "22": "InputStreamGifSource::::doLoad()"
    },
    "test_reverse_method_lines_dic": {
      "12": "InputStreamGifSourceTest::::test_doLoad()",
      "13": "InputStreamGifSourceTest::::test_doLoad()",
      "14": "InputStreamGifSourceTest::::test_doLoad()",
      "15": "InputStreamGifSourceTest::::test_doLoad()",
      "16": "InputStreamGifSourceTest::::test_doLoad()",
      "17": "InputStreamGifSourceTest::::test_doLoad()",
      "18": "InputStreamGifSourceTest::::test_doLoad()",
      "19": "InputStreamGifSourceTest::::test_doLoad()",
      "20": "InputStreamGifSourceTest::::test_doLoad()",
      "21": "InputStreamGifSourceTest::::test_doLoad()",
      "22": "InputStreamGifSourceTest::::test_doLoad()",
      "23": "InputStreamGifSourceTest::::test_doLoad()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          23
        ],
        "covered_lines": [
          16,
          17,
          21
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/in/pdf/InputStreamPdfSource.java": {
    "class_content": [
      "package cn.pipe.in.pdf;\n",
      "\n",
      "import cn.pipe.in.AbstractPdfBoxSource;\n",
      "import org.apache.pdfbox.pdmodel.PDDocument;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "\n",
      "/**\n",
      " * A pdf source that from input stream.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class InputStreamPdfSource extends AbstractPdfBoxSource<InputStream> {\n",
      "\n",
      "    public InputStreamPdfSource(InputStream source) {\n",
      "        super(source);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected PDDocument doLoad() throws IOException {\n",
      "        return PDDocument.load(source);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.in.pdf;\n",
      "\n",
      "import cn.pipe.TestUtils;\n",
      "import org.apache.pdfbox.pdmodel.PDDocument;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "\n",
      "public class InputStreamPdfSourceTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_doLoad() throws IOException {\n",
      "        // given\n",
      "        InputStream is = TestUtils.getResourceStream(\"input/sequence.pdf\");\n",
      "\n",
      "        // when\n",
      "        InputStreamPdfSource source = new InputStreamPdfSource(is);\n",
      "        PDDocument document = source.doLoad();\n",
      "\n",
      "        // then\n",
      "        Assert.assertNotNull(document);\n",
      "        // The PDF file has only 3 pages.\n",
      "        Assert.assertEquals(3, document.getNumberOfPages());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "InputStreamPdfSource::::doLoad()": [
        21,
        24
      ]
    },
    "test_method_lines_dic": {
      "InputStreamPdfSourceTest::::test_doLoad()": [
        12,
        25
      ]
    },
    "reverse_method_lines_dic": {
      "21": "InputStreamPdfSource::::doLoad()",
      "22": "InputStreamPdfSource::::doLoad()",
      "23": "InputStreamPdfSource::::doLoad()",
      "24": "InputStreamPdfSource::::doLoad()"
    },
    "test_reverse_method_lines_dic": {
      "12": "InputStreamPdfSourceTest::::test_doLoad()",
      "13": "InputStreamPdfSourceTest::::test_doLoad()",
      "14": "InputStreamPdfSourceTest::::test_doLoad()",
      "15": "InputStreamPdfSourceTest::::test_doLoad()",
      "16": "InputStreamPdfSourceTest::::test_doLoad()",
      "17": "InputStreamPdfSourceTest::::test_doLoad()",
      "18": "InputStreamPdfSourceTest::::test_doLoad()",
      "19": "InputStreamPdfSourceTest::::test_doLoad()",
      "20": "InputStreamPdfSourceTest::::test_doLoad()",
      "21": "InputStreamPdfSourceTest::::test_doLoad()",
      "22": "InputStreamPdfSourceTest::::test_doLoad()",
      "23": "InputStreamPdfSourceTest::::test_doLoad()",
      "24": "InputStreamPdfSourceTest::::test_doLoad()",
      "25": "InputStreamPdfSourceTest::::test_doLoad()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          25
        ],
        "covered_lines": [
          18,
          19,
          23
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/in/pdf/FilePdfSource.java": {
    "class_content": [
      "package cn.pipe.in.pdf;\n",
      "\n",
      "import cn.pipe.in.AbstractPdfBoxSource;\n",
      "import org.apache.pdfbox.pdmodel.PDDocument;\n",
      "import java.io.File;\n",
      "import java.io.IOException;\n",
      "\n",
      "/**\n",
      " * A pdf source that from file.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class FilePdfSource extends AbstractPdfBoxSource<File> {\n",
      "\n",
      "    public FilePdfSource(File source) {\n",
      "        super(source);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected PDDocument doLoad() throws IOException {\n",
      "        return PDDocument.load(source);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.in.pdf;\n",
      "\n",
      "import org.apache.pdfbox.pdmodel.PDDocument;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.io.File;\n",
      "import java.io.IOException;\n",
      "import java.util.Objects;\n",
      "\n",
      "public class FilePdfSourceTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_doLoad() throws IOException {\n",
      "        // given\n",
      "        String path = Objects.requireNonNull(\n",
      "                ClassLoader.getSystemClassLoader().getResource(\"input/sequence.pdf\")\n",
      "        ).getPath();\n",
      "        File file = new File(path);\n",
      "\n",
      "        // when\n",
      "        FilePdfSource source = new FilePdfSource(file);\n",
      "        PDDocument document = source.doLoad();\n",
      "\n",
      "        // then\n",
      "        Assert.assertNotNull(document);\n",
      "        // The PDF file has only 3 pages.\n",
      "        Assert.assertEquals(3, document.getNumberOfPages());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "FilePdfSource::::doLoad()": [
        20,
        23
      ]
    },
    "test_method_lines_dic": {
      "FilePdfSourceTest::::test_doLoad()": [
        12,
        28
      ]
    },
    "reverse_method_lines_dic": {
      "20": "FilePdfSource::::doLoad()",
      "21": "FilePdfSource::::doLoad()",
      "22": "FilePdfSource::::doLoad()",
      "23": "FilePdfSource::::doLoad()"
    },
    "test_reverse_method_lines_dic": {
      "12": "FilePdfSourceTest::::test_doLoad()",
      "13": "FilePdfSourceTest::::test_doLoad()",
      "14": "FilePdfSourceTest::::test_doLoad()",
      "15": "FilePdfSourceTest::::test_doLoad()",
      "16": "FilePdfSourceTest::::test_doLoad()",
      "17": "FilePdfSourceTest::::test_doLoad()",
      "18": "FilePdfSourceTest::::test_doLoad()",
      "19": "FilePdfSourceTest::::test_doLoad()",
      "20": "FilePdfSourceTest::::test_doLoad()",
      "21": "FilePdfSourceTest::::test_doLoad()",
      "22": "FilePdfSourceTest::::test_doLoad()",
      "23": "FilePdfSourceTest::::test_doLoad()",
      "24": "FilePdfSourceTest::::test_doLoad()",
      "25": "FilePdfSourceTest::::test_doLoad()",
      "26": "FilePdfSourceTest::::test_doLoad()",
      "27": "FilePdfSourceTest::::test_doLoad()",
      "28": "FilePdfSourceTest::::test_doLoad()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          28
        ],
        "covered_lines": [
          17,
          18,
          22
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/in/pdf/ByteArrayPdfSource.java": {
    "class_content": [
      "package cn.pipe.in.pdf;\n",
      "\n",
      "import cn.pipe.in.AbstractPdfBoxSource;\n",
      "import org.apache.pdfbox.pdmodel.PDDocument;\n",
      "\n",
      "import java.io.IOException;\n",
      "\n",
      "/**\n",
      " * A pdf source that from byte array.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class ByteArrayPdfSource extends AbstractPdfBoxSource<byte[]> {\n",
      "\n",
      "    public ByteArrayPdfSource(byte[] source) {\n",
      "        super(source);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected PDDocument doLoad() throws IOException {\n",
      "        return PDDocument.load(source);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.in.pdf;\n",
      "\n",
      "import cn.pipe.TestUtils;\n",
      "import org.apache.pdfbox.io.IOUtils;\n",
      "import org.apache.pdfbox.pdmodel.PDDocument;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "\n",
      "public class ByteArrayPdfSourceTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_doLoad() throws IOException {\n",
      "        // given\n",
      "        InputStream is = TestUtils.getResourceStream(\"input/sequence.pdf\");\n",
      "        byte[] bytes = IOUtils.toByteArray(is);\n",
      "\n",
      "        // when\n",
      "        ByteArrayPdfSource source = new ByteArrayPdfSource(bytes);\n",
      "        PDDocument document = source.doLoad();\n",
      "\n",
      "        // then\n",
      "        Assert.assertNotNull(document);\n",
      "        // The PDF file has only 3 pages.\n",
      "        Assert.assertEquals(3, document.getNumberOfPages());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "ByteArrayPdfSource::::doLoad()": [
        20,
        23
      ]
    },
    "test_method_lines_dic": {
      "ByteArrayPdfSourceTest::::test_doLoad()": [
        13,
        27
      ]
    },
    "reverse_method_lines_dic": {
      "20": "ByteArrayPdfSource::::doLoad()",
      "21": "ByteArrayPdfSource::::doLoad()",
      "22": "ByteArrayPdfSource::::doLoad()",
      "23": "ByteArrayPdfSource::::doLoad()"
    },
    "test_reverse_method_lines_dic": {
      "13": "ByteArrayPdfSourceTest::::test_doLoad()",
      "14": "ByteArrayPdfSourceTest::::test_doLoad()",
      "15": "ByteArrayPdfSourceTest::::test_doLoad()",
      "16": "ByteArrayPdfSourceTest::::test_doLoad()",
      "17": "ByteArrayPdfSourceTest::::test_doLoad()",
      "18": "ByteArrayPdfSourceTest::::test_doLoad()",
      "19": "ByteArrayPdfSourceTest::::test_doLoad()",
      "20": "ByteArrayPdfSourceTest::::test_doLoad()",
      "21": "ByteArrayPdfSourceTest::::test_doLoad()",
      "22": "ByteArrayPdfSourceTest::::test_doLoad()",
      "23": "ByteArrayPdfSourceTest::::test_doLoad()",
      "24": "ByteArrayPdfSourceTest::::test_doLoad()",
      "25": "ByteArrayPdfSourceTest::::test_doLoad()",
      "26": "ByteArrayPdfSourceTest::::test_doLoad()",
      "27": "ByteArrayPdfSourceTest::::test_doLoad()"
    },
    "tests": [
      {
        "test_lines": [
          13,
          27
        ],
        "covered_lines": [
          17,
          18,
          22
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/captor/HashImageGenerator.java": {
    "class_content": [
      "package cn.pipe.captor;\n",
      "\n",
      "import cn.core.ImageGenerator;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.GenericBuilder;\n",
      "import cn.core.tool.Range;\n",
      "import cn.core.utils.BufferedImageUtils;\n",
      "import cn.core.utils.ColorUtils;\n",
      "import cn.core.utils.ObjectUtils;\n",
      "import java.awt.*;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.nio.charset.StandardCharsets;\n",
      "import java.security.MessageDigest;\n",
      "import java.security.NoSuchAlgorithmException;\n",
      "\n",
      "/**\n",
      " * An image generator that can generate hash matrix image.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class HashImageGenerator implements ImageGenerator {\n",
      "\n",
      "    /**\n",
      "     * The digest of the hash image.\n",
      "     */\n",
      "    private final byte[] digest;\n",
      "\n",
      "    /**\n",
      "     * The vertical grid num of the hash image.\n",
      "     */\n",
      "    private final int gridVerticalNum;\n",
      "\n",
      "    /**\n",
      "     * The background color of the hash image.\n",
      "     */\n",
      "    private final Color bgColor;\n",
      "\n",
      "    /**\n",
      "     * The foreground color of the hash image.\n",
      "     */\n",
      "    private final Color fgColor;\n",
      "\n",
      "    public HashImageGenerator(Builder b) {\n",
      "        this.digest = b.digest;\n",
      "        this.gridVerticalNum = b.gridVerticalNum;\n",
      "        this.bgColor = b.bgColor;\n",
      "        this.fgColor = b.fgColor;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public BufferedImage generate() {\n",
      "        int gridHorizontalNum = (gridVerticalNum + 1) >> 1;\n",
      "        BufferedImage bi = BufferedImageUtils.newBackgroundImage(gridVerticalNum, gridVerticalNum, bgColor);\n",
      "        for (int h = 0; h < gridHorizontalNum; h++) {\n",
      "            for (int v = 0; v < gridVerticalNum; v++) {\n",
      "                int pos = gridVerticalNum * h + v;\n",
      "\n",
      "                // paint foreground color for odd number,and paint background color for even number\n",
      "                if ((digest[pos] & 1) == 1) {\n",
      "\n",
      "                    // current grid,and symmetric grid which symmetrical by the mid-vertical-line\n",
      "                    bi.setRGB(h, v, fgColor.getRGB());\n",
      "                    bi.setRGB(gridVerticalNum - h - 1, v, fgColor.getRGB());\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return bi;\n",
      "    }\n",
      "\n",
      "    public static class Builder implements GenericBuilder<HashImageGenerator> {\n",
      "        private final byte[] digest;\n",
      "        private int gridVerticalNum;\n",
      "        private Color bgColor;\n",
      "        private Color fgColor;\n",
      "\n",
      "        public Builder(byte[] digest) {\n",
      "            this.digest = digest;\n",
      "        }\n",
      "        public Builder(String content) throws NoSuchAlgorithmException {\n",
      "            this(content, \"SHA-256\", 1);\n",
      "        }\n",
      "        public Builder(String content, String algorithm) throws NoSuchAlgorithmException {\n",
      "            this(content, algorithm, 1);\n",
      "        }\n",
      "        public Builder(String content, String algorithm, int updateTimes) throws NoSuchAlgorithmException {\n",
      "            MessageDigest md = MessageDigest.getInstance(algorithm);\n",
      "            if (updateTimes > 0) {\n",
      "                for (int i = 0; i < updateTimes; i++) {\n",
      "                    md.update(content.getBytes(StandardCharsets.UTF_8));\n",
      "                }\n",
      "            } else {\n",
      "                md.update(content.getBytes(StandardCharsets.UTF_8));\n",
      "            }\n",
      "            digest = md.digest();\n",
      "        }\n",
      "\n",
      "        public Builder gridVerticalNum(int gridVerticalNum) {\n",
      "            this.gridVerticalNum = gridVerticalNum;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder bgColor(Color bgColor) {\n",
      "            this.bgColor = bgColor;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder fgColor(Color fgColor) {\n",
      "            this.fgColor = fgColor;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public HashImageGenerator build() {\n",
      "            if (Range.ofInt(1, 8).notWithin(gridVerticalNum)) {\n",
      "                throw new InvalidSettingException(\"The vertical number of grids is out of bounds:[1, 8].\");\n",
      "            }\n",
      "\n",
      "            ObjectUtils.excNull(digest, \"Empty digest.\");\n",
      "\n",
      "            // Make sure that the length of the digest array is greater than half the number of grids.\n",
      "            int halfNumOfGrids = ((gridVerticalNum + 1) >> 1) * gridVerticalNum;\n",
      "            if (digest.length < halfNumOfGrids) {\n",
      "                String exMessage = \"The length of the digest array is less than half the number of grids.\" +\n",
      "                        \"Expected length is at least \" + halfNumOfGrids +\n",
      "                        \", but the actual length is only \" + digest.length +\n",
      "                        \".\";\n",
      "                throw new InvalidSettingException(exMessage);\n",
      "            }\n",
      "\n",
      "            // default color setting\n",
      "            if (bgColor == null) {\n",
      "                bgColor = ColorUtils.of(220, 220, 220);\n",
      "            }\n",
      "            if (fgColor == null) {\n",
      "                fgColor = ColorUtils.random();\n",
      "            }\n",
      "\n",
      "            return new HashImageGenerator(this);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.captor;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.utils.BufferedImageUtils;\n",
      "import cn.core.utils.ColorUtils;\n",
      "import cn.pipe.BufferedImageComparer;\n",
      "import cn.pipe.ReflectionUtils;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.awt.*;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.nio.charset.StandardCharsets;\n",
      "import java.security.MessageDigest;\n",
      "import java.security.NoSuchAlgorithmException;\n",
      "\n",
      "public class HashImageGeneratorTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_generate() throws NoSuchAlgorithmException {\n",
      "        // given\n",
      "        String content = \"test\";\n",
      "        String algorithm = \"SHA-256\";\n",
      "        int times = 2;\n",
      "        int gridVerticalNum = 7;\n",
      "        Color bgColor = Color.WHITE;\n",
      "        Color fgColor = Color.BLACK;\n",
      "\n",
      "        // when\n",
      "        HashImageGenerator generator = new HashImageGenerator.Builder(content, algorithm, times)\n",
      "                .gridVerticalNum(gridVerticalNum)\n",
      "                .bgColor(bgColor)\n",
      "                .fgColor(fgColor)\n",
      "                .build();\n",
      "        BufferedImage target = generator.generate();\n",
      "\n",
      "        // then\n",
      "        // get the digest\n",
      "        MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n",
      "        for (int i = 0; i < times; i++) {\n",
      "            messageDigest.update(content.getBytes(StandardCharsets.UTF_8));\n",
      "        }\n",
      "        byte[] digest = messageDigest.digest();\n",
      "        // generate image\n",
      "        BufferedImage image = BufferedImageUtils.newBackgroundImage(gridVerticalNum, gridVerticalNum, bgColor);\n",
      "        // paint foreground color\n",
      "        int gridHorizontalNum = gridVerticalNum / 2 + 1;\n",
      "        for (int i = 0; i < gridHorizontalNum; i++) {\n",
      "            for (int j = 0; j < gridVerticalNum; j++) {\n",
      "                int posIndex = gridVerticalNum * i + j;\n",
      "                if ((digest[posIndex] & 1) == 1) {\n",
      "                    image.setRGB(i, j, fgColor.getRGB());\n",
      "                    image.setRGB(gridVerticalNum - i - 1, j, fgColor.getRGB());\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n",
      "    }\n",
      "\n",
      "    public static class BuilderTest {\n",
      "\n",
      "        @Test\n",
      "        public void test_build_correctUsage_withContent() throws NoSuchAlgorithmException {\n",
      "            // given\n",
      "            String content = \"any keyword\";\n",
      "            String algorithm = \"MD5\";\n",
      "            int times = 4;\n",
      "            int gridNum = 5;\n",
      "            Color bgColor = Color.RED;\n",
      "            Color fgColor = Color.GRAY;\n",
      "\n",
      "            // when\n",
      "            HashImageGenerator.Builder builder = new HashImageGenerator.Builder(content, algorithm, times)\n",
      "                    .gridVerticalNum(gridNum)\n",
      "                    .bgColor(bgColor)\n",
      "                    .fgColor(fgColor);\n",
      "            HashImageGenerator generator = builder.build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertEquals(gridNum, ReflectionUtils.get(\"gridVerticalNum\", generator));\n",
      "            Assert.assertEquals(bgColor, ReflectionUtils.get(\"bgColor\", generator));\n",
      "            Assert.assertEquals(fgColor, ReflectionUtils.get(\"fgColor\", generator));\n",
      "\n",
      "            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n",
      "            for (int i = 0; i < times; i++) {\n",
      "                messageDigest.update(content.getBytes(StandardCharsets.UTF_8));\n",
      "            }\n",
      "            byte[] digest = messageDigest.digest();\n",
      "            Assert.assertArrayEquals(digest, (byte[]) ReflectionUtils.get(\"digest\", generator));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void test_build_correctUsage_withDigestArray() {\n",
      "            // given\n",
      "            byte[] digest = {\n",
      "                    (byte) 0xf1, (byte) 0xf2, (byte) 0xf3, (byte) 0xf4, (byte) 0xf5, (byte) 0xf6,\n",
      "                    (byte) 0xe1, (byte) 0xe2, (byte) 0xe3, (byte) 0xe4, (byte) 0xe5, (byte) 0xe6,\n",
      "                    (byte) 0xd1, (byte) 0xd2, (byte) 0xd3, (byte) 0xd4, (byte) 0xd5, (byte) 0xd6};\n",
      "            int gridNum = 6;\n",
      "            Color bgColor = Color.RED;\n",
      "            Color fgColor = Color.GRAY;\n",
      "\n",
      "            // when\n",
      "            HashImageGenerator.Builder builder = new HashImageGenerator.Builder(digest)\n",
      "                    .gridVerticalNum(gridNum)\n",
      "                    .bgColor(bgColor)\n",
      "                    .fgColor(fgColor);\n",
      "            HashImageGenerator generator = builder.build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertEquals(gridNum, ReflectionUtils.get(\"gridVerticalNum\", generator));\n",
      "            Assert.assertEquals(bgColor, ReflectionUtils.get(\"bgColor\", generator));\n",
      "            Assert.assertEquals(fgColor, ReflectionUtils.get(\"fgColor\", generator));\n",
      "            Assert.assertArrayEquals(digest, (byte[]) ReflectionUtils.get(\"digest\", generator));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void test_build_correctUsage_withDefaultParam() throws NoSuchAlgorithmException {\n",
      "            String content = \"default\";\n",
      "            int gridNum = 5;\n",
      "\n",
      "            // when\n",
      "            HashImageGenerator.Builder builder = new HashImageGenerator.Builder(content)\n",
      "                    .gridVerticalNum(gridNum);\n",
      "            HashImageGenerator generator = builder.build();\n",
      "\n",
      "            // then assert default value\n",
      "            // default background color = [220, 220, 220]\n",
      "            Assert.assertEquals(ColorUtils.of(220, 220, 220).getRGB(),\n",
      "                    ((Color)ReflectionUtils.get(\"bgColor\", generator)).getRGB());\n",
      "            // default foreground color is random\n",
      "            Assert.assertNotNull(ReflectionUtils.get(\"fgColor\", generator));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_notSetParam() throws NoSuchAlgorithmException {\n",
      "            // not set vertical grid num\n",
      "            HashImageGenerator.Builder builder1 = new HashImageGenerator.Builder(\"digest\")\n",
      "                    .bgColor(Color.RED)\n",
      "                    .fgColor(Color.GRAY);\n",
      "            InvalidSettingException ex1 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder1::build);\n",
      "            Assert.assertEquals(\"The vertical number of grids is out of bounds:[1, 8].\",\n",
      "                    ex1.getMessage());\n",
      "\n",
      "            // not set digest array\n",
      "            HashImageGenerator.Builder builder2 = new HashImageGenerator.Builder((byte[]) null)\n",
      "                    .gridVerticalNum(5)\n",
      "                    .bgColor(Color.RED)\n",
      "                    .fgColor(Color.GRAY);\n",
      "            NullPointerException ex2 = Assert.assertThrows(NullPointerException.class,\n",
      "                    builder2::build);\n",
      "            Assert.assertEquals(\"Empty digest.\",\n",
      "                    ex2.getMessage());\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_noSuchAlgorithm() {\n",
      "            NoSuchAlgorithmException ex = Assert.assertThrows(NoSuchAlgorithmException.class,\n",
      "                    () -> new HashImageGenerator\n",
      "                            .Builder(\"digest\", \"non-existent-algorithm\"));\n",
      "            Assert.assertEquals(\"non-existent-algorithm MessageDigest not available\",\n",
      "                    ex.getMessage());\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_notEnoughDigestArray() throws NoSuchAlgorithmException {\n",
      "            // The length of digest array is 16 when algorithm set to MD5.\n",
      "            HashImageGenerator.Builder builder = new HashImageGenerator\n",
      "                    .Builder(\"digest\", \"MD5\");\n",
      "\n",
      "            // The size of grids is 36 when gridVerticalNum set to 6.\n",
      "            builder.gridVerticalNum(6);\n",
      "\n",
      "            // At least 18 [36/2] element are required, but only 16.\n",
      "            InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder::build);\n",
      "            Assert.assertEquals(\"The length of the digest array is less than half \" +\n",
      "                    \"the number of grids.Expected length is at least 18, but the actual \" +\n",
      "                    \"length is only 16.\",\n",
      "                    ex.getMessage());\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "HashImageGenerator::::generate()": [
        51,
        69
      ],
      "HashImageGenerator.Builder::::gridVerticalNum(int)": [
        98,
        101
      ],
      "HashImageGenerator.Builder::::bgColor(java.awt.Color)": [
        103,
        106
      ],
      "HashImageGenerator.Builder::::fgColor(java.awt.Color)": [
        108,
        111
      ],
      "HashImageGenerator.Builder::::build()": [
        113,
        140
      ]
    },
    "test_method_lines_dic": {
      "HashImageGeneratorTest::::test_generate()": [
        18,
        58
      ],
      "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()": [
        62,
        90
      ],
      "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()": [
        92,
        115
      ],
      "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()": [
        117,
        133
      ],
      "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()": [
        135,
        155
      ],
      "HashImageGeneratorTest.BuilderTest::::testEx_build_noSuchAlgorithm()": [
        157,
        164
      ],
      "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()": [
        166,
        182
      ]
    },
    "reverse_method_lines_dic": {
      "51": "HashImageGenerator::::generate()",
      "52": "HashImageGenerator::::generate()",
      "53": "HashImageGenerator::::generate()",
      "54": "HashImageGenerator::::generate()",
      "55": "HashImageGenerator::::generate()",
      "56": "HashImageGenerator::::generate()",
      "57": "HashImageGenerator::::generate()",
      "58": "HashImageGenerator::::generate()",
      "59": "HashImageGenerator::::generate()",
      "60": "HashImageGenerator::::generate()",
      "61": "HashImageGenerator::::generate()",
      "62": "HashImageGenerator::::generate()",
      "63": "HashImageGenerator::::generate()",
      "64": "HashImageGenerator::::generate()",
      "65": "HashImageGenerator::::generate()",
      "66": "HashImageGenerator::::generate()",
      "67": "HashImageGenerator::::generate()",
      "68": "HashImageGenerator::::generate()",
      "69": "HashImageGenerator::::generate()",
      "98": "HashImageGenerator.Builder::::gridVerticalNum(int)",
      "99": "HashImageGenerator.Builder::::gridVerticalNum(int)",
      "100": "HashImageGenerator.Builder::::gridVerticalNum(int)",
      "101": "HashImageGenerator.Builder::::gridVerticalNum(int)",
      "103": "HashImageGenerator.Builder::::bgColor(java.awt.Color)",
      "104": "HashImageGenerator.Builder::::bgColor(java.awt.Color)",
      "105": "HashImageGenerator.Builder::::bgColor(java.awt.Color)",
      "106": "HashImageGenerator.Builder::::bgColor(java.awt.Color)",
      "108": "HashImageGenerator.Builder::::fgColor(java.awt.Color)",
      "109": "HashImageGenerator.Builder::::fgColor(java.awt.Color)",
      "110": "HashImageGenerator.Builder::::fgColor(java.awt.Color)",
      "111": "HashImageGenerator.Builder::::fgColor(java.awt.Color)",
      "113": "HashImageGenerator.Builder::::build()",
      "114": "HashImageGenerator.Builder::::build()",
      "115": "HashImageGenerator.Builder::::build()",
      "116": "HashImageGenerator.Builder::::build()",
      "117": "HashImageGenerator.Builder::::build()",
      "118": "HashImageGenerator.Builder::::build()",
      "119": "HashImageGenerator.Builder::::build()",
      "120": "HashImageGenerator.Builder::::build()",
      "121": "HashImageGenerator.Builder::::build()",
      "122": "HashImageGenerator.Builder::::build()",
      "123": "HashImageGenerator.Builder::::build()",
      "124": "HashImageGenerator.Builder::::build()",
      "125": "HashImageGenerator.Builder::::build()",
      "126": "HashImageGenerator.Builder::::build()",
      "127": "HashImageGenerator.Builder::::build()",
      "128": "HashImageGenerator.Builder::::build()",
      "129": "HashImageGenerator.Builder::::build()",
      "130": "HashImageGenerator.Builder::::build()",
      "131": "HashImageGenerator.Builder::::build()",
      "132": "HashImageGenerator.Builder::::build()",
      "133": "HashImageGenerator.Builder::::build()",
      "134": "HashImageGenerator.Builder::::build()",
      "135": "HashImageGenerator.Builder::::build()",
      "136": "HashImageGenerator.Builder::::build()",
      "137": "HashImageGenerator.Builder::::build()",
      "138": "HashImageGenerator.Builder::::build()",
      "139": "HashImageGenerator.Builder::::build()",
      "140": "HashImageGenerator.Builder::::build()"
    },
    "test_reverse_method_lines_dic": {
      "18": "HashImageGeneratorTest::::test_generate()",
      "19": "HashImageGeneratorTest::::test_generate()",
      "20": "HashImageGeneratorTest::::test_generate()",
      "21": "HashImageGeneratorTest::::test_generate()",
      "22": "HashImageGeneratorTest::::test_generate()",
      "23": "HashImageGeneratorTest::::test_generate()",
      "24": "HashImageGeneratorTest::::test_generate()",
      "25": "HashImageGeneratorTest::::test_generate()",
      "26": "HashImageGeneratorTest::::test_generate()",
      "27": "HashImageGeneratorTest::::test_generate()",
      "28": "HashImageGeneratorTest::::test_generate()",
      "29": "HashImageGeneratorTest::::test_generate()",
      "30": "HashImageGeneratorTest::::test_generate()",
      "31": "HashImageGeneratorTest::::test_generate()",
      "32": "HashImageGeneratorTest::::test_generate()",
      "33": "HashImageGeneratorTest::::test_generate()",
      "34": "HashImageGeneratorTest::::test_generate()",
      "35": "HashImageGeneratorTest::::test_generate()",
      "36": "HashImageGeneratorTest::::test_generate()",
      "37": "HashImageGeneratorTest::::test_generate()",
      "38": "HashImageGeneratorTest::::test_generate()",
      "39": "HashImageGeneratorTest::::test_generate()",
      "40": "HashImageGeneratorTest::::test_generate()",
      "41": "HashImageGeneratorTest::::test_generate()",
      "42": "HashImageGeneratorTest::::test_generate()",
      "43": "HashImageGeneratorTest::::test_generate()",
      "44": "HashImageGeneratorTest::::test_generate()",
      "45": "HashImageGeneratorTest::::test_generate()",
      "46": "HashImageGeneratorTest::::test_generate()",
      "47": "HashImageGeneratorTest::::test_generate()",
      "48": "HashImageGeneratorTest::::test_generate()",
      "49": "HashImageGeneratorTest::::test_generate()",
      "50": "HashImageGeneratorTest::::test_generate()",
      "51": "HashImageGeneratorTest::::test_generate()",
      "52": "HashImageGeneratorTest::::test_generate()",
      "53": "HashImageGeneratorTest::::test_generate()",
      "54": "HashImageGeneratorTest::::test_generate()",
      "55": "HashImageGeneratorTest::::test_generate()",
      "56": "HashImageGeneratorTest::::test_generate()",
      "57": "HashImageGeneratorTest::::test_generate()",
      "58": "HashImageGeneratorTest::::test_generate()",
      "62": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "63": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "64": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "65": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "66": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "67": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "68": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "69": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "70": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "71": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "72": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "73": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "74": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "75": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "76": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "77": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "78": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "79": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "80": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "81": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "82": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "83": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "84": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "85": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "86": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "87": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "88": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "89": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "90": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withContent()",
      "92": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "93": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "94": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "95": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "96": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "97": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "98": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "99": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "100": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "101": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "102": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "103": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "104": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "105": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "106": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "107": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "108": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "109": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "110": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "111": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "112": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "113": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "114": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "115": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDigestArray()",
      "117": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "118": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "119": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "120": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "121": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "122": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "123": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "124": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "125": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "126": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "127": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "128": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "129": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "130": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "131": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "132": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "133": "HashImageGeneratorTest.BuilderTest::::test_build_correctUsage_withDefaultParam()",
      "135": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "136": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "137": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "138": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "139": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "140": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "141": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "142": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "143": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "144": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "145": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "146": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "147": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "148": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "149": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "150": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "151": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "152": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "153": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "154": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "155": "HashImageGeneratorTest.BuilderTest::::testEx_build_notSetParam()",
      "157": "HashImageGeneratorTest.BuilderTest::::testEx_build_noSuchAlgorithm()",
      "158": "HashImageGeneratorTest.BuilderTest::::testEx_build_noSuchAlgorithm()",
      "159": "HashImageGeneratorTest.BuilderTest::::testEx_build_noSuchAlgorithm()",
      "160": "HashImageGeneratorTest.BuilderTest::::testEx_build_noSuchAlgorithm()",
      "161": "HashImageGeneratorTest.BuilderTest::::testEx_build_noSuchAlgorithm()",
      "162": "HashImageGeneratorTest.BuilderTest::::testEx_build_noSuchAlgorithm()",
      "163": "HashImageGeneratorTest.BuilderTest::::testEx_build_noSuchAlgorithm()",
      "164": "HashImageGeneratorTest.BuilderTest::::testEx_build_noSuchAlgorithm()",
      "166": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "167": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "168": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "169": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "170": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "171": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "172": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "173": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "174": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "175": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "176": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "177": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "178": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "179": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "180": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "181": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()",
      "182": "HashImageGeneratorTest.BuilderTest::::testEx_build_notEnoughDigestArray()"
    },
    "tests": [
      {
        "test_lines": [
          18,
          58
        ],
        "covered_lines": [
          44,
          45,
          46,
          47,
          48,
          49,
          53,
          54,
          55,
          56,
          57,
          60,
          63,
          64,
          68,
          86,
          87,
          88,
          89,
          90,
          95,
          96,
          99,
          100,
          104,
          105,
          109,
          110,
          115,
          119,
          122,
          123,
          132,
          135,
          139
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/captor/MonoColorImageGenerator.java": {
    "class_content": [
      "package cn.pipe.captor;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.tool.Range;\n",
      "import cn.core.utils.BufferedImageUtils;\n",
      "import cn.core.utils.ObjectUtils;\n",
      "import java.awt.*;\n",
      "import java.awt.image.BufferedImage;\n",
      "\n",
      "/**\n",
      " * An image generator that can generate mono color image.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class MonoColorImageGenerator extends TransparentImageGenerator {\n",
      "\n",
      "    /**\n",
      "     * The color of the image.\n",
      "     */\n",
      "    private final Color color;\n",
      "\n",
      "    /**\n",
      "     * The alpha of the image which equals 0, indicating that the image is completely transparent.\n",
      "     */\n",
      "    private final float alpha;\n",
      "\n",
      "    public MonoColorImageGenerator(Builder b) {\n",
      "        super(b);\n",
      "        this.color = b.color;\n",
      "        this.alpha = b.alpha;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public BufferedImage generate() {\n",
      "        return BufferedImageUtils.newColoredImage(width, height, alpha, color);\n",
      "    }\n",
      "\n",
      "    public static class Builder extends TransparentImageGenerator.Builder {\n",
      "        private Color color;\n",
      "        private float alpha = 1f;\n",
      "\n",
      "        @Override\n",
      "        public Builder width(int width) {\n",
      "            super.width = width;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Builder height(int height) {\n",
      "            super.height = height;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder color(Color color) {\n",
      "            this.color = color;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder alpha(float alpha) {\n",
      "            this.alpha = alpha;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public MonoColorImageGenerator build() {\n",
      "            super.build();\n",
      "            ObjectUtils.excNull(color, \"No color specified.\");\n",
      "            if (Range.ofFloat(0f, 1f).notWithin(alpha)) {\n",
      "                throw new InvalidSettingException(\"Alpha out of bounds:[0, 1].\");\n",
      "            }\n",
      "\n",
      "            return new MonoColorImageGenerator(this);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.captor;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.pipe.BufferedImageComparer;\n",
      "import cn.pipe.ReflectionUtils;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.awt.*;\n",
      "import java.awt.image.BufferedImage;\n",
      "\n",
      "public class MonoColorImageGeneratorTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_generate_correctUsage() {\n",
      "        // given\n",
      "        int w = 50, h = 100;\n",
      "        Color c = Color.GRAY;\n",
      "        float a = 0.8f;\n",
      "\n",
      "        // when\n",
      "        MonoColorImageGenerator generator = new MonoColorImageGenerator.Builder()\n",
      "                .width(w).height(h)\n",
      "                .color(c)\n",
      "                .alpha(a)\n",
      "                .build();\n",
      "        BufferedImage target = generator.generate();\n",
      "\n",
      "        // then\n",
      "        BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n",
      "        Graphics2D g = image.createGraphics();\n",
      "        g.setColor(c);\n",
      "        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, a));\n",
      "        g.fillRect(0, 0, w, h);\n",
      "        g.dispose();\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n",
      "    }\n",
      "\n",
      "    public static class BuilderTest {\n",
      "\n",
      "        @Test\n",
      "        public void test_build_correctUsage() {\n",
      "            // given\n",
      "            int w = 50, h = 100;\n",
      "            Color c = Color.GRAY;\n",
      "            float a = 0.8f;\n",
      "\n",
      "            // when\n",
      "            MonoColorImageGenerator generator = new MonoColorImageGenerator.Builder()\n",
      "                    .width(w).height(h)\n",
      "                    .color(c)\n",
      "                    .alpha(a)\n",
      "                    .build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertEquals(w, ReflectionUtils.getFromSuper(\"width\", generator));\n",
      "            Assert.assertEquals(h, ReflectionUtils.getFromSuper(\"height\", generator));\n",
      "\n",
      "            Assert.assertEquals(c, ReflectionUtils.get(\"color\", generator));\n",
      "            Assert.assertEquals(a, ReflectionUtils.get(\"alpha\", generator));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void test_build_defaultParam() {\n",
      "            // default alpha is 1.0\n",
      "            MonoColorImageGenerator generator = new MonoColorImageGenerator.Builder()\n",
      "                    .width(100).height(100)\n",
      "                    .color(Color.GRAY)\n",
      "                    .build();\n",
      "            Assert.assertEquals(1.0f, ReflectionUtils.get(\"alpha\", generator));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_withNullParam() {\n",
      "            // null color\n",
      "            MonoColorImageGenerator.Builder builder = new MonoColorImageGenerator.Builder()\n",
      "                    .width(100).height(100)\n",
      "                    .color(null);\n",
      "            NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                    builder::build);\n",
      "            Assert.assertEquals(\"No color specified.\", ex.getMessage());\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_withInvalidParam() {\n",
      "            // alpha out of bound\n",
      "            MonoColorImageGenerator.Builder builder = new MonoColorImageGenerator.Builder()\n",
      "                    .width(100).height(100)\n",
      "                    .color(Color.BLACK)\n",
      "                    .alpha(1.2f);\n",
      "            InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder::build);\n",
      "            Assert.assertEquals(\"Alpha out of bounds:[0, 1].\",\n",
      "                    ex.getMessage());\n",
      "        }\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "MonoColorImageGenerator::::generate()": [
        34,
        37
      ],
      "MonoColorImageGenerator.Builder::::width(int)": [
        43,
        47
      ],
      "MonoColorImageGenerator.Builder::::height(int)": [
        49,
        53
      ],
      "MonoColorImageGenerator.Builder::::color(java.awt.Color)": [
        55,
        58
      ],
      "MonoColorImageGenerator.Builder::::alpha(float)": [
        60,
        63
      ],
      "MonoColorImageGenerator.Builder::::build()": [
        65,
        74
      ]
    },
    "test_method_lines_dic": {
      "MonoColorImageGeneratorTest::::test_generate_correctUsage()": [
        13,
        37
      ],
      "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()": [
        41,
        61
      ],
      "MonoColorImageGeneratorTest.BuilderTest::::test_build_defaultParam()": [
        63,
        71
      ],
      "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()": [
        73,
        82
      ],
      "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()": [
        84,
        95
      ]
    },
    "reverse_method_lines_dic": {
      "34": "MonoColorImageGenerator::::generate()",
      "35": "MonoColorImageGenerator::::generate()",
      "36": "MonoColorImageGenerator::::generate()",
      "37": "MonoColorImageGenerator::::generate()",
      "43": "MonoColorImageGenerator.Builder::::width(int)",
      "44": "MonoColorImageGenerator.Builder::::width(int)",
      "45": "MonoColorImageGenerator.Builder::::width(int)",
      "46": "MonoColorImageGenerator.Builder::::width(int)",
      "47": "MonoColorImageGenerator.Builder::::width(int)",
      "49": "MonoColorImageGenerator.Builder::::height(int)",
      "50": "MonoColorImageGenerator.Builder::::height(int)",
      "51": "MonoColorImageGenerator.Builder::::height(int)",
      "52": "MonoColorImageGenerator.Builder::::height(int)",
      "53": "MonoColorImageGenerator.Builder::::height(int)",
      "55": "MonoColorImageGenerator.Builder::::color(java.awt.Color)",
      "56": "MonoColorImageGenerator.Builder::::color(java.awt.Color)",
      "57": "MonoColorImageGenerator.Builder::::color(java.awt.Color)",
      "58": "MonoColorImageGenerator.Builder::::color(java.awt.Color)",
      "60": "MonoColorImageGenerator.Builder::::alpha(float)",
      "61": "MonoColorImageGenerator.Builder::::alpha(float)",
      "62": "MonoColorImageGenerator.Builder::::alpha(float)",
      "63": "MonoColorImageGenerator.Builder::::alpha(float)",
      "65": "MonoColorImageGenerator.Builder::::build()",
      "66": "MonoColorImageGenerator.Builder::::build()",
      "67": "MonoColorImageGenerator.Builder::::build()",
      "68": "MonoColorImageGenerator.Builder::::build()",
      "69": "MonoColorImageGenerator.Builder::::build()",
      "70": "MonoColorImageGenerator.Builder::::build()",
      "71": "MonoColorImageGenerator.Builder::::build()",
      "72": "MonoColorImageGenerator.Builder::::build()",
      "73": "MonoColorImageGenerator.Builder::::build()",
      "74": "MonoColorImageGenerator.Builder::::build()"
    },
    "test_reverse_method_lines_dic": {
      "13": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "14": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "15": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "16": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "17": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "18": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "19": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "20": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "21": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "22": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "23": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "24": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "25": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "26": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "27": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "28": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "29": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "30": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "31": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "32": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "33": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "34": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "35": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "36": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "37": "MonoColorImageGeneratorTest::::test_generate_correctUsage()",
      "41": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "42": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "43": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "44": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "45": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "46": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "47": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "48": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "49": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "50": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "51": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "52": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "53": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "54": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "55": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "56": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "57": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "58": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "59": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "60": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "61": "MonoColorImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "63": "MonoColorImageGeneratorTest.BuilderTest::::test_build_defaultParam()",
      "64": "MonoColorImageGeneratorTest.BuilderTest::::test_build_defaultParam()",
      "65": "MonoColorImageGeneratorTest.BuilderTest::::test_build_defaultParam()",
      "66": "MonoColorImageGeneratorTest.BuilderTest::::test_build_defaultParam()",
      "67": "MonoColorImageGeneratorTest.BuilderTest::::test_build_defaultParam()",
      "68": "MonoColorImageGeneratorTest.BuilderTest::::test_build_defaultParam()",
      "69": "MonoColorImageGeneratorTest.BuilderTest::::test_build_defaultParam()",
      "70": "MonoColorImageGeneratorTest.BuilderTest::::test_build_defaultParam()",
      "71": "MonoColorImageGeneratorTest.BuilderTest::::test_build_defaultParam()",
      "73": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()",
      "74": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()",
      "75": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()",
      "76": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()",
      "77": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()",
      "78": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()",
      "79": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()",
      "80": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()",
      "81": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()",
      "82": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withNullParam()",
      "84": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "85": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "86": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "87": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "88": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "89": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "90": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "91": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "92": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "93": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "94": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()",
      "95": "MonoColorImageGeneratorTest.BuilderTest::::testEx_build_withInvalidParam()"
    },
    "tests": [
      {
        "test_lines": [
          13,
          37
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          36,
          39,
          41,
          45,
          46,
          51,
          52,
          56,
          57,
          61,
          62,
          67,
          68,
          69,
          73
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/captor/TransparentImageGenerator.java": {
    "class_content": [
      "package cn.pipe.captor;\n",
      "\n",
      "import cn.core.ImageGenerator;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.GenericBuilder;\n",
      "import cn.core.utils.BufferedImageUtils;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.text.MessageFormat;\n",
      "\n",
      "/**\n",
      " * An image generator that can generate transparent image.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class TransparentImageGenerator implements ImageGenerator {\n",
      "\n",
      "    /**\n",
      "     * The width of the image.\n",
      "     */\n",
      "    protected final int width;\n",
      "\n",
      "    /**\n",
      "     * The height of the image.\n",
      "     */\n",
      "    protected final int height;\n",
      "\n",
      "    public TransparentImageGenerator(Builder b) {\n",
      "        this.width = b.width;\n",
      "        this.height = b.height;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public BufferedImage generate() {\n",
      "        return BufferedImageUtils.newTransparentImage(width, height);\n",
      "    }\n",
      "\n",
      "    public static class Builder implements GenericBuilder<TransparentImageGenerator> {\n",
      "        protected int width;\n",
      "        protected int height;\n",
      "\n",
      "        public Builder width(int width) {\n",
      "            this.width = width;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder height(int height) {\n",
      "            this.height = height;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public TransparentImageGenerator build() {\n",
      "            if (width <= 0 || height <= 0) {\n",
      "                throw new InvalidSettingException(MessageFormat.format(\n",
      "                        \"Invalid size[{0}, {1}].\", width, height));\n",
      "            }\n",
      "            return new TransparentImageGenerator(this);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.captor;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.pipe.BufferedImageComparer;\n",
      "import cn.pipe.ReflectionUtils;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.awt.*;\n",
      "import java.awt.image.BufferedImage;\n",
      "\n",
      "public class TransparentImageGeneratorTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_generate_correctUsage() {\n",
      "        // given\n",
      "        int w = 50, h = 100;\n",
      "\n",
      "        // when\n",
      "        TransparentImageGenerator generator = new TransparentImageGenerator.Builder()\n",
      "                .width(w)\n",
      "                .height(h)\n",
      "                .build();\n",
      "        BufferedImage target = generator.generate();\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(w, target.getWidth());\n",
      "        Assert.assertEquals(h, target.getHeight());\n",
      "\n",
      "        // and then\n",
      "        BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n",
      "        Graphics2D g = image.createGraphics();\n",
      "        image = g.getDeviceConfiguration().createCompatibleImage(w, h, Transparency.TRANSLUCENT);\n",
      "        g.dispose();\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image, target));\n",
      "    }\n",
      "\n",
      "    public static class BuilderTest {\n",
      "\n",
      "        @Test\n",
      "        public void test_build_correctUsage() {\n",
      "            // given\n",
      "            int w = 60, h = 110;\n",
      "\n",
      "            // when\n",
      "            TransparentImageGenerator generator = new TransparentImageGenerator.Builder()\n",
      "                    .width(w)\n",
      "                    .height(h)\n",
      "                    .build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertEquals(w, ReflectionUtils.get(\"width\", generator));\n",
      "            Assert.assertEquals(h, ReflectionUtils.get(\"height\", generator));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_invalidParam() {\n",
      "            // invalid width\n",
      "            TransparentImageGenerator.Builder builder1 = new TransparentImageGenerator.Builder()\n",
      "                    .width(-10)\n",
      "                    .height(50);\n",
      "            InvalidSettingException ex1 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder1::build);\n",
      "            Assert.assertEquals(\"Invalid size[-10, 50].\", ex1.getMessage());\n",
      "\n",
      "            // invalid height\n",
      "            TransparentImageGenerator.Builder builder2 = new TransparentImageGenerator.Builder()\n",
      "                    .width(10)\n",
      "                    .height(-50);\n",
      "            InvalidSettingException ex2 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder2::build);\n",
      "            Assert.assertEquals(\"Invalid size[10, -50].\", ex2.getMessage());\n",
      "        }\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "TransparentImageGenerator::::generate()": [
        33,
        36
      ],
      "TransparentImageGenerator.Builder::::width(int)": [
        42,
        45
      ],
      "TransparentImageGenerator.Builder::::height(int)": [
        47,
        50
      ],
      "TransparentImageGenerator.Builder::::build()": [
        52,
        59
      ]
    },
    "test_method_lines_dic": {
      "TransparentImageGeneratorTest::::test_generate_correctUsage()": [
        13,
        36
      ],
      "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()": [
        40,
        54
      ],
      "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()": [
        56,
        73
      ]
    },
    "reverse_method_lines_dic": {
      "33": "TransparentImageGenerator::::generate()",
      "34": "TransparentImageGenerator::::generate()",
      "35": "TransparentImageGenerator::::generate()",
      "36": "TransparentImageGenerator::::generate()",
      "42": "TransparentImageGenerator.Builder::::width(int)",
      "43": "TransparentImageGenerator.Builder::::width(int)",
      "44": "TransparentImageGenerator.Builder::::width(int)",
      "45": "TransparentImageGenerator.Builder::::width(int)",
      "47": "TransparentImageGenerator.Builder::::height(int)",
      "48": "TransparentImageGenerator.Builder::::height(int)",
      "49": "TransparentImageGenerator.Builder::::height(int)",
      "50": "TransparentImageGenerator.Builder::::height(int)",
      "52": "TransparentImageGenerator.Builder::::build()",
      "53": "TransparentImageGenerator.Builder::::build()",
      "54": "TransparentImageGenerator.Builder::::build()",
      "55": "TransparentImageGenerator.Builder::::build()",
      "56": "TransparentImageGenerator.Builder::::build()",
      "57": "TransparentImageGenerator.Builder::::build()",
      "58": "TransparentImageGenerator.Builder::::build()",
      "59": "TransparentImageGenerator.Builder::::build()"
    },
    "test_reverse_method_lines_dic": {
      "13": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "14": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "15": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "16": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "17": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "18": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "19": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "20": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "21": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "22": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "23": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "24": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "25": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "26": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "27": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "28": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "29": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "30": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "31": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "32": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "33": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "34": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "35": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "36": "TransparentImageGeneratorTest::::test_generate_correctUsage()",
      "40": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "41": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "42": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "43": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "44": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "45": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "46": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "47": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "48": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "49": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "50": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "51": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "52": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "53": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "54": "TransparentImageGeneratorTest.BuilderTest::::test_build_correctUsage()",
      "56": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "57": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "58": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "59": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "60": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "61": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "62": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "63": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "64": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "65": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "66": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "67": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "68": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "69": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "70": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "71": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "72": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()",
      "73": "TransparentImageGeneratorTest.BuilderTest::::testEx_build_invalidParam()"
    },
    "tests": [
      {
        "test_lines": [
          13,
          36
        ],
        "covered_lines": [
          28,
          29,
          30,
          31,
          35,
          38,
          43,
          44,
          48,
          49,
          54,
          58
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/ypipe/AbstractSplitFilter.java": {
    "class_content": [
      "package cn.pipe.ypipe;\n",
      "\n",
      "import cn.core.PipeFilter;\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.utils.CollectionUtils;\n",
      "import cn.core.utils.ObjectUtils;\n",
      "\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * An abstract pipe filter which used to split one images into multiple slices.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public abstract class AbstractSplitFilter implements PipeFilter {\n",
      "\n",
      "    @Override\n",
      "    public List<BufferedImage> execute(List<BufferedImage> images) {\n",
      "        ObjectUtils.excNull(images, \"Source images is null.\");\n",
      "        CollectionUtils.excEmpty(images, \"Not any source image was found.\");\n",
      "        if (images.size() > 1) {\n",
      "            throw new HandlingException(\"Splitting of multiple images is not supported.\");\n",
      "        }\n",
      "        return split(images.get(0));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Split one image into multiple images.\n",
      "     *\n",
      "     * @param image The source image.\n",
      "     * @return The final images after split.\n",
      "     */\n",
      "    protected abstract List<BufferedImage> split(BufferedImage image);\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.ypipe;\n",
      "\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.utils.BufferedImageUtils;\n",
      "import cn.pipe.BufferedImageComparer;\n",
      "import cn.pipe.TestUtils;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "public class AbstractSplitFilterTest {\n",
      "\n",
      "    private static class CopyHandler extends AbstractSplitFilter {\n",
      "        @Override\n",
      "        protected List<BufferedImage> split(BufferedImage image) {\n",
      "            // Just copy two images from original image.\n",
      "            List<BufferedImage> target = new ArrayList<>();\n",
      "            target.add(BufferedImageUtils.copy(image, image.getType()));\n",
      "            target.add(BufferedImageUtils.copy(image, image.getType()));\n",
      "            return target;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_execute_correctUsage() throws IOException {\n",
      "        // given\n",
      "        BufferedImage img = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n",
      "\n",
      "        // when\n",
      "        AbstractSplitFilter handler = new CopyHandler();\n",
      "        List<BufferedImage> target = handler.execute(Collections.singletonList(img));\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(2, target.size());\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(img, target.get(0)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(img, target.get(1)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_execute_nullImage() {\n",
      "        AbstractSplitFilter handler = new CopyHandler();\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> handler.execute(null));\n",
      "        Assert.assertEquals(\"Source images is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_execute_emptyImage() {\n",
      "        AbstractSplitFilter handler = new CopyHandler();\n",
      "        List<BufferedImage> images = Collections.emptyList();\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> handler.execute(images));\n",
      "        Assert.assertEquals(\"Not any source image was found.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_execute_multipleImages() {\n",
      "        BufferedImage image1 = new BufferedImage(200, 300, BufferedImage.TYPE_INT_RGB);\n",
      "        BufferedImage image2 = new BufferedImage(100, 300, BufferedImage.TYPE_INT_RGB);\n",
      "\n",
      "        AbstractSplitFilter handler = new CopyHandler();\n",
      "        List<BufferedImage> images = Arrays.asList(image1, image2);\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                () -> handler.execute(images));\n",
      "        Assert.assertEquals(\"Splitting of multiple images is not supported.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "AbstractSplitFilter::::execute(java.util.List<java.awt.image.BufferedImage>)": [
        19,
        27
      ],
      "AbstractSplitFilter::::split(java.awt.image.BufferedImage)": [
        35,
        35
      ]
    },
    "test_method_lines_dic": {
      "AbstractSplitFilterTest.CopyHandler::::split(java.awt.image.BufferedImage)": [
        20,
        27
      ],
      "AbstractSplitFilterTest::::test_execute_correctUsage()": [
        30,
        43
      ],
      "AbstractSplitFilterTest::::testEx_execute_nullImage()": [
        45,
        52
      ],
      "AbstractSplitFilterTest::::testEx_execute_emptyImage()": [
        54,
        62
      ],
      "AbstractSplitFilterTest::::testEx_execute_multipleImages()": [
        64,
        75
      ]
    },
    "reverse_method_lines_dic": {
      "19": "AbstractSplitFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "20": "AbstractSplitFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "21": "AbstractSplitFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "22": "AbstractSplitFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "23": "AbstractSplitFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "24": "AbstractSplitFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "25": "AbstractSplitFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "26": "AbstractSplitFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "27": "AbstractSplitFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "35": "AbstractSplitFilter::::split(java.awt.image.BufferedImage)"
    },
    "test_reverse_method_lines_dic": {
      "20": "AbstractSplitFilterTest.CopyHandler::::split(java.awt.image.BufferedImage)",
      "21": "AbstractSplitFilterTest.CopyHandler::::split(java.awt.image.BufferedImage)",
      "22": "AbstractSplitFilterTest.CopyHandler::::split(java.awt.image.BufferedImage)",
      "23": "AbstractSplitFilterTest.CopyHandler::::split(java.awt.image.BufferedImage)",
      "24": "AbstractSplitFilterTest.CopyHandler::::split(java.awt.image.BufferedImage)",
      "25": "AbstractSplitFilterTest.CopyHandler::::split(java.awt.image.BufferedImage)",
      "26": "AbstractSplitFilterTest.CopyHandler::::split(java.awt.image.BufferedImage)",
      "27": "AbstractSplitFilterTest.CopyHandler::::split(java.awt.image.BufferedImage)",
      "30": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "31": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "32": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "33": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "34": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "35": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "36": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "37": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "38": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "39": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "40": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "41": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "42": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "43": "AbstractSplitFilterTest::::test_execute_correctUsage()",
      "45": "AbstractSplitFilterTest::::testEx_execute_nullImage()",
      "46": "AbstractSplitFilterTest::::testEx_execute_nullImage()",
      "47": "AbstractSplitFilterTest::::testEx_execute_nullImage()",
      "48": "AbstractSplitFilterTest::::testEx_execute_nullImage()",
      "49": "AbstractSplitFilterTest::::testEx_execute_nullImage()",
      "50": "AbstractSplitFilterTest::::testEx_execute_nullImage()",
      "51": "AbstractSplitFilterTest::::testEx_execute_nullImage()",
      "52": "AbstractSplitFilterTest::::testEx_execute_nullImage()",
      "54": "AbstractSplitFilterTest::::testEx_execute_emptyImage()",
      "55": "AbstractSplitFilterTest::::testEx_execute_emptyImage()",
      "56": "AbstractSplitFilterTest::::testEx_execute_emptyImage()",
      "57": "AbstractSplitFilterTest::::testEx_execute_emptyImage()",
      "58": "AbstractSplitFilterTest::::testEx_execute_emptyImage()",
      "59": "AbstractSplitFilterTest::::testEx_execute_emptyImage()",
      "60": "AbstractSplitFilterTest::::testEx_execute_emptyImage()",
      "61": "AbstractSplitFilterTest::::testEx_execute_emptyImage()",
      "62": "AbstractSplitFilterTest::::testEx_execute_emptyImage()",
      "64": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "65": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "66": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "67": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "68": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "69": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "70": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "71": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "72": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "73": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "74": "AbstractSplitFilterTest::::testEx_execute_multipleImages()",
      "75": "AbstractSplitFilterTest::::testEx_execute_multipleImages()"
    },
    "tests": [
      {
        "test_lines": [
          30,
          43
        ],
        "covered_lines": [
          17,
          21,
          22,
          23,
          26
        ]
      },
      {
        "test_lines": [
          45,
          52
        ],
        "covered_lines": [
          17
        ]
      },
      {
        "test_lines": [
          54,
          62
        ],
        "covered_lines": [
          17,
          21
        ]
      },
      {
        "test_lines": [
          64,
          75
        ],
        "covered_lines": [
          17,
          21,
          22,
          23,
          24
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/ypipe/AbstractMergeFilter.java": {
    "class_content": [
      "package cn.pipe.ypipe;\n",
      "\n",
      "import cn.core.PipeFilter;\n",
      "import cn.core.utils.CollectionUtils;\n",
      "import cn.core.utils.ObjectUtils;\n",
      "\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * An abstract pipe filter which used to merge multiple images into one image.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public abstract class AbstractMergeFilter implements PipeFilter {\n",
      "\n",
      "    @Override\n",
      "    public List<BufferedImage> execute(List<BufferedImage> images) {\n",
      "        ObjectUtils.excNull(images, \"Source images is null.\");\n",
      "        CollectionUtils.excEmpty(images, \"Not any source image was found.\");\n",
      "        return Collections.singletonList(merge(images));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Merge multiple images into one image.\n",
      "     *\n",
      "     * @param images The source images.\n",
      "     * @return The final image after merged.\n",
      "     */\n",
      "    protected abstract BufferedImage merge(List<BufferedImage> images);\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.ypipe;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.pipe.TestUtils;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.util.Arrays;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "public class AbstractMergeFilterTest {\n",
      "\n",
      "    private static class ReturnFirstHandler extends AbstractMergeFilter {\n",
      "        @Override\n",
      "        protected BufferedImage merge(List<BufferedImage> images) {\n",
      "            // Just return the first image of original images.\n",
      "            return images.get(0);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_execute_correctUsage() throws IOException {\n",
      "        // given\n",
      "        BufferedImage first = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n",
      "        BufferedImage second = new BufferedImage(200, 300, BufferedImage.TYPE_INT_RGB);\n",
      "        BufferedImage third = new BufferedImage(200, 300, BufferedImage.TYPE_INT_RGB);\n",
      "\n",
      "        // when\n",
      "        AbstractMergeFilter handler = new ReturnFirstHandler();\n",
      "        List<BufferedImage> target = handler.execute(Arrays.asList(first, second, third));\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(1, target.size());\n",
      "        Assert.assertEquals(first, target.get(0));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_execute_nullImage() {\n",
      "        AbstractMergeFilter handler = new ReturnFirstHandler();\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> handler.execute(null));\n",
      "        Assert.assertEquals(\"Source images is null.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_execute_emptyImage() {\n",
      "        AbstractMergeFilter handler = new ReturnFirstHandler();\n",
      "        List<BufferedImage> images = Collections.emptyList();\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> handler.execute(images));\n",
      "        Assert.assertEquals(\"Not any source image was found.\",\n",
      "                ex.getMessage());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "AbstractMergeFilter::::execute(java.util.List<java.awt.image.BufferedImage>)": [
        19,
        24
      ],
      "AbstractMergeFilter::::merge(java.util.List<java.awt.image.BufferedImage>)": [
        32,
        32
      ]
    },
    "test_method_lines_dic": {
      "AbstractMergeFilterTest.ReturnFirstHandler::::merge(java.util.List<java.awt.image.BufferedImage>)": [
        16,
        20
      ],
      "AbstractMergeFilterTest::::test_execute_correctUsage()": [
        23,
        37
      ],
      "AbstractMergeFilterTest::::testEx_execute_nullImage()": [
        39,
        46
      ],
      "AbstractMergeFilterTest::::testEx_execute_emptyImage()": [
        48,
        56
      ]
    },
    "reverse_method_lines_dic": {
      "19": "AbstractMergeFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "20": "AbstractMergeFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "21": "AbstractMergeFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "22": "AbstractMergeFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "23": "AbstractMergeFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "24": "AbstractMergeFilter::::execute(java.util.List<java.awt.image.BufferedImage>)",
      "32": "AbstractMergeFilter::::merge(java.util.List<java.awt.image.BufferedImage>)"
    },
    "test_reverse_method_lines_dic": {
      "16": "AbstractMergeFilterTest.ReturnFirstHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "17": "AbstractMergeFilterTest.ReturnFirstHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "18": "AbstractMergeFilterTest.ReturnFirstHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "19": "AbstractMergeFilterTest.ReturnFirstHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "20": "AbstractMergeFilterTest.ReturnFirstHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "23": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "24": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "25": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "26": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "27": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "28": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "29": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "30": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "31": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "32": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "33": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "34": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "35": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "36": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "37": "AbstractMergeFilterTest::::test_execute_correctUsage()",
      "39": "AbstractMergeFilterTest::::testEx_execute_nullImage()",
      "40": "AbstractMergeFilterTest::::testEx_execute_nullImage()",
      "41": "AbstractMergeFilterTest::::testEx_execute_nullImage()",
      "42": "AbstractMergeFilterTest::::testEx_execute_nullImage()",
      "43": "AbstractMergeFilterTest::::testEx_execute_nullImage()",
      "44": "AbstractMergeFilterTest::::testEx_execute_nullImage()",
      "45": "AbstractMergeFilterTest::::testEx_execute_nullImage()",
      "46": "AbstractMergeFilterTest::::testEx_execute_nullImage()",
      "48": "AbstractMergeFilterTest::::testEx_execute_emptyImage()",
      "49": "AbstractMergeFilterTest::::testEx_execute_emptyImage()",
      "50": "AbstractMergeFilterTest::::testEx_execute_emptyImage()",
      "51": "AbstractMergeFilterTest::::testEx_execute_emptyImage()",
      "52": "AbstractMergeFilterTest::::testEx_execute_emptyImage()",
      "53": "AbstractMergeFilterTest::::testEx_execute_emptyImage()",
      "54": "AbstractMergeFilterTest::::testEx_execute_emptyImage()",
      "55": "AbstractMergeFilterTest::::testEx_execute_emptyImage()",
      "56": "AbstractMergeFilterTest::::testEx_execute_emptyImage()"
    },
    "tests": [
      {
        "test_lines": [
          23,
          37
        ],
        "covered_lines": [
          17,
          21,
          22,
          23
        ]
      },
      {
        "test_lines": [
          39,
          46
        ],
        "covered_lines": [
          17
        ]
      },
      {
        "test_lines": [
          48,
          56
        ],
        "covered_lines": [
          17,
          21
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/ypipe/merge/GridMergeHandler.java": {
    "class_content": [
      "package cn.pipe.ypipe.merge;\n",
      "\n",
      "import cn.core.GenericBuilder;\n",
      "import cn.core.tool.Range;\n",
      "import cn.core.utils.ObjectUtils;\n",
      "import cn.pipe.ypipe.AbstractMergeFilter;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.utils.BufferedImageUtils;\n",
      "import java.awt.*;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * A merge handler which based on grid implementation.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class GridMergeHandler extends AbstractMergeFilter {\n",
      "\n",
      "    /**\n",
      "     * Whether auto adapts is enabled. When this parameter is enabled,\n",
      "     * it is possible to dynamically adjust the width and height of\n",
      "     * the grid.\n",
      "     */\n",
      "    private final boolean autoAdapts;\n",
      "\n",
      "    /**\n",
      "     * The width of the grid.\n",
      "     */\n",
      "    private int gridWidth;\n",
      "\n",
      "    /**\n",
      "     * The height of the grid.\n",
      "     */\n",
      "    private int gridHeight;\n",
      "\n",
      "    /**\n",
      "     * The horizontal grid number of the final image.\n",
      "     */\n",
      "    private int horizontalNum;\n",
      "\n",
      "    /**\n",
      "     * Whether the original image is centered relative to the grid.\n",
      "     */\n",
      "    private final boolean alignCenter;\n",
      "\n",
      "    /**\n",
      "     * The alpha of the background.\n",
      "     */\n",
      "    private final float alpha;\n",
      "\n",
      "    /**\n",
      "     *  The fill color of the background.\n",
      "     */\n",
      "    private final Color fillColor;\n",
      "\n",
      "    public GridMergeHandler(Builder bu) {\n",
      "        this.autoAdapts = bu.autoAdapts;\n",
      "        this.gridWidth = bu.gridWidth;\n",
      "        this.gridHeight = bu.gridHeight;\n",
      "        this.horizontalNum = bu.horizontalNum;\n",
      "        this.alpha = bu.alpha;\n",
      "        this.alignCenter = bu.alignCenter;\n",
      "        this.fillColor = bu.fillColor;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected BufferedImage merge(List<BufferedImage> images) {\n",
      "        // adjust the parameters\n",
      "        adjustHorizontalNumIfNecessary(images.size());\n",
      "        if (autoAdapts) {\n",
      "            adjustGridSize(images);\n",
      "        }\n",
      "        // define the final image\n",
      "        int rows = getRows(images.size());\n",
      "        int w = horizontalNum * gridWidth;\n",
      "        int h = rows * gridHeight;\n",
      "        BufferedImage tar = BufferedImageUtils.newBackgroundImage(alpha, w, h, fillColor);\n",
      "        Graphics2D g2d = tar.createGraphics();\n",
      "\n",
      "        int alreadyCopyIndex = 0;\n",
      "        while (alreadyCopyIndex < images.size()) {\n",
      "            // point of start\n",
      "            int startX = (alreadyCopyIndex % horizontalNum) * gridWidth;\n",
      "            int startY = (alreadyCopyIndex / horizontalNum) * gridHeight;\n",
      "            // align center\n",
      "            int x = startX;\n",
      "            int y = startY;\n",
      "            if (alignCenter) {\n",
      "                // horizontally\n",
      "                int cw = images.get(alreadyCopyIndex).getWidth();\n",
      "                if (cw < gridWidth) {\n",
      "                    x += ((gridWidth - cw) >> 1);\n",
      "                }\n",
      "                // vertically\n",
      "                int ch = images.get(alreadyCopyIndex).getHeight();\n",
      "                if (ch < gridHeight) {\n",
      "                    y += ((gridHeight - ch) >> 1);\n",
      "                }\n",
      "            }\n",
      "            // paint current grid\n",
      "            g2d.drawImage(images.get(alreadyCopyIndex++), x, y, null);\n",
      "        }\n",
      "\n",
      "        g2d.dispose();\n",
      "        return tar;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adjust the width and height of the grid if necessary.\n",
      "     *\n",
      "     * @param images The images to be merged.\n",
      "     */\n",
      "    protected void adjustGridSize(List<BufferedImage> images) {\n",
      "        for (BufferedImage o : images) {\n",
      "            if (o.getWidth() > gridWidth) {\n",
      "                gridWidth = o.getWidth();\n",
      "            }\n",
      "            if (o.getHeight() > gridHeight) {\n",
      "                gridHeight = o.getHeight();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adjust the horizontal grid number if necessary.\n",
      "     *\n",
      "     * @param imageNum The size of images to be merged.\n",
      "     */\n",
      "    protected void adjustHorizontalNumIfNecessary(int imageNum) {\n",
      "        if (horizontalNum <= 0 || imageNum < horizontalNum) {\n",
      "            horizontalNum = imageNum;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Calculate the final number of rows.\n",
      "     *\n",
      "     * @param imageNum The size of images to be merged.\n",
      "     * @return The final number of rows.\n",
      "     */\n",
      "    protected int getRows(int imageNum) {\n",
      "        return (imageNum + horizontalNum - 1) / horizontalNum;\n",
      "    }\n",
      "\n",
      "    public static class Builder implements GenericBuilder<GridMergeHandler> {\n",
      "        private boolean autoAdapts;\n",
      "        private int gridWidth;\n",
      "        private int gridHeight;\n",
      "        private int horizontalNum;\n",
      "        private boolean alignCenter = false;\n",
      "        private float alpha = 1.0f;\n",
      "        private Color fillColor;\n",
      "\n",
      "        public Builder autoAdapts() {\n",
      "            this.autoAdapts = true;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder gridWidth(int gridWidth) {\n",
      "            this.gridWidth = gridWidth;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder gridHeight(int gridHeight) {\n",
      "            this.gridHeight = gridHeight;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder horizontalNum(int horizontalNum) {\n",
      "            this.horizontalNum = horizontalNum;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder alignCenter() {\n",
      "            this.alignCenter = true;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder alpha(float alpha) {\n",
      "            this.alpha = alpha;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder fillColor(Color fillColor) {\n",
      "            this.fillColor = fillColor;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public GridMergeHandler build() {\n",
      "            // invalid setting\n",
      "            if (gridWidth < 0) {\n",
      "                throw new InvalidSettingException(\"The width of the grid must be greater than 0.\");\n",
      "            }\n",
      "            if (gridHeight < 0) {\n",
      "                throw new InvalidSettingException(\"The height of the grid must be greater than 0.\");\n",
      "            }\n",
      "            if (horizontalNum < 0) {\n",
      "                throw new InvalidSettingException(\"The number placed in horizontal must be greater than 0.\");\n",
      "            }\n",
      "            if (Range.ofFloat(0f, 1f).notWithin(alpha)) {\n",
      "                throw new InvalidSettingException(\"The alpha out of bounds:[0, 1].\");\n",
      "            }\n",
      "\n",
      "            // The size of the grid must be determined when 'autoAdapts' is false.\n",
      "            if (!autoAdapts) {\n",
      "                if (gridWidth == 0) {\n",
      "                    throw new InvalidSettingException(\"The width of the grid must be determined when autoAdapts is not enabled.\");\n",
      "                }\n",
      "                if (gridHeight == 0) {\n",
      "                    throw new InvalidSettingException(\"The height of the grid must be determined when autoAdapts is not enabled.\");\n",
      "                }\n",
      "            }\n",
      "\n",
      "            // Set a default fill color when not completely transparent.\n",
      "            if (alpha != 0.0 && ObjectUtils.isNull(fillColor)) {\n",
      "                fillColor = Color.WHITE;\n",
      "            }\n",
      "\n",
      "            return new GridMergeHandler(this);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.ypipe.merge;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.utils.BufferedImageUtils;\n",
      "import cn.pipe.BufferedImageComparer;\n",
      "import cn.pipe.ReflectionUtils;\n",
      "import cn.pipe.TestUtils;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.awt.*;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "\n",
      "public class GridMergeHandlerTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_merge_correctUsage() throws IOException {\n",
      "        // given\n",
      "        int grid_w = 56, grid_h = 36;\n",
      "        int h_num = 2;\n",
      "        float alpha = 0.8f;\n",
      "        Color fc = Color.LIGHT_GRAY;\n",
      "\n",
      "        java.util.List<BufferedImage> sources = new ArrayList<>();\n",
      "        sources.add(TestUtils.getImageFromResource(\"input/slices/1.jpg\"));\n",
      "        sources.add(TestUtils.getImageFromResource(\"input/slices/2.jpg\"));\n",
      "        sources.add(TestUtils.getImageFromResource(\"input/slices/3.jpg\"));\n",
      "        sources.add(TestUtils.getImageFromResource(\"input/slices/4.jpg\"));\n",
      "        sources.add(TestUtils.getImageFromResource(\"input/slices/5.jpg\"));\n",
      "\n",
      "        // when\n",
      "        GridMergeHandler handler = new GridMergeHandler.Builder()\n",
      "                .gridWidth(grid_w).gridHeight(grid_h)\n",
      "                .horizontalNum(h_num)\n",
      "                .alpha(alpha).fillColor(fc)\n",
      "                .alignCenter().autoAdapts()\n",
      "                .build();\n",
      "        BufferedImage target = handler.merge(sources);\n",
      "\n",
      "\n",
      "        /*\n",
      "         * 1 All original images are 50*30.\n",
      "         * 2 The images will be merged according to the following layout:\n",
      "         *      |-----------|-----------|\n",
      "         *      |   1.jpg   |   2.jpg   |\n",
      "         *      |-----------|-----------|\n",
      "         *      |   3.jpg   |   4.jpg   |\n",
      "         *      |-----------|-----------|\n",
      "         *      |   5.jpg   |           |\n",
      "         *      |-----------|-----------|\n",
      "         */\n",
      "        int mergedWidth = grid_w * 2;\n",
      "        int mergedHeight = grid_h * 3;\n",
      "        BufferedImage merged = BufferedImageUtils.newColoredImage(mergedWidth, mergedHeight, alpha, fc);\n",
      "        // paint all images\n",
      "        Graphics2D g = merged.createGraphics();\n",
      "        int w_offset = (56 - 50) / 2;\n",
      "        int h_offset = (36 - 30) / 2;\n",
      "        g.drawImage(sources.get(0), w_offset, h_offset, null);\n",
      "        g.drawImage(sources.get(1), (w_offset * 3) + 50, h_offset, null);\n",
      "        g.drawImage(sources.get(2), w_offset, (h_offset * 3) + 30, null);\n",
      "        g.drawImage(sources.get(3), (w_offset * 3) + 50, (h_offset * 3) + 30, null);\n",
      "        g.drawImage(sources.get(4), w_offset, (h_offset * 5) + (30 * 2), null);\n",
      "        g.dispose();\n",
      "\n",
      "        // then\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(merged, target));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig() {\n",
      "        // given\n",
      "        int grid_w = 56, grid_h = 36;\n",
      "        float alpha = 0.8f;\n",
      "        Color fc = Color.LIGHT_GRAY;\n",
      "        int sourceImageSize = 3, horizontalNum = 4;\n",
      "\n",
      "        // when\n",
      "        GridMergeHandler handler = new GridMergeHandler.Builder()\n",
      "                .gridWidth(grid_w).gridHeight(grid_h)\n",
      "                .horizontalNum(horizontalNum)\n",
      "                .alpha(alpha).fillColor(fc)\n",
      "                .alignCenter()\n",
      "                .build();\n",
      "\n",
      "        int before = (int) ReflectionUtils.get(\"horizontalNum\", handler);\n",
      "        handler.adjustHorizontalNumIfNecessary(sourceImageSize);\n",
      "        int after = (int) ReflectionUtils.get(\"horizontalNum\", handler);\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(4, before);\n",
      "        Assert.assertEquals(3, after);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet() {\n",
      "        // given\n",
      "        int grid_w = 56, grid_h = 36;\n",
      "        float alpha = 0.8f;\n",
      "        Color fc = Color.LIGHT_GRAY;\n",
      "        int sourceImageSize = 3;\n",
      "\n",
      "        // when\n",
      "        GridMergeHandler handler = new GridMergeHandler.Builder()\n",
      "                .gridWidth(grid_w).gridHeight(grid_h)\n",
      "                .alpha(alpha).fillColor(fc)\n",
      "                .alignCenter()\n",
      "                .build();\n",
      "\n",
      "        int before = (int) ReflectionUtils.get(\"horizontalNum\", handler);\n",
      "        handler.adjustHorizontalNumIfNecessary(sourceImageSize);\n",
      "        int after = (int) ReflectionUtils.get(\"horizontalNum\", handler);\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(0, before);\n",
      "        Assert.assertEquals(3, after);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_adjustGridSize() throws IOException {\n",
      "        // given\n",
      "        int grid_w = 56, grid_h = 36;\n",
      "        int h_num = 2;\n",
      "        float alpha = 0.8f;\n",
      "        Color fc = Color.LIGHT_GRAY;\n",
      "\n",
      "        java.util.List<BufferedImage> sources = new ArrayList<>();\n",
      "        sources.add(TestUtils.getImageFromResource(\"input/slices/1.jpg\"));\n",
      "        sources.add(TestUtils.getImageFromResource(\"input/nothing.jpg\"));\n",
      "\n",
      "        // when\n",
      "        GridMergeHandler handler = new GridMergeHandler.Builder()\n",
      "                .gridWidth(grid_w).gridHeight(grid_h)\n",
      "                .horizontalNum(h_num)\n",
      "                .alpha(alpha).fillColor(fc)\n",
      "                .alignCenter()\n",
      "                .autoAdapts()       // enable auto adapt\n",
      "                .build();\n",
      "\n",
      "        int w_before = (int) ReflectionUtils.get(\"gridWidth\", handler);\n",
      "        int h_before = (int) ReflectionUtils.get(\"gridHeight\", handler);\n",
      "        handler.adjustGridSize(sources);\n",
      "        int w_after = (int) ReflectionUtils.get(\"gridWidth\", handler);\n",
      "        int h_after = (int) ReflectionUtils.get(\"gridHeight\", handler);\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(grid_w, w_before);\n",
      "        Assert.assertEquals(grid_h, h_before);\n",
      "\n",
      "        Assert.assertEquals(154, w_after);\n",
      "        Assert.assertEquals(98, h_after);\n",
      "    }\n",
      "\n",
      "    public static class BuilderTest {\n",
      "\n",
      "        @Test\n",
      "        public void test_build_correctUsage() {\n",
      "            // given\n",
      "            int grid_w = 56, grid_h = 36;\n",
      "            int h_num = 2;\n",
      "            float alpha = 0.8f;\n",
      "            Color fc = Color.LIGHT_GRAY;\n",
      "\n",
      "            // when\n",
      "            GridMergeHandler handler = new GridMergeHandler.Builder()\n",
      "                    .gridWidth(grid_w).gridHeight(grid_h)\n",
      "                    .horizontalNum(h_num)\n",
      "                    .alpha(alpha).fillColor(fc)\n",
      "                    .alignCenter()\n",
      "                    .autoAdapts()\n",
      "                    .build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertEquals(grid_w, ReflectionUtils.get(\"gridWidth\", handler));\n",
      "            Assert.assertEquals(grid_h, ReflectionUtils.get(\"gridHeight\", handler));\n",
      "            Assert.assertEquals(h_num, ReflectionUtils.get(\"horizontalNum\", handler));\n",
      "            Assert.assertEquals(alpha, ReflectionUtils.get(\"alpha\", handler));\n",
      "            Assert.assertEquals(fc, ReflectionUtils.get(\"fillColor\", handler));\n",
      "            Assert.assertTrue((boolean) ReflectionUtils.get(\"alignCenter\", handler));\n",
      "            Assert.assertTrue((boolean) ReflectionUtils.get(\"autoAdapts\", handler));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void test_build_defaultParam() {\n",
      "            // given\n",
      "            int grid_w = 56, grid_h = 36;\n",
      "\n",
      "            // when\n",
      "            GridMergeHandler handler = new GridMergeHandler.Builder()\n",
      "                    .gridWidth(grid_w).gridHeight(grid_h)\n",
      "                    .build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertEquals(0, ReflectionUtils.get(\"horizontalNum\", handler));\n",
      "            Assert.assertEquals(1.0f, ReflectionUtils.get(\"alpha\", handler));\n",
      "            Assert.assertEquals(Color.WHITE, ReflectionUtils.get(\"fillColor\", handler));\n",
      "            Assert.assertFalse((boolean) ReflectionUtils.get(\"alignCenter\", handler));\n",
      "            Assert.assertFalse((boolean) ReflectionUtils.get(\"autoAdapts\", handler));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_invalidParam() {\n",
      "            // width of grid < 0\n",
      "            GridMergeHandler.Builder builder1 = new GridMergeHandler.Builder()\n",
      "                    .gridWidth(-50).gridHeight(100)\n",
      "                    .horizontalNum(2);\n",
      "            InvalidSettingException ex1 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder1::build);\n",
      "            Assert.assertEquals(\"The width of the grid must be greater than 0.\",\n",
      "                    ex1.getMessage());\n",
      "\n",
      "            // height of grid < 0\n",
      "            GridMergeHandler.Builder builder2 = new GridMergeHandler.Builder()\n",
      "                    .gridWidth(100).gridHeight(-50)\n",
      "                    .horizontalNum(2);\n",
      "            InvalidSettingException ex2 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder2::build);\n",
      "            Assert.assertEquals(\"The height of the grid must be greater than 0.\",\n",
      "                    ex2.getMessage());\n",
      "\n",
      "            // number of horizontal < 0\n",
      "            GridMergeHandler.Builder builder3 = new GridMergeHandler.Builder()\n",
      "                    .gridWidth(100).gridHeight(100)\n",
      "                    .horizontalNum(-2);\n",
      "            InvalidSettingException ex3 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder3::build);\n",
      "            Assert.assertEquals(\"The number placed in horizontal must be greater than 0.\",\n",
      "                    ex3.getMessage());\n",
      "\n",
      "            // alpha out of bound\n",
      "            GridMergeHandler.Builder builder4 = new GridMergeHandler.Builder()\n",
      "                    .gridWidth(100).gridHeight(100)\n",
      "                    .horizontalNum(2)\n",
      "                    .alpha(2.0f);\n",
      "            InvalidSettingException ex4 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder4::build);\n",
      "            Assert.assertEquals(\"The alpha out of bounds:[0, 1].\",\n",
      "                    ex4.getMessage());\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_nullParam() {\n",
      "            // grid width not set\n",
      "            GridMergeHandler.Builder builder1 = new GridMergeHandler.Builder()\n",
      "                    .gridHeight(100)\n",
      "                    .horizontalNum(2);\n",
      "            InvalidSettingException ex1 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder1::build);\n",
      "            Assert.assertEquals(\"The width of the grid must be determined when autoAdapts is not enabled.\",\n",
      "                    ex1.getMessage());\n",
      "\n",
      "            // grid height not set\n",
      "            GridMergeHandler.Builder builder2 = new GridMergeHandler.Builder()\n",
      "                    .gridWidth(100)\n",
      "                    .horizontalNum(2);\n",
      "            InvalidSettingException ex2 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder2::build);\n",
      "            Assert.assertEquals(\"The height of the grid must be determined when autoAdapts is not enabled.\",\n",
      "                    ex2.getMessage());\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)": [
        68,
        108
      ],
      "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)": [
        115,
        124
      ],
      "GridMergeHandler::::adjustHorizontalNumIfNecessary(int)": [
        131,
        135
      ],
      "GridMergeHandler::::getRows(int)": [
        143,
        145
      ],
      "GridMergeHandler.Builder::::autoAdapts()": [
        156,
        159
      ],
      "GridMergeHandler.Builder::::gridWidth(int)": [
        161,
        164
      ],
      "GridMergeHandler.Builder::::gridHeight(int)": [
        166,
        169
      ],
      "GridMergeHandler.Builder::::horizontalNum(int)": [
        171,
        174
      ],
      "GridMergeHandler.Builder::::alignCenter()": [
        176,
        179
      ],
      "GridMergeHandler.Builder::::alpha(float)": [
        181,
        184
      ],
      "GridMergeHandler.Builder::::fillColor(java.awt.Color)": [
        186,
        189
      ],
      "GridMergeHandler.Builder::::build()": [
        191,
        223
      ]
    },
    "test_method_lines_dic": {
      "GridMergeHandlerTest::::test_merge_correctUsage()": [
        17,
        69
      ],
      "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()": [
        71,
        94
      ],
      "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()": [
        96,
        118
      ],
      "GridMergeHandlerTest::::test_adjustGridSize()": [
        120,
        153
      ],
      "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()": [
        157,
        182
      ],
      "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()": [
        184,
        200
      ],
      "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()": [
        202,
        240
      ],
      "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()": [
        242,
        261
      ]
    },
    "reverse_method_lines_dic": {
      "68": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "69": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "70": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "71": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "72": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "73": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "74": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "75": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "76": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "77": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "78": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "79": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "80": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "81": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "82": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "83": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "84": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "85": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "86": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "87": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "88": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "89": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "90": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "91": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "92": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "93": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "94": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "95": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "96": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "97": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "98": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "99": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "100": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "101": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "102": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "103": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "104": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "105": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "106": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "107": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "108": "GridMergeHandler::::merge(java.util.List<java.awt.image.BufferedImage>)",
      "115": "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)",
      "116": "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)",
      "117": "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)",
      "118": "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)",
      "119": "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)",
      "120": "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)",
      "121": "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)",
      "122": "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)",
      "123": "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)",
      "124": "GridMergeHandler::::adjustGridSize(java.util.List<java.awt.image.BufferedImage>)",
      "131": "GridMergeHandler::::adjustHorizontalNumIfNecessary(int)",
      "132": "GridMergeHandler::::adjustHorizontalNumIfNecessary(int)",
      "133": "GridMergeHandler::::adjustHorizontalNumIfNecessary(int)",
      "134": "GridMergeHandler::::adjustHorizontalNumIfNecessary(int)",
      "135": "GridMergeHandler::::adjustHorizontalNumIfNecessary(int)",
      "143": "GridMergeHandler::::getRows(int)",
      "144": "GridMergeHandler::::getRows(int)",
      "145": "GridMergeHandler::::getRows(int)",
      "156": "GridMergeHandler.Builder::::autoAdapts()",
      "157": "GridMergeHandler.Builder::::autoAdapts()",
      "158": "GridMergeHandler.Builder::::autoAdapts()",
      "159": "GridMergeHandler.Builder::::autoAdapts()",
      "161": "GridMergeHandler.Builder::::gridWidth(int)",
      "162": "GridMergeHandler.Builder::::gridWidth(int)",
      "163": "GridMergeHandler.Builder::::gridWidth(int)",
      "164": "GridMergeHandler.Builder::::gridWidth(int)",
      "166": "GridMergeHandler.Builder::::gridHeight(int)",
      "167": "GridMergeHandler.Builder::::gridHeight(int)",
      "168": "GridMergeHandler.Builder::::gridHeight(int)",
      "169": "GridMergeHandler.Builder::::gridHeight(int)",
      "171": "GridMergeHandler.Builder::::horizontalNum(int)",
      "172": "GridMergeHandler.Builder::::horizontalNum(int)",
      "173": "GridMergeHandler.Builder::::horizontalNum(int)",
      "174": "GridMergeHandler.Builder::::horizontalNum(int)",
      "176": "GridMergeHandler.Builder::::alignCenter()",
      "177": "GridMergeHandler.Builder::::alignCenter()",
      "178": "GridMergeHandler.Builder::::alignCenter()",
      "179": "GridMergeHandler.Builder::::alignCenter()",
      "181": "GridMergeHandler.Builder::::alpha(float)",
      "182": "GridMergeHandler.Builder::::alpha(float)",
      "183": "GridMergeHandler.Builder::::alpha(float)",
      "184": "GridMergeHandler.Builder::::alpha(float)",
      "186": "GridMergeHandler.Builder::::fillColor(java.awt.Color)",
      "187": "GridMergeHandler.Builder::::fillColor(java.awt.Color)",
      "188": "GridMergeHandler.Builder::::fillColor(java.awt.Color)",
      "189": "GridMergeHandler.Builder::::fillColor(java.awt.Color)",
      "191": "GridMergeHandler.Builder::::build()",
      "192": "GridMergeHandler.Builder::::build()",
      "193": "GridMergeHandler.Builder::::build()",
      "194": "GridMergeHandler.Builder::::build()",
      "195": "GridMergeHandler.Builder::::build()",
      "196": "GridMergeHandler.Builder::::build()",
      "197": "GridMergeHandler.Builder::::build()",
      "198": "GridMergeHandler.Builder::::build()",
      "199": "GridMergeHandler.Builder::::build()",
      "200": "GridMergeHandler.Builder::::build()",
      "201": "GridMergeHandler.Builder::::build()",
      "202": "GridMergeHandler.Builder::::build()",
      "203": "GridMergeHandler.Builder::::build()",
      "204": "GridMergeHandler.Builder::::build()",
      "205": "GridMergeHandler.Builder::::build()",
      "206": "GridMergeHandler.Builder::::build()",
      "207": "GridMergeHandler.Builder::::build()",
      "208": "GridMergeHandler.Builder::::build()",
      "209": "GridMergeHandler.Builder::::build()",
      "210": "GridMergeHandler.Builder::::build()",
      "211": "GridMergeHandler.Builder::::build()",
      "212": "GridMergeHandler.Builder::::build()",
      "213": "GridMergeHandler.Builder::::build()",
      "214": "GridMergeHandler.Builder::::build()",
      "215": "GridMergeHandler.Builder::::build()",
      "216": "GridMergeHandler.Builder::::build()",
      "217": "GridMergeHandler.Builder::::build()",
      "218": "GridMergeHandler.Builder::::build()",
      "219": "GridMergeHandler.Builder::::build()",
      "220": "GridMergeHandler.Builder::::build()",
      "221": "GridMergeHandler.Builder::::build()",
      "222": "GridMergeHandler.Builder::::build()",
      "223": "GridMergeHandler.Builder::::build()"
    },
    "test_reverse_method_lines_dic": {
      "17": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "18": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "19": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "20": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "21": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "22": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "23": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "24": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "25": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "26": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "27": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "28": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "29": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "30": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "31": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "32": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "33": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "34": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "35": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "36": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "37": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "38": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "39": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "40": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "41": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "42": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "43": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "44": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "45": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "46": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "47": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "48": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "49": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "50": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "51": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "52": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "53": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "54": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "55": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "56": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "57": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "58": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "59": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "60": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "61": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "62": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "63": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "64": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "65": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "66": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "67": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "68": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "69": "GridMergeHandlerTest::::test_merge_correctUsage()",
      "71": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "72": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "73": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "74": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "75": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "76": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "77": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "78": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "79": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "80": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "81": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "82": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "83": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "84": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "85": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "86": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "87": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "88": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "89": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "90": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "91": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "92": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "93": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "94": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumTooBig()",
      "96": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "97": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "98": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "99": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "100": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "101": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "102": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "103": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "104": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "105": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "106": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "107": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "108": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "109": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "110": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "111": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "112": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "113": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "114": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "115": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "116": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "117": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "118": "GridMergeHandlerTest::::test_adjustHorizontalNumIfNecessary_withHorizontalNumNotSet()",
      "120": "GridMergeHandlerTest::::test_adjustGridSize()",
      "121": "GridMergeHandlerTest::::test_adjustGridSize()",
      "122": "GridMergeHandlerTest::::test_adjustGridSize()",
      "123": "GridMergeHandlerTest::::test_adjustGridSize()",
      "124": "GridMergeHandlerTest::::test_adjustGridSize()",
      "125": "GridMergeHandlerTest::::test_adjustGridSize()",
      "126": "GridMergeHandlerTest::::test_adjustGridSize()",
      "127": "GridMergeHandlerTest::::test_adjustGridSize()",
      "128": "GridMergeHandlerTest::::test_adjustGridSize()",
      "129": "GridMergeHandlerTest::::test_adjustGridSize()",
      "130": "GridMergeHandlerTest::::test_adjustGridSize()",
      "131": "GridMergeHandlerTest::::test_adjustGridSize()",
      "132": "GridMergeHandlerTest::::test_adjustGridSize()",
      "133": "GridMergeHandlerTest::::test_adjustGridSize()",
      "134": "GridMergeHandlerTest::::test_adjustGridSize()",
      "135": "GridMergeHandlerTest::::test_adjustGridSize()",
      "136": "GridMergeHandlerTest::::test_adjustGridSize()",
      "137": "GridMergeHandlerTest::::test_adjustGridSize()",
      "138": "GridMergeHandlerTest::::test_adjustGridSize()",
      "139": "GridMergeHandlerTest::::test_adjustGridSize()",
      "140": "GridMergeHandlerTest::::test_adjustGridSize()",
      "141": "GridMergeHandlerTest::::test_adjustGridSize()",
      "142": "GridMergeHandlerTest::::test_adjustGridSize()",
      "143": "GridMergeHandlerTest::::test_adjustGridSize()",
      "144": "GridMergeHandlerTest::::test_adjustGridSize()",
      "145": "GridMergeHandlerTest::::test_adjustGridSize()",
      "146": "GridMergeHandlerTest::::test_adjustGridSize()",
      "147": "GridMergeHandlerTest::::test_adjustGridSize()",
      "148": "GridMergeHandlerTest::::test_adjustGridSize()",
      "149": "GridMergeHandlerTest::::test_adjustGridSize()",
      "150": "GridMergeHandlerTest::::test_adjustGridSize()",
      "151": "GridMergeHandlerTest::::test_adjustGridSize()",
      "152": "GridMergeHandlerTest::::test_adjustGridSize()",
      "153": "GridMergeHandlerTest::::test_adjustGridSize()",
      "157": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "158": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "159": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "160": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "161": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "162": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "163": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "164": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "165": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "166": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "167": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "168": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "169": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "170": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "171": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "172": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "173": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "174": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "175": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "176": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "177": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "178": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "179": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "180": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "181": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "182": "GridMergeHandlerTest.BuilderTest::::test_build_correctUsage()",
      "184": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "185": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "186": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "187": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "188": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "189": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "190": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "191": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "192": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "193": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "194": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "195": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "196": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "197": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "198": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "199": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "200": "GridMergeHandlerTest.BuilderTest::::test_build_defaultParam()",
      "202": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "203": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "204": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "205": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "206": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "207": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "208": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "209": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "210": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "211": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "212": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "213": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "214": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "215": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "216": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "217": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "218": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "219": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "220": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "221": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "222": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "223": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "224": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "225": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "226": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "227": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "228": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "229": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "230": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "231": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "232": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "233": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "234": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "235": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "236": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "237": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "238": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "239": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "240": "GridMergeHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "242": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "243": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "244": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "245": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "246": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "247": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "248": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "249": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "250": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "251": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "252": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "253": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "254": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "255": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "256": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "257": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "258": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "259": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "260": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()",
      "261": "GridMergeHandlerTest.BuilderTest::::testEx_build_nullParam()"
    },
    "tests": [
      {
        "test_lines": [
          17,
          69
        ],
        "covered_lines": [
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          71,
          72,
          73,
          76,
          77,
          78,
          79,
          80,
          82,
          83,
          85,
          86,
          88,
          89,
          90,
          92,
          93,
          94,
          97,
          98,
          99,
          103,
          104,
          106,
          107,
          116,
          117,
          120,
          123,
          124,
          132,
          135,
          144,
          147,
          152,
          153,
          157,
          158,
          162,
          163,
          167,
          168,
          172,
          173,
          177,
          178,
          182,
          183,
          187,
          188,
          194,
          197,
          200,
          203,
          208,
          218,
          222
        ]
      },
      {
        "test_lines": [
          71,
          94
        ],
        "covered_lines": [
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          132,
          133,
          135,
          147,
          152,
          153,
          162,
          163,
          167,
          168,
          172,
          173,
          177,
          178,
          182,
          183,
          187,
          188,
          194,
          197,
          200,
          203,
          208,
          209,
          212,
          218,
          222
        ]
      },
      {
        "test_lines": [
          96,
          118
        ],
        "covered_lines": [
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          132,
          133,
          135,
          147,
          152,
          153,
          162,
          163,
          167,
          168,
          177,
          178,
          182,
          183,
          187,
          188,
          194,
          197,
          200,
          203,
          208,
          209,
          212,
          218,
          222
        ]
      },
      {
        "test_lines": [
          120,
          153
        ],
        "covered_lines": [
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          116,
          117,
          118,
          120,
          121,
          123,
          124,
          147,
          152,
          153,
          157,
          158,
          162,
          163,
          167,
          168,
          172,
          173,
          177,
          178,
          182,
          183,
          187,
          188,
          194,
          197,
          200,
          203,
          208,
          218,
          222
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/ypipe/split/GridSplitHandler.java": {
    "class_content": [
      "package cn.pipe.ypipe.split;\n",
      "\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.pipe.ypipe.AbstractSplitFilter;\n",
      "import cn.core.GenericBuilder;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * A split handler which based on grid implementation.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class GridSplitHandler extends AbstractSplitFilter {\n",
      "\n",
      "    /**\n",
      "     * The width of the grid.\n",
      "     */\n",
      "    private int gridWidth;\n",
      "\n",
      "    /**\n",
      "     * The height of the grid.\n",
      "     */\n",
      "    private int gridHeight;\n",
      "\n",
      "    public GridSplitHandler(Builder bu) {\n",
      "        this.gridWidth = bu.gridWidth;\n",
      "        this.gridHeight = bu.gridHeight;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<BufferedImage> split(BufferedImage img) {\n",
      "        int originalWidth = img.getWidth();\n",
      "        int originalHeight = img.getHeight();\n",
      "\n",
      "        // adjust the parameters\n",
      "        adjustGridIfNecessary(originalWidth, originalHeight);\n",
      "\n",
      "        // cut the picture into small pieces\n",
      "        List<BufferedImage> tars = new ArrayList<>();\n",
      "        int rows = (originalHeight + gridHeight - 1) / gridHeight;\n",
      "        int cols = (originalWidth + gridWidth - 1) / gridWidth;\n",
      "\n",
      "        for (int r = 0; r < rows; r++) {\n",
      "\n",
      "            int h = Math.min(gridHeight, (originalHeight - gridHeight * r));\n",
      "\n",
      "            for (int c = 0; c < cols; c++) {\n",
      "                // copy the corresponding rectangle\n",
      "                int x = c * gridWidth;\n",
      "                int y = r * gridHeight;\n",
      "                int w = Math.min(gridWidth, (originalWidth - gridWidth * c));\n",
      "\n",
      "                tars.add(img.getSubimage(x, y, w, h));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return tars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adjust the width and height of the grid if necessary.\n",
      "     *\n",
      "     * @param imgWidth The width of the image to be split.\n",
      "     * @param imgHeight The height of the image to be split.\n",
      "     */\n",
      "    protected void adjustGridIfNecessary(int imgWidth, int imgHeight) {\n",
      "        if (gridWidth > imgWidth && gridHeight > imgHeight) {\n",
      "            throw new HandlingException(\"There is no need to split.\");\n",
      "        }\n",
      "        if (gridWidth > imgWidth || gridWidth <= 0) {\n",
      "            gridWidth = imgWidth;\n",
      "        }\n",
      "        if (gridHeight > imgHeight || gridHeight <= 0) {\n",
      "            gridHeight = imgHeight;\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    public static class Builder implements GenericBuilder<GridSplitHandler> {\n",
      "        private int gridWidth;\n",
      "        private int gridHeight;\n",
      "\n",
      "        public Builder gridWidth(int gridWidth) {\n",
      "            this.gridWidth = gridWidth;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder gridHeight(int gridHeight) {\n",
      "            this.gridHeight = gridHeight;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public GridSplitHandler build() {\n",
      "            if (gridWidth < 0) {\n",
      "                throw new InvalidSettingException(\"The width of the grid must be greater than 0.\");\n",
      "            }\n",
      "            if (gridHeight < 0) {\n",
      "                throw new InvalidSettingException(\"The height of the grid must be greater than 0.\");\n",
      "            }\n",
      "\n",
      "            if (gridWidth <= 0 && gridHeight <= 0) {\n",
      "                throw new InvalidSettingException(\"Both of the width and height of the grid not set.\");\n",
      "            }\n",
      "\n",
      "            return new GridSplitHandler(this);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.ypipe.split;\n",
      "\n",
      "import cn.core.ex.HandlingException;\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.pipe.BufferedImageComparer;\n",
      "import cn.pipe.ReflectionUtils;\n",
      "import cn.pipe.TestUtils;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.util.List;\n",
      "\n",
      "public class GridSplitHandlerTest {\n",
      "\n",
      "    @Test\n",
      "    public void test_split_correctUsage() throws IOException {\n",
      "        // given\n",
      "        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n",
      "        int gw = 50, gh = 60;\n",
      "        GridSplitHandler handler = new GridSplitHandler.Builder()\n",
      "                .gridWidth(gw).gridHeight(gh)\n",
      "                .build();\n",
      "\n",
      "        // when\n",
      "        List<BufferedImage> target = handler.split(source);\n",
      "\n",
      "        /*\n",
      "         * The original image will be divided into 8 pieces. The dimensions of each\n",
      "         * piece are as follows:\n",
      "         *      50*60     50*60     50*60     4*60\n",
      "         *      50*38     50*38     50*38     4*38\n",
      "         */\n",
      "        BufferedImage image1 = source.getSubimage(0, 0, 50, 60);\n",
      "        BufferedImage image2 = source.getSubimage(50, 0, 50, 60);\n",
      "        BufferedImage image3 = source.getSubimage(100, 0, 50, 60);\n",
      "        BufferedImage image4 = source.getSubimage(150, 0, 4, 60);\n",
      "        BufferedImage image5 = source.getSubimage(0, 60, 50, 38);\n",
      "        BufferedImage image6 = source.getSubimage(50, 60, 50, 38);\n",
      "        BufferedImage image7 = source.getSubimage(100, 60, 50, 38);\n",
      "        BufferedImage image8 = source.getSubimage(150, 60, 4, 38);\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(8, target.size());\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image1, target.get(0)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image2, target.get(1)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image3, target.get(2)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image4, target.get(3)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image5, target.get(4)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image6, target.get(5)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image7, target.get(6)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image8, target.get(7)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_split_tooLargeGridWidth() throws IOException {\n",
      "        // given\n",
      "        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n",
      "        int gw = 160, gh = 60;\n",
      "        GridSplitHandler handler = new GridSplitHandler.Builder()\n",
      "                .gridWidth(gw).gridHeight(gh)\n",
      "                .build();\n",
      "\n",
      "        // when\n",
      "        int before = (int) ReflectionUtils.get(\"gridWidth\", handler);\n",
      "        List<BufferedImage> target = handler.split(source);\n",
      "        int after = (int) ReflectionUtils.get(\"gridWidth\", handler);\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(160, before);\n",
      "        Assert.assertEquals(154, after);\n",
      "\n",
      "        // and then\n",
      "        /*\n",
      "         * The original image will be divided into 2 pieces. The dimensions of each\n",
      "         * piece are as follows:\n",
      "         *      153*60\n",
      "         *      153*38\n",
      "         */\n",
      "        BufferedImage image1 = source.getSubimage(0, 0, 154, 60);\n",
      "        BufferedImage image2 = source.getSubimage(0, 60, 154, 38);\n",
      "\n",
      "        Assert.assertEquals(2, target.size());\n",
      "\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image1, target.get(0)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image2, target.get(1)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_split_tooLargeGridHeight() throws IOException {\n",
      "        // given\n",
      "        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n",
      "        int gw = 50, gh = 120;\n",
      "        GridSplitHandler handler = new GridSplitHandler.Builder()\n",
      "                .gridWidth(gw).gridHeight(gh)\n",
      "                .build();\n",
      "\n",
      "        // when\n",
      "        int before = (int) ReflectionUtils.get(\"gridHeight\", handler);\n",
      "        List<BufferedImage> target = handler.split(source);\n",
      "        int after = (int) ReflectionUtils.get(\"gridHeight\", handler);\n",
      "\n",
      "        // then\n",
      "        Assert.assertEquals(120, before);\n",
      "        Assert.assertEquals(98, after);\n",
      "\n",
      "        // and then\n",
      "        /*\n",
      "         * The original image will be divided into 4 pieces. The dimensions of each\n",
      "         * piece are as follows:\n",
      "         *      50*98     50*98     50*98     4*98\n",
      "         */\n",
      "        BufferedImage image1 = source.getSubimage(0, 0, 50, 98);\n",
      "        BufferedImage image2 = source.getSubimage(50, 0, 50, 98);\n",
      "        BufferedImage image3 = source.getSubimage(100, 0, 50, 98);\n",
      "        BufferedImage image4 = source.getSubimage(150, 0, 4, 98);\n",
      "\n",
      "        Assert.assertEquals(4, target.size());\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image1, target.get(0)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image2, target.get(1)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image3, target.get(2)));\n",
      "        Assert.assertTrue(BufferedImageComparer.isSame(image4, target.get(3)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_split_noNeedToSplit() throws IOException {\n",
      "        /*\n",
      "         * Throw an HandlingException\n",
      "         * when the width of grid greater than the width of image\n",
      "         * and the height of grid greater than the height of image.\n",
      "         */\n",
      "        BufferedImage source = TestUtils.getImageFromResource(\"input/nothing.jpg\");\n",
      "        GridSplitHandler handler = new GridSplitHandler.Builder()\n",
      "                .gridWidth(180).gridHeight(120)\n",
      "                .build();\n",
      "        HandlingException ex = Assert.assertThrows(HandlingException.class,\n",
      "                () -> handler.split(source));\n",
      "        Assert.assertEquals(\"There is no need to split.\", ex.getMessage());\n",
      "    }\n",
      "\n",
      "    public static class BuilderTest {\n",
      "\n",
      "        @Test\n",
      "        public void test_build_correctUsage() {\n",
      "            // given\n",
      "            int w = 50, h = 100;\n",
      "            GridSplitHandler.Builder builder = new GridSplitHandler.Builder()\n",
      "                    .gridWidth(w).gridHeight(h);\n",
      "\n",
      "            // when\n",
      "            GridSplitHandler handler = builder.build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertEquals(w, ReflectionUtils.get(\"gridWidth\", handler));\n",
      "            Assert.assertEquals(h, ReflectionUtils.get(\"gridHeight\", handler));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_bothNull() {\n",
      "            GridSplitHandler.Builder builder = new GridSplitHandler.Builder();\n",
      "            InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder::build);\n",
      "            Assert.assertEquals(\"Both of the width and height of the grid not set.\",\n",
      "                    ex.getMessage());\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_invalidParam() {\n",
      "            // the width of grid less than 0\n",
      "            GridSplitHandler.Builder builder1 = new GridSplitHandler.Builder()\n",
      "                    .gridWidth(-50).gridHeight(100);\n",
      "            InvalidSettingException ex1 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder1::build);\n",
      "            Assert.assertEquals(\"The width of the grid must be greater than 0.\",\n",
      "                    ex1.getMessage());\n",
      "\n",
      "            // the height of grid less than 0\n",
      "            GridSplitHandler.Builder builder2 = new GridSplitHandler.Builder()\n",
      "                    .gridWidth(100).gridHeight(-20);\n",
      "            InvalidSettingException ex2 = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder2::build);\n",
      "            Assert.assertEquals(\"The height of the grid must be greater than 0.\",\n",
      "                    ex2.getMessage());\n",
      "        }\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "GridSplitHandler::::split(java.awt.image.BufferedImage)": [
        34,
        62
      ],
      "GridSplitHandler::::adjustGridIfNecessary(int,int)": [
        70,
        80
      ],
      "GridSplitHandler.Builder::::gridWidth(int)": [
        87,
        90
      ],
      "GridSplitHandler.Builder::::gridHeight(int)": [
        92,
        95
      ],
      "GridSplitHandler.Builder::::build()": [
        97,
        111
      ]
    },
    "test_method_lines_dic": {
      "GridSplitHandlerTest::::test_split_correctUsage()": [
        16,
        54
      ],
      "GridSplitHandlerTest::::test_split_tooLargeGridWidth()": [
        56,
        88
      ],
      "GridSplitHandlerTest::::test_split_tooLargeGridHeight()": [
        90,
        124
      ],
      "GridSplitHandlerTest::::testEx_split_noNeedToSplit()": [
        126,
        140
      ],
      "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()": [
        144,
        157
      ],
      "GridSplitHandlerTest.BuilderTest::::testEx_build_bothNull()": [
        159,
        166
      ],
      "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()": [
        168,
        185
      ]
    },
    "reverse_method_lines_dic": {
      "34": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "35": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "36": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "37": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "38": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "39": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "40": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "41": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "42": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "43": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "44": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "45": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "46": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "47": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "48": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "49": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "50": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "51": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "52": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "53": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "54": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "55": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "56": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "57": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "58": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "59": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "60": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "61": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "62": "GridSplitHandler::::split(java.awt.image.BufferedImage)",
      "70": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "71": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "72": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "73": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "74": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "75": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "76": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "77": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "78": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "79": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "80": "GridSplitHandler::::adjustGridIfNecessary(int,int)",
      "87": "GridSplitHandler.Builder::::gridWidth(int)",
      "88": "GridSplitHandler.Builder::::gridWidth(int)",
      "89": "GridSplitHandler.Builder::::gridWidth(int)",
      "90": "GridSplitHandler.Builder::::gridWidth(int)",
      "92": "GridSplitHandler.Builder::::gridHeight(int)",
      "93": "GridSplitHandler.Builder::::gridHeight(int)",
      "94": "GridSplitHandler.Builder::::gridHeight(int)",
      "95": "GridSplitHandler.Builder::::gridHeight(int)",
      "97": "GridSplitHandler.Builder::::build()",
      "98": "GridSplitHandler.Builder::::build()",
      "99": "GridSplitHandler.Builder::::build()",
      "100": "GridSplitHandler.Builder::::build()",
      "101": "GridSplitHandler.Builder::::build()",
      "102": "GridSplitHandler.Builder::::build()",
      "103": "GridSplitHandler.Builder::::build()",
      "104": "GridSplitHandler.Builder::::build()",
      "105": "GridSplitHandler.Builder::::build()",
      "106": "GridSplitHandler.Builder::::build()",
      "107": "GridSplitHandler.Builder::::build()",
      "108": "GridSplitHandler.Builder::::build()",
      "109": "GridSplitHandler.Builder::::build()",
      "110": "GridSplitHandler.Builder::::build()",
      "111": "GridSplitHandler.Builder::::build()"
    },
    "test_reverse_method_lines_dic": {
      "16": "GridSplitHandlerTest::::test_split_correctUsage()",
      "17": "GridSplitHandlerTest::::test_split_correctUsage()",
      "18": "GridSplitHandlerTest::::test_split_correctUsage()",
      "19": "GridSplitHandlerTest::::test_split_correctUsage()",
      "20": "GridSplitHandlerTest::::test_split_correctUsage()",
      "21": "GridSplitHandlerTest::::test_split_correctUsage()",
      "22": "GridSplitHandlerTest::::test_split_correctUsage()",
      "23": "GridSplitHandlerTest::::test_split_correctUsage()",
      "24": "GridSplitHandlerTest::::test_split_correctUsage()",
      "25": "GridSplitHandlerTest::::test_split_correctUsage()",
      "26": "GridSplitHandlerTest::::test_split_correctUsage()",
      "27": "GridSplitHandlerTest::::test_split_correctUsage()",
      "28": "GridSplitHandlerTest::::test_split_correctUsage()",
      "29": "GridSplitHandlerTest::::test_split_correctUsage()",
      "30": "GridSplitHandlerTest::::test_split_correctUsage()",
      "31": "GridSplitHandlerTest::::test_split_correctUsage()",
      "32": "GridSplitHandlerTest::::test_split_correctUsage()",
      "33": "GridSplitHandlerTest::::test_split_correctUsage()",
      "34": "GridSplitHandlerTest::::test_split_correctUsage()",
      "35": "GridSplitHandlerTest::::test_split_correctUsage()",
      "36": "GridSplitHandlerTest::::test_split_correctUsage()",
      "37": "GridSplitHandlerTest::::test_split_correctUsage()",
      "38": "GridSplitHandlerTest::::test_split_correctUsage()",
      "39": "GridSplitHandlerTest::::test_split_correctUsage()",
      "40": "GridSplitHandlerTest::::test_split_correctUsage()",
      "41": "GridSplitHandlerTest::::test_split_correctUsage()",
      "42": "GridSplitHandlerTest::::test_split_correctUsage()",
      "43": "GridSplitHandlerTest::::test_split_correctUsage()",
      "44": "GridSplitHandlerTest::::test_split_correctUsage()",
      "45": "GridSplitHandlerTest::::test_split_correctUsage()",
      "46": "GridSplitHandlerTest::::test_split_correctUsage()",
      "47": "GridSplitHandlerTest::::test_split_correctUsage()",
      "48": "GridSplitHandlerTest::::test_split_correctUsage()",
      "49": "GridSplitHandlerTest::::test_split_correctUsage()",
      "50": "GridSplitHandlerTest::::test_split_correctUsage()",
      "51": "GridSplitHandlerTest::::test_split_correctUsage()",
      "52": "GridSplitHandlerTest::::test_split_correctUsage()",
      "53": "GridSplitHandlerTest::::test_split_correctUsage()",
      "54": "GridSplitHandlerTest::::test_split_correctUsage()",
      "56": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "57": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "58": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "59": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "60": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "61": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "62": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "63": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "64": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "65": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "66": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "67": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "68": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "69": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "70": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "71": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "72": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "73": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "74": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "75": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "76": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "77": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "78": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "79": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "80": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "81": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "82": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "83": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "84": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "85": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "86": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "87": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "88": "GridSplitHandlerTest::::test_split_tooLargeGridWidth()",
      "90": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "91": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "92": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "93": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "94": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "95": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "96": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "97": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "98": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "99": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "100": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "101": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "102": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "103": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "104": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "105": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "106": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "107": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "108": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "109": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "110": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "111": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "112": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "113": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "114": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "115": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "116": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "117": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "118": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "119": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "120": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "121": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "122": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "123": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "124": "GridSplitHandlerTest::::test_split_tooLargeGridHeight()",
      "126": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "127": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "128": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "129": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "130": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "131": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "132": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "133": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "134": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "135": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "136": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "137": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "138": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "139": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "140": "GridSplitHandlerTest::::testEx_split_noNeedToSplit()",
      "144": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "145": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "146": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "147": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "148": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "149": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "150": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "151": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "152": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "153": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "154": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "155": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "156": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "157": "GridSplitHandlerTest.BuilderTest::::test_build_correctUsage()",
      "159": "GridSplitHandlerTest.BuilderTest::::testEx_build_bothNull()",
      "160": "GridSplitHandlerTest.BuilderTest::::testEx_build_bothNull()",
      "161": "GridSplitHandlerTest.BuilderTest::::testEx_build_bothNull()",
      "162": "GridSplitHandlerTest.BuilderTest::::testEx_build_bothNull()",
      "163": "GridSplitHandlerTest.BuilderTest::::testEx_build_bothNull()",
      "164": "GridSplitHandlerTest.BuilderTest::::testEx_build_bothNull()",
      "165": "GridSplitHandlerTest.BuilderTest::::testEx_build_bothNull()",
      "166": "GridSplitHandlerTest.BuilderTest::::testEx_build_bothNull()",
      "168": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "169": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "170": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "171": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "172": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "173": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "174": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "175": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "176": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "177": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "178": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "179": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "180": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "181": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "182": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "183": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "184": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()",
      "185": "GridSplitHandlerTest.BuilderTest::::testEx_build_invalidParam()"
    },
    "tests": [
      {
        "test_lines": [
          16,
          54
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          36,
          37,
          40,
          43,
          44,
          45,
          47,
          49,
          51,
          53,
          54,
          55,
          57,
          61,
          71,
          74,
          77,
          80,
          83,
          88,
          89,
          93,
          94,
          99,
          102,
          106,
          110
        ]
      },
      {
        "test_lines": [
          56,
          88
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          36,
          37,
          40,
          43,
          44,
          45,
          47,
          49,
          51,
          53,
          54,
          55,
          57,
          61,
          71,
          74,
          75,
          77,
          80,
          83,
          88,
          89,
          93,
          94,
          99,
          102,
          106,
          110
        ]
      },
      {
        "test_lines": [
          90,
          124
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          36,
          37,
          40,
          43,
          44,
          45,
          47,
          49,
          51,
          53,
          54,
          55,
          57,
          61,
          71,
          74,
          77,
          78,
          80,
          83,
          88,
          89,
          93,
          94,
          99,
          102,
          106,
          110
        ]
      },
      {
        "test_lines": [
          126,
          140
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          36,
          37,
          71,
          72,
          83,
          88,
          89,
          93,
          94,
          99,
          102,
          106,
          110
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/out/GifOutputStreamEncoder.java": {
    "class_content": [
      "package cn.pipe.out;\n",
      "\n",
      "import cn.core.utils.ObjectUtils;\n",
      "import com.madgag.gif.fmsware.AnimatedGifEncoder;\n",
      "import java.io.OutputStream;\n",
      "\n",
      "/**\n",
      " * A gif encoder for buffered image that can encode image to output stream.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class GifOutputStreamEncoder extends AbstractGifEncoder {\n",
      "\n",
      "    /**\n",
      "     * The output stream.\n",
      "     */\n",
      "    private final OutputStream stream;\n",
      "\n",
      "    public GifOutputStreamEncoder(Builder builder) {\n",
      "        super(builder);\n",
      "        this.stream = builder.stream;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected void setOutput() {\n",
      "        encoder.start(stream);\n",
      "    }\n",
      "\n",
      "    public static class Builder extends AbstractBuilder {\n",
      "        private OutputStream stream;\n",
      "\n",
      "        public Builder outputStream(OutputStream stream) {\n",
      "            ObjectUtils.excNull(stream, \"OutputStream is null.\");\n",
      "            this.stream = stream;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Builder encoder(AnimatedGifEncoder encoder) {\n",
      "            return (Builder) super.encoder(encoder);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Builder delay(int delay) {\n",
      "            return (Builder) super.delay(delay);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Builder repeat(int repeat) {\n",
      "            return (Builder) super.repeat(repeat);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Builder reverse() {\n",
      "            return (Builder) super.reverse();\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public AbstractGifEncoder build() {\n",
      "            ObjectUtils.excNull(stream, \"OutputStream has not been set.\");\n",
      "            return new GifOutputStreamEncoder(this);\n",
      "        }\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.out;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.pipe.ReflectionUtils;\n",
      "import cn.pipe.TestUtils;\n",
      "import com.madgag.gif.fmsware.AnimatedGifEncoder;\n",
      "import com.madgag.gif.fmsware.GifDecoder;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Rule;\n",
      "import org.junit.Test;\n",
      "import org.junit.rules.TemporaryFolder;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.*;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.List;\n",
      "\n",
      "public class GifOutputStreamEncoderTest {\n",
      "\n",
      "    @Rule\n",
      "    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n",
      "\n",
      "    @Test\n",
      "    public void test_encode_correctUsage() throws IOException {\n",
      "        // given\n",
      "        File outputFile = temporaryFolder.newFile(\"output.gif\");\n",
      "        FileOutputStream fos = new FileOutputStream(outputFile);\n",
      "        AbstractGifEncoder encoder = new GifOutputStreamEncoder.Builder()\n",
      "                .delay(300)\n",
      "                .repeat(1)\n",
      "                .outputStream(fos)\n",
      "                .build();\n",
      "        List<BufferedImage> images = Arrays.asList(\n",
      "                TestUtils.getImageFromResource(\"input/frame/frame-0.jpg\"),\n",
      "                TestUtils.getImageFromResource(\"input/frame/frame-1.jpg\"),\n",
      "                TestUtils.getImageFromResource(\"input/frame/frame-2.jpg\")\n",
      "        );\n",
      "\n",
      "        // when\n",
      "        encoder.encode(images);\n",
      "\n",
      "        // then\n",
      "        GifDecoder decoder = new GifDecoder();\n",
      "        decoder.read(outputFile.getAbsolutePath());\n",
      "        List<BufferedImage> restoredImages = new ArrayList<>();\n",
      "        for (int i = 0; i < decoder.getFrameCount(); i++) {\n",
      "            restoredImages.add(decoder.getFrame(i));\n",
      "        }\n",
      "\n",
      "        /*\n",
      "         * The gif format is a compressed format.The parsed buffered image cannot be\n",
      "         * directly compared with the original image because original image has been\n",
      "         * compressed when written to file.\n",
      "         */\n",
      "        Assert.assertEquals(images.size(), restoredImages.size());\n",
      "\n",
      "        /*\n",
      "         * The repeat count equals loop count, and the delay time of every frame is 300ms.\n",
      "         */\n",
      "        Assert.assertEquals(1, decoder.getLoopCount());\n",
      "        Assert.assertEquals(300, decoder.getDelay(0));\n",
      "        Assert.assertEquals(300, decoder.getDelay(1));\n",
      "        Assert.assertEquals(300, decoder.getDelay(2));\n",
      "    }\n",
      "\n",
      "    public static class BuilderTest {\n",
      "\n",
      "        @Test\n",
      "        public void test_build_correctUsage() {\n",
      "            // given\n",
      "            AnimatedGifEncoder encoder = new AnimatedGifEncoder();\n",
      "            int delay = 300;\n",
      "            int repeat = 2;\n",
      "            OutputStream bos = new ByteArrayOutputStream();\n",
      "\n",
      "            // when\n",
      "            AbstractGifEncoder gifEncoder = new GifOutputStreamEncoder.Builder()\n",
      "                    .encoder(encoder)\n",
      "                    .delay(delay)\n",
      "                    .repeat(repeat)\n",
      "                    .reverse()\n",
      "                    .outputStream(bos)\n",
      "                    .build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertEquals(encoder, ReflectionUtils.getFromSuper(\"encoder\", gifEncoder));\n",
      "            Assert.assertEquals(delay, ReflectionUtils.getFromSuper(\"delay\", gifEncoder));\n",
      "            Assert.assertEquals(repeat, ReflectionUtils.getFromSuper(\"repeat\", gifEncoder));\n",
      "            Assert.assertTrue((boolean) ReflectionUtils.getFromSuper(\"reverse\", gifEncoder));\n",
      "            Assert.assertEquals(bos, ReflectionUtils.get(\"stream\", gifEncoder));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_notSetOutputStream() {\n",
      "            GifOutputStreamEncoder.Builder builder = new GifOutputStreamEncoder.Builder();\n",
      "            NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                    builder::build);\n",
      "            Assert.assertEquals(\"OutputStream has not been set.\", ex.getMessage());\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_outputStream_null() {\n",
      "            GifOutputStreamEncoder.Builder builder = new GifOutputStreamEncoder.Builder();\n",
      "            NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                    () -> builder.outputStream(null));\n",
      "            Assert.assertEquals(\"OutputStream is null.\",\n",
      "                    ex.getMessage());\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "GifOutputStreamEncoder::::setOutput()": [
        25,
        28
      ],
      "GifOutputStreamEncoder.Builder::::outputStream(java.io.OutputStream)": [
        33,
        37
      ],
      "GifOutputStreamEncoder.Builder::::delay(int)": [
        44,
        47
      ],
      "GifOutputStreamEncoder.Builder::::repeat(int)": [
        49,
        52
      ],
      "GifOutputStreamEncoder.Builder::::reverse()": [
        54,
        57
      ],
      "GifOutputStreamEncoder.Builder::::build()": [
        59,
        63
      ]
    },
    "test_method_lines_dic": {
      "GifOutputStreamEncoderTest::::test_encode_correctUsage()": [
        23,
        64
      ],
      "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()": [
        68,
        91
      ],
      "GifOutputStreamEncoderTest.BuilderTest::::testEx_build_notSetOutputStream()": [
        93,
        99
      ],
      "GifOutputStreamEncoderTest.BuilderTest::::testEx_outputStream_null()": [
        101,
        108
      ]
    },
    "reverse_method_lines_dic": {
      "25": "GifOutputStreamEncoder::::setOutput()",
      "26": "GifOutputStreamEncoder::::setOutput()",
      "27": "GifOutputStreamEncoder::::setOutput()",
      "28": "GifOutputStreamEncoder::::setOutput()",
      "33": "GifOutputStreamEncoder.Builder::::outputStream(java.io.OutputStream)",
      "34": "GifOutputStreamEncoder.Builder::::outputStream(java.io.OutputStream)",
      "35": "GifOutputStreamEncoder.Builder::::outputStream(java.io.OutputStream)",
      "36": "GifOutputStreamEncoder.Builder::::outputStream(java.io.OutputStream)",
      "37": "GifOutputStreamEncoder.Builder::::outputStream(java.io.OutputStream)",
      "44": "GifOutputStreamEncoder.Builder::::delay(int)",
      "45": "GifOutputStreamEncoder.Builder::::delay(int)",
      "46": "GifOutputStreamEncoder.Builder::::delay(int)",
      "47": "GifOutputStreamEncoder.Builder::::delay(int)",
      "49": "GifOutputStreamEncoder.Builder::::repeat(int)",
      "50": "GifOutputStreamEncoder.Builder::::repeat(int)",
      "51": "GifOutputStreamEncoder.Builder::::repeat(int)",
      "52": "GifOutputStreamEncoder.Builder::::repeat(int)",
      "54": "GifOutputStreamEncoder.Builder::::reverse()",
      "55": "GifOutputStreamEncoder.Builder::::reverse()",
      "56": "GifOutputStreamEncoder.Builder::::reverse()",
      "57": "GifOutputStreamEncoder.Builder::::reverse()",
      "59": "GifOutputStreamEncoder.Builder::::build()",
      "60": "GifOutputStreamEncoder.Builder::::build()",
      "61": "GifOutputStreamEncoder.Builder::::build()",
      "62": "GifOutputStreamEncoder.Builder::::build()",
      "63": "GifOutputStreamEncoder.Builder::::build()"
    },
    "test_reverse_method_lines_dic": {
      "23": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "24": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "25": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "26": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "27": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "28": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "29": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "30": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "31": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "32": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "33": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "34": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "35": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "36": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "37": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "38": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "39": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "40": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "41": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "42": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "43": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "44": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "45": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "46": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "47": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "48": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "49": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "50": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "51": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "52": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "53": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "54": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "55": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "56": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "57": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "58": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "59": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "60": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "61": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "62": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "63": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "64": "GifOutputStreamEncoderTest::::test_encode_correctUsage()",
      "68": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "69": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "70": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "71": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "72": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "73": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "74": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "75": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "76": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "77": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "78": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "79": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "80": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "81": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "82": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "83": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "84": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "85": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "86": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "87": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "88": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "89": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "90": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "91": "GifOutputStreamEncoderTest.BuilderTest::::test_build_correctUsage()",
      "93": "GifOutputStreamEncoderTest.BuilderTest::::testEx_build_notSetOutputStream()",
      "94": "GifOutputStreamEncoderTest.BuilderTest::::testEx_build_notSetOutputStream()",
      "95": "GifOutputStreamEncoderTest.BuilderTest::::testEx_build_notSetOutputStream()",
      "96": "GifOutputStreamEncoderTest.BuilderTest::::testEx_build_notSetOutputStream()",
      "97": "GifOutputStreamEncoderTest.BuilderTest::::testEx_build_notSetOutputStream()",
      "98": "GifOutputStreamEncoderTest.BuilderTest::::testEx_build_notSetOutputStream()",
      "99": "GifOutputStreamEncoderTest.BuilderTest::::testEx_build_notSetOutputStream()",
      "101": "GifOutputStreamEncoderTest.BuilderTest::::testEx_outputStream_null()",
      "102": "GifOutputStreamEncoderTest.BuilderTest::::testEx_outputStream_null()",
      "103": "GifOutputStreamEncoderTest.BuilderTest::::testEx_outputStream_null()",
      "104": "GifOutputStreamEncoderTest.BuilderTest::::testEx_outputStream_null()",
      "105": "GifOutputStreamEncoderTest.BuilderTest::::testEx_outputStream_null()",
      "106": "GifOutputStreamEncoderTest.BuilderTest::::testEx_outputStream_null()",
      "107": "GifOutputStreamEncoderTest.BuilderTest::::testEx_outputStream_null()",
      "108": "GifOutputStreamEncoderTest.BuilderTest::::testEx_outputStream_null()"
    },
    "tests": [
      {
        "test_lines": [
          23,
          64
        ],
        "covered_lines": [
          21,
          22,
          23,
          27,
          28,
          30,
          34,
          35,
          36,
          46,
          51,
          61,
          62
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/imglib/pipe/src/main/java/cn/pipe/out/GifFileEncoder.java": {
    "class_content": [
      "package cn.pipe.out;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.core.utils.ObjectUtils;\n",
      "import cn.core.utils.StringUtils;\n",
      "import com.madgag.gif.fmsware.AnimatedGifEncoder;\n",
      "import java.io.File;\n",
      "\n",
      "/**\n",
      " * A gif encoder for buffered image that can encode image to GIF file.\n",
      " *\n",
      " * @author tracy\n",
      " * @since 0.2.1\n",
      " */\n",
      "public class GifFileEncoder extends AbstractGifEncoder {\n",
      "\n",
      "    /**\n",
      "     * The output file name.\n",
      "     */\n",
      "    private final String filename;\n",
      "\n",
      "    public GifFileEncoder(Builder builder) {\n",
      "        super(builder);\n",
      "        this.filename = builder.filename;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected void setOutput() {\n",
      "        encoder.start(filename);\n",
      "    }\n",
      "\n",
      "    public static class Builder extends AbstractBuilder {\n",
      "        private String filename;\n",
      "\n",
      "        public Builder filename(String filename) {\n",
      "            this.filename = filename;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public Builder file(File file) {\n",
      "            ObjectUtils.excNull(file, \"File is null.\");\n",
      "            this.filename = file.getAbsolutePath();\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Builder encoder(AnimatedGifEncoder encoder) {\n",
      "            return (Builder) super.encoder(encoder);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Builder delay(int delay) {\n",
      "            return (Builder) super.delay(delay);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Builder repeat(int repeat) {\n",
      "            return (Builder) super.repeat(repeat);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public Builder reverse() {\n",
      "            return (Builder) super.reverse();\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public AbstractGifEncoder build() {\n",
      "            if (StringUtils.isEmpty(filename)) {\n",
      "                throw new InvalidSettingException(\"Filename has not been set.\");\n",
      "            }\n",
      "            return new GifFileEncoder(this);\n",
      "        }\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package cn.pipe.out;\n",
      "\n",
      "import cn.core.ex.InvalidSettingException;\n",
      "import cn.pipe.ReflectionUtils;\n",
      "import cn.pipe.TestUtils;\n",
      "import com.madgag.gif.fmsware.AnimatedGifEncoder;\n",
      "import com.madgag.gif.fmsware.GifDecoder;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Rule;\n",
      "import org.junit.Test;\n",
      "import org.junit.rules.TemporaryFolder;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.File;\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "public class GifFileEncoderTest {\n",
      "\n",
      "    @Rule\n",
      "    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n",
      "\n",
      "    @Test\n",
      "    public void test_encode_correctUsage() throws IOException {\n",
      "        // given\n",
      "        String tempFilePath = temporaryFolder.newFile(\"output.gif\").getAbsolutePath();\n",
      "        AbstractGifEncoder encoder = new GifFileEncoder.Builder()\n",
      "                .delay(300)\n",
      "                .repeat(1)\n",
      "                .filename(tempFilePath)\n",
      "                .build();\n",
      "        List<BufferedImage> images = Arrays.asList(\n",
      "                TestUtils.getImageFromResource(\"input/frame/frame-0.jpg\"),\n",
      "                TestUtils.getImageFromResource(\"input/frame/frame-1.jpg\"),\n",
      "                TestUtils.getImageFromResource(\"input/frame/frame-2.jpg\")\n",
      "        );\n",
      "\n",
      "        // when\n",
      "        encoder.encode(images);\n",
      "\n",
      "        // then\n",
      "        GifDecoder decoder = new GifDecoder();\n",
      "        decoder.read(tempFilePath);\n",
      "        List<BufferedImage> restoredImages = new ArrayList<>();\n",
      "        for (int i = 0; i < decoder.getFrameCount(); i++) {\n",
      "            restoredImages.add(decoder.getFrame(i));\n",
      "        }\n",
      "\n",
      "        /*\n",
      "         * The gif format is a compressed format.The parsed buffered image cannot be\n",
      "         * directly compared with the original image because original image has been\n",
      "         * compressed when written to file.\n",
      "         */\n",
      "        Assert.assertEquals(images.size(), restoredImages.size());\n",
      "\n",
      "        /*\n",
      "         * The repeat count equals loop count, and the delay time of every frame is 300ms.\n",
      "         */\n",
      "        Assert.assertEquals(1, decoder.getLoopCount());\n",
      "        Assert.assertEquals(300, decoder.getDelay(0));\n",
      "        Assert.assertEquals(300, decoder.getDelay(1));\n",
      "        Assert.assertEquals(300, decoder.getDelay(2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_supportMultiple_alwaysTrue() {\n",
      "        AbstractGifEncoder encoder = new GifFileEncoder.Builder()\n",
      "                .filename(\"unset\")\n",
      "                .build();\n",
      "        Assert.assertTrue(encoder.supportMultiple());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void test_encode_imagesReversed() throws IOException {\n",
      "        // given\n",
      "        String tempFilePath = temporaryFolder.newFile(\"output.gif\").getAbsolutePath();\n",
      "        AbstractGifEncoder encoder = new GifFileEncoder.Builder()\n",
      "                .delay(300)\n",
      "                .repeat(1)\n",
      "                .reverse()\n",
      "                .filename(tempFilePath)\n",
      "                .build();\n",
      "        List<BufferedImage> images = Arrays.asList(\n",
      "                TestUtils.getImageFromResource(\"input/frame/frame-0.jpg\"),\n",
      "                TestUtils.getImageFromResource(\"input/frame/frame-1.jpg\"),\n",
      "                TestUtils.getImageFromResource(\"input/frame/frame-2.jpg\")\n",
      "        );\n",
      "\n",
      "        // back up original image list\n",
      "        List<BufferedImage> originalSort = new ArrayList<>(images);\n",
      "\n",
      "        // when\n",
      "        encoder.encode(images);\n",
      "\n",
      "        // then\n",
      "        int frameSize = originalSort.size();\n",
      "        Assert.assertEquals(frameSize, images.size());\n",
      "\n",
      "        // The order of the original list has been reversed.\n",
      "        for (int i = 0; i < frameSize; i++) {\n",
      "            Assert.assertEquals(originalSort.get(i), images.get(frameSize - i - 1));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_encode_nullImageList() throws IOException {\n",
      "        String tempFilePath = temporaryFolder.newFile(\"output.gif\").getAbsolutePath();\n",
      "        AbstractGifEncoder encoder = new GifFileEncoder.Builder()\n",
      "                .delay(300)\n",
      "                .repeat(1)\n",
      "                .filename(tempFilePath)\n",
      "                .build();\n",
      "        NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                () -> encoder.encode(null));\n",
      "        Assert.assertEquals(\"Images to be encoded is null.\", ex.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEx_encode_emptyImageList() throws IOException {\n",
      "        String tempFilePath = temporaryFolder.newFile(\"output.gif\").getAbsolutePath();\n",
      "        AbstractGifEncoder encoder = new GifFileEncoder.Builder()\n",
      "                .delay(300)\n",
      "                .repeat(1)\n",
      "                .filename(tempFilePath)\n",
      "                .build();\n",
      "        List<BufferedImage> empty = Collections.emptyList();\n",
      "\n",
      "        InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                () -> encoder.encode(empty));\n",
      "        Assert.assertEquals(\"Images to be encoded is empty.\", ex.getMessage());\n",
      "    }\n",
      "\n",
      "    public static class AbstractBuilderTest {\n",
      "\n",
      "        @Test\n",
      "        public void testEx_encoder_null() {\n",
      "            GifFileEncoder.Builder builder = new GifFileEncoder.Builder();\n",
      "            NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                    () -> builder.encoder(null));\n",
      "            Assert.assertEquals(\"AnimatedGifEncoder is null.\",\n",
      "                    ex.getMessage());\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_delay_invalid() {\n",
      "            GifFileEncoder.Builder builder = new GifFileEncoder.Builder();\n",
      "            InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    () -> builder.delay(-1));\n",
      "            Assert.assertEquals(\"Delay time cannot be less than 0.\",\n",
      "                    ex.getMessage());\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_repeat_invalid() {\n",
      "            GifFileEncoder.Builder builder = new GifFileEncoder.Builder();\n",
      "            InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    () -> builder.repeat(-1));\n",
      "            Assert.assertEquals(\"The number of times the set of GIF frames cannot be less than 0.\",\n",
      "                    ex.getMessage());\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    public static class BuilderTest {\n",
      "\n",
      "        @Test\n",
      "        public void test_build_correctUsage() {\n",
      "            // given\n",
      "            AnimatedGifEncoder encoder = new AnimatedGifEncoder();\n",
      "            int delay = 300;\n",
      "            int repeat = 2;\n",
      "            String filename = \"/1/2/3/gif.gif\";\n",
      "\n",
      "            // when\n",
      "            AbstractGifEncoder gifEncoder = new GifFileEncoder.Builder()\n",
      "                    .encoder(encoder)\n",
      "                    .delay(delay)\n",
      "                    .repeat(repeat)\n",
      "                    .reverse()\n",
      "                    .filename(filename)\n",
      "                    .build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertEquals(encoder, ReflectionUtils.getFromSuper(\"encoder\", gifEncoder));\n",
      "            Assert.assertEquals(delay, ReflectionUtils.getFromSuper(\"delay\", gifEncoder));\n",
      "            Assert.assertEquals(repeat, ReflectionUtils.getFromSuper(\"repeat\", gifEncoder));\n",
      "            Assert.assertTrue((boolean) ReflectionUtils.getFromSuper(\"reverse\", gifEncoder));\n",
      "            Assert.assertEquals(filename, ReflectionUtils.get(\"filename\", gifEncoder));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void test_build_correctUsage_withFile() {\n",
      "            // given\n",
      "            AnimatedGifEncoder encoder = new AnimatedGifEncoder();\n",
      "            int delay = 300;\n",
      "            int repeat = 2;\n",
      "            File sourceFile = new File(\"/1/2/3/gif.gif\");\n",
      "\n",
      "            // when\n",
      "            AbstractGifEncoder gifEncoder = new GifFileEncoder.Builder()\n",
      "                    .encoder(encoder)\n",
      "                    .delay(delay)\n",
      "                    .repeat(repeat)\n",
      "                    .reverse()\n",
      "                    .file(sourceFile)\n",
      "                    .build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertEquals(encoder, ReflectionUtils.getFromSuper(\"encoder\", gifEncoder));\n",
      "            Assert.assertEquals(delay, ReflectionUtils.getFromSuper(\"delay\", gifEncoder));\n",
      "            Assert.assertEquals(repeat, ReflectionUtils.getFromSuper(\"repeat\", gifEncoder));\n",
      "            Assert.assertTrue((boolean) ReflectionUtils.getFromSuper(\"reverse\", gifEncoder));\n",
      "            File targetFile = new File((String) ReflectionUtils.get(\"filename\", gifEncoder));\n",
      "            Assert.assertEquals(sourceFile.getAbsolutePath(), targetFile.getAbsolutePath());\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void test_build_defaultParam() {\n",
      "            // given\n",
      "            String filename = \"/1/2/3/gif.gif\";\n",
      "\n",
      "            // when\n",
      "            AbstractGifEncoder gifEncoder = new GifFileEncoder.Builder()\n",
      "                    .filename(filename)\n",
      "                    .build();\n",
      "\n",
      "            // then\n",
      "            Assert.assertNotNull(ReflectionUtils.getFromSuper(\"encoder\", gifEncoder));\n",
      "            Assert.assertEquals(0, ReflectionUtils.getFromSuper(\"delay\", gifEncoder));\n",
      "            Assert.assertEquals(0, ReflectionUtils.getFromSuper(\"repeat\", gifEncoder));\n",
      "            Assert.assertFalse((boolean) ReflectionUtils.getFromSuper(\"reverse\", gifEncoder));\n",
      "            Assert.assertEquals(filename, ReflectionUtils.get(\"filename\", gifEncoder));\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_build_notSetFilename() {\n",
      "            GifFileEncoder.Builder builder = new GifFileEncoder.Builder();\n",
      "            InvalidSettingException ex = Assert.assertThrows(InvalidSettingException.class,\n",
      "                    builder::build);\n",
      "            Assert.assertEquals(\"Filename has not been set.\", ex.getMessage());\n",
      "        }\n",
      "\n",
      "        @Test\n",
      "        public void testEx_file_null() {\n",
      "            GifFileEncoder.Builder builder = new GifFileEncoder.Builder();\n",
      "            NullPointerException ex = Assert.assertThrows(NullPointerException.class,\n",
      "                    () -> builder.file(null));\n",
      "            Assert.assertEquals(\"File is null.\", ex.getMessage());\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "GifFileEncoder::::setOutput()": [
        27,
        30
      ],
      "GifFileEncoder.Builder::::filename(java.lang.String)": [
        35,
        38
      ],
      "GifFileEncoder.Builder::::file(java.io.File)": [
        40,
        44
      ],
      "GifFileEncoder.Builder::::delay(int)": [
        51,
        54
      ],
      "GifFileEncoder.Builder::::repeat(int)": [
        56,
        59
      ],
      "GifFileEncoder.Builder::::reverse()": [
        61,
        64
      ],
      "GifFileEncoder.Builder::::build()": [
        66,
        72
      ]
    },
    "test_method_lines_dic": {
      "GifFileEncoderTest::::test_encode_correctUsage()": [
        25,
        65
      ],
      "GifFileEncoderTest::::test_supportMultiple_alwaysTrue()": [
        67,
        73
      ],
      "GifFileEncoderTest::::test_encode_imagesReversed()": [
        75,
        105
      ],
      "GifFileEncoderTest::::testEx_encode_nullImageList()": [
        107,
        118
      ],
      "GifFileEncoderTest::::testEx_encode_emptyImageList()": [
        120,
        133
      ],
      "GifFileEncoderTest.AbstractBuilderTest::::testEx_encoder_null()": [
        137,
        144
      ],
      "GifFileEncoderTest.AbstractBuilderTest::::testEx_delay_invalid()": [
        146,
        153
      ],
      "GifFileEncoderTest.AbstractBuilderTest::::testEx_repeat_invalid()": [
        155,
        162
      ],
      "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()": [
        168,
        191
      ],
      "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()": [
        193,
        217
      ],
      "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()": [
        219,
        235
      ],
      "GifFileEncoderTest.BuilderTest::::testEx_build_notSetFilename()": [
        237,
        243
      ],
      "GifFileEncoderTest.BuilderTest::::testEx_file_null()": [
        245,
        251
      ]
    },
    "reverse_method_lines_dic": {
      "27": "GifFileEncoder::::setOutput()",
      "28": "GifFileEncoder::::setOutput()",
      "29": "GifFileEncoder::::setOutput()",
      "30": "GifFileEncoder::::setOutput()",
      "35": "GifFileEncoder.Builder::::filename(java.lang.String)",
      "36": "GifFileEncoder.Builder::::filename(java.lang.String)",
      "37": "GifFileEncoder.Builder::::filename(java.lang.String)",
      "38": "GifFileEncoder.Builder::::filename(java.lang.String)",
      "40": "GifFileEncoder.Builder::::file(java.io.File)",
      "41": "GifFileEncoder.Builder::::file(java.io.File)",
      "42": "GifFileEncoder.Builder::::file(java.io.File)",
      "43": "GifFileEncoder.Builder::::file(java.io.File)",
      "44": "GifFileEncoder.Builder::::file(java.io.File)",
      "51": "GifFileEncoder.Builder::::delay(int)",
      "52": "GifFileEncoder.Builder::::delay(int)",
      "53": "GifFileEncoder.Builder::::delay(int)",
      "54": "GifFileEncoder.Builder::::delay(int)",
      "56": "GifFileEncoder.Builder::::repeat(int)",
      "57": "GifFileEncoder.Builder::::repeat(int)",
      "58": "GifFileEncoder.Builder::::repeat(int)",
      "59": "GifFileEncoder.Builder::::repeat(int)",
      "61": "GifFileEncoder.Builder::::reverse()",
      "62": "GifFileEncoder.Builder::::reverse()",
      "63": "GifFileEncoder.Builder::::reverse()",
      "64": "GifFileEncoder.Builder::::reverse()",
      "66": "GifFileEncoder.Builder::::build()",
      "67": "GifFileEncoder.Builder::::build()",
      "68": "GifFileEncoder.Builder::::build()",
      "69": "GifFileEncoder.Builder::::build()",
      "70": "GifFileEncoder.Builder::::build()",
      "71": "GifFileEncoder.Builder::::build()",
      "72": "GifFileEncoder.Builder::::build()"
    },
    "test_reverse_method_lines_dic": {
      "25": "GifFileEncoderTest::::test_encode_correctUsage()",
      "26": "GifFileEncoderTest::::test_encode_correctUsage()",
      "27": "GifFileEncoderTest::::test_encode_correctUsage()",
      "28": "GifFileEncoderTest::::test_encode_correctUsage()",
      "29": "GifFileEncoderTest::::test_encode_correctUsage()",
      "30": "GifFileEncoderTest::::test_encode_correctUsage()",
      "31": "GifFileEncoderTest::::test_encode_correctUsage()",
      "32": "GifFileEncoderTest::::test_encode_correctUsage()",
      "33": "GifFileEncoderTest::::test_encode_correctUsage()",
      "34": "GifFileEncoderTest::::test_encode_correctUsage()",
      "35": "GifFileEncoderTest::::test_encode_correctUsage()",
      "36": "GifFileEncoderTest::::test_encode_correctUsage()",
      "37": "GifFileEncoderTest::::test_encode_correctUsage()",
      "38": "GifFileEncoderTest::::test_encode_correctUsage()",
      "39": "GifFileEncoderTest::::test_encode_correctUsage()",
      "40": "GifFileEncoderTest::::test_encode_correctUsage()",
      "41": "GifFileEncoderTest::::test_encode_correctUsage()",
      "42": "GifFileEncoderTest::::test_encode_correctUsage()",
      "43": "GifFileEncoderTest::::test_encode_correctUsage()",
      "44": "GifFileEncoderTest::::test_encode_correctUsage()",
      "45": "GifFileEncoderTest::::test_encode_correctUsage()",
      "46": "GifFileEncoderTest::::test_encode_correctUsage()",
      "47": "GifFileEncoderTest::::test_encode_correctUsage()",
      "48": "GifFileEncoderTest::::test_encode_correctUsage()",
      "49": "GifFileEncoderTest::::test_encode_correctUsage()",
      "50": "GifFileEncoderTest::::test_encode_correctUsage()",
      "51": "GifFileEncoderTest::::test_encode_correctUsage()",
      "52": "GifFileEncoderTest::::test_encode_correctUsage()",
      "53": "GifFileEncoderTest::::test_encode_correctUsage()",
      "54": "GifFileEncoderTest::::test_encode_correctUsage()",
      "55": "GifFileEncoderTest::::test_encode_correctUsage()",
      "56": "GifFileEncoderTest::::test_encode_correctUsage()",
      "57": "GifFileEncoderTest::::test_encode_correctUsage()",
      "58": "GifFileEncoderTest::::test_encode_correctUsage()",
      "59": "GifFileEncoderTest::::test_encode_correctUsage()",
      "60": "GifFileEncoderTest::::test_encode_correctUsage()",
      "61": "GifFileEncoderTest::::test_encode_correctUsage()",
      "62": "GifFileEncoderTest::::test_encode_correctUsage()",
      "63": "GifFileEncoderTest::::test_encode_correctUsage()",
      "64": "GifFileEncoderTest::::test_encode_correctUsage()",
      "65": "GifFileEncoderTest::::test_encode_correctUsage()",
      "67": "GifFileEncoderTest::::test_supportMultiple_alwaysTrue()",
      "68": "GifFileEncoderTest::::test_supportMultiple_alwaysTrue()",
      "69": "GifFileEncoderTest::::test_supportMultiple_alwaysTrue()",
      "70": "GifFileEncoderTest::::test_supportMultiple_alwaysTrue()",
      "71": "GifFileEncoderTest::::test_supportMultiple_alwaysTrue()",
      "72": "GifFileEncoderTest::::test_supportMultiple_alwaysTrue()",
      "73": "GifFileEncoderTest::::test_supportMultiple_alwaysTrue()",
      "75": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "76": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "77": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "78": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "79": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "80": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "81": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "82": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "83": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "84": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "85": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "86": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "87": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "88": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "89": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "90": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "91": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "92": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "93": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "94": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "95": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "96": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "97": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "98": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "99": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "100": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "101": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "102": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "103": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "104": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "105": "GifFileEncoderTest::::test_encode_imagesReversed()",
      "107": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "108": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "109": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "110": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "111": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "112": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "113": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "114": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "115": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "116": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "117": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "118": "GifFileEncoderTest::::testEx_encode_nullImageList()",
      "120": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "121": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "122": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "123": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "124": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "125": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "126": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "127": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "128": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "129": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "130": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "131": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "132": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "133": "GifFileEncoderTest::::testEx_encode_emptyImageList()",
      "137": "GifFileEncoderTest.AbstractBuilderTest::::testEx_encoder_null()",
      "138": "GifFileEncoderTest.AbstractBuilderTest::::testEx_encoder_null()",
      "139": "GifFileEncoderTest.AbstractBuilderTest::::testEx_encoder_null()",
      "140": "GifFileEncoderTest.AbstractBuilderTest::::testEx_encoder_null()",
      "141": "GifFileEncoderTest.AbstractBuilderTest::::testEx_encoder_null()",
      "142": "GifFileEncoderTest.AbstractBuilderTest::::testEx_encoder_null()",
      "143": "GifFileEncoderTest.AbstractBuilderTest::::testEx_encoder_null()",
      "144": "GifFileEncoderTest.AbstractBuilderTest::::testEx_encoder_null()",
      "146": "GifFileEncoderTest.AbstractBuilderTest::::testEx_delay_invalid()",
      "147": "GifFileEncoderTest.AbstractBuilderTest::::testEx_delay_invalid()",
      "148": "GifFileEncoderTest.AbstractBuilderTest::::testEx_delay_invalid()",
      "149": "GifFileEncoderTest.AbstractBuilderTest::::testEx_delay_invalid()",
      "150": "GifFileEncoderTest.AbstractBuilderTest::::testEx_delay_invalid()",
      "151": "GifFileEncoderTest.AbstractBuilderTest::::testEx_delay_invalid()",
      "152": "GifFileEncoderTest.AbstractBuilderTest::::testEx_delay_invalid()",
      "153": "GifFileEncoderTest.AbstractBuilderTest::::testEx_delay_invalid()",
      "155": "GifFileEncoderTest.AbstractBuilderTest::::testEx_repeat_invalid()",
      "156": "GifFileEncoderTest.AbstractBuilderTest::::testEx_repeat_invalid()",
      "157": "GifFileEncoderTest.AbstractBuilderTest::::testEx_repeat_invalid()",
      "158": "GifFileEncoderTest.AbstractBuilderTest::::testEx_repeat_invalid()",
      "159": "GifFileEncoderTest.AbstractBuilderTest::::testEx_repeat_invalid()",
      "160": "GifFileEncoderTest.AbstractBuilderTest::::testEx_repeat_invalid()",
      "161": "GifFileEncoderTest.AbstractBuilderTest::::testEx_repeat_invalid()",
      "162": "GifFileEncoderTest.AbstractBuilderTest::::testEx_repeat_invalid()",
      "168": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "169": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "170": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "171": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "172": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "173": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "174": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "175": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "176": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "177": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "178": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "179": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "180": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "181": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "182": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "183": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "184": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "185": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "186": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "187": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "188": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "189": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "190": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "191": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage()",
      "193": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "194": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "195": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "196": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "197": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "198": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "199": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "200": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "201": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "202": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "203": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "204": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "205": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "206": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "207": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "208": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "209": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "210": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "211": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "212": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "213": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "214": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "215": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "216": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "217": "GifFileEncoderTest.BuilderTest::::test_build_correctUsage_withFile()",
      "219": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "220": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "221": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "222": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "223": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "224": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "225": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "226": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "227": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "228": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "229": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "230": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "231": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "232": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "233": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "234": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "235": "GifFileEncoderTest.BuilderTest::::test_build_defaultParam()",
      "237": "GifFileEncoderTest.BuilderTest::::testEx_build_notSetFilename()",
      "238": "GifFileEncoderTest.BuilderTest::::testEx_build_notSetFilename()",
      "239": "GifFileEncoderTest.BuilderTest::::testEx_build_notSetFilename()",
      "240": "GifFileEncoderTest.BuilderTest::::testEx_build_notSetFilename()",
      "241": "GifFileEncoderTest.BuilderTest::::testEx_build_notSetFilename()",
      "242": "GifFileEncoderTest.BuilderTest::::testEx_build_notSetFilename()",
      "243": "GifFileEncoderTest.BuilderTest::::testEx_build_notSetFilename()",
      "245": "GifFileEncoderTest.BuilderTest::::testEx_file_null()",
      "246": "GifFileEncoderTest.BuilderTest::::testEx_file_null()",
      "247": "GifFileEncoderTest.BuilderTest::::testEx_file_null()",
      "248": "GifFileEncoderTest.BuilderTest::::testEx_file_null()",
      "249": "GifFileEncoderTest.BuilderTest::::testEx_file_null()",
      "250": "GifFileEncoderTest.BuilderTest::::testEx_file_null()",
      "251": "GifFileEncoderTest.BuilderTest::::testEx_file_null()"
    },
    "tests": [
      {
        "test_lines": [
          25,
          65
        ],
        "covered_lines": [
          23,
          24,
          25,
          29,
          30,
          32,
          36,
          37,
          53,
          58,
          68,
          71
        ]
      },
      {
        "test_lines": [
          67,
          73
        ],
        "covered_lines": [
          23,
          24,
          25,
          32,
          36,
          37,
          68,
          71
        ]
      },
      {
        "test_lines": [
          75,
          105
        ],
        "covered_lines": [
          23,
          24,
          25,
          29,
          30,
          32,
          36,
          37,
          53,
          58,
          63,
          68,
          71
        ]
      },
      {
        "test_lines": [
          107,
          118
        ],
        "covered_lines": [
          23,
          24,
          25,
          32,
          36,
          37,
          53,
          58,
          68,
          71
        ]
      },
      {
        "test_lines": [
          120,
          133
        ],
        "covered_lines": [
          23,
          24,
          25,
          32,
          36,
          37,
          53,
          58,
          68,
          71
        ]
      }
    ]
  }
}