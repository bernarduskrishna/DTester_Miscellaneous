{"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/core/ConstraintGroup.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Objects;\n","\n","/**\n"," * <code>ConstraintGroup</code> is a specialized <code>ConstraintContext</code> with only\n"," * the name, attributes is empty.\n"," */\n","@FunctionalInterface\n","public interface ConstraintGroup extends ConstraintContext {\n","\tConstraintGroup DEFAULT = ConstraintGroup.of(\"DEFAULT\");\n","\n","\tstatic ConstraintGroup of(String name) {\n","\t\treturn new ConstraintGroup() {\n","\t\t\t@Override\n","\t\t\tpublic boolean equals(Object obj) {\n","\t\t\t\tif (!(obj instanceof ConstraintGroup)) {\n","\t\t\t\t\treturn false;\n","\t\t\t\t}\n","\t\t\t\tConstraintGroup cg = (ConstraintGroup) obj;\n","\t\t\t\treturn Objects.equals(this.name(), cg.name());\n","\t\t\t}\n","\n","\t\t\t@Override\n","\t\t\tpublic int hashCode() {\n","\t\t\t\treturn Objects.hashCode(this.name());\n","\t\t\t}\n","\n","\t\t\t@Override\n","\t\t\tpublic String name() {\n","\t\t\t\treturn name;\n","\t\t\t}\n","\t\t};\n","\t}\n","\n","\t@Override\n","\tdefault Attribute attribute(String key) {\n","\t\treturn () -> null;\n","\t}\n","\n","\tdefault <T> ConstraintCondition<T> toCondition() {\n","\t\treturn (target, group) -> Objects.equals(name(), group.name());\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class ConstraintGroupTest {\n","\n","\t@Test\n","\tvoid name() {\n","\t\tConstraintGroup cg = ConstraintGroup.of(\"foo\");\n","\t\tassertThat(cg.name()).isEqualTo(\"foo\");\n","\t\tassertThat(cg.name()).isNotEqualTo(\"Foo\");\n","\t}\n","\n","\t@Test\n","\tvoid testEnum() {\n","\t\tConstraintCondition<?> condition = CustomGroup.FOO.toCondition();\n","\t\tassertThat(condition.test(null, CustomGroup.FOO)).isTrue();\n","\t\tassertThat(condition.test(null, CustomGroup.BAR)).isFalse();\n","\t\tassertThat(condition.test(null, ConstraintGroup.of(\"FOO\"))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid toCondition() {\n","\t\tConstraintGroup cg = ConstraintGroup.of(\"foo\");\n","\t\tConstraintCondition<?> condition = cg.toCondition();\n","\t\tassertThat(condition.test(null, ConstraintGroup.of(\"foo\"))).isTrue();\n","\t\tassertThat(condition.test(null, ConstraintGroup.of(\"Foo\"))).isFalse();\n","\t\tassertThat(condition.test(null, ConstraintGroup.of(\"bar\"))).isFalse();\n","\t}\n","\n","\tenum CustomGroup implements ConstraintGroup {\n","\t\tFOO, BAR\n","\t}\n","}\n"],"method_lines_dic":{"ConstraintGroup::::of(java.lang.String)":[28,49],"ConstraintGroup::::attribute(java.lang.String)":[51,54],"ConstraintGroup::::toCondition()":[56,58]},"test_method_lines_dic":{"ConstraintGroupTest::::name()":[24,29],"ConstraintGroupTest::::testEnum()":[31,37],"ConstraintGroupTest::::toCondition()":[39,46]},"reverse_method_lines_dic":{"28":"ConstraintGroup::::of(java.lang.String)","29":"ConstraintGroup::::of(java.lang.String)","30":"ConstraintGroup::::of(java.lang.String)","31":"ConstraintGroup::::of(java.lang.String)","32":"ConstraintGroup::::of(java.lang.String)","33":"ConstraintGroup::::of(java.lang.String)","34":"ConstraintGroup::::of(java.lang.String)","35":"ConstraintGroup::::of(java.lang.String)","36":"ConstraintGroup::::of(java.lang.String)","37":"ConstraintGroup::::of(java.lang.String)","38":"ConstraintGroup::::of(java.lang.String)","39":"ConstraintGroup::::of(java.lang.String)","40":"ConstraintGroup::::of(java.lang.String)","41":"ConstraintGroup::::of(java.lang.String)","42":"ConstraintGroup::::of(java.lang.String)","43":"ConstraintGroup::::of(java.lang.String)","44":"ConstraintGroup::::of(java.lang.String)","45":"ConstraintGroup::::of(java.lang.String)","46":"ConstraintGroup::::of(java.lang.String)","47":"ConstraintGroup::::of(java.lang.String)","48":"ConstraintGroup::::of(java.lang.String)","49":"ConstraintGroup::::of(java.lang.String)","51":"ConstraintGroup::::attribute(java.lang.String)","52":"ConstraintGroup::::attribute(java.lang.String)","53":"ConstraintGroup::::attribute(java.lang.String)","54":"ConstraintGroup::::attribute(java.lang.String)","56":"ConstraintGroup::::toCondition()","57":"ConstraintGroup::::toCondition()","58":"ConstraintGroup::::toCondition()"},"test_reverse_method_lines_dic":{"24":"ConstraintGroupTest::::name()","25":"ConstraintGroupTest::::name()","26":"ConstraintGroupTest::::name()","27":"ConstraintGroupTest::::name()","28":"ConstraintGroupTest::::name()","29":"ConstraintGroupTest::::name()","31":"ConstraintGroupTest::::testEnum()","32":"ConstraintGroupTest::::testEnum()","33":"ConstraintGroupTest::::testEnum()","34":"ConstraintGroupTest::::testEnum()","35":"ConstraintGroupTest::::testEnum()","36":"ConstraintGroupTest::::testEnum()","37":"ConstraintGroupTest::::testEnum()","39":"ConstraintGroupTest::::toCondition()","40":"ConstraintGroupTest::::toCondition()","41":"ConstraintGroupTest::::toCondition()","42":"ConstraintGroupTest::::toCondition()","43":"ConstraintGroupTest::::toCondition()","44":"ConstraintGroupTest::::toCondition()","45":"ConstraintGroupTest::::toCondition()","46":"ConstraintGroupTest::::toCondition()"},"tests":[{"test_lines":[24,29],"covered_lines":[26,29,46],"label":"ConstraintGroup::::of(java.lang.String)"},{"test_lines":[31,37],"covered_lines":[26,29,46,57],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[39,46],"covered_lines":[26,29,46,57],"label":"ConstraintGroup::::toCondition()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/core/Validator.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Collection;\n","import java.util.Collections;\n","import java.util.List;\n","import java.util.Locale;\n","import java.util.Optional;\n","import java.util.function.Consumer;\n","import java.util.function.Supplier;\n","\n","import am.ik.yavi.fn.Pair;\n","import am.ik.yavi.message.MessageFormatter;\n","\n","import static am.ik.yavi.core.ViolationMessage.Default.OBJECT_NOT_NULL;\n","\n","/**\n"," * Validates the target instances. A <code>Validator</code> instance is immutable and can\n"," * be used as a singleton.\n"," *\n"," * @param <T> the type of the instance to validate\n"," * @author Toshiaki Maki\n"," */\n","public class Validator<T> implements Validatable<T> {\n","\tprivate final List<CollectionValidator<T, ?, ?>> collectionValidators;\n","\n","\tprivate final List<Pair<ConstraintCondition<T>, Validatable<T>>> conditionalValidators;\n","\n","\tprivate final MessageFormatter messageFormatter;\n","\n","\tprivate final String messageKeySeparator;\n","\n","\tprivate final List<ConstraintPredicates<T, ?>> predicatesList;\n","\n","\tprivate final String prefix;\n","\n","\tprivate final boolean failFast;\n","\n","\tprivate final ApplicativeValidator<T> applicativeValidator = Validatable.super.applicative();\n","\n","\tpublic Validator(String messageKeySeparator,\n","\t\t\tList<ConstraintPredicates<T, ?>> predicatesList,\n","\t\t\tList<CollectionValidator<T, ?, ?>> collectionValidators,\n","\t\t\tList<Pair<ConstraintCondition<T>, Validatable<T>>> conditionalValidators,\n","\t\t\tMessageFormatter messageFormatter) {\n","\t\tthis(messageKeySeparator, predicatesList, collectionValidators,\n","\t\t\t\tconditionalValidators, messageFormatter, false);\n","\t}\n","\n","\t/**\n","\t * @since 0.8.0\n","\t */\n","\tpublic Validator(String messageKeySeparator,\n","\t\t\tList<ConstraintPredicates<T, ?>> predicatesList,\n","\t\t\tList<CollectionValidator<T, ?, ?>> collectionValidators,\n","\t\t\tList<Pair<ConstraintCondition<T>, Validatable<T>>> conditionalValidators,\n","\t\t\tMessageFormatter messageFormatter, boolean failFast) {\n","\t\tthis(messageKeySeparator, predicatesList, collectionValidators,\n","\t\t\t\tconditionalValidators, messageFormatter, failFast, \"\");\n","\t}\n","\n","\tprivate Validator(String messageKeySeparator,\n","\t\t\tList<ConstraintPredicates<T, ?>> predicatesList,\n","\t\t\tList<CollectionValidator<T, ?, ?>> collectionValidators,\n","\t\t\tList<Pair<ConstraintCondition<T>, Validatable<T>>> conditionalValidators,\n","\t\t\tMessageFormatter messageFormatter, boolean failFast, String prefix) {\n","\t\tthis.messageKeySeparator = messageKeySeparator;\n","\t\tthis.predicatesList = Collections.unmodifiableList(predicatesList);\n","\t\tthis.collectionValidators = Collections.unmodifiableList(collectionValidators);\n","\t\tthis.conditionalValidators = Collections.unmodifiableList(conditionalValidators);\n","\t\tthis.messageFormatter = messageFormatter;\n","\t\tthis.failFast = failFast;\n","\t\tthis.prefix = (prefix == null || prefix.isEmpty()\n","\t\t\t\t|| prefix.endsWith(this.messageKeySeparator)) ? prefix\n","\t\t\t\t\t\t: prefix + this.messageKeySeparator;\n","\t}\n","\n","\tpublic Validator<T> prefixed(String prefix) {\n","\t\treturn new Validator<>(this.messageKeySeparator, this.predicatesList,\n","\t\t\t\tthis.collectionValidators, this.conditionalValidators,\n","\t\t\t\tthis.messageFormatter, this.failFast, prefix);\n","\t}\n","\n","\t/**\n","\t * Set whether to enable fail fast mode. If enabled, Validator returns from the\n","\t * current validation as soon as the first constraint violation occurs.\n","\t *\n","\t * @param failFast whether to enable fail fast mode\n","\t * @since 0.8.0\n","\t */\n","\t@Override\n","\tpublic Validator<T> failFast(boolean failFast) {\n","\t\treturn new Validator<>(this.messageKeySeparator, this.predicatesList,\n","\t\t\t\tthis.collectionValidators, this.conditionalValidators,\n","\t\t\t\tthis.messageFormatter, failFast, this.prefix);\n","\t}\n","\n","\t@Override\n","\tpublic boolean isFailFast() {\n","\t\treturn failFast;\n","\t}\n","\n","\t/**\n","\t * This method is supposed to be used only internally.\n","\t *\n","\t * @param action callback per <code>ConstraintPredicates</code>.\n","\t */\n","\tpublic void forEachPredicates(Consumer<ConstraintPredicates<T, ?>> action) {\n","\t\tthis.predicatesList.forEach(action);\n","\t}\n","\n","\t/**\n","\t * This method is supposed to be used only internally.\n","\t *\n","\t * @param action callback per <code>CollectionValidator</code>.\n","\t */\n","\tpublic void forEachCollectionValidator(\n","\t\t\tConsumer<CollectionValidator<T, ?, ?>> action) {\n","\t\tthis.collectionValidators.forEach(action);\n","\t}\n","\n","\t/**\n","\t * This method is supposed to be used only internally.\n","\t *\n","\t * @param action callback per\n","\t *     {@code Pair&lt;ConstraintCondition&lt;T&gt;, Validator&lt;T&gt;&gt;}.\n","\t */\n","\tpublic void forEachConditionalValidator(\n","\t\t\tConsumer<Pair<ConstraintCondition<T>, Validatable<T>>> action) {\n","\t\tthis.conditionalValidators.forEach(action);\n","\t}\n","\n","\t@Override\n","\tpublic ConstraintViolations validate(T target, Locale locale,\n","\t\t\tConstraintContext constraintContext) {\n","\t\treturn this.validate(target, \"\", -1, locale, constraintContext);\n","\t}\n","\n","\t@Override\n","\tpublic ApplicativeValidator<T> applicative() {\n","\t\treturn this.applicativeValidator;\n","\t}\n","\n","\tprivate String indexedName(String name, String collectionName, int index) {\n","\t\tif (index < 0) {\n","\t\t\treturn name;\n","\t\t}\n","\t\tif (name.isEmpty()) {\n","\t\t\treturn collectionName + \"[\" + index + \"]\";\n","\t\t}\n","\t\treturn collectionName + \"[\" + index + \"]\" + this.messageKeySeparator + name;\n","\t}\n","\n","\tprivate Object[] pad(String name, Object[] args, ViolatedValue violatedValue) {\n","\t\tObject[] pad = new Object[args.length + 2];\n","\t\tpad[0] = name;\n","\t\tSystem.arraycopy(args, 0, pad, 1, args.length);\n","\t\tpad[pad.length - 1] = violatedValue.value();\n","\t\treturn pad;\n","\t}\n","\n","\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n","\tprivate ConstraintViolations validate(T target, String collectionName, int index,\n","\t\t\tLocale locale, ConstraintContext constraintContext) {\n","\t\tif (target == null) {\n","\t\t\tthrow new IllegalArgumentException(\"target must not be null\");\n","\t\t}\n","\t\tfinal ConstraintViolations violations = new ConstraintViolations();\n","\t\tfor (ConstraintPredicates<T, ?> predicates : this.predicatesList) {\n","\t\t\tif (predicates instanceof NestedConstraintPredicates) {\n","\t\t\t\tfinal NestedConstraintPredicates<T, ?, ?> nested = (NestedConstraintPredicates<T, ?, ?>) predicates;\n","\t\t\t\tfinal Object nestedValue = nested.nestedValue(target);\n","\t\t\t\tif (nestedValue == null) {\n","\t\t\t\t\tcontinue;\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\tfor (ConstraintPredicate<?> constraintPredicate : predicates.predicates()) {\n","\t\t\t\tfinal Object v = predicates.toValue().apply(target);\n","\t\t\t\tif (v == null && constraintPredicate.nullValidity().skipNull()) {\n","\t\t\t\t\tcontinue;\n","\t\t\t\t}\n","\t\t\t\tfinal Optional<ViolatedValue> violated = ((ConstraintPredicate) constraintPredicate)\n","\t\t\t\t\t\t.violatedValue(v);\n","\t\t\t\tif (violated.isPresent()) {\n","\t\t\t\t\tfinal ViolatedValue violatedValue = violated.get();\n","\t\t\t\t\tfinal String name = this.prefix\n","\t\t\t\t\t\t\t+ this.indexedName(predicates.name(), collectionName, index);\n","\t\t\t\t\tfinal Supplier<Object[]> argsSupplier = constraintPredicate.args();\n","\t\t\t\t\tfinal Object[] args = (argsSupplier instanceof ViolatedArguments)\n","\t\t\t\t\t\t\t? ((ViolatedArguments) argsSupplier)\n","\t\t\t\t\t\t\t\t\t.arguments(violatedValue.value())\n","\t\t\t\t\t\t\t: argsSupplier.get();\n","\t\t\t\t\tviolations.add(new ConstraintViolation(name,\n","\t\t\t\t\t\t\tconstraintPredicate.messageKey(),\n","\t\t\t\t\t\t\tconstraintPredicate.defaultMessageFormat(),\n","\t\t\t\t\t\t\tpad(name, args, violatedValue), this.messageFormatter,\n","\t\t\t\t\t\t\tlocale));\n","\t\t\t\t\tif (this.failFast\n","\t\t\t\t\t\t\t|| ((predicates instanceof NestedConstraintPredicates)\n","\t\t\t\t\t\t\t\t\t&& ((NestedConstraintPredicates) predicates)\n","\t\t\t\t\t\t\t\t\t\t\t.isFailFast())) {\n","\t\t\t\t\t\treturn violations;\n","\t\t\t\t\t}\n","\t\t\t\t}\n","\t\t\t}\n","\t\t}\n","\t\tfor (CollectionValidator<T, ?, ?> collectionValidator : this.collectionValidators) {\n","\t\t\tfinal Collection collection = collectionValidator.toCollection()\n","\t\t\t\t\t.apply(target);\n","\t\t\tif (collection != null) {\n","\t\t\t\tfinal Validator validator = this.failFast\n","\t\t\t\t\t\t? collectionValidator.validator().failFast(true)\n","\t\t\t\t\t\t: collectionValidator.validator();\n","\t\t\t\tint i = 0;\n","\t\t\t\tfor (Object element : collection) {\n","\t\t\t\t\tfinal String nestedName = this.indexedName(collectionValidator.name(),\n","\t\t\t\t\t\t\tcollectionName, index);\n","\t\t\t\t\tif (element != null) {\n","\t\t\t\t\t\tfinal ConstraintViolations v = validator.validate(element,\n","\t\t\t\t\t\t\t\tnestedName, i++, locale, constraintContext);\n","\t\t\t\t\t\tviolations.addAll(v);\n","\t\t\t\t\t}\n","\t\t\t\t\telse {\n","\t\t\t\t\t\tfinal String name = this.indexedName(\"\", nestedName, i++);\n","\t\t\t\t\t\tfinal ConstraintViolation v = notNullViolation(name, locale);\n","\t\t\t\t\t\tviolations.add(v);\n","\t\t\t\t\t}\n","\t\t\t\t\tif (!violations.isEmpty()\n","\t\t\t\t\t\t\t&& (this.failFast || validator.isFailFast())) {\n","\t\t\t\t\t\treturn violations;\n","\t\t\t\t\t}\n","\t\t\t\t}\n","\t\t\t}\n","\t\t}\n","\t\tfor (Pair<ConstraintCondition<T>, Validatable<T>> pair : this.conditionalValidators) {\n","\t\t\tfinal ConstraintCondition<T> condition = pair.first();\n","\t\t\tif (condition.test(target, constraintContext)) {\n","\t\t\t\tfinal Validatable<T> validator = this.failFast\n","\t\t\t\t\t\t? pair.second().failFast(true)\n","\t\t\t\t\t\t: pair.second();\n","\t\t\t\tfinal ConstraintViolations constraintViolations = validator\n","\t\t\t\t\t\t.validate(target, locale, constraintContext);\n","\t\t\t\tfor (ConstraintViolation violation : constraintViolations) {\n","\t\t\t\t\tfinal ConstraintViolation renamed = violation\n","\t\t\t\t\t\t\t.rename(name -> this.prefix\n","\t\t\t\t\t\t\t\t\t+ this.indexedName(name, collectionName, index));\n","\t\t\t\t\tviolations.add(renamed);\n","\t\t\t\t\tif (!violations.isEmpty()\n","\t\t\t\t\t\t\t&& (this.failFast || validator.isFailFast())) {\n","\t\t\t\t\t\treturn violations;\n","\t\t\t\t\t}\n","\t\t\t\t}\n","\t\t\t}\n","\t\t}\n","\t\treturn violations;\n","\t}\n","\n","\tprivate ConstraintViolation notNullViolation(String name, Locale locale) {\n","\t\treturn new ConstraintViolation(name, OBJECT_NOT_NULL.messageKey(),\n","\t\t\t\tOBJECT_NOT_NULL.defaultMessageFormat(),\n","\t\t\t\tpad(name, new Object[] {}, new ViolatedValue(null)),\n","\t\t\t\tthis.messageFormatter, locale);\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.time.LocalDateTime;\n","import java.time.LocalTime;\n","import java.util.Arrays;\n","import java.util.HashSet;\n","import java.util.List;\n","import java.util.Set;\n","\n","import am.ik.yavi.CalendarEntryLocalDateTime;\n","import am.ik.yavi.CalendarEntryLocalTime;\n","import am.ik.yavi.ConstraintViolationsException;\n","import am.ik.yavi.Range;\n","import am.ik.yavi.User;\n","import am.ik.yavi.builder.ValidatorBuilder;\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","import am.ik.yavi.constraint.charsequence.CodePoints;\n","import am.ik.yavi.constraint.charsequence.CodePoints.CodePointsRanges;\n","import am.ik.yavi.constraint.charsequence.CodePoints.CodePointsSet;\n","import org.junit.jupiter.api.Test;\n","\n","import static am.ik.yavi.constraint.charsequence.variant.IdeographicVariationSequence.IGNORE;\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.Assertions.fail;\n","\n","class ValidatorTest {\n","\t@Test\n","\tvoid allInvalid() throws Exception {\n","\t\tUser user = new User(\"\", \"example.com\", 300);\n","\t\tuser.setEnabled(false);\n","\t\tValidator<User> validator = validator();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(4);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"name\\\" must be greater than or equal to 1. The given size is 0\");\n","\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t.isEqualTo(\"container.greaterThanOrEqual\");\n","\t\tassertThat(violations.get(1).message())\n","\t\t\t\t.isEqualTo(\"\\\"email\\\" must be a valid email address\");\n","\t\tassertThat(violations.get(1).messageKey()).isEqualTo(\"charSequence.email\");\n","\t\tassertThat(violations.get(2).message())\n","\t\t\t\t.isEqualTo(\"\\\"age\\\" must be less than or equal to 200\");\n","\t\tassertThat(violations.get(2).messageKey()).isEqualTo(\"numeric.lessThanOrEqual\");\n","\t\tassertThat(violations.get(3).message()).isEqualTo(\"\\\"enabled\\\" must be true\");\n","\t\tassertThat(violations.get(3).messageKey()).isEqualTo(\"boolean.isTrue\");\n","\t}\n","\n","\t@Test\n","\tvoid codePointsAllIncludedRange() throws Exception {\n","\t\tCodePointsRanges<String> whiteList = () -> Arrays.asList(\n","\t\t\t\tCodePoints.Range.of(0x0041 /* A */, 0x005A /* Z */),\n","\t\t\t\tCodePoints.Range.of(0x0061 /* a */, 0x007A /* z */));\n","\n","\t\tUser user = new User(\"abc@b.c\", null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.codePoints(whiteList).asWhiteList())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"[@, .]\\\" is/are not allowed for \\\"name\\\"\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"codePoints.asWhiteList\");\n","\t}\n","\n","\t@Test\n","\tvoid codePointsAllIncludedRangeBeginToEnd() throws Exception {\n","\t\tUser user = new User(\"abc@b.c\", null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.codePoints(0x0041 /* A */, 0x007A /* z */).asWhiteList())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"[@, .]\\\" is/are not allowed for \\\"name\\\"\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"codePoints.asWhiteList\");\n","\t}\n","\n","\t@Test\n","\tvoid codePointsAllIncludedRangeRange() throws Exception {\n","\t\tUser user = new User(\"abc@b.c\", null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\", c -> c\n","\t\t\t\t\t\t.codePoints(CodePoints.Range.of(0x0041 /* A */, 0x005A /* Z */),\n","\t\t\t\t\t\t\t\tCodePoints.Range.of(0x0061 /* a */, 0x007A /* z */))\n","\t\t\t\t\t\t.asWhiteList())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"[@, .]\\\" is/are not allowed for \\\"name\\\"\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"codePoints.asWhiteList\");\n","\t}\n","\n","\t@Test\n","\tvoid codePointsAllIncludedSet() throws Exception {\n","\t\tCodePointsSet<String> whiteList = () -> new HashSet<>(\n","\t\t\t\tArrays.asList(0x0041 /* A */, 0x0042 /* B */, 0x0043 /* C */,\n","\t\t\t\t\t\t0x0044 /* D */, 0x0045 /* E */, 0x0046 /* F */, 0x0047 /* G */,\n","\t\t\t\t\t\t0x0048 /* H */, 0x0049 /* I */, 0x004A /* J */, 0x004B /* K */,\n","\t\t\t\t\t\t0x004C /* L */, 0x004D /* M */, 0x004E /* N */, 0x004F /* O */,\n","\t\t\t\t\t\t0x0050 /* P */, 0x0051 /* Q */, 0x0052 /* R */, 0x0053 /* S */,\n","\t\t\t\t\t\t0x0054 /* T */, 0x0055 /* U */, 0x0056 /* V */, 0x0057 /* W */,\n","\t\t\t\t\t\t0x0058 /* X */, 0x0059 /* Y */, 0x005A /* Z */, //\n","\t\t\t\t\t\t0x0061 /* a */, 0x0062 /* b */, 0x0063 /* c */, 0x0064 /* d */,\n","\t\t\t\t\t\t0x0065 /* e */, 0x0066 /* f */, 0x0067 /* g */, 0x0068 /* h */,\n","\t\t\t\t\t\t0x0069 /* i */, 0x006A /* j */, 0x006B /* k */, 0x006C /* l */,\n","\t\t\t\t\t\t0x006D /* m */, 0x006E /* n */, 0x006F /* o */, 0x0070 /* p */,\n","\t\t\t\t\t\t0x0071 /* q */, 0x0072 /* r */, 0x0073 /* s */, 0x0074 /* t */,\n","\t\t\t\t\t\t0x0075 /* u */, 0x0076 /* v */, 0x0077 /* w */, 0x0078 /* x */,\n","\t\t\t\t\t\t0x0079 /* y */, 0x007A /* z */));\n","\n","\t\tUser user = new User(\"abc@b.c\", null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.codePoints(whiteList).asWhiteList())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"[@, .]\\\" is/are not allowed for \\\"name\\\"\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"codePoints.asWhiteList\");\n","\t}\n","\n","\t@Test\n","\tvoid codePointsAllIncludedSetSet() throws Exception {\n","\t\tSet<Integer> whiteList = new HashSet<>(\n","\t\t\t\tArrays.asList(0x0041 /* A */, 0x0042 /* B */, 0x0043 /* C */,\n","\t\t\t\t\t\t0x0044 /* D */, 0x0045 /* E */, 0x0046 /* F */, 0x0047 /* G */,\n","\t\t\t\t\t\t0x0048 /* H */, 0x0049 /* I */, 0x004A /* J */, 0x004B /* K */,\n","\t\t\t\t\t\t0x004C /* L */, 0x004D /* M */, 0x004E /* N */, 0x004F /* O */,\n","\t\t\t\t\t\t0x0050 /* P */, 0x0051 /* Q */, 0x0052 /* R */, 0x0053 /* S */,\n","\t\t\t\t\t\t0x0054 /* T */, 0x0055 /* U */, 0x0056 /* V */, 0x0057 /* W */,\n","\t\t\t\t\t\t0x0058 /* X */, 0x0059 /* Y */, 0x005A /* Z */, //\n","\t\t\t\t\t\t0x0061 /* a */, 0x0062 /* b */, 0x0063 /* c */, 0x0064 /* d */,\n","\t\t\t\t\t\t0x0065 /* e */, 0x0066 /* f */, 0x0067 /* g */, 0x0068 /* h */,\n","\t\t\t\t\t\t0x0069 /* i */, 0x006A /* j */, 0x006B /* k */, 0x006C /* l */,\n","\t\t\t\t\t\t0x006D /* m */, 0x006E /* n */, 0x006F /* o */, 0x0070 /* p */,\n","\t\t\t\t\t\t0x0071 /* q */, 0x0072 /* r */, 0x0073 /* s */, 0x0074 /* t */,\n","\t\t\t\t\t\t0x0075 /* u */, 0x0076 /* v */, 0x0077 /* w */, 0x0078 /* x */,\n","\t\t\t\t\t\t0x0079 /* y */, 0x007A /* z */));\n","\n","\t\tUser user = new User(\"abc@b.c\", null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.codePoints(whiteList).asWhiteList())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"[@, .]\\\" is/are not allowed for \\\"name\\\"\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"codePoints.asWhiteList\");\n","\t}\n","\n","\t@Test\n","\tvoid codePointsNotIncludedRange() throws Exception {\n","\t\tCodePointsRanges<String> blackList = () -> Arrays.asList(\n","\t\t\t\tCodePoints.Range.of(0x0041 /* A */, 0x0042 /* B */),\n","\t\t\t\tCodePoints.Range.of(0x0061 /* a */, 0x0062 /* b */));\n","\n","\t\tUser user = new User(\"abcA@Bb.c\", null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.codePoints(blackList).asBlackList())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"[a, b, A, B]\\\" is/are not allowed for \\\"name\\\"\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"codePoints.asBlackList\");\n","\t}\n","\n","\t@Test\n","\tvoid codePointsNotIncludedSet() throws Exception {\n","\t\tCodePointsSet<String> blackList = () -> new HashSet<>(\n","\t\t\t\tArrays.asList(0x0061 /* a */, 0x0062 /* b */));\n","\n","\t\tUser user = new User(\"abcA@Bb.c\", null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.codePoints(blackList).asBlackList())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"[a, b]\\\" is/are not allowed for \\\"name\\\"\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"codePoints.asBlackList\");\n","\t}\n","\n","\t@Test\n","\tvoid combiningCharacterByteSizeInValid() throws Exception {\n","\t\tUser user = new User(\"モジ\" /* モシ\\u3099 */, null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.lessThanOrEqual(2).asByteArray().lessThanOrEqual(6))\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The byte size of \\\"name\\\" must be less than or equal to 6. The given size is 9\");\n","\t}\n","\n","\t@Test\n","\tvoid combiningCharacterSizeAndByteSizeInValid() throws Exception {\n","\t\tUser user = new User(\"モジ\" /* モシ\\u3099 */, null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.lessThanOrEqual(1).asByteArray().lessThanOrEqual(3))\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(2);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"name\\\" must be less than or equal to 1. The given size is 2\");\n","\t\tassertThat(violations.get(1).message()).isEqualTo(\n","\t\t\t\t\"The byte size of \\\"name\\\" must be less than or equal to 3. The given size is 9\");\n","\t}\n","\n","\t@Test\n","\tvoid combiningCharacterValid() throws Exception {\n","\t\tUser user = new User(\"モジ\" /* モシ\\u3099 */, null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.fixedSize(2).asByteArray().fixedSize(9))\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid condition() {\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class) //\n","\t\t\t\t.constraintOnCondition((u, cg) -> !u.getName().isEmpty(), //\n","\t\t\t\t\t\tb -> b.constraint(User::getEmail, \"email\",\n","\t\t\t\t\t\t\t\tc -> c.email().notEmpty()))\n","\t\t\t\t.build();\n","\t\t{\n","\t\t\tUser user = new User(\"\", \"\", -1);\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isTrue();\n","\t\t}\n","\t\t{\n","\t\t\tUser user = new User(\"foobar\", \"\", -1);\n","\t\t\tConstraintViolations violations = validator.validate(user, Group.UPDATE);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message())\n","\t\t\t\t\t.isEqualTo(\"\\\"email\\\" must not be empty\");\n","\t\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"container.notEmpty\");\n","\t\t}\n","\t}\n","\n","\t@Test\n","\tvoid constraintOnTarget() {\n","\t\tValidator<Range> validator = ValidatorBuilder.of(Range.class) //\n","\t\t\t\t.constraintOnTarget(Range::isToGreaterThanFrom, \"to\",\n","\t\t\t\t\t\t\"to.isGreaterThanFrom\", \"\\\"to\\\" must be greater than \\\"from\\\".\") //\n","\t\t\t\t.build();\n","\t\t{\n","\t\t\tRange range = new Range(1, 10);\n","\t\t\tConstraintViolations violations = validator.validate(range);\n","\t\t\tassertThat(violations.isValid()).isTrue();\n","\t\t}\n","\t\t{\n","\t\t\tRange range = new Range(10, 1);\n","\t\t\tConstraintViolations violations = validator.validate(range);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message())\n","\t\t\t\t\t.isEqualTo(\"\\\"to\\\" must be greater than \\\"from\\\".\");\n","\t\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"to.isGreaterThanFrom\");\n","\t\t}\n","\t}\n","\n","\t@Test\n","\tvoid customMessageFormatter() throws Exception {\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.messageFormatter((messageKey, defaultMessageFormat, args,\n","\t\t\t\t\t\tlocale) -> args[0].toString().toUpperCase() + \".\"\n","\t\t\t\t\t\t\t\t+ messageKey.toUpperCase())\n","\t\t\t\t.constraint(User::getAge, \"age\", c -> c.notNull() //\n","\t\t\t\t\t\t.greaterThanOrEqual(0) //\n","\t\t\t\t\t\t.lessThanOrEqual(20))\n","\t\t\t\t.build();\n","\t\tUser user = new User(\"foo\", \"foo@example.com\", 30);\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\"AGE.NUMERIC.LESSTHANOREQUAL\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"numeric.lessThanOrEqual\");\n","\t}\n","\n","\t@Test\n","\tvoid details() throws Exception {\n","\t\tUser user = new User(\"\", \"example.com\", 300);\n","\t\tValidator<User> validator = validator();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tList<ViolationDetail> details = violations.details();\n","\t\tassertThat(details.size()).isEqualTo(3);\n","\t\tassertThat(details.get(0).getDefaultMessage()).isEqualTo(\n","\t\t\t\t\"The size of \\\"name\\\" must be greater than or equal to 1. The given size is 0\");\n","\t\tassertThat(details.get(0).getKey()).isEqualTo(\"container.greaterThanOrEqual\");\n","\t\tassertThat(details.get(0).getArgs()).containsExactly(\"name\", 1, 0);\n","\t\tassertThat(details.get(1).getDefaultMessage())\n","\t\t\t\t.isEqualTo(\"\\\"email\\\" must be a valid email address\");\n","\t\tassertThat(details.get(1).getKey()).isEqualTo(\"charSequence.email\");\n","\t\tassertThat(details.get(1).getArgs()).containsExactly(\"email\", \"example.com\");\n","\t\tassertThat(details.get(2).getDefaultMessage())\n","\t\t\t\t.isEqualTo(\"\\\"age\\\" must be less than or equal to 200\");\n","\t\tassertThat(details.get(2).getKey()).isEqualTo(\"numeric.lessThanOrEqual\");\n","\t\tassertThat(details.get(2).getArgs()).containsExactly(\"age\", 200, 300);\n","\t}\n","\n","\t@Test\n","\tvoid emojiInValid() throws Exception {\n","\t\tUser user = new User(\"I❤️☕️\", null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\", c -> c.emoji().greaterThan(3)).build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"name\\\" must be greater than 3. The given size is 3\");\n","\t}\n","\n","\t@Test\n","\tvoid emojiValid() throws Exception {\n","\t\tUser user = new User(\"I❤️☕️\", null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\", c -> c.emoji().lessThanOrEqual(3))\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid group() {\n","\t\tUser user = new User(\"foobar\", \"foo@example.com\", -1);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class) //\n","\t\t\t\t.constraintOnCondition(Group.UPDATE.toCondition(), //\n","\t\t\t\t\t\tb -> b.constraint(User::getName, \"name\",\n","\t\t\t\t\t\t\t\tc -> c.lessThanOrEqual(5)))\n","\t\t\t\t.build();\n","\t\t{\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isTrue();\n","\t\t}\n","\t\t{\n","\t\t\tConstraintViolations violations = validator.validate(user, Group.UPDATE);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\t\"The size of \\\"name\\\" must be less than or equal to 5. The given size is 6\");\n","\t\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t\t.isEqualTo(\"container.lessThanOrEqual\");\n","\t\t}\n","\t}\n","\n","\t@Test\n","\tvoid groupConditionByGroup() {\n","\t\tUser user = new User(\"foobar\", \"foo@example.com\", -1);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class) //\n","\t\t\t\t.constraintOnCondition(\n","\t\t\t\t\t\t(u, cg) -> cg == Group.UPDATE || cg == Group.DELETE, //\n","\t\t\t\t\t\tb -> b.constraint(User::getName, \"name\",\n","\t\t\t\t\t\t\t\tc -> c.lessThanOrEqual(5)))\n","\t\t\t\t.build();\n","\t\t{\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isTrue();\n","\t\t}\n","\t\t{\n","\t\t\tConstraintViolations violations = validator.validate(user, Group.UPDATE);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\t\"The size of \\\"name\\\" must be less than or equal to 5. The given size is 6\");\n","\t\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t\t.isEqualTo(\"container.lessThanOrEqual\");\n","\t\t}\n","\t\t{\n","\t\t\tConstraintViolations violations = validator.validate(user, Group.DELETE);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\t\"The size of \\\"name\\\" must be less than or equal to 5. The given size is 6\");\n","\t\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t\t.isEqualTo(\"container.lessThanOrEqual\");\n","\t\t}\n","\t}\n","\n","\t@Test\n","\tvoid groupTwoCondition() {\n","\t\tUser user = new User(\"foobar\", \"foo@example.com\", -1);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class) //\n","\t\t\t\t.constraintOnGroup(Group.UPDATE, //\n","\t\t\t\t\t\tb -> b.constraint(User::getName, \"name\",\n","\t\t\t\t\t\t\t\tc -> c.lessThanOrEqual(5)))\n","\t\t\t\t.constraintOnGroup(Group.DELETE, //\n","\t\t\t\t\t\tb -> b.constraint(User::getName, \"name\",\n","\t\t\t\t\t\t\t\tc -> c.greaterThanOrEqual(5)))\n","\t\t\t\t.build();\n","\t\t{\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isTrue();\n","\t\t}\n","\t\t{\n","\t\t\tConstraintViolations violations = validator.validate(user, Group.UPDATE);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\t\"The size of \\\"name\\\" must be less than or equal to 5. The given size is 6\");\n","\t\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t\t.isEqualTo(\"container.lessThanOrEqual\");\n","\t\t}\n","\t\t{\n","\t\t\tConstraintViolations violations = validator.validate(user, Group.DELETE);\n","\t\t\tassertThat(violations.isValid()).isTrue();\n","\t\t}\n","\t}\n","\n","\t@Test\n","\tvoid ivsByteSizeInValid() throws Exception {\n","\t\tUser user = new User(\"葛󠄁飾区\" /* 葛\\uDB40\\uDD01飾区 */, null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.variant(opts -> opts.ivs(IGNORE)).lessThanOrEqual(3)\n","\t\t\t\t\t\t\t\t.asByteArray().lessThanOrEqual(12))\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The byte size of \\\"name\\\" must be less than or equal to 12. The given size is 13\");\n","\t}\n","\n","\t@Test\n","\tvoid ivsInValid() throws Exception {\n","\t\tUser user = new User(\"葛󠄁飾区\" /* 葛\\uDB40\\uDD01飾区 */, null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.fixedSize(3).asByteArray().fixedSize(13))\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"The size of \\\"name\\\" must be 3. The given size is 4\");\n","\t}\n","\n","\t@Test\n","\tvoid ivsSizeAndByteSizeInValid() throws Exception {\n","\t\tUser user = new User(\"葛󠄁飾区\" /* 葛\\uDB40\\uDD01飾区 */, null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.lessThanOrEqual(3).asByteArray().lessThanOrEqual(12))\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(2);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"name\\\" must be less than or equal to 3. The given size is 4\");\n","\t\tassertThat(violations.get(1).message()).isEqualTo(\n","\t\t\t\t\"The byte size of \\\"name\\\" must be less than or equal to 12. The given size is 13\");\n","\t}\n","\n","\t@Test\n","\tvoid ivsValid() throws Exception {\n","\t\tUser user = new User(\"葛󠄁飾区\" /* 葛\\uDB40\\uDD01飾区 */, null, null);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class)\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.variant(opts -> opts.ivs(IGNORE)).fixedSize(3)\n","\t\t\t\t\t\t\t\t.asByteArray().fixedSize(13))\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tviolations.forEach(x -> System.out.println(x.message()));\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid multipleViolationOnOneProperty() throws Exception {\n","\t\tUser user = new User(\"foo\", \"aa\", 200);\n","\t\tValidator<User> validator = validator();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(2);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"email\\\" must be greater than or equal to 5. The given size is 2\");\n","\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t.isEqualTo(\"container.greaterThanOrEqual\");\n","\t\tassertThat(violations.get(1).message())\n","\t\t\t\t.isEqualTo(\"\\\"email\\\" must be a valid email address\");\n","\t\tassertThat(violations.get(1).messageKey()).isEqualTo(\"charSequence.email\");\n","\t}\n","\n","\t@Test\n","\tvoid nullValues() throws Exception {\n","\t\tUser user = new User(null, null, null);\n","\t\tValidator<User> validator = validator();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(3);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\"\\\"name\\\" must not be null\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"object.notNull\");\n","\t\tassertThat(violations.get(1).message()).isEqualTo(\"\\\"email\\\" must not be null\");\n","\t\tassertThat(violations.get(1).messageKey()).isEqualTo(\"object.notNull\");\n","\t\tassertThat(violations.get(2).message()).isEqualTo(\"\\\"age\\\" must not be null\");\n","\t\tassertThat(violations.get(2).messageKey()).isEqualTo(\"object.notNull\");\n","\t}\n","\n","\t@Test\n","\tvoid overrideMessage() {\n","\t\tValidator<User> validator = ValidatorBuilder.<User> of() //\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.notNull().message(\"name is required!\") //\n","\t\t\t\t\t\t\t\t.greaterThanOrEqual(1).message(\"name is too small!\") //\n","\t\t\t\t\t\t\t\t.lessThanOrEqual(20).message(\"name is too large!\")) //\n","\t\t\t\t.build();\n","\n","\t\t{\n","\t\t\tUser user = new User(null, \"a@b.c\", 10);\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\"name is required!\");\n","\t\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"object.notNull\");\n","\t\t}\n","\t\t{\n","\t\t\tUser user = new User(\"\", \"a@b.c\", 10);\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\"name is too small!\");\n","\t\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t\t.isEqualTo(\"container.greaterThanOrEqual\");\n","\t\t}\n","\t\t{\n","\t\t\tUser user = new User(\"012345678901234567890\", \"a@b.c\", 10);\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\"name is too large!\");\n","\t\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t\t.isEqualTo(\"container.lessThanOrEqual\");\n","\t\t}\n","\t}\n","\n","\t@Test\n","\tvoid overrideViolationMessage() {\n","\t\tValidator<User> validator = ValidatorBuilder.<User> of() //\n","\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\tc -> c.notNull()\n","\t\t\t\t\t\t\t\t.message(ViolationMessage.of(\"a\", \"name is required!\")) //\n","\t\t\t\t\t\t\t\t.greaterThanOrEqual(1)\n","\t\t\t\t\t\t\t\t.message(ViolationMessage.of(\"b\", \"name is too small!\")) //\n","\t\t\t\t\t\t\t\t.lessThanOrEqual(20)\n","\t\t\t\t\t\t\t\t.message(ViolationMessage.of(\"c\", \"name is too large!\"))) //\n","\t\t\t\t.build();\n","\n","\t\t{\n","\t\t\tUser user = new User(null, \"a@b.c\", 10);\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\"name is required!\");\n","\t\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"a\");\n","\t\t}\n","\t\t{\n","\t\t\tUser user = new User(\"\", \"a@b.c\", 10);\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\"name is too small!\");\n","\t\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"b\");\n","\t\t}\n","\t\t{\n","\t\t\tUser user = new User(\"012345678901234567890\", \"a@b.c\", 10);\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\"name is too large!\");\n","\t\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"c\");\n","\t\t}\n","\t}\n","\n","\t@Test\n","\tvoid throwIfInValidInValid() throws Exception {\n","\t\tUser user = new User(\"foo\", \"foo@example.com\", -1);\n","\t\ttry {\n","\t\t\tvalidator().validate(user).throwIfInvalid(ConstraintViolationsException::new);\n","\t\t\tfail(\"fail\");\n","\t\t}\n","\t\tcatch (ConstraintViolationsException e) {\n","\t\t\tConstraintViolations violations = e.getViolations();\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message())\n","\t\t\t\t\t.isEqualTo(\"\\\"age\\\" must be greater than or equal to 0\");\n","\t\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t\t.isEqualTo(\"numeric.greaterThanOrEqual\");\n","\t\t}\n","\t}\n","\n","\t@Test\n","\tvoid throwIfInValidValid() throws Exception {\n","\t\tUser user = new User(\"foo\", \"foo@example.com\", 30);\n","\t\tvalidator().validate(user).throwIfInvalid(ConstraintViolationsException::new);\n","\t}\n","\n","\t@Test\n","\tvoid valid() throws Exception {\n","\t\tUser user = new User(\"foo\", \"foo@example.com\", 30);\n","\t\tValidator<User> validator = validator();\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid violateGroupAndDefault() {\n","\t\tUser user = new User(\"foobar\", \"foo@example.com\", -1);\n","\t\tValidator<User> validator = ValidatorBuilder.of(User.class) //\n","\t\t\t\t.constraint(User::getEmail, \"email\", c -> c.email().lessThanOrEqual(10))\n","\t\t\t\t.constraintOnGroup(Group.UPDATE, //\n","\t\t\t\t\t\tb -> b.constraint(User::getName, \"name\",\n","\t\t\t\t\t\t\t\tc -> c.lessThanOrEqual(5)))\n","\t\t\t\t.build();\n","\t\t{\n","\t\t\tConstraintViolations violations = validator.validate(user);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\t\"The size of \\\"email\\\" must be less than or equal to 10. The given size is 15\");\n","\t\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t\t.isEqualTo(\"container.lessThanOrEqual\");\n","\t\t}\n","\t\t{\n","\t\t\tConstraintViolations violations = validator.validate(user, Group.UPDATE);\n","\t\t\tassertThat(violations.isValid()).isFalse();\n","\t\t\tassertThat(violations.size()).isEqualTo(2);\n","\t\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\t\"The size of \\\"email\\\" must be less than or equal to 10. The given size is 15\");\n","\t\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t\t.isEqualTo(\"container.lessThanOrEqual\");\n","\t\t\tassertThat(violations.get(1).message()).isEqualTo(\n","\t\t\t\t\t\"The size of \\\"name\\\" must be less than or equal to 5. The given size is 6\");\n","\t\t\tassertThat(violations.get(1).messageKey())\n","\t\t\t\t\t.isEqualTo(\"container.lessThanOrEqual\");\n","\t\t}\n","\t}\n","\n","\t@Test\n","\tvoid agePositiveValidatorUserValid() {\n","\t\tUser user = new User(\"Diego\", \"foo@bar.com\", 10);\n","\n","\t\tValidator<User> validator = ValidatorBuilder.<User> of()\n","\t\t\t\t.constraint(User::getAge, \"age\", NumericConstraintBase::positive).build();\n","\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid agePositiveValidatorUserInValid() {\n","\t\tUser user = new User(\"Diego\", \"foo@bar.com\", -1);\n","\n","\t\tValidator<User> validator = ValidatorBuilder.<User> of()\n","\t\t\t\t.constraint(User::getAge, \"age\", NumericConstraintBase::positive).build();\n","\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\"\\\"age\\\" must be positive\");\n","\t}\n","\n","\t@Test\n","\tvoid ageNegativeValidatorUserValid() {\n","\t\tUser user = new User(\"Diego\", \"foo@bar.com\", -1);\n","\n","\t\tValidator<User> validator = ValidatorBuilder.<User> of()\n","\t\t\t\t.constraint(User::getAge, \"age\", NumericConstraintBase::negative).build();\n","\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid ageNegativeValidatorUserInValid() {\n","\t\tUser user = new User(\"Diego\", \"foo@bar.com\", 10);\n","\n","\t\tValidator<User> validator = ValidatorBuilder.<User> of()\n","\t\t\t\t.constraint(User::getAge, \"age\", NumericConstraintBase::negative).build();\n","\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\"\\\"age\\\" must be negative\");\n","\t}\n","\n","\t@Test\n","\tvoid calendarDateIsBeforeNowValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"datetime\",\n","\t\t\t\t\t\tc -> c.before(() -> now.plusHours(10)))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid nameStartWithValid() {\n","\t\tUser user = new User(\"Diego Krupitza\", \"foo@bar.com\", 22);\n","\n","\t\tValidator<User> validator = ValidatorBuilder.<User> of()\n","\t\t\t\t.constraint(User::getName, \"name\", c -> c.startsWith(\"Diego\")).build();\n","\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid calendarDateIsBeforeNowInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"datetime\",\n","\t\t\t\t\t\tc -> c.before(() -> now.minusHours(10)))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"datetime\\\" has to be before \" + now.minusHours(10));\n","\t}\n","\n","\t@Test\n","\tvoid calendarDateIsAfterNowInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"datetime\",\n","\t\t\t\t\t\tc -> c.after(() -> now.plusHours(10)))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"datetime\\\" has to be after \" + now.plusHours(10));\n","\t}\n","\n","\t@Test\n","\tvoid calendarDateIsAfterNowValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"datetime\",\n","\t\t\t\t\t\tc -> c.after(() -> now.minusHours(10)))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid calendarDateIsBetweenNowValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tLocalDateTime before = now.minusHours(10);\n","\t\tLocalDateTime after = now.plusHours(10);\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"datetime\",\n","\t\t\t\t\t\tc -> c.between(() -> before, () -> after))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid nameStartWithInValid() {\n","\t\tUser user = new User(\"NotDiego\", \"foo@bar.com\", 22);\n","\n","\t\tValidator<User> validator = ValidatorBuilder.<User> of()\n","\t\t\t\t.constraint(User::getName, \"name\", c -> c.startsWith(\"Diego\")).build();\n","\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"name\\\" must start with \\\"Diego\\\"\");\n","\t}\n","\n","\t@Test\n","\tvoid nameEndsWithValid() {\n","\t\tUser user = new User(\"Diego Krupitza\", \"foo@bar.com\", 22);\n","\n","\t\tValidator<User> validator = ValidatorBuilder.<User> of()\n","\t\t\t\t.constraint(User::getName, \"name\", c -> c.endsWith(\"Krupitza\")).build();\n","\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid calendarDateIsBetweenNowEqualInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"datetime\",\n","\t\t\t\t\t\tc -> c.between(() -> now, () -> now))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"datetime\\\" has to be between \" + now + \" and \" + now);\n","\t}\n","\n","\t@Test\n","\tvoid calendarDateIsBetweenNowInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tLocalDateTime before = now.plusDays(10);\n","\t\tLocalDateTime after = now.plusDays(20);\n","\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"datetime\",\n","\t\t\t\t\t\tc -> c.between(() -> before, () -> after))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"datetime\\\" has to be between \" + before + \" and \" + after);\n","\t}\n","\n","\t@Test\n","\tvoid nameEndsWithInValid() {\n","\t\tUser user = new User(\"Diego Not\", \"foo@bar.com\", 22);\n","\n","\t\tValidator<User> validator = ValidatorBuilder.<User> of()\n","\t\t\t\t.constraint(User::getName, \"name\", c -> c.endsWith(\"Diego\")).build();\n","\n","\t\tConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"name\\\" must end with \\\"Diego\\\"\");\n","\t}\n","\n","\t@Test\n","\tvoid timeIsBeforeNowValid() {\n","\t\tLocalTime now = LocalTime.of(12, 30);\n","\t\tCalendarEntryLocalTime birthdayPartyEntry = new CalendarEntryLocalTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalTime> of().constraint(CalendarEntryLocalTime::getTime,\n","\t\t\t\t\t\t\"time\", c -> c.before(() -> now.plusHours(10)))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid timeIsBeforeNowInValid() {\n","\t\tLocalTime now = LocalTime.of(12, 30);\n","\t\tCalendarEntryLocalTime birthdayPartyEntry = new CalendarEntryLocalTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalTime> of().constraint(CalendarEntryLocalTime::getTime,\n","\t\t\t\t\t\t\"time\", c -> c.before(() -> now.minusHours(10)))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"time\\\" has to be before \" + now.minusHours(10));\n","\t}\n","\n","\t@Test\n","\tvoid timeIsAfterNowInValid() {\n","\t\tLocalTime now = LocalTime.of(12, 30);\n","\t\tCalendarEntryLocalTime birthdayPartyEntry = new CalendarEntryLocalTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalTime> of().constraint(CalendarEntryLocalTime::getTime,\n","\t\t\t\t\t\t\"time\", c -> c.after(() -> now.plusHours(10)))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.startsWith(\"\\\"time\\\" has to be after \" + now.plusHours(10));\n","\t}\n","\n","\t@Test\n","\tvoid timeIsAfterNowValid() {\n","\t\tLocalTime now = LocalTime.of(12, 30);\n","\t\tCalendarEntryLocalTime birthdayPartyEntry = new CalendarEntryLocalTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalTime> of().constraint(CalendarEntryLocalTime::getTime,\n","\t\t\t\t\t\t\"time\", c -> c.after(() -> now.minusHours(10)))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid timeIsBetweenNowValid() {\n","\t\tLocalTime now = LocalTime.of(12, 30);\n","\t\tLocalTime before = now.minusHours(10);\n","\t\tLocalTime after = now.plusHours(10);\n","\n","\t\tCalendarEntryLocalTime birthdayPartyEntry = new CalendarEntryLocalTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalTime> of().constraint(CalendarEntryLocalTime::getTime,\n","\t\t\t\t\t\t\"time\", c -> c.between(() -> before, () -> after))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid timeIsBetweenNowEqualInValid() {\n","\t\tLocalTime now = LocalTime.of(12, 30);\n","\n","\t\tCalendarEntryLocalTime birthdayPartyEntry = new CalendarEntryLocalTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalTime> of().constraint(CalendarEntryLocalTime::getTime,\n","\t\t\t\t\t\t\"time\", c -> c.between(() -> now, () -> now))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"time\\\" has to be between \" + now + \" and \" + now);\n","\t}\n","\n","\t@Test\n","\tvoid timeIsBetweenNowInValid() {\n","\t\tLocalTime now = LocalTime.of(12, 30);\n","\t\tLocalTime before = now.plusHours(10);\n","\t\tLocalTime after = now.plusHours(10).plusMinutes(1);\n","\n","\t\tCalendarEntryLocalTime birthdayPartyEntry = new CalendarEntryLocalTime(\n","\t\t\t\t\"BirthdayParty\", now);\n","\n","\t\tValidator<CalendarEntryLocalTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalTime> of().constraint(CalendarEntryLocalTime::getTime,\n","\t\t\t\t\t\t\"time\", c -> c.between(() -> before, () -> after))\n","\t\t\t\t.build();\n","\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.startsWith(\"\\\"time\\\" has to be between \" + before + \" and \" + after);\n","\t}\n","\n","\t@Test\n","\tvoid futureValid() {\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", LocalDateTime.now().plusDays(1));\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"dateTime\",\n","\t\t\t\t\t\tc -> c.future())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid futureInValid() {\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", LocalDateTime.now().minusDays(1));\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"dateTime\",\n","\t\t\t\t\t\tc -> c.future())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.startsWith(\"\\\"dateTime\\\" must be a future date\");\n","\t}\n","\n","\t@Test\n","\tvoid pastValid() {\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", LocalDateTime.now().minusDays(1));\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"dateTime\",\n","\t\t\t\t\t\tc -> c.past())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid pastInValid() {\n","\t\tCalendarEntryLocalDateTime birthdayPartyEntry = new CalendarEntryLocalDateTime(\n","\t\t\t\t\"BirthdayParty\", LocalDateTime.now().plusDays(1));\n","\t\tValidator<CalendarEntryLocalDateTime> validator = ValidatorBuilder\n","\t\t\t\t.<CalendarEntryLocalDateTime> of()\n","\t\t\t\t.constraint(CalendarEntryLocalDateTime::getDateTime, \"dateTime\",\n","\t\t\t\t\t\tc -> c.past())\n","\t\t\t\t.build();\n","\t\tConstraintViolations violations = validator.validate(birthdayPartyEntry);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.startsWith(\"\\\"dateTime\\\" must be a past date\");\n","\t}\n","\n","\tValidator<User> validator() {\n","\t\treturn ValidatorBuilder.<User> of() //\n","\t\t\t\t.constraint(User::getName, \"name\", c -> c.notNull() //\n","\t\t\t\t\t\t.greaterThanOrEqual(1) //\n","\t\t\t\t\t\t.lessThanOrEqual(20)) //\n","\t\t\t\t.constraint(User::getEmail, \"email\", c -> c.notNull() //\n","\t\t\t\t\t\t.greaterThanOrEqual(5) //\n","\t\t\t\t\t\t.lessThanOrEqual(50) //\n","\t\t\t\t\t\t.email()) //\n","\t\t\t\t.constraint(User::getAge, \"age\", c -> c.notNull() //\n","\t\t\t\t\t\t.greaterThanOrEqual(0) //\n","\t\t\t\t\t\t.lessThanOrEqual(200)) //\n","\t\t\t\t.constraint(User::isEnabled, \"enabled\", c -> c.isTrue()) //\n","\t\t\t\t.build();\n","\t}\n","}\n"],"method_lines_dic":{"Validator::::prefixed(java.lang.String)":[92,96],"Validator::::failFast(boolean)":[105,110],"Validator::::isFailFast()":[112,115],"Validator::::forEachPredicates(java.util.function.Consumer<am.ik.yavi.core.ConstraintPredicates<T, ?>>)":[122,124],"Validator::::forEachCollectionValidator(java.util.function.Consumer<am.ik.yavi.core.CollectionValidator<T, ?, ?>>)":[131,134],"Validator::::forEachConditionalValidator(java.util.function.Consumer<am.ik.yavi.fn.Pair<am.ik.yavi.core.ConstraintCondition<T>, am.ik.yavi.core.Validatable<T>>>)":[142,145],"Validator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)":[147,151],"Validator::::applicative()":[153,156],"Validator::::indexedName(java.lang.String,java.lang.String,int)":[158,166],"Validator::::pad(java.lang.String,java.lang.Object[],am.ik.yavi.core.ViolatedValue)":[168,174],"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)":[176,270],"Validator::::notNullViolation(java.lang.String,java.util.Locale)":[272,277]},"test_method_lines_dic":{"ValidatorTest::::allInvalid()":[42,62],"ValidatorTest::::codePointsAllIncludedRange()":[64,81],"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()":[83,96],"ValidatorTest::::codePointsAllIncludedRangeRange()":[98,113],"ValidatorTest::::codePointsAllIncludedSet()":[115,144],"ValidatorTest::::codePointsAllIncludedSetSet()":[146,175],"ValidatorTest::::codePointsNotIncludedRange()":[177,194],"ValidatorTest::::codePointsNotIncludedSet()":[196,212],"ValidatorTest::::combiningCharacterByteSizeInValid()":[214,226],"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()":[228,242],"ValidatorTest::::combiningCharacterValid()":[244,253],"ValidatorTest::::condition()":[255,276],"ValidatorTest::::constraintOnTarget()":[278,298],"ValidatorTest::::customMessageFormatter()":[300,316],"ValidatorTest::::details()":[318,338],"ValidatorTest::::emojiInValid()":[340,351],"ValidatorTest::::emojiValid()":[353,361],"ValidatorTest::::group()":[363,384],"ValidatorTest::::groupConditionByGroup()":[386,417],"ValidatorTest::::groupTwoCondition()":[419,447],"ValidatorTest::::ivsByteSizeInValid()":[449,462],"ValidatorTest::::ivsInValid()":[464,476],"ValidatorTest::::ivsSizeAndByteSizeInValid()":[478,492],"ValidatorTest::::ivsValid()":[494,505],"ValidatorTest::::multipleViolationOnOneProperty()":[507,521],"ValidatorTest::::nullValues()":[523,536],"ValidatorTest::::overrideMessage()":[538,573],"ValidatorTest::::overrideViolationMessage()":[575,611],"ValidatorTest::::throwIfInValidInValid()":[613,629],"ValidatorTest::::throwIfInValidValid()":[631,635],"ValidatorTest::::valid()":[637,643],"ValidatorTest::::violateGroupAndDefault()":[645,676],"ValidatorTest::::agePositiveValidatorUserValid()":[678,687],"ValidatorTest::::agePositiveValidatorUserInValid()":[689,700],"ValidatorTest::::ageNegativeValidatorUserValid()":[702,711],"ValidatorTest::::ageNegativeValidatorUserInValid()":[713,724],"ValidatorTest::::calendarDateIsBeforeNowValid()":[726,740],"ValidatorTest::::nameStartWithValid()":[742,751],"ValidatorTest::::calendarDateIsBeforeNowInValid()":[753,770],"ValidatorTest::::calendarDateIsAfterNowInValid()":[772,789],"ValidatorTest::::calendarDateIsAfterNowValid()":[791,805],"ValidatorTest::::calendarDateIsBetweenNowValid()":[807,823],"ValidatorTest::::nameStartWithInValid()":[825,837],"ValidatorTest::::nameEndsWithValid()":[839,848],"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()":[850,868],"ValidatorTest::::calendarDateIsBetweenNowInValid()":[870,890],"ValidatorTest::::nameEndsWithInValid()":[892,904],"ValidatorTest::::timeIsBeforeNowValid()":[906,919],"ValidatorTest::::timeIsBeforeNowInValid()":[921,937],"ValidatorTest::::timeIsAfterNowInValid()":[939,955],"ValidatorTest::::timeIsAfterNowValid()":[957,970],"ValidatorTest::::timeIsBetweenNowValid()":[972,988],"ValidatorTest::::timeIsBetweenNowEqualInValid()":[990,1007],"ValidatorTest::::timeIsBetweenNowInValid()":[1009,1028],"ValidatorTest::::futureValid()":[1030,1041],"ValidatorTest::::futureInValid()":[1043,1057],"ValidatorTest::::pastValid()":[1059,1070],"ValidatorTest::::pastInValid()":[1072,1086],"ValidatorTest::::validator()":[1088,1102]},"reverse_method_lines_dic":{"92":"Validator::::prefixed(java.lang.String)","93":"Validator::::prefixed(java.lang.String)","94":"Validator::::prefixed(java.lang.String)","95":"Validator::::prefixed(java.lang.String)","96":"Validator::::prefixed(java.lang.String)","105":"Validator::::failFast(boolean)","106":"Validator::::failFast(boolean)","107":"Validator::::failFast(boolean)","108":"Validator::::failFast(boolean)","109":"Validator::::failFast(boolean)","110":"Validator::::failFast(boolean)","112":"Validator::::isFailFast()","113":"Validator::::isFailFast()","114":"Validator::::isFailFast()","115":"Validator::::isFailFast()","122":"Validator::::forEachPredicates(java.util.function.Consumer<am.ik.yavi.core.ConstraintPredicates<T, ?>>)","123":"Validator::::forEachPredicates(java.util.function.Consumer<am.ik.yavi.core.ConstraintPredicates<T, ?>>)","124":"Validator::::forEachPredicates(java.util.function.Consumer<am.ik.yavi.core.ConstraintPredicates<T, ?>>)","131":"Validator::::forEachCollectionValidator(java.util.function.Consumer<am.ik.yavi.core.CollectionValidator<T, ?, ?>>)","132":"Validator::::forEachCollectionValidator(java.util.function.Consumer<am.ik.yavi.core.CollectionValidator<T, ?, ?>>)","133":"Validator::::forEachCollectionValidator(java.util.function.Consumer<am.ik.yavi.core.CollectionValidator<T, ?, ?>>)","134":"Validator::::forEachCollectionValidator(java.util.function.Consumer<am.ik.yavi.core.CollectionValidator<T, ?, ?>>)","142":"Validator::::forEachConditionalValidator(java.util.function.Consumer<am.ik.yavi.fn.Pair<am.ik.yavi.core.ConstraintCondition<T>, am.ik.yavi.core.Validatable<T>>>)","143":"Validator::::forEachConditionalValidator(java.util.function.Consumer<am.ik.yavi.fn.Pair<am.ik.yavi.core.ConstraintCondition<T>, am.ik.yavi.core.Validatable<T>>>)","144":"Validator::::forEachConditionalValidator(java.util.function.Consumer<am.ik.yavi.fn.Pair<am.ik.yavi.core.ConstraintCondition<T>, am.ik.yavi.core.Validatable<T>>>)","145":"Validator::::forEachConditionalValidator(java.util.function.Consumer<am.ik.yavi.fn.Pair<am.ik.yavi.core.ConstraintCondition<T>, am.ik.yavi.core.Validatable<T>>>)","147":"Validator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","148":"Validator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","149":"Validator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","150":"Validator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","151":"Validator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","153":"Validator::::applicative()","154":"Validator::::applicative()","155":"Validator::::applicative()","156":"Validator::::applicative()","158":"Validator::::indexedName(java.lang.String,java.lang.String,int)","159":"Validator::::indexedName(java.lang.String,java.lang.String,int)","160":"Validator::::indexedName(java.lang.String,java.lang.String,int)","161":"Validator::::indexedName(java.lang.String,java.lang.String,int)","162":"Validator::::indexedName(java.lang.String,java.lang.String,int)","163":"Validator::::indexedName(java.lang.String,java.lang.String,int)","164":"Validator::::indexedName(java.lang.String,java.lang.String,int)","165":"Validator::::indexedName(java.lang.String,java.lang.String,int)","166":"Validator::::indexedName(java.lang.String,java.lang.String,int)","168":"Validator::::pad(java.lang.String,java.lang.Object[],am.ik.yavi.core.ViolatedValue)","169":"Validator::::pad(java.lang.String,java.lang.Object[],am.ik.yavi.core.ViolatedValue)","170":"Validator::::pad(java.lang.String,java.lang.Object[],am.ik.yavi.core.ViolatedValue)","171":"Validator::::pad(java.lang.String,java.lang.Object[],am.ik.yavi.core.ViolatedValue)","172":"Validator::::pad(java.lang.String,java.lang.Object[],am.ik.yavi.core.ViolatedValue)","173":"Validator::::pad(java.lang.String,java.lang.Object[],am.ik.yavi.core.ViolatedValue)","174":"Validator::::pad(java.lang.String,java.lang.Object[],am.ik.yavi.core.ViolatedValue)","176":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","177":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","178":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","179":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","180":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","181":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","182":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","183":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","184":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","185":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","186":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","187":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","188":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","189":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","190":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","191":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","192":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","193":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","194":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","195":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","196":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","197":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","198":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","199":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","200":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","201":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","202":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","203":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","204":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","205":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","206":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","207":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","208":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","209":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","210":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","211":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","212":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","213":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","214":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","215":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","216":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","217":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","218":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","219":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","220":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","221":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","222":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","223":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","224":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","225":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","226":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","227":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","228":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","229":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","230":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","231":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","232":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","233":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","234":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","235":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","236":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","237":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","238":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","239":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","240":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","241":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","242":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","243":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","244":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","245":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","246":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","247":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","248":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","249":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","250":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","251":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","252":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","253":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","254":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","255":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","256":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","257":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","258":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","259":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","260":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","261":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","262":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","263":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","264":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","265":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","266":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","267":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","268":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","269":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","270":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)","272":"Validator::::notNullViolation(java.lang.String,java.util.Locale)","273":"Validator::::notNullViolation(java.lang.String,java.util.Locale)","274":"Validator::::notNullViolation(java.lang.String,java.util.Locale)","275":"Validator::::notNullViolation(java.lang.String,java.util.Locale)","276":"Validator::::notNullViolation(java.lang.String,java.util.Locale)","277":"Validator::::notNullViolation(java.lang.String,java.util.Locale)"},"test_reverse_method_lines_dic":{"42":"ValidatorTest::::allInvalid()","43":"ValidatorTest::::allInvalid()","44":"ValidatorTest::::allInvalid()","45":"ValidatorTest::::allInvalid()","46":"ValidatorTest::::allInvalid()","47":"ValidatorTest::::allInvalid()","48":"ValidatorTest::::allInvalid()","49":"ValidatorTest::::allInvalid()","50":"ValidatorTest::::allInvalid()","51":"ValidatorTest::::allInvalid()","52":"ValidatorTest::::allInvalid()","53":"ValidatorTest::::allInvalid()","54":"ValidatorTest::::allInvalid()","55":"ValidatorTest::::allInvalid()","56":"ValidatorTest::::allInvalid()","57":"ValidatorTest::::allInvalid()","58":"ValidatorTest::::allInvalid()","59":"ValidatorTest::::allInvalid()","60":"ValidatorTest::::allInvalid()","61":"ValidatorTest::::allInvalid()","62":"ValidatorTest::::allInvalid()","64":"ValidatorTest::::codePointsAllIncludedRange()","65":"ValidatorTest::::codePointsAllIncludedRange()","66":"ValidatorTest::::codePointsAllIncludedRange()","67":"ValidatorTest::::codePointsAllIncludedRange()","68":"ValidatorTest::::codePointsAllIncludedRange()","69":"ValidatorTest::::codePointsAllIncludedRange()","70":"ValidatorTest::::codePointsAllIncludedRange()","71":"ValidatorTest::::codePointsAllIncludedRange()","72":"ValidatorTest::::codePointsAllIncludedRange()","73":"ValidatorTest::::codePointsAllIncludedRange()","74":"ValidatorTest::::codePointsAllIncludedRange()","75":"ValidatorTest::::codePointsAllIncludedRange()","76":"ValidatorTest::::codePointsAllIncludedRange()","77":"ValidatorTest::::codePointsAllIncludedRange()","78":"ValidatorTest::::codePointsAllIncludedRange()","79":"ValidatorTest::::codePointsAllIncludedRange()","80":"ValidatorTest::::codePointsAllIncludedRange()","81":"ValidatorTest::::codePointsAllIncludedRange()","83":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","84":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","85":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","86":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","87":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","88":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","89":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","90":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","91":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","92":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","93":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","94":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","95":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","96":"ValidatorTest::::codePointsAllIncludedRangeBeginToEnd()","98":"ValidatorTest::::codePointsAllIncludedRangeRange()","99":"ValidatorTest::::codePointsAllIncludedRangeRange()","100":"ValidatorTest::::codePointsAllIncludedRangeRange()","101":"ValidatorTest::::codePointsAllIncludedRangeRange()","102":"ValidatorTest::::codePointsAllIncludedRangeRange()","103":"ValidatorTest::::codePointsAllIncludedRangeRange()","104":"ValidatorTest::::codePointsAllIncludedRangeRange()","105":"ValidatorTest::::codePointsAllIncludedRangeRange()","106":"ValidatorTest::::codePointsAllIncludedRangeRange()","107":"ValidatorTest::::codePointsAllIncludedRangeRange()","108":"ValidatorTest::::codePointsAllIncludedRangeRange()","109":"ValidatorTest::::codePointsAllIncludedRangeRange()","110":"ValidatorTest::::codePointsAllIncludedRangeRange()","111":"ValidatorTest::::codePointsAllIncludedRangeRange()","112":"ValidatorTest::::codePointsAllIncludedRangeRange()","113":"ValidatorTest::::codePointsAllIncludedRangeRange()","115":"ValidatorTest::::codePointsAllIncludedSet()","116":"ValidatorTest::::codePointsAllIncludedSet()","117":"ValidatorTest::::codePointsAllIncludedSet()","118":"ValidatorTest::::codePointsAllIncludedSet()","119":"ValidatorTest::::codePointsAllIncludedSet()","120":"ValidatorTest::::codePointsAllIncludedSet()","121":"ValidatorTest::::codePointsAllIncludedSet()","122":"ValidatorTest::::codePointsAllIncludedSet()","123":"ValidatorTest::::codePointsAllIncludedSet()","124":"ValidatorTest::::codePointsAllIncludedSet()","125":"ValidatorTest::::codePointsAllIncludedSet()","126":"ValidatorTest::::codePointsAllIncludedSet()","127":"ValidatorTest::::codePointsAllIncludedSet()","128":"ValidatorTest::::codePointsAllIncludedSet()","129":"ValidatorTest::::codePointsAllIncludedSet()","130":"ValidatorTest::::codePointsAllIncludedSet()","131":"ValidatorTest::::codePointsAllIncludedSet()","132":"ValidatorTest::::codePointsAllIncludedSet()","133":"ValidatorTest::::codePointsAllIncludedSet()","134":"ValidatorTest::::codePointsAllIncludedSet()","135":"ValidatorTest::::codePointsAllIncludedSet()","136":"ValidatorTest::::codePointsAllIncludedSet()","137":"ValidatorTest::::codePointsAllIncludedSet()","138":"ValidatorTest::::codePointsAllIncludedSet()","139":"ValidatorTest::::codePointsAllIncludedSet()","140":"ValidatorTest::::codePointsAllIncludedSet()","141":"ValidatorTest::::codePointsAllIncludedSet()","142":"ValidatorTest::::codePointsAllIncludedSet()","143":"ValidatorTest::::codePointsAllIncludedSet()","144":"ValidatorTest::::codePointsAllIncludedSet()","146":"ValidatorTest::::codePointsAllIncludedSetSet()","147":"ValidatorTest::::codePointsAllIncludedSetSet()","148":"ValidatorTest::::codePointsAllIncludedSetSet()","149":"ValidatorTest::::codePointsAllIncludedSetSet()","150":"ValidatorTest::::codePointsAllIncludedSetSet()","151":"ValidatorTest::::codePointsAllIncludedSetSet()","152":"ValidatorTest::::codePointsAllIncludedSetSet()","153":"ValidatorTest::::codePointsAllIncludedSetSet()","154":"ValidatorTest::::codePointsAllIncludedSetSet()","155":"ValidatorTest::::codePointsAllIncludedSetSet()","156":"ValidatorTest::::codePointsAllIncludedSetSet()","157":"ValidatorTest::::codePointsAllIncludedSetSet()","158":"ValidatorTest::::codePointsAllIncludedSetSet()","159":"ValidatorTest::::codePointsAllIncludedSetSet()","160":"ValidatorTest::::codePointsAllIncludedSetSet()","161":"ValidatorTest::::codePointsAllIncludedSetSet()","162":"ValidatorTest::::codePointsAllIncludedSetSet()","163":"ValidatorTest::::codePointsAllIncludedSetSet()","164":"ValidatorTest::::codePointsAllIncludedSetSet()","165":"ValidatorTest::::codePointsAllIncludedSetSet()","166":"ValidatorTest::::codePointsAllIncludedSetSet()","167":"ValidatorTest::::codePointsAllIncludedSetSet()","168":"ValidatorTest::::codePointsAllIncludedSetSet()","169":"ValidatorTest::::codePointsAllIncludedSetSet()","170":"ValidatorTest::::codePointsAllIncludedSetSet()","171":"ValidatorTest::::codePointsAllIncludedSetSet()","172":"ValidatorTest::::codePointsAllIncludedSetSet()","173":"ValidatorTest::::codePointsAllIncludedSetSet()","174":"ValidatorTest::::codePointsAllIncludedSetSet()","175":"ValidatorTest::::codePointsAllIncludedSetSet()","177":"ValidatorTest::::codePointsNotIncludedRange()","178":"ValidatorTest::::codePointsNotIncludedRange()","179":"ValidatorTest::::codePointsNotIncludedRange()","180":"ValidatorTest::::codePointsNotIncludedRange()","181":"ValidatorTest::::codePointsNotIncludedRange()","182":"ValidatorTest::::codePointsNotIncludedRange()","183":"ValidatorTest::::codePointsNotIncludedRange()","184":"ValidatorTest::::codePointsNotIncludedRange()","185":"ValidatorTest::::codePointsNotIncludedRange()","186":"ValidatorTest::::codePointsNotIncludedRange()","187":"ValidatorTest::::codePointsNotIncludedRange()","188":"ValidatorTest::::codePointsNotIncludedRange()","189":"ValidatorTest::::codePointsNotIncludedRange()","190":"ValidatorTest::::codePointsNotIncludedRange()","191":"ValidatorTest::::codePointsNotIncludedRange()","192":"ValidatorTest::::codePointsNotIncludedRange()","193":"ValidatorTest::::codePointsNotIncludedRange()","194":"ValidatorTest::::codePointsNotIncludedRange()","196":"ValidatorTest::::codePointsNotIncludedSet()","197":"ValidatorTest::::codePointsNotIncludedSet()","198":"ValidatorTest::::codePointsNotIncludedSet()","199":"ValidatorTest::::codePointsNotIncludedSet()","200":"ValidatorTest::::codePointsNotIncludedSet()","201":"ValidatorTest::::codePointsNotIncludedSet()","202":"ValidatorTest::::codePointsNotIncludedSet()","203":"ValidatorTest::::codePointsNotIncludedSet()","204":"ValidatorTest::::codePointsNotIncludedSet()","205":"ValidatorTest::::codePointsNotIncludedSet()","206":"ValidatorTest::::codePointsNotIncludedSet()","207":"ValidatorTest::::codePointsNotIncludedSet()","208":"ValidatorTest::::codePointsNotIncludedSet()","209":"ValidatorTest::::codePointsNotIncludedSet()","210":"ValidatorTest::::codePointsNotIncludedSet()","211":"ValidatorTest::::codePointsNotIncludedSet()","212":"ValidatorTest::::codePointsNotIncludedSet()","214":"ValidatorTest::::combiningCharacterByteSizeInValid()","215":"ValidatorTest::::combiningCharacterByteSizeInValid()","216":"ValidatorTest::::combiningCharacterByteSizeInValid()","217":"ValidatorTest::::combiningCharacterByteSizeInValid()","218":"ValidatorTest::::combiningCharacterByteSizeInValid()","219":"ValidatorTest::::combiningCharacterByteSizeInValid()","220":"ValidatorTest::::combiningCharacterByteSizeInValid()","221":"ValidatorTest::::combiningCharacterByteSizeInValid()","222":"ValidatorTest::::combiningCharacterByteSizeInValid()","223":"ValidatorTest::::combiningCharacterByteSizeInValid()","224":"ValidatorTest::::combiningCharacterByteSizeInValid()","225":"ValidatorTest::::combiningCharacterByteSizeInValid()","226":"ValidatorTest::::combiningCharacterByteSizeInValid()","228":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","229":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","230":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","231":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","232":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","233":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","234":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","235":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","236":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","237":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","238":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","239":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","240":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","241":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","242":"ValidatorTest::::combiningCharacterSizeAndByteSizeInValid()","244":"ValidatorTest::::combiningCharacterValid()","245":"ValidatorTest::::combiningCharacterValid()","246":"ValidatorTest::::combiningCharacterValid()","247":"ValidatorTest::::combiningCharacterValid()","248":"ValidatorTest::::combiningCharacterValid()","249":"ValidatorTest::::combiningCharacterValid()","250":"ValidatorTest::::combiningCharacterValid()","251":"ValidatorTest::::combiningCharacterValid()","252":"ValidatorTest::::combiningCharacterValid()","253":"ValidatorTest::::combiningCharacterValid()","255":"ValidatorTest::::condition()","256":"ValidatorTest::::condition()","257":"ValidatorTest::::condition()","258":"ValidatorTest::::condition()","259":"ValidatorTest::::condition()","260":"ValidatorTest::::condition()","261":"ValidatorTest::::condition()","262":"ValidatorTest::::condition()","263":"ValidatorTest::::condition()","264":"ValidatorTest::::condition()","265":"ValidatorTest::::condition()","266":"ValidatorTest::::condition()","267":"ValidatorTest::::condition()","268":"ValidatorTest::::condition()","269":"ValidatorTest::::condition()","270":"ValidatorTest::::condition()","271":"ValidatorTest::::condition()","272":"ValidatorTest::::condition()","273":"ValidatorTest::::condition()","274":"ValidatorTest::::condition()","275":"ValidatorTest::::condition()","276":"ValidatorTest::::condition()","278":"ValidatorTest::::constraintOnTarget()","279":"ValidatorTest::::constraintOnTarget()","280":"ValidatorTest::::constraintOnTarget()","281":"ValidatorTest::::constraintOnTarget()","282":"ValidatorTest::::constraintOnTarget()","283":"ValidatorTest::::constraintOnTarget()","284":"ValidatorTest::::constraintOnTarget()","285":"ValidatorTest::::constraintOnTarget()","286":"ValidatorTest::::constraintOnTarget()","287":"ValidatorTest::::constraintOnTarget()","288":"ValidatorTest::::constraintOnTarget()","289":"ValidatorTest::::constraintOnTarget()","290":"ValidatorTest::::constraintOnTarget()","291":"ValidatorTest::::constraintOnTarget()","292":"ValidatorTest::::constraintOnTarget()","293":"ValidatorTest::::constraintOnTarget()","294":"ValidatorTest::::constraintOnTarget()","295":"ValidatorTest::::constraintOnTarget()","296":"ValidatorTest::::constraintOnTarget()","297":"ValidatorTest::::constraintOnTarget()","298":"ValidatorTest::::constraintOnTarget()","300":"ValidatorTest::::customMessageFormatter()","301":"ValidatorTest::::customMessageFormatter()","302":"ValidatorTest::::customMessageFormatter()","303":"ValidatorTest::::customMessageFormatter()","304":"ValidatorTest::::customMessageFormatter()","305":"ValidatorTest::::customMessageFormatter()","306":"ValidatorTest::::customMessageFormatter()","307":"ValidatorTest::::customMessageFormatter()","308":"ValidatorTest::::customMessageFormatter()","309":"ValidatorTest::::customMessageFormatter()","310":"ValidatorTest::::customMessageFormatter()","311":"ValidatorTest::::customMessageFormatter()","312":"ValidatorTest::::customMessageFormatter()","313":"ValidatorTest::::customMessageFormatter()","314":"ValidatorTest::::customMessageFormatter()","315":"ValidatorTest::::customMessageFormatter()","316":"ValidatorTest::::customMessageFormatter()","318":"ValidatorTest::::details()","319":"ValidatorTest::::details()","320":"ValidatorTest::::details()","321":"ValidatorTest::::details()","322":"ValidatorTest::::details()","323":"ValidatorTest::::details()","324":"ValidatorTest::::details()","325":"ValidatorTest::::details()","326":"ValidatorTest::::details()","327":"ValidatorTest::::details()","328":"ValidatorTest::::details()","329":"ValidatorTest::::details()","330":"ValidatorTest::::details()","331":"ValidatorTest::::details()","332":"ValidatorTest::::details()","333":"ValidatorTest::::details()","334":"ValidatorTest::::details()","335":"ValidatorTest::::details()","336":"ValidatorTest::::details()","337":"ValidatorTest::::details()","338":"ValidatorTest::::details()","340":"ValidatorTest::::emojiInValid()","341":"ValidatorTest::::emojiInValid()","342":"ValidatorTest::::emojiInValid()","343":"ValidatorTest::::emojiInValid()","344":"ValidatorTest::::emojiInValid()","345":"ValidatorTest::::emojiInValid()","346":"ValidatorTest::::emojiInValid()","347":"ValidatorTest::::emojiInValid()","348":"ValidatorTest::::emojiInValid()","349":"ValidatorTest::::emojiInValid()","350":"ValidatorTest::::emojiInValid()","351":"ValidatorTest::::emojiInValid()","353":"ValidatorTest::::emojiValid()","354":"ValidatorTest::::emojiValid()","355":"ValidatorTest::::emojiValid()","356":"ValidatorTest::::emojiValid()","357":"ValidatorTest::::emojiValid()","358":"ValidatorTest::::emojiValid()","359":"ValidatorTest::::emojiValid()","360":"ValidatorTest::::emojiValid()","361":"ValidatorTest::::emojiValid()","363":"ValidatorTest::::group()","364":"ValidatorTest::::group()","365":"ValidatorTest::::group()","366":"ValidatorTest::::group()","367":"ValidatorTest::::group()","368":"ValidatorTest::::group()","369":"ValidatorTest::::group()","370":"ValidatorTest::::group()","371":"ValidatorTest::::group()","372":"ValidatorTest::::group()","373":"ValidatorTest::::group()","374":"ValidatorTest::::group()","375":"ValidatorTest::::group()","376":"ValidatorTest::::group()","377":"ValidatorTest::::group()","378":"ValidatorTest::::group()","379":"ValidatorTest::::group()","380":"ValidatorTest::::group()","381":"ValidatorTest::::group()","382":"ValidatorTest::::group()","383":"ValidatorTest::::group()","384":"ValidatorTest::::group()","386":"ValidatorTest::::groupConditionByGroup()","387":"ValidatorTest::::groupConditionByGroup()","388":"ValidatorTest::::groupConditionByGroup()","389":"ValidatorTest::::groupConditionByGroup()","390":"ValidatorTest::::groupConditionByGroup()","391":"ValidatorTest::::groupConditionByGroup()","392":"ValidatorTest::::groupConditionByGroup()","393":"ValidatorTest::::groupConditionByGroup()","394":"ValidatorTest::::groupConditionByGroup()","395":"ValidatorTest::::groupConditionByGroup()","396":"ValidatorTest::::groupConditionByGroup()","397":"ValidatorTest::::groupConditionByGroup()","398":"ValidatorTest::::groupConditionByGroup()","399":"ValidatorTest::::groupConditionByGroup()","400":"ValidatorTest::::groupConditionByGroup()","401":"ValidatorTest::::groupConditionByGroup()","402":"ValidatorTest::::groupConditionByGroup()","403":"ValidatorTest::::groupConditionByGroup()","404":"ValidatorTest::::groupConditionByGroup()","405":"ValidatorTest::::groupConditionByGroup()","406":"ValidatorTest::::groupConditionByGroup()","407":"ValidatorTest::::groupConditionByGroup()","408":"ValidatorTest::::groupConditionByGroup()","409":"ValidatorTest::::groupConditionByGroup()","410":"ValidatorTest::::groupConditionByGroup()","411":"ValidatorTest::::groupConditionByGroup()","412":"ValidatorTest::::groupConditionByGroup()","413":"ValidatorTest::::groupConditionByGroup()","414":"ValidatorTest::::groupConditionByGroup()","415":"ValidatorTest::::groupConditionByGroup()","416":"ValidatorTest::::groupConditionByGroup()","417":"ValidatorTest::::groupConditionByGroup()","419":"ValidatorTest::::groupTwoCondition()","420":"ValidatorTest::::groupTwoCondition()","421":"ValidatorTest::::groupTwoCondition()","422":"ValidatorTest::::groupTwoCondition()","423":"ValidatorTest::::groupTwoCondition()","424":"ValidatorTest::::groupTwoCondition()","425":"ValidatorTest::::groupTwoCondition()","426":"ValidatorTest::::groupTwoCondition()","427":"ValidatorTest::::groupTwoCondition()","428":"ValidatorTest::::groupTwoCondition()","429":"ValidatorTest::::groupTwoCondition()","430":"ValidatorTest::::groupTwoCondition()","431":"ValidatorTest::::groupTwoCondition()","432":"ValidatorTest::::groupTwoCondition()","433":"ValidatorTest::::groupTwoCondition()","434":"ValidatorTest::::groupTwoCondition()","435":"ValidatorTest::::groupTwoCondition()","436":"ValidatorTest::::groupTwoCondition()","437":"ValidatorTest::::groupTwoCondition()","438":"ValidatorTest::::groupTwoCondition()","439":"ValidatorTest::::groupTwoCondition()","440":"ValidatorTest::::groupTwoCondition()","441":"ValidatorTest::::groupTwoCondition()","442":"ValidatorTest::::groupTwoCondition()","443":"ValidatorTest::::groupTwoCondition()","444":"ValidatorTest::::groupTwoCondition()","445":"ValidatorTest::::groupTwoCondition()","446":"ValidatorTest::::groupTwoCondition()","447":"ValidatorTest::::groupTwoCondition()","449":"ValidatorTest::::ivsByteSizeInValid()","450":"ValidatorTest::::ivsByteSizeInValid()","451":"ValidatorTest::::ivsByteSizeInValid()","452":"ValidatorTest::::ivsByteSizeInValid()","453":"ValidatorTest::::ivsByteSizeInValid()","454":"ValidatorTest::::ivsByteSizeInValid()","455":"ValidatorTest::::ivsByteSizeInValid()","456":"ValidatorTest::::ivsByteSizeInValid()","457":"ValidatorTest::::ivsByteSizeInValid()","458":"ValidatorTest::::ivsByteSizeInValid()","459":"ValidatorTest::::ivsByteSizeInValid()","460":"ValidatorTest::::ivsByteSizeInValid()","461":"ValidatorTest::::ivsByteSizeInValid()","462":"ValidatorTest::::ivsByteSizeInValid()","464":"ValidatorTest::::ivsInValid()","465":"ValidatorTest::::ivsInValid()","466":"ValidatorTest::::ivsInValid()","467":"ValidatorTest::::ivsInValid()","468":"ValidatorTest::::ivsInValid()","469":"ValidatorTest::::ivsInValid()","470":"ValidatorTest::::ivsInValid()","471":"ValidatorTest::::ivsInValid()","472":"ValidatorTest::::ivsInValid()","473":"ValidatorTest::::ivsInValid()","474":"ValidatorTest::::ivsInValid()","475":"ValidatorTest::::ivsInValid()","476":"ValidatorTest::::ivsInValid()","478":"ValidatorTest::::ivsSizeAndByteSizeInValid()","479":"ValidatorTest::::ivsSizeAndByteSizeInValid()","480":"ValidatorTest::::ivsSizeAndByteSizeInValid()","481":"ValidatorTest::::ivsSizeAndByteSizeInValid()","482":"ValidatorTest::::ivsSizeAndByteSizeInValid()","483":"ValidatorTest::::ivsSizeAndByteSizeInValid()","484":"ValidatorTest::::ivsSizeAndByteSizeInValid()","485":"ValidatorTest::::ivsSizeAndByteSizeInValid()","486":"ValidatorTest::::ivsSizeAndByteSizeInValid()","487":"ValidatorTest::::ivsSizeAndByteSizeInValid()","488":"ValidatorTest::::ivsSizeAndByteSizeInValid()","489":"ValidatorTest::::ivsSizeAndByteSizeInValid()","490":"ValidatorTest::::ivsSizeAndByteSizeInValid()","491":"ValidatorTest::::ivsSizeAndByteSizeInValid()","492":"ValidatorTest::::ivsSizeAndByteSizeInValid()","494":"ValidatorTest::::ivsValid()","495":"ValidatorTest::::ivsValid()","496":"ValidatorTest::::ivsValid()","497":"ValidatorTest::::ivsValid()","498":"ValidatorTest::::ivsValid()","499":"ValidatorTest::::ivsValid()","500":"ValidatorTest::::ivsValid()","501":"ValidatorTest::::ivsValid()","502":"ValidatorTest::::ivsValid()","503":"ValidatorTest::::ivsValid()","504":"ValidatorTest::::ivsValid()","505":"ValidatorTest::::ivsValid()","507":"ValidatorTest::::multipleViolationOnOneProperty()","508":"ValidatorTest::::multipleViolationOnOneProperty()","509":"ValidatorTest::::multipleViolationOnOneProperty()","510":"ValidatorTest::::multipleViolationOnOneProperty()","511":"ValidatorTest::::multipleViolationOnOneProperty()","512":"ValidatorTest::::multipleViolationOnOneProperty()","513":"ValidatorTest::::multipleViolationOnOneProperty()","514":"ValidatorTest::::multipleViolationOnOneProperty()","515":"ValidatorTest::::multipleViolationOnOneProperty()","516":"ValidatorTest::::multipleViolationOnOneProperty()","517":"ValidatorTest::::multipleViolationOnOneProperty()","518":"ValidatorTest::::multipleViolationOnOneProperty()","519":"ValidatorTest::::multipleViolationOnOneProperty()","520":"ValidatorTest::::multipleViolationOnOneProperty()","521":"ValidatorTest::::multipleViolationOnOneProperty()","523":"ValidatorTest::::nullValues()","524":"ValidatorTest::::nullValues()","525":"ValidatorTest::::nullValues()","526":"ValidatorTest::::nullValues()","527":"ValidatorTest::::nullValues()","528":"ValidatorTest::::nullValues()","529":"ValidatorTest::::nullValues()","530":"ValidatorTest::::nullValues()","531":"ValidatorTest::::nullValues()","532":"ValidatorTest::::nullValues()","533":"ValidatorTest::::nullValues()","534":"ValidatorTest::::nullValues()","535":"ValidatorTest::::nullValues()","536":"ValidatorTest::::nullValues()","538":"ValidatorTest::::overrideMessage()","539":"ValidatorTest::::overrideMessage()","540":"ValidatorTest::::overrideMessage()","541":"ValidatorTest::::overrideMessage()","542":"ValidatorTest::::overrideMessage()","543":"ValidatorTest::::overrideMessage()","544":"ValidatorTest::::overrideMessage()","545":"ValidatorTest::::overrideMessage()","546":"ValidatorTest::::overrideMessage()","547":"ValidatorTest::::overrideMessage()","548":"ValidatorTest::::overrideMessage()","549":"ValidatorTest::::overrideMessage()","550":"ValidatorTest::::overrideMessage()","551":"ValidatorTest::::overrideMessage()","552":"ValidatorTest::::overrideMessage()","553":"ValidatorTest::::overrideMessage()","554":"ValidatorTest::::overrideMessage()","555":"ValidatorTest::::overrideMessage()","556":"ValidatorTest::::overrideMessage()","557":"ValidatorTest::::overrideMessage()","558":"ValidatorTest::::overrideMessage()","559":"ValidatorTest::::overrideMessage()","560":"ValidatorTest::::overrideMessage()","561":"ValidatorTest::::overrideMessage()","562":"ValidatorTest::::overrideMessage()","563":"ValidatorTest::::overrideMessage()","564":"ValidatorTest::::overrideMessage()","565":"ValidatorTest::::overrideMessage()","566":"ValidatorTest::::overrideMessage()","567":"ValidatorTest::::overrideMessage()","568":"ValidatorTest::::overrideMessage()","569":"ValidatorTest::::overrideMessage()","570":"ValidatorTest::::overrideMessage()","571":"ValidatorTest::::overrideMessage()","572":"ValidatorTest::::overrideMessage()","573":"ValidatorTest::::overrideMessage()","575":"ValidatorTest::::overrideViolationMessage()","576":"ValidatorTest::::overrideViolationMessage()","577":"ValidatorTest::::overrideViolationMessage()","578":"ValidatorTest::::overrideViolationMessage()","579":"ValidatorTest::::overrideViolationMessage()","580":"ValidatorTest::::overrideViolationMessage()","581":"ValidatorTest::::overrideViolationMessage()","582":"ValidatorTest::::overrideViolationMessage()","583":"ValidatorTest::::overrideViolationMessage()","584":"ValidatorTest::::overrideViolationMessage()","585":"ValidatorTest::::overrideViolationMessage()","586":"ValidatorTest::::overrideViolationMessage()","587":"ValidatorTest::::overrideViolationMessage()","588":"ValidatorTest::::overrideViolationMessage()","589":"ValidatorTest::::overrideViolationMessage()","590":"ValidatorTest::::overrideViolationMessage()","591":"ValidatorTest::::overrideViolationMessage()","592":"ValidatorTest::::overrideViolationMessage()","593":"ValidatorTest::::overrideViolationMessage()","594":"ValidatorTest::::overrideViolationMessage()","595":"ValidatorTest::::overrideViolationMessage()","596":"ValidatorTest::::overrideViolationMessage()","597":"ValidatorTest::::overrideViolationMessage()","598":"ValidatorTest::::overrideViolationMessage()","599":"ValidatorTest::::overrideViolationMessage()","600":"ValidatorTest::::overrideViolationMessage()","601":"ValidatorTest::::overrideViolationMessage()","602":"ValidatorTest::::overrideViolationMessage()","603":"ValidatorTest::::overrideViolationMessage()","604":"ValidatorTest::::overrideViolationMessage()","605":"ValidatorTest::::overrideViolationMessage()","606":"ValidatorTest::::overrideViolationMessage()","607":"ValidatorTest::::overrideViolationMessage()","608":"ValidatorTest::::overrideViolationMessage()","609":"ValidatorTest::::overrideViolationMessage()","610":"ValidatorTest::::overrideViolationMessage()","611":"ValidatorTest::::overrideViolationMessage()","613":"ValidatorTest::::throwIfInValidInValid()","614":"ValidatorTest::::throwIfInValidInValid()","615":"ValidatorTest::::throwIfInValidInValid()","616":"ValidatorTest::::throwIfInValidInValid()","617":"ValidatorTest::::throwIfInValidInValid()","618":"ValidatorTest::::throwIfInValidInValid()","619":"ValidatorTest::::throwIfInValidInValid()","620":"ValidatorTest::::throwIfInValidInValid()","621":"ValidatorTest::::throwIfInValidInValid()","622":"ValidatorTest::::throwIfInValidInValid()","623":"ValidatorTest::::throwIfInValidInValid()","624":"ValidatorTest::::throwIfInValidInValid()","625":"ValidatorTest::::throwIfInValidInValid()","626":"ValidatorTest::::throwIfInValidInValid()","627":"ValidatorTest::::throwIfInValidInValid()","628":"ValidatorTest::::throwIfInValidInValid()","629":"ValidatorTest::::throwIfInValidInValid()","631":"ValidatorTest::::throwIfInValidValid()","632":"ValidatorTest::::throwIfInValidValid()","633":"ValidatorTest::::throwIfInValidValid()","634":"ValidatorTest::::throwIfInValidValid()","635":"ValidatorTest::::throwIfInValidValid()","637":"ValidatorTest::::valid()","638":"ValidatorTest::::valid()","639":"ValidatorTest::::valid()","640":"ValidatorTest::::valid()","641":"ValidatorTest::::valid()","642":"ValidatorTest::::valid()","643":"ValidatorTest::::valid()","645":"ValidatorTest::::violateGroupAndDefault()","646":"ValidatorTest::::violateGroupAndDefault()","647":"ValidatorTest::::violateGroupAndDefault()","648":"ValidatorTest::::violateGroupAndDefault()","649":"ValidatorTest::::violateGroupAndDefault()","650":"ValidatorTest::::violateGroupAndDefault()","651":"ValidatorTest::::violateGroupAndDefault()","652":"ValidatorTest::::violateGroupAndDefault()","653":"ValidatorTest::::violateGroupAndDefault()","654":"ValidatorTest::::violateGroupAndDefault()","655":"ValidatorTest::::violateGroupAndDefault()","656":"ValidatorTest::::violateGroupAndDefault()","657":"ValidatorTest::::violateGroupAndDefault()","658":"ValidatorTest::::violateGroupAndDefault()","659":"ValidatorTest::::violateGroupAndDefault()","660":"ValidatorTest::::violateGroupAndDefault()","661":"ValidatorTest::::violateGroupAndDefault()","662":"ValidatorTest::::violateGroupAndDefault()","663":"ValidatorTest::::violateGroupAndDefault()","664":"ValidatorTest::::violateGroupAndDefault()","665":"ValidatorTest::::violateGroupAndDefault()","666":"ValidatorTest::::violateGroupAndDefault()","667":"ValidatorTest::::violateGroupAndDefault()","668":"ValidatorTest::::violateGroupAndDefault()","669":"ValidatorTest::::violateGroupAndDefault()","670":"ValidatorTest::::violateGroupAndDefault()","671":"ValidatorTest::::violateGroupAndDefault()","672":"ValidatorTest::::violateGroupAndDefault()","673":"ValidatorTest::::violateGroupAndDefault()","674":"ValidatorTest::::violateGroupAndDefault()","675":"ValidatorTest::::violateGroupAndDefault()","676":"ValidatorTest::::violateGroupAndDefault()","678":"ValidatorTest::::agePositiveValidatorUserValid()","679":"ValidatorTest::::agePositiveValidatorUserValid()","680":"ValidatorTest::::agePositiveValidatorUserValid()","681":"ValidatorTest::::agePositiveValidatorUserValid()","682":"ValidatorTest::::agePositiveValidatorUserValid()","683":"ValidatorTest::::agePositiveValidatorUserValid()","684":"ValidatorTest::::agePositiveValidatorUserValid()","685":"ValidatorTest::::agePositiveValidatorUserValid()","686":"ValidatorTest::::agePositiveValidatorUserValid()","687":"ValidatorTest::::agePositiveValidatorUserValid()","689":"ValidatorTest::::agePositiveValidatorUserInValid()","690":"ValidatorTest::::agePositiveValidatorUserInValid()","691":"ValidatorTest::::agePositiveValidatorUserInValid()","692":"ValidatorTest::::agePositiveValidatorUserInValid()","693":"ValidatorTest::::agePositiveValidatorUserInValid()","694":"ValidatorTest::::agePositiveValidatorUserInValid()","695":"ValidatorTest::::agePositiveValidatorUserInValid()","696":"ValidatorTest::::agePositiveValidatorUserInValid()","697":"ValidatorTest::::agePositiveValidatorUserInValid()","698":"ValidatorTest::::agePositiveValidatorUserInValid()","699":"ValidatorTest::::agePositiveValidatorUserInValid()","700":"ValidatorTest::::agePositiveValidatorUserInValid()","702":"ValidatorTest::::ageNegativeValidatorUserValid()","703":"ValidatorTest::::ageNegativeValidatorUserValid()","704":"ValidatorTest::::ageNegativeValidatorUserValid()","705":"ValidatorTest::::ageNegativeValidatorUserValid()","706":"ValidatorTest::::ageNegativeValidatorUserValid()","707":"ValidatorTest::::ageNegativeValidatorUserValid()","708":"ValidatorTest::::ageNegativeValidatorUserValid()","709":"ValidatorTest::::ageNegativeValidatorUserValid()","710":"ValidatorTest::::ageNegativeValidatorUserValid()","711":"ValidatorTest::::ageNegativeValidatorUserValid()","713":"ValidatorTest::::ageNegativeValidatorUserInValid()","714":"ValidatorTest::::ageNegativeValidatorUserInValid()","715":"ValidatorTest::::ageNegativeValidatorUserInValid()","716":"ValidatorTest::::ageNegativeValidatorUserInValid()","717":"ValidatorTest::::ageNegativeValidatorUserInValid()","718":"ValidatorTest::::ageNegativeValidatorUserInValid()","719":"ValidatorTest::::ageNegativeValidatorUserInValid()","720":"ValidatorTest::::ageNegativeValidatorUserInValid()","721":"ValidatorTest::::ageNegativeValidatorUserInValid()","722":"ValidatorTest::::ageNegativeValidatorUserInValid()","723":"ValidatorTest::::ageNegativeValidatorUserInValid()","724":"ValidatorTest::::ageNegativeValidatorUserInValid()","726":"ValidatorTest::::calendarDateIsBeforeNowValid()","727":"ValidatorTest::::calendarDateIsBeforeNowValid()","728":"ValidatorTest::::calendarDateIsBeforeNowValid()","729":"ValidatorTest::::calendarDateIsBeforeNowValid()","730":"ValidatorTest::::calendarDateIsBeforeNowValid()","731":"ValidatorTest::::calendarDateIsBeforeNowValid()","732":"ValidatorTest::::calendarDateIsBeforeNowValid()","733":"ValidatorTest::::calendarDateIsBeforeNowValid()","734":"ValidatorTest::::calendarDateIsBeforeNowValid()","735":"ValidatorTest::::calendarDateIsBeforeNowValid()","736":"ValidatorTest::::calendarDateIsBeforeNowValid()","737":"ValidatorTest::::calendarDateIsBeforeNowValid()","738":"ValidatorTest::::calendarDateIsBeforeNowValid()","739":"ValidatorTest::::calendarDateIsBeforeNowValid()","740":"ValidatorTest::::calendarDateIsBeforeNowValid()","742":"ValidatorTest::::nameStartWithValid()","743":"ValidatorTest::::nameStartWithValid()","744":"ValidatorTest::::nameStartWithValid()","745":"ValidatorTest::::nameStartWithValid()","746":"ValidatorTest::::nameStartWithValid()","747":"ValidatorTest::::nameStartWithValid()","748":"ValidatorTest::::nameStartWithValid()","749":"ValidatorTest::::nameStartWithValid()","750":"ValidatorTest::::nameStartWithValid()","751":"ValidatorTest::::nameStartWithValid()","753":"ValidatorTest::::calendarDateIsBeforeNowInValid()","754":"ValidatorTest::::calendarDateIsBeforeNowInValid()","755":"ValidatorTest::::calendarDateIsBeforeNowInValid()","756":"ValidatorTest::::calendarDateIsBeforeNowInValid()","757":"ValidatorTest::::calendarDateIsBeforeNowInValid()","758":"ValidatorTest::::calendarDateIsBeforeNowInValid()","759":"ValidatorTest::::calendarDateIsBeforeNowInValid()","760":"ValidatorTest::::calendarDateIsBeforeNowInValid()","761":"ValidatorTest::::calendarDateIsBeforeNowInValid()","762":"ValidatorTest::::calendarDateIsBeforeNowInValid()","763":"ValidatorTest::::calendarDateIsBeforeNowInValid()","764":"ValidatorTest::::calendarDateIsBeforeNowInValid()","765":"ValidatorTest::::calendarDateIsBeforeNowInValid()","766":"ValidatorTest::::calendarDateIsBeforeNowInValid()","767":"ValidatorTest::::calendarDateIsBeforeNowInValid()","768":"ValidatorTest::::calendarDateIsBeforeNowInValid()","769":"ValidatorTest::::calendarDateIsBeforeNowInValid()","770":"ValidatorTest::::calendarDateIsBeforeNowInValid()","772":"ValidatorTest::::calendarDateIsAfterNowInValid()","773":"ValidatorTest::::calendarDateIsAfterNowInValid()","774":"ValidatorTest::::calendarDateIsAfterNowInValid()","775":"ValidatorTest::::calendarDateIsAfterNowInValid()","776":"ValidatorTest::::calendarDateIsAfterNowInValid()","777":"ValidatorTest::::calendarDateIsAfterNowInValid()","778":"ValidatorTest::::calendarDateIsAfterNowInValid()","779":"ValidatorTest::::calendarDateIsAfterNowInValid()","780":"ValidatorTest::::calendarDateIsAfterNowInValid()","781":"ValidatorTest::::calendarDateIsAfterNowInValid()","782":"ValidatorTest::::calendarDateIsAfterNowInValid()","783":"ValidatorTest::::calendarDateIsAfterNowInValid()","784":"ValidatorTest::::calendarDateIsAfterNowInValid()","785":"ValidatorTest::::calendarDateIsAfterNowInValid()","786":"ValidatorTest::::calendarDateIsAfterNowInValid()","787":"ValidatorTest::::calendarDateIsAfterNowInValid()","788":"ValidatorTest::::calendarDateIsAfterNowInValid()","789":"ValidatorTest::::calendarDateIsAfterNowInValid()","791":"ValidatorTest::::calendarDateIsAfterNowValid()","792":"ValidatorTest::::calendarDateIsAfterNowValid()","793":"ValidatorTest::::calendarDateIsAfterNowValid()","794":"ValidatorTest::::calendarDateIsAfterNowValid()","795":"ValidatorTest::::calendarDateIsAfterNowValid()","796":"ValidatorTest::::calendarDateIsAfterNowValid()","797":"ValidatorTest::::calendarDateIsAfterNowValid()","798":"ValidatorTest::::calendarDateIsAfterNowValid()","799":"ValidatorTest::::calendarDateIsAfterNowValid()","800":"ValidatorTest::::calendarDateIsAfterNowValid()","801":"ValidatorTest::::calendarDateIsAfterNowValid()","802":"ValidatorTest::::calendarDateIsAfterNowValid()","803":"ValidatorTest::::calendarDateIsAfterNowValid()","804":"ValidatorTest::::calendarDateIsAfterNowValid()","805":"ValidatorTest::::calendarDateIsAfterNowValid()","807":"ValidatorTest::::calendarDateIsBetweenNowValid()","808":"ValidatorTest::::calendarDateIsBetweenNowValid()","809":"ValidatorTest::::calendarDateIsBetweenNowValid()","810":"ValidatorTest::::calendarDateIsBetweenNowValid()","811":"ValidatorTest::::calendarDateIsBetweenNowValid()","812":"ValidatorTest::::calendarDateIsBetweenNowValid()","813":"ValidatorTest::::calendarDateIsBetweenNowValid()","814":"ValidatorTest::::calendarDateIsBetweenNowValid()","815":"ValidatorTest::::calendarDateIsBetweenNowValid()","816":"ValidatorTest::::calendarDateIsBetweenNowValid()","817":"ValidatorTest::::calendarDateIsBetweenNowValid()","818":"ValidatorTest::::calendarDateIsBetweenNowValid()","819":"ValidatorTest::::calendarDateIsBetweenNowValid()","820":"ValidatorTest::::calendarDateIsBetweenNowValid()","821":"ValidatorTest::::calendarDateIsBetweenNowValid()","822":"ValidatorTest::::calendarDateIsBetweenNowValid()","823":"ValidatorTest::::calendarDateIsBetweenNowValid()","825":"ValidatorTest::::nameStartWithInValid()","826":"ValidatorTest::::nameStartWithInValid()","827":"ValidatorTest::::nameStartWithInValid()","828":"ValidatorTest::::nameStartWithInValid()","829":"ValidatorTest::::nameStartWithInValid()","830":"ValidatorTest::::nameStartWithInValid()","831":"ValidatorTest::::nameStartWithInValid()","832":"ValidatorTest::::nameStartWithInValid()","833":"ValidatorTest::::nameStartWithInValid()","834":"ValidatorTest::::nameStartWithInValid()","835":"ValidatorTest::::nameStartWithInValid()","836":"ValidatorTest::::nameStartWithInValid()","837":"ValidatorTest::::nameStartWithInValid()","839":"ValidatorTest::::nameEndsWithValid()","840":"ValidatorTest::::nameEndsWithValid()","841":"ValidatorTest::::nameEndsWithValid()","842":"ValidatorTest::::nameEndsWithValid()","843":"ValidatorTest::::nameEndsWithValid()","844":"ValidatorTest::::nameEndsWithValid()","845":"ValidatorTest::::nameEndsWithValid()","846":"ValidatorTest::::nameEndsWithValid()","847":"ValidatorTest::::nameEndsWithValid()","848":"ValidatorTest::::nameEndsWithValid()","850":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","851":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","852":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","853":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","854":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","855":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","856":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","857":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","858":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","859":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","860":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","861":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","862":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","863":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","864":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","865":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","866":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","867":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","868":"ValidatorTest::::calendarDateIsBetweenNowEqualInValid()","870":"ValidatorTest::::calendarDateIsBetweenNowInValid()","871":"ValidatorTest::::calendarDateIsBetweenNowInValid()","872":"ValidatorTest::::calendarDateIsBetweenNowInValid()","873":"ValidatorTest::::calendarDateIsBetweenNowInValid()","874":"ValidatorTest::::calendarDateIsBetweenNowInValid()","875":"ValidatorTest::::calendarDateIsBetweenNowInValid()","876":"ValidatorTest::::calendarDateIsBetweenNowInValid()","877":"ValidatorTest::::calendarDateIsBetweenNowInValid()","878":"ValidatorTest::::calendarDateIsBetweenNowInValid()","879":"ValidatorTest::::calendarDateIsBetweenNowInValid()","880":"ValidatorTest::::calendarDateIsBetweenNowInValid()","881":"ValidatorTest::::calendarDateIsBetweenNowInValid()","882":"ValidatorTest::::calendarDateIsBetweenNowInValid()","883":"ValidatorTest::::calendarDateIsBetweenNowInValid()","884":"ValidatorTest::::calendarDateIsBetweenNowInValid()","885":"ValidatorTest::::calendarDateIsBetweenNowInValid()","886":"ValidatorTest::::calendarDateIsBetweenNowInValid()","887":"ValidatorTest::::calendarDateIsBetweenNowInValid()","888":"ValidatorTest::::calendarDateIsBetweenNowInValid()","889":"ValidatorTest::::calendarDateIsBetweenNowInValid()","890":"ValidatorTest::::calendarDateIsBetweenNowInValid()","892":"ValidatorTest::::nameEndsWithInValid()","893":"ValidatorTest::::nameEndsWithInValid()","894":"ValidatorTest::::nameEndsWithInValid()","895":"ValidatorTest::::nameEndsWithInValid()","896":"ValidatorTest::::nameEndsWithInValid()","897":"ValidatorTest::::nameEndsWithInValid()","898":"ValidatorTest::::nameEndsWithInValid()","899":"ValidatorTest::::nameEndsWithInValid()","900":"ValidatorTest::::nameEndsWithInValid()","901":"ValidatorTest::::nameEndsWithInValid()","902":"ValidatorTest::::nameEndsWithInValid()","903":"ValidatorTest::::nameEndsWithInValid()","904":"ValidatorTest::::nameEndsWithInValid()","906":"ValidatorTest::::timeIsBeforeNowValid()","907":"ValidatorTest::::timeIsBeforeNowValid()","908":"ValidatorTest::::timeIsBeforeNowValid()","909":"ValidatorTest::::timeIsBeforeNowValid()","910":"ValidatorTest::::timeIsBeforeNowValid()","911":"ValidatorTest::::timeIsBeforeNowValid()","912":"ValidatorTest::::timeIsBeforeNowValid()","913":"ValidatorTest::::timeIsBeforeNowValid()","914":"ValidatorTest::::timeIsBeforeNowValid()","915":"ValidatorTest::::timeIsBeforeNowValid()","916":"ValidatorTest::::timeIsBeforeNowValid()","917":"ValidatorTest::::timeIsBeforeNowValid()","918":"ValidatorTest::::timeIsBeforeNowValid()","919":"ValidatorTest::::timeIsBeforeNowValid()","921":"ValidatorTest::::timeIsBeforeNowInValid()","922":"ValidatorTest::::timeIsBeforeNowInValid()","923":"ValidatorTest::::timeIsBeforeNowInValid()","924":"ValidatorTest::::timeIsBeforeNowInValid()","925":"ValidatorTest::::timeIsBeforeNowInValid()","926":"ValidatorTest::::timeIsBeforeNowInValid()","927":"ValidatorTest::::timeIsBeforeNowInValid()","928":"ValidatorTest::::timeIsBeforeNowInValid()","929":"ValidatorTest::::timeIsBeforeNowInValid()","930":"ValidatorTest::::timeIsBeforeNowInValid()","931":"ValidatorTest::::timeIsBeforeNowInValid()","932":"ValidatorTest::::timeIsBeforeNowInValid()","933":"ValidatorTest::::timeIsBeforeNowInValid()","934":"ValidatorTest::::timeIsBeforeNowInValid()","935":"ValidatorTest::::timeIsBeforeNowInValid()","936":"ValidatorTest::::timeIsBeforeNowInValid()","937":"ValidatorTest::::timeIsBeforeNowInValid()","939":"ValidatorTest::::timeIsAfterNowInValid()","940":"ValidatorTest::::timeIsAfterNowInValid()","941":"ValidatorTest::::timeIsAfterNowInValid()","942":"ValidatorTest::::timeIsAfterNowInValid()","943":"ValidatorTest::::timeIsAfterNowInValid()","944":"ValidatorTest::::timeIsAfterNowInValid()","945":"ValidatorTest::::timeIsAfterNowInValid()","946":"ValidatorTest::::timeIsAfterNowInValid()","947":"ValidatorTest::::timeIsAfterNowInValid()","948":"ValidatorTest::::timeIsAfterNowInValid()","949":"ValidatorTest::::timeIsAfterNowInValid()","950":"ValidatorTest::::timeIsAfterNowInValid()","951":"ValidatorTest::::timeIsAfterNowInValid()","952":"ValidatorTest::::timeIsAfterNowInValid()","953":"ValidatorTest::::timeIsAfterNowInValid()","954":"ValidatorTest::::timeIsAfterNowInValid()","955":"ValidatorTest::::timeIsAfterNowInValid()","957":"ValidatorTest::::timeIsAfterNowValid()","958":"ValidatorTest::::timeIsAfterNowValid()","959":"ValidatorTest::::timeIsAfterNowValid()","960":"ValidatorTest::::timeIsAfterNowValid()","961":"ValidatorTest::::timeIsAfterNowValid()","962":"ValidatorTest::::timeIsAfterNowValid()","963":"ValidatorTest::::timeIsAfterNowValid()","964":"ValidatorTest::::timeIsAfterNowValid()","965":"ValidatorTest::::timeIsAfterNowValid()","966":"ValidatorTest::::timeIsAfterNowValid()","967":"ValidatorTest::::timeIsAfterNowValid()","968":"ValidatorTest::::timeIsAfterNowValid()","969":"ValidatorTest::::timeIsAfterNowValid()","970":"ValidatorTest::::timeIsAfterNowValid()","972":"ValidatorTest::::timeIsBetweenNowValid()","973":"ValidatorTest::::timeIsBetweenNowValid()","974":"ValidatorTest::::timeIsBetweenNowValid()","975":"ValidatorTest::::timeIsBetweenNowValid()","976":"ValidatorTest::::timeIsBetweenNowValid()","977":"ValidatorTest::::timeIsBetweenNowValid()","978":"ValidatorTest::::timeIsBetweenNowValid()","979":"ValidatorTest::::timeIsBetweenNowValid()","980":"ValidatorTest::::timeIsBetweenNowValid()","981":"ValidatorTest::::timeIsBetweenNowValid()","982":"ValidatorTest::::timeIsBetweenNowValid()","983":"ValidatorTest::::timeIsBetweenNowValid()","984":"ValidatorTest::::timeIsBetweenNowValid()","985":"ValidatorTest::::timeIsBetweenNowValid()","986":"ValidatorTest::::timeIsBetweenNowValid()","987":"ValidatorTest::::timeIsBetweenNowValid()","988":"ValidatorTest::::timeIsBetweenNowValid()","990":"ValidatorTest::::timeIsBetweenNowEqualInValid()","991":"ValidatorTest::::timeIsBetweenNowEqualInValid()","992":"ValidatorTest::::timeIsBetweenNowEqualInValid()","993":"ValidatorTest::::timeIsBetweenNowEqualInValid()","994":"ValidatorTest::::timeIsBetweenNowEqualInValid()","995":"ValidatorTest::::timeIsBetweenNowEqualInValid()","996":"ValidatorTest::::timeIsBetweenNowEqualInValid()","997":"ValidatorTest::::timeIsBetweenNowEqualInValid()","998":"ValidatorTest::::timeIsBetweenNowEqualInValid()","999":"ValidatorTest::::timeIsBetweenNowEqualInValid()","1000":"ValidatorTest::::timeIsBetweenNowEqualInValid()","1001":"ValidatorTest::::timeIsBetweenNowEqualInValid()","1002":"ValidatorTest::::timeIsBetweenNowEqualInValid()","1003":"ValidatorTest::::timeIsBetweenNowEqualInValid()","1004":"ValidatorTest::::timeIsBetweenNowEqualInValid()","1005":"ValidatorTest::::timeIsBetweenNowEqualInValid()","1006":"ValidatorTest::::timeIsBetweenNowEqualInValid()","1007":"ValidatorTest::::timeIsBetweenNowEqualInValid()","1009":"ValidatorTest::::timeIsBetweenNowInValid()","1010":"ValidatorTest::::timeIsBetweenNowInValid()","1011":"ValidatorTest::::timeIsBetweenNowInValid()","1012":"ValidatorTest::::timeIsBetweenNowInValid()","1013":"ValidatorTest::::timeIsBetweenNowInValid()","1014":"ValidatorTest::::timeIsBetweenNowInValid()","1015":"ValidatorTest::::timeIsBetweenNowInValid()","1016":"ValidatorTest::::timeIsBetweenNowInValid()","1017":"ValidatorTest::::timeIsBetweenNowInValid()","1018":"ValidatorTest::::timeIsBetweenNowInValid()","1019":"ValidatorTest::::timeIsBetweenNowInValid()","1020":"ValidatorTest::::timeIsBetweenNowInValid()","1021":"ValidatorTest::::timeIsBetweenNowInValid()","1022":"ValidatorTest::::timeIsBetweenNowInValid()","1023":"ValidatorTest::::timeIsBetweenNowInValid()","1024":"ValidatorTest::::timeIsBetweenNowInValid()","1025":"ValidatorTest::::timeIsBetweenNowInValid()","1026":"ValidatorTest::::timeIsBetweenNowInValid()","1027":"ValidatorTest::::timeIsBetweenNowInValid()","1028":"ValidatorTest::::timeIsBetweenNowInValid()","1030":"ValidatorTest::::futureValid()","1031":"ValidatorTest::::futureValid()","1032":"ValidatorTest::::futureValid()","1033":"ValidatorTest::::futureValid()","1034":"ValidatorTest::::futureValid()","1035":"ValidatorTest::::futureValid()","1036":"ValidatorTest::::futureValid()","1037":"ValidatorTest::::futureValid()","1038":"ValidatorTest::::futureValid()","1039":"ValidatorTest::::futureValid()","1040":"ValidatorTest::::futureValid()","1041":"ValidatorTest::::futureValid()","1043":"ValidatorTest::::futureInValid()","1044":"ValidatorTest::::futureInValid()","1045":"ValidatorTest::::futureInValid()","1046":"ValidatorTest::::futureInValid()","1047":"ValidatorTest::::futureInValid()","1048":"ValidatorTest::::futureInValid()","1049":"ValidatorTest::::futureInValid()","1050":"ValidatorTest::::futureInValid()","1051":"ValidatorTest::::futureInValid()","1052":"ValidatorTest::::futureInValid()","1053":"ValidatorTest::::futureInValid()","1054":"ValidatorTest::::futureInValid()","1055":"ValidatorTest::::futureInValid()","1056":"ValidatorTest::::futureInValid()","1057":"ValidatorTest::::futureInValid()","1059":"ValidatorTest::::pastValid()","1060":"ValidatorTest::::pastValid()","1061":"ValidatorTest::::pastValid()","1062":"ValidatorTest::::pastValid()","1063":"ValidatorTest::::pastValid()","1064":"ValidatorTest::::pastValid()","1065":"ValidatorTest::::pastValid()","1066":"ValidatorTest::::pastValid()","1067":"ValidatorTest::::pastValid()","1068":"ValidatorTest::::pastValid()","1069":"ValidatorTest::::pastValid()","1070":"ValidatorTest::::pastValid()","1072":"ValidatorTest::::pastInValid()","1073":"ValidatorTest::::pastInValid()","1074":"ValidatorTest::::pastInValid()","1075":"ValidatorTest::::pastInValid()","1076":"ValidatorTest::::pastInValid()","1077":"ValidatorTest::::pastInValid()","1078":"ValidatorTest::::pastInValid()","1079":"ValidatorTest::::pastInValid()","1080":"ValidatorTest::::pastInValid()","1081":"ValidatorTest::::pastInValid()","1082":"ValidatorTest::::pastInValid()","1083":"ValidatorTest::::pastInValid()","1084":"ValidatorTest::::pastInValid()","1085":"ValidatorTest::::pastInValid()","1086":"ValidatorTest::::pastInValid()","1088":"ValidatorTest::::validator()","1089":"ValidatorTest::::validator()","1090":"ValidatorTest::::validator()","1091":"ValidatorTest::::validator()","1092":"ValidatorTest::::validator()","1093":"ValidatorTest::::validator()","1094":"ValidatorTest::::validator()","1095":"ValidatorTest::::validator()","1096":"ValidatorTest::::validator()","1097":"ValidatorTest::::validator()","1098":"ValidatorTest::::validator()","1099":"ValidatorTest::::validator()","1100":"ValidatorTest::::validator()","1101":"ValidatorTest::::validator()","1102":"ValidatorTest::::validator()"},"tests":[{"test_lines":[42,62],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[64,81],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[83,96],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[98,113],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[115,144],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[146,175],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[177,194],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[196,212],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[214,226],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[228,242],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[244,253],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[255,276],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,114,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,266,268,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[278,298],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[300,316],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[318,338],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[340,351],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[353,361],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[363,384],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,114,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,266,268,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[386,417],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,114,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,266,268,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[419,447],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,114,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,266,268,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[449,462],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[464,476],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[478,492],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[494,505],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[507,521],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[523,536],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,194,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[538,573],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,194,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[575,611],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,194,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[613,629],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[631,635],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[637,643],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[645,676],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,114,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,266,268,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[678,687],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[689,700],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[702,711],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[713,724],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[726,740],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[742,751],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[753,770],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[772,789],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[791,805],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[807,823],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[825,837],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[839,848],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[850,868],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[870,890],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[892,904],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[906,919],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[921,937],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[939,955],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[957,970],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[972,988],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[990,1007],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[1009,1028],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[1030,1041],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[1043,1057],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[1059,1070],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,179,182,183,184,191,192,193,196,197,198,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[1072,1086],"covered_lines":[53,72,74,80,81,82,83,84,85,86,87,88,90,150,159,160,169,170,171,172,173,179,182,183,184,191,192,193,196,197,198,199,200,201,202,203,205,206,207,208,209,210,212,219,220,221,249,269],"label":"Validator::::validate(T,java.lang.String,int,java.util.Locale,am.ik.yavi.core.ConstraintContext)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/core/ConstraintViolationsException.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.List;\n","import java.util.stream.Collectors;\n","\n","/**\n"," * @since 0.3.0\n"," */\n","public class ConstraintViolationsException extends RuntimeException {\n","\tprivate final ConstraintViolations violations;\n","\n","\tpublic ConstraintViolationsException(String message,\n","\t\t\tList<ConstraintViolation> violations) {\n","\t\tsuper(message);\n","\t\tthis.violations = ConstraintViolations.of(violations);\n","\t}\n","\n","\tpublic ConstraintViolationsException(List<ConstraintViolation> violations) {\n","\t\tthis(\"Constraint violations found!\" + System.lineSeparator()\n","\t\t\t\t+ ConstraintViolations.of(violations).violations().stream()\n","\t\t\t\t\t\t.map(ConstraintViolation::message).map(s -> \"* \" + s)\n","\t\t\t\t\t\t.collect(Collectors.joining(System.lineSeparator())),\n","\t\t\t\tviolations);\n","\t}\n","\n","\tpublic ConstraintViolations violations() {\n","\t\treturn violations;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Locale;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","import am.ik.yavi.message.SimpleMessageFormatter;\n","\n","class ConstraintViolationsExceptionTest {\n","\n","\t@Test\n","\tvoid customMessage() {\n","\t\tfinal ConstraintViolations violations = new ConstraintViolations();\n","\t\tfinal SimpleMessageFormatter messageFormatter = new SimpleMessageFormatter();\n","\t\tviolations.add(new ConstraintViolation(\"name1\", \"key\", \"{0} is invalid.\",\n","\t\t\t\tnew Object[] { \"a\" }, messageFormatter, Locale.ENGLISH));\n","\t\tfinal ConstraintViolationsException exception = new ConstraintViolationsException(\n","\t\t\t\t\"error!\", violations);\n","\t\tassertThat(exception.getMessage()).isEqualTo(\"error!\");\n","\t}\n","\n","\t@Test\n","\tvoid defaultMessage() {\n","\t\tfinal ConstraintViolations violations = new ConstraintViolations();\n","\t\tfinal SimpleMessageFormatter messageFormatter = new SimpleMessageFormatter();\n","\t\tviolations.add(new ConstraintViolation(\"name1\", \"key\", \"{0} is invalid.\",\n","\t\t\t\tnew Object[] { \"a\" }, messageFormatter, Locale.ENGLISH));\n","\t\tfinal ConstraintViolationsException exception = new ConstraintViolationsException(\n","\t\t\t\tviolations);\n","\t\tassertThat(exception.getMessage()).isEqualTo(\"Constraint violations found!\"\n","\t\t\t\t+ System.lineSeparator() + \"* a is invalid.\");\n","\t}\n","}"],"method_lines_dic":{"ConstraintViolationsException::::violations()":[41,43]},"test_method_lines_dic":{"ConstraintViolationsExceptionTest::::customMessage()":[28,37],"ConstraintViolationsExceptionTest::::defaultMessage()":[39,49]},"reverse_method_lines_dic":{"41":"ConstraintViolationsException::::violations()","42":"ConstraintViolationsException::::violations()","43":"ConstraintViolationsException::::violations()"},"test_reverse_method_lines_dic":{"28":"ConstraintViolationsExceptionTest::::customMessage()","29":"ConstraintViolationsExceptionTest::::customMessage()","30":"ConstraintViolationsExceptionTest::::customMessage()","31":"ConstraintViolationsExceptionTest::::customMessage()","32":"ConstraintViolationsExceptionTest::::customMessage()","33":"ConstraintViolationsExceptionTest::::customMessage()","34":"ConstraintViolationsExceptionTest::::customMessage()","35":"ConstraintViolationsExceptionTest::::customMessage()","36":"ConstraintViolationsExceptionTest::::customMessage()","37":"ConstraintViolationsExceptionTest::::customMessage()","39":"ConstraintViolationsExceptionTest::::defaultMessage()","40":"ConstraintViolationsExceptionTest::::defaultMessage()","41":"ConstraintViolationsExceptionTest::::defaultMessage()","42":"ConstraintViolationsExceptionTest::::defaultMessage()","43":"ConstraintViolationsExceptionTest::::defaultMessage()","44":"ConstraintViolationsExceptionTest::::defaultMessage()","45":"ConstraintViolationsExceptionTest::::defaultMessage()","46":"ConstraintViolationsExceptionTest::::defaultMessage()","47":"ConstraintViolationsExceptionTest::::defaultMessage()","48":"ConstraintViolationsExceptionTest::::defaultMessage()","49":"ConstraintViolationsExceptionTest::::defaultMessage()"},"tests":[{"test_lines":[28,37],"covered_lines":[29,30,31],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[39,49],"covered_lines":[29,30,31,34,35,36,37,39],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/core/NestedValidator.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Locale;\n","import java.util.function.Function;\n","\n","public class NestedValidator<T, N> implements Validatable<T> {\n","\tprivate final Function<T, N> nested;\n","\n","\tprivate final Validatable<N> validator;\n","\n","\tprivate final String prefix;\n","\n","\tpublic NestedValidator(Function<T, N> nested, Validatable<N> validator,\n","\t\t\tString prefix) {\n","\t\tthis.nested = nested;\n","\t\tthis.prefix = prefix;\n","\t\tthis.validator = prefixedValidatorIfNeeded(validator, prefix);\n","\t}\n","\n","\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n","\tprivate Validatable<N> prefixedValidatorIfNeeded(Validatable<N> validator,\n","\t\t\tString prefix) {\n","\t\tif (validator instanceof NestedValidator) {\n","\t\t\tfinal NestedValidator<?, N> nestedValidator = (NestedValidator<?, N>) validator;\n","\t\t\treturn new NestedValidator(nestedValidator.nested, nestedValidator.validator,\n","\t\t\t\t\tprefix);\n","\t\t}\n","\t\treturn (validator instanceof Validator)\n","\t\t\t\t? ((Validator<N>) validator).prefixed(prefix)\n","\t\t\t\t: validator;\n","\t}\n","\n","\t@Override\n","\tpublic ConstraintViolations validate(T target, Locale locale,\n","\t\t\tConstraintContext constraintContext) {\n","\t\tfinal N n = this.nested.apply(target);\n","\t\tif (n != null) {\n","\t\t\treturn this.validator.validate(n, locale, constraintContext);\n","\t\t}\n","\t\telse {\n","\t\t\treturn new ConstraintViolations();\n","\t\t}\n","\t}\n","\n","\tpublic String getPrefix() {\n","\t\treturn prefix;\n","\t}\n","\n","\t/**\n","\t * @since 0.13.1\n","\t */\n","\t@Override\n","\tpublic Validatable<T> failFast(boolean failFast) {\n","\t\tfinal Validatable<N> validatable = this.validator.failFast(failFast);\n","\t\treturn new NestedValidator<>(this.nested, validatable, prefix);\n","\t}\n","\n","\t/**\n","\t * @since 0.13.1\n","\t */\n","\t@Override\n","\tpublic boolean isFailFast() {\n","\t\treturn this.validator.isFailFast();\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import am.ik.yavi.Address;\n","import am.ik.yavi.Country;\n","import am.ik.yavi.PhoneNumber;\n","import am.ik.yavi.builder.ValidatorBuilder;\n","import am.ik.yavi.constraint.CharSequenceConstraint;\n","import org.junit.jupiter.api.Test;\n","\n","import java.util.List;\n","\n","import static am.ik.yavi.core.Group.CREATE;\n","import static am.ik.yavi.core.Group.UPDATE;\n","import static java.util.Collections.singletonList;\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.SoftAssertions.assertSoftly;\n","\n","public class NestedValidatorTest extends AbstractNestedValidatorTest {\n","\t@Override\n","\tprotected Validator<Address> validator() {\n","\t\treturn ValidatorBuilder.<Address> of()\n","\t\t\t\t.constraint(Address::street, \"street\", c -> c.notBlank().lessThan(32))\n","\t\t\t\t.nest(Address::country, \"country\", Country.validator())\n","\t\t\t\t.nestIfPresent(Address::phoneNumber, \"phoneNumber\",\n","\t\t\t\t\t\tPhoneNumber.validator())\n","\t\t\t\t.build();\n","\t}\n","\n","\tprivate ConstraintCondition<IntRange> whenAllOfNumbersNotNull = (r,\n","\t\t\tg) -> r.small != null && r.big != null;\n","\n","\tprivate Validator<IntRange> thenCompareNumbers = ValidatorBuilder.of(IntRange.class)\n","\t\t\t.constraintOnTarget(r -> r.big > r.small, \"big\", null,\n","\t\t\t\t\t\"[big] must be greater than [small]\")\n","\t\t\t.build();\n","\n","\tprivate Validator<IntRange> intRangeValidator = ValidatorBuilder.of(IntRange.class)\n","\t\t\t.constraint((ValidatorBuilder.ToInteger<IntRange>) r -> r.small, \"small\",\n","\t\t\t\t\tConstraint::notNull)\n","\t\t\t.constraint((ValidatorBuilder.ToInteger<IntRange>) r -> r.big, \"big\",\n","\t\t\t\t\tConstraint::notNull)\n","\t\t\t.constraintOnCondition(whenAllOfNumbersNotNull, thenCompareNumbers).build();\n","\n","\tprivate Validator<NestedObject> nestedObjectValidator = ValidatorBuilder\n","\t\t\t.<NestedObject> of()\n","\t\t\t.constraintOnCondition(CREATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(NestedObject::getId, \"id\", Constraint::isNull))\n","\t\t\t.constraintOnCondition(UPDATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(NestedObject::getId, \"id\", Constraint::notNull))\n","\t\t\t.constraint(NestedObject::getText, \"text\", CharSequenceConstraint::notBlank)\n","\t\t\t.build();\n","\n","\tprivate Validator<MainObject> mainObjectValidator = ValidatorBuilder.<MainObject> of()\n","\t\t\t.constraintOnCondition(CREATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(MainObject::getId, \"id\", Constraint::isNull))\n","\t\t\t.constraintOnCondition(UPDATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(MainObject::getId, \"id\", Constraint::notNull))\n","\t\t\t.nest(MainObject::getNested, \"nested\", nestedObjectValidator).build();\n","\n","\tprivate Validator<MainObject> mainObjectIfPresentValidator = ValidatorBuilder\n","\t\t\t.<MainObject> of()\n","\t\t\t.constraintOnCondition(CREATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(MainObject::getId, \"id\", Constraint::isNull))\n","\t\t\t.constraintOnCondition(UPDATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(MainObject::getId, \"id\", Constraint::notNull))\n","\t\t\t.nestIfPresent(MainObject::getNested, \"nested\", nestedObjectValidator)\n","\t\t\t.build();\n","\n","\tprivate Validator<NestedObject> nestedObjectValidator_GH29 = ValidatorBuilder\n","\t\t\t.<NestedObject> of()\n","\t\t\t.constraintOnCondition(CREATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(NestedObject::getId, \"id\", Constraint::isNull))\n","\t\t\t.constraintOnCondition(UPDATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(NestedObject::getId, \"id\", Constraint::notNull))\n","\t\t\t.constraint(NestedObject::getText, \"text\", CharSequenceConstraint::notBlank)\n","\t\t\t.build();\n","\n","\tprivate Validator<MainObject> mainObjectValidator_GH29 = ValidatorBuilder\n","\t\t\t.<MainObject> of()\n","\t\t\t.constraintOnCondition(CREATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(MainObject::getId, \"id\", Constraint::isNull))\n","\t\t\t.constraintOnCondition(UPDATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(MainObject::getId, \"id\", Constraint::notNull))\n","\t\t\t.constraintOnCondition(CREATE.toCondition(),\n","\t\t\t\t\tb -> b.nest(MainObject::getNested, \"nested\",\n","\t\t\t\t\t\t\tnestedObjectValidator_GH29))\n","\t\t\t.constraintOnCondition(UPDATE.toCondition(), b -> b\n","\t\t\t\t\t.nest(MainObject::getNested, \"nested\", nestedObjectValidator_GH29))\n","\t\t\t.build();\n","\n","\tprivate Validator<NestedObject> nestedObjectValidator_GH90 = ValidatorBuilder\n","\t\t\t.<NestedObject> of()\n","\t\t\t.constraintOnCondition(CREATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(NestedObject::getId, \"id\", Constraint::isNull))\n","\t\t\t.constraintOnCondition(UPDATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(NestedObject::getId, \"id\", Constraint::notNull))\n","\t\t\t.constraint(NestedObject::getText, \"text\", CharSequenceConstraint::notBlank)\n","\t\t\t.forEach(NestedObject::getIntRanges, \"intRanges\", intRangeValidator).build();\n","\n","\tprivate Validator<MainObject> mainObjectValidator_GH90 = ValidatorBuilder\n","\t\t\t.<MainObject> of()\n","\t\t\t.constraintOnCondition(CREATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(MainObject::getId, \"id\", Constraint::isNull))\n","\t\t\t.constraintOnCondition(UPDATE.toCondition(),\n","\t\t\t\t\tb -> b.constraint(MainObject::getId, \"id\", Constraint::notNull))\n","\t\t\t.nest(MainObject::getNested, \"nested\", nestedObjectValidator_GH90).build();\n","\n","\t@Test\n","\tvoid shouldBeInValid_GH28() {\n","\t\tMainObject target = new MainObject();\n","\n","\t\tConstraintViolations result = mainObjectValidator.validate(target, CREATE);\n","\n","\t\tassertThat(result.isValid()).isFalse();\n","\t\tassertThat(result.get(0).name()).isEqualTo(\"nested\");\n","\t\tassertThat(result.get(0).messageKey()).isEqualTo(\"object.notNull\");\n","\t}\n","\n","\t@Test\n","\tvoid shouldBeInvalid_GH24() {\n","\t\tMainObject target = new MainObject();\n","\t\ttarget.setId(1L);\n","\n","\t\tNestedObject nested = new NestedObject();\n","\t\tnested.setId(10L);\n","\t\ttarget.setNested(nested);\n","\n","\t\tConstraintViolations result = mainObjectValidator.validate(target, CREATE);\n","\n","\t\tassertThat(result.isValid()).isFalse();\n","\t\tassertThat(result).hasSize(3);\n","\t\tassertThat(result.get(0).name()).isEqualTo(\"nested.text\");\n","\t\tassertThat(result.get(1).name()).isEqualTo(\"id\");\n","\t\tassertThat(result.get(2).name()).isEqualTo(\"nested.id\");\n","\t}\n","\n","\t@Test\n","\tvoid shouldBeInvalid_GH29() {\n","\t\tfinal MainObject target = new MainObject();\n","\t\ttarget.setId(1L);\n","\n","\t\tfinal NestedObject nested = new NestedObject();\n","\t\tnested.setId(1L);\n","\t\ttarget.setNested(nested);\n","\n","\t\tfinal ConstraintViolations result = mainObjectValidator_GH29.validate(target,\n","\t\t\t\tCREATE);\n","\n","\t\tassertThat(result.isValid()).isFalse();\n","\t\tassertThat(result).hasSize(3);\n","\t}\n","\n","\t@Test\n","\tvoid shouldBeValid_GH24() {\n","\t\tMainObject target = new MainObject();\n","\t\ttarget.setId(1L);\n","\n","\t\tNestedObject nested = new NestedObject();\n","\t\tnested.setId(1L);\n","\t\tnested.setText(\"test\");\n","\t\ttarget.setNested(nested);\n","\n","\t\tConstraintViolations result = mainObjectValidator.validate(target, UPDATE);\n","\n","\t\tassertThat(result.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid testNested_GH20() {\n","\t\tValidator<Nested> validator = ValidatorBuilder.of(Nested.class)\n","\t\t\t\t.nest(n -> n.intRange, \"intRange\", intRangeValidator).build();\n","\n","\t\tNested nested = new Nested(new IntRange(1, 0));\n","\n","\t\tfinal ConstraintViolations result = validator.validate(nested);\n","\t\tassertThat(result.isValid()).isFalse();\n","\t\tassertThat(result.get(0).name()).isEqualTo(\"intRange.big\");\n","\t}\n","\n","\t@Test\n","\tvoid testStandAlone_GH20() {\n","\t\tIntRange intRange = new IntRange(1, 0);\n","\n","\t\tfinal ConstraintViolations result = intRangeValidator.validate(intRange);\n","\t\tassertThat(result.isValid()).isFalse();\n","\t\tassertThat(result.get(0).name()).isEqualTo(\"big\");\n","\t}\n","\n","\t@Test\n","\tvoid shouldBeValid_GH28() {\n","\t\tMainObject target = new MainObject();\n","\n","\t\tConstraintViolations result = mainObjectIfPresentValidator.validate(target,\n","\t\t\t\tCREATE);\n","\n","\t\tassertThat(result.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid shouldBeValid_GH29() {\n","\t\tfinal MainObject target = new MainObject();\n","\t\ttarget.setId(1L);\n","\n","\t\tfinal NestedObject nested = new NestedObject();\n","\t\tnested.setId(1L);\n","\t\tnested.setText(\"test\");\n","\t\ttarget.setNested(nested);\n","\n","\t\tfinal ConstraintViolations result = mainObjectValidator_GH29.validate(target,\n","\t\t\t\tUPDATE);\n","\n","\t\tassertThat(result.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid shouldBeValid_GH90() {\n","\t\tMainObject target = new MainObject();\n","\n","\t\tNestedObject nested = new NestedObject();\n","\t\tnested.setText(\"test\");\n","\t\tnested.setIntRanges(singletonList(new IntRange(1, 2)));\n","\n","\t\ttarget.setNested(nested);\n","\n","\t\tConstraintViolations result = mainObjectValidator_GH90.validate(target, CREATE);\n","\n","\t\tassertThat(result.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid shouldBeInvalid_GH90() {\n","\t\tMainObject target = new MainObject();\n","\n","\t\tNestedObject nested = new NestedObject();\n","\t\tnested.setText(\"test\");\n","\t\tnested.setIntRanges(singletonList(new IntRange(null, 2)));\n","\n","\t\ttarget.setNested(nested);\n","\n","\t\tConstraintViolations result = mainObjectValidator_GH90.validate(target, CREATE);\n","\n","\t\tassertThat(result.isValid()).isFalse();\n","\t\tassertThat(result).extracting(ConstraintViolation::name)\n","\t\t\t\t.containsExactly(\"nested.intRanges[0].small\");\n","\t}\n","\n","\t@org.junit.jupiter.api.Nested\n","\tclass DeepNestingGH60Tests {\n","\t\t@Test\n","\t\tvoid shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired() {\n","\t\t\tfinal Validator<A> validator = ValidatorBuilder.of(A.class)\n","\t\t\t\t\t.nest(A::getB, \"b\", b -> b.nest(B::getC, \"c\",\n","\t\t\t\t\t\t\tc -> c.nest(C::getD, \"d\", d -> d.nest(D::getE, \"e\",\n","\t\t\t\t\t\t\t\t\te -> e._integer(E::getValue, \"value\",\n","\t\t\t\t\t\t\t\t\t\t\tvalue -> value.greaterThanOrEqual(100))))))\n","\t\t\t\t\t.build();\n","\n","\t\t\tassertSoftly(softly -> {\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(null)).isValid())\n","\t\t\t\t\t\t.as(\"1-layer nested object is null\").isFalse();\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(new B(null))).isValid())\n","\t\t\t\t\t\t.as(\"2-layer nested object is null\").isFalse();\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(new B(new C(null)))).isValid())\n","\t\t\t\t\t\t.as(\"3-layer nested object is null\").isFalse();\n","\t\t\t\tsoftly.assertThat(validator\n","\t\t\t\t\t\t.validate(new A(new B(new C(new D(null, null))))).isValid())\n","\t\t\t\t\t\t.as(\"4-layer nested object is null (when it is required)\")\n","\t\t\t\t\t\t.isFalse();\n","\t\t\t\tsoftly.assertThat(validator\n","\t\t\t\t\t\t.validate(new A(new B(new C(new D(new E(100), null))))).isValid())\n","\t\t\t\t\t\t.as(\"5-layer constraint is valid\").isTrue();\n","\t\t\t});\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional() {\n","\t\t\tfinal Validator<A> validator = ValidatorBuilder.of(A.class)\n","\t\t\t\t\t.nest(A::getB, \"b\", b -> b.nestIfPresent(B::getC, \"c\",\n","\t\t\t\t\t\t\tc -> c.nest(C::getD, \"d\", d -> d.nestIfPresent(D::getE, \"e\",\n","\t\t\t\t\t\t\t\t\te -> e._integer(E::getValue, \"value\",\n","\t\t\t\t\t\t\t\t\t\t\tvalue -> value.greaterThanOrEqual(100))))))\n","\t\t\t\t\t.build();\n","\n","\t\t\tassertSoftly(softly -> {\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(null)).isValid())\n","\t\t\t\t\t\t.as(\"1-layer nested object is null\").isFalse();\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(new B(null))).isValid())\n","\t\t\t\t\t\t.as(\"2-layer nested object is null (when it is optional)\")\n","\t\t\t\t\t\t.isTrue();\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(new B(new C(null)))).isValid())\n","\t\t\t\t\t\t.as(\"3-layer nested object is null\").isFalse();\n","\t\t\t\tsoftly.assertThat(validator\n","\t\t\t\t\t\t.validate(new A(new B(new C(new D(null, null))))).isValid())\n","\t\t\t\t\t\t.as(\"4-layer nested object is null (when it is optional)\")\n","\t\t\t\t\t\t.isTrue();\n","\t\t\t\tsoftly.assertThat(validator\n","\t\t\t\t\t\t.validate(new A(new B(new C(new D(new E(100), null))))).isValid())\n","\t\t\t\t\t\t.as(\"5-layer constraint is valid\").isTrue();\n","\t\t\t});\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed() {\n","\t\t\tfinal Validator<A> validator = ValidatorBuilder.of(A.class)\n","\t\t\t\t\t.nest(A::getB, \"b\", b -> b.nest(B::getC, \"c\",\n","\t\t\t\t\t\t\tc -> c.nest(C::getD, \"d\", d -> d.forEach(D::getList, \"list\",\n","\t\t\t\t\t\t\t\t\te -> e._integer(E::getValue, \"value\",\n","\t\t\t\t\t\t\t\t\t\t\tvalue -> value.greaterThanOrEqual(100))))))\n","\t\t\t\t\t.build();\n","\n","\t\t\tassertSoftly(softly -> {\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(null)).isValid())\n","\t\t\t\t\t\t.as(\"1-layer nested object is null\").isFalse();\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(new B(null))).isValid())\n","\t\t\t\t\t\t.as(\"2-layer nested object is null\").isFalse();\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(new B(new C(null)))).isValid())\n","\t\t\t\t\t\t.as(\"3-layer nested object is null\").isFalse();\n","\t\t\t\tsoftly.assertThat(validator\n","\t\t\t\t\t\t.validate(new A(new B(new C(new D(null, null))))).isValid())\n","\t\t\t\t\t\t.as(\"4-layer nested object is null (when it is required)\")\n","\t\t\t\t\t\t.isFalse();\n","\t\t\t\tsoftly.assertThat(validator\n","\t\t\t\t\t\t.validate(new A(\n","\t\t\t\t\t\t\t\tnew B(new C(new D(null, singletonList(new E(100)))))))\n","\t\t\t\t\t\t.isValid()).as(\"5-layer constraint is valid\").isTrue();\n","\t\t\t});\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed() {\n","\t\t\tfinal Validator<A> validator = ValidatorBuilder.of(A.class).nest(A::getB, \"b\",\n","\t\t\t\t\tb -> b.nestIfPresent(B::getC, \"c\", c -> c.nest(C::getD, \"d\",\n","\t\t\t\t\t\t\td -> d.forEachIfPresent(D::getList, \"list\",\n","\t\t\t\t\t\t\t\t\te -> e._integer(E::getValue, \"value\",\n","\t\t\t\t\t\t\t\t\t\t\tvalue -> value.greaterThanOrEqual(100))))))\n","\t\t\t\t\t.build();\n","\n","\t\t\tassertSoftly(softly -> {\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(null)).isValid())\n","\t\t\t\t\t\t.as(\"1-layer nested object is null\").isFalse();\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(new B(null))).isValid())\n","\t\t\t\t\t\t.as(\"2-layer nested object is null (when it is optional)\")\n","\t\t\t\t\t\t.isTrue();\n","\t\t\t\tsoftly.assertThat(validator.validate(new A(new B(new C(null)))).isValid())\n","\t\t\t\t\t\t.as(\"3-layer nested object is null\").isFalse();\n","\t\t\t\tsoftly.assertThat(validator\n","\t\t\t\t\t\t.validate(new A(new B(new C(new D(null, null))))).isValid())\n","\t\t\t\t\t\t.as(\"4-layer nested object is null (when it is optional)\")\n","\t\t\t\t\t\t.isTrue();\n","\t\t\t\tsoftly.assertThat(validator\n","\t\t\t\t\t\t.validate(new A(\n","\t\t\t\t\t\t\t\tnew B(new C(new D(null, singletonList(new E(100)))))))\n","\t\t\t\t\t\t.isValid()).as(\"5-layer constraint is valid\").isTrue();\n","\t\t\t});\n","\t\t}\n","\t}\n","\n","\tpublic static class Nested {\n","\t\tIntRange intRange;\n","\n","\t\tNested(IntRange intRange) {\n","\t\t\tthis.intRange = intRange;\n","\t\t}\n","\t}\n","\n","\tpublic static class IntRange {\n","\t\tpublic Integer small;\n","\t\tpublic Integer big;\n","\n","\t\tIntRange(Integer small, Integer big) {\n","\t\t\tthis.small = small;\n","\t\t\tthis.big = big;\n","\t\t}\n","\t}\n","\n","\tpublic static class MainObject {\n","\t\tLong id;\n","\t\tNestedObject nested;\n","\n","\t\tpublic Long getId() {\n","\t\t\treturn id;\n","\t\t}\n","\n","\t\tpublic void setId(Long id) {\n","\t\t\tthis.id = id;\n","\t\t}\n","\n","\t\tpublic NestedObject getNested() {\n","\t\t\treturn nested;\n","\t\t}\n","\n","\t\tpublic void setNested(NestedObject nested) {\n","\t\t\tthis.nested = nested;\n","\t\t}\n","\t}\n","\n","\tpublic static class NestedObject {\n","\t\tLong id;\n","\t\tString text;\n","\t\tList<IntRange> intRanges;\n","\n","\t\tpublic Long getId() {\n","\t\t\treturn id;\n","\t\t}\n","\n","\t\tpublic void setId(Long id) {\n","\t\t\tthis.id = id;\n","\t\t}\n","\n","\t\tpublic String getText() {\n","\t\t\treturn text;\n","\t\t}\n","\n","\t\tpublic void setText(String text) {\n","\t\t\tthis.text = text;\n","\t\t}\n","\n","\t\tpublic List<IntRange> getIntRanges() {\n","\t\t\treturn intRanges;\n","\t\t}\n","\n","\t\tpublic void setIntRanges(List<IntRange> intRanges) {\n","\t\t\tthis.intRanges = intRanges;\n","\t\t}\n","\t}\n","\n","\tprivate static class A {\n","\t\tprivate final B b;\n","\n","\t\tpublic A(B b) {\n","\t\t\tthis.b = b;\n","\t\t}\n","\n","\t\tpublic B getB() {\n","\t\t\treturn b;\n","\t\t}\n","\t}\n","\n","\tprivate static class B {\n","\t\tprivate final C c;\n","\n","\t\tpublic B(C c) {\n","\t\t\tthis.c = c;\n","\t\t}\n","\n","\t\tpublic C getC() {\n","\t\t\treturn c;\n","\t\t}\n","\t}\n","\n","\tprivate static class C {\n","\t\tprivate final D d;\n","\n","\t\tpublic C(D d) {\n","\t\t\tthis.d = d;\n","\t\t}\n","\n","\t\tpublic D getD() {\n","\t\t\treturn d;\n","\t\t}\n","\t}\n","\n","\tprivate static class D {\n","\t\tprivate final E e;\n","\t\tprivate final List<E> list;\n","\n","\t\tprivate D(E e, List<E> list) {\n","\t\t\tthis.e = e;\n","\t\t\tthis.list = list;\n","\t\t}\n","\n","\t\tpublic E getE() {\n","\t\t\treturn e;\n","\t\t}\n","\n","\t\tpublic List<E> getList() {\n","\t\t\treturn list;\n","\t\t}\n","\t}\n","\n","\tprivate static class E {\n","\t\tprivate final int value;\n","\n","\t\tpublic E(int value) {\n","\t\t\tthis.value = value;\n","\t\t}\n","\n","\t\tpublic int getValue() {\n","\t\t\treturn value;\n","\t\t}\n","\t}\n","}\n"],"method_lines_dic":{"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)":[35,46],"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)":[48,58],"NestedValidator::::getPrefix()":[60,62],"NestedValidator::::failFast(boolean)":[67,71],"NestedValidator::::isFailFast()":[76,79]},"test_method_lines_dic":{"NestedValidatorTest::::validator()":[34,42],"NestedValidatorTest::::shouldBeInValid_GH28()":[123,132],"NestedValidatorTest::::shouldBeInvalid_GH24()":[134,150],"NestedValidatorTest::::shouldBeInvalid_GH29()":[152,166],"NestedValidatorTest::::shouldBeValid_GH24()":[168,181],"NestedValidatorTest::::testNested_GH20()":[183,193],"NestedValidatorTest::::testStandAlone_GH20()":[195,202],"NestedValidatorTest::::shouldBeValid_GH28()":[204,212],"NestedValidatorTest::::shouldBeValid_GH29()":[214,228],"NestedValidatorTest::::shouldBeValid_GH90()":[230,243],"NestedValidatorTest::::shouldBeInvalid_GH90()":[245,260],"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()":[264,288],"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()":[290,315],"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()":[317,342],"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()":[344,370],"NestedValidatorTest.MainObject::::getId()":[395,397],"NestedValidatorTest.MainObject::::setId(java.lang.Long)":[399,401],"NestedValidatorTest.MainObject::::getNested()":[403,405],"NestedValidatorTest.MainObject::::setNested(am.ik.yavi.core.NestedValidatorTest.NestedObject)":[407,409],"NestedValidatorTest.NestedObject::::getId()":[417,419],"NestedValidatorTest.NestedObject::::setId(java.lang.Long)":[421,423],"NestedValidatorTest.NestedObject::::getText()":[425,427],"NestedValidatorTest.NestedObject::::setText(java.lang.String)":[429,431],"NestedValidatorTest.NestedObject::::getIntRanges()":[433,435],"NestedValidatorTest.NestedObject::::setIntRanges(java.util.List<am.ik.yavi.core.NestedValidatorTest.IntRange>)":[437,439],"NestedValidatorTest.A::::getB()":[449,451],"NestedValidatorTest.B::::getC()":[461,463],"NestedValidatorTest.C::::getD()":[473,475],"NestedValidatorTest.D::::getE()":[487,489],"NestedValidatorTest.D::::getList()":[491,493],"NestedValidatorTest.E::::getValue()":[503,505]},"reverse_method_lines_dic":{"35":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","36":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","37":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","38":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","39":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","40":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","41":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","42":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","43":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","44":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","45":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","46":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)","48":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","49":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","50":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","51":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","52":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","53":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","54":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","55":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","56":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","57":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","58":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","60":"NestedValidator::::getPrefix()","61":"NestedValidator::::getPrefix()","62":"NestedValidator::::getPrefix()","67":"NestedValidator::::failFast(boolean)","68":"NestedValidator::::failFast(boolean)","69":"NestedValidator::::failFast(boolean)","70":"NestedValidator::::failFast(boolean)","71":"NestedValidator::::failFast(boolean)","76":"NestedValidator::::isFailFast()","77":"NestedValidator::::isFailFast()","78":"NestedValidator::::isFailFast()","79":"NestedValidator::::isFailFast()"},"test_reverse_method_lines_dic":{"34":"NestedValidatorTest::::validator()","35":"NestedValidatorTest::::validator()","36":"NestedValidatorTest::::validator()","37":"NestedValidatorTest::::validator()","38":"NestedValidatorTest::::validator()","39":"NestedValidatorTest::::validator()","40":"NestedValidatorTest::::validator()","41":"NestedValidatorTest::::validator()","42":"NestedValidatorTest::::validator()","123":"NestedValidatorTest::::shouldBeInValid_GH28()","124":"NestedValidatorTest::::shouldBeInValid_GH28()","125":"NestedValidatorTest::::shouldBeInValid_GH28()","126":"NestedValidatorTest::::shouldBeInValid_GH28()","127":"NestedValidatorTest::::shouldBeInValid_GH28()","128":"NestedValidatorTest::::shouldBeInValid_GH28()","129":"NestedValidatorTest::::shouldBeInValid_GH28()","130":"NestedValidatorTest::::shouldBeInValid_GH28()","131":"NestedValidatorTest::::shouldBeInValid_GH28()","132":"NestedValidatorTest::::shouldBeInValid_GH28()","134":"NestedValidatorTest::::shouldBeInvalid_GH24()","135":"NestedValidatorTest::::shouldBeInvalid_GH24()","136":"NestedValidatorTest::::shouldBeInvalid_GH24()","137":"NestedValidatorTest::::shouldBeInvalid_GH24()","138":"NestedValidatorTest::::shouldBeInvalid_GH24()","139":"NestedValidatorTest::::shouldBeInvalid_GH24()","140":"NestedValidatorTest::::shouldBeInvalid_GH24()","141":"NestedValidatorTest::::shouldBeInvalid_GH24()","142":"NestedValidatorTest::::shouldBeInvalid_GH24()","143":"NestedValidatorTest::::shouldBeInvalid_GH24()","144":"NestedValidatorTest::::shouldBeInvalid_GH24()","145":"NestedValidatorTest::::shouldBeInvalid_GH24()","146":"NestedValidatorTest::::shouldBeInvalid_GH24()","147":"NestedValidatorTest::::shouldBeInvalid_GH24()","148":"NestedValidatorTest::::shouldBeInvalid_GH24()","149":"NestedValidatorTest::::shouldBeInvalid_GH24()","150":"NestedValidatorTest::::shouldBeInvalid_GH24()","152":"NestedValidatorTest::::shouldBeInvalid_GH29()","153":"NestedValidatorTest::::shouldBeInvalid_GH29()","154":"NestedValidatorTest::::shouldBeInvalid_GH29()","155":"NestedValidatorTest::::shouldBeInvalid_GH29()","156":"NestedValidatorTest::::shouldBeInvalid_GH29()","157":"NestedValidatorTest::::shouldBeInvalid_GH29()","158":"NestedValidatorTest::::shouldBeInvalid_GH29()","159":"NestedValidatorTest::::shouldBeInvalid_GH29()","160":"NestedValidatorTest::::shouldBeInvalid_GH29()","161":"NestedValidatorTest::::shouldBeInvalid_GH29()","162":"NestedValidatorTest::::shouldBeInvalid_GH29()","163":"NestedValidatorTest::::shouldBeInvalid_GH29()","164":"NestedValidatorTest::::shouldBeInvalid_GH29()","165":"NestedValidatorTest::::shouldBeInvalid_GH29()","166":"NestedValidatorTest::::shouldBeInvalid_GH29()","168":"NestedValidatorTest::::shouldBeValid_GH24()","169":"NestedValidatorTest::::shouldBeValid_GH24()","170":"NestedValidatorTest::::shouldBeValid_GH24()","171":"NestedValidatorTest::::shouldBeValid_GH24()","172":"NestedValidatorTest::::shouldBeValid_GH24()","173":"NestedValidatorTest::::shouldBeValid_GH24()","174":"NestedValidatorTest::::shouldBeValid_GH24()","175":"NestedValidatorTest::::shouldBeValid_GH24()","176":"NestedValidatorTest::::shouldBeValid_GH24()","177":"NestedValidatorTest::::shouldBeValid_GH24()","178":"NestedValidatorTest::::shouldBeValid_GH24()","179":"NestedValidatorTest::::shouldBeValid_GH24()","180":"NestedValidatorTest::::shouldBeValid_GH24()","181":"NestedValidatorTest::::shouldBeValid_GH24()","183":"NestedValidatorTest::::testNested_GH20()","184":"NestedValidatorTest::::testNested_GH20()","185":"NestedValidatorTest::::testNested_GH20()","186":"NestedValidatorTest::::testNested_GH20()","187":"NestedValidatorTest::::testNested_GH20()","188":"NestedValidatorTest::::testNested_GH20()","189":"NestedValidatorTest::::testNested_GH20()","190":"NestedValidatorTest::::testNested_GH20()","191":"NestedValidatorTest::::testNested_GH20()","192":"NestedValidatorTest::::testNested_GH20()","193":"NestedValidatorTest::::testNested_GH20()","195":"NestedValidatorTest::::testStandAlone_GH20()","196":"NestedValidatorTest::::testStandAlone_GH20()","197":"NestedValidatorTest::::testStandAlone_GH20()","198":"NestedValidatorTest::::testStandAlone_GH20()","199":"NestedValidatorTest::::testStandAlone_GH20()","200":"NestedValidatorTest::::testStandAlone_GH20()","201":"NestedValidatorTest::::testStandAlone_GH20()","202":"NestedValidatorTest::::testStandAlone_GH20()","204":"NestedValidatorTest::::shouldBeValid_GH28()","205":"NestedValidatorTest::::shouldBeValid_GH28()","206":"NestedValidatorTest::::shouldBeValid_GH28()","207":"NestedValidatorTest::::shouldBeValid_GH28()","208":"NestedValidatorTest::::shouldBeValid_GH28()","209":"NestedValidatorTest::::shouldBeValid_GH28()","210":"NestedValidatorTest::::shouldBeValid_GH28()","211":"NestedValidatorTest::::shouldBeValid_GH28()","212":"NestedValidatorTest::::shouldBeValid_GH28()","214":"NestedValidatorTest::::shouldBeValid_GH29()","215":"NestedValidatorTest::::shouldBeValid_GH29()","216":"NestedValidatorTest::::shouldBeValid_GH29()","217":"NestedValidatorTest::::shouldBeValid_GH29()","218":"NestedValidatorTest::::shouldBeValid_GH29()","219":"NestedValidatorTest::::shouldBeValid_GH29()","220":"NestedValidatorTest::::shouldBeValid_GH29()","221":"NestedValidatorTest::::shouldBeValid_GH29()","222":"NestedValidatorTest::::shouldBeValid_GH29()","223":"NestedValidatorTest::::shouldBeValid_GH29()","224":"NestedValidatorTest::::shouldBeValid_GH29()","225":"NestedValidatorTest::::shouldBeValid_GH29()","226":"NestedValidatorTest::::shouldBeValid_GH29()","227":"NestedValidatorTest::::shouldBeValid_GH29()","228":"NestedValidatorTest::::shouldBeValid_GH29()","230":"NestedValidatorTest::::shouldBeValid_GH90()","231":"NestedValidatorTest::::shouldBeValid_GH90()","232":"NestedValidatorTest::::shouldBeValid_GH90()","233":"NestedValidatorTest::::shouldBeValid_GH90()","234":"NestedValidatorTest::::shouldBeValid_GH90()","235":"NestedValidatorTest::::shouldBeValid_GH90()","236":"NestedValidatorTest::::shouldBeValid_GH90()","237":"NestedValidatorTest::::shouldBeValid_GH90()","238":"NestedValidatorTest::::shouldBeValid_GH90()","239":"NestedValidatorTest::::shouldBeValid_GH90()","240":"NestedValidatorTest::::shouldBeValid_GH90()","241":"NestedValidatorTest::::shouldBeValid_GH90()","242":"NestedValidatorTest::::shouldBeValid_GH90()","243":"NestedValidatorTest::::shouldBeValid_GH90()","245":"NestedValidatorTest::::shouldBeInvalid_GH90()","246":"NestedValidatorTest::::shouldBeInvalid_GH90()","247":"NestedValidatorTest::::shouldBeInvalid_GH90()","248":"NestedValidatorTest::::shouldBeInvalid_GH90()","249":"NestedValidatorTest::::shouldBeInvalid_GH90()","250":"NestedValidatorTest::::shouldBeInvalid_GH90()","251":"NestedValidatorTest::::shouldBeInvalid_GH90()","252":"NestedValidatorTest::::shouldBeInvalid_GH90()","253":"NestedValidatorTest::::shouldBeInvalid_GH90()","254":"NestedValidatorTest::::shouldBeInvalid_GH90()","255":"NestedValidatorTest::::shouldBeInvalid_GH90()","256":"NestedValidatorTest::::shouldBeInvalid_GH90()","257":"NestedValidatorTest::::shouldBeInvalid_GH90()","258":"NestedValidatorTest::::shouldBeInvalid_GH90()","259":"NestedValidatorTest::::shouldBeInvalid_GH90()","260":"NestedValidatorTest::::shouldBeInvalid_GH90()","264":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","265":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","266":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","267":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","268":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","269":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","270":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","271":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","272":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","273":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","274":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","275":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","276":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","277":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","278":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","279":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","280":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","281":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","282":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","283":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","284":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","285":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","286":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","287":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","288":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsRequired()","290":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","291":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","292":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","293":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","294":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","295":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","296":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","297":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","298":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","299":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","300":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","301":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","302":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","303":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","304":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","305":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","306":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","307":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","308":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","309":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","310":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","311":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","312":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","313":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","314":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","315":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenInnerNestedObjectIsOptional()","317":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","318":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","319":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","320":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","321":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","322":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","323":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","324":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","325":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","326":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","327":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","328":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","329":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","330":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","331":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","332":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","333":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","334":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","335":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","336":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","337":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","338":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","339":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","340":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","341":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","342":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachMethodIsUsed()","344":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","345":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","346":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","347":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","348":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","349":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","350":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","351":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","352":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","353":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","354":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","355":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","356":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","357":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","358":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","359":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","360":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","361":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","362":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","363":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","364":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","365":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","366":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","367":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","368":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","369":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","370":"NestedValidatorTest.DeepNestingGH60Tests::::shouldValidateObjectWithManyLayersNestedObjectWhenForEachIfPresentMethodIsUsed()","395":"NestedValidatorTest.MainObject::::getId()","396":"NestedValidatorTest.MainObject::::getId()","397":"NestedValidatorTest.MainObject::::getId()","399":"NestedValidatorTest.MainObject::::setId(java.lang.Long)","400":"NestedValidatorTest.MainObject::::setId(java.lang.Long)","401":"NestedValidatorTest.MainObject::::setId(java.lang.Long)","403":"NestedValidatorTest.MainObject::::getNested()","404":"NestedValidatorTest.MainObject::::getNested()","405":"NestedValidatorTest.MainObject::::getNested()","407":"NestedValidatorTest.MainObject::::setNested(am.ik.yavi.core.NestedValidatorTest.NestedObject)","408":"NestedValidatorTest.MainObject::::setNested(am.ik.yavi.core.NestedValidatorTest.NestedObject)","409":"NestedValidatorTest.MainObject::::setNested(am.ik.yavi.core.NestedValidatorTest.NestedObject)","417":"NestedValidatorTest.NestedObject::::getId()","418":"NestedValidatorTest.NestedObject::::getId()","419":"NestedValidatorTest.NestedObject::::getId()","421":"NestedValidatorTest.NestedObject::::setId(java.lang.Long)","422":"NestedValidatorTest.NestedObject::::setId(java.lang.Long)","423":"NestedValidatorTest.NestedObject::::setId(java.lang.Long)","425":"NestedValidatorTest.NestedObject::::getText()","426":"NestedValidatorTest.NestedObject::::getText()","427":"NestedValidatorTest.NestedObject::::getText()","429":"NestedValidatorTest.NestedObject::::setText(java.lang.String)","430":"NestedValidatorTest.NestedObject::::setText(java.lang.String)","431":"NestedValidatorTest.NestedObject::::setText(java.lang.String)","433":"NestedValidatorTest.NestedObject::::getIntRanges()","434":"NestedValidatorTest.NestedObject::::getIntRanges()","435":"NestedValidatorTest.NestedObject::::getIntRanges()","437":"NestedValidatorTest.NestedObject::::setIntRanges(java.util.List<am.ik.yavi.core.NestedValidatorTest.IntRange>)","438":"NestedValidatorTest.NestedObject::::setIntRanges(java.util.List<am.ik.yavi.core.NestedValidatorTest.IntRange>)","439":"NestedValidatorTest.NestedObject::::setIntRanges(java.util.List<am.ik.yavi.core.NestedValidatorTest.IntRange>)","449":"NestedValidatorTest.A::::getB()","450":"NestedValidatorTest.A::::getB()","451":"NestedValidatorTest.A::::getB()","461":"NestedValidatorTest.B::::getC()","462":"NestedValidatorTest.B::::getC()","463":"NestedValidatorTest.B::::getC()","473":"NestedValidatorTest.C::::getD()","474":"NestedValidatorTest.C::::getD()","475":"NestedValidatorTest.C::::getD()","487":"NestedValidatorTest.D::::getE()","488":"NestedValidatorTest.D::::getE()","489":"NestedValidatorTest.D::::getE()","491":"NestedValidatorTest.D::::getList()","492":"NestedValidatorTest.D::::getList()","493":"NestedValidatorTest.D::::getList()","503":"NestedValidatorTest.E::::getValue()","504":"NestedValidatorTest.E::::getValue()","505":"NestedValidatorTest.E::::getValue()"},"tests":[{"test_lines":[123,132],"covered_lines":[29,30,31,32,33,38,43,44],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[134,150],"covered_lines":[29,30,31,32,33,38,43,44,51,52,53,78],"label":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[152,166],"covered_lines":[29,30,31,32,33,38,43,44,51,52,53,78],"label":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[168,181],"covered_lines":[29,30,31,32,33,38,43,44,51,52,53],"label":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[183,193],"covered_lines":[29,30,31,32,33,38,43,44,51,52,53,78],"label":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[195,202],"covered_lines":[29,30,31,32,33,38,43,44],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[204,212],"covered_lines":[29,30,31,32,33,38,43,44],"label":"NestedValidator::::prefixedValidatorIfNeeded(am.ik.yavi.core.Validatable<N>,java.lang.String)"},{"test_lines":[214,228],"covered_lines":[29,30,31,32,33,38,43,44,51,52,53],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[230,243],"covered_lines":[29,30,31,32,33,38,43,44,51,52,53],"label":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)"},{"test_lines":[245,260],"covered_lines":[29,30,31,32,33,38,43,44,51,52,53],"label":"NestedValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/core/ConstraintViolations.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.ArrayList;\n","import java.util.Arrays;\n","import java.util.Collection;\n","import java.util.Collections;\n","import java.util.Iterator;\n","import java.util.List;\n","import java.util.ListIterator;\n","import java.util.function.Function;\n","import java.util.stream.Collectors;\n","\n","public class ConstraintViolations implements List<ConstraintViolation> {\n","\tprivate final List<ConstraintViolation> delegate;\n","\n","\t/**\n","\t * Constructs with the constraintViolations to delegate. If the given value is\n","\t * <code>ConstraintViolations</code> itself, cast and return it.\n","\t *\n","\t * @param delegate constraintViolations to delegate\n","\t * @since 0.6.0\n","\t */\n","\tpublic static ConstraintViolations of(List<ConstraintViolation> delegate) {\n","\t\tif (delegate instanceof ConstraintViolations) {\n","\t\t\treturn (ConstraintViolations) delegate;\n","\t\t}\n","\t\treturn new ConstraintViolations(delegate);\n","\t}\n","\n","\t/**\n","\t * Constructs an empty list with an initial capacity of ten.\n","\t */\n","\tpublic ConstraintViolations() {\n","\t\tthis.delegate = new ArrayList<>();\n","\t}\n","\n","\t/**\n","\t * Constructs with the constraintViolations to delegate\n","\t * @param delegate constraintViolations to delegate\n","\t * @since 0.6.0\n","\t */\n","\tpublic ConstraintViolations(List<ConstraintViolation> delegate) {\n","\t\tthis.delegate = delegate;\n","\t}\n","\n","\t/**\n","\t * Appends the specified element to the end of this list (optional operation).\n","\t *\n","\t * <p>\n","\t * Lists that support this operation may place limitations on what elements may be\n","\t * added to this list. In particular, some lists will refuse to add null elements, and\n","\t * others will impose restrictions on the type of elements that may be added. List\n","\t * classes should clearly specify in their documentation any restrictions on what\n","\t * elements may be added.\n","\t *\n","\t * @param constraintViolation element to be appended to this list\n","\t * @return <tt>true</tt> (as specified by {@link Collection#add})\n","\t * @throws UnsupportedOperationException if the <tt>add</tt> operation is not\n","\t *     supported by this list\n","\t * @throws ClassCastException if the class of the specified element prevents it from\n","\t *     being added to this list\n","\t * @throws NullPointerException if the specified element is null and this list does\n","\t *     not permit null elements\n","\t * @throws IllegalArgumentException if some property of this element prevents it from\n","\t *     being added to this list\n","\t */\n","\t@Override\n","\tpublic final boolean add(ConstraintViolation constraintViolation) {\n","\t\treturn this.delegate.add(constraintViolation);\n","\t}\n","\n","\t/**\n","\t * Inserts the specified element at the specified position in this list (optional\n","\t * operation). Shifts the element currently at that position (if any) and any\n","\t * subsequent elements to the right (adds one to their indices).\n","\t *\n","\t * @param index index at which the specified element is to be inserted\n","\t * @param element element to be inserted\n","\t * @throws UnsupportedOperationException if the <tt>add</tt> operation is not\n","\t *     supported by this list\n","\t * @throws ClassCastException if the class of the specified element prevents it from\n","\t *     being added to this list\n","\t * @throws NullPointerException if the specified element is null and this list does\n","\t *     not permit null elements\n","\t * @throws IllegalArgumentException if some property of the specified element prevents\n","\t *     it from being added to this list\n","\t * @throws IndexOutOfBoundsException if the index is out of range\n","\t *     (<tt>index &lt; 0 || index &gt; size()</tt>)\n","\t */\n","\t@Override\n","\tpublic final void add(int index, ConstraintViolation element) {\n","\t\tthis.delegate.add(index, element);\n","\t}\n","\n","\t/**\n","\t * Appends all of the elements in the specified collection to the end of this list, in\n","\t * the order that they are returned by the specified collection's iterator (optional\n","\t * operation). The behavior of this operation is undefined if the specified collection\n","\t * is modified while the operation is in progress. (Note that this will occur if the\n","\t * specified collection is this list, and it's nonempty.)\n","\t *\n","\t * @param c collection containing elements to be added to this list\n","\t * @return <tt>true</tt> if this list changed as a result of the call\n","\t * @throws UnsupportedOperationException if the <tt>addAll</tt> operation is not\n","\t *     supported by this list\n","\t * @throws ClassCastException if the class of an element of the specified collection\n","\t *     prevents it from being added to this list\n","\t * @throws NullPointerException if the specified collection contains one or more null\n","\t *     elements and this list does not permit null elements, or if the specified\n","\t *     collection is null\n","\t * @throws IllegalArgumentException if some property of an element of the specified\n","\t *     collection prevents it from being added to this list\n","\t * @see #add(Object)\n","\t */\n","\t@Override\n","\tpublic final boolean addAll(Collection<? extends ConstraintViolation> c) {\n","\t\treturn this.delegate.addAll(c);\n","\t}\n","\n","\t/**\n","\t * Inserts all of the elements in the specified collection into this list at the\n","\t * specified position (optional operation). Shifts the element currently at that\n","\t * position (if any) and any subsequent elements to the right (increases their\n","\t * indices). The new elements will appear in this list in the order that they are\n","\t * returned by the specified collection's iterator. The behavior of this operation is\n","\t * undefined if the specified collection is modified while the operation is in\n","\t * progress. (Note that this will occur if the specified collection is this list, and\n","\t * it's nonempty.)\n","\t *\n","\t * @param index index at which to insert the first element from the specified\n","\t *     collection\n","\t * @param c collection containing elements to be added to this list\n","\t * @return <tt>true</tt> if this list changed as a result of the call\n","\t * @throws UnsupportedOperationException if the <tt>addAll</tt> operation is not\n","\t *     supported by this list\n","\t * @throws ClassCastException if the class of an element of the specified collection\n","\t *     prevents it from being added to this list\n","\t * @throws NullPointerException if the specified collection contains one or more null\n","\t *     elements and this list does not permit null elements, or if the specified\n","\t *     collection is null\n","\t * @throws IllegalArgumentException if some property of an element of the specified\n","\t *     collection prevents it from being added to this list\n","\t * @throws IndexOutOfBoundsException if the index is out of range\n","\t *     (<tt>index &lt; 0 || index &gt; size()</tt>)\n","\t */\n","\t@Override\n","\tpublic final boolean addAll(int index, Collection<? extends ConstraintViolation> c) {\n","\t\treturn this.delegate.addAll(c);\n","\t}\n","\n","\t/**\n","\t * This method is intended to be used with Spring MVC\n","\t *\n","\t * <h3>sample</h3>\n","\t *\n","\t * <pre>\n","\t * <code>&#64;PostMapping(\"users\")\n","\t * public String createUser(Model model, UserForm userForm, BindingResult bindingResult) {\n","\t *     return validator.validateToEither(userForm)\n","\t *         .fold(violations -&gt; {\n","\t *             violations.apply(bindingResult::rejectValue);\n","\t *             return \"userForm\";\n","\t *         }, form -&gt; {\n","\t *             // ...\n","\t *             return \"redirect:/\";\n","\t *         });\n","\t * }</code>\n","\t * </pre>\n","\t *\n","\t * @param callback\n","\t */\n","\tpublic ConstraintViolations apply(Callback callback) {\n","\t\tthis.forEach(\n","\t\t\t\tv -> callback.apply(v.name(), v.messageKey(), v.args(), v.message()));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * Removes all of the elements from this list (optional operation). The list will be\n","\t * empty after this call returns.\n","\t *\n","\t * @throws UnsupportedOperationException if the <tt>clear</tt> operation is not\n","\t *     supported by this list\n","\t */\n","\t@Override\n","\tpublic final void clear() {\n","\t\tthis.delegate.clear();\n","\t}\n","\n","\t/**\n","\t * Returns <tt>true</tt> if this list contains the specified element. More formally,\n","\t * returns <tt>true</tt> if and only if this list contains at least one element\n","\t * <tt>e</tt> such that\n","\t * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n","\t *\n","\t * @param o element whose presence in this list is to be tested\n","\t * @return <tt>true</tt> if this list contains the specified element\n","\t * @throws ClassCastException if the type of the specified element is incompatible\n","\t *     with this list (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t * @throws NullPointerException if the specified element is null and this list does\n","\t *     not permit null elements\n","\t *     (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t */\n","\t@Override\n","\tpublic final boolean contains(Object o) {\n","\t\treturn this.delegate.contains(o);\n","\t}\n","\n","\t/**\n","\t * Returns <tt>true</tt> if this list contains all of the elements of the specified\n","\t * collection.\n","\t *\n","\t * @param c collection to be checked for containment in this list\n","\t * @return <tt>true</tt> if this list contains all of the elements of the specified\n","\t * collection\n","\t * @throws ClassCastException if the types of one or more elements in the specified\n","\t *     collection are incompatible with this list\n","\t *     (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t * @throws NullPointerException if the specified collection contains one or more null\n","\t *     elements and this list does not permit null elements\n","\t *     (<a href=\"Collection.html#optional-restrictions\">optional</a>), or if the\n","\t *     specified collection is null\n","\t * @see #contains(Object)\n","\t */\n","\t@Override\n","\tpublic final boolean containsAll(Collection<?> c) {\n","\t\treturn this.delegate.containsAll(c);\n","\t}\n","\n","\tpublic List<ViolationDetail> details() {\n","\t\treturn this.delegate.stream().map(ConstraintViolation::detail)\n","\t\t\t\t.collect(Collectors.toList());\n","\t}\n","\n","\t/**\n","\t * Returns the element at the specified position in this list.\n","\t *\n","\t * @param index index of the element to return\n","\t * @return the element at the specified position in this list\n","\t * @throws IndexOutOfBoundsException if the index is out of range\n","\t *     (<tt>index &lt; 0 || index &gt;= size()</tt>)\n","\t */\n","\t@Override\n","\tpublic final ConstraintViolation get(int index) {\n","\t\treturn this.delegate.get(index);\n","\t}\n","\n","\t/**\n","\t * Returns the index of the first occurrence of the specified element in this list, or\n","\t * -1 if this list does not contain the element. More formally, returns the lowest\n","\t * index <tt>i</tt> such that\n","\t * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>, or -1 if\n","\t * there is no such index.\n","\t *\n","\t * @param o element to search for\n","\t * @return the index of the first occurrence of the specified element in this list, or\n","\t * -1 if this list does not contain the element\n","\t * @throws ClassCastException if the type of the specified element is incompatible\n","\t *     with this list (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t * @throws NullPointerException if the specified element is null and this list does\n","\t *     not permit null elements\n","\t *     (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t */\n","\t@Override\n","\tpublic final int indexOf(Object o) {\n","\t\treturn this.delegate.indexOf(o);\n","\t}\n","\n","\t/**\n","\t * Returns <tt>true</tt> if this list contains no elements.\n","\t *\n","\t * @return <tt>true</tt> if this list contains no elements\n","\t */\n","\t@Override\n","\tpublic final boolean isEmpty() {\n","\t\treturn this.delegate.isEmpty();\n","\t}\n","\n","\tpublic final boolean isValid() {\n","\t\treturn this.delegate.isEmpty();\n","\t}\n","\n","\t/**\n","\t * Returns an iterator over the elements in this list in proper sequence.\n","\t *\n","\t * @return an iterator over the elements in this list in proper sequence\n","\t */\n","\t@Override\n","\tpublic final Iterator<ConstraintViolation> iterator() {\n","\t\treturn this.delegate.iterator();\n","\t}\n","\n","\t/**\n","\t * Returns the index of the last occurrence of the specified element in this list, or\n","\t * -1 if this list does not contain the element. More formally, returns the highest\n","\t * index <tt>i</tt> such that\n","\t * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>, or -1 if\n","\t * there is no such index.\n","\t *\n","\t * @param o element to search for\n","\t * @return the index of the last occurrence of the specified element in this list, or\n","\t * -1 if this list does not contain the element\n","\t * @throws ClassCastException if the type of the specified element is incompatible\n","\t *     with this list (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t * @throws NullPointerException if the specified element is null and this list does\n","\t *     not permit null elements\n","\t *     (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t */\n","\t@Override\n","\tpublic final int lastIndexOf(Object o) {\n","\t\treturn this.delegate.lastIndexOf(o);\n","\t}\n","\n","\t/**\n","\t * Returns a list iterator over the elements in this list (in proper sequence).\n","\t *\n","\t * @return a list iterator over the elements in this list (in proper sequence)\n","\t */\n","\t@Override\n","\tpublic final ListIterator<ConstraintViolation> listIterator() {\n","\t\treturn this.delegate.listIterator();\n","\t}\n","\n","\t/**\n","\t * Returns a list iterator over the elements in this list (in proper sequence),\n","\t * starting at the specified position in the list. The specified index indicates the\n","\t * first element that would be returned by an initial call to {@link ListIterator#next\n","\t * next}. An initial call to {@link ListIterator#previous previous} would return the\n","\t * element with the specified index minus one.\n","\t *\n","\t * @param index index of the first element to be returned from the list iterator (by a\n","\t *     call to {@link ListIterator#next next})\n","\t * @return a list iterator over the elements in this list (in proper sequence),\n","\t * starting at the specified position in the list\n","\t * @throws IndexOutOfBoundsException if the index is out of range\n","\t *     ({@code index < 0 || index > size()})\n","\t */\n","\t@Override\n","\tpublic final ListIterator<ConstraintViolation> listIterator(int index) {\n","\t\treturn this.delegate.listIterator(index);\n","\t}\n","\n","\t/**\n","\t * Removes the first occurrence of the specified element from this list, if it is\n","\t * present (optional operation). If this list does not contain the element, it is\n","\t * unchanged. More formally, removes the element with the lowest index <tt>i</tt> such\n","\t * that <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt> (if\n","\t * such an element exists). Returns <tt>true</tt> if this list contained the specified\n","\t * element (or equivalently, if this list changed as a result of the call).\n","\t *\n","\t * @param o element to be removed from this list, if present\n","\t * @return <tt>true</tt> if this list contained the specified element\n","\t * @throws ClassCastException if the type of the specified element is incompatible\n","\t *     with this list (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t * @throws NullPointerException if the specified element is null and this list does\n","\t *     not permit null elements\n","\t *     (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t * @throws UnsupportedOperationException if the <tt>remove</tt> operation is not\n","\t *     supported by this list\n","\t */\n","\t@Override\n","\tpublic final boolean remove(Object o) {\n","\t\treturn this.delegate.remove(o);\n","\t}\n","\n","\t/**\n","\t * Removes the element at the specified position in this list (optional operation).\n","\t * Shifts any subsequent elements to the left (subtracts one from their indices).\n","\t * Returns the element that was removed from the list.\n","\t *\n","\t * @param index the index of the element to be removed\n","\t * @return the element previously at the specified position\n","\t * @throws UnsupportedOperationException if the <tt>remove</tt> operation is not\n","\t *     supported by this list\n","\t * @throws IndexOutOfBoundsException if the index is out of range\n","\t *     (<tt>index &lt; 0 || index &gt;= size()</tt>)\n","\t */\n","\t@Override\n","\tpublic final ConstraintViolation remove(int index) {\n","\t\treturn this.delegate.remove(index);\n","\t}\n","\n","\t/**\n","\t * Removes from this list all of its elements that are contained in the specified\n","\t * collection (optional operation).\n","\t *\n","\t * @param c collection containing elements to be removed from this list\n","\t * @return <tt>true</tt> if this list changed as a result of the call\n","\t * @throws UnsupportedOperationException if the <tt>removeAll</tt> operation is not\n","\t *     supported by this list\n","\t * @throws ClassCastException if the class of an element of this list is incompatible\n","\t *     with the specified collection\n","\t *     (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t * @throws NullPointerException if this list contains a null element and the specified\n","\t *     collection does not permit null elements\n","\t *     (<a href=\"Collection.html#optional-restrictions\">optional</a>), or if the\n","\t *     specified collection is null\n","\t * @see #remove(Object)\n","\t * @see #contains(Object)\n","\t */\n","\t@Override\n","\tpublic final boolean removeAll(Collection<?> c) {\n","\t\treturn this.delegate.removeAll(c);\n","\t}\n","\n","\t/**\n","\t * Retains only the elements in this list that are contained in the specified\n","\t * collection (optional operation). In other words, removes from this list all of its\n","\t * elements that are not contained in the specified collection.\n","\t *\n","\t * @param c collection containing elements to be retained in this list\n","\t * @return <tt>true</tt> if this list changed as a result of the call\n","\t * @throws UnsupportedOperationException if the <tt>retainAll</tt> operation is not\n","\t *     supported by this list\n","\t * @throws ClassCastException if the class of an element of this list is incompatible\n","\t *     with the specified collection\n","\t *     (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n","\t * @throws NullPointerException if this list contains a null element and the specified\n","\t *     collection does not permit null elements\n","\t *     (<a href=\"Collection.html#optional-restrictions\">optional</a>), or if the\n","\t *     specified collection is null\n","\t * @see #remove(Object)\n","\t * @see #contains(Object)\n","\t */\n","\t@Override\n","\tpublic final boolean retainAll(Collection<?> c) {\n","\t\treturn this.delegate.retainAll(c);\n","\t}\n","\n","\t/**\n","\t * Replaces the element at the specified position in this list with the specified\n","\t * element (optional operation).\n","\t *\n","\t * @param index index of the element to replace\n","\t * @param element element to be stored at the specified position\n","\t * @return the element previously at the specified position\n","\t * @throws UnsupportedOperationException if the <tt>set</tt> operation is not\n","\t *     supported by this list\n","\t * @throws ClassCastException if the class of the specified element prevents it from\n","\t *     being added to this list\n","\t * @throws NullPointerException if the specified element is null and this list does\n","\t *     not permit null elements\n","\t * @throws IllegalArgumentException if some property of the specified element prevents\n","\t *     it from being added to this list\n","\t * @throws IndexOutOfBoundsException if the index is out of range\n","\t *     (<tt>index &lt; 0 || index &gt;= size()</tt>)\n","\t */\n","\t@Override\n","\tpublic final ConstraintViolation set(int index, ConstraintViolation element) {\n","\t\treturn this.delegate.set(index, element);\n","\t}\n","\n","\t/**\n","\t * Returns the number of elements in this list. If this list contains more than\n","\t * <tt>Integer.MAX_VALUE</tt> elements, returns <tt>Integer.MAX_VALUE</tt>.\n","\t *\n","\t * @return the number of elements in this list\n","\t */\n","\t@Override\n","\tpublic final int size() {\n","\t\treturn this.delegate.size();\n","\t}\n","\n","\t/**\n","\t * Returns a view of the portion of this list between the specified\n","\t * <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive. (If\n","\t * <tt>fromIndex</tt> and <tt>toIndex</tt> are equal, the returned list is empty.) The\n","\t * returned list is backed by this list, so non-structural changes in the returned\n","\t * list are reflected in this list, and vice-versa. The returned list supports all of\n","\t * the optional list operations supported by this list.\n","\t * <p>\n","\t * <p>\n","\t * This method eliminates the need for explicit range operations (of the sort that\n","\t * commonly exist for arrays). Any operation that expects a list can be used as a\n","\t * range operation by passing a subList view instead of a whole list. For example, the\n","\t * following idiom removes a range of elements from a list:\n","\t *\n","\t * <pre>\n","\t * {@code\n","\t * list.subList(from, to).clear();\n","\t * }\n","\t * </pre>\n","\t *\n","\t * Similar idioms may be constructed for <tt>indexOf</tt> and <tt>lastIndexOf</tt>,\n","\t * and all of the algorithms in the <tt>Collections</tt> class can be applied to a\n","\t * subList.\n","\t * <p>\n","\t * <p>\n","\t * The semantics of the list returned by this method become undefined if the backing\n","\t * list (i.e., this list) is <i>structurally modified</i> in any way other than via\n","\t * the returned list. (Structural modifications are those that change the size of this\n","\t * list, or otherwise perturb it in such a fashion that iterations in progress may\n","\t * yield incorrect results.)\n","\t *\n","\t * @param fromIndex low endpoint (inclusive) of the subList\n","\t * @param toIndex high endpoint (exclusive) of the subList\n","\t * @return a view of the specified range within this list\n","\t * @throws IndexOutOfBoundsException for an illegal endpoint index value\n","\t *     (<tt>fromIndex &lt; 0 || toIndex &gt; size ||\n","\t *                                   fromIndex &gt; toIndex</tt>)\n","\t */\n","\t@Override\n","\tpublic final List<ConstraintViolation> subList(int fromIndex, int toIndex) {\n","\t\treturn this.delegate.subList(fromIndex, toIndex);\n","\t}\n","\n","\tpublic final <E extends RuntimeException> void throwIfInvalid(\n","\t\t\tFunction<ConstraintViolations, E> toException) throws E {\n","\t\tif (!isValid()) {\n","\t\t\tthrow toException.apply(this);\n","\t\t}\n","\t}\n","\n","\t/**\n","\t * Returns an array containing all of the elements in this list in proper sequence\n","\t * (from first to last element).\n","\t *\n","\t * <p>\n","\t * The returned array will be \"safe\" in that no references to it are maintained by\n","\t * this list. (In other words, this method must allocate a new array even if this list\n","\t * is backed by an array). The caller is thus free to modify the returned array.\n","\t *\n","\t * <p>\n","\t * This method acts as bridge between array-based and collection-based APIs.\n","\t *\n","\t * @return an array containing all of the elements in this list in proper sequence\n","\t * @see Arrays#asList(Object[])\n","\t */\n","\t@Override\n","\tpublic final Object[] toArray() {\n","\t\treturn this.delegate.toArray();\n","\t}\n","\n","\t/**\n","\t * Returns an array containing all of the elements in this list in proper sequence\n","\t * (from first to last element); the runtime type of the returned array is that of the\n","\t * specified array. If the list fits in the specified array, it is returned therein.\n","\t * Otherwise, a new array is allocated with the runtime type of the specified array\n","\t * and the size of this list.\n","\t *\n","\t * <p>\n","\t * If the list fits in the specified array with room to spare (i.e., the array has\n","\t * more elements than the list), the element in the array immediately following the\n","\t * end of the list is set to <tt>null</tt>. (This is useful in determining the length\n","\t * of the list <i>only</i> if the caller knows that the list does not contain any null\n","\t * elements.)\n","\t *\n","\t * <p>\n","\t * Like the {@link #toArray()} method, this method acts as bridge between array-based\n","\t * and collection-based APIs. Further, this method allows precise control over the\n","\t * runtime type of the output array, and may, under certain circumstances, be used to\n","\t * save allocation costs.\n","\t *\n","\t * <p>\n","\t * Suppose <tt>x</tt> is a list known to contain only strings. The following code can\n","\t * be used to dump the list into a newly allocated array of <tt>String</tt>:\n","\t *\n","\t * <pre>\n","\t * {\n","\t * \t&#64;code\n","\t * \tString[] y = x.toArray(new String[0]);\n","\t * }\n","\t * </pre>\n","\t * <p>\n","\t * Note that <tt>toArray(new Object[0])</tt> is identical in function to\n","\t * <tt>toArray()</tt>.\n","\t *\n","\t * @param a the array into which the elements of this list are to be stored, if it is\n","\t *     big enough; otherwise, a new array of the same runtime type is allocated for\n","\t *     this purpose.\n","\t * @return an array containing the elements of this list\n","\t * @throws ArrayStoreException if the runtime type of the specified array is not a\n","\t *     supertype of the runtime type of every element in this list\n","\t * @throws NullPointerException if the specified array is null\n","\t */\n","\t@Override\n","\tpublic final <T> T[] toArray(T[] a) {\n","\t\treturn this.delegate.toArray(a);\n","\t}\n","\n","\t@Override\n","\tpublic String toString() {\n","\t\treturn this.delegate.toString();\n","\t}\n","\n","\tpublic final List<ConstraintViolation> violations() {\n","\t\treturn Collections.unmodifiableList(this.delegate);\n","\t}\n","\n","\t@FunctionalInterface\n","\tpublic interface Callback {\n","\t\tvoid apply(String name, String messageKey, Object[] args, String defaultMessage);\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Arrays;\n","import java.util.Locale;\n","\n","import am.ik.yavi.message.SimpleMessageFormatter;\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","public class ConstraintViolationsTest {\n","\t@Test\n","\tpublic void apply() {\n","\t\tSimpleMessageFormatter messageFormatter = new SimpleMessageFormatter();\n","\t\tConstraintViolations violations = new ConstraintViolations();\n","\t\tviolations.add(new ConstraintViolation(\"foo0\", \"abc0\", \"hello0\",\n","\t\t\t\tnew Object[] { 1 }, messageFormatter, Locale.getDefault()));\n","\t\tviolations.add(new ConstraintViolation(\"foo1\", \"abc1\", \"hello1\",\n","\t\t\t\tnew Object[] { 1 }, messageFormatter, Locale.getDefault()));\n","\n","\t\tBindingResult bindingResult = new BindingResult();\n","\t\tviolations.apply(bindingResult::rejectValue);\n","\t\tassertThat(bindingResult.toString())\n","\t\t\t\t.isEqualTo(\"[foo0_abc0_[1]_hello0][foo1_abc1_[1]_hello1]\");\n","\t}\n","\n","\tstatic class BindingResult {\n","\t\tfinal StringBuilder builder = new StringBuilder();\n","\n","\t\tpublic void rejectValue(String field, String errorCode, Object[] errorArgs,\n","\t\t\t\tString defaultMessage) {\n","\t\t\tthis.builder.append(\"[\").append(field).append(\"_\").append(errorCode)\n","\t\t\t\t\t.append(\"_\").append(Arrays.toString(errorArgs)).append(\"_\")\n","\t\t\t\t\t.append(defaultMessage).append(\"]\");\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic String toString() {\n","\t\t\treturn this.builder.toString();\n","\t\t}\n","\t}\n","}\n"],"method_lines_dic":{"ConstraintViolations::::of(java.util.List<am.ik.yavi.core.ConstraintViolation>)":[38,43],"ConstraintViolations::::add(am.ik.yavi.core.ConstraintViolation)":[82,85],"ConstraintViolations::::add(int,am.ik.yavi.core.ConstraintViolation)":[105,108],"ConstraintViolations::::addAll(java.util.Collection<? extends am.ik.yavi.core.ConstraintViolation>)":[130,133],"ConstraintViolations::::addAll(int,java.util.Collection<? extends am.ik.yavi.core.ConstraintViolation>)":[161,164],"ConstraintViolations::::apply(am.ik.yavi.core.ConstraintViolations.Callback)":[187,191],"ConstraintViolations::::clear()":[200,203],"ConstraintViolations::::contains(java.lang.Object)":[219,222],"ConstraintViolations::::containsAll(java.util.Collection<?>)":[240,243],"ConstraintViolations::::details()":[245,248],"ConstraintViolations::::get(int)":[258,261],"ConstraintViolations::::indexOf(java.lang.Object)":[279,282],"ConstraintViolations::::isEmpty()":[289,292],"ConstraintViolations::::isValid()":[294,296],"ConstraintViolations::::iterator()":[303,306],"ConstraintViolations::::lastIndexOf(java.lang.Object)":[324,327],"ConstraintViolations::::listIterator()":[334,337],"ConstraintViolations::::listIterator(int)":[353,356],"ConstraintViolations::::remove(java.lang.Object)":[376,379],"ConstraintViolations::::remove(int)":[393,396],"ConstraintViolations::::removeAll(java.util.Collection<?>)":[416,419],"ConstraintViolations::::retainAll(java.util.Collection<?>)":[440,443],"ConstraintViolations::::set(int,am.ik.yavi.core.ConstraintViolation)":[463,466],"ConstraintViolations::::size()":[474,477],"ConstraintViolations::::subList(int,int)":[517,520],"ConstraintViolations::::throwIfInvalid(java.util.function.Function<am.ik.yavi.core.ConstraintViolations, E>)":[522,527],"ConstraintViolations::::toArray()":[544,547],"ConstraintViolations::::toArray(T[])":[591,594],"ConstraintViolations::::toString()":[596,599],"ConstraintViolations::::violations()":[601,603],"ConstraintViolations.Callback::::apply(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)":[607,607]},"test_method_lines_dic":{"ConstraintViolationsTest::::apply()":[27,40],"ConstraintViolationsTest.BindingResult::::rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)":[45,50],"ConstraintViolationsTest.BindingResult::::toString()":[52,55]},"reverse_method_lines_dic":{"38":"ConstraintViolations::::of(java.util.List<am.ik.yavi.core.ConstraintViolation>)","39":"ConstraintViolations::::of(java.util.List<am.ik.yavi.core.ConstraintViolation>)","40":"ConstraintViolations::::of(java.util.List<am.ik.yavi.core.ConstraintViolation>)","41":"ConstraintViolations::::of(java.util.List<am.ik.yavi.core.ConstraintViolation>)","42":"ConstraintViolations::::of(java.util.List<am.ik.yavi.core.ConstraintViolation>)","43":"ConstraintViolations::::of(java.util.List<am.ik.yavi.core.ConstraintViolation>)","82":"ConstraintViolations::::add(am.ik.yavi.core.ConstraintViolation)","83":"ConstraintViolations::::add(am.ik.yavi.core.ConstraintViolation)","84":"ConstraintViolations::::add(am.ik.yavi.core.ConstraintViolation)","85":"ConstraintViolations::::add(am.ik.yavi.core.ConstraintViolation)","105":"ConstraintViolations::::add(int,am.ik.yavi.core.ConstraintViolation)","106":"ConstraintViolations::::add(int,am.ik.yavi.core.ConstraintViolation)","107":"ConstraintViolations::::add(int,am.ik.yavi.core.ConstraintViolation)","108":"ConstraintViolations::::add(int,am.ik.yavi.core.ConstraintViolation)","130":"ConstraintViolations::::addAll(java.util.Collection<? extends am.ik.yavi.core.ConstraintViolation>)","131":"ConstraintViolations::::addAll(java.util.Collection<? extends am.ik.yavi.core.ConstraintViolation>)","132":"ConstraintViolations::::addAll(java.util.Collection<? extends am.ik.yavi.core.ConstraintViolation>)","133":"ConstraintViolations::::addAll(java.util.Collection<? extends am.ik.yavi.core.ConstraintViolation>)","161":"ConstraintViolations::::addAll(int,java.util.Collection<? extends am.ik.yavi.core.ConstraintViolation>)","162":"ConstraintViolations::::addAll(int,java.util.Collection<? extends am.ik.yavi.core.ConstraintViolation>)","163":"ConstraintViolations::::addAll(int,java.util.Collection<? extends am.ik.yavi.core.ConstraintViolation>)","164":"ConstraintViolations::::addAll(int,java.util.Collection<? extends am.ik.yavi.core.ConstraintViolation>)","187":"ConstraintViolations::::apply(am.ik.yavi.core.ConstraintViolations.Callback)","188":"ConstraintViolations::::apply(am.ik.yavi.core.ConstraintViolations.Callback)","189":"ConstraintViolations::::apply(am.ik.yavi.core.ConstraintViolations.Callback)","190":"ConstraintViolations::::apply(am.ik.yavi.core.ConstraintViolations.Callback)","191":"ConstraintViolations::::apply(am.ik.yavi.core.ConstraintViolations.Callback)","200":"ConstraintViolations::::clear()","201":"ConstraintViolations::::clear()","202":"ConstraintViolations::::clear()","203":"ConstraintViolations::::clear()","219":"ConstraintViolations::::contains(java.lang.Object)","220":"ConstraintViolations::::contains(java.lang.Object)","221":"ConstraintViolations::::contains(java.lang.Object)","222":"ConstraintViolations::::contains(java.lang.Object)","240":"ConstraintViolations::::containsAll(java.util.Collection<?>)","241":"ConstraintViolations::::containsAll(java.util.Collection<?>)","242":"ConstraintViolations::::containsAll(java.util.Collection<?>)","243":"ConstraintViolations::::containsAll(java.util.Collection<?>)","245":"ConstraintViolations::::details()","246":"ConstraintViolations::::details()","247":"ConstraintViolations::::details()","248":"ConstraintViolations::::details()","258":"ConstraintViolations::::get(int)","259":"ConstraintViolations::::get(int)","260":"ConstraintViolations::::get(int)","261":"ConstraintViolations::::get(int)","279":"ConstraintViolations::::indexOf(java.lang.Object)","280":"ConstraintViolations::::indexOf(java.lang.Object)","281":"ConstraintViolations::::indexOf(java.lang.Object)","282":"ConstraintViolations::::indexOf(java.lang.Object)","289":"ConstraintViolations::::isEmpty()","290":"ConstraintViolations::::isEmpty()","291":"ConstraintViolations::::isEmpty()","292":"ConstraintViolations::::isEmpty()","294":"ConstraintViolations::::isValid()","295":"ConstraintViolations::::isValid()","296":"ConstraintViolations::::isValid()","303":"ConstraintViolations::::iterator()","304":"ConstraintViolations::::iterator()","305":"ConstraintViolations::::iterator()","306":"ConstraintViolations::::iterator()","324":"ConstraintViolations::::lastIndexOf(java.lang.Object)","325":"ConstraintViolations::::lastIndexOf(java.lang.Object)","326":"ConstraintViolations::::lastIndexOf(java.lang.Object)","327":"ConstraintViolations::::lastIndexOf(java.lang.Object)","334":"ConstraintViolations::::listIterator()","335":"ConstraintViolations::::listIterator()","336":"ConstraintViolations::::listIterator()","337":"ConstraintViolations::::listIterator()","353":"ConstraintViolations::::listIterator(int)","354":"ConstraintViolations::::listIterator(int)","355":"ConstraintViolations::::listIterator(int)","356":"ConstraintViolations::::listIterator(int)","376":"ConstraintViolations::::remove(java.lang.Object)","377":"ConstraintViolations::::remove(java.lang.Object)","378":"ConstraintViolations::::remove(java.lang.Object)","379":"ConstraintViolations::::remove(java.lang.Object)","393":"ConstraintViolations::::remove(int)","394":"ConstraintViolations::::remove(int)","395":"ConstraintViolations::::remove(int)","396":"ConstraintViolations::::remove(int)","416":"ConstraintViolations::::removeAll(java.util.Collection<?>)","417":"ConstraintViolations::::removeAll(java.util.Collection<?>)","418":"ConstraintViolations::::removeAll(java.util.Collection<?>)","419":"ConstraintViolations::::removeAll(java.util.Collection<?>)","440":"ConstraintViolations::::retainAll(java.util.Collection<?>)","441":"ConstraintViolations::::retainAll(java.util.Collection<?>)","442":"ConstraintViolations::::retainAll(java.util.Collection<?>)","443":"ConstraintViolations::::retainAll(java.util.Collection<?>)","463":"ConstraintViolations::::set(int,am.ik.yavi.core.ConstraintViolation)","464":"ConstraintViolations::::set(int,am.ik.yavi.core.ConstraintViolation)","465":"ConstraintViolations::::set(int,am.ik.yavi.core.ConstraintViolation)","466":"ConstraintViolations::::set(int,am.ik.yavi.core.ConstraintViolation)","474":"ConstraintViolations::::size()","475":"ConstraintViolations::::size()","476":"ConstraintViolations::::size()","477":"ConstraintViolations::::size()","517":"ConstraintViolations::::subList(int,int)","518":"ConstraintViolations::::subList(int,int)","519":"ConstraintViolations::::subList(int,int)","520":"ConstraintViolations::::subList(int,int)","522":"ConstraintViolations::::throwIfInvalid(java.util.function.Function<am.ik.yavi.core.ConstraintViolations, E>)","523":"ConstraintViolations::::throwIfInvalid(java.util.function.Function<am.ik.yavi.core.ConstraintViolations, E>)","524":"ConstraintViolations::::throwIfInvalid(java.util.function.Function<am.ik.yavi.core.ConstraintViolations, E>)","525":"ConstraintViolations::::throwIfInvalid(java.util.function.Function<am.ik.yavi.core.ConstraintViolations, E>)","526":"ConstraintViolations::::throwIfInvalid(java.util.function.Function<am.ik.yavi.core.ConstraintViolations, E>)","527":"ConstraintViolations::::throwIfInvalid(java.util.function.Function<am.ik.yavi.core.ConstraintViolations, E>)","544":"ConstraintViolations::::toArray()","545":"ConstraintViolations::::toArray()","546":"ConstraintViolations::::toArray()","547":"ConstraintViolations::::toArray()","591":"ConstraintViolations::::toArray(T[])","592":"ConstraintViolations::::toArray(T[])","593":"ConstraintViolations::::toArray(T[])","594":"ConstraintViolations::::toArray(T[])","596":"ConstraintViolations::::toString()","597":"ConstraintViolations::::toString()","598":"ConstraintViolations::::toString()","599":"ConstraintViolations::::toString()","601":"ConstraintViolations::::violations()","602":"ConstraintViolations::::violations()","603":"ConstraintViolations::::violations()","607":"ConstraintViolations.Callback::::apply(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)"},"test_reverse_method_lines_dic":{"27":"ConstraintViolationsTest::::apply()","28":"ConstraintViolationsTest::::apply()","29":"ConstraintViolationsTest::::apply()","30":"ConstraintViolationsTest::::apply()","31":"ConstraintViolationsTest::::apply()","32":"ConstraintViolationsTest::::apply()","33":"ConstraintViolationsTest::::apply()","34":"ConstraintViolationsTest::::apply()","35":"ConstraintViolationsTest::::apply()","36":"ConstraintViolationsTest::::apply()","37":"ConstraintViolationsTest::::apply()","38":"ConstraintViolationsTest::::apply()","39":"ConstraintViolationsTest::::apply()","40":"ConstraintViolationsTest::::apply()","45":"ConstraintViolationsTest.BindingResult::::rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)","46":"ConstraintViolationsTest.BindingResult::::rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)","47":"ConstraintViolationsTest.BindingResult::::rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)","48":"ConstraintViolationsTest.BindingResult::::rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)","49":"ConstraintViolationsTest.BindingResult::::rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)","50":"ConstraintViolationsTest.BindingResult::::rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)","52":"ConstraintViolationsTest.BindingResult::::toString()","53":"ConstraintViolationsTest.BindingResult::::toString()","54":"ConstraintViolationsTest.BindingResult::::toString()","55":"ConstraintViolationsTest.BindingResult::::toString()"},"tests":[{"test_lines":[27,40],"covered_lines":[48,49,50,84,188,189,190,305],"label":"ConstraintViolations::::apply(am.ik.yavi.core.ConstraintViolations.Callback)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/core/ValueValidator.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.ArrayList;\n","import java.util.Collection;\n","import java.util.LinkedHashSet;\n","import java.util.List;\n","import java.util.Locale;\n","import java.util.Optional;\n","import java.util.Set;\n","import java.util.function.BiConsumer;\n","import java.util.function.Function;\n","import java.util.function.Supplier;\n","\n","import am.ik.yavi.fn.Validation;\n","import am.ik.yavi.jsr305.Nullable;\n","\n","/**\n"," * @since 0.8.0\n"," */\n","@FunctionalInterface\n","public interface ValueValidator<T, X> {\n","\n","\tValidated<X> validate(@Nullable T t, Locale locale,\n","\t\t\tConstraintContext constraintContext);\n","\n","\t/**\n","\t * Return {@link ValueValidator} instance that always successes without validation.\n","\t *\n","\t * @param <X> target class\n","\t * @return value validator that always successes without validation\n","\t */\n","\tstatic <X> ValueValidator<X, X> passThrough() {\n","\t\treturn (x, locale, constraintContext) -> Validated.of(Validation.success(x));\n","\t}\n","\n","\tdefault <X2> ValueValidator<T, X2> andThen(Function<? super X, ? extends X2> mapper) {\n","\t\treturn (t, locale, constraintContext) -> ValueValidator.this\n","\t\t\t\t.validate(t, locale, constraintContext).map(mapper);\n","\t}\n","\n","\t/**\n","\t * @since 0.11.0\n","\t */\n","\tdefault <X2> ValueValidator<T, X2> andThen(ValueValidator<? super X, X2> validator) {\n","\t\treturn (t, locale, constraintContext) -> ValueValidator.this\n","\t\t\t\t.validate(t, locale, constraintContext)\n","\t\t\t\t.flatMap(v -> validator.validate(v, locale, constraintContext));\n","\t}\n","\n","\tdefault <A> ValueValidator<A, X> compose(Function<? super A, ? extends T> mapper) {\n","\t\treturn (a, locale, constraintContext) -> ValueValidator.this\n","\t\t\t\t.validate(mapper.apply(a), locale, constraintContext);\n","\t}\n","\n","\tdefault Validated<X> validate(@Nullable T t) {\n","\t\treturn this.validate(t, Locale.getDefault(), ConstraintGroup.DEFAULT);\n","\t}\n","\n","\tdefault Validated<X> validate(@Nullable T t, ConstraintContext constraintContext) {\n","\t\treturn this.validate(t, Locale.getDefault(), constraintContext);\n","\t}\n","\n","\tdefault Validated<X> validate(@Nullable T t, Locale locale) {\n","\t\treturn this.validate(t, locale, ConstraintGroup.DEFAULT);\n","\t}\n","\n","\tdefault X validated(@Nullable T t) throws ConstraintViolationsException {\n","\t\treturn this.validate(t).orElseThrow(ConstraintViolationsException::new);\n","\t}\n","\n","\tdefault X validated(@Nullable T t, ConstraintContext constraintContext)\n","\t\t\tthrows ConstraintViolationsException {\n","\t\treturn this.validate(t, constraintContext)\n","\t\t\t\t.orElseThrow(ConstraintViolationsException::new);\n","\t}\n","\n","\tdefault X validated(@Nullable T t, Locale locale)\n","\t\t\tthrows ConstraintViolationsException {\n","\t\treturn this.validate(t, locale).orElseThrow(ConstraintViolationsException::new);\n","\t}\n","\n","\tdefault X validated(@Nullable T t, Locale locale, ConstraintContext constraintContext)\n","\t\t\tthrows ConstraintViolationsException {\n","\t\treturn this.validate(t, locale, constraintContext)\n","\t\t\t\t.orElseThrow(ConstraintViolationsException::new);\n","\t}\n","\n","\tdefault ValueValidator<T, X> indexed(int index) {\n","\t\treturn (t, locale, constraintContext) -> ValueValidator.this\n","\t\t\t\t.validate(t, locale, constraintContext).indexed(index);\n","\t}\n","\n","\tdefault <C extends Collection<X>> ValueValidator<Iterable<T>, C> liftCollection(\n","\t\t\tSupplier<C> factory) {\n","\t\treturn (values, locale, constraintContext) -> Validated.traverseIndexed(values,\n","\t\t\t\t(v, index) -> this.indexed(index).validate(v, locale, constraintContext),\n","\t\t\t\tfactory);\n","\t}\n","\n","\tdefault ValueValidator<Iterable<T>, List<X>> liftList() {\n","\t\treturn ValueValidator.liftList(this);\n","\t}\n","\n","\tdefault ValueValidator<Iterable<T>, Set<X>> liftSet() {\n","\t\treturn ValueValidator.liftSet(this);\n","\t}\n","\n","\tdefault ValueValidator<Optional<T>, Optional<X>> liftOptional() {\n","\t\treturn ValueValidator.liftOptional(this);\n","\t}\n","\n","\t/**\n","\t * @since 0.8.1\n","\t */\n","\tstatic <A1, R, C extends Collection<R>> ValueValidator<Iterable<A1>, C> liftCollection(\n","\t\t\tValueValidator<? super A1, ? extends R> validator, Supplier<C> factory) {\n","\t\treturn (values, locale, constraintContext) -> Validated.traverseIndexed(values,\n","\t\t\t\t(v, index) -> validator.indexed(index).validate(v, locale,\n","\t\t\t\t\t\tconstraintContext),\n","\t\t\t\tfactory);\n","\t}\n","\n","\t/**\n","\t * @since 0.8.1\n","\t */\n","\tstatic <A1, R> ValueValidator<Iterable<A1>, List<R>> liftList(\n","\t\t\tValueValidator<? super A1, ? extends R> validator) {\n","\t\treturn ValueValidator.liftCollection(validator, ArrayList::new);\n","\n","\t}\n","\n","\t/**\n","\t * @since 0.8.1\n","\t */\n","\tstatic <A1, R> ValueValidator<Iterable<A1>, Set<R>> liftSet(\n","\t\t\tValueValidator<? super A1, ? extends R> validator) {\n","\t\t// Since Index is attached to the name of ConstraintViolation,\n","\t\t// we need a consistent order. This is why we use LinkedHashSet.\n","\t\treturn ValueValidator.liftCollection(validator, LinkedHashSet::new);\n","\t}\n","\n","\t/**\n","\t * @since 0.8.1\n","\t */\n","\tstatic <A1, R> ValueValidator<Optional<A1>, Optional<R>> liftOptional(\n","\t\t\tValueValidator<? super A1, ? extends R> validator) {\n","\t\treturn (value, locale, constraintContext) -> Validated.traverseOptional(value,\n","\t\t\t\tv -> validator.validate(v, locale, constraintContext));\n","\t}\n","\n","\t/**\n","\t * Convert the value validator to a biconsumer\n","\t *\n","\t * @param errorHandler error handler\n","\t * @param <E> error type\n","\t * @return bi consumer\n","\t * @since 0.13.0\n","\t */\n","\tdefault <E> BiConsumer<T, E> toBiConsumer(ErrorHandler<E> errorHandler) {\n","\t\treturn (target, errors) -> {\n","\t\t\tfinal Validated<?> validated = ValueValidator.this.validate(target);\n","\t\t\tif (!validated.isValid()) {\n","\t\t\t\tfinal ConstraintViolations violations = validated.errors();\n","\t\t\t\tviolations.apply((name, messageKey, args, defaultMessage) -> errorHandler\n","\t\t\t\t\t\t.handleError(errors, name, messageKey, args, defaultMessage));\n","\t\t\t}\n","\t\t};\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import am.ik.yavi.Address;\n","import am.ik.yavi.Country;\n","import am.ik.yavi.PhoneNumber;\n","import am.ik.yavi.arguments.Arguments1Validator;\n","import am.ik.yavi.arguments.Arguments3Validator;\n","import am.ik.yavi.builder.ValidatorBuilder;\n","import am.ik.yavi.constraint.CharSequenceConstraint;\n","import org.assertj.core.api.Assertions;\n","import org.junit.jupiter.api.Test;\n","\n","import java.time.LocalDate;\n","import java.time.format.DateTimeFormatter;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class ValueValidatorTest {\n","\n","\t@Test\n","\tvoid passThrough() {\n","\t\tfinal ValueValidator<String, String> validator = ValueValidator.passThrough();\n","\t\tfinal Validated<String> validated = validator.validate(\"hello\");\n","\t\tassertThat(validated.isValid()).isTrue();\n","\t\tassertThat(validated.value()).isEqualTo(\"hello\");\n","\t}\n","\n","\t@Test\n","\tvoid andThenChainsValidators() {\n","\t\tValueValidator<String, Country> countryValidator = Country.validator()\n","\t\t\t\t.applicative().compose(Country::new);\n","\t\tValueValidator<String, String> streetValidator = ValueValidator.passThrough();\n","\t\tValueValidator<String, PhoneNumber> phoneValidator = PhoneNumber.validator()\n","\t\t\t\t.applicative().compose(PhoneNumber::new);\n","\n","\t\tArguments3Validator<String, String, String, Address> addressValidator = Arguments1Validator\n","\t\t\t\t.from(countryValidator).split(streetValidator).split(phoneValidator)\n","\t\t\t\t.apply(Address::new);\n","\n","\t\tValueValidator<Address, Address> foreignAddressValidator = ValidatorBuilder\n","\t\t\t\t.<Address> of()\n","\t\t\t\t.constraintOnCondition(\n","\t\t\t\t\t\t(address,\n","\t\t\t\t\t\t\t\tgroup) -> !\"JP\"\n","\t\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(address.country().name()),\n","\t\t\t\t\t\tValidatorBuilder.<Address> of()\n","\t\t\t\t\t\t\t\t._string(a -> a.phoneNumber().value(), \"PhoneNumber\",\n","\t\t\t\t\t\t\t\t\t\tc -> c.startsWith(\"+\"))\n","\t\t\t\t\t\t\t\t.build())\n","\t\t\t\t.build().applicative();\n","\n","\t\tassertThat(addressValidator.validate(\"JP\", \"tokyo\", \"0123456789\").isValid())\n","\t\t\t\t.isTrue();\n","\t\tassertThat(addressValidator.andThen(foreignAddressValidator)\n","\t\t\t\t.validate(\"JP\", \"tokyo\", \"0123456789\").isValid()).isTrue();\n","\t\tassertThat(addressValidator.validate(\"BE\", \"brussels\", \"9876543210\").isValid())\n","\t\t\t\t.isTrue();\n","\t\tassertThat(addressValidator.andThen(foreignAddressValidator)\n","\t\t\t\t.validate(\"BE\", \"brussels\", \"9876543210\").isValid()).isFalse();\n","\t\tassertThat(addressValidator.validate(\"J\", \"tokyo\", \"0123456789\").isValid())\n","\t\t\t\t.isFalse();\n","\t\tassertThat(addressValidator.andThen(foreignAddressValidator)\n","\t\t\t\t.validate(\"J\", \"tokyo\", \"+0123456789\").isValid()).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid invalidPatternStringToLocalDateValidator() {\n","\t\tValueValidator<String, LocalDate> localDateValidator = ValidatorBuilder\n","\t\t\t\t.<String> of()\n","\t\t\t\t._string(f -> f, \"myLocalDate\", CharSequenceConstraint::isoLocalDate)\n","\t\t\t\t.build().applicative().andThen(LocalDate::parse);\n","\t\tfinal Validated<LocalDate> localDateValidated = localDateValidator\n","\t\t\t\t.validate(\"31/01/2022\");\n","\t\tAssertions.assertThat(localDateValidated.isValid()).isFalse();\n","\t\tAssertions.assertThat(localDateValidated.errors()).hasSize(1);\n","\t\tAssertions.assertThat(localDateValidated.errors().get(0).messageKey())\n","\t\t\t\t.isEqualTo(\"charSequence.localdate\");\n","\t\tAssertions.assertThat(localDateValidated.errors().get(0).message()).isEqualTo(\n","\t\t\t\t\"\\\"myLocalDate\\\" must be a valid representation of a local date using the pattern: uuuu-MM-dd. The give value is: 31/01/2022\");\n","\t}\n","\n","\t@Test\n","\tvoid validStringToLocalDateValidator() {\n","\t\tValueValidator<String, LocalDate> localDateValidator = ValidatorBuilder\n","\t\t\t\t.<String> of()\n","\t\t\t\t._string(f -> f, \"myLocalDate\", c -> c.localDate(\"dd/MM/uuuu\")).build()\n","\t\t\t\t.applicative().andThen(s -> LocalDate.parse(s,\n","\t\t\t\t\t\tDateTimeFormatter.ofPattern(\"dd/MM/uuuu\")));\n","\t\tfinal Validated<LocalDate> localDateValidated = localDateValidator\n","\t\t\t\t.validate(\"31/01/2022\");\n","\t\tAssertions.assertThat(localDateValidated.isValid()).isTrue();\n","\t\tAssertions.assertThat(localDateValidated.value())\n","\t\t\t\t.isEqualTo(LocalDate.of(2022, 1, 31));\n","\t}\n","}\n"],"method_lines_dic":{"ValueValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)":[38,39],"ValueValidator::::passThrough()":[47,49],"ValueValidator::::andThen(java.util.function.Function<? super X, ? extends X2>)":[51,54],"ValueValidator::::andThen(am.ik.yavi.core.ValueValidator<? super X, X2>)":[59,63],"ValueValidator::::compose(java.util.function.Function<? super A, ? extends T>)":[65,68],"ValueValidator::::validate(T)":[70,72],"ValueValidator::::validate(T,am.ik.yavi.core.ConstraintContext)":[74,76],"ValueValidator::::validate(T,java.util.Locale)":[78,80],"ValueValidator::::validated(T)":[82,84],"ValueValidator::::validated(T,am.ik.yavi.core.ConstraintContext)":[86,90],"ValueValidator::::validated(T,java.util.Locale)":[92,95],"ValueValidator::::validated(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)":[97,101],"ValueValidator::::indexed(int)":[103,106],"ValueValidator::::liftCollection(java.util.function.Supplier<C>)":[108,113],"ValueValidator::::liftList()":[115,117],"ValueValidator::::liftSet()":[119,121],"ValueValidator::::liftOptional()":[123,125],"ValueValidator::::liftCollection(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>,java.util.function.Supplier<C>)":[130,136],"ValueValidator::::liftList(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)":[141,145],"ValueValidator::::liftSet(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)":[150,155],"ValueValidator::::liftOptional(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)":[160,164],"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)":[174,183]},"test_method_lines_dic":{"ValueValidatorTest::::passThrough()":[35,41],"ValueValidatorTest::::andThenChainsValidators()":[43,79],"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()":[81,95],"ValueValidatorTest::::validStringToLocalDateValidator()":[97,109]},"reverse_method_lines_dic":{"38":"ValueValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","39":"ValueValidator::::validate(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","47":"ValueValidator::::passThrough()","48":"ValueValidator::::passThrough()","49":"ValueValidator::::passThrough()","51":"ValueValidator::::andThen(java.util.function.Function<? super X, ? extends X2>)","52":"ValueValidator::::andThen(java.util.function.Function<? super X, ? extends X2>)","53":"ValueValidator::::andThen(java.util.function.Function<? super X, ? extends X2>)","54":"ValueValidator::::andThen(java.util.function.Function<? super X, ? extends X2>)","59":"ValueValidator::::andThen(am.ik.yavi.core.ValueValidator<? super X, X2>)","60":"ValueValidator::::andThen(am.ik.yavi.core.ValueValidator<? super X, X2>)","61":"ValueValidator::::andThen(am.ik.yavi.core.ValueValidator<? super X, X2>)","62":"ValueValidator::::andThen(am.ik.yavi.core.ValueValidator<? super X, X2>)","63":"ValueValidator::::andThen(am.ik.yavi.core.ValueValidator<? super X, X2>)","65":"ValueValidator::::compose(java.util.function.Function<? super A, ? extends T>)","66":"ValueValidator::::compose(java.util.function.Function<? super A, ? extends T>)","67":"ValueValidator::::compose(java.util.function.Function<? super A, ? extends T>)","68":"ValueValidator::::compose(java.util.function.Function<? super A, ? extends T>)","70":"ValueValidator::::validate(T)","71":"ValueValidator::::validate(T)","72":"ValueValidator::::validate(T)","74":"ValueValidator::::validate(T,am.ik.yavi.core.ConstraintContext)","75":"ValueValidator::::validate(T,am.ik.yavi.core.ConstraintContext)","76":"ValueValidator::::validate(T,am.ik.yavi.core.ConstraintContext)","78":"ValueValidator::::validate(T,java.util.Locale)","79":"ValueValidator::::validate(T,java.util.Locale)","80":"ValueValidator::::validate(T,java.util.Locale)","82":"ValueValidator::::validated(T)","83":"ValueValidator::::validated(T)","84":"ValueValidator::::validated(T)","86":"ValueValidator::::validated(T,am.ik.yavi.core.ConstraintContext)","87":"ValueValidator::::validated(T,am.ik.yavi.core.ConstraintContext)","88":"ValueValidator::::validated(T,am.ik.yavi.core.ConstraintContext)","89":"ValueValidator::::validated(T,am.ik.yavi.core.ConstraintContext)","90":"ValueValidator::::validated(T,am.ik.yavi.core.ConstraintContext)","92":"ValueValidator::::validated(T,java.util.Locale)","93":"ValueValidator::::validated(T,java.util.Locale)","94":"ValueValidator::::validated(T,java.util.Locale)","95":"ValueValidator::::validated(T,java.util.Locale)","97":"ValueValidator::::validated(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","98":"ValueValidator::::validated(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","99":"ValueValidator::::validated(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","100":"ValueValidator::::validated(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","101":"ValueValidator::::validated(T,java.util.Locale,am.ik.yavi.core.ConstraintContext)","103":"ValueValidator::::indexed(int)","104":"ValueValidator::::indexed(int)","105":"ValueValidator::::indexed(int)","106":"ValueValidator::::indexed(int)","108":"ValueValidator::::liftCollection(java.util.function.Supplier<C>)","109":"ValueValidator::::liftCollection(java.util.function.Supplier<C>)","110":"ValueValidator::::liftCollection(java.util.function.Supplier<C>)","111":"ValueValidator::::liftCollection(java.util.function.Supplier<C>)","112":"ValueValidator::::liftCollection(java.util.function.Supplier<C>)","113":"ValueValidator::::liftCollection(java.util.function.Supplier<C>)","115":"ValueValidator::::liftList()","116":"ValueValidator::::liftList()","117":"ValueValidator::::liftList()","119":"ValueValidator::::liftSet()","120":"ValueValidator::::liftSet()","121":"ValueValidator::::liftSet()","123":"ValueValidator::::liftOptional()","124":"ValueValidator::::liftOptional()","125":"ValueValidator::::liftOptional()","130":"ValueValidator::::liftCollection(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>,java.util.function.Supplier<C>)","131":"ValueValidator::::liftCollection(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>,java.util.function.Supplier<C>)","132":"ValueValidator::::liftCollection(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>,java.util.function.Supplier<C>)","133":"ValueValidator::::liftCollection(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>,java.util.function.Supplier<C>)","134":"ValueValidator::::liftCollection(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>,java.util.function.Supplier<C>)","135":"ValueValidator::::liftCollection(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>,java.util.function.Supplier<C>)","136":"ValueValidator::::liftCollection(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>,java.util.function.Supplier<C>)","141":"ValueValidator::::liftList(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","142":"ValueValidator::::liftList(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","143":"ValueValidator::::liftList(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","144":"ValueValidator::::liftList(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","145":"ValueValidator::::liftList(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","150":"ValueValidator::::liftSet(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","151":"ValueValidator::::liftSet(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","152":"ValueValidator::::liftSet(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","153":"ValueValidator::::liftSet(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","154":"ValueValidator::::liftSet(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","155":"ValueValidator::::liftSet(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","160":"ValueValidator::::liftOptional(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","161":"ValueValidator::::liftOptional(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","162":"ValueValidator::::liftOptional(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","163":"ValueValidator::::liftOptional(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","164":"ValueValidator::::liftOptional(am.ik.yavi.core.ValueValidator<? super A1, ? extends R>)","174":"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)","175":"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)","176":"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)","177":"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)","178":"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)","179":"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)","180":"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)","181":"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)","182":"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)","183":"ValueValidator::::toBiConsumer(am.ik.yavi.core.ErrorHandler<E>)"},"test_reverse_method_lines_dic":{"35":"ValueValidatorTest::::passThrough()","36":"ValueValidatorTest::::passThrough()","37":"ValueValidatorTest::::passThrough()","38":"ValueValidatorTest::::passThrough()","39":"ValueValidatorTest::::passThrough()","40":"ValueValidatorTest::::passThrough()","41":"ValueValidatorTest::::passThrough()","43":"ValueValidatorTest::::andThenChainsValidators()","44":"ValueValidatorTest::::andThenChainsValidators()","45":"ValueValidatorTest::::andThenChainsValidators()","46":"ValueValidatorTest::::andThenChainsValidators()","47":"ValueValidatorTest::::andThenChainsValidators()","48":"ValueValidatorTest::::andThenChainsValidators()","49":"ValueValidatorTest::::andThenChainsValidators()","50":"ValueValidatorTest::::andThenChainsValidators()","51":"ValueValidatorTest::::andThenChainsValidators()","52":"ValueValidatorTest::::andThenChainsValidators()","53":"ValueValidatorTest::::andThenChainsValidators()","54":"ValueValidatorTest::::andThenChainsValidators()","55":"ValueValidatorTest::::andThenChainsValidators()","56":"ValueValidatorTest::::andThenChainsValidators()","57":"ValueValidatorTest::::andThenChainsValidators()","58":"ValueValidatorTest::::andThenChainsValidators()","59":"ValueValidatorTest::::andThenChainsValidators()","60":"ValueValidatorTest::::andThenChainsValidators()","61":"ValueValidatorTest::::andThenChainsValidators()","62":"ValueValidatorTest::::andThenChainsValidators()","63":"ValueValidatorTest::::andThenChainsValidators()","64":"ValueValidatorTest::::andThenChainsValidators()","65":"ValueValidatorTest::::andThenChainsValidators()","66":"ValueValidatorTest::::andThenChainsValidators()","67":"ValueValidatorTest::::andThenChainsValidators()","68":"ValueValidatorTest::::andThenChainsValidators()","69":"ValueValidatorTest::::andThenChainsValidators()","70":"ValueValidatorTest::::andThenChainsValidators()","71":"ValueValidatorTest::::andThenChainsValidators()","72":"ValueValidatorTest::::andThenChainsValidators()","73":"ValueValidatorTest::::andThenChainsValidators()","74":"ValueValidatorTest::::andThenChainsValidators()","75":"ValueValidatorTest::::andThenChainsValidators()","76":"ValueValidatorTest::::andThenChainsValidators()","77":"ValueValidatorTest::::andThenChainsValidators()","78":"ValueValidatorTest::::andThenChainsValidators()","79":"ValueValidatorTest::::andThenChainsValidators()","81":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","82":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","83":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","84":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","85":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","86":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","87":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","88":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","89":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","90":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","91":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","92":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","93":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","94":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","95":"ValueValidatorTest::::invalidPatternStringToLocalDateValidator()","97":"ValueValidatorTest::::validStringToLocalDateValidator()","98":"ValueValidatorTest::::validStringToLocalDateValidator()","99":"ValueValidatorTest::::validStringToLocalDateValidator()","100":"ValueValidatorTest::::validStringToLocalDateValidator()","101":"ValueValidatorTest::::validStringToLocalDateValidator()","102":"ValueValidatorTest::::validStringToLocalDateValidator()","103":"ValueValidatorTest::::validStringToLocalDateValidator()","104":"ValueValidatorTest::::validStringToLocalDateValidator()","105":"ValueValidatorTest::::validStringToLocalDateValidator()","106":"ValueValidatorTest::::validStringToLocalDateValidator()","107":"ValueValidatorTest::::validStringToLocalDateValidator()","108":"ValueValidatorTest::::validStringToLocalDateValidator()","109":"ValueValidatorTest::::validStringToLocalDateValidator()"},"tests":[{"test_lines":[35,41],"covered_lines":[48,71],"label":"ValueValidator::::passThrough()"},{"test_lines":[43,79],"covered_lines":[48,66,67],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[81,95],"covered_lines":[52,53,71],"label":"ValueValidator::::validate(T)"},{"test_lines":[97,109],"covered_lines":[52,53,71],"label":"ValueValidator::::validate(T)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/core/Validated.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Collection;\n","import java.util.List;\n","import java.util.Optional;\n","import java.util.function.Consumer;\n","import java.util.function.Function;\n","import java.util.function.Supplier;\n","\n","import am.ik.yavi.fn.Validation;\n","import am.ik.yavi.fn.Validations;\n","import am.ik.yavi.jsr305.Nullable;\n","\n","/**\n"," * a specialized {@code Validation} type that regards {@code List<E>} as\n"," * {@code ConstraintViolations}\n"," *\n"," * @param <T> value type in the case of success\n"," * @since 0.6.0\n"," */\n","public class Validated<T> extends Validation<ConstraintViolation, T> {\n","\tprivate final Validation<ConstraintViolation, ? extends T> delegate;\n","\n","\t@SuppressWarnings(\"unchecked\")\n","\tpublic static <T> Validated<T> of(\n","\t\t\tValidation<ConstraintViolation, ? extends T> delegate) {\n","\t\tif (delegate instanceof Validated) {\n","\t\t\treturn ((Validated<T>) delegate);\n","\t\t}\n","\t\treturn new Validated<>(delegate);\n","\t}\n","\n","\t/**\n","\t * A wrapper of {@link am.ik.yavi.fn.Validation#success(Object)}\n","\t *\n","\t * @since 0.12.0\n","\t */\n","\tpublic static <T> Validated<T> successWith(@Nullable T value) {\n","\t\treturn new Validated<>(Validation.success(value));\n","\t}\n","\n","\t/**\n","\t * A wrapper of {@link am.ik.yavi.fn.Validation#failure(List)}\n","\t *\n","\t * @since 0.12.0\n","\t */\n","\tpublic static <T> Validated<T> failureWith(List<ConstraintViolation> errors) {\n","\t\treturn new Validated<>(Validation.failure(errors));\n","\t}\n","\n","\t/**\n","\t * A wrapper of {@link am.ik.yavi.fn.Validation#failure(Object[])}\n","\t *\n","\t * @since 0.12.0\n","\t */\n","\tpublic static <T> Validated<T> failureWith(ConstraintViolation... errors) {\n","\t\treturn new Validated<>(Validation.failure(errors));\n","\t}\n","\n","\tValidated(Validation<ConstraintViolation, ? extends T> delegate) {\n","\t\tthis.delegate = delegate;\n","\t}\n","\n","\t@Override\n","\tpublic boolean isValid() {\n","\t\treturn this.delegate.isValid();\n","\t}\n","\n","\t@Override\n","\tpublic T value() {\n","\t\treturn this.delegate.value();\n","\t}\n","\n","\t@Override\n","\tpublic T valueNullable() {\n","\t\treturn this.delegate.valueNullable();\n","\t}\n","\n","\t@Override\n","\tpublic ConstraintViolations errors() {\n","\t\treturn ConstraintViolations.of(this.delegate.errors());\n","\t}\n","\n","\t@Override\n","\t@SuppressWarnings(\"unchecked\")\n","\tprotected <U, V extends Validation<ConstraintViolation, U>> V yieldSuccess(\n","\t\t\t@Nullable U value) {\n","\t\treturn (V) Validated.of(Validation.success(value));\n","\t}\n","\n","\t@Override\n","\t@SuppressWarnings(\"unchecked\")\n","\tprotected <U, V extends Validation<ConstraintViolation, U>> V yieldFailure(\n","\t\t\tList<ConstraintViolation> errors) {\n","\t\treturn (V) Validated.of(Validation.failure(errors));\n","\t}\n","\n","\t@Override\n","\tpublic Validated<T> peek(Consumer<? super T> consumer) {\n","\t\treturn Validated.of(super.peek(consumer));\n","\t}\n","\n","\t@Override\n","\tpublic Validated<T> peekErrors(Consumer<? super List<ConstraintViolation>> consumer) {\n","\t\treturn Validated.of(super.peekErrors(consumer));\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\tpublic Validated<T> indexed(int index) {\n","\t\treturn Validated.of(this.mapError(violation -> violation.indexed(index)));\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\tpublic static <T> Validated<List<T>> sequence(\n","\t\t\tIterable<Validated<? extends T>> values) {\n","\t\treturn Validated.of(Validations.sequence(values));\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\tpublic static <T, U> Validated<List<U>> traverse(Iterable<T> values,\n","\t\t\tFunction<? super T, Validated<? extends U>> mapper) {\n","\t\treturn Validated.of(Validations.traverse(values, mapper));\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\tpublic static <T, U> Validated<List<U>> traverseIndexed(Iterable<T> values,\n","\t\t\tValidations.IndexedTraverser<? super T, Validated<? extends U>> mapper) {\n","\t\treturn Validated.of(Validations.traverseIndexed(values, mapper));\n","\t}\n","\n","\t/**\n","\t * @since 0.8.0\n","\t */\n","\tpublic static <T, U, C extends Collection<U>> Validated<C> traverseIndexed(\n","\t\t\tIterable<T> values,\n","\t\t\tValidations.IndexedTraverser<? super T, Validated<? extends U>> mapper,\n","\t\t\tSupplier<C> factory) {\n","\t\treturn Validated.of(Validations.traverseIndexed(values, mapper, factory));\n","\t}\n","\n","\t/**\n","\t * @since 0.8.0\n","\t */\n","\tpublic static <T, U> Validated<Optional<U>> traverseOptional(Optional<T> value,\n","\t\t\tFunction<? super T, ? extends Validated<? extends U>> mapper) {\n","\t\treturn Validated.of(Validations.traverseOptional(value, mapper));\n","\t}\n","\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Collections;\n","import java.util.Locale;\n","\n","import am.ik.yavi.message.SimpleMessageFormatter;\n","import org.assertj.core.api.Assertions;\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.junit.jupiter.api.Assertions.*;\n","\n","class ValidatedTest {\n","\n","\t@Test\n","\tvoid successWith() {\n","\t\tfinal Validated<String> validated = Validated.successWith(\"OK\");\n","\t\tassertThat(validated.isValid()).isTrue();\n","\t\tassertThat(validated.value()).isEqualTo(\"OK\");\n","\t}\n","\n","\t@Test\n","\tvoid failureWith() {\n","\t\tfinal Validated<Object> validated = Validated\n","\t\t\t\t.failureWith(new ConstraintViolation(\"name\", \"notNull\",\n","\t\t\t\t\t\t\"\\\"{0}\\\" must not be blank.\", new Object[] { \"name\", \"\" },\n","\t\t\t\t\t\tnew SimpleMessageFormatter(), Locale.ENGLISH));\n","\t\tassertThat(validated.isValid()).isFalse();\n","\t\tassertThat(validated.errors()).hasSize(1);\n","\t\tassertThat(validated.errors().get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"name\\\" must not be blank.\");\n","\t}\n","\n","\t@Test\n","\tvoid testFailureWith() {\n","\t\tfinal Validated<Object> validated = Validated.failureWith(\n","\t\t\t\tCollections.singletonList(new ConstraintViolation(\"name\", \"notNull\",\n","\t\t\t\t\t\t\"\\\"{0}\\\" must not be blank.\", new Object[] { \"name\", \"\" },\n","\t\t\t\t\t\tnew SimpleMessageFormatter(), Locale.ENGLISH)));\n","\t\tassertThat(validated.isValid()).isFalse();\n","\t\tassertThat(validated.errors()).hasSize(1);\n","\t\tassertThat(validated.errors().get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"name\\\" must not be blank.\");\n","\t}\n","}"],"method_lines_dic":{"Validated::::of(am.ik.yavi.fn.Validation<am.ik.yavi.core.ConstraintViolation, ? extends T>)":[39,46],"Validated::::successWith(T)":[53,55],"Validated::::failureWith(java.util.List<am.ik.yavi.core.ConstraintViolation>)":[62,64],"Validated::::failureWith(am.ik.yavi.core.ConstraintViolation[])":[71,73],"Validated::::isValid()":[79,82],"Validated::::value()":[84,87],"Validated::::valueNullable()":[89,92],"Validated::::errors()":[94,97],"Validated::::yieldSuccess(U)":[99,104],"Validated::::yieldFailure(java.util.List<am.ik.yavi.core.ConstraintViolation>)":[106,111],"Validated::::peek(java.util.function.Consumer<? super T>)":[113,116],"Validated::::peekErrors(java.util.function.Consumer<? super java.util.List<am.ik.yavi.core.ConstraintViolation>>)":[118,121],"Validated::::indexed(int)":[126,128],"Validated::::sequence(java.lang.Iterable<am.ik.yavi.core.Validated<? extends T>>)":[133,136],"Validated::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, am.ik.yavi.core.Validated<? extends U>>)":[141,144],"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>)":[149,152],"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>,java.util.function.Supplier<C>)":[157,162],"Validated::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.core.Validated<? extends U>>)":[167,170]},"test_method_lines_dic":{"ValidatedTest::::successWith()":[30,35],"ValidatedTest::::failureWith()":[37,47],"ValidatedTest::::testFailureWith()":[49,59]},"reverse_method_lines_dic":{"39":"Validated::::of(am.ik.yavi.fn.Validation<am.ik.yavi.core.ConstraintViolation, ? extends T>)","40":"Validated::::of(am.ik.yavi.fn.Validation<am.ik.yavi.core.ConstraintViolation, ? extends T>)","41":"Validated::::of(am.ik.yavi.fn.Validation<am.ik.yavi.core.ConstraintViolation, ? extends T>)","42":"Validated::::of(am.ik.yavi.fn.Validation<am.ik.yavi.core.ConstraintViolation, ? extends T>)","43":"Validated::::of(am.ik.yavi.fn.Validation<am.ik.yavi.core.ConstraintViolation, ? extends T>)","44":"Validated::::of(am.ik.yavi.fn.Validation<am.ik.yavi.core.ConstraintViolation, ? extends T>)","45":"Validated::::of(am.ik.yavi.fn.Validation<am.ik.yavi.core.ConstraintViolation, ? extends T>)","46":"Validated::::of(am.ik.yavi.fn.Validation<am.ik.yavi.core.ConstraintViolation, ? extends T>)","53":"Validated::::successWith(T)","54":"Validated::::successWith(T)","55":"Validated::::successWith(T)","62":"Validated::::failureWith(java.util.List<am.ik.yavi.core.ConstraintViolation>)","63":"Validated::::failureWith(java.util.List<am.ik.yavi.core.ConstraintViolation>)","64":"Validated::::failureWith(java.util.List<am.ik.yavi.core.ConstraintViolation>)","71":"Validated::::failureWith(am.ik.yavi.core.ConstraintViolation[])","72":"Validated::::failureWith(am.ik.yavi.core.ConstraintViolation[])","73":"Validated::::failureWith(am.ik.yavi.core.ConstraintViolation[])","79":"Validated::::isValid()","80":"Validated::::isValid()","81":"Validated::::isValid()","82":"Validated::::isValid()","84":"Validated::::value()","85":"Validated::::value()","86":"Validated::::value()","87":"Validated::::value()","89":"Validated::::valueNullable()","90":"Validated::::valueNullable()","91":"Validated::::valueNullable()","92":"Validated::::valueNullable()","94":"Validated::::errors()","95":"Validated::::errors()","96":"Validated::::errors()","97":"Validated::::errors()","99":"Validated::::yieldSuccess(U)","100":"Validated::::yieldSuccess(U)","101":"Validated::::yieldSuccess(U)","102":"Validated::::yieldSuccess(U)","103":"Validated::::yieldSuccess(U)","104":"Validated::::yieldSuccess(U)","106":"Validated::::yieldFailure(java.util.List<am.ik.yavi.core.ConstraintViolation>)","107":"Validated::::yieldFailure(java.util.List<am.ik.yavi.core.ConstraintViolation>)","108":"Validated::::yieldFailure(java.util.List<am.ik.yavi.core.ConstraintViolation>)","109":"Validated::::yieldFailure(java.util.List<am.ik.yavi.core.ConstraintViolation>)","110":"Validated::::yieldFailure(java.util.List<am.ik.yavi.core.ConstraintViolation>)","111":"Validated::::yieldFailure(java.util.List<am.ik.yavi.core.ConstraintViolation>)","113":"Validated::::peek(java.util.function.Consumer<? super T>)","114":"Validated::::peek(java.util.function.Consumer<? super T>)","115":"Validated::::peek(java.util.function.Consumer<? super T>)","116":"Validated::::peek(java.util.function.Consumer<? super T>)","118":"Validated::::peekErrors(java.util.function.Consumer<? super java.util.List<am.ik.yavi.core.ConstraintViolation>>)","119":"Validated::::peekErrors(java.util.function.Consumer<? super java.util.List<am.ik.yavi.core.ConstraintViolation>>)","120":"Validated::::peekErrors(java.util.function.Consumer<? super java.util.List<am.ik.yavi.core.ConstraintViolation>>)","121":"Validated::::peekErrors(java.util.function.Consumer<? super java.util.List<am.ik.yavi.core.ConstraintViolation>>)","126":"Validated::::indexed(int)","127":"Validated::::indexed(int)","128":"Validated::::indexed(int)","133":"Validated::::sequence(java.lang.Iterable<am.ik.yavi.core.Validated<? extends T>>)","134":"Validated::::sequence(java.lang.Iterable<am.ik.yavi.core.Validated<? extends T>>)","135":"Validated::::sequence(java.lang.Iterable<am.ik.yavi.core.Validated<? extends T>>)","136":"Validated::::sequence(java.lang.Iterable<am.ik.yavi.core.Validated<? extends T>>)","141":"Validated::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, am.ik.yavi.core.Validated<? extends U>>)","142":"Validated::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, am.ik.yavi.core.Validated<? extends U>>)","143":"Validated::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, am.ik.yavi.core.Validated<? extends U>>)","144":"Validated::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, am.ik.yavi.core.Validated<? extends U>>)","149":"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>)","150":"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>)","151":"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>)","152":"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>)","157":"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>,java.util.function.Supplier<C>)","158":"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>,java.util.function.Supplier<C>)","159":"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>,java.util.function.Supplier<C>)","160":"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>,java.util.function.Supplier<C>)","161":"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>,java.util.function.Supplier<C>)","162":"Validated::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, am.ik.yavi.core.Validated<? extends U>>,java.util.function.Supplier<C>)","167":"Validated::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.core.Validated<? extends U>>)","168":"Validated::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.core.Validated<? extends U>>)","169":"Validated::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.core.Validated<? extends U>>)","170":"Validated::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.core.Validated<? extends U>>)"},"test_reverse_method_lines_dic":{"30":"ValidatedTest::::successWith()","31":"ValidatedTest::::successWith()","32":"ValidatedTest::::successWith()","33":"ValidatedTest::::successWith()","34":"ValidatedTest::::successWith()","35":"ValidatedTest::::successWith()","37":"ValidatedTest::::failureWith()","38":"ValidatedTest::::failureWith()","39":"ValidatedTest::::failureWith()","40":"ValidatedTest::::failureWith()","41":"ValidatedTest::::failureWith()","42":"ValidatedTest::::failureWith()","43":"ValidatedTest::::failureWith()","44":"ValidatedTest::::failureWith()","45":"ValidatedTest::::failureWith()","46":"ValidatedTest::::failureWith()","47":"ValidatedTest::::failureWith()","49":"ValidatedTest::::testFailureWith()","50":"ValidatedTest::::testFailureWith()","51":"ValidatedTest::::testFailureWith()","52":"ValidatedTest::::testFailureWith()","53":"ValidatedTest::::testFailureWith()","54":"ValidatedTest::::testFailureWith()","55":"ValidatedTest::::testFailureWith()","56":"ValidatedTest::::testFailureWith()","57":"ValidatedTest::::testFailureWith()","58":"ValidatedTest::::testFailureWith()","59":"ValidatedTest::::testFailureWith()"},"tests":[{"test_lines":[30,35],"covered_lines":[54,75,76,77,81,86],"label":"Validated::::successWith(T)"},{"test_lines":[37,47],"covered_lines":[72,75,76,77,81,96],"label":"Validated::::failureWith(am.ik.yavi.core.ConstraintViolation[])"},{"test_lines":[49,59],"covered_lines":[63,75,76,77,81,96],"label":"Validated::::failureWith(java.util.List<am.ik.yavi.core.ConstraintViolation>)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/core/ConstraintContext.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Map;\n","import java.util.Objects;\n","import java.util.function.Function;\n","\n","import am.ik.yavi.jsr305.Nullable;\n","\n","/**\n"," * Constraint Context that contains the name and attributes.\n"," *\n"," * @since 0.11.0\n"," */\n","public interface ConstraintContext {\n","\t/**\n","\t * Returns the attribute for the given key.\n","\t * @param key key\n","\t * @return the attribute\n","\t */\n","\tAttribute attribute(String key);\n","\n","\t/**\n","\t * Returns the context name.<br>\n","\t * This method exists on this interface for backwards compatibility with YAVI 0.10 and\n","\t * earlier. <br>\n","\t * It is effectively used in the lower interface <code>ConstraintGroup</code>.\n","\t *\n","\t * @return context name\n","\t */\n","\tString name();\n","\n","\tstatic ConstraintContext from(Map<String, ?> map) {\n","\t\treturn new ConstraintContext() {\n","\t\t\t@Override\n","\t\t\tpublic Attribute attribute(String key) {\n","\t\t\t\treturn () -> map.get(key);\n","\t\t\t}\n","\n","\t\t\t@Override\n","\t\t\tpublic String name() {\n","\t\t\t\treturn \"ConstraintContextFromMap\";\n","\t\t\t}\n","\t\t};\n","\t}\n","\n","\tstatic ConstraintContext from(Function<String, ?> function) {\n","\t\treturn new ConstraintContext() {\n","\t\t\t@Override\n","\t\t\tpublic Attribute attribute(String key) {\n","\t\t\t\treturn () -> function.apply(key);\n","\t\t\t}\n","\n","\t\t\t@Override\n","\t\t\tpublic String name() {\n","\t\t\t\treturn \"ConstraintContextFromFunction\";\n","\t\t\t}\n","\t\t};\n","\t}\n","\n","\t@FunctionalInterface\n","\tinterface Attribute {\n","\t\t/**\n","\t\t * Returns the attribute value. <code>null</code> is returned if the attribute\n","\t\t * does not exist.\n","\t\t * @return value\n","\t\t */\n","\t\t@Nullable\n","\t\tObject value();\n","\n","\t\t/**\n","\t\t * Returns the typed attribute value\n","\t\t * @param clazz the type of the attribute value\n","\t\t * @return value\n","\t\t */\n","\t\t@Nullable\n","\t\tdefault <T> T value(Class<T> clazz) {\n","\t\t\treturn clazz.cast(this.value());\n","\t\t}\n","\n","\t\t/**\n","\t\t * Returns whether the attribute value exists\n","\t\t * @return whether the attribute value exists\n","\t\t */\n","\t\tdefault boolean exists() {\n","\t\t\treturn this.value() != null;\n","\t\t}\n","\n","\t\t/**\n","\t\t * Return whether the attribute value is equal to the given value.\n","\t\t * @param value value\n","\t\t * @return whether the attribute value is equal to the given value.\n","\t\t */\n","\t\tdefault boolean isEqualTo(Object value) {\n","\t\t\treturn Objects.equals(this.value(), value);\n","\t\t}\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Map;\n","\n","import am.ik.yavi.core.ConstraintContext.Attribute;\n","import org.junit.jupiter.api.Test;\n","\n","import static java.util.Collections.singletonMap;\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class ConstraintContextTest {\n","\n","\t@Test\n","\tvoid fromMap() {\n","\t\tfinal ConstraintContext context = ConstraintContext\n","\t\t\t\t.from(singletonMap(\"country\", \"IT\"));\n","\t\tfinal Attribute attribute = context.attribute(\"country\");\n","\t\tassertThat(attribute.exists()).isTrue();\n","\t\tfinal Object country = attribute.value();\n","\t\tassertThat(country).isEqualTo(\"IT\");\n","\t\tfinal String typedCountry = attribute.value(String.class);\n","\t\tassertThat(typedCountry).isEqualTo(\"IT\");\n","\t\tassertThat(context.attribute(\"foo\").exists()).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fromFunction() {\n","\t\tfinal Map<String, Object> headers = singletonMap(\"country\", \"IT\");\n","\t\tfinal ConstraintContext context = ConstraintContext.from(headers::get);\n","\t\tfinal Attribute attribute = context.attribute(\"country\");\n","\t\tassertThat(attribute.exists()).isTrue();\n","\t\tfinal Object country = attribute.value();\n","\t\tassertThat(country).isEqualTo(\"IT\");\n","\t\tfinal String typedCountry = attribute.value(String.class);\n","\t\tassertThat(typedCountry).isEqualTo(\"IT\");\n","\t\tassertThat(context.attribute(\"foo\").exists()).isFalse();\n","\t}\n","}"],"method_lines_dic":{"ConstraintContext::::attribute(java.lang.String)":[35,35],"ConstraintContext::::name()":[45,45],"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)":[47,59],"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)":[61,73],"ConstraintContext.Attribute::::value()":[82,83],"ConstraintContext.Attribute::::value(java.lang.Class<T>)":[90,93],"ConstraintContext.Attribute::::exists()":[99,101],"ConstraintContext.Attribute::::isEqualTo(java.lang.Object)":[108,110]},"test_method_lines_dic":{"ConstraintContextTest::::fromMap()":[28,39],"ConstraintContextTest::::fromFunction()":[41,52]},"reverse_method_lines_dic":{"35":"ConstraintContext::::attribute(java.lang.String)","45":"ConstraintContext::::name()","47":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","48":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","49":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","50":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","51":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","52":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","53":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","54":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","55":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","56":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","57":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","58":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","59":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)","61":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","62":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","63":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","64":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","65":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","66":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","67":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","68":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","69":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","70":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","71":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","72":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","73":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)","82":"ConstraintContext.Attribute::::value()","83":"ConstraintContext.Attribute::::value()","90":"ConstraintContext.Attribute::::value(java.lang.Class<T>)","91":"ConstraintContext.Attribute::::value(java.lang.Class<T>)","92":"ConstraintContext.Attribute::::value(java.lang.Class<T>)","93":"ConstraintContext.Attribute::::value(java.lang.Class<T>)","99":"ConstraintContext.Attribute::::exists()","100":"ConstraintContext.Attribute::::exists()","101":"ConstraintContext.Attribute::::exists()","108":"ConstraintContext.Attribute::::isEqualTo(java.lang.Object)","109":"ConstraintContext.Attribute::::isEqualTo(java.lang.Object)","110":"ConstraintContext.Attribute::::isEqualTo(java.lang.Object)"},"test_reverse_method_lines_dic":{"28":"ConstraintContextTest::::fromMap()","29":"ConstraintContextTest::::fromMap()","30":"ConstraintContextTest::::fromMap()","31":"ConstraintContextTest::::fromMap()","32":"ConstraintContextTest::::fromMap()","33":"ConstraintContextTest::::fromMap()","34":"ConstraintContextTest::::fromMap()","35":"ConstraintContextTest::::fromMap()","36":"ConstraintContextTest::::fromMap()","37":"ConstraintContextTest::::fromMap()","38":"ConstraintContextTest::::fromMap()","39":"ConstraintContextTest::::fromMap()","41":"ConstraintContextTest::::fromFunction()","42":"ConstraintContextTest::::fromFunction()","43":"ConstraintContextTest::::fromFunction()","44":"ConstraintContextTest::::fromFunction()","45":"ConstraintContextTest::::fromFunction()","46":"ConstraintContextTest::::fromFunction()","47":"ConstraintContextTest::::fromFunction()","48":"ConstraintContextTest::::fromFunction()","49":"ConstraintContextTest::::fromFunction()","50":"ConstraintContextTest::::fromFunction()","51":"ConstraintContextTest::::fromFunction()","52":"ConstraintContextTest::::fromFunction()"},"tests":[{"test_lines":[28,39],"covered_lines":[48,51,92,100],"label":"ConstraintContext::::from(java.util.Map<java.lang.String, ?>)"},{"test_lines":[41,52],"covered_lines":[62,65,92,100],"label":"ConstraintContext::::from(java.util.function.Function<java.lang.String, ?>)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/core/CollectionValidator.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Collection;\n","import java.util.function.Function;\n","\n","public class CollectionValidator<T, N extends Collection<E>, E> {\n","\tprivate final String name;\n","\n","\tprivate final Function<T, N> toCollection;\n","\n","\tprivate final Validator<E> validator;\n","\n","\tpublic CollectionValidator(Function<T, N> toCollection, String name,\n","\t\t\tValidator<E> validator) {\n","\t\tthis.toCollection = toCollection;\n","\t\tthis.name = name;\n","\t\tthis.validator = validator;\n","\t}\n","\n","\tpublic String name() {\n","\t\treturn this.name;\n","\t}\n","\n","\tpublic Function<T, N> toCollection() {\n","\t\treturn this.toCollection;\n","\t}\n","\n","\tpublic Validator<E> validator() {\n","\t\treturn this.validator;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.core;\n","\n","import java.util.Arrays;\n","import java.util.List;\n","\n","import am.ik.yavi.Address;\n","import am.ik.yavi.Country;\n","import am.ik.yavi.FormWithCollection;\n","import am.ik.yavi.PhoneNumber;\n","import am.ik.yavi.builder.ValidatorBuilder;\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class CollectionValidatorTest extends AbstractCollectionValidatorTest {\n","\tValidator<Address> addressValidator = ValidatorBuilder.<Address> of()\n","\t\t\t.constraint(Address::street, \"street\", c -> c.notBlank().lessThan(32))\n","\t\t\t.nest(Address::country, \"country\", Country.validator())\n","\t\t\t.nestIfPresent(Address::phoneNumber, \"phoneNumber\", PhoneNumber.validator())\n","\t\t\t.build();\n","\n","\t@Test\n","\tvoid nullCollectionValid() throws Exception {\n","\t\tValidator<FormWithCollection> validator = ValidatorBuilder\n","\t\t\t\t.of(FormWithCollection.class) //\n","\t\t\t\t.forEachIfPresent(FormWithCollection::getAddresses, \"addresses\",\n","\t\t\t\t\t\taddressValidator)\n","\t\t\t\t.build();\n","\t\tFormWithCollection form = new FormWithCollection(null);\n","\t\tConstraintViolations violations = validator.validate(form);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid stringListAllInValid() throws Exception {\n","\t\tFoo foo = new Foo(Arrays.asList(\"abc\", \"def\", \"ghi\"));\n","\t\tValidator<String> stringValidator = ValidatorBuilder.of(String.class).constraint(\n","\t\t\t\tString::toString, \"value\", c -> c.notNull().lessThanOrEqual(2)).build();\n","\t\tValidator<Foo> validator = ValidatorBuilder.of(Foo.class)\n","\t\t\t\t.forEach(Foo::getTexts, \"texts\", stringValidator).build();\n","\t\tConstraintViolations violations = validator.validate(foo);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(3);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"texts[0].value\\\" must be less than or equal to 2. The given size is 3\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"container.lessThanOrEqual\");\n","\t\tassertThat(violations.get(1).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"texts[1].value\\\" must be less than or equal to 2. The given size is 3\");\n","\t\tassertThat(violations.get(1).messageKey()).isEqualTo(\"container.lessThanOrEqual\");\n","\t\tassertThat(violations.get(2).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"texts[2].value\\\" must be less than or equal to 2. The given size is 3\");\n","\t\tassertThat(violations.get(2).messageKey()).isEqualTo(\"container.lessThanOrEqual\");\n","\t}\n","\n","\t@Test\n","\tvoid stringListAllInValidEmptyNestedName() throws Exception {\n","\t\tFoo foo = new Foo(Arrays.asList(\"abc\", \"def\", \"ghi\"));\n","\t\tValidator<String> stringValidator = ValidatorBuilder.of(String.class)\n","\t\t\t\t.constraint(String::toString, \"\", c -> c.notNull().lessThanOrEqual(2))\n","\t\t\t\t.build();\n","\t\tValidator<Foo> validator = ValidatorBuilder.of(Foo.class)\n","\t\t\t\t.forEach(Foo::getTexts, \"texts\", stringValidator).build();\n","\t\tConstraintViolations violations = validator.validate(foo);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations.size()).isEqualTo(3);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"texts[0]\\\" must be less than or equal to 2. The given size is 3\");\n","\t\tassertThat(violations.get(0).messageKey()).isEqualTo(\"container.lessThanOrEqual\");\n","\t\tassertThat(violations.get(1).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"texts[1]\\\" must be less than or equal to 2. The given size is 3\");\n","\t\tassertThat(violations.get(1).messageKey()).isEqualTo(\"container.lessThanOrEqual\");\n","\t\tassertThat(violations.get(2).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"texts[2]\\\" must be less than or equal to 2. The given size is 3\");\n","\t\tassertThat(violations.get(2).messageKey()).isEqualTo(\"container.lessThanOrEqual\");\n","\t}\n","\n","\t@Test\n","\tvoid stringListAllValid() throws Exception {\n","\t\tFoo foo = new Foo(Arrays.asList(\"ab\", \"cd\", \"ef\"));\n","\t\tValidator<String> stringValidator = ValidatorBuilder.of(String.class).constraint(\n","\t\t\t\tString::toString, \"value\", c -> c.notNull().lessThanOrEqual(2)).build();\n","\t\tValidator<Foo> validator = ValidatorBuilder.of(Foo.class)\n","\t\t\t\t.forEach(Foo::getTexts, \"texts\", stringValidator).build();\n","\t\tConstraintViolations violations = validator.validate(foo);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid unique() throws Exception {\n","\t\tFoo foo = new Foo(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\"));\n","\t\tValidator<Foo> validator = ValidatorBuilder.of(Foo.class)\n","\t\t\t\t.constraint(Foo::getTexts, \"texts\", c -> c.notEmpty().unique()).build();\n","\t\tConstraintViolations violations = validator.validate(foo);\n","\t\tassertThat(violations.isValid()).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid notUnique() throws Exception {\n","\t\tFoo foo = new Foo(Arrays.asList(\"a\", \"b\", \"c\", \"b\", \"c\"));\n","\t\tValidator<Foo> validator = ValidatorBuilder.of(Foo.class)\n","\t\t\t\t.constraint(Foo::getTexts, \"texts\", c -> c.notEmpty().unique()).build();\n","\t\tConstraintViolations violations = validator.validate(foo);\n","\t\tassertThat(violations.isValid()).isFalse();\n","\t\tassertThat(violations).hasSize(1);\n","\t\tassertThat(violations.get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"texts\\\" must be unique. [b, c] is/are duplicated.\");\n","\t}\n","\n","\t@Override\n","\tpublic Validator<FormWithCollection> validator() {\n","\t\treturn ValidatorBuilder.of(FormWithCollection.class) //\n","\t\t\t\t.forEach(FormWithCollection::getAddresses, \"addresses\", addressValidator)\n","\t\t\t\t.build();\n","\t}\n","\n","\tstatic class Foo {\n","\t\tList<String> texts;\n","\n","\t\tFoo(List<String> texts) {\n","\t\t\tthis.texts = texts;\n","\t\t}\n","\n","\t\tList<String> getTexts() {\n","\t\t\treturn texts;\n","\t\t}\n","\t}\n","}\n"],"method_lines_dic":{"CollectionValidator::::name()":[35,37],"CollectionValidator::::toCollection()":[39,41],"CollectionValidator::::validator()":[43,45]},"test_method_lines_dic":{"CollectionValidatorTest::::nullCollectionValid()":[37,47],"CollectionValidatorTest::::stringListAllInValid()":[49,68],"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()":[70,90],"CollectionValidatorTest::::stringListAllValid()":[92,101],"CollectionValidatorTest::::unique()":[103,110],"CollectionValidatorTest::::notUnique()":[112,122],"CollectionValidatorTest::::validator()":[124,129],"CollectionValidatorTest.Foo::::getTexts()":[138,140]},"reverse_method_lines_dic":{"35":"CollectionValidator::::name()","36":"CollectionValidator::::name()","37":"CollectionValidator::::name()","39":"CollectionValidator::::toCollection()","40":"CollectionValidator::::toCollection()","41":"CollectionValidator::::toCollection()","43":"CollectionValidator::::validator()","44":"CollectionValidator::::validator()","45":"CollectionValidator::::validator()"},"test_reverse_method_lines_dic":{"37":"CollectionValidatorTest::::nullCollectionValid()","38":"CollectionValidatorTest::::nullCollectionValid()","39":"CollectionValidatorTest::::nullCollectionValid()","40":"CollectionValidatorTest::::nullCollectionValid()","41":"CollectionValidatorTest::::nullCollectionValid()","42":"CollectionValidatorTest::::nullCollectionValid()","43":"CollectionValidatorTest::::nullCollectionValid()","44":"CollectionValidatorTest::::nullCollectionValid()","45":"CollectionValidatorTest::::nullCollectionValid()","46":"CollectionValidatorTest::::nullCollectionValid()","47":"CollectionValidatorTest::::nullCollectionValid()","49":"CollectionValidatorTest::::stringListAllInValid()","50":"CollectionValidatorTest::::stringListAllInValid()","51":"CollectionValidatorTest::::stringListAllInValid()","52":"CollectionValidatorTest::::stringListAllInValid()","53":"CollectionValidatorTest::::stringListAllInValid()","54":"CollectionValidatorTest::::stringListAllInValid()","55":"CollectionValidatorTest::::stringListAllInValid()","56":"CollectionValidatorTest::::stringListAllInValid()","57":"CollectionValidatorTest::::stringListAllInValid()","58":"CollectionValidatorTest::::stringListAllInValid()","59":"CollectionValidatorTest::::stringListAllInValid()","60":"CollectionValidatorTest::::stringListAllInValid()","61":"CollectionValidatorTest::::stringListAllInValid()","62":"CollectionValidatorTest::::stringListAllInValid()","63":"CollectionValidatorTest::::stringListAllInValid()","64":"CollectionValidatorTest::::stringListAllInValid()","65":"CollectionValidatorTest::::stringListAllInValid()","66":"CollectionValidatorTest::::stringListAllInValid()","67":"CollectionValidatorTest::::stringListAllInValid()","68":"CollectionValidatorTest::::stringListAllInValid()","70":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","71":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","72":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","73":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","74":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","75":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","76":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","77":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","78":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","79":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","80":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","81":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","82":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","83":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","84":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","85":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","86":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","87":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","88":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","89":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","90":"CollectionValidatorTest::::stringListAllInValidEmptyNestedName()","92":"CollectionValidatorTest::::stringListAllValid()","93":"CollectionValidatorTest::::stringListAllValid()","94":"CollectionValidatorTest::::stringListAllValid()","95":"CollectionValidatorTest::::stringListAllValid()","96":"CollectionValidatorTest::::stringListAllValid()","97":"CollectionValidatorTest::::stringListAllValid()","98":"CollectionValidatorTest::::stringListAllValid()","99":"CollectionValidatorTest::::stringListAllValid()","100":"CollectionValidatorTest::::stringListAllValid()","101":"CollectionValidatorTest::::stringListAllValid()","103":"CollectionValidatorTest::::unique()","104":"CollectionValidatorTest::::unique()","105":"CollectionValidatorTest::::unique()","106":"CollectionValidatorTest::::unique()","107":"CollectionValidatorTest::::unique()","108":"CollectionValidatorTest::::unique()","109":"CollectionValidatorTest::::unique()","110":"CollectionValidatorTest::::unique()","112":"CollectionValidatorTest::::notUnique()","113":"CollectionValidatorTest::::notUnique()","114":"CollectionValidatorTest::::notUnique()","115":"CollectionValidatorTest::::notUnique()","116":"CollectionValidatorTest::::notUnique()","117":"CollectionValidatorTest::::notUnique()","118":"CollectionValidatorTest::::notUnique()","119":"CollectionValidatorTest::::notUnique()","120":"CollectionValidatorTest::::notUnique()","121":"CollectionValidatorTest::::notUnique()","122":"CollectionValidatorTest::::notUnique()","124":"CollectionValidatorTest::::validator()","125":"CollectionValidatorTest::::validator()","126":"CollectionValidatorTest::::validator()","127":"CollectionValidatorTest::::validator()","128":"CollectionValidatorTest::::validator()","129":"CollectionValidatorTest::::validator()","138":"CollectionValidatorTest.Foo::::getTexts()","139":"CollectionValidatorTest.Foo::::getTexts()","140":"CollectionValidatorTest.Foo::::getTexts()"},"tests":[{"test_lines":[37,47],"covered_lines":[29,30,31,32,33,40],"label":"CollectionValidator::::toCollection()"},{"test_lines":[49,68],"covered_lines":[29,30,31,32,33,36,40,44],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[70,90],"covered_lines":[29,30,31,32,33,36,40,44],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[92,101],"covered_lines":[29,30,31,32,33,36,40,44],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/processor/ConstraintMetaProcessor.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.processor;\n","\n","import java.io.IOException;\n","import java.io.PrintWriter;\n","import java.io.UncheckedIOException;\n","import java.time.OffsetDateTime;\n","import java.util.ArrayList;\n","import java.util.LinkedHashMap;\n","import java.util.List;\n","import java.util.Map;\n","import java.util.Set;\n","import java.util.function.BiConsumer;\n","import java.util.stream.Collectors;\n","\n","import javax.annotation.processing.AbstractProcessor;\n","import javax.annotation.processing.RoundEnvironment;\n","import javax.annotation.processing.SupportedAnnotationTypes;\n","import javax.lang.model.SourceVersion;\n","import javax.lang.model.element.Element;\n","import javax.lang.model.element.ElementKind;\n","import javax.lang.model.element.ExecutableElement;\n","import javax.lang.model.element.Name;\n","import javax.lang.model.element.TypeElement;\n","import javax.lang.model.element.VariableElement;\n","import javax.lang.model.type.TypeKind;\n","import javax.lang.model.type.TypeMirror;\n","import javax.tools.JavaFileObject;\n","\n","import static am.ik.yavi.processor.ConstraintMetaTemplate.template;\n","import static java.util.stream.Collectors.groupingBy;\n","import static java.util.stream.Collectors.toList;\n","import static javax.lang.model.element.ElementKind.CLASS;\n","import static javax.lang.model.element.ElementKind.METHOD;\n","import static javax.lang.model.element.ElementKind.PARAMETER;\n","import static javax.lang.model.type.TypeKind.BOOLEAN;\n","import static javax.lang.model.type.TypeKind.BYTE;\n","import static javax.lang.model.type.TypeKind.CHAR;\n","import static javax.lang.model.type.TypeKind.DOUBLE;\n","import static javax.lang.model.type.TypeKind.FLOAT;\n","import static javax.lang.model.type.TypeKind.INT;\n","import static javax.lang.model.type.TypeKind.LONG;\n","import static javax.lang.model.type.TypeKind.SHORT;\n","\n","import am.ik.yavi.fn.Pair;\n","import am.ik.yavi.meta.ConstraintArguments;\n","import am.ik.yavi.meta.ConstraintTarget;\n","\n","/**\n"," * @since 0.4.0\n"," */\n","@SupportedAnnotationTypes({ \"am.ik.yavi.meta.ConstraintTarget\",\n","\t\t\"am.ik.yavi.meta.ConstraintArguments\" })\n","public class ConstraintMetaProcessor extends AbstractProcessor {\n","\n","\t@Override\n","\tpublic SourceVersion getSupportedSourceVersion() {\n","\t\treturn SourceVersion.latest();\n","\t}\n","\n","\t@Override\n","\tpublic boolean process(Set<? extends TypeElement> annotations,\n","\t\t\tRoundEnvironment roundEnv) {\n","\t\tfor (TypeElement typeElement : annotations) {\n","\t\t\tfinal Name qualifiedName = typeElement.getQualifiedName();\n","\t\t\tif (qualifiedName.contentEquals(ConstraintTarget.class.getName())) {\n","\t\t\t\tthis.processConstraintTarget(typeElement, roundEnv);\n","\t\t\t}\n","\t\t\tif (qualifiedName.contentEquals(ConstraintArguments.class.getName())) {\n","\t\t\t\tthis.processConstraintArguments(typeElement, roundEnv);\n","\t\t\t}\n","\t\t}\n","\t\treturn true;\n","\t}\n","\n","\tprivate void processConstraintTarget(TypeElement typeElement,\n","\t\t\tRoundEnvironment roundEnv) {\n","\t\tfinal Set<? extends Element> elementsAnnotatedWith = roundEnv\n","\t\t\t\t.getElementsAnnotatedWith(typeElement);\n","\t\tfinal Map<String, List<Pair<Element, Integer>>> elementsMap = elementsAnnotatedWith\n","\t\t\t\t.stream()\n","\t\t\t\t.filter(x -> !(x instanceof ExecutableElement)\n","\t\t\t\t\t\t|| ((ExecutableElement) x).getTypeParameters().isEmpty())\n","\t\t\t\t.map(x -> new Pair<Element, Integer>(x, -1)).collect(groupingBy(k -> {\n","\t\t\t\t\tString className = \"****\";\n","\t\t\t\t\tfinal Element element = k.first();\n","\t\t\t\t\tif (element instanceof VariableElement) {\n","\t\t\t\t\t\tclassName = element.getEnclosingElement().getEnclosingElement()\n","\t\t\t\t\t\t\t\t.toString();\n","\t\t\t\t\t}\n","\t\t\t\t\telse if (element instanceof ExecutableElement) {\n","\t\t\t\t\t\tclassName = element.getEnclosingElement().toString();\n","\t\t\t\t\t}\n","\t\t\t\t\treturn className;\n","\t\t\t\t}, toList()));\n","\t\tif (elementsMap.isEmpty()) {\n","\t\t\treturn;\n","\t\t}\n","\t\telementsMap.forEach(this::writeConstraintMetaFile);\n","\t}\n","\n","\tprivate void processConstraintArguments(TypeElement typeElement,\n","\t\t\tRoundEnvironment roundEnv) {\n","\t\tfinal Set<? extends Element> elementsAnnotatedWith = roundEnv\n","\t\t\t\t.getElementsAnnotatedWith(typeElement);\n","\n","\t\tfor (Element element : elementsAnnotatedWith) {\n","\t\t\tfinal List<Element> parameters = new ArrayList<>(\n","\t\t\t\t\t((ExecutableElement) element).getParameters());\n","\t\t\tString className = element.getEnclosingElement().toString();\n","\t\t\tif (element.getKind() == METHOD) {\n","\t\t\t\tparameters.add(0, element.getEnclosingElement());\n","\t\t\t\tclassName = className\n","\t\t\t\t\t\t+ beanUpperCamel(element.getSimpleName().toString());\n","\t\t\t}\n","\t\t\tfinal String argumentsClass = \"am.ik.yavi.arguments.Arguments\"\n","\t\t\t\t\t+ parameters.size() + \"<\" + parameters.stream()\n","\t\t\t\t\t\t\t.map(x -> type(x.asType())).collect(Collectors.joining(\", \"))\n","\t\t\t\t\t+ \">\";\n","\t\t\tfinal List<Pair<Element, Integer>> pairs = parameters.stream()\n","\t\t\t\t\t.map(x -> new Pair<>(x, parameters.indexOf(x))).collect(toList());\n","\t\t\tthis.writeConstraintArgumentMetaFile(className + \"Arguments\", argumentsClass,\n","\t\t\t\t\tpairs);\n","\t\t}\n","\t}\n","\n","\tprivate void writeConstraintMetaFile(String className,\n","\t\t\tList<Pair<Element, Integer>> elements) {\n","\t\tthis.writeMetaFile(className, elements, (pair, metas) -> {\n","\t\t\tfinal Element element = pair.first();\n","\t\t\tfinal ConstraintTarget constraintTarget = element\n","\t\t\t\t\t.getAnnotation(ConstraintTarget.class);\n","\t\t\tfinal ElementKind kind = element.getKind();\n","\t\t\tfinal String name = element.getSimpleName().toString();\n","\t\t\tif (kind == METHOD) {\n","\t\t\t\tfinal TypeMirror type = ((ExecutableElement) element).getReturnType();\n","\t\t\t\tfinal String target = beanLowerCamel(constraintTarget.getter()\n","\t\t\t\t\t\t? name.replaceFirst(\"^\" + getterPrefix(type), \"\")\n","\t\t\t\t\t\t: name);\n","\t\t\t\tmetas.put(target, template(className, type(type), target, name,\n","\t\t\t\t\t\tconstraintTarget.field()));\n","\t\t\t}\n","\t\t\telse if (kind == PARAMETER) {\n","\t\t\t\tfinal TypeMirror type = element.asType();\n","\t\t\t\tfinal String method = (constraintTarget.getter()\n","\t\t\t\t\t\t? getterPrefix(type) + beanUpperCamel(name)\n","\t\t\t\t\t\t: name);\n","\t\t\t\tmetas.put(name, template(className, type(type), name, method,\n","\t\t\t\t\t\tconstraintTarget.field()));\n","\t\t\t}\n","\t\t});\n","\t}\n","\n","\tprivate void writeConstraintArgumentMetaFile(String className, String argumentsClass,\n","\t\t\tList<Pair<Element, Integer>> elements) {\n","\t\tthis.writeMetaFile(className, elements, (pair, metas) -> {\n","\t\t\tfinal Element element = pair.first();\n","\t\t\tfinal TypeMirror type = element.asType();\n","\t\t\tfinal int position = pair.second() + 1;\n","\t\t\tfinal String name = element.getSimpleName().toString();\n","\t\t\tmetas.put(name,\n","\t\t\t\t\tConstraintMetaTemplate.templateArgument(argumentsClass, type(type),\n","\t\t\t\t\t\t\telement.getKind() == CLASS ? beanLowerCamel(name) : name,\n","\t\t\t\t\t\t\tposition));\n","\t\t});\n","\t}\n","\n","\tprivate void writeMetaFile(String className, List<Pair<Element, Integer>> elements,\n","\t\t\tBiConsumer<Pair<Element, Integer>, Map<String, String>> processElement) {\n","\t\tfinal Pair<String, String> pair = splitClassName(className);\n","\t\tfinal String packageName = pair.first();\n","\t\tfinal String simpleClassName = pair.second();\n","\t\tfinal String metaSimpleClassName = \"_\" + simpleClassName.replace('.', '_')\n","\t\t\t\t+ \"Meta\";\n","\t\tfinal String metaClassName = packageName + \".\" + metaSimpleClassName;\n","\t\ttry {\n","\t\t\tfinal JavaFileObject builderFile = super.processingEnv.getFiler()\n","\t\t\t\t\t.createSourceFile(metaClassName);\n","\t\t\ttry (final PrintWriter out = new PrintWriter(builderFile.openWriter())) {\n","\n","\t\t\t\tif (!packageName.isEmpty()) {\n","\t\t\t\t\tout.print(\"package \");\n","\t\t\t\t\tout.print(packageName);\n","\t\t\t\t\tout.println(\";\");\n","\t\t\t\t\tout.println();\n","\t\t\t\t}\n","\n","\t\t\t\tout.println(\"// Generated at \" + OffsetDateTime.now());\n","\t\t\t\tout.print(\"public class \");\n","\t\t\t\tout.print(metaSimpleClassName);\n","\t\t\t\tout.println(\" {\");\n","\n","\t\t\t\tfinal Map<String, String> metas = new LinkedHashMap<>();\n","\t\t\t\tfor (Pair<Element, Integer> element : elements) {\n","\t\t\t\t\tprocessElement.accept(element, metas);\n","\t\t\t\t}\n","\t\t\t\tmetas.forEach((k, v) -> out.println(\"  \" + v + \";\"));\n","\t\t\t\tout.println(\"}\");\n","\t\t\t}\n","\t\t}\n","\t\tcatch (IOException e) {\n","\t\t\tthrow new UncheckedIOException(e);\n","\t\t}\n","\t}\n","\n","\tstatic Pair<String, String> splitClassName(String className) {\n","\t\tString packageName = \"\";\n","\t\tfinal int p = firstUpperPosition(className);\n","\t\tif (p > 0) {\n","\t\t\tpackageName = className.substring(0, p - 1);\n","\t\t}\n","\t\tfinal String simpleClassName = className.substring(p);\n","\t\treturn new Pair<>(packageName, simpleClassName);\n","\t}\n","\n","\tstatic int firstUpperPosition(String s) {\n","\t\tfinal String lower = s.toLowerCase();\n","\t\tfor (int i = 0; i < s.length(); i++) {\n","\t\t\tif (s.charAt(i) != lower.charAt(i)) {\n","\t\t\t\treturn i;\n","\t\t\t}\n","\t\t}\n","\t\treturn -1;\n","\t}\n","\n","\tstatic String getterPrefix(TypeMirror type) {\n","\t\treturn type.getKind() == BOOLEAN ? \"is\" : \"get\";\n","\t}\n","\n","\tstatic String type(final TypeMirror typeMirror) {\n","\t\tfinal TypeKind kind = typeMirror.getKind();\n","\t\tif (kind.isPrimitive()) {\n","\t\t\tif (kind == BOOLEAN) {\n","\t\t\t\treturn Boolean.class.getName();\n","\t\t\t}\n","\t\t\telse if (kind == BYTE) {\n","\t\t\t\treturn Byte.class.getName();\n","\t\t\t}\n","\t\t\telse if (kind == SHORT) {\n","\t\t\t\treturn Short.class.getName();\n","\t\t\t}\n","\t\t\telse if (kind == INT) {\n","\t\t\t\treturn Integer.class.getName();\n","\t\t\t}\n","\t\t\telse if (kind == LONG) {\n","\t\t\t\treturn Long.class.getName();\n","\t\t\t}\n","\t\t\telse if (kind == CHAR) {\n","\t\t\t\treturn Character.class.getName();\n","\t\t\t}\n","\t\t\telse if (kind == FLOAT) {\n","\t\t\t\treturn Float.class.getName();\n","\t\t\t}\n","\t\t\telse if (kind == DOUBLE) {\n","\t\t\t\treturn Double.class.getName();\n","\t\t\t}\n","\t\t}\n","\t\treturn typeMirror.toString();\n","\t}\n","\n","\tstatic String beanLowerCamel(String s) {\n","\t\tif (s.length() >= 2) {\n","\t\t\tfinal String firstTwo = s.substring(0, 2);\n","\t\t\tif (firstTwo.equals(firstTwo.toUpperCase())) {\n","\t\t\t\treturn s;\n","\t\t\t}\n","\t\t}\n","\t\treturn s.substring(0, 1).toLowerCase() + s.substring(1);\n","\t}\n","\n","\tstatic String beanUpperCamel(String s) {\n","\t\tif (s.length() >= 2) {\n","\t\t\tfinal String firstTwo = s.substring(0, 2);\n","\t\t\tif (firstTwo.equals(firstTwo.toUpperCase())) {\n","\t\t\t\treturn s;\n","\t\t\t}\n","\t\t}\n","\t\treturn s.substring(0, 1).toUpperCase() + s.substring(1);\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.processor;\n","\n","import org.assertj.core.api.Assertions;\n","import org.junit.jupiter.api.Test;\n","\n","import com.google.testing.compile.JavaFileObjects;\n","\n","import static com.google.testing.compile.JavaSourcesSubject.assertThat;\n","\n","class ConstraintMetaProcessorTest {\n","\n","\t@Test\n","\tvoid processBean() {\n","\t\tassertThat(JavaFileObjects.forResource(\"test/CarBean.java\"))\n","\t\t\t\t.processedWith(new ConstraintMetaProcessor()) //\n","\t\t\t\t.compilesWithoutError().and()\n","\t\t\t\t.generatesSources(JavaFileObjects.forResource(\"test/_CarBeanMeta.java\"));\n","\t}\n","\n","\t@Test\n","\tvoid processImmutable() {\n","\t\tassertThat(JavaFileObjects.forResource(\"test/Car.java\"))\n","\t\t\t\t.processedWith(new ConstraintMetaProcessor()) //\n","\t\t\t\t.compilesWithoutError().and()\n","\t\t\t\t.generatesSources(JavaFileObjects.forResource(\"test/_CarMeta.java\"));\n","\t}\n","\n","\t@Test\n","\tvoid processFiled() {\n","\t\tassertThat(JavaFileObjects.forResource(\"test/CarField.java\"))\n","\t\t\t\t.processedWith(new ConstraintMetaProcessor()) //\n","\t\t\t\t.compilesWithoutError().and()\n","\t\t\t\t.generatesSources(JavaFileObjects.forResource(\"test/_CarFieldMeta.java\"));\n","\t}\n","\n","\t@Test\n","\tvoid allTypesBean() {\n","\t\tassertThat(JavaFileObjects.forResource(\"test/AllTypesBean.java\"))\n","\t\t\t\t.processedWith(new ConstraintMetaProcessor()) //\n","\t\t\t\t.compilesWithoutError().and().generatesSources(\n","\t\t\t\t\t\tJavaFileObjects.forResource(\"test/_AllTypesBeanMeta.java\"));\n","\t}\n","\n","\t@Test\n","\tvoid allTypesImmutable() {\n","\t\tassertThat(JavaFileObjects.forResource(\"test/AllTypesImmutable.java\"))\n","\t\t\t\t.processedWith(new ConstraintMetaProcessor()) //\n","\t\t\t\t.compilesWithoutError().and().generatesSources(\n","\t\t\t\t\t\tJavaFileObjects.forResource(\"test/_AllTypesImmutableMeta.java\"));\n","\t}\n","\n","\t@Test\n","\tvoid allTypesField() {\n","\t\tassertThat(JavaFileObjects.forResource(\"test/AllTypesField.java\"))\n","\t\t\t\t.processedWith(new ConstraintMetaProcessor()) //\n","\t\t\t\t.compilesWithoutError().and().generatesSources(\n","\t\t\t\t\t\tJavaFileObjects.forResource(\"test/_AllTypesFieldMeta.java\"));\n","\t}\n","\n","\t@Test\n","\tvoid processConstructorArguments() {\n","\t\tassertThat(JavaFileObjects.forResource(\"test/Car2.java\"))\n","\t\t\t\t.processedWith(new ConstraintMetaProcessor()) //\n","\t\t\t\t.compilesWithoutError().and().generatesSources(\n","\t\t\t\t\t\tJavaFileObjects.forResource(\"test/_Car2ArgumentsMeta.java\"));\n","\t}\n","\n","\t@Test\n","\tvoid processMethodArguments() {\n","\t\tassertThat(JavaFileObjects.forResource(\"test/UserService.java\"))\n","\t\t\t\t.processedWith(new ConstraintMetaProcessor()) //\n","\t\t\t\t.compilesWithoutError().and().generatesSources(JavaFileObjects\n","\t\t\t\t\t\t.forResource(\"test/_UserServiceCreateUserArgumentsMeta.java\"));\n","\t}\n","\n","\t@Test\n","\tvoid processInnerClass() {\n","\t\tassertThat(JavaFileObjects.forResource(\"test/Address.java\"))\n","\t\t\t\t.processedWith(new ConstraintMetaProcessor()) //\n","\t\t\t\t.compilesWithoutError().and()\n","\t\t\t\t.generatesSources(JavaFileObjects.forResource(\"test/_AddressMeta.java\"),\n","\t\t\t\t\t\tJavaFileObjects.forResource(\"test/_Address_CountryMeta.java\"),\n","\t\t\t\t\t\tJavaFileObjects\n","\t\t\t\t\t\t\t\t.forResource(\"test/_Address_PhoneNumberMeta.java\"));\n","\t}\n","\n","\t@Test\n","\tvoid testBeanLowerCamel() {\n","\t\tAssertions.assertThat(ConstraintMetaProcessor.beanLowerCamel(\"Name\"))\n","\t\t\t\t.isEqualTo(\"name\");\n","\t\tAssertions.assertThat(ConstraintMetaProcessor.beanLowerCamel(\"NAme\"))\n","\t\t\t\t.isEqualTo(\"NAme\");\n","\t\tAssertions.assertThat(ConstraintMetaProcessor.beanLowerCamel(\"NAME\"))\n","\t\t\t\t.isEqualTo(\"NAME\");\n","\t}\n","\n","\t@Test\n","\tvoid testBeanUpperCamel() {\n","\t\tAssertions.assertThat(ConstraintMetaProcessor.beanUpperCamel(\"name\"))\n","\t\t\t\t.isEqualTo(\"Name\");\n","\t\tAssertions.assertThat(ConstraintMetaProcessor.beanUpperCamel(\"NAme\"))\n","\t\t\t\t.isEqualTo(\"NAme\");\n","\t\tAssertions.assertThat(ConstraintMetaProcessor.beanUpperCamel(\"NAME\"))\n","\t\t\t\t.isEqualTo(\"NAME\");\n","\t}\n","\n","}"],"method_lines_dic":{"ConstraintMetaProcessor::::getSupportedSourceVersion()":[70,73],"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)":[75,88],"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)":[90,114],"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)":[116,139],"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)":[141,166],"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)":[168,180],"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)":[182,218],"ConstraintMetaProcessor::::splitClassName(java.lang.String)":[220,228],"ConstraintMetaProcessor::::firstUpperPosition(java.lang.String)":[230,238],"ConstraintMetaProcessor::::getterPrefix(javax.lang.model.type.TypeMirror)":[240,242],"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)":[244,273],"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)":[275,283],"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)":[285,293]},"test_method_lines_dic":{"ConstraintMetaProcessorTest::::processBean()":[27,33],"ConstraintMetaProcessorTest::::processImmutable()":[35,41],"ConstraintMetaProcessorTest::::processFiled()":[43,49],"ConstraintMetaProcessorTest::::allTypesBean()":[51,57],"ConstraintMetaProcessorTest::::allTypesImmutable()":[59,65],"ConstraintMetaProcessorTest::::allTypesField()":[67,73],"ConstraintMetaProcessorTest::::processConstructorArguments()":[75,81],"ConstraintMetaProcessorTest::::processMethodArguments()":[83,89],"ConstraintMetaProcessorTest::::processInnerClass()":[91,100],"ConstraintMetaProcessorTest::::testBeanLowerCamel()":[102,110],"ConstraintMetaProcessorTest::::testBeanUpperCamel()":[112,120]},"reverse_method_lines_dic":{"70":"ConstraintMetaProcessor::::getSupportedSourceVersion()","71":"ConstraintMetaProcessor::::getSupportedSourceVersion()","72":"ConstraintMetaProcessor::::getSupportedSourceVersion()","73":"ConstraintMetaProcessor::::getSupportedSourceVersion()","75":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","76":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","77":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","78":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","79":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","80":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","81":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","82":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","83":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","84":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","85":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","86":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","87":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","88":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)","90":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","91":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","92":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","93":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","94":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","95":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","96":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","97":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","98":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","99":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","100":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","101":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","102":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","103":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","104":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","105":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","106":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","107":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","108":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","109":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","110":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","111":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","112":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","113":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","114":"ConstraintMetaProcessor::::processConstraintTarget(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","116":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","117":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","118":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","119":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","120":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","121":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","122":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","123":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","124":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","125":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","126":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","127":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","128":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","129":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","130":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","131":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","132":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","133":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","134":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","135":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","136":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","137":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","138":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","139":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)","141":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","142":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","143":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","144":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","145":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","146":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","147":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","148":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","149":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","150":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","151":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","152":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","153":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","154":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","155":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","156":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","157":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","158":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","159":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","160":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","161":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","162":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","163":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","164":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","165":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","166":"ConstraintMetaProcessor::::writeConstraintMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","168":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","169":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","170":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","171":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","172":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","173":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","174":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","175":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","176":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","177":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","178":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","179":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","180":"ConstraintMetaProcessor::::writeConstraintArgumentMetaFile(java.lang.String,java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>)","182":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","183":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","184":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","185":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","186":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","187":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","188":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","189":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","190":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","191":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","192":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","193":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","194":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","195":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","196":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","197":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","198":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","199":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","200":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","201":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","202":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","203":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","204":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","205":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","206":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","207":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","208":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","209":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","210":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","211":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","212":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","213":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","214":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","215":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","216":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","217":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","218":"ConstraintMetaProcessor::::writeMetaFile(java.lang.String,java.util.List<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>>,java.util.function.BiConsumer<am.ik.yavi.fn.Pair<javax.lang.model.element.Element, java.lang.Integer>, java.util.Map<java.lang.String, java.lang.String>>)","220":"ConstraintMetaProcessor::::splitClassName(java.lang.String)","221":"ConstraintMetaProcessor::::splitClassName(java.lang.String)","222":"ConstraintMetaProcessor::::splitClassName(java.lang.String)","223":"ConstraintMetaProcessor::::splitClassName(java.lang.String)","224":"ConstraintMetaProcessor::::splitClassName(java.lang.String)","225":"ConstraintMetaProcessor::::splitClassName(java.lang.String)","226":"ConstraintMetaProcessor::::splitClassName(java.lang.String)","227":"ConstraintMetaProcessor::::splitClassName(java.lang.String)","228":"ConstraintMetaProcessor::::splitClassName(java.lang.String)","230":"ConstraintMetaProcessor::::firstUpperPosition(java.lang.String)","231":"ConstraintMetaProcessor::::firstUpperPosition(java.lang.String)","232":"ConstraintMetaProcessor::::firstUpperPosition(java.lang.String)","233":"ConstraintMetaProcessor::::firstUpperPosition(java.lang.String)","234":"ConstraintMetaProcessor::::firstUpperPosition(java.lang.String)","235":"ConstraintMetaProcessor::::firstUpperPosition(java.lang.String)","236":"ConstraintMetaProcessor::::firstUpperPosition(java.lang.String)","237":"ConstraintMetaProcessor::::firstUpperPosition(java.lang.String)","238":"ConstraintMetaProcessor::::firstUpperPosition(java.lang.String)","240":"ConstraintMetaProcessor::::getterPrefix(javax.lang.model.type.TypeMirror)","241":"ConstraintMetaProcessor::::getterPrefix(javax.lang.model.type.TypeMirror)","242":"ConstraintMetaProcessor::::getterPrefix(javax.lang.model.type.TypeMirror)","244":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","245":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","246":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","247":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","248":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","249":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","250":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","251":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","252":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","253":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","254":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","255":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","256":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","257":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","258":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","259":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","260":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","261":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","262":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","263":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","264":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","265":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","266":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","267":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","268":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","269":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","270":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","271":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","272":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","273":"ConstraintMetaProcessor::::type(javax.lang.model.type.TypeMirror)","275":"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)","276":"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)","277":"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)","278":"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)","279":"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)","280":"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)","281":"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)","282":"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)","283":"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)","285":"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)","286":"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)","287":"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)","288":"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)","289":"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)","290":"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)","291":"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)","292":"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)","293":"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)"},"test_reverse_method_lines_dic":{"27":"ConstraintMetaProcessorTest::::processBean()","28":"ConstraintMetaProcessorTest::::processBean()","29":"ConstraintMetaProcessorTest::::processBean()","30":"ConstraintMetaProcessorTest::::processBean()","31":"ConstraintMetaProcessorTest::::processBean()","32":"ConstraintMetaProcessorTest::::processBean()","33":"ConstraintMetaProcessorTest::::processBean()","35":"ConstraintMetaProcessorTest::::processImmutable()","36":"ConstraintMetaProcessorTest::::processImmutable()","37":"ConstraintMetaProcessorTest::::processImmutable()","38":"ConstraintMetaProcessorTest::::processImmutable()","39":"ConstraintMetaProcessorTest::::processImmutable()","40":"ConstraintMetaProcessorTest::::processImmutable()","41":"ConstraintMetaProcessorTest::::processImmutable()","43":"ConstraintMetaProcessorTest::::processFiled()","44":"ConstraintMetaProcessorTest::::processFiled()","45":"ConstraintMetaProcessorTest::::processFiled()","46":"ConstraintMetaProcessorTest::::processFiled()","47":"ConstraintMetaProcessorTest::::processFiled()","48":"ConstraintMetaProcessorTest::::processFiled()","49":"ConstraintMetaProcessorTest::::processFiled()","51":"ConstraintMetaProcessorTest::::allTypesBean()","52":"ConstraintMetaProcessorTest::::allTypesBean()","53":"ConstraintMetaProcessorTest::::allTypesBean()","54":"ConstraintMetaProcessorTest::::allTypesBean()","55":"ConstraintMetaProcessorTest::::allTypesBean()","56":"ConstraintMetaProcessorTest::::allTypesBean()","57":"ConstraintMetaProcessorTest::::allTypesBean()","59":"ConstraintMetaProcessorTest::::allTypesImmutable()","60":"ConstraintMetaProcessorTest::::allTypesImmutable()","61":"ConstraintMetaProcessorTest::::allTypesImmutable()","62":"ConstraintMetaProcessorTest::::allTypesImmutable()","63":"ConstraintMetaProcessorTest::::allTypesImmutable()","64":"ConstraintMetaProcessorTest::::allTypesImmutable()","65":"ConstraintMetaProcessorTest::::allTypesImmutable()","67":"ConstraintMetaProcessorTest::::allTypesField()","68":"ConstraintMetaProcessorTest::::allTypesField()","69":"ConstraintMetaProcessorTest::::allTypesField()","70":"ConstraintMetaProcessorTest::::allTypesField()","71":"ConstraintMetaProcessorTest::::allTypesField()","72":"ConstraintMetaProcessorTest::::allTypesField()","73":"ConstraintMetaProcessorTest::::allTypesField()","75":"ConstraintMetaProcessorTest::::processConstructorArguments()","76":"ConstraintMetaProcessorTest::::processConstructorArguments()","77":"ConstraintMetaProcessorTest::::processConstructorArguments()","78":"ConstraintMetaProcessorTest::::processConstructorArguments()","79":"ConstraintMetaProcessorTest::::processConstructorArguments()","80":"ConstraintMetaProcessorTest::::processConstructorArguments()","81":"ConstraintMetaProcessorTest::::processConstructorArguments()","83":"ConstraintMetaProcessorTest::::processMethodArguments()","84":"ConstraintMetaProcessorTest::::processMethodArguments()","85":"ConstraintMetaProcessorTest::::processMethodArguments()","86":"ConstraintMetaProcessorTest::::processMethodArguments()","87":"ConstraintMetaProcessorTest::::processMethodArguments()","88":"ConstraintMetaProcessorTest::::processMethodArguments()","89":"ConstraintMetaProcessorTest::::processMethodArguments()","91":"ConstraintMetaProcessorTest::::processInnerClass()","92":"ConstraintMetaProcessorTest::::processInnerClass()","93":"ConstraintMetaProcessorTest::::processInnerClass()","94":"ConstraintMetaProcessorTest::::processInnerClass()","95":"ConstraintMetaProcessorTest::::processInnerClass()","96":"ConstraintMetaProcessorTest::::processInnerClass()","97":"ConstraintMetaProcessorTest::::processInnerClass()","98":"ConstraintMetaProcessorTest::::processInnerClass()","99":"ConstraintMetaProcessorTest::::processInnerClass()","100":"ConstraintMetaProcessorTest::::processInnerClass()","102":"ConstraintMetaProcessorTest::::testBeanLowerCamel()","103":"ConstraintMetaProcessorTest::::testBeanLowerCamel()","104":"ConstraintMetaProcessorTest::::testBeanLowerCamel()","105":"ConstraintMetaProcessorTest::::testBeanLowerCamel()","106":"ConstraintMetaProcessorTest::::testBeanLowerCamel()","107":"ConstraintMetaProcessorTest::::testBeanLowerCamel()","108":"ConstraintMetaProcessorTest::::testBeanLowerCamel()","109":"ConstraintMetaProcessorTest::::testBeanLowerCamel()","110":"ConstraintMetaProcessorTest::::testBeanLowerCamel()","112":"ConstraintMetaProcessorTest::::testBeanUpperCamel()","113":"ConstraintMetaProcessorTest::::testBeanUpperCamel()","114":"ConstraintMetaProcessorTest::::testBeanUpperCamel()","115":"ConstraintMetaProcessorTest::::testBeanUpperCamel()","116":"ConstraintMetaProcessorTest::::testBeanUpperCamel()","117":"ConstraintMetaProcessorTest::::testBeanUpperCamel()","118":"ConstraintMetaProcessorTest::::testBeanUpperCamel()","119":"ConstraintMetaProcessorTest::::testBeanUpperCamel()","120":"ConstraintMetaProcessorTest::::testBeanUpperCamel()"},"tests":[{"test_lines":[27,33],"covered_lines":[68,72,78,79,80,81,83,86,87,92,93,94,95,96,97,98,99,100,101,105,106,108,109,110,113,114,143,144,145,146,147,148,149,150,151,152,154,155,156,165,166,184,185,186,187,189,191,192,193,195,196,197,198,199,202,203,204,205,207,208,209,210,211,212,213,217,218,221,222,223,224,226,227,231,232,233,234,241,245,246,247,250,253,256,257,272,276,277,278,282],"label":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)"},{"test_lines":[35,41],"covered_lines":[68,72,78,79,80,81,83,86,87,92,93,94,95,96,97,98,99,100,101,105,106,108,109,110,113,114,143,144,145,146,147,148,149,150,151,152,154,155,156,165,166,184,185,186,187,189,191,192,193,195,196,197,198,199,202,203,204,205,207,208,209,210,211,212,213,217,218,221,222,223,224,226,227,231,232,233,234,245,246,247,250,253,256,257,272,276,277,278,282],"label":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)"},{"test_lines":[43,49],"covered_lines":[68,72,78,79,80,81,83,86,87,92,93,94,95,96,97,98,99,100,101,102,103,108,109,110,113,114,143,144,145,146,147,148,149,157,158,159,160,162,163,165,166,184,185,186,187,189,191,192,193,195,196,197,198,199,202,203,204,205,207,208,209,210,211,212,213,217,218,221,222,223,224,226,227,231,232,233,234,241,245,246,247,250,253,256,257,272,286,287,288,292],"label":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)"},{"test_lines":[51,57],"covered_lines":[68,72,78,79,80,81,83,86,87,92,93,94,95,96,97,98,99,100,101,105,106,108,109,110,113,114,143,144,145,146,147,148,149,150,151,152,154,155,156,165,166,184,185,186,187,189,191,192,193,195,196,197,198,199,202,203,204,205,207,208,209,210,211,212,213,217,218,221,222,223,224,226,227,231,232,233,234,241,245,246,247,248,250,251,253,254,256,257,259,260,262,263,265,266,268,269,272,276,277,278,282],"label":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)"},{"test_lines":[59,65],"covered_lines":[68,72,78,79,80,81,83,86,87,92,93,94,95,96,97,98,99,100,101,105,106,108,109,110,113,114,143,144,145,146,147,148,149,150,151,152,154,155,156,165,166,184,185,186,187,189,191,192,193,195,196,197,198,199,202,203,204,205,207,208,209,210,211,212,213,217,218,221,222,223,224,226,227,231,232,233,234,245,246,247,248,250,251,253,254,256,257,259,260,262,263,265,266,268,269,272,276,277,278,282],"label":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)"},{"test_lines":[67,73],"covered_lines":[68,72,78,79,80,81,83,86,87,92,93,94,95,96,97,98,99,100,101,102,103,108,109,110,113,114,143,144,145,146,147,148,149,157,158,159,160,162,163,165,166,184,185,186,187,189,191,192,193,195,196,197,198,199,202,203,204,205,207,208,209,210,211,212,213,217,218,221,222,223,224,226,227,231,232,233,234,241,245,246,247,248,250,251,253,254,256,257,259,260,262,263,265,266,268,269,272,286,287,288,292],"label":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)"},{"test_lines":[75,81],"covered_lines":[68,72,78,79,80,83,84,86,87,118,119,121,122,123,124,125,130,131,132,134,135,136,138,139,170,171,172,173,174,175,176,177,179,180,184,185,186,187,189,191,192,193,195,196,197,198,199,202,203,204,205,207,208,209,210,211,212,213,217,218,221,222,223,224,226,227,231,232,233,234,245,246,247,250,253,256,257,272],"label":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)"},{"test_lines":[83,89],"covered_lines":[68,72,78,79,80,83,84,86,87,118,119,121,122,123,124,125,126,127,128,130,131,132,134,135,136,138,139,170,171,172,173,174,175,176,177,179,180,184,185,186,187,189,191,192,193,195,196,197,198,199,202,203,204,205,207,208,209,210,211,212,213,217,218,221,222,223,224,226,227,231,232,233,234,245,246,272,276,277,278,282,286,287,288,292],"label":"ConstraintMetaProcessor::::processConstraintArguments(javax.lang.model.element.TypeElement,javax.annotation.processing.RoundEnvironment)"},{"test_lines":[91,100],"covered_lines":[68,72,78,79,80,81,83,86,87,92,93,94,95,96,97,98,99,100,101,102,103,108,109,110,113,114,143,144,145,146,147,148,149,157,158,159,160,162,163,165,166,184,185,186,187,189,191,192,193,195,196,197,198,199,202,203,204,205,207,208,209,210,211,212,213,217,218,221,222,223,224,226,227,231,232,233,234,245,246,272],"label":"ConstraintMetaProcessor::::process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)"},{"test_lines":[102,110],"covered_lines":[276,277,278,279,282],"label":"ConstraintMetaProcessor::::beanLowerCamel(java.lang.String)"},{"test_lines":[112,120],"covered_lines":[286,287,288,289,292],"label":"ConstraintMetaProcessor::::beanUpperCamel(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/DoubleConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.function.Predicate;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","\n","public class DoubleConstraint<T>\n","\t\textends NumericConstraintBase<T, Double, DoubleConstraint<T>> {\n","\t@Override\n","\tpublic DoubleConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Double> isGreaterThan(Double min) {\n","\t\treturn x -> x > min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Double> isGreaterThanOrEqual(Double min) {\n","\t\treturn x -> x >= min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Double> isLessThan(Double max) {\n","\t\treturn x -> x < max;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Double> isLessThanOrEqual(Double max) {\n","\t\treturn x -> x <= max;\n","\t}\n","\n","\t@Override\n","\tprotected Double zeroValue() {\n","\t\treturn 0.0;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.ValueSource;\n","\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class DoubleConstraintTest {\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 101.0, 150.0 })\n","\tvoid validGreaterThan(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(c -> c.greaterThan(100.0));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 100.0, -50.0 })\n","\tvoid invalidGreaterThan(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(c -> c.greaterThan(100.0));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 101.0, 100.0 })\n","\tvoid validGreaterThanOrEqual(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(c -> c.greaterThanOrEqual(100.0));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 99L, -50.0 })\n","\tvoid invalidGreaterThanOrEqual(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(c -> c.greaterThanOrEqual(100.0));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 99L, -50.0 })\n","\tvoid validLessThan(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(c -> c.lessThan(100.0));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 100.0, 150.0 })\n","\tvoid invalidLessThan(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(c -> c.lessThan(100.0));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 99L, 100.0 })\n","\tvoid validLessThanOrEqual(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(c -> c.lessThanOrEqual(100.0));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 101.0, 150.0 })\n","\tvoid invalidLessThanOrEqual(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(c -> c.lessThanOrEqual(100.0));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 101.0, 150.0 })\n","\tvoid validPositive(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { -101.0, -150.0, 0 })\n","\tvoid invalidPositive(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 99.0, 100.0, 0.0 })\n","\tvoid invalidNegative(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { -100.0, -10.0 })\n","\tvoid validNegative(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 99.5, 100.5, 0 })\n","\tvoid validPositiveOrZero(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { -101, -12 })\n","\tvoid invalidPositiveOrZero(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 99.0, 100 })\n","\tvoid invalidNegaitveOrZero(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { -101, -120, 0 })\n","\tvoid validNegaitveOrZero(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { 99.0, 100 })\n","\tvoid invalidNegativeOrZero(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(doubles = { -101, -120, 0 })\n","\tvoid validNegativeOrZero(double value) {\n","\t\tPredicate<Double> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\tprivate static Predicate<Double> retrievePredicate(\n","\t\t\tFunction<DoubleConstraint<Double>, DoubleConstraint<Double>> constraint) {\n","\t\treturn constraint.apply(new DoubleConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"DoubleConstraint::::cast()":[24,27],"DoubleConstraint::::isGreaterThan(java.lang.Double)":[29,32],"DoubleConstraint::::isGreaterThanOrEqual(java.lang.Double)":[34,37],"DoubleConstraint::::isLessThan(java.lang.Double)":[39,42],"DoubleConstraint::::isLessThanOrEqual(java.lang.Double)":[44,47],"DoubleConstraint::::zeroValue()":[49,52]},"test_method_lines_dic":{"DoubleConstraintTest::::validGreaterThan(double)":[29,34],"DoubleConstraintTest::::invalidGreaterThan(double)":[36,41],"DoubleConstraintTest::::validGreaterThanOrEqual(double)":[43,48],"DoubleConstraintTest::::invalidGreaterThanOrEqual(double)":[50,55],"DoubleConstraintTest::::validLessThan(double)":[57,62],"DoubleConstraintTest::::invalidLessThan(double)":[64,69],"DoubleConstraintTest::::validLessThanOrEqual(double)":[71,76],"DoubleConstraintTest::::invalidLessThanOrEqual(double)":[78,83],"DoubleConstraintTest::::validPositive(double)":[85,90],"DoubleConstraintTest::::invalidPositive(double)":[92,97],"DoubleConstraintTest::::invalidNegative(double)":[99,104],"DoubleConstraintTest::::validNegative(double)":[106,111],"DoubleConstraintTest::::validPositiveOrZero(double)":[113,119],"DoubleConstraintTest::::invalidPositiveOrZero(double)":[121,127],"DoubleConstraintTest::::invalidNegaitveOrZero(double)":[129,135],"DoubleConstraintTest::::validNegaitveOrZero(double)":[137,143],"DoubleConstraintTest::::invalidNegativeOrZero(double)":[145,151],"DoubleConstraintTest::::validNegativeOrZero(double)":[153,159]},"reverse_method_lines_dic":{"24":"DoubleConstraint::::cast()","25":"DoubleConstraint::::cast()","26":"DoubleConstraint::::cast()","27":"DoubleConstraint::::cast()","29":"DoubleConstraint::::isGreaterThan(java.lang.Double)","30":"DoubleConstraint::::isGreaterThan(java.lang.Double)","31":"DoubleConstraint::::isGreaterThan(java.lang.Double)","32":"DoubleConstraint::::isGreaterThan(java.lang.Double)","34":"DoubleConstraint::::isGreaterThanOrEqual(java.lang.Double)","35":"DoubleConstraint::::isGreaterThanOrEqual(java.lang.Double)","36":"DoubleConstraint::::isGreaterThanOrEqual(java.lang.Double)","37":"DoubleConstraint::::isGreaterThanOrEqual(java.lang.Double)","39":"DoubleConstraint::::isLessThan(java.lang.Double)","40":"DoubleConstraint::::isLessThan(java.lang.Double)","41":"DoubleConstraint::::isLessThan(java.lang.Double)","42":"DoubleConstraint::::isLessThan(java.lang.Double)","44":"DoubleConstraint::::isLessThanOrEqual(java.lang.Double)","45":"DoubleConstraint::::isLessThanOrEqual(java.lang.Double)","46":"DoubleConstraint::::isLessThanOrEqual(java.lang.Double)","47":"DoubleConstraint::::isLessThanOrEqual(java.lang.Double)","49":"DoubleConstraint::::zeroValue()","50":"DoubleConstraint::::zeroValue()","51":"DoubleConstraint::::zeroValue()","52":"DoubleConstraint::::zeroValue()"},"test_reverse_method_lines_dic":{"29":"DoubleConstraintTest::::validGreaterThan(double)","30":"DoubleConstraintTest::::validGreaterThan(double)","31":"DoubleConstraintTest::::validGreaterThan(double)","32":"DoubleConstraintTest::::validGreaterThan(double)","33":"DoubleConstraintTest::::validGreaterThan(double)","34":"DoubleConstraintTest::::validGreaterThan(double)","36":"DoubleConstraintTest::::invalidGreaterThan(double)","37":"DoubleConstraintTest::::invalidGreaterThan(double)","38":"DoubleConstraintTest::::invalidGreaterThan(double)","39":"DoubleConstraintTest::::invalidGreaterThan(double)","40":"DoubleConstraintTest::::invalidGreaterThan(double)","41":"DoubleConstraintTest::::invalidGreaterThan(double)","43":"DoubleConstraintTest::::validGreaterThanOrEqual(double)","44":"DoubleConstraintTest::::validGreaterThanOrEqual(double)","45":"DoubleConstraintTest::::validGreaterThanOrEqual(double)","46":"DoubleConstraintTest::::validGreaterThanOrEqual(double)","47":"DoubleConstraintTest::::validGreaterThanOrEqual(double)","48":"DoubleConstraintTest::::validGreaterThanOrEqual(double)","50":"DoubleConstraintTest::::invalidGreaterThanOrEqual(double)","51":"DoubleConstraintTest::::invalidGreaterThanOrEqual(double)","52":"DoubleConstraintTest::::invalidGreaterThanOrEqual(double)","53":"DoubleConstraintTest::::invalidGreaterThanOrEqual(double)","54":"DoubleConstraintTest::::invalidGreaterThanOrEqual(double)","55":"DoubleConstraintTest::::invalidGreaterThanOrEqual(double)","57":"DoubleConstraintTest::::validLessThan(double)","58":"DoubleConstraintTest::::validLessThan(double)","59":"DoubleConstraintTest::::validLessThan(double)","60":"DoubleConstraintTest::::validLessThan(double)","61":"DoubleConstraintTest::::validLessThan(double)","62":"DoubleConstraintTest::::validLessThan(double)","64":"DoubleConstraintTest::::invalidLessThan(double)","65":"DoubleConstraintTest::::invalidLessThan(double)","66":"DoubleConstraintTest::::invalidLessThan(double)","67":"DoubleConstraintTest::::invalidLessThan(double)","68":"DoubleConstraintTest::::invalidLessThan(double)","69":"DoubleConstraintTest::::invalidLessThan(double)","71":"DoubleConstraintTest::::validLessThanOrEqual(double)","72":"DoubleConstraintTest::::validLessThanOrEqual(double)","73":"DoubleConstraintTest::::validLessThanOrEqual(double)","74":"DoubleConstraintTest::::validLessThanOrEqual(double)","75":"DoubleConstraintTest::::validLessThanOrEqual(double)","76":"DoubleConstraintTest::::validLessThanOrEqual(double)","78":"DoubleConstraintTest::::invalidLessThanOrEqual(double)","79":"DoubleConstraintTest::::invalidLessThanOrEqual(double)","80":"DoubleConstraintTest::::invalidLessThanOrEqual(double)","81":"DoubleConstraintTest::::invalidLessThanOrEqual(double)","82":"DoubleConstraintTest::::invalidLessThanOrEqual(double)","83":"DoubleConstraintTest::::invalidLessThanOrEqual(double)","85":"DoubleConstraintTest::::validPositive(double)","86":"DoubleConstraintTest::::validPositive(double)","87":"DoubleConstraintTest::::validPositive(double)","88":"DoubleConstraintTest::::validPositive(double)","89":"DoubleConstraintTest::::validPositive(double)","90":"DoubleConstraintTest::::validPositive(double)","92":"DoubleConstraintTest::::invalidPositive(double)","93":"DoubleConstraintTest::::invalidPositive(double)","94":"DoubleConstraintTest::::invalidPositive(double)","95":"DoubleConstraintTest::::invalidPositive(double)","96":"DoubleConstraintTest::::invalidPositive(double)","97":"DoubleConstraintTest::::invalidPositive(double)","99":"DoubleConstraintTest::::invalidNegative(double)","100":"DoubleConstraintTest::::invalidNegative(double)","101":"DoubleConstraintTest::::invalidNegative(double)","102":"DoubleConstraintTest::::invalidNegative(double)","103":"DoubleConstraintTest::::invalidNegative(double)","104":"DoubleConstraintTest::::invalidNegative(double)","106":"DoubleConstraintTest::::validNegative(double)","107":"DoubleConstraintTest::::validNegative(double)","108":"DoubleConstraintTest::::validNegative(double)","109":"DoubleConstraintTest::::validNegative(double)","110":"DoubleConstraintTest::::validNegative(double)","111":"DoubleConstraintTest::::validNegative(double)","113":"DoubleConstraintTest::::validPositiveOrZero(double)","114":"DoubleConstraintTest::::validPositiveOrZero(double)","115":"DoubleConstraintTest::::validPositiveOrZero(double)","116":"DoubleConstraintTest::::validPositiveOrZero(double)","117":"DoubleConstraintTest::::validPositiveOrZero(double)","118":"DoubleConstraintTest::::validPositiveOrZero(double)","119":"DoubleConstraintTest::::validPositiveOrZero(double)","121":"DoubleConstraintTest::::invalidPositiveOrZero(double)","122":"DoubleConstraintTest::::invalidPositiveOrZero(double)","123":"DoubleConstraintTest::::invalidPositiveOrZero(double)","124":"DoubleConstraintTest::::invalidPositiveOrZero(double)","125":"DoubleConstraintTest::::invalidPositiveOrZero(double)","126":"DoubleConstraintTest::::invalidPositiveOrZero(double)","127":"DoubleConstraintTest::::invalidPositiveOrZero(double)","129":"DoubleConstraintTest::::invalidNegaitveOrZero(double)","130":"DoubleConstraintTest::::invalidNegaitveOrZero(double)","131":"DoubleConstraintTest::::invalidNegaitveOrZero(double)","132":"DoubleConstraintTest::::invalidNegaitveOrZero(double)","133":"DoubleConstraintTest::::invalidNegaitveOrZero(double)","134":"DoubleConstraintTest::::invalidNegaitveOrZero(double)","135":"DoubleConstraintTest::::invalidNegaitveOrZero(double)","137":"DoubleConstraintTest::::validNegaitveOrZero(double)","138":"DoubleConstraintTest::::validNegaitveOrZero(double)","139":"DoubleConstraintTest::::validNegaitveOrZero(double)","140":"DoubleConstraintTest::::validNegaitveOrZero(double)","141":"DoubleConstraintTest::::validNegaitveOrZero(double)","142":"DoubleConstraintTest::::validNegaitveOrZero(double)","143":"DoubleConstraintTest::::validNegaitveOrZero(double)","145":"DoubleConstraintTest::::invalidNegativeOrZero(double)","146":"DoubleConstraintTest::::invalidNegativeOrZero(double)","147":"DoubleConstraintTest::::invalidNegativeOrZero(double)","148":"DoubleConstraintTest::::invalidNegativeOrZero(double)","149":"DoubleConstraintTest::::invalidNegativeOrZero(double)","150":"DoubleConstraintTest::::invalidNegativeOrZero(double)","151":"DoubleConstraintTest::::invalidNegativeOrZero(double)","153":"DoubleConstraintTest::::validNegativeOrZero(double)","154":"DoubleConstraintTest::::validNegativeOrZero(double)","155":"DoubleConstraintTest::::validNegativeOrZero(double)","156":"DoubleConstraintTest::::validNegativeOrZero(double)","157":"DoubleConstraintTest::::validNegativeOrZero(double)","158":"DoubleConstraintTest::::validNegativeOrZero(double)","159":"DoubleConstraintTest::::validNegativeOrZero(double)"},"tests":[{"test_lines":[29,34],"covered_lines":[22,26,31],"label":"DoubleConstraint::::isGreaterThan(java.lang.Double)"},{"test_lines":[36,41],"covered_lines":[22,26,31],"label":"DoubleConstraint::::isGreaterThan(java.lang.Double)"},{"test_lines":[43,48],"covered_lines":[22,26,36],"label":"DoubleConstraint::::isGreaterThanOrEqual(java.lang.Double)"},{"test_lines":[50,55],"covered_lines":[22,26,36],"label":"DoubleConstraint::::isGreaterThanOrEqual(java.lang.Double)"},{"test_lines":[57,62],"covered_lines":[22,26,41],"label":"DoubleConstraint::::isLessThan(java.lang.Double)"},{"test_lines":[64,69],"covered_lines":[22,26,41],"label":"DoubleConstraint::::isLessThan(java.lang.Double)"},{"test_lines":[71,76],"covered_lines":[22,26,46],"label":"DoubleConstraint::::isLessThanOrEqual(java.lang.Double)"},{"test_lines":[78,83],"covered_lines":[22,26,46],"label":"DoubleConstraint::::isLessThanOrEqual(java.lang.Double)"},{"test_lines":[85,90],"covered_lines":[22,26,31,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[92,97],"covered_lines":[22,26,31,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[99,104],"covered_lines":[22,26,41,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[106,111],"covered_lines":[22,26,41,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[113,119],"covered_lines":[22,26,36,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[121,127],"covered_lines":[22,26,36,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[129,135],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[137,143],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[145,151],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[153,159],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/BigDecimalConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.math.BigDecimal;\n","import java.util.function.Predicate;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","\n","public class BigDecimalConstraint<T>\n","\t\textends NumericConstraintBase<T, BigDecimal, BigDecimalConstraint<T>> {\n","\t@Override\n","\tpublic BigDecimalConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<BigDecimal> isGreaterThan(BigDecimal min) {\n","\t\treturn x -> x.compareTo(min) > 0;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<BigDecimal> isGreaterThanOrEqual(BigDecimal min) {\n","\t\treturn x -> x.compareTo(min) >= 0;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<BigDecimal> isLessThan(BigDecimal max) {\n","\t\treturn x -> x.compareTo(max) < 0;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<BigDecimal> isLessThanOrEqual(BigDecimal max) {\n","\t\treturn x -> x.compareTo(max) <= 0;\n","\t}\n","\n","\t@Override\n","\tprotected BigDecimal zeroValue() {\n","\t\treturn BigDecimal.ZERO;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.ValueSource;\n","\n","import java.math.BigDecimal;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class BigDecimalConstraintTest {\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"101\", \"150\" })\n","\tvoid validGreaterThan(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThan(new BigDecimal(\"100\")));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"100\", \"-50\" })\n","\tvoid invalidGreaterThan(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThan(new BigDecimal(\"100\")));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"101\", \"100\" })\n","\tvoid validGreaterThanOrEqual(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual(new BigDecimal(\"100\")));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"-50\" })\n","\tvoid invalidGreaterThanOrEqual(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual(new BigDecimal(\"100\")));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"-50\" })\n","\tvoid validLessThan(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThan(new BigDecimal(\"100\")));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"100\", \"150\" })\n","\tvoid invalidLessThan(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThan(new BigDecimal(\"100\")));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid validLessThanOrEqual(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThanOrEqual(new BigDecimal(\"100\")));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"101\", \"150\" })\n","\tvoid invalidLessThanOrEqual(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThanOrEqual(new BigDecimal(\"100\")));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid validPositive(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-150\", \"0\" })\n","\tvoid invalidPositive(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\", \"0\" })\n","\tvoid invalidNegative(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-150\" })\n","\tvoid validNegative(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\", \"0\" })\n","\tvoid validPositiveOrZero(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-150\" })\n","\tvoid invalidPositiveOrZero(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid invalidNegaitveOrZero(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-150\", \"0\" })\n","\tvoid validNegaitveOrZero(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid invalidNegativeOrZero(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-150\", \"0\" })\n","\tvoid validNegativeOrZero(BigDecimal value) {\n","\t\tPredicate<BigDecimal> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\tprivate static Predicate<BigDecimal> retrievePredicate(\n","\t\t\tFunction<BigDecimalConstraint<BigDecimal>, BigDecimalConstraint<BigDecimal>> constraint) {\n","\t\treturn constraint.apply(new BigDecimalConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"BigDecimalConstraint::::cast()":[25,28],"BigDecimalConstraint::::isGreaterThan(java.math.BigDecimal)":[30,33],"BigDecimalConstraint::::isGreaterThanOrEqual(java.math.BigDecimal)":[35,38],"BigDecimalConstraint::::isLessThan(java.math.BigDecimal)":[40,43],"BigDecimalConstraint::::isLessThanOrEqual(java.math.BigDecimal)":[45,48],"BigDecimalConstraint::::zeroValue()":[50,53]},"test_method_lines_dic":{"BigDecimalConstraintTest::::validGreaterThan(java.math.BigDecimal)":[30,36],"BigDecimalConstraintTest::::invalidGreaterThan(java.math.BigDecimal)":[38,44],"BigDecimalConstraintTest::::validGreaterThanOrEqual(java.math.BigDecimal)":[46,52],"BigDecimalConstraintTest::::invalidGreaterThanOrEqual(java.math.BigDecimal)":[54,60],"BigDecimalConstraintTest::::validLessThan(java.math.BigDecimal)":[62,68],"BigDecimalConstraintTest::::invalidLessThan(java.math.BigDecimal)":[70,76],"BigDecimalConstraintTest::::validLessThanOrEqual(java.math.BigDecimal)":[78,84],"BigDecimalConstraintTest::::invalidLessThanOrEqual(java.math.BigDecimal)":[86,92],"BigDecimalConstraintTest::::validPositive(java.math.BigDecimal)":[94,100],"BigDecimalConstraintTest::::invalidPositive(java.math.BigDecimal)":[102,108],"BigDecimalConstraintTest::::invalidNegative(java.math.BigDecimal)":[110,116],"BigDecimalConstraintTest::::validNegative(java.math.BigDecimal)":[118,124],"BigDecimalConstraintTest::::validPositiveOrZero(java.math.BigDecimal)":[126,132],"BigDecimalConstraintTest::::invalidPositiveOrZero(java.math.BigDecimal)":[134,140],"BigDecimalConstraintTest::::invalidNegaitveOrZero(java.math.BigDecimal)":[142,148],"BigDecimalConstraintTest::::validNegaitveOrZero(java.math.BigDecimal)":[150,156],"BigDecimalConstraintTest::::invalidNegativeOrZero(java.math.BigDecimal)":[158,164],"BigDecimalConstraintTest::::validNegativeOrZero(java.math.BigDecimal)":[166,172]},"reverse_method_lines_dic":{"25":"BigDecimalConstraint::::cast()","26":"BigDecimalConstraint::::cast()","27":"BigDecimalConstraint::::cast()","28":"BigDecimalConstraint::::cast()","30":"BigDecimalConstraint::::isGreaterThan(java.math.BigDecimal)","31":"BigDecimalConstraint::::isGreaterThan(java.math.BigDecimal)","32":"BigDecimalConstraint::::isGreaterThan(java.math.BigDecimal)","33":"BigDecimalConstraint::::isGreaterThan(java.math.BigDecimal)","35":"BigDecimalConstraint::::isGreaterThanOrEqual(java.math.BigDecimal)","36":"BigDecimalConstraint::::isGreaterThanOrEqual(java.math.BigDecimal)","37":"BigDecimalConstraint::::isGreaterThanOrEqual(java.math.BigDecimal)","38":"BigDecimalConstraint::::isGreaterThanOrEqual(java.math.BigDecimal)","40":"BigDecimalConstraint::::isLessThan(java.math.BigDecimal)","41":"BigDecimalConstraint::::isLessThan(java.math.BigDecimal)","42":"BigDecimalConstraint::::isLessThan(java.math.BigDecimal)","43":"BigDecimalConstraint::::isLessThan(java.math.BigDecimal)","45":"BigDecimalConstraint::::isLessThanOrEqual(java.math.BigDecimal)","46":"BigDecimalConstraint::::isLessThanOrEqual(java.math.BigDecimal)","47":"BigDecimalConstraint::::isLessThanOrEqual(java.math.BigDecimal)","48":"BigDecimalConstraint::::isLessThanOrEqual(java.math.BigDecimal)","50":"BigDecimalConstraint::::zeroValue()","51":"BigDecimalConstraint::::zeroValue()","52":"BigDecimalConstraint::::zeroValue()","53":"BigDecimalConstraint::::zeroValue()"},"test_reverse_method_lines_dic":{"30":"BigDecimalConstraintTest::::validGreaterThan(java.math.BigDecimal)","31":"BigDecimalConstraintTest::::validGreaterThan(java.math.BigDecimal)","32":"BigDecimalConstraintTest::::validGreaterThan(java.math.BigDecimal)","33":"BigDecimalConstraintTest::::validGreaterThan(java.math.BigDecimal)","34":"BigDecimalConstraintTest::::validGreaterThan(java.math.BigDecimal)","35":"BigDecimalConstraintTest::::validGreaterThan(java.math.BigDecimal)","36":"BigDecimalConstraintTest::::validGreaterThan(java.math.BigDecimal)","38":"BigDecimalConstraintTest::::invalidGreaterThan(java.math.BigDecimal)","39":"BigDecimalConstraintTest::::invalidGreaterThan(java.math.BigDecimal)","40":"BigDecimalConstraintTest::::invalidGreaterThan(java.math.BigDecimal)","41":"BigDecimalConstraintTest::::invalidGreaterThan(java.math.BigDecimal)","42":"BigDecimalConstraintTest::::invalidGreaterThan(java.math.BigDecimal)","43":"BigDecimalConstraintTest::::invalidGreaterThan(java.math.BigDecimal)","44":"BigDecimalConstraintTest::::invalidGreaterThan(java.math.BigDecimal)","46":"BigDecimalConstraintTest::::validGreaterThanOrEqual(java.math.BigDecimal)","47":"BigDecimalConstraintTest::::validGreaterThanOrEqual(java.math.BigDecimal)","48":"BigDecimalConstraintTest::::validGreaterThanOrEqual(java.math.BigDecimal)","49":"BigDecimalConstraintTest::::validGreaterThanOrEqual(java.math.BigDecimal)","50":"BigDecimalConstraintTest::::validGreaterThanOrEqual(java.math.BigDecimal)","51":"BigDecimalConstraintTest::::validGreaterThanOrEqual(java.math.BigDecimal)","52":"BigDecimalConstraintTest::::validGreaterThanOrEqual(java.math.BigDecimal)","54":"BigDecimalConstraintTest::::invalidGreaterThanOrEqual(java.math.BigDecimal)","55":"BigDecimalConstraintTest::::invalidGreaterThanOrEqual(java.math.BigDecimal)","56":"BigDecimalConstraintTest::::invalidGreaterThanOrEqual(java.math.BigDecimal)","57":"BigDecimalConstraintTest::::invalidGreaterThanOrEqual(java.math.BigDecimal)","58":"BigDecimalConstraintTest::::invalidGreaterThanOrEqual(java.math.BigDecimal)","59":"BigDecimalConstraintTest::::invalidGreaterThanOrEqual(java.math.BigDecimal)","60":"BigDecimalConstraintTest::::invalidGreaterThanOrEqual(java.math.BigDecimal)","62":"BigDecimalConstraintTest::::validLessThan(java.math.BigDecimal)","63":"BigDecimalConstraintTest::::validLessThan(java.math.BigDecimal)","64":"BigDecimalConstraintTest::::validLessThan(java.math.BigDecimal)","65":"BigDecimalConstraintTest::::validLessThan(java.math.BigDecimal)","66":"BigDecimalConstraintTest::::validLessThan(java.math.BigDecimal)","67":"BigDecimalConstraintTest::::validLessThan(java.math.BigDecimal)","68":"BigDecimalConstraintTest::::validLessThan(java.math.BigDecimal)","70":"BigDecimalConstraintTest::::invalidLessThan(java.math.BigDecimal)","71":"BigDecimalConstraintTest::::invalidLessThan(java.math.BigDecimal)","72":"BigDecimalConstraintTest::::invalidLessThan(java.math.BigDecimal)","73":"BigDecimalConstraintTest::::invalidLessThan(java.math.BigDecimal)","74":"BigDecimalConstraintTest::::invalidLessThan(java.math.BigDecimal)","75":"BigDecimalConstraintTest::::invalidLessThan(java.math.BigDecimal)","76":"BigDecimalConstraintTest::::invalidLessThan(java.math.BigDecimal)","78":"BigDecimalConstraintTest::::validLessThanOrEqual(java.math.BigDecimal)","79":"BigDecimalConstraintTest::::validLessThanOrEqual(java.math.BigDecimal)","80":"BigDecimalConstraintTest::::validLessThanOrEqual(java.math.BigDecimal)","81":"BigDecimalConstraintTest::::validLessThanOrEqual(java.math.BigDecimal)","82":"BigDecimalConstraintTest::::validLessThanOrEqual(java.math.BigDecimal)","83":"BigDecimalConstraintTest::::validLessThanOrEqual(java.math.BigDecimal)","84":"BigDecimalConstraintTest::::validLessThanOrEqual(java.math.BigDecimal)","86":"BigDecimalConstraintTest::::invalidLessThanOrEqual(java.math.BigDecimal)","87":"BigDecimalConstraintTest::::invalidLessThanOrEqual(java.math.BigDecimal)","88":"BigDecimalConstraintTest::::invalidLessThanOrEqual(java.math.BigDecimal)","89":"BigDecimalConstraintTest::::invalidLessThanOrEqual(java.math.BigDecimal)","90":"BigDecimalConstraintTest::::invalidLessThanOrEqual(java.math.BigDecimal)","91":"BigDecimalConstraintTest::::invalidLessThanOrEqual(java.math.BigDecimal)","92":"BigDecimalConstraintTest::::invalidLessThanOrEqual(java.math.BigDecimal)","94":"BigDecimalConstraintTest::::validPositive(java.math.BigDecimal)","95":"BigDecimalConstraintTest::::validPositive(java.math.BigDecimal)","96":"BigDecimalConstraintTest::::validPositive(java.math.BigDecimal)","97":"BigDecimalConstraintTest::::validPositive(java.math.BigDecimal)","98":"BigDecimalConstraintTest::::validPositive(java.math.BigDecimal)","99":"BigDecimalConstraintTest::::validPositive(java.math.BigDecimal)","100":"BigDecimalConstraintTest::::validPositive(java.math.BigDecimal)","102":"BigDecimalConstraintTest::::invalidPositive(java.math.BigDecimal)","103":"BigDecimalConstraintTest::::invalidPositive(java.math.BigDecimal)","104":"BigDecimalConstraintTest::::invalidPositive(java.math.BigDecimal)","105":"BigDecimalConstraintTest::::invalidPositive(java.math.BigDecimal)","106":"BigDecimalConstraintTest::::invalidPositive(java.math.BigDecimal)","107":"BigDecimalConstraintTest::::invalidPositive(java.math.BigDecimal)","108":"BigDecimalConstraintTest::::invalidPositive(java.math.BigDecimal)","110":"BigDecimalConstraintTest::::invalidNegative(java.math.BigDecimal)","111":"BigDecimalConstraintTest::::invalidNegative(java.math.BigDecimal)","112":"BigDecimalConstraintTest::::invalidNegative(java.math.BigDecimal)","113":"BigDecimalConstraintTest::::invalidNegative(java.math.BigDecimal)","114":"BigDecimalConstraintTest::::invalidNegative(java.math.BigDecimal)","115":"BigDecimalConstraintTest::::invalidNegative(java.math.BigDecimal)","116":"BigDecimalConstraintTest::::invalidNegative(java.math.BigDecimal)","118":"BigDecimalConstraintTest::::validNegative(java.math.BigDecimal)","119":"BigDecimalConstraintTest::::validNegative(java.math.BigDecimal)","120":"BigDecimalConstraintTest::::validNegative(java.math.BigDecimal)","121":"BigDecimalConstraintTest::::validNegative(java.math.BigDecimal)","122":"BigDecimalConstraintTest::::validNegative(java.math.BigDecimal)","123":"BigDecimalConstraintTest::::validNegative(java.math.BigDecimal)","124":"BigDecimalConstraintTest::::validNegative(java.math.BigDecimal)","126":"BigDecimalConstraintTest::::validPositiveOrZero(java.math.BigDecimal)","127":"BigDecimalConstraintTest::::validPositiveOrZero(java.math.BigDecimal)","128":"BigDecimalConstraintTest::::validPositiveOrZero(java.math.BigDecimal)","129":"BigDecimalConstraintTest::::validPositiveOrZero(java.math.BigDecimal)","130":"BigDecimalConstraintTest::::validPositiveOrZero(java.math.BigDecimal)","131":"BigDecimalConstraintTest::::validPositiveOrZero(java.math.BigDecimal)","132":"BigDecimalConstraintTest::::validPositiveOrZero(java.math.BigDecimal)","134":"BigDecimalConstraintTest::::invalidPositiveOrZero(java.math.BigDecimal)","135":"BigDecimalConstraintTest::::invalidPositiveOrZero(java.math.BigDecimal)","136":"BigDecimalConstraintTest::::invalidPositiveOrZero(java.math.BigDecimal)","137":"BigDecimalConstraintTest::::invalidPositiveOrZero(java.math.BigDecimal)","138":"BigDecimalConstraintTest::::invalidPositiveOrZero(java.math.BigDecimal)","139":"BigDecimalConstraintTest::::invalidPositiveOrZero(java.math.BigDecimal)","140":"BigDecimalConstraintTest::::invalidPositiveOrZero(java.math.BigDecimal)","142":"BigDecimalConstraintTest::::invalidNegaitveOrZero(java.math.BigDecimal)","143":"BigDecimalConstraintTest::::invalidNegaitveOrZero(java.math.BigDecimal)","144":"BigDecimalConstraintTest::::invalidNegaitveOrZero(java.math.BigDecimal)","145":"BigDecimalConstraintTest::::invalidNegaitveOrZero(java.math.BigDecimal)","146":"BigDecimalConstraintTest::::invalidNegaitveOrZero(java.math.BigDecimal)","147":"BigDecimalConstraintTest::::invalidNegaitveOrZero(java.math.BigDecimal)","148":"BigDecimalConstraintTest::::invalidNegaitveOrZero(java.math.BigDecimal)","150":"BigDecimalConstraintTest::::validNegaitveOrZero(java.math.BigDecimal)","151":"BigDecimalConstraintTest::::validNegaitveOrZero(java.math.BigDecimal)","152":"BigDecimalConstraintTest::::validNegaitveOrZero(java.math.BigDecimal)","153":"BigDecimalConstraintTest::::validNegaitveOrZero(java.math.BigDecimal)","154":"BigDecimalConstraintTest::::validNegaitveOrZero(java.math.BigDecimal)","155":"BigDecimalConstraintTest::::validNegaitveOrZero(java.math.BigDecimal)","156":"BigDecimalConstraintTest::::validNegaitveOrZero(java.math.BigDecimal)","158":"BigDecimalConstraintTest::::invalidNegativeOrZero(java.math.BigDecimal)","159":"BigDecimalConstraintTest::::invalidNegativeOrZero(java.math.BigDecimal)","160":"BigDecimalConstraintTest::::invalidNegativeOrZero(java.math.BigDecimal)","161":"BigDecimalConstraintTest::::invalidNegativeOrZero(java.math.BigDecimal)","162":"BigDecimalConstraintTest::::invalidNegativeOrZero(java.math.BigDecimal)","163":"BigDecimalConstraintTest::::invalidNegativeOrZero(java.math.BigDecimal)","164":"BigDecimalConstraintTest::::invalidNegativeOrZero(java.math.BigDecimal)","166":"BigDecimalConstraintTest::::validNegativeOrZero(java.math.BigDecimal)","167":"BigDecimalConstraintTest::::validNegativeOrZero(java.math.BigDecimal)","168":"BigDecimalConstraintTest::::validNegativeOrZero(java.math.BigDecimal)","169":"BigDecimalConstraintTest::::validNegativeOrZero(java.math.BigDecimal)","170":"BigDecimalConstraintTest::::validNegativeOrZero(java.math.BigDecimal)","171":"BigDecimalConstraintTest::::validNegativeOrZero(java.math.BigDecimal)","172":"BigDecimalConstraintTest::::validNegativeOrZero(java.math.BigDecimal)"},"tests":[{"test_lines":[30,36],"covered_lines":[23,27,32],"label":"BigDecimalConstraint::::isGreaterThan(java.math.BigDecimal)"},{"test_lines":[38,44],"covered_lines":[23,27,32],"label":"BigDecimalConstraint::::isGreaterThan(java.math.BigDecimal)"},{"test_lines":[46,52],"covered_lines":[23,27,37],"label":"BigDecimalConstraint::::isGreaterThanOrEqual(java.math.BigDecimal)"},{"test_lines":[54,60],"covered_lines":[23,27,37],"label":"BigDecimalConstraint::::isGreaterThanOrEqual(java.math.BigDecimal)"},{"test_lines":[62,68],"covered_lines":[23,27,42],"label":"BigDecimalConstraint::::isLessThan(java.math.BigDecimal)"},{"test_lines":[70,76],"covered_lines":[23,27,42],"label":"BigDecimalConstraint::::isLessThan(java.math.BigDecimal)"},{"test_lines":[78,84],"covered_lines":[23,27,47],"label":"BigDecimalConstraint::::isLessThanOrEqual(java.math.BigDecimal)"},{"test_lines":[86,92],"covered_lines":[23,27,47],"label":"BigDecimalConstraint::::isLessThanOrEqual(java.math.BigDecimal)"},{"test_lines":[94,100],"covered_lines":[23,27,32,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[102,108],"covered_lines":[23,27,32,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[110,116],"covered_lines":[23,27,42,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[118,124],"covered_lines":[23,27,42,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[126,132],"covered_lines":[23,27,37,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[134,140],"covered_lines":[23,27,37,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[142,148],"covered_lines":[23,27,47,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[150,156],"covered_lines":[23,27,47,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[158,164],"covered_lines":[23,27,47,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[166,172],"covered_lines":[23,27,47,52],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/FloatConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.function.Predicate;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","\n","public class FloatConstraint<T>\n","\t\textends NumericConstraintBase<T, Float, FloatConstraint<T>> {\n","\t@Override\n","\tpublic FloatConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Float> isGreaterThan(Float min) {\n","\t\treturn x -> x > min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Float> isGreaterThanOrEqual(Float min) {\n","\t\treturn x -> x >= min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Float> isLessThan(Float max) {\n","\t\treturn x -> x < max;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Float> isLessThanOrEqual(Float max) {\n","\t\treturn x -> x <= max;\n","\t}\n","\n","\t@Override\n","\tprotected Float zeroValue() {\n","\t\treturn 0f;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.ValueSource;\n","\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class FloatConstraintTest {\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 101.0f, 150.0f })\n","\tvoid validGreaterThan(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(c -> c.greaterThan(100.0f));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 100.0f, -50.0f })\n","\tvoid invalidGreaterThan(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(c -> c.greaterThan(100.0f));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 101.0f, 100.0f })\n","\tvoid validGreaterThanOrEqual(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(c -> c.greaterThanOrEqual(100.0f));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 99L, -50.0f })\n","\tvoid invalidGreaterThanOrEqual(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(c -> c.greaterThanOrEqual(100.0f));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 99L, -50.0f })\n","\tvoid validLessThan(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(c -> c.lessThan(100.0f));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 100.0f, 150.0f })\n","\tvoid invalidLessThan(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(c -> c.lessThan(100.0f));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 99L, 100.0f })\n","\tvoid validLessThanOrEqual(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(c -> c.lessThanOrEqual(100.0f));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 101.0f, 150.0f })\n","\tvoid invalidLessThanOrEqual(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(c -> c.lessThanOrEqual(100.0f));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 101.0f, 150.0f })\n","\tvoid validPositive(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { -101.0f, -150.0f, 0f })\n","\tvoid invalidPositive(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 99f, 100f, 0f })\n","\tvoid invalidNegative(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { -100f, -10f })\n","\tvoid validNegative(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 99.5f, 100.5f, 0f })\n","\tvoid validPositiveOrZero(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { -101f, -12f })\n","\tvoid invalidPositiveOrZero(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 99.0f, 100f })\n","\tvoid invalidNegaitveOrZero(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { -101f, -120f, 0f })\n","\tvoid validNegaitveOrZero(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { 99.0f, 100f })\n","\tvoid invalidNegativeOrZero(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(floats = { -101f, -120f, 0f })\n","\tvoid validNegativeOrZero(float value) {\n","\t\tPredicate<Float> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\tprivate static Predicate<Float> retrievePredicate(\n","\t\t\tFunction<FloatConstraint<Float>, FloatConstraint<Float>> constraint) {\n","\t\treturn constraint.apply(new FloatConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"FloatConstraint::::cast()":[24,27],"FloatConstraint::::isGreaterThan(java.lang.Float)":[29,32],"FloatConstraint::::isGreaterThanOrEqual(java.lang.Float)":[34,37],"FloatConstraint::::isLessThan(java.lang.Float)":[39,42],"FloatConstraint::::isLessThanOrEqual(java.lang.Float)":[44,47],"FloatConstraint::::zeroValue()":[49,52]},"test_method_lines_dic":{"FloatConstraintTest::::validGreaterThan(float)":[29,34],"FloatConstraintTest::::invalidGreaterThan(float)":[36,41],"FloatConstraintTest::::validGreaterThanOrEqual(float)":[43,48],"FloatConstraintTest::::invalidGreaterThanOrEqual(float)":[50,55],"FloatConstraintTest::::validLessThan(float)":[57,62],"FloatConstraintTest::::invalidLessThan(float)":[64,69],"FloatConstraintTest::::validLessThanOrEqual(float)":[71,76],"FloatConstraintTest::::invalidLessThanOrEqual(float)":[78,83],"FloatConstraintTest::::validPositive(float)":[85,90],"FloatConstraintTest::::invalidPositive(float)":[92,97],"FloatConstraintTest::::invalidNegative(float)":[99,104],"FloatConstraintTest::::validNegative(float)":[106,111],"FloatConstraintTest::::validPositiveOrZero(float)":[113,119],"FloatConstraintTest::::invalidPositiveOrZero(float)":[121,127],"FloatConstraintTest::::invalidNegaitveOrZero(float)":[129,135],"FloatConstraintTest::::validNegaitveOrZero(float)":[137,143],"FloatConstraintTest::::invalidNegativeOrZero(float)":[145,151],"FloatConstraintTest::::validNegativeOrZero(float)":[153,159]},"reverse_method_lines_dic":{"24":"FloatConstraint::::cast()","25":"FloatConstraint::::cast()","26":"FloatConstraint::::cast()","27":"FloatConstraint::::cast()","29":"FloatConstraint::::isGreaterThan(java.lang.Float)","30":"FloatConstraint::::isGreaterThan(java.lang.Float)","31":"FloatConstraint::::isGreaterThan(java.lang.Float)","32":"FloatConstraint::::isGreaterThan(java.lang.Float)","34":"FloatConstraint::::isGreaterThanOrEqual(java.lang.Float)","35":"FloatConstraint::::isGreaterThanOrEqual(java.lang.Float)","36":"FloatConstraint::::isGreaterThanOrEqual(java.lang.Float)","37":"FloatConstraint::::isGreaterThanOrEqual(java.lang.Float)","39":"FloatConstraint::::isLessThan(java.lang.Float)","40":"FloatConstraint::::isLessThan(java.lang.Float)","41":"FloatConstraint::::isLessThan(java.lang.Float)","42":"FloatConstraint::::isLessThan(java.lang.Float)","44":"FloatConstraint::::isLessThanOrEqual(java.lang.Float)","45":"FloatConstraint::::isLessThanOrEqual(java.lang.Float)","46":"FloatConstraint::::isLessThanOrEqual(java.lang.Float)","47":"FloatConstraint::::isLessThanOrEqual(java.lang.Float)","49":"FloatConstraint::::zeroValue()","50":"FloatConstraint::::zeroValue()","51":"FloatConstraint::::zeroValue()","52":"FloatConstraint::::zeroValue()"},"test_reverse_method_lines_dic":{"29":"FloatConstraintTest::::validGreaterThan(float)","30":"FloatConstraintTest::::validGreaterThan(float)","31":"FloatConstraintTest::::validGreaterThan(float)","32":"FloatConstraintTest::::validGreaterThan(float)","33":"FloatConstraintTest::::validGreaterThan(float)","34":"FloatConstraintTest::::validGreaterThan(float)","36":"FloatConstraintTest::::invalidGreaterThan(float)","37":"FloatConstraintTest::::invalidGreaterThan(float)","38":"FloatConstraintTest::::invalidGreaterThan(float)","39":"FloatConstraintTest::::invalidGreaterThan(float)","40":"FloatConstraintTest::::invalidGreaterThan(float)","41":"FloatConstraintTest::::invalidGreaterThan(float)","43":"FloatConstraintTest::::validGreaterThanOrEqual(float)","44":"FloatConstraintTest::::validGreaterThanOrEqual(float)","45":"FloatConstraintTest::::validGreaterThanOrEqual(float)","46":"FloatConstraintTest::::validGreaterThanOrEqual(float)","47":"FloatConstraintTest::::validGreaterThanOrEqual(float)","48":"FloatConstraintTest::::validGreaterThanOrEqual(float)","50":"FloatConstraintTest::::invalidGreaterThanOrEqual(float)","51":"FloatConstraintTest::::invalidGreaterThanOrEqual(float)","52":"FloatConstraintTest::::invalidGreaterThanOrEqual(float)","53":"FloatConstraintTest::::invalidGreaterThanOrEqual(float)","54":"FloatConstraintTest::::invalidGreaterThanOrEqual(float)","55":"FloatConstraintTest::::invalidGreaterThanOrEqual(float)","57":"FloatConstraintTest::::validLessThan(float)","58":"FloatConstraintTest::::validLessThan(float)","59":"FloatConstraintTest::::validLessThan(float)","60":"FloatConstraintTest::::validLessThan(float)","61":"FloatConstraintTest::::validLessThan(float)","62":"FloatConstraintTest::::validLessThan(float)","64":"FloatConstraintTest::::invalidLessThan(float)","65":"FloatConstraintTest::::invalidLessThan(float)","66":"FloatConstraintTest::::invalidLessThan(float)","67":"FloatConstraintTest::::invalidLessThan(float)","68":"FloatConstraintTest::::invalidLessThan(float)","69":"FloatConstraintTest::::invalidLessThan(float)","71":"FloatConstraintTest::::validLessThanOrEqual(float)","72":"FloatConstraintTest::::validLessThanOrEqual(float)","73":"FloatConstraintTest::::validLessThanOrEqual(float)","74":"FloatConstraintTest::::validLessThanOrEqual(float)","75":"FloatConstraintTest::::validLessThanOrEqual(float)","76":"FloatConstraintTest::::validLessThanOrEqual(float)","78":"FloatConstraintTest::::invalidLessThanOrEqual(float)","79":"FloatConstraintTest::::invalidLessThanOrEqual(float)","80":"FloatConstraintTest::::invalidLessThanOrEqual(float)","81":"FloatConstraintTest::::invalidLessThanOrEqual(float)","82":"FloatConstraintTest::::invalidLessThanOrEqual(float)","83":"FloatConstraintTest::::invalidLessThanOrEqual(float)","85":"FloatConstraintTest::::validPositive(float)","86":"FloatConstraintTest::::validPositive(float)","87":"FloatConstraintTest::::validPositive(float)","88":"FloatConstraintTest::::validPositive(float)","89":"FloatConstraintTest::::validPositive(float)","90":"FloatConstraintTest::::validPositive(float)","92":"FloatConstraintTest::::invalidPositive(float)","93":"FloatConstraintTest::::invalidPositive(float)","94":"FloatConstraintTest::::invalidPositive(float)","95":"FloatConstraintTest::::invalidPositive(float)","96":"FloatConstraintTest::::invalidPositive(float)","97":"FloatConstraintTest::::invalidPositive(float)","99":"FloatConstraintTest::::invalidNegative(float)","100":"FloatConstraintTest::::invalidNegative(float)","101":"FloatConstraintTest::::invalidNegative(float)","102":"FloatConstraintTest::::invalidNegative(float)","103":"FloatConstraintTest::::invalidNegative(float)","104":"FloatConstraintTest::::invalidNegative(float)","106":"FloatConstraintTest::::validNegative(float)","107":"FloatConstraintTest::::validNegative(float)","108":"FloatConstraintTest::::validNegative(float)","109":"FloatConstraintTest::::validNegative(float)","110":"FloatConstraintTest::::validNegative(float)","111":"FloatConstraintTest::::validNegative(float)","113":"FloatConstraintTest::::validPositiveOrZero(float)","114":"FloatConstraintTest::::validPositiveOrZero(float)","115":"FloatConstraintTest::::validPositiveOrZero(float)","116":"FloatConstraintTest::::validPositiveOrZero(float)","117":"FloatConstraintTest::::validPositiveOrZero(float)","118":"FloatConstraintTest::::validPositiveOrZero(float)","119":"FloatConstraintTest::::validPositiveOrZero(float)","121":"FloatConstraintTest::::invalidPositiveOrZero(float)","122":"FloatConstraintTest::::invalidPositiveOrZero(float)","123":"FloatConstraintTest::::invalidPositiveOrZero(float)","124":"FloatConstraintTest::::invalidPositiveOrZero(float)","125":"FloatConstraintTest::::invalidPositiveOrZero(float)","126":"FloatConstraintTest::::invalidPositiveOrZero(float)","127":"FloatConstraintTest::::invalidPositiveOrZero(float)","129":"FloatConstraintTest::::invalidNegaitveOrZero(float)","130":"FloatConstraintTest::::invalidNegaitveOrZero(float)","131":"FloatConstraintTest::::invalidNegaitveOrZero(float)","132":"FloatConstraintTest::::invalidNegaitveOrZero(float)","133":"FloatConstraintTest::::invalidNegaitveOrZero(float)","134":"FloatConstraintTest::::invalidNegaitveOrZero(float)","135":"FloatConstraintTest::::invalidNegaitveOrZero(float)","137":"FloatConstraintTest::::validNegaitveOrZero(float)","138":"FloatConstraintTest::::validNegaitveOrZero(float)","139":"FloatConstraintTest::::validNegaitveOrZero(float)","140":"FloatConstraintTest::::validNegaitveOrZero(float)","141":"FloatConstraintTest::::validNegaitveOrZero(float)","142":"FloatConstraintTest::::validNegaitveOrZero(float)","143":"FloatConstraintTest::::validNegaitveOrZero(float)","145":"FloatConstraintTest::::invalidNegativeOrZero(float)","146":"FloatConstraintTest::::invalidNegativeOrZero(float)","147":"FloatConstraintTest::::invalidNegativeOrZero(float)","148":"FloatConstraintTest::::invalidNegativeOrZero(float)","149":"FloatConstraintTest::::invalidNegativeOrZero(float)","150":"FloatConstraintTest::::invalidNegativeOrZero(float)","151":"FloatConstraintTest::::invalidNegativeOrZero(float)","153":"FloatConstraintTest::::validNegativeOrZero(float)","154":"FloatConstraintTest::::validNegativeOrZero(float)","155":"FloatConstraintTest::::validNegativeOrZero(float)","156":"FloatConstraintTest::::validNegativeOrZero(float)","157":"FloatConstraintTest::::validNegativeOrZero(float)","158":"FloatConstraintTest::::validNegativeOrZero(float)","159":"FloatConstraintTest::::validNegativeOrZero(float)"},"tests":[{"test_lines":[29,34],"covered_lines":[22,26,31],"label":"FloatConstraint::::isGreaterThan(java.lang.Float)"},{"test_lines":[36,41],"covered_lines":[22,26,31],"label":"FloatConstraint::::isGreaterThan(java.lang.Float)"},{"test_lines":[43,48],"covered_lines":[22,26,36],"label":"FloatConstraint::::isGreaterThanOrEqual(java.lang.Float)"},{"test_lines":[50,55],"covered_lines":[22,26,36],"label":"FloatConstraint::::isGreaterThanOrEqual(java.lang.Float)"},{"test_lines":[57,62],"covered_lines":[22,26,41],"label":"FloatConstraint::::isLessThan(java.lang.Float)"},{"test_lines":[64,69],"covered_lines":[22,26,41],"label":"FloatConstraint::::isLessThan(java.lang.Float)"},{"test_lines":[71,76],"covered_lines":[22,26,46],"label":"FloatConstraint::::isLessThanOrEqual(java.lang.Float)"},{"test_lines":[78,83],"covered_lines":[22,26,46],"label":"FloatConstraint::::isLessThanOrEqual(java.lang.Float)"},{"test_lines":[85,90],"covered_lines":[22,26,31,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[92,97],"covered_lines":[22,26,31,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[99,104],"covered_lines":[22,26,41,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[106,111],"covered_lines":[22,26,41,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[113,119],"covered_lines":[22,26,36,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[121,127],"covered_lines":[22,26,36,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[129,135],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[137,143],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[145,151],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[153,159],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/ByteConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.function.Predicate;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","\n","public class ByteConstraint<T> extends NumericConstraintBase<T, Byte, ByteConstraint<T>> {\n","\t@Override\n","\tpublic ByteConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Byte> isGreaterThan(Byte min) {\n","\t\treturn x -> x > min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Byte> isGreaterThanOrEqual(Byte min) {\n","\t\treturn x -> x >= min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Byte> isLessThan(Byte max) {\n","\t\treturn x -> x < max;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Byte> isLessThanOrEqual(Byte max) {\n","\t\treturn x -> x <= max;\n","\t}\n","\n","\t@Override\n","\tprotected Byte zeroValue() {\n","\t\treturn 0;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.ValueSource;\n","\n","import java.math.BigInteger;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class ByteConstraintTest {\n","\n","\t@ParameterizedTest\n","\t@ValueSource(bytes = { 101, 120 })\n","\tvoid validGreaterThan(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(c -> c.greaterThan((byte) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(bytes = { 100, -50 })\n","\tvoid invalidGreaterThan(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(c -> c.greaterThan((byte) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(bytes = { 101, 100 })\n","\tvoid validGreaterThanOrEqual(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual((byte) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(bytes = { 99, -50 })\n","\tvoid invalidGreaterThanOrEqual(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual((byte) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(bytes = { 99, -50 })\n","\tvoid validLessThan(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(c -> c.lessThan((byte) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(bytes = { 100, 120 })\n","\tvoid invalidLessThan(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(c -> c.lessThan((byte) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(bytes = { 99, 100 })\n","\tvoid validLessThanOrEqual(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(c -> c.lessThanOrEqual((byte) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(bytes = { 101, 120 })\n","\tvoid invalidLessThanOrEqual(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(c -> c.lessThanOrEqual((byte) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid validPositive(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-1\", \"0\" })\n","\tvoid invalidPositive(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\", \"0\" })\n","\tvoid invalidNegative(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-10\" })\n","\tvoid validNegative(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\", \"0\" })\n","\tvoid validPositiveOrZero(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-12\" })\n","\tvoid invalidPositiveOrZero(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid invalidNegaitveOrZero(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-120\", \"0\" })\n","\tvoid validNegaitveOrZero(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid invalidNegativeOrZero(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-120\", \"0\" })\n","\tvoid validNegativeOrZero(byte value) {\n","\t\tPredicate<Byte> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\tprivate static Predicate<Byte> retrievePredicate(\n","\t\t\tFunction<ByteConstraint<Byte>, ByteConstraint<Byte>> constraint) {\n","\t\treturn constraint.apply(new ByteConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"ByteConstraint::::cast()":[23,26],"ByteConstraint::::isGreaterThan(java.lang.Byte)":[28,31],"ByteConstraint::::isGreaterThanOrEqual(java.lang.Byte)":[33,36],"ByteConstraint::::isLessThan(java.lang.Byte)":[38,41],"ByteConstraint::::isLessThanOrEqual(java.lang.Byte)":[43,46],"ByteConstraint::::zeroValue()":[48,51]},"test_method_lines_dic":{"ByteConstraintTest::::validGreaterThan(byte)":[30,35],"ByteConstraintTest::::invalidGreaterThan(byte)":[37,42],"ByteConstraintTest::::validGreaterThanOrEqual(byte)":[44,50],"ByteConstraintTest::::invalidGreaterThanOrEqual(byte)":[52,58],"ByteConstraintTest::::validLessThan(byte)":[60,65],"ByteConstraintTest::::invalidLessThan(byte)":[67,72],"ByteConstraintTest::::validLessThanOrEqual(byte)":[74,79],"ByteConstraintTest::::invalidLessThanOrEqual(byte)":[81,86],"ByteConstraintTest::::validPositive(byte)":[88,93],"ByteConstraintTest::::invalidPositive(byte)":[95,100],"ByteConstraintTest::::invalidNegative(byte)":[102,107],"ByteConstraintTest::::validNegative(byte)":[109,114],"ByteConstraintTest::::validPositiveOrZero(byte)":[116,122],"ByteConstraintTest::::invalidPositiveOrZero(byte)":[124,130],"ByteConstraintTest::::invalidNegaitveOrZero(byte)":[132,138],"ByteConstraintTest::::validNegaitveOrZero(byte)":[140,146],"ByteConstraintTest::::invalidNegativeOrZero(byte)":[148,154],"ByteConstraintTest::::validNegativeOrZero(byte)":[156,162]},"reverse_method_lines_dic":{"23":"ByteConstraint::::cast()","24":"ByteConstraint::::cast()","25":"ByteConstraint::::cast()","26":"ByteConstraint::::cast()","28":"ByteConstraint::::isGreaterThan(java.lang.Byte)","29":"ByteConstraint::::isGreaterThan(java.lang.Byte)","30":"ByteConstraint::::isGreaterThan(java.lang.Byte)","31":"ByteConstraint::::isGreaterThan(java.lang.Byte)","33":"ByteConstraint::::isGreaterThanOrEqual(java.lang.Byte)","34":"ByteConstraint::::isGreaterThanOrEqual(java.lang.Byte)","35":"ByteConstraint::::isGreaterThanOrEqual(java.lang.Byte)","36":"ByteConstraint::::isGreaterThanOrEqual(java.lang.Byte)","38":"ByteConstraint::::isLessThan(java.lang.Byte)","39":"ByteConstraint::::isLessThan(java.lang.Byte)","40":"ByteConstraint::::isLessThan(java.lang.Byte)","41":"ByteConstraint::::isLessThan(java.lang.Byte)","43":"ByteConstraint::::isLessThanOrEqual(java.lang.Byte)","44":"ByteConstraint::::isLessThanOrEqual(java.lang.Byte)","45":"ByteConstraint::::isLessThanOrEqual(java.lang.Byte)","46":"ByteConstraint::::isLessThanOrEqual(java.lang.Byte)","48":"ByteConstraint::::zeroValue()","49":"ByteConstraint::::zeroValue()","50":"ByteConstraint::::zeroValue()","51":"ByteConstraint::::zeroValue()"},"test_reverse_method_lines_dic":{"30":"ByteConstraintTest::::validGreaterThan(byte)","31":"ByteConstraintTest::::validGreaterThan(byte)","32":"ByteConstraintTest::::validGreaterThan(byte)","33":"ByteConstraintTest::::validGreaterThan(byte)","34":"ByteConstraintTest::::validGreaterThan(byte)","35":"ByteConstraintTest::::validGreaterThan(byte)","37":"ByteConstraintTest::::invalidGreaterThan(byte)","38":"ByteConstraintTest::::invalidGreaterThan(byte)","39":"ByteConstraintTest::::invalidGreaterThan(byte)","40":"ByteConstraintTest::::invalidGreaterThan(byte)","41":"ByteConstraintTest::::invalidGreaterThan(byte)","42":"ByteConstraintTest::::invalidGreaterThan(byte)","44":"ByteConstraintTest::::validGreaterThanOrEqual(byte)","45":"ByteConstraintTest::::validGreaterThanOrEqual(byte)","46":"ByteConstraintTest::::validGreaterThanOrEqual(byte)","47":"ByteConstraintTest::::validGreaterThanOrEqual(byte)","48":"ByteConstraintTest::::validGreaterThanOrEqual(byte)","49":"ByteConstraintTest::::validGreaterThanOrEqual(byte)","50":"ByteConstraintTest::::validGreaterThanOrEqual(byte)","52":"ByteConstraintTest::::invalidGreaterThanOrEqual(byte)","53":"ByteConstraintTest::::invalidGreaterThanOrEqual(byte)","54":"ByteConstraintTest::::invalidGreaterThanOrEqual(byte)","55":"ByteConstraintTest::::invalidGreaterThanOrEqual(byte)","56":"ByteConstraintTest::::invalidGreaterThanOrEqual(byte)","57":"ByteConstraintTest::::invalidGreaterThanOrEqual(byte)","58":"ByteConstraintTest::::invalidGreaterThanOrEqual(byte)","60":"ByteConstraintTest::::validLessThan(byte)","61":"ByteConstraintTest::::validLessThan(byte)","62":"ByteConstraintTest::::validLessThan(byte)","63":"ByteConstraintTest::::validLessThan(byte)","64":"ByteConstraintTest::::validLessThan(byte)","65":"ByteConstraintTest::::validLessThan(byte)","67":"ByteConstraintTest::::invalidLessThan(byte)","68":"ByteConstraintTest::::invalidLessThan(byte)","69":"ByteConstraintTest::::invalidLessThan(byte)","70":"ByteConstraintTest::::invalidLessThan(byte)","71":"ByteConstraintTest::::invalidLessThan(byte)","72":"ByteConstraintTest::::invalidLessThan(byte)","74":"ByteConstraintTest::::validLessThanOrEqual(byte)","75":"ByteConstraintTest::::validLessThanOrEqual(byte)","76":"ByteConstraintTest::::validLessThanOrEqual(byte)","77":"ByteConstraintTest::::validLessThanOrEqual(byte)","78":"ByteConstraintTest::::validLessThanOrEqual(byte)","79":"ByteConstraintTest::::validLessThanOrEqual(byte)","81":"ByteConstraintTest::::invalidLessThanOrEqual(byte)","82":"ByteConstraintTest::::invalidLessThanOrEqual(byte)","83":"ByteConstraintTest::::invalidLessThanOrEqual(byte)","84":"ByteConstraintTest::::invalidLessThanOrEqual(byte)","85":"ByteConstraintTest::::invalidLessThanOrEqual(byte)","86":"ByteConstraintTest::::invalidLessThanOrEqual(byte)","88":"ByteConstraintTest::::validPositive(byte)","89":"ByteConstraintTest::::validPositive(byte)","90":"ByteConstraintTest::::validPositive(byte)","91":"ByteConstraintTest::::validPositive(byte)","92":"ByteConstraintTest::::validPositive(byte)","93":"ByteConstraintTest::::validPositive(byte)","95":"ByteConstraintTest::::invalidPositive(byte)","96":"ByteConstraintTest::::invalidPositive(byte)","97":"ByteConstraintTest::::invalidPositive(byte)","98":"ByteConstraintTest::::invalidPositive(byte)","99":"ByteConstraintTest::::invalidPositive(byte)","100":"ByteConstraintTest::::invalidPositive(byte)","102":"ByteConstraintTest::::invalidNegative(byte)","103":"ByteConstraintTest::::invalidNegative(byte)","104":"ByteConstraintTest::::invalidNegative(byte)","105":"ByteConstraintTest::::invalidNegative(byte)","106":"ByteConstraintTest::::invalidNegative(byte)","107":"ByteConstraintTest::::invalidNegative(byte)","109":"ByteConstraintTest::::validNegative(byte)","110":"ByteConstraintTest::::validNegative(byte)","111":"ByteConstraintTest::::validNegative(byte)","112":"ByteConstraintTest::::validNegative(byte)","113":"ByteConstraintTest::::validNegative(byte)","114":"ByteConstraintTest::::validNegative(byte)","116":"ByteConstraintTest::::validPositiveOrZero(byte)","117":"ByteConstraintTest::::validPositiveOrZero(byte)","118":"ByteConstraintTest::::validPositiveOrZero(byte)","119":"ByteConstraintTest::::validPositiveOrZero(byte)","120":"ByteConstraintTest::::validPositiveOrZero(byte)","121":"ByteConstraintTest::::validPositiveOrZero(byte)","122":"ByteConstraintTest::::validPositiveOrZero(byte)","124":"ByteConstraintTest::::invalidPositiveOrZero(byte)","125":"ByteConstraintTest::::invalidPositiveOrZero(byte)","126":"ByteConstraintTest::::invalidPositiveOrZero(byte)","127":"ByteConstraintTest::::invalidPositiveOrZero(byte)","128":"ByteConstraintTest::::invalidPositiveOrZero(byte)","129":"ByteConstraintTest::::invalidPositiveOrZero(byte)","130":"ByteConstraintTest::::invalidPositiveOrZero(byte)","132":"ByteConstraintTest::::invalidNegaitveOrZero(byte)","133":"ByteConstraintTest::::invalidNegaitveOrZero(byte)","134":"ByteConstraintTest::::invalidNegaitveOrZero(byte)","135":"ByteConstraintTest::::invalidNegaitveOrZero(byte)","136":"ByteConstraintTest::::invalidNegaitveOrZero(byte)","137":"ByteConstraintTest::::invalidNegaitveOrZero(byte)","138":"ByteConstraintTest::::invalidNegaitveOrZero(byte)","140":"ByteConstraintTest::::validNegaitveOrZero(byte)","141":"ByteConstraintTest::::validNegaitveOrZero(byte)","142":"ByteConstraintTest::::validNegaitveOrZero(byte)","143":"ByteConstraintTest::::validNegaitveOrZero(byte)","144":"ByteConstraintTest::::validNegaitveOrZero(byte)","145":"ByteConstraintTest::::validNegaitveOrZero(byte)","146":"ByteConstraintTest::::validNegaitveOrZero(byte)","148":"ByteConstraintTest::::invalidNegativeOrZero(byte)","149":"ByteConstraintTest::::invalidNegativeOrZero(byte)","150":"ByteConstraintTest::::invalidNegativeOrZero(byte)","151":"ByteConstraintTest::::invalidNegativeOrZero(byte)","152":"ByteConstraintTest::::invalidNegativeOrZero(byte)","153":"ByteConstraintTest::::invalidNegativeOrZero(byte)","154":"ByteConstraintTest::::invalidNegativeOrZero(byte)","156":"ByteConstraintTest::::validNegativeOrZero(byte)","157":"ByteConstraintTest::::validNegativeOrZero(byte)","158":"ByteConstraintTest::::validNegativeOrZero(byte)","159":"ByteConstraintTest::::validNegativeOrZero(byte)","160":"ByteConstraintTest::::validNegativeOrZero(byte)","161":"ByteConstraintTest::::validNegativeOrZero(byte)","162":"ByteConstraintTest::::validNegativeOrZero(byte)"},"tests":[{"test_lines":[30,35],"covered_lines":[22,25,30],"label":"ByteConstraint::::isGreaterThan(java.lang.Byte)"},{"test_lines":[37,42],"covered_lines":[22,25,30],"label":"ByteConstraint::::isGreaterThan(java.lang.Byte)"},{"test_lines":[44,50],"covered_lines":[22,25,35],"label":"ByteConstraint::::isGreaterThanOrEqual(java.lang.Byte)"},{"test_lines":[52,58],"covered_lines":[22,25,35],"label":"ByteConstraint::::isGreaterThanOrEqual(java.lang.Byte)"},{"test_lines":[60,65],"covered_lines":[22,25,40],"label":"ByteConstraint::::isLessThan(java.lang.Byte)"},{"test_lines":[67,72],"covered_lines":[22,25,40],"label":"ByteConstraint::::isLessThan(java.lang.Byte)"},{"test_lines":[74,79],"covered_lines":[22,25,45],"label":"ByteConstraint::::isLessThanOrEqual(java.lang.Byte)"},{"test_lines":[81,86],"covered_lines":[22,25,45],"label":"ByteConstraint::::isLessThanOrEqual(java.lang.Byte)"},{"test_lines":[88,93],"covered_lines":[22,25,30,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[95,100],"covered_lines":[22,25,30,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[102,107],"covered_lines":[22,25,40,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[109,114],"covered_lines":[22,25,40,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[116,122],"covered_lines":[22,25,35,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[124,130],"covered_lines":[22,25,35,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[132,138],"covered_lines":[22,25,45,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[140,146],"covered_lines":[22,25,45,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[148,154],"covered_lines":[22,25,45,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[156,162],"covered_lines":[22,25,45,50],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/ObjectConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.List;\n","import java.util.function.Function;\n","\n","import am.ik.yavi.constraint.base.ConstraintBase;\n","import am.ik.yavi.constraint.password.ObjectPasswordPoliciesBuilder;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class ObjectConstraint<T, E> extends ConstraintBase<T, E, ObjectConstraint<T, E>> {\n","\n","\t@Override\n","\tpublic ObjectConstraint<T, E> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\tpublic ObjectConstraint<T, E> password(\n","\t\t\tFunction<ObjectPasswordPoliciesBuilder<T, E>, List<ConstraintPredicate<E>>> builder) {\n","\t\tfinal List<ConstraintPredicate<E>> predicates = builder\n","\t\t\t\t.apply(new ObjectPasswordPoliciesBuilder<>());\n","\t\tthis.predicates().addAll(predicates);\n","\t\treturn this;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.Arrays;\n","import java.util.EnumSet;\n","import java.util.List;\n","import java.util.function.Predicate;\n","\n","import am.ik.yavi.Color;\n","import am.ik.yavi.Message;\n","import am.ik.yavi.builder.ValidatorBuilder;\n","import am.ik.yavi.core.ConstraintViolation;\n","import am.ik.yavi.core.ConstraintViolations;\n","import am.ik.yavi.core.Validator;\n","import am.ik.yavi.jsr305.Nullable;\n","import org.junit.jupiter.api.Nested;\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.Assertions.assertThatThrownBy;\n","\n","class ObjectConstraintTest {\n","\tprivate final ObjectConstraint<String, String> constraint = new ObjectConstraint<>();\n","\n","\t@Test\n","\tvoid isNull() {\n","\t\tPredicate<String> predicate = constraint.isNull().predicates().getFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(\"foo\")).isFalse();\n","\t\tassertThat(predicate.test(null)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid notNull() {\n","\t\tPredicate<String> predicate = constraint.notNull().predicates().getFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(\"foo\")).isTrue();\n","\t\tassertThat(predicate.test(null)).isFalse();\n","\t}\n","\n","\t@Nested\n","\tclass EqualTo {\n","\t\t@Test\n","\t\tvoid equalObjectsSucceed() {\n","\t\t\tassertThat(equalToPredicate(\"other\").test(\"other\")).isTrue();\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid differentObjectsFail() {\n","\t\t\tassertThat(equalToPredicate(\"other\").test(\"this\")).isFalse();\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid nullInputFails() {\n","\t\t\tassertThat(equalToPredicate(\"other\").test(null)).isFalse();\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid equalToNullFailsWithNonNullInput() {\n","\t\t\tassertThat(equalToPredicate(null).test(\"this\")).isFalse();\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid equalToNullSucceedsWithNullInput() {\n","\t\t\tassertThat(equalToPredicate(null).test(null)).isTrue();\n","\t\t}\n","\n","\t\tprivate Predicate<String> equalToPredicate(@Nullable String other) {\n","\t\t\treturn constraint.equalTo(other).predicates().getFirst().predicate();\n","\t\t}\n","\t}\n","\n","\t@Nested\n","\tclass OneOf {\n","\t\t@Test\n","\t\tvoid succeedsWhenInputIsOneOfValues() {\n","\t\t\tassertThat(oneOfPredicate(Arrays.asList(\"this\", \"other\")).test(\"this\"))\n","\t\t\t\t\t.isTrue();\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid failsWhenInputIsNoneOfValues() {\n","\t\t\tassertThat(oneOfPredicate(Arrays.asList(\"this\", \"other\")).test(\"unknown\"))\n","\t\t\t\t\t.isFalse();\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid failsWhenInputIsNull() {\n","\t\t\tassertThat(oneOfPredicate(Arrays.asList(\"this\", \"other\")).test(null))\n","\t\t\t\t\t.isFalse();\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid succeedsWhenInputIsNullAndNullIsOneOfTheValues() {\n","\t\t\tassertThat(oneOfPredicate(Arrays.asList(\"this\", null)).test(null)).isTrue();\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid nullValuesIsNotAllowed() {\n","\t\t\tassertThatThrownBy(() -> oneOfPredicate(null))\n","\t\t\t\t\t.isExactlyInstanceOf(NullPointerException.class);\n","\t\t}\n","\n","\t\t@Test\n","\t\tvoid violatedOneOfArgumentsAreRenderedCorrectly() {\n","\t\t\tfinal Validator<Message> validator = ValidatorBuilder.<Message> of()\n","\t\t\t\t\t.constraint(Message::getText, \"text\",\n","\t\t\t\t\t\t\tc -> c.oneOf(Arrays.asList(\"a\", \"b\")))\n","\t\t\t\t\t._object(Message::getColor, \"color\",\n","\t\t\t\t\t\t\tc -> c.oneOf(EnumSet.of(Color.RED, Color.BLUE)))\n","\t\t\t\t\t.build();\n","\t\t\tfinal ConstraintViolations violations = validator\n","\t\t\t\t\t.validate(new Message(\"c\", Color.GREEN));\n","\t\t\tassertThat(violations).extracting(ConstraintViolation::message)\n","\t\t\t\t\t.containsExactlyInAnyOrder(\n","\t\t\t\t\t\t\t\"\\\"text\\\" must be one of the following values: [a, b]\",\n","\t\t\t\t\t\t\t\"\\\"color\\\" must be one of the following values: [RED, BLUE]\");\n","\t\t}\n","\n","\t\tprivate Predicate<String> oneOfPredicate(List<String> values) {\n","\t\t\treturn constraint.oneOf(values).predicates().getFirst().predicate();\n","\t\t}\n","\t}\n","}\n"],"method_lines_dic":{"ObjectConstraint::::cast()":[27,30],"ObjectConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.ObjectPasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)":[35,41]},"test_method_lines_dic":{"ObjectConstraintTest::::isNull()":[39,45],"ObjectConstraintTest::::notNull()":[47,53],"ObjectConstraintTest.EqualTo::::equalObjectsSucceed()":[57,60],"ObjectConstraintTest.EqualTo::::differentObjectsFail()":[62,65],"ObjectConstraintTest.EqualTo::::nullInputFails()":[67,70],"ObjectConstraintTest.EqualTo::::equalToNullFailsWithNonNullInput()":[72,75],"ObjectConstraintTest.EqualTo::::equalToNullSucceedsWithNullInput()":[77,80],"ObjectConstraintTest.EqualTo::::equalToPredicate(java.lang.String)":[82,84],"ObjectConstraintTest.OneOf::::succeedsWhenInputIsOneOfValues()":[89,93],"ObjectConstraintTest.OneOf::::failsWhenInputIsNoneOfValues()":[95,99],"ObjectConstraintTest.OneOf::::failsWhenInputIsNull()":[101,105],"ObjectConstraintTest.OneOf::::succeedsWhenInputIsNullAndNullIsOneOfTheValues()":[107,110],"ObjectConstraintTest.OneOf::::nullValuesIsNotAllowed()":[112,116],"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()":[118,132],"ObjectConstraintTest.OneOf::::oneOfPredicate(java.util.List<java.lang.String>)":[134,136]},"reverse_method_lines_dic":{"27":"ObjectConstraint::::cast()","28":"ObjectConstraint::::cast()","29":"ObjectConstraint::::cast()","30":"ObjectConstraint::::cast()","35":"ObjectConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.ObjectPasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","36":"ObjectConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.ObjectPasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","37":"ObjectConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.ObjectPasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","38":"ObjectConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.ObjectPasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","39":"ObjectConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.ObjectPasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","40":"ObjectConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.ObjectPasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","41":"ObjectConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.ObjectPasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)"},"test_reverse_method_lines_dic":{"39":"ObjectConstraintTest::::isNull()","40":"ObjectConstraintTest::::isNull()","41":"ObjectConstraintTest::::isNull()","42":"ObjectConstraintTest::::isNull()","43":"ObjectConstraintTest::::isNull()","44":"ObjectConstraintTest::::isNull()","45":"ObjectConstraintTest::::isNull()","47":"ObjectConstraintTest::::notNull()","48":"ObjectConstraintTest::::notNull()","49":"ObjectConstraintTest::::notNull()","50":"ObjectConstraintTest::::notNull()","51":"ObjectConstraintTest::::notNull()","52":"ObjectConstraintTest::::notNull()","53":"ObjectConstraintTest::::notNull()","57":"ObjectConstraintTest.EqualTo::::equalObjectsSucceed()","58":"ObjectConstraintTest.EqualTo::::equalObjectsSucceed()","59":"ObjectConstraintTest.EqualTo::::equalObjectsSucceed()","60":"ObjectConstraintTest.EqualTo::::equalObjectsSucceed()","62":"ObjectConstraintTest.EqualTo::::differentObjectsFail()","63":"ObjectConstraintTest.EqualTo::::differentObjectsFail()","64":"ObjectConstraintTest.EqualTo::::differentObjectsFail()","65":"ObjectConstraintTest.EqualTo::::differentObjectsFail()","67":"ObjectConstraintTest.EqualTo::::nullInputFails()","68":"ObjectConstraintTest.EqualTo::::nullInputFails()","69":"ObjectConstraintTest.EqualTo::::nullInputFails()","70":"ObjectConstraintTest.EqualTo::::nullInputFails()","72":"ObjectConstraintTest.EqualTo::::equalToNullFailsWithNonNullInput()","73":"ObjectConstraintTest.EqualTo::::equalToNullFailsWithNonNullInput()","74":"ObjectConstraintTest.EqualTo::::equalToNullFailsWithNonNullInput()","75":"ObjectConstraintTest.EqualTo::::equalToNullFailsWithNonNullInput()","77":"ObjectConstraintTest.EqualTo::::equalToNullSucceedsWithNullInput()","78":"ObjectConstraintTest.EqualTo::::equalToNullSucceedsWithNullInput()","79":"ObjectConstraintTest.EqualTo::::equalToNullSucceedsWithNullInput()","80":"ObjectConstraintTest.EqualTo::::equalToNullSucceedsWithNullInput()","82":"ObjectConstraintTest.EqualTo::::equalToPredicate(java.lang.String)","83":"ObjectConstraintTest.EqualTo::::equalToPredicate(java.lang.String)","84":"ObjectConstraintTest.EqualTo::::equalToPredicate(java.lang.String)","89":"ObjectConstraintTest.OneOf::::succeedsWhenInputIsOneOfValues()","90":"ObjectConstraintTest.OneOf::::succeedsWhenInputIsOneOfValues()","91":"ObjectConstraintTest.OneOf::::succeedsWhenInputIsOneOfValues()","92":"ObjectConstraintTest.OneOf::::succeedsWhenInputIsOneOfValues()","93":"ObjectConstraintTest.OneOf::::succeedsWhenInputIsOneOfValues()","95":"ObjectConstraintTest.OneOf::::failsWhenInputIsNoneOfValues()","96":"ObjectConstraintTest.OneOf::::failsWhenInputIsNoneOfValues()","97":"ObjectConstraintTest.OneOf::::failsWhenInputIsNoneOfValues()","98":"ObjectConstraintTest.OneOf::::failsWhenInputIsNoneOfValues()","99":"ObjectConstraintTest.OneOf::::failsWhenInputIsNoneOfValues()","101":"ObjectConstraintTest.OneOf::::failsWhenInputIsNull()","102":"ObjectConstraintTest.OneOf::::failsWhenInputIsNull()","103":"ObjectConstraintTest.OneOf::::failsWhenInputIsNull()","104":"ObjectConstraintTest.OneOf::::failsWhenInputIsNull()","105":"ObjectConstraintTest.OneOf::::failsWhenInputIsNull()","107":"ObjectConstraintTest.OneOf::::succeedsWhenInputIsNullAndNullIsOneOfTheValues()","108":"ObjectConstraintTest.OneOf::::succeedsWhenInputIsNullAndNullIsOneOfTheValues()","109":"ObjectConstraintTest.OneOf::::succeedsWhenInputIsNullAndNullIsOneOfTheValues()","110":"ObjectConstraintTest.OneOf::::succeedsWhenInputIsNullAndNullIsOneOfTheValues()","112":"ObjectConstraintTest.OneOf::::nullValuesIsNotAllowed()","113":"ObjectConstraintTest.OneOf::::nullValuesIsNotAllowed()","114":"ObjectConstraintTest.OneOf::::nullValuesIsNotAllowed()","115":"ObjectConstraintTest.OneOf::::nullValuesIsNotAllowed()","116":"ObjectConstraintTest.OneOf::::nullValuesIsNotAllowed()","118":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","119":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","120":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","121":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","122":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","123":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","124":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","125":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","126":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","127":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","128":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","129":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","130":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","131":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","132":"ObjectConstraintTest.OneOf::::violatedOneOfArgumentsAreRenderedCorrectly()","134":"ObjectConstraintTest.OneOf::::oneOfPredicate(java.util.List<java.lang.String>)","135":"ObjectConstraintTest.OneOf::::oneOfPredicate(java.util.List<java.lang.String>)","136":"ObjectConstraintTest.OneOf::::oneOfPredicate(java.util.List<java.lang.String>)"},"tests":[{"test_lines":[39,45],"covered_lines":[25,29],"label":"ObjectConstraint::::cast()"},{"test_lines":[47,53],"covered_lines":[25,29],"label":"ObjectConstraint::::cast()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/BigIntegerConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.math.BigInteger;\n","import java.util.function.Predicate;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","\n","public class BigIntegerConstraint<T>\n","\t\textends NumericConstraintBase<T, BigInteger, BigIntegerConstraint<T>> {\n","\t@Override\n","\tpublic BigIntegerConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<BigInteger> isGreaterThan(BigInteger min) {\n","\t\treturn x -> x.compareTo(min) > 0;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<BigInteger> isGreaterThanOrEqual(BigInteger min) {\n","\t\treturn x -> x.compareTo(min) >= 0;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<BigInteger> isLessThan(BigInteger max) {\n","\t\treturn x -> x.compareTo(max) < 0;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<BigInteger> isLessThanOrEqual(BigInteger max) {\n","\t\treturn x -> x.compareTo(max) <= 0;\n","\t}\n","\n","\t@Override\n","\tprotected BigInteger zeroValue() {\n","\t\treturn BigInteger.ZERO;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.ValueSource;\n","\n","import java.math.BigDecimal;\n","import java.math.BigInteger;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class BigIntegerConstraintTest {\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"101\", \"150\" })\n","\tvoid validGreaterThan(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThan(new BigInteger(\"100\")));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"100\", \"-50\" })\n","\tvoid invalidGreaterThan(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThan(new BigInteger(\"100\")));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"101\", \"100\" })\n","\tvoid validGreaterThanOrEqual(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual(new BigInteger(\"100\")));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"-50\" })\n","\tvoid invalidGreaterThanOrEqual(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual(new BigInteger(\"100\")));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"-50\" })\n","\tvoid validLessThan(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThan(new BigInteger(\"100\")));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"100\", \"150\" })\n","\tvoid invalidLessThan(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThan(new BigInteger(\"100\")));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid validLessThanOrEqual(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThanOrEqual(new BigInteger(\"100\")));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"101\", \"150\" })\n","\tvoid invalidLessThanOrEqual(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThanOrEqual(new BigInteger(\"100\")));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid validPositive(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-150\", \"0\" })\n","\tvoid invalidPositive(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\", \"0\" })\n","\tvoid invalidNegative(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-150\" })\n","\tvoid validNegative(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\", \"0\" })\n","\tvoid validPositiveOrZero(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-150\" })\n","\tvoid invalidPositiveOrZero(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid invalidNegaitveOrZero(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-150\", \"0\" })\n","\tvoid validNegaitveOrZero(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"99\", \"100\" })\n","\tvoid invalidNegativeOrZero(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-101\", \"-150\", \"0\" })\n","\tvoid validNegativeOrZero(BigInteger value) {\n","\t\tPredicate<BigInteger> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\tprivate static Predicate<BigInteger> retrievePredicate(\n","\t\t\tFunction<BigIntegerConstraint<BigInteger>, BigIntegerConstraint<BigInteger>> constraint) {\n","\t\treturn constraint.apply(new BigIntegerConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"BigIntegerConstraint::::cast()":[25,28],"BigIntegerConstraint::::isGreaterThan(java.math.BigInteger)":[30,33],"BigIntegerConstraint::::isGreaterThanOrEqual(java.math.BigInteger)":[35,38],"BigIntegerConstraint::::isLessThan(java.math.BigInteger)":[40,43],"BigIntegerConstraint::::isLessThanOrEqual(java.math.BigInteger)":[45,48],"BigIntegerConstraint::::zeroValue()":[50,53]},"test_method_lines_dic":{"BigIntegerConstraintTest::::validGreaterThan(java.math.BigInteger)":[31,37],"BigIntegerConstraintTest::::invalidGreaterThan(java.math.BigInteger)":[39,45],"BigIntegerConstraintTest::::validGreaterThanOrEqual(java.math.BigInteger)":[47,53],"BigIntegerConstraintTest::::invalidGreaterThanOrEqual(java.math.BigInteger)":[55,61],"BigIntegerConstraintTest::::validLessThan(java.math.BigInteger)":[63,69],"BigIntegerConstraintTest::::invalidLessThan(java.math.BigInteger)":[71,77],"BigIntegerConstraintTest::::validLessThanOrEqual(java.math.BigInteger)":[79,85],"BigIntegerConstraintTest::::invalidLessThanOrEqual(java.math.BigInteger)":[87,93],"BigIntegerConstraintTest::::validPositive(java.math.BigInteger)":[95,101],"BigIntegerConstraintTest::::invalidPositive(java.math.BigInteger)":[103,109],"BigIntegerConstraintTest::::invalidNegative(java.math.BigInteger)":[111,117],"BigIntegerConstraintTest::::validNegative(java.math.BigInteger)":[119,125],"BigIntegerConstraintTest::::validPositiveOrZero(java.math.BigInteger)":[127,133],"BigIntegerConstraintTest::::invalidPositiveOrZero(java.math.BigInteger)":[135,141],"BigIntegerConstraintTest::::invalidNegaitveOrZero(java.math.BigInteger)":[143,149],"BigIntegerConstraintTest::::validNegaitveOrZero(java.math.BigInteger)":[151,157],"BigIntegerConstraintTest::::invalidNegativeOrZero(java.math.BigInteger)":[159,165],"BigIntegerConstraintTest::::validNegativeOrZero(java.math.BigInteger)":[167,173]},"reverse_method_lines_dic":{"25":"BigIntegerConstraint::::cast()","26":"BigIntegerConstraint::::cast()","27":"BigIntegerConstraint::::cast()","28":"BigIntegerConstraint::::cast()","30":"BigIntegerConstraint::::isGreaterThan(java.math.BigInteger)","31":"BigIntegerConstraint::::isGreaterThan(java.math.BigInteger)","32":"BigIntegerConstraint::::isGreaterThan(java.math.BigInteger)","33":"BigIntegerConstraint::::isGreaterThan(java.math.BigInteger)","35":"BigIntegerConstraint::::isGreaterThanOrEqual(java.math.BigInteger)","36":"BigIntegerConstraint::::isGreaterThanOrEqual(java.math.BigInteger)","37":"BigIntegerConstraint::::isGreaterThanOrEqual(java.math.BigInteger)","38":"BigIntegerConstraint::::isGreaterThanOrEqual(java.math.BigInteger)","40":"BigIntegerConstraint::::isLessThan(java.math.BigInteger)","41":"BigIntegerConstraint::::isLessThan(java.math.BigInteger)","42":"BigIntegerConstraint::::isLessThan(java.math.BigInteger)","43":"BigIntegerConstraint::::isLessThan(java.math.BigInteger)","45":"BigIntegerConstraint::::isLessThanOrEqual(java.math.BigInteger)","46":"BigIntegerConstraint::::isLessThanOrEqual(java.math.BigInteger)","47":"BigIntegerConstraint::::isLessThanOrEqual(java.math.BigInteger)","48":"BigIntegerConstraint::::isLessThanOrEqual(java.math.BigInteger)","50":"BigIntegerConstraint::::zeroValue()","51":"BigIntegerConstraint::::zeroValue()","52":"BigIntegerConstraint::::zeroValue()","53":"BigIntegerConstraint::::zeroValue()"},"test_reverse_method_lines_dic":{"31":"BigIntegerConstraintTest::::validGreaterThan(java.math.BigInteger)","32":"BigIntegerConstraintTest::::validGreaterThan(java.math.BigInteger)","33":"BigIntegerConstraintTest::::validGreaterThan(java.math.BigInteger)","34":"BigIntegerConstraintTest::::validGreaterThan(java.math.BigInteger)","35":"BigIntegerConstraintTest::::validGreaterThan(java.math.BigInteger)","36":"BigIntegerConstraintTest::::validGreaterThan(java.math.BigInteger)","37":"BigIntegerConstraintTest::::validGreaterThan(java.math.BigInteger)","39":"BigIntegerConstraintTest::::invalidGreaterThan(java.math.BigInteger)","40":"BigIntegerConstraintTest::::invalidGreaterThan(java.math.BigInteger)","41":"BigIntegerConstraintTest::::invalidGreaterThan(java.math.BigInteger)","42":"BigIntegerConstraintTest::::invalidGreaterThan(java.math.BigInteger)","43":"BigIntegerConstraintTest::::invalidGreaterThan(java.math.BigInteger)","44":"BigIntegerConstraintTest::::invalidGreaterThan(java.math.BigInteger)","45":"BigIntegerConstraintTest::::invalidGreaterThan(java.math.BigInteger)","47":"BigIntegerConstraintTest::::validGreaterThanOrEqual(java.math.BigInteger)","48":"BigIntegerConstraintTest::::validGreaterThanOrEqual(java.math.BigInteger)","49":"BigIntegerConstraintTest::::validGreaterThanOrEqual(java.math.BigInteger)","50":"BigIntegerConstraintTest::::validGreaterThanOrEqual(java.math.BigInteger)","51":"BigIntegerConstraintTest::::validGreaterThanOrEqual(java.math.BigInteger)","52":"BigIntegerConstraintTest::::validGreaterThanOrEqual(java.math.BigInteger)","53":"BigIntegerConstraintTest::::validGreaterThanOrEqual(java.math.BigInteger)","55":"BigIntegerConstraintTest::::invalidGreaterThanOrEqual(java.math.BigInteger)","56":"BigIntegerConstraintTest::::invalidGreaterThanOrEqual(java.math.BigInteger)","57":"BigIntegerConstraintTest::::invalidGreaterThanOrEqual(java.math.BigInteger)","58":"BigIntegerConstraintTest::::invalidGreaterThanOrEqual(java.math.BigInteger)","59":"BigIntegerConstraintTest::::invalidGreaterThanOrEqual(java.math.BigInteger)","60":"BigIntegerConstraintTest::::invalidGreaterThanOrEqual(java.math.BigInteger)","61":"BigIntegerConstraintTest::::invalidGreaterThanOrEqual(java.math.BigInteger)","63":"BigIntegerConstraintTest::::validLessThan(java.math.BigInteger)","64":"BigIntegerConstraintTest::::validLessThan(java.math.BigInteger)","65":"BigIntegerConstraintTest::::validLessThan(java.math.BigInteger)","66":"BigIntegerConstraintTest::::validLessThan(java.math.BigInteger)","67":"BigIntegerConstraintTest::::validLessThan(java.math.BigInteger)","68":"BigIntegerConstraintTest::::validLessThan(java.math.BigInteger)","69":"BigIntegerConstraintTest::::validLessThan(java.math.BigInteger)","71":"BigIntegerConstraintTest::::invalidLessThan(java.math.BigInteger)","72":"BigIntegerConstraintTest::::invalidLessThan(java.math.BigInteger)","73":"BigIntegerConstraintTest::::invalidLessThan(java.math.BigInteger)","74":"BigIntegerConstraintTest::::invalidLessThan(java.math.BigInteger)","75":"BigIntegerConstraintTest::::invalidLessThan(java.math.BigInteger)","76":"BigIntegerConstraintTest::::invalidLessThan(java.math.BigInteger)","77":"BigIntegerConstraintTest::::invalidLessThan(java.math.BigInteger)","79":"BigIntegerConstraintTest::::validLessThanOrEqual(java.math.BigInteger)","80":"BigIntegerConstraintTest::::validLessThanOrEqual(java.math.BigInteger)","81":"BigIntegerConstraintTest::::validLessThanOrEqual(java.math.BigInteger)","82":"BigIntegerConstraintTest::::validLessThanOrEqual(java.math.BigInteger)","83":"BigIntegerConstraintTest::::validLessThanOrEqual(java.math.BigInteger)","84":"BigIntegerConstraintTest::::validLessThanOrEqual(java.math.BigInteger)","85":"BigIntegerConstraintTest::::validLessThanOrEqual(java.math.BigInteger)","87":"BigIntegerConstraintTest::::invalidLessThanOrEqual(java.math.BigInteger)","88":"BigIntegerConstraintTest::::invalidLessThanOrEqual(java.math.BigInteger)","89":"BigIntegerConstraintTest::::invalidLessThanOrEqual(java.math.BigInteger)","90":"BigIntegerConstraintTest::::invalidLessThanOrEqual(java.math.BigInteger)","91":"BigIntegerConstraintTest::::invalidLessThanOrEqual(java.math.BigInteger)","92":"BigIntegerConstraintTest::::invalidLessThanOrEqual(java.math.BigInteger)","93":"BigIntegerConstraintTest::::invalidLessThanOrEqual(java.math.BigInteger)","95":"BigIntegerConstraintTest::::validPositive(java.math.BigInteger)","96":"BigIntegerConstraintTest::::validPositive(java.math.BigInteger)","97":"BigIntegerConstraintTest::::validPositive(java.math.BigInteger)","98":"BigIntegerConstraintTest::::validPositive(java.math.BigInteger)","99":"BigIntegerConstraintTest::::validPositive(java.math.BigInteger)","100":"BigIntegerConstraintTest::::validPositive(java.math.BigInteger)","101":"BigIntegerConstraintTest::::validPositive(java.math.BigInteger)","103":"BigIntegerConstraintTest::::invalidPositive(java.math.BigInteger)","104":"BigIntegerConstraintTest::::invalidPositive(java.math.BigInteger)","105":"BigIntegerConstraintTest::::invalidPositive(java.math.BigInteger)","106":"BigIntegerConstraintTest::::invalidPositive(java.math.BigInteger)","107":"BigIntegerConstraintTest::::invalidPositive(java.math.BigInteger)","108":"BigIntegerConstraintTest::::invalidPositive(java.math.BigInteger)","109":"BigIntegerConstraintTest::::invalidPositive(java.math.BigInteger)","111":"BigIntegerConstraintTest::::invalidNegative(java.math.BigInteger)","112":"BigIntegerConstraintTest::::invalidNegative(java.math.BigInteger)","113":"BigIntegerConstraintTest::::invalidNegative(java.math.BigInteger)","114":"BigIntegerConstraintTest::::invalidNegative(java.math.BigInteger)","115":"BigIntegerConstraintTest::::invalidNegative(java.math.BigInteger)","116":"BigIntegerConstraintTest::::invalidNegative(java.math.BigInteger)","117":"BigIntegerConstraintTest::::invalidNegative(java.math.BigInteger)","119":"BigIntegerConstraintTest::::validNegative(java.math.BigInteger)","120":"BigIntegerConstraintTest::::validNegative(java.math.BigInteger)","121":"BigIntegerConstraintTest::::validNegative(java.math.BigInteger)","122":"BigIntegerConstraintTest::::validNegative(java.math.BigInteger)","123":"BigIntegerConstraintTest::::validNegative(java.math.BigInteger)","124":"BigIntegerConstraintTest::::validNegative(java.math.BigInteger)","125":"BigIntegerConstraintTest::::validNegative(java.math.BigInteger)","127":"BigIntegerConstraintTest::::validPositiveOrZero(java.math.BigInteger)","128":"BigIntegerConstraintTest::::validPositiveOrZero(java.math.BigInteger)","129":"BigIntegerConstraintTest::::validPositiveOrZero(java.math.BigInteger)","130":"BigIntegerConstraintTest::::validPositiveOrZero(java.math.BigInteger)","131":"BigIntegerConstraintTest::::validPositiveOrZero(java.math.BigInteger)","132":"BigIntegerConstraintTest::::validPositiveOrZero(java.math.BigInteger)","133":"BigIntegerConstraintTest::::validPositiveOrZero(java.math.BigInteger)","135":"BigIntegerConstraintTest::::invalidPositiveOrZero(java.math.BigInteger)","136":"BigIntegerConstraintTest::::invalidPositiveOrZero(java.math.BigInteger)","137":"BigIntegerConstraintTest::::invalidPositiveOrZero(java.math.BigInteger)","138":"BigIntegerConstraintTest::::invalidPositiveOrZero(java.math.BigInteger)","139":"BigIntegerConstraintTest::::invalidPositiveOrZero(java.math.BigInteger)","140":"BigIntegerConstraintTest::::invalidPositiveOrZero(java.math.BigInteger)","141":"BigIntegerConstraintTest::::invalidPositiveOrZero(java.math.BigInteger)","143":"BigIntegerConstraintTest::::invalidNegaitveOrZero(java.math.BigInteger)","144":"BigIntegerConstraintTest::::invalidNegaitveOrZero(java.math.BigInteger)","145":"BigIntegerConstraintTest::::invalidNegaitveOrZero(java.math.BigInteger)","146":"BigIntegerConstraintTest::::invalidNegaitveOrZero(java.math.BigInteger)","147":"BigIntegerConstraintTest::::invalidNegaitveOrZero(java.math.BigInteger)","148":"BigIntegerConstraintTest::::invalidNegaitveOrZero(java.math.BigInteger)","149":"BigIntegerConstraintTest::::invalidNegaitveOrZero(java.math.BigInteger)","151":"BigIntegerConstraintTest::::validNegaitveOrZero(java.math.BigInteger)","152":"BigIntegerConstraintTest::::validNegaitveOrZero(java.math.BigInteger)","153":"BigIntegerConstraintTest::::validNegaitveOrZero(java.math.BigInteger)","154":"BigIntegerConstraintTest::::validNegaitveOrZero(java.math.BigInteger)","155":"BigIntegerConstraintTest::::validNegaitveOrZero(java.math.BigInteger)","156":"BigIntegerConstraintTest::::validNegaitveOrZero(java.math.BigInteger)","157":"BigIntegerConstraintTest::::validNegaitveOrZero(java.math.BigInteger)","159":"BigIntegerConstraintTest::::invalidNegativeOrZero(java.math.BigInteger)","160":"BigIntegerConstraintTest::::invalidNegativeOrZero(java.math.BigInteger)","161":"BigIntegerConstraintTest::::invalidNegativeOrZero(java.math.BigInteger)","162":"BigIntegerConstraintTest::::invalidNegativeOrZero(java.math.BigInteger)","163":"BigIntegerConstraintTest::::invalidNegativeOrZero(java.math.BigInteger)","164":"BigIntegerConstraintTest::::invalidNegativeOrZero(java.math.BigInteger)","165":"BigIntegerConstraintTest::::invalidNegativeOrZero(java.math.BigInteger)","167":"BigIntegerConstraintTest::::validNegativeOrZero(java.math.BigInteger)","168":"BigIntegerConstraintTest::::validNegativeOrZero(java.math.BigInteger)","169":"BigIntegerConstraintTest::::validNegativeOrZero(java.math.BigInteger)","170":"BigIntegerConstraintTest::::validNegativeOrZero(java.math.BigInteger)","171":"BigIntegerConstraintTest::::validNegativeOrZero(java.math.BigInteger)","172":"BigIntegerConstraintTest::::validNegativeOrZero(java.math.BigInteger)","173":"BigIntegerConstraintTest::::validNegativeOrZero(java.math.BigInteger)"},"tests":[{"test_lines":[31,37],"covered_lines":[23,27,32],"label":"BigIntegerConstraint::::isGreaterThan(java.math.BigInteger)"},{"test_lines":[39,45],"covered_lines":[23,27,32],"label":"BigIntegerConstraint::::isGreaterThan(java.math.BigInteger)"},{"test_lines":[47,53],"covered_lines":[23,27,37],"label":"BigIntegerConstraint::::isGreaterThanOrEqual(java.math.BigInteger)"},{"test_lines":[55,61],"covered_lines":[23,27,37],"label":"BigIntegerConstraint::::isGreaterThanOrEqual(java.math.BigInteger)"},{"test_lines":[63,69],"covered_lines":[23,27,42],"label":"BigIntegerConstraint::::isLessThan(java.math.BigInteger)"},{"test_lines":[71,77],"covered_lines":[23,27,42],"label":"BigIntegerConstraint::::isLessThan(java.math.BigInteger)"},{"test_lines":[79,85],"covered_lines":[23,27,47],"label":"BigIntegerConstraint::::isLessThanOrEqual(java.math.BigInteger)"},{"test_lines":[87,93],"covered_lines":[23,27,47],"label":"BigIntegerConstraint::::isLessThanOrEqual(java.math.BigInteger)"},{"test_lines":[95,101],"covered_lines":[23,27,32,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[103,109],"covered_lines":[23,27,32,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[111,117],"covered_lines":[23,27,42,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[119,125],"covered_lines":[23,27,42,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[127,133],"covered_lines":[23,27,37,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[135,141],"covered_lines":[23,27,37,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[143,149],"covered_lines":[23,27,47,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[151,157],"covered_lines":[23,27,47,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[159,165],"covered_lines":[23,27,47,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[167,173],"covered_lines":[23,27,47,52],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/CharacterConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.function.Predicate;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","\n","public class CharacterConstraint<T>\n","\t\textends NumericConstraintBase<T, Character, CharacterConstraint<T>> {\n","\t@Override\n","\tpublic CharacterConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Character> isGreaterThan(Character min) {\n","\t\treturn x -> x > min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Character> isGreaterThanOrEqual(Character min) {\n","\t\treturn x -> x >= min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Character> isLessThan(Character max) {\n","\t\treturn x -> x < max;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Character> isLessThanOrEqual(Character max) {\n","\t\treturn x -> x <= max;\n","\t}\n","\n","\t@Override\n","\tprotected Character zeroValue() {\n","\t\treturn Character.MIN_VALUE;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.ValueSource;\n","\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class CharacterConstraintTest {\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 101, 120 })\n","\tvoid validGreaterThan(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThan((char) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 100, 0 })\n","\tvoid invalidGreaterThan(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThan((char) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 101, 100 })\n","\tvoid validGreaterThanOrEqual(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual((char) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 99, 0 })\n","\tvoid invalidGreaterThanOrEqual(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual((char) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 99, 0 })\n","\tvoid validLessThan(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(c -> c.lessThan((char) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 100, 120 })\n","\tvoid invalidLessThan(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(c -> c.lessThan((char) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 99, 100 })\n","\tvoid validLessThanOrEqual(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThanOrEqual((char) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 101, 120 })\n","\tvoid invalidLessThanOrEqual(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThanOrEqual((char) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 99, 100 })\n","\tvoid validPositive(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 0 })\n","\tvoid invalidPositive(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(chars = { 99, 100 })\n","\tvoid validNegative(char value) {\n","\t\tPredicate<Character> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\tprivate static Predicate<Character> retrievePredicate(\n","\t\t\tFunction<CharacterConstraint<Character>, CharacterConstraint<Character>> constraint) {\n","\t\treturn constraint.apply(new CharacterConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"CharacterConstraint::::cast()":[24,27],"CharacterConstraint::::isGreaterThan(java.lang.Character)":[29,32],"CharacterConstraint::::isGreaterThanOrEqual(java.lang.Character)":[34,37],"CharacterConstraint::::isLessThan(java.lang.Character)":[39,42],"CharacterConstraint::::isLessThanOrEqual(java.lang.Character)":[44,47],"CharacterConstraint::::zeroValue()":[49,52]},"test_method_lines_dic":{"CharacterConstraintTest::::validGreaterThan(char)":[29,35],"CharacterConstraintTest::::invalidGreaterThan(char)":[37,43],"CharacterConstraintTest::::validGreaterThanOrEqual(char)":[45,51],"CharacterConstraintTest::::invalidGreaterThanOrEqual(char)":[53,59],"CharacterConstraintTest::::validLessThan(char)":[61,66],"CharacterConstraintTest::::invalidLessThan(char)":[68,73],"CharacterConstraintTest::::validLessThanOrEqual(char)":[75,81],"CharacterConstraintTest::::invalidLessThanOrEqual(char)":[83,89],"CharacterConstraintTest::::validPositive(char)":[91,97],"CharacterConstraintTest::::invalidPositive(char)":[99,105],"CharacterConstraintTest::::validNegative(char)":[107,113]},"reverse_method_lines_dic":{"24":"CharacterConstraint::::cast()","25":"CharacterConstraint::::cast()","26":"CharacterConstraint::::cast()","27":"CharacterConstraint::::cast()","29":"CharacterConstraint::::isGreaterThan(java.lang.Character)","30":"CharacterConstraint::::isGreaterThan(java.lang.Character)","31":"CharacterConstraint::::isGreaterThan(java.lang.Character)","32":"CharacterConstraint::::isGreaterThan(java.lang.Character)","34":"CharacterConstraint::::isGreaterThanOrEqual(java.lang.Character)","35":"CharacterConstraint::::isGreaterThanOrEqual(java.lang.Character)","36":"CharacterConstraint::::isGreaterThanOrEqual(java.lang.Character)","37":"CharacterConstraint::::isGreaterThanOrEqual(java.lang.Character)","39":"CharacterConstraint::::isLessThan(java.lang.Character)","40":"CharacterConstraint::::isLessThan(java.lang.Character)","41":"CharacterConstraint::::isLessThan(java.lang.Character)","42":"CharacterConstraint::::isLessThan(java.lang.Character)","44":"CharacterConstraint::::isLessThanOrEqual(java.lang.Character)","45":"CharacterConstraint::::isLessThanOrEqual(java.lang.Character)","46":"CharacterConstraint::::isLessThanOrEqual(java.lang.Character)","47":"CharacterConstraint::::isLessThanOrEqual(java.lang.Character)","49":"CharacterConstraint::::zeroValue()","50":"CharacterConstraint::::zeroValue()","51":"CharacterConstraint::::zeroValue()","52":"CharacterConstraint::::zeroValue()"},"test_reverse_method_lines_dic":{"29":"CharacterConstraintTest::::validGreaterThan(char)","30":"CharacterConstraintTest::::validGreaterThan(char)","31":"CharacterConstraintTest::::validGreaterThan(char)","32":"CharacterConstraintTest::::validGreaterThan(char)","33":"CharacterConstraintTest::::validGreaterThan(char)","34":"CharacterConstraintTest::::validGreaterThan(char)","35":"CharacterConstraintTest::::validGreaterThan(char)","37":"CharacterConstraintTest::::invalidGreaterThan(char)","38":"CharacterConstraintTest::::invalidGreaterThan(char)","39":"CharacterConstraintTest::::invalidGreaterThan(char)","40":"CharacterConstraintTest::::invalidGreaterThan(char)","41":"CharacterConstraintTest::::invalidGreaterThan(char)","42":"CharacterConstraintTest::::invalidGreaterThan(char)","43":"CharacterConstraintTest::::invalidGreaterThan(char)","45":"CharacterConstraintTest::::validGreaterThanOrEqual(char)","46":"CharacterConstraintTest::::validGreaterThanOrEqual(char)","47":"CharacterConstraintTest::::validGreaterThanOrEqual(char)","48":"CharacterConstraintTest::::validGreaterThanOrEqual(char)","49":"CharacterConstraintTest::::validGreaterThanOrEqual(char)","50":"CharacterConstraintTest::::validGreaterThanOrEqual(char)","51":"CharacterConstraintTest::::validGreaterThanOrEqual(char)","53":"CharacterConstraintTest::::invalidGreaterThanOrEqual(char)","54":"CharacterConstraintTest::::invalidGreaterThanOrEqual(char)","55":"CharacterConstraintTest::::invalidGreaterThanOrEqual(char)","56":"CharacterConstraintTest::::invalidGreaterThanOrEqual(char)","57":"CharacterConstraintTest::::invalidGreaterThanOrEqual(char)","58":"CharacterConstraintTest::::invalidGreaterThanOrEqual(char)","59":"CharacterConstraintTest::::invalidGreaterThanOrEqual(char)","61":"CharacterConstraintTest::::validLessThan(char)","62":"CharacterConstraintTest::::validLessThan(char)","63":"CharacterConstraintTest::::validLessThan(char)","64":"CharacterConstraintTest::::validLessThan(char)","65":"CharacterConstraintTest::::validLessThan(char)","66":"CharacterConstraintTest::::validLessThan(char)","68":"CharacterConstraintTest::::invalidLessThan(char)","69":"CharacterConstraintTest::::invalidLessThan(char)","70":"CharacterConstraintTest::::invalidLessThan(char)","71":"CharacterConstraintTest::::invalidLessThan(char)","72":"CharacterConstraintTest::::invalidLessThan(char)","73":"CharacterConstraintTest::::invalidLessThan(char)","75":"CharacterConstraintTest::::validLessThanOrEqual(char)","76":"CharacterConstraintTest::::validLessThanOrEqual(char)","77":"CharacterConstraintTest::::validLessThanOrEqual(char)","78":"CharacterConstraintTest::::validLessThanOrEqual(char)","79":"CharacterConstraintTest::::validLessThanOrEqual(char)","80":"CharacterConstraintTest::::validLessThanOrEqual(char)","81":"CharacterConstraintTest::::validLessThanOrEqual(char)","83":"CharacterConstraintTest::::invalidLessThanOrEqual(char)","84":"CharacterConstraintTest::::invalidLessThanOrEqual(char)","85":"CharacterConstraintTest::::invalidLessThanOrEqual(char)","86":"CharacterConstraintTest::::invalidLessThanOrEqual(char)","87":"CharacterConstraintTest::::invalidLessThanOrEqual(char)","88":"CharacterConstraintTest::::invalidLessThanOrEqual(char)","89":"CharacterConstraintTest::::invalidLessThanOrEqual(char)","91":"CharacterConstraintTest::::validPositive(char)","92":"CharacterConstraintTest::::validPositive(char)","93":"CharacterConstraintTest::::validPositive(char)","94":"CharacterConstraintTest::::validPositive(char)","95":"CharacterConstraintTest::::validPositive(char)","96":"CharacterConstraintTest::::validPositive(char)","97":"CharacterConstraintTest::::validPositive(char)","99":"CharacterConstraintTest::::invalidPositive(char)","100":"CharacterConstraintTest::::invalidPositive(char)","101":"CharacterConstraintTest::::invalidPositive(char)","102":"CharacterConstraintTest::::invalidPositive(char)","103":"CharacterConstraintTest::::invalidPositive(char)","104":"CharacterConstraintTest::::invalidPositive(char)","105":"CharacterConstraintTest::::invalidPositive(char)","107":"CharacterConstraintTest::::validNegative(char)","108":"CharacterConstraintTest::::validNegative(char)","109":"CharacterConstraintTest::::validNegative(char)","110":"CharacterConstraintTest::::validNegative(char)","111":"CharacterConstraintTest::::validNegative(char)","112":"CharacterConstraintTest::::validNegative(char)","113":"CharacterConstraintTest::::validNegative(char)"},"tests":[{"test_lines":[29,35],"covered_lines":[22,26,31],"label":"CharacterConstraint::::isGreaterThan(java.lang.Character)"},{"test_lines":[37,43],"covered_lines":[22,26,31],"label":"CharacterConstraint::::isGreaterThan(java.lang.Character)"},{"test_lines":[45,51],"covered_lines":[22,26,36],"label":"CharacterConstraint::::isGreaterThanOrEqual(java.lang.Character)"},{"test_lines":[53,59],"covered_lines":[22,26,36],"label":"CharacterConstraint::::isGreaterThanOrEqual(java.lang.Character)"},{"test_lines":[61,66],"covered_lines":[22,26,41],"label":"CharacterConstraint::::isLessThan(java.lang.Character)"},{"test_lines":[68,73],"covered_lines":[22,26,41],"label":"CharacterConstraint::::isLessThan(java.lang.Character)"},{"test_lines":[75,81],"covered_lines":[22,26,46],"label":"CharacterConstraint::::isLessThanOrEqual(java.lang.Character)"},{"test_lines":[83,89],"covered_lines":[22,26,46],"label":"CharacterConstraint::::isLessThanOrEqual(java.lang.Character)"},{"test_lines":[91,97],"covered_lines":[22,26,31,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[99,105],"covered_lines":[22,26,31,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[107,113],"covered_lines":[22,26,41,51],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/CollectionConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.ArrayList;\n","import java.util.Collection;\n","import java.util.LinkedHashSet;\n","import java.util.List;\n","import java.util.Optional;\n","import java.util.Set;\n","import java.util.function.ToIntFunction;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","import am.ik.yavi.core.ViolatedValue;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.COLLECTION_CONTAINS;\n","import static am.ik.yavi.core.ViolationMessage.Default.COLLECTION_UNIQUE;\n","\n","public class CollectionConstraint<T, L extends Collection<E>, E>\n","\t\textends ContainerConstraintBase<T, L, CollectionConstraint<T, L, E>> {\n","\n","\t@Override\n","\tpublic CollectionConstraint<T, L, E> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic CollectionConstraint<T, L, E> contains(E s) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> x.contains(s),\n","\t\t\t\tCOLLECTION_CONTAINS, () -> new Object[] { s }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.8.3\n","\t */\n","\tpublic CollectionConstraint<T, L, E> unique() {\n","\t\tthis.predicates().add(ConstraintPredicate.withViolatedValue(collection -> {\n","\t\t\tfinal List<E> duplicates = new ArrayList<>();\n","\t\t\tfinal Set<E> uniqElements = new LinkedHashSet<>(collection.size());\n","\t\t\tfor (E element : collection) {\n","\t\t\t\tif (uniqElements.contains(element)) {\n","\t\t\t\t\tduplicates.add(element);\n","\t\t\t\t}\n","\t\t\t\telse {\n","\t\t\t\t\tuniqElements.add(element);\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\tif (duplicates.isEmpty()) {\n","\t\t\t\treturn Optional.empty();\n","\t\t\t}\n","\t\t\telse {\n","\t\t\t\treturn Optional.of(new ViolatedValue(duplicates));\n","\t\t\t}\n","\t\t}, COLLECTION_UNIQUE, () -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<L> size() {\n","\t\treturn Collection::size;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.Arrays;\n","import java.util.Collections;\n","import java.util.List;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class CollectionConstraintTest {\n","\n","\t@Test\n","\tvoid contains() {\n","\t\tPredicate<List<String>> predicate = retrievePredicate(c -> c.contains(\"foo\"));\n","\t\tassertThat(predicate.test(Arrays.asList(\"foo\", \"bar\"))).isTrue();\n","\t\tassertThat(predicate.test(Arrays.asList(\"bar\", \"baz\"))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<List<String>> predicate = retrievePredicate(c -> c.fixedSize(2));\n","\t\tassertThat(predicate.test(Collections.singletonList(\"foo\"))).isFalse();\n","\t\tassertThat(predicate.test(Arrays.asList(\"foo\", \"bar\"))).isTrue();\n","\t\tassertThat(predicate.test(Arrays.asList(\"foo\", \"bar\", \"baz\"))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<List<String>> predicate = retrievePredicate(c -> c.greaterThan(2));\n","\t\tassertThat(predicate.test(Arrays.asList(\"foo\", \"bar\"))).isFalse();\n","\t\tassertThat(predicate.test(Arrays.asList(\"foo\", \"bar\", \"baz\"))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<List<String>> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual(2));\n","\t\tassertThat(predicate.test(Collections.singletonList(\"foo\"))).isFalse();\n","\t\tassertThat(predicate.test(Arrays.asList(\"foo\", \"bar\"))).isTrue();\n","\t\tassertThat(predicate.test(Arrays.asList(\"foo\", \"bar\", \"baz\"))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<List<String>> predicate = retrievePredicate(c -> c.lessThan(2));\n","\t\tassertThat(predicate.test(Collections.singletonList(\"foo\"))).isTrue();\n","\t\tassertThat(predicate.test(Arrays.asList(\"foo\", \"bar\"))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<List<String>> predicate = retrievePredicate(c -> c.lessThanOrEqual(2));\n","\t\tassertThat(predicate.test(Collections.singletonList(\"foo\"))).isTrue();\n","\t\tassertThat(predicate.test(Arrays.asList(\"foo\", \"bar\"))).isTrue();\n","\t\tassertThat(predicate.test(Arrays.asList(\"foo\", \"bar\", \"baz\"))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid notEmpty() {\n","\t\tPredicate<List<String>> predicate = retrievePredicate(c -> c.notEmpty());\n","\t\tassertThat(predicate.test(Collections.singletonList(\"foo\"))).isTrue();\n","\t\tassertThat(predicate.test(Collections.emptyList())).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid unique() {\n","\t\tPredicate<List<String>> predicate = retrievePredicate(c -> c.unique());\n","\t\tassertThat(predicate.test(Arrays.asList(\"a\", \"b\", \"c\", \"d\"))).isTrue();\n","\t\tassertThat(predicate.test(Arrays.asList(\"a\", \"b\", \"c\", \"b\"))).isFalse();\n","\t}\n","\n","\tprivate static Predicate<List<String>> retrievePredicate(\n","\t\t\tFunction<CollectionConstraint<List<String>, List<String>, String>, CollectionConstraint<List<String>, List<String>, String>> constraint) {\n","\t\treturn constraint.apply(new CollectionConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"CollectionConstraint::::cast()":[37,40],"CollectionConstraint::::contains(E)":[42,46],"CollectionConstraint::::unique()":[51,71],"CollectionConstraint::::size()":[73,76]},"test_method_lines_dic":{"CollectionConstraintTest::::contains()":[30,35],"CollectionConstraintTest::::fixedSize()":[37,43],"CollectionConstraintTest::::greaterThan()":[45,50],"CollectionConstraintTest::::greaterThanOrEqual()":[52,59],"CollectionConstraintTest::::lessThan()":[61,66],"CollectionConstraintTest::::lessThanOrEqual()":[68,74],"CollectionConstraintTest::::notEmpty()":[76,81],"CollectionConstraintTest::::unique()":[83,88]},"reverse_method_lines_dic":{"37":"CollectionConstraint::::cast()","38":"CollectionConstraint::::cast()","39":"CollectionConstraint::::cast()","40":"CollectionConstraint::::cast()","42":"CollectionConstraint::::contains(E)","43":"CollectionConstraint::::contains(E)","44":"CollectionConstraint::::contains(E)","45":"CollectionConstraint::::contains(E)","46":"CollectionConstraint::::contains(E)","51":"CollectionConstraint::::unique()","52":"CollectionConstraint::::unique()","53":"CollectionConstraint::::unique()","54":"CollectionConstraint::::unique()","55":"CollectionConstraint::::unique()","56":"CollectionConstraint::::unique()","57":"CollectionConstraint::::unique()","58":"CollectionConstraint::::unique()","59":"CollectionConstraint::::unique()","60":"CollectionConstraint::::unique()","61":"CollectionConstraint::::unique()","62":"CollectionConstraint::::unique()","63":"CollectionConstraint::::unique()","64":"CollectionConstraint::::unique()","65":"CollectionConstraint::::unique()","66":"CollectionConstraint::::unique()","67":"CollectionConstraint::::unique()","68":"CollectionConstraint::::unique()","69":"CollectionConstraint::::unique()","70":"CollectionConstraint::::unique()","71":"CollectionConstraint::::unique()","73":"CollectionConstraint::::size()","74":"CollectionConstraint::::size()","75":"CollectionConstraint::::size()","76":"CollectionConstraint::::size()"},"test_reverse_method_lines_dic":{"30":"CollectionConstraintTest::::contains()","31":"CollectionConstraintTest::::contains()","32":"CollectionConstraintTest::::contains()","33":"CollectionConstraintTest::::contains()","34":"CollectionConstraintTest::::contains()","35":"CollectionConstraintTest::::contains()","37":"CollectionConstraintTest::::fixedSize()","38":"CollectionConstraintTest::::fixedSize()","39":"CollectionConstraintTest::::fixedSize()","40":"CollectionConstraintTest::::fixedSize()","41":"CollectionConstraintTest::::fixedSize()","42":"CollectionConstraintTest::::fixedSize()","43":"CollectionConstraintTest::::fixedSize()","45":"CollectionConstraintTest::::greaterThan()","46":"CollectionConstraintTest::::greaterThan()","47":"CollectionConstraintTest::::greaterThan()","48":"CollectionConstraintTest::::greaterThan()","49":"CollectionConstraintTest::::greaterThan()","50":"CollectionConstraintTest::::greaterThan()","52":"CollectionConstraintTest::::greaterThanOrEqual()","53":"CollectionConstraintTest::::greaterThanOrEqual()","54":"CollectionConstraintTest::::greaterThanOrEqual()","55":"CollectionConstraintTest::::greaterThanOrEqual()","56":"CollectionConstraintTest::::greaterThanOrEqual()","57":"CollectionConstraintTest::::greaterThanOrEqual()","58":"CollectionConstraintTest::::greaterThanOrEqual()","59":"CollectionConstraintTest::::greaterThanOrEqual()","61":"CollectionConstraintTest::::lessThan()","62":"CollectionConstraintTest::::lessThan()","63":"CollectionConstraintTest::::lessThan()","64":"CollectionConstraintTest::::lessThan()","65":"CollectionConstraintTest::::lessThan()","66":"CollectionConstraintTest::::lessThan()","68":"CollectionConstraintTest::::lessThanOrEqual()","69":"CollectionConstraintTest::::lessThanOrEqual()","70":"CollectionConstraintTest::::lessThanOrEqual()","71":"CollectionConstraintTest::::lessThanOrEqual()","72":"CollectionConstraintTest::::lessThanOrEqual()","73":"CollectionConstraintTest::::lessThanOrEqual()","74":"CollectionConstraintTest::::lessThanOrEqual()","76":"CollectionConstraintTest::::notEmpty()","77":"CollectionConstraintTest::::notEmpty()","78":"CollectionConstraintTest::::notEmpty()","79":"CollectionConstraintTest::::notEmpty()","80":"CollectionConstraintTest::::notEmpty()","81":"CollectionConstraintTest::::notEmpty()","83":"CollectionConstraintTest::::unique()","84":"CollectionConstraintTest::::unique()","85":"CollectionConstraintTest::::unique()","86":"CollectionConstraintTest::::unique()","87":"CollectionConstraintTest::::unique()","88":"CollectionConstraintTest::::unique()"},"tests":[{"test_lines":[30,35],"covered_lines":[34,43,45],"label":"CollectionConstraint::::contains(E)"},{"test_lines":[37,43],"covered_lines":[34,39,75],"label":"CollectionConstraint::::size()"},{"test_lines":[45,50],"covered_lines":[34,39,75],"label":"CollectionConstraint::::size()"},{"test_lines":[52,59],"covered_lines":[34,39,75],"label":"CollectionConstraint::::size()"},{"test_lines":[61,66],"covered_lines":[34,39,75],"label":"CollectionConstraint::::size()"},{"test_lines":[68,74],"covered_lines":[34,39,75],"label":"CollectionConstraint::::size()"},{"test_lines":[76,81],"covered_lines":[34,39,75],"label":"CollectionConstraint::::size()"},{"test_lines":[83,88],"covered_lines":[34,52,53,54,55,56,57,60,62,63,64,67,70],"label":"CollectionConstraint::::unique()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/YearConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.Year;\n","\n","import am.ik.yavi.constraint.base.TemporalConstraintBase;\n","\n","/**\n"," * This is the actual class for constraints on Year.\n"," *\n"," * @since 0.11.0\n"," */\n","public class YearConstraint<T>\n","\t\textends TemporalConstraintBase<T, Year, YearConstraint<T>> {\n","\t@Override\n","\tprotected boolean isAfter(Year a, Year b) {\n","\t\treturn a.isAfter(b);\n","\t}\n","\n","\t@Override\n","\tprotected boolean isBefore(Year a, Year b) {\n","\t\treturn a.isBefore(b);\n","\t}\n","\n","\t@Override\n","\tprotected Year getNow(Clock clock) {\n","\t\treturn Year.now(clock);\n","\t}\n","\n","\t@Override\n","\tpublic YearConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.Instant;\n","import java.time.Year;\n","import java.time.ZoneId;\n","import java.time.temporal.ChronoUnit;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","import java.util.function.Supplier;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static java.time.temporal.ChronoField.YEAR;\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.Assertions.assertThatThrownBy;\n","\n","class YearConstraintTest {\n","\n","\t@Test\n","\tvoid isPastValid() {\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(Year.now().minus(60, ChronoUnit.YEARS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastInValid() {\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(Year.now().plus(60, ChronoUnit.YEARS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.past(clock));\n","\t\tassertThat(predicate.test(Year.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentValid() {\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(Year.now().minus(60, ChronoUnit.YEARS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentInValid() {\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(Year.now().plus(60, ChronoUnit.YEARS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.pastOrPresent(clock));\n","\t\tassertThat(predicate.test(Year.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureValid() {\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(Year.now().plus(60, ChronoUnit.YEARS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureInValid() {\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(Year.now().minus(60, ChronoUnit.YEARS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.future(clock));\n","\t\tassertThat(predicate.test(Year.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentValid() {\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(Year.now().plus(60, ChronoUnit.YEARS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentInValid() {\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(Year.now().minus(60, ChronoUnit.YEARS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.futureOrPresent(clock));\n","\t\tassertThat(predicate.test(Year.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeValid() {\n","\t\tYear now = Year.now();\n","\t\tPredicate<Year> predicate = retrievePredicate(\n","\t\t\t\tc -> c.before(() -> now.plusYears(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeInValid() {\n","\t\tYear now = Year.now();\n","\t\tYear past = now.minusYears(10);\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.before(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeExactInValid() {\n","\t\tYear now = Year.now();\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.before(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterInValid() {\n","\t\tYear now = Year.now();\n","\t\tPredicate<Year> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.plusYears(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterValid() {\n","\t\tYear now = Year.now();\n","\t\tPredicate<Year> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.minusYears(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterExactInValid() {\n","\t\tYear now = Year.now();\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.after(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualValid() {\n","\t\tYear now = Year.now();\n","\t\tPredicate<Year> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> now.plusYears(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualInValid() {\n","\t\tYear now = Year.now();\n","\t\tYear past = now.minusYears(10);\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.beforeOrEqual(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualExactInValid() {\n","\t\tYear now = Year.now();\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.beforeOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualInValid() {\n","\t\tYear now = Year.now();\n","\t\tPredicate<Year> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.plusYears(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualValid() {\n","\t\tYear now = Year.now();\n","\t\tPredicate<Year> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.minusYears(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualExactValid() {\n","\t\tYear now = Year.now();\n","\t\tPredicate<Year> predicate = retrievePredicate(c -> c.afterOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenExactInValid() {\n","\t\tYear now = Year.now();\n","\t\tSupplier<Year> nowSupplier = () -> now;\n","\n","\t\tPredicate<Year> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(nowSupplier, nowSupplier));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenInValidException() {\n","\t\tYear now = Year.now();\n","\n","\t\tPredicate<Year> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> now.plusYears(1), () -> now.minusYears(1)));\n","\t\tassertThatThrownBy(() -> predicate.test(now))\n","\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n","\t\t\t\t.hasMessageContaining(\"Parameter 'rangeFrom' has to be before 'rangeTo'\");\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldValid() {\n","\t\tPredicate<Year> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(YEAR, s -> s >= 0));\n","\t\tassertThat(predicate.test(Year.of(999_999_999))).isTrue();\n","\t}\n","\n","\tprivate static Predicate<Year> retrievePredicate(\n","\t\t\tFunction<YearConstraint<Year>, YearConstraint<Year>> constraint) {\n","\t\treturn constraint.apply(new YearConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"YearConstraint::::isAfter(java.time.Year,java.time.Year)":[30,33],"YearConstraint::::isBefore(java.time.Year,java.time.Year)":[35,38],"YearConstraint::::getNow(java.time.Clock)":[40,43],"YearConstraint::::cast()":[45,48]},"test_method_lines_dic":{"YearConstraintTest::::isPastValid()":[35,39],"YearConstraintTest::::isPastInValid()":[41,45],"YearConstraintTest::::isPastExactInValid()":[47,52],"YearConstraintTest::::isPastOrPresentValid()":[54,58],"YearConstraintTest::::isPastOrPresentInValid()":[60,64],"YearConstraintTest::::isPastOrPresentExactInValid()":[66,71],"YearConstraintTest::::isFutureValid()":[73,77],"YearConstraintTest::::isFutureInValid()":[79,83],"YearConstraintTest::::isFutureExactInValid()":[85,90],"YearConstraintTest::::isFutureOrPresentValid()":[92,96],"YearConstraintTest::::isFutureOrPresentInValid()":[98,102],"YearConstraintTest::::isFutureOrPresentExactInValid()":[104,109],"YearConstraintTest::::isBeforeValid()":[111,117],"YearConstraintTest::::isBeforeInValid()":[119,125],"YearConstraintTest::::isBeforeExactInValid()":[127,132],"YearConstraintTest::::isAfterInValid()":[134,140],"YearConstraintTest::::isAfterValid()":[142,148],"YearConstraintTest::::isAfterExactInValid()":[150,155],"YearConstraintTest::::isBeforeOrEqualValid()":[157,163],"YearConstraintTest::::isBeforeOrEqualInValid()":[165,171],"YearConstraintTest::::isBeforeOrEqualExactInValid()":[173,178],"YearConstraintTest::::isAfterOrEqualInValid()":[180,186],"YearConstraintTest::::isAfterOrEqualValid()":[188,194],"YearConstraintTest::::isAfterOrEqualExactValid()":[196,201],"YearConstraintTest::::isBetweenExactInValid()":[203,211],"YearConstraintTest::::isBetweenInValidException()":[213,222],"YearConstraintTest::::temporalFieldValid()":[224,229]},"reverse_method_lines_dic":{"30":"YearConstraint::::isAfter(java.time.Year,java.time.Year)","31":"YearConstraint::::isAfter(java.time.Year,java.time.Year)","32":"YearConstraint::::isAfter(java.time.Year,java.time.Year)","33":"YearConstraint::::isAfter(java.time.Year,java.time.Year)","35":"YearConstraint::::isBefore(java.time.Year,java.time.Year)","36":"YearConstraint::::isBefore(java.time.Year,java.time.Year)","37":"YearConstraint::::isBefore(java.time.Year,java.time.Year)","38":"YearConstraint::::isBefore(java.time.Year,java.time.Year)","40":"YearConstraint::::getNow(java.time.Clock)","41":"YearConstraint::::getNow(java.time.Clock)","42":"YearConstraint::::getNow(java.time.Clock)","43":"YearConstraint::::getNow(java.time.Clock)","45":"YearConstraint::::cast()","46":"YearConstraint::::cast()","47":"YearConstraint::::cast()","48":"YearConstraint::::cast()"},"test_reverse_method_lines_dic":{"35":"YearConstraintTest::::isPastValid()","36":"YearConstraintTest::::isPastValid()","37":"YearConstraintTest::::isPastValid()","38":"YearConstraintTest::::isPastValid()","39":"YearConstraintTest::::isPastValid()","41":"YearConstraintTest::::isPastInValid()","42":"YearConstraintTest::::isPastInValid()","43":"YearConstraintTest::::isPastInValid()","44":"YearConstraintTest::::isPastInValid()","45":"YearConstraintTest::::isPastInValid()","47":"YearConstraintTest::::isPastExactInValid()","48":"YearConstraintTest::::isPastExactInValid()","49":"YearConstraintTest::::isPastExactInValid()","50":"YearConstraintTest::::isPastExactInValid()","51":"YearConstraintTest::::isPastExactInValid()","52":"YearConstraintTest::::isPastExactInValid()","54":"YearConstraintTest::::isPastOrPresentValid()","55":"YearConstraintTest::::isPastOrPresentValid()","56":"YearConstraintTest::::isPastOrPresentValid()","57":"YearConstraintTest::::isPastOrPresentValid()","58":"YearConstraintTest::::isPastOrPresentValid()","60":"YearConstraintTest::::isPastOrPresentInValid()","61":"YearConstraintTest::::isPastOrPresentInValid()","62":"YearConstraintTest::::isPastOrPresentInValid()","63":"YearConstraintTest::::isPastOrPresentInValid()","64":"YearConstraintTest::::isPastOrPresentInValid()","66":"YearConstraintTest::::isPastOrPresentExactInValid()","67":"YearConstraintTest::::isPastOrPresentExactInValid()","68":"YearConstraintTest::::isPastOrPresentExactInValid()","69":"YearConstraintTest::::isPastOrPresentExactInValid()","70":"YearConstraintTest::::isPastOrPresentExactInValid()","71":"YearConstraintTest::::isPastOrPresentExactInValid()","73":"YearConstraintTest::::isFutureValid()","74":"YearConstraintTest::::isFutureValid()","75":"YearConstraintTest::::isFutureValid()","76":"YearConstraintTest::::isFutureValid()","77":"YearConstraintTest::::isFutureValid()","79":"YearConstraintTest::::isFutureInValid()","80":"YearConstraintTest::::isFutureInValid()","81":"YearConstraintTest::::isFutureInValid()","82":"YearConstraintTest::::isFutureInValid()","83":"YearConstraintTest::::isFutureInValid()","85":"YearConstraintTest::::isFutureExactInValid()","86":"YearConstraintTest::::isFutureExactInValid()","87":"YearConstraintTest::::isFutureExactInValid()","88":"YearConstraintTest::::isFutureExactInValid()","89":"YearConstraintTest::::isFutureExactInValid()","90":"YearConstraintTest::::isFutureExactInValid()","92":"YearConstraintTest::::isFutureOrPresentValid()","93":"YearConstraintTest::::isFutureOrPresentValid()","94":"YearConstraintTest::::isFutureOrPresentValid()","95":"YearConstraintTest::::isFutureOrPresentValid()","96":"YearConstraintTest::::isFutureOrPresentValid()","98":"YearConstraintTest::::isFutureOrPresentInValid()","99":"YearConstraintTest::::isFutureOrPresentInValid()","100":"YearConstraintTest::::isFutureOrPresentInValid()","101":"YearConstraintTest::::isFutureOrPresentInValid()","102":"YearConstraintTest::::isFutureOrPresentInValid()","104":"YearConstraintTest::::isFutureOrPresentExactInValid()","105":"YearConstraintTest::::isFutureOrPresentExactInValid()","106":"YearConstraintTest::::isFutureOrPresentExactInValid()","107":"YearConstraintTest::::isFutureOrPresentExactInValid()","108":"YearConstraintTest::::isFutureOrPresentExactInValid()","109":"YearConstraintTest::::isFutureOrPresentExactInValid()","111":"YearConstraintTest::::isBeforeValid()","112":"YearConstraintTest::::isBeforeValid()","113":"YearConstraintTest::::isBeforeValid()","114":"YearConstraintTest::::isBeforeValid()","115":"YearConstraintTest::::isBeforeValid()","116":"YearConstraintTest::::isBeforeValid()","117":"YearConstraintTest::::isBeforeValid()","119":"YearConstraintTest::::isBeforeInValid()","120":"YearConstraintTest::::isBeforeInValid()","121":"YearConstraintTest::::isBeforeInValid()","122":"YearConstraintTest::::isBeforeInValid()","123":"YearConstraintTest::::isBeforeInValid()","124":"YearConstraintTest::::isBeforeInValid()","125":"YearConstraintTest::::isBeforeInValid()","127":"YearConstraintTest::::isBeforeExactInValid()","128":"YearConstraintTest::::isBeforeExactInValid()","129":"YearConstraintTest::::isBeforeExactInValid()","130":"YearConstraintTest::::isBeforeExactInValid()","131":"YearConstraintTest::::isBeforeExactInValid()","132":"YearConstraintTest::::isBeforeExactInValid()","134":"YearConstraintTest::::isAfterInValid()","135":"YearConstraintTest::::isAfterInValid()","136":"YearConstraintTest::::isAfterInValid()","137":"YearConstraintTest::::isAfterInValid()","138":"YearConstraintTest::::isAfterInValid()","139":"YearConstraintTest::::isAfterInValid()","140":"YearConstraintTest::::isAfterInValid()","142":"YearConstraintTest::::isAfterValid()","143":"YearConstraintTest::::isAfterValid()","144":"YearConstraintTest::::isAfterValid()","145":"YearConstraintTest::::isAfterValid()","146":"YearConstraintTest::::isAfterValid()","147":"YearConstraintTest::::isAfterValid()","148":"YearConstraintTest::::isAfterValid()","150":"YearConstraintTest::::isAfterExactInValid()","151":"YearConstraintTest::::isAfterExactInValid()","152":"YearConstraintTest::::isAfterExactInValid()","153":"YearConstraintTest::::isAfterExactInValid()","154":"YearConstraintTest::::isAfterExactInValid()","155":"YearConstraintTest::::isAfterExactInValid()","157":"YearConstraintTest::::isBeforeOrEqualValid()","158":"YearConstraintTest::::isBeforeOrEqualValid()","159":"YearConstraintTest::::isBeforeOrEqualValid()","160":"YearConstraintTest::::isBeforeOrEqualValid()","161":"YearConstraintTest::::isBeforeOrEqualValid()","162":"YearConstraintTest::::isBeforeOrEqualValid()","163":"YearConstraintTest::::isBeforeOrEqualValid()","165":"YearConstraintTest::::isBeforeOrEqualInValid()","166":"YearConstraintTest::::isBeforeOrEqualInValid()","167":"YearConstraintTest::::isBeforeOrEqualInValid()","168":"YearConstraintTest::::isBeforeOrEqualInValid()","169":"YearConstraintTest::::isBeforeOrEqualInValid()","170":"YearConstraintTest::::isBeforeOrEqualInValid()","171":"YearConstraintTest::::isBeforeOrEqualInValid()","173":"YearConstraintTest::::isBeforeOrEqualExactInValid()","174":"YearConstraintTest::::isBeforeOrEqualExactInValid()","175":"YearConstraintTest::::isBeforeOrEqualExactInValid()","176":"YearConstraintTest::::isBeforeOrEqualExactInValid()","177":"YearConstraintTest::::isBeforeOrEqualExactInValid()","178":"YearConstraintTest::::isBeforeOrEqualExactInValid()","180":"YearConstraintTest::::isAfterOrEqualInValid()","181":"YearConstraintTest::::isAfterOrEqualInValid()","182":"YearConstraintTest::::isAfterOrEqualInValid()","183":"YearConstraintTest::::isAfterOrEqualInValid()","184":"YearConstraintTest::::isAfterOrEqualInValid()","185":"YearConstraintTest::::isAfterOrEqualInValid()","186":"YearConstraintTest::::isAfterOrEqualInValid()","188":"YearConstraintTest::::isAfterOrEqualValid()","189":"YearConstraintTest::::isAfterOrEqualValid()","190":"YearConstraintTest::::isAfterOrEqualValid()","191":"YearConstraintTest::::isAfterOrEqualValid()","192":"YearConstraintTest::::isAfterOrEqualValid()","193":"YearConstraintTest::::isAfterOrEqualValid()","194":"YearConstraintTest::::isAfterOrEqualValid()","196":"YearConstraintTest::::isAfterOrEqualExactValid()","197":"YearConstraintTest::::isAfterOrEqualExactValid()","198":"YearConstraintTest::::isAfterOrEqualExactValid()","199":"YearConstraintTest::::isAfterOrEqualExactValid()","200":"YearConstraintTest::::isAfterOrEqualExactValid()","201":"YearConstraintTest::::isAfterOrEqualExactValid()","203":"YearConstraintTest::::isBetweenExactInValid()","204":"YearConstraintTest::::isBetweenExactInValid()","205":"YearConstraintTest::::isBetweenExactInValid()","206":"YearConstraintTest::::isBetweenExactInValid()","207":"YearConstraintTest::::isBetweenExactInValid()","208":"YearConstraintTest::::isBetweenExactInValid()","209":"YearConstraintTest::::isBetweenExactInValid()","210":"YearConstraintTest::::isBetweenExactInValid()","211":"YearConstraintTest::::isBetweenExactInValid()","213":"YearConstraintTest::::isBetweenInValidException()","214":"YearConstraintTest::::isBetweenInValidException()","215":"YearConstraintTest::::isBetweenInValidException()","216":"YearConstraintTest::::isBetweenInValidException()","217":"YearConstraintTest::::isBetweenInValidException()","218":"YearConstraintTest::::isBetweenInValidException()","219":"YearConstraintTest::::isBetweenInValidException()","220":"YearConstraintTest::::isBetweenInValidException()","221":"YearConstraintTest::::isBetweenInValidException()","222":"YearConstraintTest::::isBetweenInValidException()","224":"YearConstraintTest::::temporalFieldValid()","225":"YearConstraintTest::::temporalFieldValid()","226":"YearConstraintTest::::temporalFieldValid()","227":"YearConstraintTest::::temporalFieldValid()","228":"YearConstraintTest::::temporalFieldValid()","229":"YearConstraintTest::::temporalFieldValid()"},"tests":[{"test_lines":[35,39],"covered_lines":[28,37,42,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[41,45],"covered_lines":[28,37,42,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[47,52],"covered_lines":[28,37,42,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[54,58],"covered_lines":[28,32,42,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[60,64],"covered_lines":[28,32,42,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[66,71],"covered_lines":[28,32,42,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[73,77],"covered_lines":[28,32,42,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[79,83],"covered_lines":[28,32,42,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[85,90],"covered_lines":[28,32,42,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[92,96],"covered_lines":[28,37,42,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[98,102],"covered_lines":[28,37,42,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[104,109],"covered_lines":[28,37,42,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[111,117],"covered_lines":[28,37,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[119,125],"covered_lines":[28,37,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[127,132],"covered_lines":[28,37,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[134,140],"covered_lines":[28,32,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[142,148],"covered_lines":[28,32,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[150,155],"covered_lines":[28,32,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[157,163],"covered_lines":[28,32,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[165,171],"covered_lines":[28,32,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[173,178],"covered_lines":[28,32,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[180,186],"covered_lines":[28,37,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[188,194],"covered_lines":[28,37,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[196,201],"covered_lines":[28,37,47],"label":"YearConstraint::::isBefore(java.time.Year,java.time.Year)"},{"test_lines":[203,211],"covered_lines":[28,32,37,47],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[213,222],"covered_lines":[28,32,47],"label":"YearConstraint::::isAfter(java.time.Year,java.time.Year)"},{"test_lines":[224,229],"covered_lines":[28,47],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/ShortConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.function.Predicate;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","\n","public class ShortConstraint<T>\n","\t\textends NumericConstraintBase<T, Short, ShortConstraint<T>> {\n","\t@Override\n","\tpublic ShortConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Short> isGreaterThan(Short min) {\n","\t\treturn x -> x > min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Short> isGreaterThanOrEqual(Short min) {\n","\t\treturn x -> x >= min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Short> isLessThan(Short max) {\n","\t\treturn x -> x < max;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Short> isLessThanOrEqual(Short max) {\n","\t\treturn x -> x <= max;\n","\t}\n","\n","\t@Override\n","\tprotected Short zeroValue() {\n","\t\treturn 0;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.ValueSource;\n","\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class ShortConstraintTest {\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 101, 150 })\n","\tvoid validGreaterThan(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(c -> c.greaterThan((short) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 100, -50 })\n","\tvoid invalidGreaterThan(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(c -> c.greaterThan((short) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 101, 100 })\n","\tvoid validGreaterThanOrEqual(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual((short) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 99, -50 })\n","\tvoid invalidGreaterThanOrEqual(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual((short) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 99, -50 })\n","\tvoid validLessThan(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(c -> c.lessThan((short) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 100, 150 })\n","\tvoid invalidLessThan(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(c -> c.lessThan((short) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 99, 100 })\n","\tvoid validLessThanOrEqual(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThanOrEqual((short) 100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 101, 150 })\n","\tvoid invalidLessThanOrEqual(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThanOrEqual((short) 100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 101, 10 })\n","\tvoid validPositive(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { -101, -10, 0 })\n","\tvoid invalidPositive(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 9, 100, 0 })\n","\tvoid invalidNegative(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { -100, -10 })\n","\tvoid validNegative(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 99, 100, 0 })\n","\tvoid validPositiveOrZero(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { -101, -12 })\n","\tvoid invalidPositiveOrZero(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 99, 100 })\n","\tvoid invalidNegaitveOrZero(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { -101, -120, 0 })\n","\tvoid validNegaitveOrZero(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { 99, 100 })\n","\tvoid invalidNegativeOrZero(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(shorts = { -101, -120, 0 })\n","\tvoid validNegativeOrZero(short value) {\n","\t\tPredicate<Short> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\tprivate static Predicate<Short> retrievePredicate(\n","\t\t\tFunction<ShortConstraint<Short>, ShortConstraint<Short>> constraint) {\n","\t\treturn constraint.apply(new ShortConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"ShortConstraint::::cast()":[24,27],"ShortConstraint::::isGreaterThan(java.lang.Short)":[29,32],"ShortConstraint::::isGreaterThanOrEqual(java.lang.Short)":[34,37],"ShortConstraint::::isLessThan(java.lang.Short)":[39,42],"ShortConstraint::::isLessThanOrEqual(java.lang.Short)":[44,47],"ShortConstraint::::zeroValue()":[49,52]},"test_method_lines_dic":{"ShortConstraintTest::::validGreaterThan(short)":[29,34],"ShortConstraintTest::::invalidGreaterThan(short)":[36,41],"ShortConstraintTest::::validGreaterThanOrEqual(short)":[43,49],"ShortConstraintTest::::invalidGreaterThanOrEqual(short)":[51,57],"ShortConstraintTest::::validLessThan(short)":[59,64],"ShortConstraintTest::::invalidLessThan(short)":[66,71],"ShortConstraintTest::::validLessThanOrEqual(short)":[73,79],"ShortConstraintTest::::invalidLessThanOrEqual(short)":[81,87],"ShortConstraintTest::::validPositive(short)":[89,94],"ShortConstraintTest::::invalidPositive(short)":[96,101],"ShortConstraintTest::::invalidNegative(short)":[103,108],"ShortConstraintTest::::validNegative(short)":[110,115],"ShortConstraintTest::::validPositiveOrZero(short)":[117,123],"ShortConstraintTest::::invalidPositiveOrZero(short)":[125,131],"ShortConstraintTest::::invalidNegaitveOrZero(short)":[133,139],"ShortConstraintTest::::validNegaitveOrZero(short)":[141,147],"ShortConstraintTest::::invalidNegativeOrZero(short)":[149,155],"ShortConstraintTest::::validNegativeOrZero(short)":[157,163]},"reverse_method_lines_dic":{"24":"ShortConstraint::::cast()","25":"ShortConstraint::::cast()","26":"ShortConstraint::::cast()","27":"ShortConstraint::::cast()","29":"ShortConstraint::::isGreaterThan(java.lang.Short)","30":"ShortConstraint::::isGreaterThan(java.lang.Short)","31":"ShortConstraint::::isGreaterThan(java.lang.Short)","32":"ShortConstraint::::isGreaterThan(java.lang.Short)","34":"ShortConstraint::::isGreaterThanOrEqual(java.lang.Short)","35":"ShortConstraint::::isGreaterThanOrEqual(java.lang.Short)","36":"ShortConstraint::::isGreaterThanOrEqual(java.lang.Short)","37":"ShortConstraint::::isGreaterThanOrEqual(java.lang.Short)","39":"ShortConstraint::::isLessThan(java.lang.Short)","40":"ShortConstraint::::isLessThan(java.lang.Short)","41":"ShortConstraint::::isLessThan(java.lang.Short)","42":"ShortConstraint::::isLessThan(java.lang.Short)","44":"ShortConstraint::::isLessThanOrEqual(java.lang.Short)","45":"ShortConstraint::::isLessThanOrEqual(java.lang.Short)","46":"ShortConstraint::::isLessThanOrEqual(java.lang.Short)","47":"ShortConstraint::::isLessThanOrEqual(java.lang.Short)","49":"ShortConstraint::::zeroValue()","50":"ShortConstraint::::zeroValue()","51":"ShortConstraint::::zeroValue()","52":"ShortConstraint::::zeroValue()"},"test_reverse_method_lines_dic":{"29":"ShortConstraintTest::::validGreaterThan(short)","30":"ShortConstraintTest::::validGreaterThan(short)","31":"ShortConstraintTest::::validGreaterThan(short)","32":"ShortConstraintTest::::validGreaterThan(short)","33":"ShortConstraintTest::::validGreaterThan(short)","34":"ShortConstraintTest::::validGreaterThan(short)","36":"ShortConstraintTest::::invalidGreaterThan(short)","37":"ShortConstraintTest::::invalidGreaterThan(short)","38":"ShortConstraintTest::::invalidGreaterThan(short)","39":"ShortConstraintTest::::invalidGreaterThan(short)","40":"ShortConstraintTest::::invalidGreaterThan(short)","41":"ShortConstraintTest::::invalidGreaterThan(short)","43":"ShortConstraintTest::::validGreaterThanOrEqual(short)","44":"ShortConstraintTest::::validGreaterThanOrEqual(short)","45":"ShortConstraintTest::::validGreaterThanOrEqual(short)","46":"ShortConstraintTest::::validGreaterThanOrEqual(short)","47":"ShortConstraintTest::::validGreaterThanOrEqual(short)","48":"ShortConstraintTest::::validGreaterThanOrEqual(short)","49":"ShortConstraintTest::::validGreaterThanOrEqual(short)","51":"ShortConstraintTest::::invalidGreaterThanOrEqual(short)","52":"ShortConstraintTest::::invalidGreaterThanOrEqual(short)","53":"ShortConstraintTest::::invalidGreaterThanOrEqual(short)","54":"ShortConstraintTest::::invalidGreaterThanOrEqual(short)","55":"ShortConstraintTest::::invalidGreaterThanOrEqual(short)","56":"ShortConstraintTest::::invalidGreaterThanOrEqual(short)","57":"ShortConstraintTest::::invalidGreaterThanOrEqual(short)","59":"ShortConstraintTest::::validLessThan(short)","60":"ShortConstraintTest::::validLessThan(short)","61":"ShortConstraintTest::::validLessThan(short)","62":"ShortConstraintTest::::validLessThan(short)","63":"ShortConstraintTest::::validLessThan(short)","64":"ShortConstraintTest::::validLessThan(short)","66":"ShortConstraintTest::::invalidLessThan(short)","67":"ShortConstraintTest::::invalidLessThan(short)","68":"ShortConstraintTest::::invalidLessThan(short)","69":"ShortConstraintTest::::invalidLessThan(short)","70":"ShortConstraintTest::::invalidLessThan(short)","71":"ShortConstraintTest::::invalidLessThan(short)","73":"ShortConstraintTest::::validLessThanOrEqual(short)","74":"ShortConstraintTest::::validLessThanOrEqual(short)","75":"ShortConstraintTest::::validLessThanOrEqual(short)","76":"ShortConstraintTest::::validLessThanOrEqual(short)","77":"ShortConstraintTest::::validLessThanOrEqual(short)","78":"ShortConstraintTest::::validLessThanOrEqual(short)","79":"ShortConstraintTest::::validLessThanOrEqual(short)","81":"ShortConstraintTest::::invalidLessThanOrEqual(short)","82":"ShortConstraintTest::::invalidLessThanOrEqual(short)","83":"ShortConstraintTest::::invalidLessThanOrEqual(short)","84":"ShortConstraintTest::::invalidLessThanOrEqual(short)","85":"ShortConstraintTest::::invalidLessThanOrEqual(short)","86":"ShortConstraintTest::::invalidLessThanOrEqual(short)","87":"ShortConstraintTest::::invalidLessThanOrEqual(short)","89":"ShortConstraintTest::::validPositive(short)","90":"ShortConstraintTest::::validPositive(short)","91":"ShortConstraintTest::::validPositive(short)","92":"ShortConstraintTest::::validPositive(short)","93":"ShortConstraintTest::::validPositive(short)","94":"ShortConstraintTest::::validPositive(short)","96":"ShortConstraintTest::::invalidPositive(short)","97":"ShortConstraintTest::::invalidPositive(short)","98":"ShortConstraintTest::::invalidPositive(short)","99":"ShortConstraintTest::::invalidPositive(short)","100":"ShortConstraintTest::::invalidPositive(short)","101":"ShortConstraintTest::::invalidPositive(short)","103":"ShortConstraintTest::::invalidNegative(short)","104":"ShortConstraintTest::::invalidNegative(short)","105":"ShortConstraintTest::::invalidNegative(short)","106":"ShortConstraintTest::::invalidNegative(short)","107":"ShortConstraintTest::::invalidNegative(short)","108":"ShortConstraintTest::::invalidNegative(short)","110":"ShortConstraintTest::::validNegative(short)","111":"ShortConstraintTest::::validNegative(short)","112":"ShortConstraintTest::::validNegative(short)","113":"ShortConstraintTest::::validNegative(short)","114":"ShortConstraintTest::::validNegative(short)","115":"ShortConstraintTest::::validNegative(short)","117":"ShortConstraintTest::::validPositiveOrZero(short)","118":"ShortConstraintTest::::validPositiveOrZero(short)","119":"ShortConstraintTest::::validPositiveOrZero(short)","120":"ShortConstraintTest::::validPositiveOrZero(short)","121":"ShortConstraintTest::::validPositiveOrZero(short)","122":"ShortConstraintTest::::validPositiveOrZero(short)","123":"ShortConstraintTest::::validPositiveOrZero(short)","125":"ShortConstraintTest::::invalidPositiveOrZero(short)","126":"ShortConstraintTest::::invalidPositiveOrZero(short)","127":"ShortConstraintTest::::invalidPositiveOrZero(short)","128":"ShortConstraintTest::::invalidPositiveOrZero(short)","129":"ShortConstraintTest::::invalidPositiveOrZero(short)","130":"ShortConstraintTest::::invalidPositiveOrZero(short)","131":"ShortConstraintTest::::invalidPositiveOrZero(short)","133":"ShortConstraintTest::::invalidNegaitveOrZero(short)","134":"ShortConstraintTest::::invalidNegaitveOrZero(short)","135":"ShortConstraintTest::::invalidNegaitveOrZero(short)","136":"ShortConstraintTest::::invalidNegaitveOrZero(short)","137":"ShortConstraintTest::::invalidNegaitveOrZero(short)","138":"ShortConstraintTest::::invalidNegaitveOrZero(short)","139":"ShortConstraintTest::::invalidNegaitveOrZero(short)","141":"ShortConstraintTest::::validNegaitveOrZero(short)","142":"ShortConstraintTest::::validNegaitveOrZero(short)","143":"ShortConstraintTest::::validNegaitveOrZero(short)","144":"ShortConstraintTest::::validNegaitveOrZero(short)","145":"ShortConstraintTest::::validNegaitveOrZero(short)","146":"ShortConstraintTest::::validNegaitveOrZero(short)","147":"ShortConstraintTest::::validNegaitveOrZero(short)","149":"ShortConstraintTest::::invalidNegativeOrZero(short)","150":"ShortConstraintTest::::invalidNegativeOrZero(short)","151":"ShortConstraintTest::::invalidNegativeOrZero(short)","152":"ShortConstraintTest::::invalidNegativeOrZero(short)","153":"ShortConstraintTest::::invalidNegativeOrZero(short)","154":"ShortConstraintTest::::invalidNegativeOrZero(short)","155":"ShortConstraintTest::::invalidNegativeOrZero(short)","157":"ShortConstraintTest::::validNegativeOrZero(short)","158":"ShortConstraintTest::::validNegativeOrZero(short)","159":"ShortConstraintTest::::validNegativeOrZero(short)","160":"ShortConstraintTest::::validNegativeOrZero(short)","161":"ShortConstraintTest::::validNegativeOrZero(short)","162":"ShortConstraintTest::::validNegativeOrZero(short)","163":"ShortConstraintTest::::validNegativeOrZero(short)"},"tests":[{"test_lines":[29,34],"covered_lines":[22,26,31],"label":"ShortConstraint::::isGreaterThan(java.lang.Short)"},{"test_lines":[36,41],"covered_lines":[22,26,31],"label":"ShortConstraint::::isGreaterThan(java.lang.Short)"},{"test_lines":[43,49],"covered_lines":[22,26,36],"label":"ShortConstraint::::isGreaterThanOrEqual(java.lang.Short)"},{"test_lines":[51,57],"covered_lines":[22,26,36],"label":"ShortConstraint::::isGreaterThanOrEqual(java.lang.Short)"},{"test_lines":[59,64],"covered_lines":[22,26,41],"label":"ShortConstraint::::isLessThan(java.lang.Short)"},{"test_lines":[66,71],"covered_lines":[22,26,41],"label":"ShortConstraint::::isLessThan(java.lang.Short)"},{"test_lines":[73,79],"covered_lines":[22,26,46],"label":"ShortConstraint::::isLessThanOrEqual(java.lang.Short)"},{"test_lines":[81,87],"covered_lines":[22,26,46],"label":"ShortConstraint::::isLessThanOrEqual(java.lang.Short)"},{"test_lines":[89,94],"covered_lines":[22,26,31,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[96,101],"covered_lines":[22,26,31,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[103,108],"covered_lines":[22,26,41,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[110,115],"covered_lines":[22,26,41,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[117,123],"covered_lines":[22,26,36,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[125,131],"covered_lines":[22,26,36,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[133,139],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[141,147],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[149,155],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[157,163],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/LongConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.function.Predicate;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","\n","public class LongConstraint<T> extends NumericConstraintBase<T, Long, LongConstraint<T>> {\n","\t@Override\n","\tpublic LongConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Long> isGreaterThan(Long min) {\n","\t\treturn x -> x > min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Long> isGreaterThanOrEqual(Long min) {\n","\t\treturn x -> x >= min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Long> isLessThan(Long max) {\n","\t\treturn x -> x < max;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Long> isLessThanOrEqual(Long max) {\n","\t\treturn x -> x <= max;\n","\t}\n","\n","\t@Override\n","\tprotected Long zeroValue() {\n","\t\treturn 0L;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.ValueSource;\n","\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class LongConstraintTest {\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 101L, 150L })\n","\tvoid validGreaterThan(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(c -> c.greaterThan(100L));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 100L, -50L })\n","\tvoid invalidGreaterThan(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(c -> c.greaterThan(100L));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 101L, 100L })\n","\tvoid validGreaterThanOrEqual(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(c -> c.greaterThanOrEqual(100L));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 99L, -50L })\n","\tvoid invalidGreaterThanOrEqual(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(c -> c.greaterThanOrEqual(100L));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 99L, -50L })\n","\tvoid validLessThan(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(c -> c.lessThan(100L));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 100L, 150L })\n","\tvoid invalidLessThan(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(c -> c.lessThan(100L));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 99L, 100L })\n","\tvoid validLessThanOrEqual(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(c -> c.lessThanOrEqual(100L));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 101L, 150L })\n","\tvoid invalidLessThanOrEqual(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(c -> c.lessThanOrEqual(100L));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 101L, 150L })\n","\tvoid validPositive(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { -101L, -150L, 0L })\n","\tvoid invalidPositive(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 9L, 100L, 0L })\n","\tvoid invalidNegative(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { -100L, -10L })\n","\tvoid validNegative(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 99, 100, 0 })\n","\tvoid validPositiveOrZero(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { -101, -12 })\n","\tvoid invalidPositiveOrZero(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 99, 100 })\n","\tvoid invalidNegaitveOrZero(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { -101, -120, 0 })\n","\tvoid validNegaitveOrZero(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { 99, 100 })\n","\tvoid invalidNegativeOrZero(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(longs = { -101, -120, 0 })\n","\tvoid validNegativeOrZero(long value) {\n","\t\tPredicate<Long> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\tprivate static Predicate<Long> retrievePredicate(\n","\t\t\tFunction<LongConstraint<Long>, LongConstraint<Long>> constraint) {\n","\t\treturn constraint.apply(new LongConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"LongConstraint::::cast()":[23,26],"LongConstraint::::isGreaterThan(java.lang.Long)":[28,31],"LongConstraint::::isGreaterThanOrEqual(java.lang.Long)":[33,36],"LongConstraint::::isLessThan(java.lang.Long)":[38,41],"LongConstraint::::isLessThanOrEqual(java.lang.Long)":[43,46],"LongConstraint::::zeroValue()":[48,51]},"test_method_lines_dic":{"LongConstraintTest::::validGreaterThan(long)":[29,34],"LongConstraintTest::::invalidGreaterThan(long)":[36,41],"LongConstraintTest::::validGreaterThanOrEqual(long)":[43,48],"LongConstraintTest::::invalidGreaterThanOrEqual(long)":[50,55],"LongConstraintTest::::validLessThan(long)":[57,62],"LongConstraintTest::::invalidLessThan(long)":[64,69],"LongConstraintTest::::validLessThanOrEqual(long)":[71,76],"LongConstraintTest::::invalidLessThanOrEqual(long)":[78,83],"LongConstraintTest::::validPositive(long)":[85,90],"LongConstraintTest::::invalidPositive(long)":[92,97],"LongConstraintTest::::invalidNegative(long)":[99,104],"LongConstraintTest::::validNegative(long)":[106,111],"LongConstraintTest::::validPositiveOrZero(long)":[113,119],"LongConstraintTest::::invalidPositiveOrZero(long)":[121,127],"LongConstraintTest::::invalidNegaitveOrZero(long)":[129,135],"LongConstraintTest::::validNegaitveOrZero(long)":[137,143],"LongConstraintTest::::invalidNegativeOrZero(long)":[145,151],"LongConstraintTest::::validNegativeOrZero(long)":[153,159]},"reverse_method_lines_dic":{"23":"LongConstraint::::cast()","24":"LongConstraint::::cast()","25":"LongConstraint::::cast()","26":"LongConstraint::::cast()","28":"LongConstraint::::isGreaterThan(java.lang.Long)","29":"LongConstraint::::isGreaterThan(java.lang.Long)","30":"LongConstraint::::isGreaterThan(java.lang.Long)","31":"LongConstraint::::isGreaterThan(java.lang.Long)","33":"LongConstraint::::isGreaterThanOrEqual(java.lang.Long)","34":"LongConstraint::::isGreaterThanOrEqual(java.lang.Long)","35":"LongConstraint::::isGreaterThanOrEqual(java.lang.Long)","36":"LongConstraint::::isGreaterThanOrEqual(java.lang.Long)","38":"LongConstraint::::isLessThan(java.lang.Long)","39":"LongConstraint::::isLessThan(java.lang.Long)","40":"LongConstraint::::isLessThan(java.lang.Long)","41":"LongConstraint::::isLessThan(java.lang.Long)","43":"LongConstraint::::isLessThanOrEqual(java.lang.Long)","44":"LongConstraint::::isLessThanOrEqual(java.lang.Long)","45":"LongConstraint::::isLessThanOrEqual(java.lang.Long)","46":"LongConstraint::::isLessThanOrEqual(java.lang.Long)","48":"LongConstraint::::zeroValue()","49":"LongConstraint::::zeroValue()","50":"LongConstraint::::zeroValue()","51":"LongConstraint::::zeroValue()"},"test_reverse_method_lines_dic":{"29":"LongConstraintTest::::validGreaterThan(long)","30":"LongConstraintTest::::validGreaterThan(long)","31":"LongConstraintTest::::validGreaterThan(long)","32":"LongConstraintTest::::validGreaterThan(long)","33":"LongConstraintTest::::validGreaterThan(long)","34":"LongConstraintTest::::validGreaterThan(long)","36":"LongConstraintTest::::invalidGreaterThan(long)","37":"LongConstraintTest::::invalidGreaterThan(long)","38":"LongConstraintTest::::invalidGreaterThan(long)","39":"LongConstraintTest::::invalidGreaterThan(long)","40":"LongConstraintTest::::invalidGreaterThan(long)","41":"LongConstraintTest::::invalidGreaterThan(long)","43":"LongConstraintTest::::validGreaterThanOrEqual(long)","44":"LongConstraintTest::::validGreaterThanOrEqual(long)","45":"LongConstraintTest::::validGreaterThanOrEqual(long)","46":"LongConstraintTest::::validGreaterThanOrEqual(long)","47":"LongConstraintTest::::validGreaterThanOrEqual(long)","48":"LongConstraintTest::::validGreaterThanOrEqual(long)","50":"LongConstraintTest::::invalidGreaterThanOrEqual(long)","51":"LongConstraintTest::::invalidGreaterThanOrEqual(long)","52":"LongConstraintTest::::invalidGreaterThanOrEqual(long)","53":"LongConstraintTest::::invalidGreaterThanOrEqual(long)","54":"LongConstraintTest::::invalidGreaterThanOrEqual(long)","55":"LongConstraintTest::::invalidGreaterThanOrEqual(long)","57":"LongConstraintTest::::validLessThan(long)","58":"LongConstraintTest::::validLessThan(long)","59":"LongConstraintTest::::validLessThan(long)","60":"LongConstraintTest::::validLessThan(long)","61":"LongConstraintTest::::validLessThan(long)","62":"LongConstraintTest::::validLessThan(long)","64":"LongConstraintTest::::invalidLessThan(long)","65":"LongConstraintTest::::invalidLessThan(long)","66":"LongConstraintTest::::invalidLessThan(long)","67":"LongConstraintTest::::invalidLessThan(long)","68":"LongConstraintTest::::invalidLessThan(long)","69":"LongConstraintTest::::invalidLessThan(long)","71":"LongConstraintTest::::validLessThanOrEqual(long)","72":"LongConstraintTest::::validLessThanOrEqual(long)","73":"LongConstraintTest::::validLessThanOrEqual(long)","74":"LongConstraintTest::::validLessThanOrEqual(long)","75":"LongConstraintTest::::validLessThanOrEqual(long)","76":"LongConstraintTest::::validLessThanOrEqual(long)","78":"LongConstraintTest::::invalidLessThanOrEqual(long)","79":"LongConstraintTest::::invalidLessThanOrEqual(long)","80":"LongConstraintTest::::invalidLessThanOrEqual(long)","81":"LongConstraintTest::::invalidLessThanOrEqual(long)","82":"LongConstraintTest::::invalidLessThanOrEqual(long)","83":"LongConstraintTest::::invalidLessThanOrEqual(long)","85":"LongConstraintTest::::validPositive(long)","86":"LongConstraintTest::::validPositive(long)","87":"LongConstraintTest::::validPositive(long)","88":"LongConstraintTest::::validPositive(long)","89":"LongConstraintTest::::validPositive(long)","90":"LongConstraintTest::::validPositive(long)","92":"LongConstraintTest::::invalidPositive(long)","93":"LongConstraintTest::::invalidPositive(long)","94":"LongConstraintTest::::invalidPositive(long)","95":"LongConstraintTest::::invalidPositive(long)","96":"LongConstraintTest::::invalidPositive(long)","97":"LongConstraintTest::::invalidPositive(long)","99":"LongConstraintTest::::invalidNegative(long)","100":"LongConstraintTest::::invalidNegative(long)","101":"LongConstraintTest::::invalidNegative(long)","102":"LongConstraintTest::::invalidNegative(long)","103":"LongConstraintTest::::invalidNegative(long)","104":"LongConstraintTest::::invalidNegative(long)","106":"LongConstraintTest::::validNegative(long)","107":"LongConstraintTest::::validNegative(long)","108":"LongConstraintTest::::validNegative(long)","109":"LongConstraintTest::::validNegative(long)","110":"LongConstraintTest::::validNegative(long)","111":"LongConstraintTest::::validNegative(long)","113":"LongConstraintTest::::validPositiveOrZero(long)","114":"LongConstraintTest::::validPositiveOrZero(long)","115":"LongConstraintTest::::validPositiveOrZero(long)","116":"LongConstraintTest::::validPositiveOrZero(long)","117":"LongConstraintTest::::validPositiveOrZero(long)","118":"LongConstraintTest::::validPositiveOrZero(long)","119":"LongConstraintTest::::validPositiveOrZero(long)","121":"LongConstraintTest::::invalidPositiveOrZero(long)","122":"LongConstraintTest::::invalidPositiveOrZero(long)","123":"LongConstraintTest::::invalidPositiveOrZero(long)","124":"LongConstraintTest::::invalidPositiveOrZero(long)","125":"LongConstraintTest::::invalidPositiveOrZero(long)","126":"LongConstraintTest::::invalidPositiveOrZero(long)","127":"LongConstraintTest::::invalidPositiveOrZero(long)","129":"LongConstraintTest::::invalidNegaitveOrZero(long)","130":"LongConstraintTest::::invalidNegaitveOrZero(long)","131":"LongConstraintTest::::invalidNegaitveOrZero(long)","132":"LongConstraintTest::::invalidNegaitveOrZero(long)","133":"LongConstraintTest::::invalidNegaitveOrZero(long)","134":"LongConstraintTest::::invalidNegaitveOrZero(long)","135":"LongConstraintTest::::invalidNegaitveOrZero(long)","137":"LongConstraintTest::::validNegaitveOrZero(long)","138":"LongConstraintTest::::validNegaitveOrZero(long)","139":"LongConstraintTest::::validNegaitveOrZero(long)","140":"LongConstraintTest::::validNegaitveOrZero(long)","141":"LongConstraintTest::::validNegaitveOrZero(long)","142":"LongConstraintTest::::validNegaitveOrZero(long)","143":"LongConstraintTest::::validNegaitveOrZero(long)","145":"LongConstraintTest::::invalidNegativeOrZero(long)","146":"LongConstraintTest::::invalidNegativeOrZero(long)","147":"LongConstraintTest::::invalidNegativeOrZero(long)","148":"LongConstraintTest::::invalidNegativeOrZero(long)","149":"LongConstraintTest::::invalidNegativeOrZero(long)","150":"LongConstraintTest::::invalidNegativeOrZero(long)","151":"LongConstraintTest::::invalidNegativeOrZero(long)","153":"LongConstraintTest::::validNegativeOrZero(long)","154":"LongConstraintTest::::validNegativeOrZero(long)","155":"LongConstraintTest::::validNegativeOrZero(long)","156":"LongConstraintTest::::validNegativeOrZero(long)","157":"LongConstraintTest::::validNegativeOrZero(long)","158":"LongConstraintTest::::validNegativeOrZero(long)","159":"LongConstraintTest::::validNegativeOrZero(long)"},"tests":[{"test_lines":[29,34],"covered_lines":[22,25,30],"label":"LongConstraint::::isGreaterThan(java.lang.Long)"},{"test_lines":[36,41],"covered_lines":[22,25,30],"label":"LongConstraint::::isGreaterThan(java.lang.Long)"},{"test_lines":[43,48],"covered_lines":[22,25,35],"label":"LongConstraint::::isGreaterThanOrEqual(java.lang.Long)"},{"test_lines":[50,55],"covered_lines":[22,25,35],"label":"LongConstraint::::isGreaterThanOrEqual(java.lang.Long)"},{"test_lines":[57,62],"covered_lines":[22,25,40],"label":"LongConstraint::::isLessThan(java.lang.Long)"},{"test_lines":[64,69],"covered_lines":[22,25,40],"label":"LongConstraint::::isLessThan(java.lang.Long)"},{"test_lines":[71,76],"covered_lines":[22,25,45],"label":"LongConstraint::::isLessThanOrEqual(java.lang.Long)"},{"test_lines":[78,83],"covered_lines":[22,25,45],"label":"LongConstraint::::isLessThanOrEqual(java.lang.Long)"},{"test_lines":[85,90],"covered_lines":[22,25,30,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[92,97],"covered_lines":[22,25,30,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[99,104],"covered_lines":[22,25,40,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[106,111],"covered_lines":[22,25,40,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[113,119],"covered_lines":[22,25,35,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[121,127],"covered_lines":[22,25,35,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[129,135],"covered_lines":[22,25,45,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[137,143],"covered_lines":[22,25,45,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[145,151],"covered_lines":[22,25,45,50],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[153,159],"covered_lines":[22,25,45,50],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/CharSequenceConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.math.BigDecimal;\n","import java.math.BigInteger;\n","import java.net.MalformedURLException;\n","import java.net.URL;\n","import java.nio.charset.Charset;\n","import java.nio.charset.StandardCharsets;\n","import java.text.Normalizer;\n","import java.time.format.DateTimeFormatter;\n","import java.time.format.DateTimeParseException;\n","import java.time.format.ResolverStyle;\n","import java.util.ArrayList;\n","import java.util.Arrays;\n","import java.util.List;\n","import java.util.Locale;\n","import java.util.Set;\n","import java.util.function.Function;\n","import java.util.function.Supplier;\n","import java.util.function.ToIntFunction;\n","import java.util.regex.Pattern;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.constraint.charsequence.ByteSizeConstraint;\n","import am.ik.yavi.constraint.charsequence.CodePoints;\n","import am.ik.yavi.constraint.charsequence.CodePoints.CodePointsRanges;\n","import am.ik.yavi.constraint.charsequence.CodePoints.CodePointsSet;\n","import am.ik.yavi.constraint.charsequence.CodePoints.Range;\n","import am.ik.yavi.constraint.charsequence.CodePointsConstraint;\n","import am.ik.yavi.constraint.charsequence.EmojiConstraint;\n","import am.ik.yavi.constraint.charsequence.variant.VariantOptions;\n","import am.ik.yavi.constraint.inetaddress.InetAddressUtils;\n","import am.ik.yavi.constraint.password.CharSequencePasswordPoliciesBuilder;\n","import am.ik.yavi.core.ConstraintPredicate;\n","import am.ik.yavi.core.ViolationMessage;\n","\n","import static am.ik.yavi.core.NullAs.INVALID;\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.*;\n","\n","public class CharSequenceConstraint<T, E extends CharSequence>\n","\t\textends ContainerConstraintBase<T, E, CharSequenceConstraint<T, E>> {\n","\tprivate static final String EMAIL_PART = \"[^\\\\x00-\\\\x1F()<>@,;:\\\\\\\\\\\".\\\\[\\\\]\\\\s]\";\n","\n","\tprivate static final String DOMAIN_PATTERN = EMAIL_PART + \"+(\\\\.\" + EMAIL_PART\n","\t\t\t+ \"+)*\";\n","\n","\tprivate static final Pattern VALID_EMAIL_ADDRESS_REGEX = Pattern\n","\t\t\t.compile(\n","\t\t\t\t\t\"^\" + EMAIL_PART + \"+(\\\\.\" + EMAIL_PART + \"+)*@(\" + DOMAIN_PATTERN\n","\t\t\t\t\t\t\t+ \"|\" + InetAddressUtils.IPV4_REGEX + \")$\",\n","\t\t\t\t\tPattern.CASE_INSENSITIVE);\n","\n","\tprivate static final Pattern VALID_UUID_REGEX = Pattern\n","\t\t\t.compile(\"\\\\p{XDigit}{8}(-\\\\p{XDigit}{4}){4}\\\\p{XDigit}{8}\");\n","\n","\tprotected final Normalizer.Form normalizerForm;\n","\n","\tprotected final VariantOptions variantOptions;\n","\n","\tpublic CharSequenceConstraint() {\n","\t\tthis(Normalizer.Form.NFC, VariantOptions.builder().build());\n","\t}\n","\n","\tpublic CharSequenceConstraint(Normalizer.Form normalizerForm,\n","\t\t\tVariantOptions variantOptions) {\n","\t\tthis.normalizerForm = normalizerForm;\n","\t\tthis.variantOptions = variantOptions;\n","\t}\n","\n","\tpublic ByteSizeConstraint<T, E> asByteArray(Charset charset) {\n","\t\treturn new ByteSizeConstraint<>(this, charset);\n","\t}\n","\n","\tpublic ByteSizeConstraint<T, E> asByteArray() {\n","\t\treturn this.asByteArray(StandardCharsets.UTF_8);\n","\t}\n","\n","\t@Override\n","\tpublic CharSequenceConstraint<T, E> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic CodePointsConstraint.Builder<T, E> codePoints(CodePoints<E> codePoints) {\n","\t\treturn new CodePointsConstraint.Builder<>(this, codePoints);\n","\t}\n","\n","\tpublic CodePointsConstraint.Builder<T, E> codePoints(Set<Integer> allowedCodePoints) {\n","\t\treturn this.codePoints((CodePointsSet<E>) () -> allowedCodePoints);\n","\t}\n","\n","\tpublic CodePointsConstraint.Builder<T, E> codePoints(int begin, int end) {\n","\t\treturn this.codePoints(Range.of(begin, end));\n","\t}\n","\n","\tpublic CodePointsConstraint.Builder<T, E> codePoints(Range range, Range... ranges) {\n","\t\treturn this.codePoints((CodePointsRanges<E>) () -> {\n","\t\t\tList<Range> list = new ArrayList<>();\n","\t\t\tlist.add(range);\n","\t\t\tlist.addAll(Arrays.asList(ranges));\n","\t\t\treturn list;\n","\t\t});\n","\t}\n","\n","\tpublic CharSequenceConstraint<T, E> contains(CharSequence s) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> x.toString().contains(s),\n","\t\t\t\tCHAR_SEQUENCE_CONTAINS, () -> new Object[] { s }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * Does the given value start with the {@code prefix}\n","\t *\n","\t * @param prefix the prefix the value has to start with\n","\t * @since 0.10.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> startsWith(CharSequence prefix) {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.of(\n","\t\t\t\t\t\tx -> x.toString().startsWith(prefix.toString()),\n","\t\t\t\t\t\tCHAR_SEQUENCE_STARTSWITH, () -> new Object[] { prefix }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * Does the given value end with the {@code suffix}\n","\t *\n","\t * @param suffix the suffix the value has to end with\n","\t * @since 0.10.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> endsWith(CharSequence suffix) {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.of(x -> x.toString().endsWith(suffix.toString()),\n","\t\t\t\t\t\tCHAR_SEQUENCE_ENDSWITH, () -> new Object[] { suffix }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\tpublic CharSequenceConstraint<T, E> email() {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> {\n","\t\t\tif (size().applyAsInt(x) == 0) {\n","\t\t\t\treturn true;\n","\t\t\t}\n","\t\t\treturn VALID_EMAIL_ADDRESS_REGEX.matcher(x).matches();\n","\t\t}, CHAR_SEQUENCE_EMAIL, () -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> password(\n","\t\t\tFunction<CharSequencePasswordPoliciesBuilder<T, E>, List<ConstraintPredicate<E>>> builder) {\n","\t\tfinal List<ConstraintPredicate<E>> predicates = builder\n","\t\t\t\t.apply(new CharSequencePasswordPoliciesBuilder<>());\n","\t\tthis.predicates().addAll(predicates);\n","\t\treturn this;\n","\t}\n","\n","\tprivate <U> CharSequenceConstraint<T, E> isValidRepresentationOf(\n","\t\t\tFunction<String, U> converter, ViolationMessage message) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> {\n","\t\t\tif (size().applyAsInt(x) == 0) {\n","\t\t\t\treturn true;\n","\t\t\t}\n","\t\t\ttry {\n","\t\t\t\tconverter.apply(x.toString());\n","\t\t\t\treturn true;\n","\t\t\t}\n","\t\t\tcatch (NumberFormatException ignored) {\n","\t\t\t\treturn false;\n","\t\t\t}\n","\t\t}, message, () -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.12.0\n","\t */\n","\tprivate CharSequenceConstraint<T, E> isLocalDatePattern(String pattern) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> {\n","\t\t\ttry {\n","\t\t\t\tDateTimeFormatter.ofPattern(pattern)\n","\t\t\t\t\t\t.withResolverStyle(ResolverStyle.STRICT).parse(x);\n","\t\t\t\treturn true;\n","\t\t\t}\n","\t\t\tcatch (DateTimeParseException ignored) {\n","\t\t\t\treturn false;\n","\t\t\t}\n","\t\t}, CHAR_SEQUENCE_LOCAL_DATE, () -> new Object[] { pattern }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.6.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> isByte() {\n","\t\treturn this.isValidRepresentationOf(Byte::parseByte, CHAR_SEQUENCE_BYTE);\n","\t}\n","\n","\t/**\n","\t * @since 0.6.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> isShort() {\n","\t\treturn this.isValidRepresentationOf(Short::parseShort, CHAR_SEQUENCE_SHORT);\n","\t}\n","\n","\t/**\n","\t * @since 0.6.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> isInteger() {\n","\t\treturn this.isValidRepresentationOf(Integer::parseInt, CHAR_SEQUENCE_INTEGER);\n","\t}\n","\n","\t/**\n","\t * @since 0.6.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> isLong() {\n","\t\treturn this.isValidRepresentationOf(Long::parseLong, CHAR_SEQUENCE_LONG);\n","\t}\n","\n","\t/**\n","\t * @since 0.6.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> isFloat() {\n","\t\treturn this.isValidRepresentationOf(Float::parseFloat, CHAR_SEQUENCE_FLOAT);\n","\t}\n","\n","\t/**\n","\t * @since 0.6.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> isDouble() {\n","\t\treturn this.isValidRepresentationOf(Double::parseDouble, CHAR_SEQUENCE_DOUBLE);\n","\t}\n","\n","\t/**\n","\t * @since 0.6.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> isBigInteger() {\n","\t\treturn this.isValidRepresentationOf(BigInteger::new, CHAR_SEQUENCE_BIGINTEGER);\n","\t}\n","\n","\t/**\n","\t * @since 0.6.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> isBigDecimal() {\n","\t\treturn this.isValidRepresentationOf(BigDecimal::new, CHAR_SEQUENCE_BIGDECIMAL);\n","\t}\n","\n","\t/**\n","\t * @since 0.12.1\n","\t */\n","\tpublic CharSequenceConstraint<T, E> isoLocalDate() {\n","\t\treturn this.isLocalDatePattern(\"uuuu-MM-dd\");\n","\t}\n","\n","\t/**\n","\t * Use {@link #isoLocalDate()} instead\n","\t *\n","\t * @since 0.12.0\n","\t */\n","\t@Deprecated\n","\tpublic CharSequenceConstraint<T, E> isIsoLocalDate() {\n","\t\treturn this.isoLocalDate();\n","\t}\n","\n","\t/**\n","\t * @since 0.12.1\n","\t */\n","\tpublic CharSequenceConstraint<T, E> localDate(String pattern) {\n","\t\treturn this.isLocalDatePattern(pattern);\n","\t}\n","\n","\t/**\n","\t * Use {@link #localDate(String)} instead\n","\t *\n","\t * @since 0.12.0\n","\t */\n","\t@Deprecated\n","\tpublic CharSequenceConstraint<T, E> isLocalDate(String pattern) {\n","\t\treturn this.localDate(pattern);\n","\t}\n","\n","\tpublic EmojiConstraint<T, E> emoji() {\n","\t\treturn new EmojiConstraint<>(this, this.normalizerForm, this.variantOptions);\n","\t}\n","\n","\tpublic CharSequenceConstraint<T, E> normalizer(Normalizer.Form normalizerForm) {\n","\t\tCharSequenceConstraint<T, E> constraint = new CharSequenceConstraint<>(\n","\t\t\t\tnormalizerForm, this.variantOptions);\n","\t\tconstraint.predicates().addAll(this.predicates());\n","\t\treturn constraint;\n","\t}\n","\n","\tpublic CharSequenceConstraint<T, E> notBlank() {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.of(\n","\t\t\t\t\t\tx -> x != null && trim(x.toString()).length() != 0,\n","\t\t\t\t\t\tCHAR_SEQUENCE_NOT_BLANK, () -> new Object[] {}, INVALID));\n","\t\treturn this;\n","\t}\n","\n","\tpublic CharSequenceConstraint<T, E> pattern(String regex) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> Pattern.matches(regex, x),\n","\t\t\t\tCHAR_SEQUENCE_PATTERN, () -> new Object[] { regex }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.11.1\n","\t */\n","\tpublic CharSequenceConstraint<T, E> pattern(Pattern regex) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> regex.matcher(x).matches(),\n","\t\t\t\tCHAR_SEQUENCE_PATTERN, () -> new Object[] { regex.pattern() }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.11.1\n","\t */\n","\tpublic CharSequenceConstraint<T, E> pattern(Supplier<Pattern> regexSupplier) {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.of(x -> regexSupplier.get().matcher(x).matches(),\n","\t\t\t\t\t\tCHAR_SEQUENCE_PATTERN,\n","\t\t\t\t\t\t() -> new Object[] { regexSupplier.get().pattern() }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> ipv4() {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.of(x -> InetAddressUtils.isIpv4(x.toString()),\n","\t\t\t\t\t\tCHAR_SEQUENCE_IPV4, () -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> ipv6() {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.of(x -> InetAddressUtils.isIpv6(x.toString()),\n","\t\t\t\t\t\tCHAR_SEQUENCE_IPV6, () -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\tpublic CharSequenceConstraint<T, E> url() {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> {\n","\t\t\tif (size().applyAsInt(x) == 0) {\n","\t\t\t\treturn true;\n","\t\t\t}\n","\t\t\ttry {\n","\t\t\t\tnew URL(x.toString());\n","\t\t\t\treturn true;\n","\t\t\t}\n","\t\t\tcatch (MalformedURLException e) {\n","\t\t\t\treturn false;\n","\t\t\t}\n","\t\t}, CHAR_SEQUENCE_URL, () -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.10.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> uuid() {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> {\n","\t\t\tif (size().applyAsInt(x) == 0) {\n","\t\t\t\treturn true;\n","\t\t\t}\n","\t\t\treturn VALID_UUID_REGEX.matcher(x).matches();\n","\t\t}, CHAR_SEQUENCE_UUID, () -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\tpublic CharSequenceConstraint<T, E> luhn() {\n","\t\tthis.predicates().add(ConstraintPredicate.of(CharSequenceConstraint::luhnCheck,\n","\t\t\t\tCHAR_SEQUENCE_LUHN, () -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t// https://github.com/apache/commons-validator/blob/master/src/main/java/org/apache/commons/validator/CreditCardValidator.java\n","\tstatic boolean luhnCheck(CharSequence cardNumber) {\n","\t\t// number must be validated as 0..9 numeric first!!\n","\t\tfinal int digits = cardNumber.length();\n","\t\tfinal int oddOrEven = digits & 1;\n","\t\tlong sum = 0;\n","\t\tfor (int count = 0; count < digits; count++) {\n","\t\t\tint digit;\n","\t\t\ttry {\n","\t\t\t\tdigit = Integer.parseInt(cardNumber.charAt(count) + \"\");\n","\t\t\t}\n","\t\t\tcatch (NumberFormatException e) {\n","\t\t\t\treturn false;\n","\t\t\t}\n","\t\t\tif (((count & 1) ^ oddOrEven) == 0) { // not\n","\t\t\t\tdigit *= 2;\n","\t\t\t\tif (digit > 9) {\n","\t\t\t\t\tdigit -= 9;\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\tsum += digit;\n","\t\t}\n","\t\treturn sum != 0 && (sum % 10 == 0);\n","\t}\n","\n","\tpublic CharSequenceConstraint<T, E> variant(\n","\t\t\tFunction<VariantOptions.Builder, VariantOptions.Builder> opts) {\n","\t\tVariantOptions.Builder builder = VariantOptions.builder();\n","\t\tCharSequenceConstraint<T, E> constraint = new CharSequenceConstraint<>(\n","\t\t\t\tthis.normalizerForm, opts.apply(builder).build());\n","\t\tconstraint.predicates().addAll(this.predicates());\n","\t\treturn constraint;\n","\t}\n","\n","\tprotected String normalize(String s) {\n","\t\tString str = this.variantOptions.ignored(s);\n","\t\treturn this.normalizerForm == null ? str\n","\t\t\t\t: Normalizer.normalize(str, this.normalizerForm);\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<E> size() {\n","\t\treturn cs -> {\n","\t\t\tString s = this.normalize(cs.toString());\n","\t\t\treturn s.codePointCount(0, s.length());\n","\t\t};\n","\t}\n","\n","\tprivate static String trim(String s) {\n","\t\tif (s.length() == 0) {\n","\t\t\treturn s;\n","\t\t}\n","\t\tStringBuilder sb = new StringBuilder(s);\n","\t\twhile (sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {\n","\t\t\tsb.deleteCharAt(0);\n","\t\t}\n","\t\twhile (sb.length() > 0 && Character.isWhitespace(sb.charAt(sb.length() - 1))) {\n","\t\t\tsb.deleteCharAt(sb.length() - 1);\n","\t\t}\n","\t\treturn sb.toString();\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import am.ik.yavi.constraint.charsequence.variant.IdeographicVariationSequence;\n","import am.ik.yavi.constraint.charsequence.variant.MongolianFreeVariationSelector;\n","import org.junit.jupiter.api.Test;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.MethodSource;\n","import org.junit.jupiter.params.provider.ValueSource;\n","\n","import java.util.UUID;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","import java.util.regex.Pattern;\n","import java.util.stream.Stream;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class CharSequenceConstraintTest {\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"yavi\", \"aは小文字\" })\n","\tvoid validContains(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.contains(\"a\"));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"yvi\", \"Aは大文字\" })\n","\tvoid invalidContains(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.contains(\"a\"));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"abc@example.com\", \"abc@localhost\", \"abc@192.168.1.10\",\n","\t\t\t\"東京@example.com\", \"\" })\n","\tvoid validEmail(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.email());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"example.com\", \"abc@@example.com\" })\n","\tvoid invalidEmail(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.email());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"ab\", \"漢字\" })\n","\tvoid validFixedSize(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.fixedSize(2));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"a\", \"abc\" })\n","\tvoid invalidFixedSize(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.fixedSize(2));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"abcd\", \"朝ごはん\" })\n","\tvoid validGreaterThan(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.greaterThan(3));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"abc\", \"\\uD842\\uDFB7野屋\" })\n","\tvoid invalidGreaterThan(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.greaterThan(3));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"abcd\", \"abc\" })\n","\tvoid validGreaterThanOrEqual(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.greaterThanOrEqual(3));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"ab\", \"\\uD842\\uDFB7田\" })\n","\tvoid invalidGreaterThanOrEqual(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.greaterThanOrEqual(3));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"ᠠ᠋\", \"ᠰ᠌\" })\n","\tvoid ignoreFvsCharacter(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(\n","\t\t\t\tc -> c.variant(opts -> opts.fvs(MongolianFreeVariationSelector.IGNORE))\n","\t\t\t\t\t\t.fixedSize(1));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"\\uD842\\uDF9F\\uDB40\\uDD00\", \"\\u908A\\uDB40\\uDD07\" })\n","\tvoid ignoreIvsCharacter(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(\n","\t\t\t\tc -> c.variant(opts -> opts.ivs(IdeographicVariationSequence.IGNORE))\n","\t\t\t\t\t\t.fixedSize(1));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"ab\", \"\\uD842\\uDFB7田\" })\n","\tvoid validLessThan(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.lessThan(3));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"abc\", \"\\uD842\\uDFB7野屋\" })\n","\tvoid invalidLessThan(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.lessThan(3));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"ab\", \"abc\", \"\\uD842\\uDFB7野屋\" })\n","\tvoid validLessThanOrEqual(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.lessThanOrEqual(3));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"abcd\" })\n","\tvoid invalidLessThanOrEqual(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.lessThanOrEqual(3));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"モジ\" /* モシ\\u3099 */ })\n","\tvoid validNormalizeCombiningCharacter(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.fixedSize(2));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"foo\", \"漢字\" })\n","\tvoid validNotBlank(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.notBlank());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"\", \"    \", \"　　　\" })\n","\tvoid invalidNotBlank(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.notBlank());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"foo\", \" \" })\n","\tvoid validNotEmpty(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.notEmpty());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid invalidNotEmpty() {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.notEmpty());\n","\t\tassertThat(predicate.test(\"\")).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"ᠠ᠋\", \"ᠰ᠌\" })\n","\tvoid notIgnoreFvsCharacter(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.fixedSize(2));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"\\uD842\\uDF9F\\uDB40\\uDD00\", \"\\u908A\\uDB40\\uDD07\" })\n","\tvoid notIgnoreIvsCharacter(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.fixedSize(2));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"モジ\" /* モシ\\u3099 */ })\n","\tvoid notNormalizeCombiningCharacter(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(\n","\t\t\t\tc -> c.normalizer(null).fixedSize(3));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"1234\", \"0000\" })\n","\tvoid validPattern(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.pattern(\"[0-9]{4}\"));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"134a\", \"abcd\" })\n","\tvoid invalidPattern(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.pattern(\"[0-9]{4}\"));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"1234\", \"0000\" })\n","\tvoid validPattern_pattern(String value) {\n","\t\tfinal Pattern pattern = Pattern.compile(\"[0-9]{4}\");\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.pattern(pattern));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"134a\", \"abcd\" })\n","\tvoid invalidPattern_pattern(String value) {\n","\t\tfinal Pattern pattern = Pattern.compile(\"[0-9]{4}\");\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.pattern(pattern));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"1234\", \"0000\" })\n","\tvoid validPattern_patternSupplier(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(\n","\t\t\t\tc -> c.pattern((() -> Pattern.compile(\"[0-9]{4}\"))));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"134a\", \"abcd\" })\n","\tvoid invalidPattern_patternSupplier(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(\n","\t\t\t\tc -> c.pattern(() -> Pattern.compile(\"[0-9]{4}\")));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"http://example.com\", \"https://example.com\", \"\" })\n","\tvoid validUrl(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.url());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"example.com\", \"htt://example.com\" })\n","\tvoid invalidUrl(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.url());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@MethodSource(\"randomUUIDs\")\n","\tvoid validUUID(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(CharSequenceConstraint::uuid);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\tprivate static Stream<String> randomUUIDs() {\n","\t\treturn Stream.generate(UUID::randomUUID).map(UUID::toString).limit(10);\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"nonsense-nonsense-nonsense\",\n","\t\t\t\"12345678-1234-1234-1234-1234-12345678\" })\n","\tvoid invalidUUID(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(CharSequenceConstraint::uuid);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-128\", \"0\", \"127\" })\n","\tvoid validIsByte(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isByte());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-129\", \"128\", \"a\" })\n","\tvoid invalidIsByte(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isByte());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-32768\", \"0\", \"32767\" })\n","\tvoid validIsShort(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isShort());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-32769\", \"32768\", \"a\" })\n","\tvoid invalidIsShort(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isShort());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-2147483648\", \"0\", \"2147483647\" })\n","\tvoid validIsInteger(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isInteger());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-2147483649\", \"2147483648\", \"a\" })\n","\tvoid invalidIsInteger(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isInteger());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-9223372036854775808\", \"0\", \"9223372036854775807\" })\n","\tvoid validIsLong(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isLong());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-9223372036854775809\", \"9223372036854775808\", \"a\" })\n","\tvoid invalidIsLong(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isLong());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-100\", \"-1.0\", \"0\", \"1.0\", \"100\" })\n","\tvoid validIsFloat(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isFloat());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"a\" })\n","\tvoid invalidIsFloat(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isFloat());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-100\", \"-1.0\", \"0\", \"1.0\", \"100\" })\n","\tvoid validIsDouble(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isDouble());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"a\" })\n","\tvoid invalidIsDouble(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isDouble());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-9223372036854775809\", \"0\", \"9223372036854775808\" })\n","\tvoid validIsBigInteger(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isBigInteger());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"a\", \"0.1\" })\n","\tvoid invalidIsBigInteger(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isBigInteger());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"-100\", \"-1.0\", \"0\", \"1.0\", \"100\" })\n","\tvoid validIsBigDecimal(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isBigDecimal());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"a\" })\n","\tvoid invalidIsBigDecimal(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.isBigDecimal());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"4111111111111111\", \"4242424242424242\", \"4012888888881881\",\n","\t\t\t\"5555555555554444\", \"5105105105105100\", \"378282246310005\", \"371449635398431\",\n","\t\t\t\"30569309025904\", \"38520000023237\", \"3530111333300000\", \"3566002020360505\" })\n","\tvoid validLuhn(String value) {\n","\t\tfinal Predicate<String> predicate = retrievePredicate(c -> c.luhn());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"4111111111111112\", \"4242424242424243\", \"401288888888188a\" })\n","\tvoid invalidLuhn(String value) {\n","\t\tfinal Predicate<String> predicate = retrievePredicate(c -> c.luhn());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"1.1.1.1\", \"127.0.0.1\", \"255.255.255.255\", \"0.0.0.0\" })\n","\tvoid validIpv4(String value) {\n","\t\tfinal Predicate<String> predicate = retrievePredicate(c -> c.ipv4());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"1.1.1.1.1\", \"255.255.255.256\", \"a.a.a.a\" })\n","\tvoid invalidIpv4(String value) {\n","\t\tfinal Predicate<String> predicate = retrievePredicate(c -> c.ipv4());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"1762:0:0:0:0:B03:1:AF18\", \"0:0:0:0:0:0:0:0\",\n","\t\t\t\"0:0:0:0:0:0:0:1\", \"::1\", \"2001:0db8:bd05:01d2:288a:1fc0:0001:10ee\",\n","\t\t\t\"2001:db8:20:3:1000:100:20:3\", \"2001:db8::1234:0:0:9abc\", \"2001:db8::9abc\",\n","\t\t\t\"::ffff:192.0.2.1\", \"fe80::0123:4567:89ab:cdef%4\",\n","\t\t\t\"fe80::0123:4567:89ab:cdef%fxp0\" })\n","\tvoid validIpv6(String value) {\n","\t\tfinal Predicate<String> predicate = retrievePredicate(c -> c.ipv6());\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"1.1.1.1.1\", \"0:0:0:0:0:0:0:Z\" })\n","\tvoid invalidIpv6(String value) {\n","\t\tfinal Predicate<String> predicate = retrievePredicate(c -> c.ipv6());\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"DiegoFooiqMu3IPpgf\", \"DiegoFoojQ2gFpzEmO\",\n","\t\t\t\"DiegoFooPcMzCARdWM\", \"DiegoFoohdORZ6ks8H\", \"DiegoFooT7UFB7ijEU\",\n","\t\t\t\"DiegoFooFSmlWu4XJz\", \"DiegoFoofwlgMXnuvW\", \"DiegoFooyj4MgAQeBi\",\n","\t\t\t\"DiegoFookcYOLkz00a\", \"DiegoFooiYBuRcAkXP\" })\n","\tvoid validStartsWith(String value) {\n","\t\tString prefix = \"DiegoFoo\";\n","\t\tfinal Predicate<String> predicate = retrievePredicate(c -> c.startsWith(prefix));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"DiegoFooiqMu3IPpgf\", \"DiegoFoojQ2gFpzEmO\",\n","\t\t\t\"DiegoFooPcMzCARdWM\", \"DiegoFoohdORZ6ks8H\", \"DiegoFooT7UFB7ijEU\",\n","\t\t\t\"DiegoFooFSmlWu4XJz\", \"DiegoFoofwlgMXnuvW\", \"DiegoFooyj4MgAQeBi\",\n","\t\t\t\"DiegoFookcYOLkz00a\", \"DiegoFooiYBuRcAkXP\" })\n","\tvoid validStartsWithStringBuilder(String value) {\n","\t\tStringBuilder prefixBuilder = new StringBuilder(\"Diego\").append(\"Foo\");\n","\t\tfinal Predicate<String> predicate = retrievePredicate(\n","\t\t\t\tc -> c.startsWith(prefixBuilder));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"iqMu3IPpgf\", \"jQ2gFpzEmO\", \"PcMzCARdWM\", \"hdORZ6ks8H\",\n","\t\t\t\"T7UFB7ijEU\", \"FSmlWu4XJz\", \"fwlgMXnuvW\", \"yj4MgAQeBi\", \"kcYOLkz00a\",\n","\t\t\t\"iYBuRcAkXP\" })\n","\tvoid invalidStartsWith(String value) {\n","\t\tString prefix = \"DiegoFoo\";\n","\t\tfinal Predicate<String> predicate = retrievePredicate(c -> c.startsWith(prefix));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"iqMu3IPpgf\", \"jQ2gFpzEmO\", \"PcMzCARdWM\", \"hdORZ6ks8H\",\n","\t\t\t\"T7UFB7ijEU\", \"FSmlWu4XJz\", \"fwlgMXnuvW\", \"yj4MgAQeBi\", \"kcYOLkz00a\",\n","\t\t\t\"iYBuRcAkXP\" })\n","\tvoid invalidStartsWithStringBuilder(String value) {\n","\t\tStringBuilder prefixBuilder = new StringBuilder(\"Diego\").append(\"Foo\");\n","\t\tfinal Predicate<String> predicate = retrievePredicate(\n","\t\t\t\tc -> c.startsWith(prefixBuilder));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"iqMu3IPpgfDiego\", \"jQ2gFpzEmODiego\", \"PcMzCARdWMDiego\",\n","\t\t\t\"hdORZ6ks8HDiego\", \"T7UFB7ijEUDiego\", \"FSmlWu4XJzDiego\", \"fwlgMXnuvWDiego\",\n","\t\t\t\"yj4MgAQeBiDiego\", \"kcYOLkz00aDiego\", \"iYBuRcAkXPDiego\" })\n","\tvoid validEndsWith(String value) {\n","\t\tString suffix = \"Diego\";\n","\t\tfinal Predicate<String> predicate = retrievePredicate(c -> c.endsWith(suffix));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"iqMu3IPpgfDiego1\", \"jQ2gFpzEmODiego1\", \"PcMzCARdWMDiego1\",\n","\t\t\t\"hdORZ6ks8HDiego1\", \"T7UFB7ijEUDiego1\", \"FSmlWu4XJzDiego1\",\n","\t\t\t\"fwlgMXnuvWDiego1\", \"yj4MgAQeBiDiego1\", \"kcYOLkz00aDiego1\",\n","\t\t\t\"iYBuRcAkXPDiego1\" })\n","\tvoid validEndsWithStringBuilder(String value) {\n","\t\tStringBuilder suffixBuilder = new StringBuilder(\"Diego\").append(1);\n","\t\tfinal Predicate<String> predicate = retrievePredicate(\n","\t\t\t\tc -> c.endsWith(suffixBuilder));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"iqMu3IPpgf\", \"jQ2gFpzEmO\", \"PcMzCARdWM\", \"hdORZ6ks8H\",\n","\t\t\t\"T7UFB7ijEU\", \"FSmlWu4XJz\", \"fwlgMXnuvW\", \"yj4MgAQeBi\", \"kcYOLkz00a\",\n","\t\t\t\"iYBuRcAkXP\" })\n","\tvoid invalidEndsWith(String value) {\n","\t\tString suffix = \"Diego\";\n","\t\tfinal Predicate<String> predicate = retrievePredicate(c -> c.endsWith(suffix));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"iqMu3IPpgf\", \"jQ2gFpzEmO\", \"PcMzCARdWM\", \"hdORZ6ks8H\",\n","\t\t\t\"T7UFB7ijEU\", \"FSmlWu4XJz\", \"fwlgMXnuvW\", \"yj4MgAQeBi\", \"kcYOLkz00a\",\n","\t\t\t\"iYBuRcAkXP\" })\n","\tvoid invalidEndsWithStringBuilder(String value) {\n","\t\tStringBuilder suffixBuilder = new StringBuilder(\"Diego\").append(1);\n","\t\tfinal Predicate<String> predicate = retrievePredicate(\n","\t\t\t\tc -> c.endsWith(suffixBuilder));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"2022-02-02\", \"2022-12-31\", \"2022-01-01\" })\n","\tvoid validLocalDate(String value) {\n","\t\tPredicate<String> predicate = retrievePredicate(\n","\t\t\t\tCharSequenceConstraint::isoLocalDate);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"2022-02-02\", \"2022-12-31\", \"2022-01-01\" })\n","\tvoid inValidLocalDateWithPattern(String value) {\n","\t\tString pattern = \"dd/MM/uuuu\";\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.localDate(pattern));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(strings = { \"01/01/2022\", \"31/01/2022\", \"31/12/2022\" })\n","\tvoid validLocalDateWithPattern(String value) {\n","\t\tString pattern = \"dd/MM/uuuu\";\n","\t\tPredicate<String> predicate = retrievePredicate(c -> c.localDate(pattern));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\tprivate static Predicate<String> retrievePredicate(\n","\t\t\tFunction<CharSequenceConstraint<String, String>, CharSequenceConstraint<String, String>> constraint) {\n","\t\treturn constraint.apply(new CharSequenceConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"CharSequenceConstraint::::asByteArray(java.nio.charset.Charset)":[86,88],"CharSequenceConstraint::::asByteArray()":[90,92],"CharSequenceConstraint::::cast()":[94,97],"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints<E>)":[99,101],"CharSequenceConstraint::::codePoints(java.util.Set<java.lang.Integer>)":[103,105],"CharSequenceConstraint::::codePoints(int,int)":[107,109],"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints.Range,am.ik.yavi.constraint.charsequence.CodePoints.Range[])":[111,118],"CharSequenceConstraint::::contains(java.lang.CharSequence)":[120,124],"CharSequenceConstraint::::startsWith(java.lang.CharSequence)":[132,138],"CharSequenceConstraint::::endsWith(java.lang.CharSequence)":[146,151],"CharSequenceConstraint::::email()":[153,161],"CharSequenceConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.CharSequencePasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)":[166,172],"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)":[174,189],"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)":[194,206],"CharSequenceConstraint::::isByte()":[211,213],"CharSequenceConstraint::::isShort()":[218,220],"CharSequenceConstraint::::isInteger()":[225,227],"CharSequenceConstraint::::isLong()":[232,234],"CharSequenceConstraint::::isFloat()":[239,241],"CharSequenceConstraint::::isDouble()":[246,248],"CharSequenceConstraint::::isBigInteger()":[253,255],"CharSequenceConstraint::::isBigDecimal()":[260,262],"CharSequenceConstraint::::isoLocalDate()":[267,269],"CharSequenceConstraint::::isIsoLocalDate()":[276,279],"CharSequenceConstraint::::localDate(java.lang.String)":[284,286],"CharSequenceConstraint::::isLocalDate(java.lang.String)":[293,296],"CharSequenceConstraint::::emoji()":[298,300],"CharSequenceConstraint::::normalizer(java.text.Normalizer.Form)":[302,307],"CharSequenceConstraint::::notBlank()":[309,315],"CharSequenceConstraint::::pattern(java.lang.String)":[317,321],"CharSequenceConstraint::::pattern(java.util.regex.Pattern)":[326,330],"CharSequenceConstraint::::pattern(java.util.function.Supplier<java.util.regex.Pattern>)":[335,341],"CharSequenceConstraint::::ipv4()":[346,351],"CharSequenceConstraint::::ipv6()":[356,361],"CharSequenceConstraint::::url()":[363,377],"CharSequenceConstraint::::uuid()":[382,390],"CharSequenceConstraint::::luhn()":[395,399],"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)":[402,424],"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)":[426,433],"CharSequenceConstraint::::normalize(java.lang.String)":[435,439],"CharSequenceConstraint::::size()":[441,447],"CharSequenceConstraint::::trim(java.lang.String)":[449,461]},"test_method_lines_dic":{"CharSequenceConstraintTest::::validContains(java.lang.String)":[35,40],"CharSequenceConstraintTest::::invalidContains(java.lang.String)":[42,47],"CharSequenceConstraintTest::::validEmail(java.lang.String)":[49,55],"CharSequenceConstraintTest::::invalidEmail(java.lang.String)":[57,62],"CharSequenceConstraintTest::::validFixedSize(java.lang.String)":[64,69],"CharSequenceConstraintTest::::invalidFixedSize(java.lang.String)":[71,76],"CharSequenceConstraintTest::::validGreaterThan(java.lang.String)":[78,83],"CharSequenceConstraintTest::::invalidGreaterThan(java.lang.String)":[85,90],"CharSequenceConstraintTest::::validGreaterThanOrEqual(java.lang.String)":[92,97],"CharSequenceConstraintTest::::invalidGreaterThanOrEqual(java.lang.String)":[99,104],"CharSequenceConstraintTest::::ignoreFvsCharacter(java.lang.String)":[106,113],"CharSequenceConstraintTest::::ignoreIvsCharacter(java.lang.String)":[115,122],"CharSequenceConstraintTest::::validLessThan(java.lang.String)":[124,129],"CharSequenceConstraintTest::::invalidLessThan(java.lang.String)":[131,136],"CharSequenceConstraintTest::::validLessThanOrEqual(java.lang.String)":[138,143],"CharSequenceConstraintTest::::invalidLessThanOrEqual(java.lang.String)":[145,150],"CharSequenceConstraintTest::::validNormalizeCombiningCharacter(java.lang.String)":[152,157],"CharSequenceConstraintTest::::validNotBlank(java.lang.String)":[159,164],"CharSequenceConstraintTest::::invalidNotBlank(java.lang.String)":[166,171],"CharSequenceConstraintTest::::validNotEmpty(java.lang.String)":[173,178],"CharSequenceConstraintTest::::invalidNotEmpty()":[180,184],"CharSequenceConstraintTest::::notIgnoreFvsCharacter(java.lang.String)":[186,191],"CharSequenceConstraintTest::::notIgnoreIvsCharacter(java.lang.String)":[193,198],"CharSequenceConstraintTest::::notNormalizeCombiningCharacter(java.lang.String)":[200,206],"CharSequenceConstraintTest::::validPattern(java.lang.String)":[208,213],"CharSequenceConstraintTest::::invalidPattern(java.lang.String)":[215,220],"CharSequenceConstraintTest::::validPattern_pattern(java.lang.String)":[222,228],"CharSequenceConstraintTest::::invalidPattern_pattern(java.lang.String)":[230,236],"CharSequenceConstraintTest::::validPattern_patternSupplier(java.lang.String)":[238,244],"CharSequenceConstraintTest::::invalidPattern_patternSupplier(java.lang.String)":[246,252],"CharSequenceConstraintTest::::validUrl(java.lang.String)":[254,259],"CharSequenceConstraintTest::::invalidUrl(java.lang.String)":[261,266],"CharSequenceConstraintTest::::validUUID(java.lang.String)":[268,273],"CharSequenceConstraintTest::::randomUUIDs()":[275,277],"CharSequenceConstraintTest::::invalidUUID(java.lang.String)":[279,285],"CharSequenceConstraintTest::::validIsByte(java.lang.String)":[287,292],"CharSequenceConstraintTest::::invalidIsByte(java.lang.String)":[294,299],"CharSequenceConstraintTest::::validIsShort(java.lang.String)":[301,306],"CharSequenceConstraintTest::::invalidIsShort(java.lang.String)":[308,313],"CharSequenceConstraintTest::::validIsInteger(java.lang.String)":[315,320],"CharSequenceConstraintTest::::invalidIsInteger(java.lang.String)":[322,327],"CharSequenceConstraintTest::::validIsLong(java.lang.String)":[329,334],"CharSequenceConstraintTest::::invalidIsLong(java.lang.String)":[336,341],"CharSequenceConstraintTest::::validIsFloat(java.lang.String)":[343,348],"CharSequenceConstraintTest::::invalidIsFloat(java.lang.String)":[350,355],"CharSequenceConstraintTest::::validIsDouble(java.lang.String)":[357,362],"CharSequenceConstraintTest::::invalidIsDouble(java.lang.String)":[364,369],"CharSequenceConstraintTest::::validIsBigInteger(java.lang.String)":[371,376],"CharSequenceConstraintTest::::invalidIsBigInteger(java.lang.String)":[378,383],"CharSequenceConstraintTest::::validIsBigDecimal(java.lang.String)":[385,390],"CharSequenceConstraintTest::::invalidIsBigDecimal(java.lang.String)":[392,397],"CharSequenceConstraintTest::::validLuhn(java.lang.String)":[399,406],"CharSequenceConstraintTest::::invalidLuhn(java.lang.String)":[408,413],"CharSequenceConstraintTest::::validIpv4(java.lang.String)":[415,420],"CharSequenceConstraintTest::::invalidIpv4(java.lang.String)":[422,427],"CharSequenceConstraintTest::::validIpv6(java.lang.String)":[429,438],"CharSequenceConstraintTest::::invalidIpv6(java.lang.String)":[440,445],"CharSequenceConstraintTest::::validStartsWith(java.lang.String)":[447,456],"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)":[458,468],"CharSequenceConstraintTest::::invalidStartsWith(java.lang.String)":[470,478],"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)":[480,489],"CharSequenceConstraintTest::::validEndsWith(java.lang.String)":[491,499],"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)":[501,511],"CharSequenceConstraintTest::::invalidEndsWith(java.lang.String)":[513,521],"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)":[523,532],"CharSequenceConstraintTest::::validLocalDate(java.lang.String)":[534,540],"CharSequenceConstraintTest::::inValidLocalDateWithPattern(java.lang.String)":[542,548],"CharSequenceConstraintTest::::validLocalDateWithPattern(java.lang.String)":[550,556]},"reverse_method_lines_dic":{"86":"CharSequenceConstraint::::asByteArray(java.nio.charset.Charset)","87":"CharSequenceConstraint::::asByteArray(java.nio.charset.Charset)","88":"CharSequenceConstraint::::asByteArray(java.nio.charset.Charset)","90":"CharSequenceConstraint::::asByteArray()","91":"CharSequenceConstraint::::asByteArray()","92":"CharSequenceConstraint::::asByteArray()","94":"CharSequenceConstraint::::cast()","95":"CharSequenceConstraint::::cast()","96":"CharSequenceConstraint::::cast()","97":"CharSequenceConstraint::::cast()","99":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints<E>)","100":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints<E>)","101":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints<E>)","103":"CharSequenceConstraint::::codePoints(java.util.Set<java.lang.Integer>)","104":"CharSequenceConstraint::::codePoints(java.util.Set<java.lang.Integer>)","105":"CharSequenceConstraint::::codePoints(java.util.Set<java.lang.Integer>)","107":"CharSequenceConstraint::::codePoints(int,int)","108":"CharSequenceConstraint::::codePoints(int,int)","109":"CharSequenceConstraint::::codePoints(int,int)","111":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints.Range,am.ik.yavi.constraint.charsequence.CodePoints.Range[])","112":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints.Range,am.ik.yavi.constraint.charsequence.CodePoints.Range[])","113":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints.Range,am.ik.yavi.constraint.charsequence.CodePoints.Range[])","114":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints.Range,am.ik.yavi.constraint.charsequence.CodePoints.Range[])","115":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints.Range,am.ik.yavi.constraint.charsequence.CodePoints.Range[])","116":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints.Range,am.ik.yavi.constraint.charsequence.CodePoints.Range[])","117":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints.Range,am.ik.yavi.constraint.charsequence.CodePoints.Range[])","118":"CharSequenceConstraint::::codePoints(am.ik.yavi.constraint.charsequence.CodePoints.Range,am.ik.yavi.constraint.charsequence.CodePoints.Range[])","120":"CharSequenceConstraint::::contains(java.lang.CharSequence)","121":"CharSequenceConstraint::::contains(java.lang.CharSequence)","122":"CharSequenceConstraint::::contains(java.lang.CharSequence)","123":"CharSequenceConstraint::::contains(java.lang.CharSequence)","124":"CharSequenceConstraint::::contains(java.lang.CharSequence)","132":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)","133":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)","134":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)","135":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)","136":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)","137":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)","138":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)","146":"CharSequenceConstraint::::endsWith(java.lang.CharSequence)","147":"CharSequenceConstraint::::endsWith(java.lang.CharSequence)","148":"CharSequenceConstraint::::endsWith(java.lang.CharSequence)","149":"CharSequenceConstraint::::endsWith(java.lang.CharSequence)","150":"CharSequenceConstraint::::endsWith(java.lang.CharSequence)","151":"CharSequenceConstraint::::endsWith(java.lang.CharSequence)","153":"CharSequenceConstraint::::email()","154":"CharSequenceConstraint::::email()","155":"CharSequenceConstraint::::email()","156":"CharSequenceConstraint::::email()","157":"CharSequenceConstraint::::email()","158":"CharSequenceConstraint::::email()","159":"CharSequenceConstraint::::email()","160":"CharSequenceConstraint::::email()","161":"CharSequenceConstraint::::email()","166":"CharSequenceConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.CharSequencePasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","167":"CharSequenceConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.CharSequencePasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","168":"CharSequenceConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.CharSequencePasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","169":"CharSequenceConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.CharSequencePasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","170":"CharSequenceConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.CharSequencePasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","171":"CharSequenceConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.CharSequencePasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","172":"CharSequenceConstraint::::password(java.util.function.Function<am.ik.yavi.constraint.password.CharSequencePasswordPoliciesBuilder<T, E>, java.util.List<am.ik.yavi.core.ConstraintPredicate<E>>>)","174":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","175":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","176":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","177":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","178":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","179":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","180":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","181":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","182":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","183":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","184":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","185":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","186":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","187":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","188":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","189":"CharSequenceConstraint::::isValidRepresentationOf(java.util.function.Function<java.lang.String, U>,am.ik.yavi.core.ViolationMessage)","194":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","195":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","196":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","197":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","198":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","199":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","200":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","201":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","202":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","203":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","204":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","205":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","206":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)","211":"CharSequenceConstraint::::isByte()","212":"CharSequenceConstraint::::isByte()","213":"CharSequenceConstraint::::isByte()","218":"CharSequenceConstraint::::isShort()","219":"CharSequenceConstraint::::isShort()","220":"CharSequenceConstraint::::isShort()","225":"CharSequenceConstraint::::isInteger()","226":"CharSequenceConstraint::::isInteger()","227":"CharSequenceConstraint::::isInteger()","232":"CharSequenceConstraint::::isLong()","233":"CharSequenceConstraint::::isLong()","234":"CharSequenceConstraint::::isLong()","239":"CharSequenceConstraint::::isFloat()","240":"CharSequenceConstraint::::isFloat()","241":"CharSequenceConstraint::::isFloat()","246":"CharSequenceConstraint::::isDouble()","247":"CharSequenceConstraint::::isDouble()","248":"CharSequenceConstraint::::isDouble()","253":"CharSequenceConstraint::::isBigInteger()","254":"CharSequenceConstraint::::isBigInteger()","255":"CharSequenceConstraint::::isBigInteger()","260":"CharSequenceConstraint::::isBigDecimal()","261":"CharSequenceConstraint::::isBigDecimal()","262":"CharSequenceConstraint::::isBigDecimal()","267":"CharSequenceConstraint::::isoLocalDate()","268":"CharSequenceConstraint::::isoLocalDate()","269":"CharSequenceConstraint::::isoLocalDate()","276":"CharSequenceConstraint::::isIsoLocalDate()","277":"CharSequenceConstraint::::isIsoLocalDate()","278":"CharSequenceConstraint::::isIsoLocalDate()","279":"CharSequenceConstraint::::isIsoLocalDate()","284":"CharSequenceConstraint::::localDate(java.lang.String)","285":"CharSequenceConstraint::::localDate(java.lang.String)","286":"CharSequenceConstraint::::localDate(java.lang.String)","293":"CharSequenceConstraint::::isLocalDate(java.lang.String)","294":"CharSequenceConstraint::::isLocalDate(java.lang.String)","295":"CharSequenceConstraint::::isLocalDate(java.lang.String)","296":"CharSequenceConstraint::::isLocalDate(java.lang.String)","298":"CharSequenceConstraint::::emoji()","299":"CharSequenceConstraint::::emoji()","300":"CharSequenceConstraint::::emoji()","302":"CharSequenceConstraint::::normalizer(java.text.Normalizer.Form)","303":"CharSequenceConstraint::::normalizer(java.text.Normalizer.Form)","304":"CharSequenceConstraint::::normalizer(java.text.Normalizer.Form)","305":"CharSequenceConstraint::::normalizer(java.text.Normalizer.Form)","306":"CharSequenceConstraint::::normalizer(java.text.Normalizer.Form)","307":"CharSequenceConstraint::::normalizer(java.text.Normalizer.Form)","309":"CharSequenceConstraint::::notBlank()","310":"CharSequenceConstraint::::notBlank()","311":"CharSequenceConstraint::::notBlank()","312":"CharSequenceConstraint::::notBlank()","313":"CharSequenceConstraint::::notBlank()","314":"CharSequenceConstraint::::notBlank()","315":"CharSequenceConstraint::::notBlank()","317":"CharSequenceConstraint::::pattern(java.lang.String)","318":"CharSequenceConstraint::::pattern(java.lang.String)","319":"CharSequenceConstraint::::pattern(java.lang.String)","320":"CharSequenceConstraint::::pattern(java.lang.String)","321":"CharSequenceConstraint::::pattern(java.lang.String)","326":"CharSequenceConstraint::::pattern(java.util.regex.Pattern)","327":"CharSequenceConstraint::::pattern(java.util.regex.Pattern)","328":"CharSequenceConstraint::::pattern(java.util.regex.Pattern)","329":"CharSequenceConstraint::::pattern(java.util.regex.Pattern)","330":"CharSequenceConstraint::::pattern(java.util.regex.Pattern)","335":"CharSequenceConstraint::::pattern(java.util.function.Supplier<java.util.regex.Pattern>)","336":"CharSequenceConstraint::::pattern(java.util.function.Supplier<java.util.regex.Pattern>)","337":"CharSequenceConstraint::::pattern(java.util.function.Supplier<java.util.regex.Pattern>)","338":"CharSequenceConstraint::::pattern(java.util.function.Supplier<java.util.regex.Pattern>)","339":"CharSequenceConstraint::::pattern(java.util.function.Supplier<java.util.regex.Pattern>)","340":"CharSequenceConstraint::::pattern(java.util.function.Supplier<java.util.regex.Pattern>)","341":"CharSequenceConstraint::::pattern(java.util.function.Supplier<java.util.regex.Pattern>)","346":"CharSequenceConstraint::::ipv4()","347":"CharSequenceConstraint::::ipv4()","348":"CharSequenceConstraint::::ipv4()","349":"CharSequenceConstraint::::ipv4()","350":"CharSequenceConstraint::::ipv4()","351":"CharSequenceConstraint::::ipv4()","356":"CharSequenceConstraint::::ipv6()","357":"CharSequenceConstraint::::ipv6()","358":"CharSequenceConstraint::::ipv6()","359":"CharSequenceConstraint::::ipv6()","360":"CharSequenceConstraint::::ipv6()","361":"CharSequenceConstraint::::ipv6()","363":"CharSequenceConstraint::::url()","364":"CharSequenceConstraint::::url()","365":"CharSequenceConstraint::::url()","366":"CharSequenceConstraint::::url()","367":"CharSequenceConstraint::::url()","368":"CharSequenceConstraint::::url()","369":"CharSequenceConstraint::::url()","370":"CharSequenceConstraint::::url()","371":"CharSequenceConstraint::::url()","372":"CharSequenceConstraint::::url()","373":"CharSequenceConstraint::::url()","374":"CharSequenceConstraint::::url()","375":"CharSequenceConstraint::::url()","376":"CharSequenceConstraint::::url()","377":"CharSequenceConstraint::::url()","382":"CharSequenceConstraint::::uuid()","383":"CharSequenceConstraint::::uuid()","384":"CharSequenceConstraint::::uuid()","385":"CharSequenceConstraint::::uuid()","386":"CharSequenceConstraint::::uuid()","387":"CharSequenceConstraint::::uuid()","388":"CharSequenceConstraint::::uuid()","389":"CharSequenceConstraint::::uuid()","390":"CharSequenceConstraint::::uuid()","395":"CharSequenceConstraint::::luhn()","396":"CharSequenceConstraint::::luhn()","397":"CharSequenceConstraint::::luhn()","398":"CharSequenceConstraint::::luhn()","399":"CharSequenceConstraint::::luhn()","402":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","403":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","404":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","405":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","406":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","407":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","408":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","409":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","410":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","411":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","412":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","413":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","414":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","415":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","416":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","417":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","418":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","419":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","420":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","421":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","422":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","423":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","424":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)","426":"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)","427":"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)","428":"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)","429":"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)","430":"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)","431":"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)","432":"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)","433":"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)","435":"CharSequenceConstraint::::normalize(java.lang.String)","436":"CharSequenceConstraint::::normalize(java.lang.String)","437":"CharSequenceConstraint::::normalize(java.lang.String)","438":"CharSequenceConstraint::::normalize(java.lang.String)","439":"CharSequenceConstraint::::normalize(java.lang.String)","441":"CharSequenceConstraint::::size()","442":"CharSequenceConstraint::::size()","443":"CharSequenceConstraint::::size()","444":"CharSequenceConstraint::::size()","445":"CharSequenceConstraint::::size()","446":"CharSequenceConstraint::::size()","447":"CharSequenceConstraint::::size()","449":"CharSequenceConstraint::::trim(java.lang.String)","450":"CharSequenceConstraint::::trim(java.lang.String)","451":"CharSequenceConstraint::::trim(java.lang.String)","452":"CharSequenceConstraint::::trim(java.lang.String)","453":"CharSequenceConstraint::::trim(java.lang.String)","454":"CharSequenceConstraint::::trim(java.lang.String)","455":"CharSequenceConstraint::::trim(java.lang.String)","456":"CharSequenceConstraint::::trim(java.lang.String)","457":"CharSequenceConstraint::::trim(java.lang.String)","458":"CharSequenceConstraint::::trim(java.lang.String)","459":"CharSequenceConstraint::::trim(java.lang.String)","460":"CharSequenceConstraint::::trim(java.lang.String)","461":"CharSequenceConstraint::::trim(java.lang.String)"},"test_reverse_method_lines_dic":{"35":"CharSequenceConstraintTest::::validContains(java.lang.String)","36":"CharSequenceConstraintTest::::validContains(java.lang.String)","37":"CharSequenceConstraintTest::::validContains(java.lang.String)","38":"CharSequenceConstraintTest::::validContains(java.lang.String)","39":"CharSequenceConstraintTest::::validContains(java.lang.String)","40":"CharSequenceConstraintTest::::validContains(java.lang.String)","42":"CharSequenceConstraintTest::::invalidContains(java.lang.String)","43":"CharSequenceConstraintTest::::invalidContains(java.lang.String)","44":"CharSequenceConstraintTest::::invalidContains(java.lang.String)","45":"CharSequenceConstraintTest::::invalidContains(java.lang.String)","46":"CharSequenceConstraintTest::::invalidContains(java.lang.String)","47":"CharSequenceConstraintTest::::invalidContains(java.lang.String)","49":"CharSequenceConstraintTest::::validEmail(java.lang.String)","50":"CharSequenceConstraintTest::::validEmail(java.lang.String)","51":"CharSequenceConstraintTest::::validEmail(java.lang.String)","52":"CharSequenceConstraintTest::::validEmail(java.lang.String)","53":"CharSequenceConstraintTest::::validEmail(java.lang.String)","54":"CharSequenceConstraintTest::::validEmail(java.lang.String)","55":"CharSequenceConstraintTest::::validEmail(java.lang.String)","57":"CharSequenceConstraintTest::::invalidEmail(java.lang.String)","58":"CharSequenceConstraintTest::::invalidEmail(java.lang.String)","59":"CharSequenceConstraintTest::::invalidEmail(java.lang.String)","60":"CharSequenceConstraintTest::::invalidEmail(java.lang.String)","61":"CharSequenceConstraintTest::::invalidEmail(java.lang.String)","62":"CharSequenceConstraintTest::::invalidEmail(java.lang.String)","64":"CharSequenceConstraintTest::::validFixedSize(java.lang.String)","65":"CharSequenceConstraintTest::::validFixedSize(java.lang.String)","66":"CharSequenceConstraintTest::::validFixedSize(java.lang.String)","67":"CharSequenceConstraintTest::::validFixedSize(java.lang.String)","68":"CharSequenceConstraintTest::::validFixedSize(java.lang.String)","69":"CharSequenceConstraintTest::::validFixedSize(java.lang.String)","71":"CharSequenceConstraintTest::::invalidFixedSize(java.lang.String)","72":"CharSequenceConstraintTest::::invalidFixedSize(java.lang.String)","73":"CharSequenceConstraintTest::::invalidFixedSize(java.lang.String)","74":"CharSequenceConstraintTest::::invalidFixedSize(java.lang.String)","75":"CharSequenceConstraintTest::::invalidFixedSize(java.lang.String)","76":"CharSequenceConstraintTest::::invalidFixedSize(java.lang.String)","78":"CharSequenceConstraintTest::::validGreaterThan(java.lang.String)","79":"CharSequenceConstraintTest::::validGreaterThan(java.lang.String)","80":"CharSequenceConstraintTest::::validGreaterThan(java.lang.String)","81":"CharSequenceConstraintTest::::validGreaterThan(java.lang.String)","82":"CharSequenceConstraintTest::::validGreaterThan(java.lang.String)","83":"CharSequenceConstraintTest::::validGreaterThan(java.lang.String)","85":"CharSequenceConstraintTest::::invalidGreaterThan(java.lang.String)","86":"CharSequenceConstraintTest::::invalidGreaterThan(java.lang.String)","87":"CharSequenceConstraintTest::::invalidGreaterThan(java.lang.String)","88":"CharSequenceConstraintTest::::invalidGreaterThan(java.lang.String)","89":"CharSequenceConstraintTest::::invalidGreaterThan(java.lang.String)","90":"CharSequenceConstraintTest::::invalidGreaterThan(java.lang.String)","92":"CharSequenceConstraintTest::::validGreaterThanOrEqual(java.lang.String)","93":"CharSequenceConstraintTest::::validGreaterThanOrEqual(java.lang.String)","94":"CharSequenceConstraintTest::::validGreaterThanOrEqual(java.lang.String)","95":"CharSequenceConstraintTest::::validGreaterThanOrEqual(java.lang.String)","96":"CharSequenceConstraintTest::::validGreaterThanOrEqual(java.lang.String)","97":"CharSequenceConstraintTest::::validGreaterThanOrEqual(java.lang.String)","99":"CharSequenceConstraintTest::::invalidGreaterThanOrEqual(java.lang.String)","100":"CharSequenceConstraintTest::::invalidGreaterThanOrEqual(java.lang.String)","101":"CharSequenceConstraintTest::::invalidGreaterThanOrEqual(java.lang.String)","102":"CharSequenceConstraintTest::::invalidGreaterThanOrEqual(java.lang.String)","103":"CharSequenceConstraintTest::::invalidGreaterThanOrEqual(java.lang.String)","104":"CharSequenceConstraintTest::::invalidGreaterThanOrEqual(java.lang.String)","106":"CharSequenceConstraintTest::::ignoreFvsCharacter(java.lang.String)","107":"CharSequenceConstraintTest::::ignoreFvsCharacter(java.lang.String)","108":"CharSequenceConstraintTest::::ignoreFvsCharacter(java.lang.String)","109":"CharSequenceConstraintTest::::ignoreFvsCharacter(java.lang.String)","110":"CharSequenceConstraintTest::::ignoreFvsCharacter(java.lang.String)","111":"CharSequenceConstraintTest::::ignoreFvsCharacter(java.lang.String)","112":"CharSequenceConstraintTest::::ignoreFvsCharacter(java.lang.String)","113":"CharSequenceConstraintTest::::ignoreFvsCharacter(java.lang.String)","115":"CharSequenceConstraintTest::::ignoreIvsCharacter(java.lang.String)","116":"CharSequenceConstraintTest::::ignoreIvsCharacter(java.lang.String)","117":"CharSequenceConstraintTest::::ignoreIvsCharacter(java.lang.String)","118":"CharSequenceConstraintTest::::ignoreIvsCharacter(java.lang.String)","119":"CharSequenceConstraintTest::::ignoreIvsCharacter(java.lang.String)","120":"CharSequenceConstraintTest::::ignoreIvsCharacter(java.lang.String)","121":"CharSequenceConstraintTest::::ignoreIvsCharacter(java.lang.String)","122":"CharSequenceConstraintTest::::ignoreIvsCharacter(java.lang.String)","124":"CharSequenceConstraintTest::::validLessThan(java.lang.String)","125":"CharSequenceConstraintTest::::validLessThan(java.lang.String)","126":"CharSequenceConstraintTest::::validLessThan(java.lang.String)","127":"CharSequenceConstraintTest::::validLessThan(java.lang.String)","128":"CharSequenceConstraintTest::::validLessThan(java.lang.String)","129":"CharSequenceConstraintTest::::validLessThan(java.lang.String)","131":"CharSequenceConstraintTest::::invalidLessThan(java.lang.String)","132":"CharSequenceConstraintTest::::invalidLessThan(java.lang.String)","133":"CharSequenceConstraintTest::::invalidLessThan(java.lang.String)","134":"CharSequenceConstraintTest::::invalidLessThan(java.lang.String)","135":"CharSequenceConstraintTest::::invalidLessThan(java.lang.String)","136":"CharSequenceConstraintTest::::invalidLessThan(java.lang.String)","138":"CharSequenceConstraintTest::::validLessThanOrEqual(java.lang.String)","139":"CharSequenceConstraintTest::::validLessThanOrEqual(java.lang.String)","140":"CharSequenceConstraintTest::::validLessThanOrEqual(java.lang.String)","141":"CharSequenceConstraintTest::::validLessThanOrEqual(java.lang.String)","142":"CharSequenceConstraintTest::::validLessThanOrEqual(java.lang.String)","143":"CharSequenceConstraintTest::::validLessThanOrEqual(java.lang.String)","145":"CharSequenceConstraintTest::::invalidLessThanOrEqual(java.lang.String)","146":"CharSequenceConstraintTest::::invalidLessThanOrEqual(java.lang.String)","147":"CharSequenceConstraintTest::::invalidLessThanOrEqual(java.lang.String)","148":"CharSequenceConstraintTest::::invalidLessThanOrEqual(java.lang.String)","149":"CharSequenceConstraintTest::::invalidLessThanOrEqual(java.lang.String)","150":"CharSequenceConstraintTest::::invalidLessThanOrEqual(java.lang.String)","152":"CharSequenceConstraintTest::::validNormalizeCombiningCharacter(java.lang.String)","153":"CharSequenceConstraintTest::::validNormalizeCombiningCharacter(java.lang.String)","154":"CharSequenceConstraintTest::::validNormalizeCombiningCharacter(java.lang.String)","155":"CharSequenceConstraintTest::::validNormalizeCombiningCharacter(java.lang.String)","156":"CharSequenceConstraintTest::::validNormalizeCombiningCharacter(java.lang.String)","157":"CharSequenceConstraintTest::::validNormalizeCombiningCharacter(java.lang.String)","159":"CharSequenceConstraintTest::::validNotBlank(java.lang.String)","160":"CharSequenceConstraintTest::::validNotBlank(java.lang.String)","161":"CharSequenceConstraintTest::::validNotBlank(java.lang.String)","162":"CharSequenceConstraintTest::::validNotBlank(java.lang.String)","163":"CharSequenceConstraintTest::::validNotBlank(java.lang.String)","164":"CharSequenceConstraintTest::::validNotBlank(java.lang.String)","166":"CharSequenceConstraintTest::::invalidNotBlank(java.lang.String)","167":"CharSequenceConstraintTest::::invalidNotBlank(java.lang.String)","168":"CharSequenceConstraintTest::::invalidNotBlank(java.lang.String)","169":"CharSequenceConstraintTest::::invalidNotBlank(java.lang.String)","170":"CharSequenceConstraintTest::::invalidNotBlank(java.lang.String)","171":"CharSequenceConstraintTest::::invalidNotBlank(java.lang.String)","173":"CharSequenceConstraintTest::::validNotEmpty(java.lang.String)","174":"CharSequenceConstraintTest::::validNotEmpty(java.lang.String)","175":"CharSequenceConstraintTest::::validNotEmpty(java.lang.String)","176":"CharSequenceConstraintTest::::validNotEmpty(java.lang.String)","177":"CharSequenceConstraintTest::::validNotEmpty(java.lang.String)","178":"CharSequenceConstraintTest::::validNotEmpty(java.lang.String)","180":"CharSequenceConstraintTest::::invalidNotEmpty()","181":"CharSequenceConstraintTest::::invalidNotEmpty()","182":"CharSequenceConstraintTest::::invalidNotEmpty()","183":"CharSequenceConstraintTest::::invalidNotEmpty()","184":"CharSequenceConstraintTest::::invalidNotEmpty()","186":"CharSequenceConstraintTest::::notIgnoreFvsCharacter(java.lang.String)","187":"CharSequenceConstraintTest::::notIgnoreFvsCharacter(java.lang.String)","188":"CharSequenceConstraintTest::::notIgnoreFvsCharacter(java.lang.String)","189":"CharSequenceConstraintTest::::notIgnoreFvsCharacter(java.lang.String)","190":"CharSequenceConstraintTest::::notIgnoreFvsCharacter(java.lang.String)","191":"CharSequenceConstraintTest::::notIgnoreFvsCharacter(java.lang.String)","193":"CharSequenceConstraintTest::::notIgnoreIvsCharacter(java.lang.String)","194":"CharSequenceConstraintTest::::notIgnoreIvsCharacter(java.lang.String)","195":"CharSequenceConstraintTest::::notIgnoreIvsCharacter(java.lang.String)","196":"CharSequenceConstraintTest::::notIgnoreIvsCharacter(java.lang.String)","197":"CharSequenceConstraintTest::::notIgnoreIvsCharacter(java.lang.String)","198":"CharSequenceConstraintTest::::notIgnoreIvsCharacter(java.lang.String)","200":"CharSequenceConstraintTest::::notNormalizeCombiningCharacter(java.lang.String)","201":"CharSequenceConstraintTest::::notNormalizeCombiningCharacter(java.lang.String)","202":"CharSequenceConstraintTest::::notNormalizeCombiningCharacter(java.lang.String)","203":"CharSequenceConstraintTest::::notNormalizeCombiningCharacter(java.lang.String)","204":"CharSequenceConstraintTest::::notNormalizeCombiningCharacter(java.lang.String)","205":"CharSequenceConstraintTest::::notNormalizeCombiningCharacter(java.lang.String)","206":"CharSequenceConstraintTest::::notNormalizeCombiningCharacter(java.lang.String)","208":"CharSequenceConstraintTest::::validPattern(java.lang.String)","209":"CharSequenceConstraintTest::::validPattern(java.lang.String)","210":"CharSequenceConstraintTest::::validPattern(java.lang.String)","211":"CharSequenceConstraintTest::::validPattern(java.lang.String)","212":"CharSequenceConstraintTest::::validPattern(java.lang.String)","213":"CharSequenceConstraintTest::::validPattern(java.lang.String)","215":"CharSequenceConstraintTest::::invalidPattern(java.lang.String)","216":"CharSequenceConstraintTest::::invalidPattern(java.lang.String)","217":"CharSequenceConstraintTest::::invalidPattern(java.lang.String)","218":"CharSequenceConstraintTest::::invalidPattern(java.lang.String)","219":"CharSequenceConstraintTest::::invalidPattern(java.lang.String)","220":"CharSequenceConstraintTest::::invalidPattern(java.lang.String)","222":"CharSequenceConstraintTest::::validPattern_pattern(java.lang.String)","223":"CharSequenceConstraintTest::::validPattern_pattern(java.lang.String)","224":"CharSequenceConstraintTest::::validPattern_pattern(java.lang.String)","225":"CharSequenceConstraintTest::::validPattern_pattern(java.lang.String)","226":"CharSequenceConstraintTest::::validPattern_pattern(java.lang.String)","227":"CharSequenceConstraintTest::::validPattern_pattern(java.lang.String)","228":"CharSequenceConstraintTest::::validPattern_pattern(java.lang.String)","230":"CharSequenceConstraintTest::::invalidPattern_pattern(java.lang.String)","231":"CharSequenceConstraintTest::::invalidPattern_pattern(java.lang.String)","232":"CharSequenceConstraintTest::::invalidPattern_pattern(java.lang.String)","233":"CharSequenceConstraintTest::::invalidPattern_pattern(java.lang.String)","234":"CharSequenceConstraintTest::::invalidPattern_pattern(java.lang.String)","235":"CharSequenceConstraintTest::::invalidPattern_pattern(java.lang.String)","236":"CharSequenceConstraintTest::::invalidPattern_pattern(java.lang.String)","238":"CharSequenceConstraintTest::::validPattern_patternSupplier(java.lang.String)","239":"CharSequenceConstraintTest::::validPattern_patternSupplier(java.lang.String)","240":"CharSequenceConstraintTest::::validPattern_patternSupplier(java.lang.String)","241":"CharSequenceConstraintTest::::validPattern_patternSupplier(java.lang.String)","242":"CharSequenceConstraintTest::::validPattern_patternSupplier(java.lang.String)","243":"CharSequenceConstraintTest::::validPattern_patternSupplier(java.lang.String)","244":"CharSequenceConstraintTest::::validPattern_patternSupplier(java.lang.String)","246":"CharSequenceConstraintTest::::invalidPattern_patternSupplier(java.lang.String)","247":"CharSequenceConstraintTest::::invalidPattern_patternSupplier(java.lang.String)","248":"CharSequenceConstraintTest::::invalidPattern_patternSupplier(java.lang.String)","249":"CharSequenceConstraintTest::::invalidPattern_patternSupplier(java.lang.String)","250":"CharSequenceConstraintTest::::invalidPattern_patternSupplier(java.lang.String)","251":"CharSequenceConstraintTest::::invalidPattern_patternSupplier(java.lang.String)","252":"CharSequenceConstraintTest::::invalidPattern_patternSupplier(java.lang.String)","254":"CharSequenceConstraintTest::::validUrl(java.lang.String)","255":"CharSequenceConstraintTest::::validUrl(java.lang.String)","256":"CharSequenceConstraintTest::::validUrl(java.lang.String)","257":"CharSequenceConstraintTest::::validUrl(java.lang.String)","258":"CharSequenceConstraintTest::::validUrl(java.lang.String)","259":"CharSequenceConstraintTest::::validUrl(java.lang.String)","261":"CharSequenceConstraintTest::::invalidUrl(java.lang.String)","262":"CharSequenceConstraintTest::::invalidUrl(java.lang.String)","263":"CharSequenceConstraintTest::::invalidUrl(java.lang.String)","264":"CharSequenceConstraintTest::::invalidUrl(java.lang.String)","265":"CharSequenceConstraintTest::::invalidUrl(java.lang.String)","266":"CharSequenceConstraintTest::::invalidUrl(java.lang.String)","268":"CharSequenceConstraintTest::::validUUID(java.lang.String)","269":"CharSequenceConstraintTest::::validUUID(java.lang.String)","270":"CharSequenceConstraintTest::::validUUID(java.lang.String)","271":"CharSequenceConstraintTest::::validUUID(java.lang.String)","272":"CharSequenceConstraintTest::::validUUID(java.lang.String)","273":"CharSequenceConstraintTest::::validUUID(java.lang.String)","275":"CharSequenceConstraintTest::::randomUUIDs()","276":"CharSequenceConstraintTest::::randomUUIDs()","277":"CharSequenceConstraintTest::::randomUUIDs()","279":"CharSequenceConstraintTest::::invalidUUID(java.lang.String)","280":"CharSequenceConstraintTest::::invalidUUID(java.lang.String)","281":"CharSequenceConstraintTest::::invalidUUID(java.lang.String)","282":"CharSequenceConstraintTest::::invalidUUID(java.lang.String)","283":"CharSequenceConstraintTest::::invalidUUID(java.lang.String)","284":"CharSequenceConstraintTest::::invalidUUID(java.lang.String)","285":"CharSequenceConstraintTest::::invalidUUID(java.lang.String)","287":"CharSequenceConstraintTest::::validIsByte(java.lang.String)","288":"CharSequenceConstraintTest::::validIsByte(java.lang.String)","289":"CharSequenceConstraintTest::::validIsByte(java.lang.String)","290":"CharSequenceConstraintTest::::validIsByte(java.lang.String)","291":"CharSequenceConstraintTest::::validIsByte(java.lang.String)","292":"CharSequenceConstraintTest::::validIsByte(java.lang.String)","294":"CharSequenceConstraintTest::::invalidIsByte(java.lang.String)","295":"CharSequenceConstraintTest::::invalidIsByte(java.lang.String)","296":"CharSequenceConstraintTest::::invalidIsByte(java.lang.String)","297":"CharSequenceConstraintTest::::invalidIsByte(java.lang.String)","298":"CharSequenceConstraintTest::::invalidIsByte(java.lang.String)","299":"CharSequenceConstraintTest::::invalidIsByte(java.lang.String)","301":"CharSequenceConstraintTest::::validIsShort(java.lang.String)","302":"CharSequenceConstraintTest::::validIsShort(java.lang.String)","303":"CharSequenceConstraintTest::::validIsShort(java.lang.String)","304":"CharSequenceConstraintTest::::validIsShort(java.lang.String)","305":"CharSequenceConstraintTest::::validIsShort(java.lang.String)","306":"CharSequenceConstraintTest::::validIsShort(java.lang.String)","308":"CharSequenceConstraintTest::::invalidIsShort(java.lang.String)","309":"CharSequenceConstraintTest::::invalidIsShort(java.lang.String)","310":"CharSequenceConstraintTest::::invalidIsShort(java.lang.String)","311":"CharSequenceConstraintTest::::invalidIsShort(java.lang.String)","312":"CharSequenceConstraintTest::::invalidIsShort(java.lang.String)","313":"CharSequenceConstraintTest::::invalidIsShort(java.lang.String)","315":"CharSequenceConstraintTest::::validIsInteger(java.lang.String)","316":"CharSequenceConstraintTest::::validIsInteger(java.lang.String)","317":"CharSequenceConstraintTest::::validIsInteger(java.lang.String)","318":"CharSequenceConstraintTest::::validIsInteger(java.lang.String)","319":"CharSequenceConstraintTest::::validIsInteger(java.lang.String)","320":"CharSequenceConstraintTest::::validIsInteger(java.lang.String)","322":"CharSequenceConstraintTest::::invalidIsInteger(java.lang.String)","323":"CharSequenceConstraintTest::::invalidIsInteger(java.lang.String)","324":"CharSequenceConstraintTest::::invalidIsInteger(java.lang.String)","325":"CharSequenceConstraintTest::::invalidIsInteger(java.lang.String)","326":"CharSequenceConstraintTest::::invalidIsInteger(java.lang.String)","327":"CharSequenceConstraintTest::::invalidIsInteger(java.lang.String)","329":"CharSequenceConstraintTest::::validIsLong(java.lang.String)","330":"CharSequenceConstraintTest::::validIsLong(java.lang.String)","331":"CharSequenceConstraintTest::::validIsLong(java.lang.String)","332":"CharSequenceConstraintTest::::validIsLong(java.lang.String)","333":"CharSequenceConstraintTest::::validIsLong(java.lang.String)","334":"CharSequenceConstraintTest::::validIsLong(java.lang.String)","336":"CharSequenceConstraintTest::::invalidIsLong(java.lang.String)","337":"CharSequenceConstraintTest::::invalidIsLong(java.lang.String)","338":"CharSequenceConstraintTest::::invalidIsLong(java.lang.String)","339":"CharSequenceConstraintTest::::invalidIsLong(java.lang.String)","340":"CharSequenceConstraintTest::::invalidIsLong(java.lang.String)","341":"CharSequenceConstraintTest::::invalidIsLong(java.lang.String)","343":"CharSequenceConstraintTest::::validIsFloat(java.lang.String)","344":"CharSequenceConstraintTest::::validIsFloat(java.lang.String)","345":"CharSequenceConstraintTest::::validIsFloat(java.lang.String)","346":"CharSequenceConstraintTest::::validIsFloat(java.lang.String)","347":"CharSequenceConstraintTest::::validIsFloat(java.lang.String)","348":"CharSequenceConstraintTest::::validIsFloat(java.lang.String)","350":"CharSequenceConstraintTest::::invalidIsFloat(java.lang.String)","351":"CharSequenceConstraintTest::::invalidIsFloat(java.lang.String)","352":"CharSequenceConstraintTest::::invalidIsFloat(java.lang.String)","353":"CharSequenceConstraintTest::::invalidIsFloat(java.lang.String)","354":"CharSequenceConstraintTest::::invalidIsFloat(java.lang.String)","355":"CharSequenceConstraintTest::::invalidIsFloat(java.lang.String)","357":"CharSequenceConstraintTest::::validIsDouble(java.lang.String)","358":"CharSequenceConstraintTest::::validIsDouble(java.lang.String)","359":"CharSequenceConstraintTest::::validIsDouble(java.lang.String)","360":"CharSequenceConstraintTest::::validIsDouble(java.lang.String)","361":"CharSequenceConstraintTest::::validIsDouble(java.lang.String)","362":"CharSequenceConstraintTest::::validIsDouble(java.lang.String)","364":"CharSequenceConstraintTest::::invalidIsDouble(java.lang.String)","365":"CharSequenceConstraintTest::::invalidIsDouble(java.lang.String)","366":"CharSequenceConstraintTest::::invalidIsDouble(java.lang.String)","367":"CharSequenceConstraintTest::::invalidIsDouble(java.lang.String)","368":"CharSequenceConstraintTest::::invalidIsDouble(java.lang.String)","369":"CharSequenceConstraintTest::::invalidIsDouble(java.lang.String)","371":"CharSequenceConstraintTest::::validIsBigInteger(java.lang.String)","372":"CharSequenceConstraintTest::::validIsBigInteger(java.lang.String)","373":"CharSequenceConstraintTest::::validIsBigInteger(java.lang.String)","374":"CharSequenceConstraintTest::::validIsBigInteger(java.lang.String)","375":"CharSequenceConstraintTest::::validIsBigInteger(java.lang.String)","376":"CharSequenceConstraintTest::::validIsBigInteger(java.lang.String)","378":"CharSequenceConstraintTest::::invalidIsBigInteger(java.lang.String)","379":"CharSequenceConstraintTest::::invalidIsBigInteger(java.lang.String)","380":"CharSequenceConstraintTest::::invalidIsBigInteger(java.lang.String)","381":"CharSequenceConstraintTest::::invalidIsBigInteger(java.lang.String)","382":"CharSequenceConstraintTest::::invalidIsBigInteger(java.lang.String)","383":"CharSequenceConstraintTest::::invalidIsBigInteger(java.lang.String)","385":"CharSequenceConstraintTest::::validIsBigDecimal(java.lang.String)","386":"CharSequenceConstraintTest::::validIsBigDecimal(java.lang.String)","387":"CharSequenceConstraintTest::::validIsBigDecimal(java.lang.String)","388":"CharSequenceConstraintTest::::validIsBigDecimal(java.lang.String)","389":"CharSequenceConstraintTest::::validIsBigDecimal(java.lang.String)","390":"CharSequenceConstraintTest::::validIsBigDecimal(java.lang.String)","392":"CharSequenceConstraintTest::::invalidIsBigDecimal(java.lang.String)","393":"CharSequenceConstraintTest::::invalidIsBigDecimal(java.lang.String)","394":"CharSequenceConstraintTest::::invalidIsBigDecimal(java.lang.String)","395":"CharSequenceConstraintTest::::invalidIsBigDecimal(java.lang.String)","396":"CharSequenceConstraintTest::::invalidIsBigDecimal(java.lang.String)","397":"CharSequenceConstraintTest::::invalidIsBigDecimal(java.lang.String)","399":"CharSequenceConstraintTest::::validLuhn(java.lang.String)","400":"CharSequenceConstraintTest::::validLuhn(java.lang.String)","401":"CharSequenceConstraintTest::::validLuhn(java.lang.String)","402":"CharSequenceConstraintTest::::validLuhn(java.lang.String)","403":"CharSequenceConstraintTest::::validLuhn(java.lang.String)","404":"CharSequenceConstraintTest::::validLuhn(java.lang.String)","405":"CharSequenceConstraintTest::::validLuhn(java.lang.String)","406":"CharSequenceConstraintTest::::validLuhn(java.lang.String)","408":"CharSequenceConstraintTest::::invalidLuhn(java.lang.String)","409":"CharSequenceConstraintTest::::invalidLuhn(java.lang.String)","410":"CharSequenceConstraintTest::::invalidLuhn(java.lang.String)","411":"CharSequenceConstraintTest::::invalidLuhn(java.lang.String)","412":"CharSequenceConstraintTest::::invalidLuhn(java.lang.String)","413":"CharSequenceConstraintTest::::invalidLuhn(java.lang.String)","415":"CharSequenceConstraintTest::::validIpv4(java.lang.String)","416":"CharSequenceConstraintTest::::validIpv4(java.lang.String)","417":"CharSequenceConstraintTest::::validIpv4(java.lang.String)","418":"CharSequenceConstraintTest::::validIpv4(java.lang.String)","419":"CharSequenceConstraintTest::::validIpv4(java.lang.String)","420":"CharSequenceConstraintTest::::validIpv4(java.lang.String)","422":"CharSequenceConstraintTest::::invalidIpv4(java.lang.String)","423":"CharSequenceConstraintTest::::invalidIpv4(java.lang.String)","424":"CharSequenceConstraintTest::::invalidIpv4(java.lang.String)","425":"CharSequenceConstraintTest::::invalidIpv4(java.lang.String)","426":"CharSequenceConstraintTest::::invalidIpv4(java.lang.String)","427":"CharSequenceConstraintTest::::invalidIpv4(java.lang.String)","429":"CharSequenceConstraintTest::::validIpv6(java.lang.String)","430":"CharSequenceConstraintTest::::validIpv6(java.lang.String)","431":"CharSequenceConstraintTest::::validIpv6(java.lang.String)","432":"CharSequenceConstraintTest::::validIpv6(java.lang.String)","433":"CharSequenceConstraintTest::::validIpv6(java.lang.String)","434":"CharSequenceConstraintTest::::validIpv6(java.lang.String)","435":"CharSequenceConstraintTest::::validIpv6(java.lang.String)","436":"CharSequenceConstraintTest::::validIpv6(java.lang.String)","437":"CharSequenceConstraintTest::::validIpv6(java.lang.String)","438":"CharSequenceConstraintTest::::validIpv6(java.lang.String)","440":"CharSequenceConstraintTest::::invalidIpv6(java.lang.String)","441":"CharSequenceConstraintTest::::invalidIpv6(java.lang.String)","442":"CharSequenceConstraintTest::::invalidIpv6(java.lang.String)","443":"CharSequenceConstraintTest::::invalidIpv6(java.lang.String)","444":"CharSequenceConstraintTest::::invalidIpv6(java.lang.String)","445":"CharSequenceConstraintTest::::invalidIpv6(java.lang.String)","447":"CharSequenceConstraintTest::::validStartsWith(java.lang.String)","448":"CharSequenceConstraintTest::::validStartsWith(java.lang.String)","449":"CharSequenceConstraintTest::::validStartsWith(java.lang.String)","450":"CharSequenceConstraintTest::::validStartsWith(java.lang.String)","451":"CharSequenceConstraintTest::::validStartsWith(java.lang.String)","452":"CharSequenceConstraintTest::::validStartsWith(java.lang.String)","453":"CharSequenceConstraintTest::::validStartsWith(java.lang.String)","454":"CharSequenceConstraintTest::::validStartsWith(java.lang.String)","455":"CharSequenceConstraintTest::::validStartsWith(java.lang.String)","456":"CharSequenceConstraintTest::::validStartsWith(java.lang.String)","458":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","459":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","460":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","461":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","462":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","463":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","464":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","465":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","466":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","467":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","468":"CharSequenceConstraintTest::::validStartsWithStringBuilder(java.lang.String)","470":"CharSequenceConstraintTest::::invalidStartsWith(java.lang.String)","471":"CharSequenceConstraintTest::::invalidStartsWith(java.lang.String)","472":"CharSequenceConstraintTest::::invalidStartsWith(java.lang.String)","473":"CharSequenceConstraintTest::::invalidStartsWith(java.lang.String)","474":"CharSequenceConstraintTest::::invalidStartsWith(java.lang.String)","475":"CharSequenceConstraintTest::::invalidStartsWith(java.lang.String)","476":"CharSequenceConstraintTest::::invalidStartsWith(java.lang.String)","477":"CharSequenceConstraintTest::::invalidStartsWith(java.lang.String)","478":"CharSequenceConstraintTest::::invalidStartsWith(java.lang.String)","480":"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)","481":"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)","482":"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)","483":"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)","484":"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)","485":"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)","486":"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)","487":"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)","488":"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)","489":"CharSequenceConstraintTest::::invalidStartsWithStringBuilder(java.lang.String)","491":"CharSequenceConstraintTest::::validEndsWith(java.lang.String)","492":"CharSequenceConstraintTest::::validEndsWith(java.lang.String)","493":"CharSequenceConstraintTest::::validEndsWith(java.lang.String)","494":"CharSequenceConstraintTest::::validEndsWith(java.lang.String)","495":"CharSequenceConstraintTest::::validEndsWith(java.lang.String)","496":"CharSequenceConstraintTest::::validEndsWith(java.lang.String)","497":"CharSequenceConstraintTest::::validEndsWith(java.lang.String)","498":"CharSequenceConstraintTest::::validEndsWith(java.lang.String)","499":"CharSequenceConstraintTest::::validEndsWith(java.lang.String)","501":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","502":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","503":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","504":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","505":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","506":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","507":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","508":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","509":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","510":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","511":"CharSequenceConstraintTest::::validEndsWithStringBuilder(java.lang.String)","513":"CharSequenceConstraintTest::::invalidEndsWith(java.lang.String)","514":"CharSequenceConstraintTest::::invalidEndsWith(java.lang.String)","515":"CharSequenceConstraintTest::::invalidEndsWith(java.lang.String)","516":"CharSequenceConstraintTest::::invalidEndsWith(java.lang.String)","517":"CharSequenceConstraintTest::::invalidEndsWith(java.lang.String)","518":"CharSequenceConstraintTest::::invalidEndsWith(java.lang.String)","519":"CharSequenceConstraintTest::::invalidEndsWith(java.lang.String)","520":"CharSequenceConstraintTest::::invalidEndsWith(java.lang.String)","521":"CharSequenceConstraintTest::::invalidEndsWith(java.lang.String)","523":"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)","524":"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)","525":"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)","526":"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)","527":"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)","528":"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)","529":"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)","530":"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)","531":"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)","532":"CharSequenceConstraintTest::::invalidEndsWithStringBuilder(java.lang.String)","534":"CharSequenceConstraintTest::::validLocalDate(java.lang.String)","535":"CharSequenceConstraintTest::::validLocalDate(java.lang.String)","536":"CharSequenceConstraintTest::::validLocalDate(java.lang.String)","537":"CharSequenceConstraintTest::::validLocalDate(java.lang.String)","538":"CharSequenceConstraintTest::::validLocalDate(java.lang.String)","539":"CharSequenceConstraintTest::::validLocalDate(java.lang.String)","540":"CharSequenceConstraintTest::::validLocalDate(java.lang.String)","542":"CharSequenceConstraintTest::::inValidLocalDateWithPattern(java.lang.String)","543":"CharSequenceConstraintTest::::inValidLocalDateWithPattern(java.lang.String)","544":"CharSequenceConstraintTest::::inValidLocalDateWithPattern(java.lang.String)","545":"CharSequenceConstraintTest::::inValidLocalDateWithPattern(java.lang.String)","546":"CharSequenceConstraintTest::::inValidLocalDateWithPattern(java.lang.String)","547":"CharSequenceConstraintTest::::inValidLocalDateWithPattern(java.lang.String)","548":"CharSequenceConstraintTest::::inValidLocalDateWithPattern(java.lang.String)","550":"CharSequenceConstraintTest::::validLocalDateWithPattern(java.lang.String)","551":"CharSequenceConstraintTest::::validLocalDateWithPattern(java.lang.String)","552":"CharSequenceConstraintTest::::validLocalDateWithPattern(java.lang.String)","553":"CharSequenceConstraintTest::::validLocalDateWithPattern(java.lang.String)","554":"CharSequenceConstraintTest::::validLocalDateWithPattern(java.lang.String)","555":"CharSequenceConstraintTest::::validLocalDateWithPattern(java.lang.String)","556":"CharSequenceConstraintTest::::validLocalDateWithPattern(java.lang.String)"},"tests":[{"test_lines":[35,40],"covered_lines":[63,64,69,70,77,78,81,82,83,84,121,123],"label":"CharSequenceConstraint::::contains(java.lang.CharSequence)"},{"test_lines":[42,47],"covered_lines":[63,64,69,70,77,78,81,82,83,84,121,123],"label":"CharSequenceConstraint::::contains(java.lang.CharSequence)"},{"test_lines":[49,55],"covered_lines":[63,64,69,70,77,78,81,82,83,84,154,155,156,158,160,436,437,438,443,444,445],"label":"CharSequenceConstraint::::email()"},{"test_lines":[57,62],"covered_lines":[63,64,69,70,77,78,81,82,83,84,154,155,158,160,436,437,438,443,444,445],"label":"CharSequenceConstraint::::email()"},{"test_lines":[64,69],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[71,76],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[78,83],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[85,90],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[92,97],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[99,104],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[106,113],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,428,429,430,431,432,436,437,438,443,444,445],"label":"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)"},{"test_lines":[115,122],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,428,429,430,431,432,436,437,438,443,444,445],"label":"CharSequenceConstraint::::variant(java.util.function.Function<am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder, am.ik.yavi.constraint.charsequence.variant.VariantOptions.Builder>)"},{"test_lines":[124,129],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[131,136],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[138,143],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[145,150],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[152,157],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[159,164],"covered_lines":[63,64,69,70,77,78,81,82,83,84,310,311,312,314,450,453,454,457,460],"label":"CharSequenceConstraint::::notBlank()"},{"test_lines":[166,171],"covered_lines":[63,64,69,70,77,78,81,82,83,84,310,311,312,314,450,451,453,454,455,457,460],"label":"CharSequenceConstraint::::notBlank()"},{"test_lines":[173,178],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[180,184],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[186,191],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[193,198],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,436,437,438,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[200,206],"covered_lines":[63,64,69,70,77,78,81,82,83,84,96,303,305,306,436,437,443,444,445],"label":"CharSequenceConstraint::::size()"},{"test_lines":[208,213],"covered_lines":[63,64,69,70,77,78,81,82,83,84,318,320],"label":"CharSequenceConstraint::::pattern(java.lang.String)"},{"test_lines":[215,220],"covered_lines":[63,64,69,70,77,78,81,82,83,84,318,320],"label":"CharSequenceConstraint::::pattern(java.lang.String)"},{"test_lines":[222,228],"covered_lines":[63,64,69,70,77,78,81,82,83,84,327,329],"label":"CharSequenceConstraint::::pattern(java.util.regex.Pattern)"},{"test_lines":[230,236],"covered_lines":[63,64,69,70,77,78,81,82,83,84,327,329],"label":"CharSequenceConstraint::::pattern(java.util.regex.Pattern)"},{"test_lines":[238,244],"covered_lines":[63,64,69,70,77,78,81,82,83,84,336,337,340],"label":"CharSequenceConstraint::::pattern(java.util.function.Supplier<java.util.regex.Pattern>)"},{"test_lines":[246,252],"covered_lines":[63,64,69,70,77,78,81,82,83,84,336,337,340],"label":"CharSequenceConstraint::::pattern(java.util.function.Supplier<java.util.regex.Pattern>)"},{"test_lines":[254,259],"covered_lines":[63,64,69,70,77,78,81,82,83,84,364,365,366,369,370,376,436,437,438,443,444,445],"label":"CharSequenceConstraint::::url()"},{"test_lines":[261,266],"covered_lines":[63,64,69,70,77,78,81,82,83,84,364,365,372,373,376,436,437,438,443,444,445],"label":"CharSequenceConstraint::::url()"},{"test_lines":[268,273],"covered_lines":[63,64,69,70,77,78,81,82,83,84,383,384,387,389,436,437,438,443,444,445],"label":"CharSequenceConstraint::::uuid()"},{"test_lines":[279,285],"covered_lines":[63,64,69,70,77,78,81,82,83,84,383,384,387,389,436,437,438,443,444,445],"label":"CharSequenceConstraint::::uuid()"},{"test_lines":[287,292],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,181,182,188,212,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isByte()"},{"test_lines":[294,299],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,184,185,188,212,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isByte()"},{"test_lines":[301,306],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,181,182,188,219,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isShort()"},{"test_lines":[308,313],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,184,185,188,219,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isShort()"},{"test_lines":[315,320],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,181,182,188,226,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isInteger()"},{"test_lines":[322,327],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,184,185,188,226,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isInteger()"},{"test_lines":[329,334],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,181,182,188,233,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isLong()"},{"test_lines":[336,341],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,184,185,188,233,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isLong()"},{"test_lines":[343,348],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,181,182,188,240,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isFloat()"},{"test_lines":[350,355],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,184,185,188,240,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isFloat()"},{"test_lines":[357,362],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,181,182,188,247,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isDouble()"},{"test_lines":[364,369],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,184,185,188,247,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isDouble()"},{"test_lines":[371,376],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,181,182,188,254,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isBigInteger()"},{"test_lines":[378,383],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,184,185,188,254,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isBigInteger()"},{"test_lines":[385,390],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,181,182,188,261,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isBigDecimal()"},{"test_lines":[392,397],"covered_lines":[63,64,69,70,77,78,81,82,83,84,176,177,184,185,188,261,436,437,438,443,444,445],"label":"CharSequenceConstraint::::isBigDecimal()"},{"test_lines":[399,406],"covered_lines":[63,64,69,70,77,78,81,82,83,84,396,398,404,405,406,407,410,414,415,416,417,418,421,423],"label":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)"},{"test_lines":[408,413],"covered_lines":[63,64,69,70,77,78,81,82,83,84,396,398,404,405,406,407,410,412,413,414,415,416,417,418,421,423],"label":"CharSequenceConstraint::::luhnCheck(java.lang.CharSequence)"},{"test_lines":[415,420],"covered_lines":[63,64,69,70,77,78,81,82,83,84,347,348,350],"label":"CharSequenceConstraint::::ipv4()"},{"test_lines":[422,427],"covered_lines":[63,64,69,70,77,78,81,82,83,84,347,348,350],"label":"CharSequenceConstraint::::ipv4()"},{"test_lines":[429,438],"covered_lines":[63,64,69,70,77,78,81,82,83,84,357,358,360],"label":"CharSequenceConstraint::::ipv6()"},{"test_lines":[440,445],"covered_lines":[63,64,69,70,77,78,81,82,83,84,357,358,360],"label":"CharSequenceConstraint::::ipv6()"},{"test_lines":[447,456],"covered_lines":[63,64,69,70,77,78,81,82,83,84,133,134,135,137],"label":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)"},{"test_lines":[458,468],"covered_lines":[63,64,69,70,77,78,81,82,83,84,133,134,135,137],"label":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)"},{"test_lines":[470,478],"covered_lines":[63,64,69,70,77,78,81,82,83,84,133,134,135,137],"label":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)"},{"test_lines":[480,489],"covered_lines":[63,64,69,70,77,78,81,82,83,84,133,134,135,137],"label":"CharSequenceConstraint::::startsWith(java.lang.CharSequence)"},{"test_lines":[491,499],"covered_lines":[63,64,69,70,77,78,81,82,83,84,147,148,150],"label":"CharSequenceConstraint::::endsWith(java.lang.CharSequence)"},{"test_lines":[501,511],"covered_lines":[63,64,69,70,77,78,81,82,83,84,147,148,150],"label":"CharSequenceConstraint::::endsWith(java.lang.CharSequence)"},{"test_lines":[513,521],"covered_lines":[63,64,69,70,77,78,81,82,83,84,147,148,150],"label":"CharSequenceConstraint::::endsWith(java.lang.CharSequence)"},{"test_lines":[523,532],"covered_lines":[63,64,69,70,77,78,81,82,83,84,147,148,150],"label":"CharSequenceConstraint::::endsWith(java.lang.CharSequence)"},{"test_lines":[534,540],"covered_lines":[63,64,69,70,77,78,81,82,83,84,195,197,198,199,205,268],"label":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)"},{"test_lines":[542,548],"covered_lines":[63,64,69,70,77,78,81,82,83,84,195,197,201,202,205,285],"label":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)"},{"test_lines":[550,556],"covered_lines":[63,64,69,70,77,78,81,82,83,84,195,197,198,199,205,285],"label":"CharSequenceConstraint::::isLocalDatePattern(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/IntegerConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.function.Predicate;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","\n","public class IntegerConstraint<T>\n","\t\textends NumericConstraintBase<T, Integer, IntegerConstraint<T>> {\n","\t@Override\n","\tpublic IntegerConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Integer> isGreaterThan(Integer min) {\n","\t\treturn x -> x > min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Integer> isGreaterThanOrEqual(Integer min) {\n","\t\treturn x -> x >= min;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Integer> isLessThan(Integer max) {\n","\t\treturn x -> x < max;\n","\t}\n","\n","\t@Override\n","\tprotected Predicate<Integer> isLessThanOrEqual(Integer max) {\n","\t\treturn x -> x <= max;\n","\t}\n","\n","\t@Override\n","\tprotected Integer zeroValue() {\n","\t\treturn 0;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import am.ik.yavi.constraint.base.NumericConstraintBase;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.ValueSource;\n","\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class IntegerConstraintTest {\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 101, 150 })\n","\tvoid validGreaterThan(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(c -> c.greaterThan(100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 100, -50 })\n","\tvoid invalidGreaterThan(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(c -> c.greaterThan(100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 101, 100 })\n","\tvoid validGreaterThanOrEqual(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(c -> c.greaterThanOrEqual(100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 99, -50 })\n","\tvoid invalidGreaterThanOrEqual(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(c -> c.greaterThanOrEqual(100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 99, -50 })\n","\tvoid validLessThan(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(c -> c.lessThan(100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 100, 150 })\n","\tvoid invalidLessThan(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(c -> c.lessThan(100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 99, 100 })\n","\tvoid validLessThanOrEqual(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(c -> c.lessThanOrEqual(100));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 101, 150 })\n","\tvoid invalidLessThanOrEqual(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(c -> c.lessThanOrEqual(100));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 101, 150 })\n","\tvoid validPositive(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { -101, -150, 0 })\n","\tvoid invalidPositive(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(NumericConstraintBase::positive);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 9, 100, 0 })\n","\tvoid invalidNegative(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { -100, -10 })\n","\tvoid validNegative(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(NumericConstraintBase::negative);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 99, 100, 0 })\n","\tvoid validPositiveOrZero(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { -101, -12 })\n","\tvoid invalidPositiveOrZero(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::positiveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 99, 100 })\n","\tvoid invalidNegaitveOrZero(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { -101, -120, 0 })\n","\tvoid validNegaitveOrZero(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negaitveOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { 99, 100 })\n","\tvoid invalidNegativeOrZero(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@ValueSource(ints = { -101, -120, 0 })\n","\tvoid validNegativeOrZero(int value) {\n","\t\tPredicate<Integer> predicate = retrievePredicate(\n","\t\t\t\tNumericConstraintBase::negativeOrZero);\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\tprivate static Predicate<Integer> retrievePredicate(\n","\t\t\tFunction<IntegerConstraint<Integer>, IntegerConstraint<Integer>> constraint) {\n","\t\treturn constraint.apply(new IntegerConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"IntegerConstraint::::cast()":[24,27],"IntegerConstraint::::isGreaterThan(java.lang.Integer)":[29,32],"IntegerConstraint::::isGreaterThanOrEqual(java.lang.Integer)":[34,37],"IntegerConstraint::::isLessThan(java.lang.Integer)":[39,42],"IntegerConstraint::::isLessThanOrEqual(java.lang.Integer)":[44,47],"IntegerConstraint::::zeroValue()":[49,52]},"test_method_lines_dic":{"IntegerConstraintTest::::validGreaterThan(int)":[29,34],"IntegerConstraintTest::::invalidGreaterThan(int)":[36,41],"IntegerConstraintTest::::validGreaterThanOrEqual(int)":[43,48],"IntegerConstraintTest::::invalidGreaterThanOrEqual(int)":[50,55],"IntegerConstraintTest::::validLessThan(int)":[57,62],"IntegerConstraintTest::::invalidLessThan(int)":[64,69],"IntegerConstraintTest::::validLessThanOrEqual(int)":[71,76],"IntegerConstraintTest::::invalidLessThanOrEqual(int)":[78,83],"IntegerConstraintTest::::validPositive(int)":[85,90],"IntegerConstraintTest::::invalidPositive(int)":[92,97],"IntegerConstraintTest::::invalidNegative(int)":[99,104],"IntegerConstraintTest::::validNegative(int)":[106,111],"IntegerConstraintTest::::validPositiveOrZero(int)":[113,119],"IntegerConstraintTest::::invalidPositiveOrZero(int)":[121,127],"IntegerConstraintTest::::invalidNegaitveOrZero(int)":[129,135],"IntegerConstraintTest::::validNegaitveOrZero(int)":[137,143],"IntegerConstraintTest::::invalidNegativeOrZero(int)":[145,151],"IntegerConstraintTest::::validNegativeOrZero(int)":[153,159]},"reverse_method_lines_dic":{"24":"IntegerConstraint::::cast()","25":"IntegerConstraint::::cast()","26":"IntegerConstraint::::cast()","27":"IntegerConstraint::::cast()","29":"IntegerConstraint::::isGreaterThan(java.lang.Integer)","30":"IntegerConstraint::::isGreaterThan(java.lang.Integer)","31":"IntegerConstraint::::isGreaterThan(java.lang.Integer)","32":"IntegerConstraint::::isGreaterThan(java.lang.Integer)","34":"IntegerConstraint::::isGreaterThanOrEqual(java.lang.Integer)","35":"IntegerConstraint::::isGreaterThanOrEqual(java.lang.Integer)","36":"IntegerConstraint::::isGreaterThanOrEqual(java.lang.Integer)","37":"IntegerConstraint::::isGreaterThanOrEqual(java.lang.Integer)","39":"IntegerConstraint::::isLessThan(java.lang.Integer)","40":"IntegerConstraint::::isLessThan(java.lang.Integer)","41":"IntegerConstraint::::isLessThan(java.lang.Integer)","42":"IntegerConstraint::::isLessThan(java.lang.Integer)","44":"IntegerConstraint::::isLessThanOrEqual(java.lang.Integer)","45":"IntegerConstraint::::isLessThanOrEqual(java.lang.Integer)","46":"IntegerConstraint::::isLessThanOrEqual(java.lang.Integer)","47":"IntegerConstraint::::isLessThanOrEqual(java.lang.Integer)","49":"IntegerConstraint::::zeroValue()","50":"IntegerConstraint::::zeroValue()","51":"IntegerConstraint::::zeroValue()","52":"IntegerConstraint::::zeroValue()"},"test_reverse_method_lines_dic":{"29":"IntegerConstraintTest::::validGreaterThan(int)","30":"IntegerConstraintTest::::validGreaterThan(int)","31":"IntegerConstraintTest::::validGreaterThan(int)","32":"IntegerConstraintTest::::validGreaterThan(int)","33":"IntegerConstraintTest::::validGreaterThan(int)","34":"IntegerConstraintTest::::validGreaterThan(int)","36":"IntegerConstraintTest::::invalidGreaterThan(int)","37":"IntegerConstraintTest::::invalidGreaterThan(int)","38":"IntegerConstraintTest::::invalidGreaterThan(int)","39":"IntegerConstraintTest::::invalidGreaterThan(int)","40":"IntegerConstraintTest::::invalidGreaterThan(int)","41":"IntegerConstraintTest::::invalidGreaterThan(int)","43":"IntegerConstraintTest::::validGreaterThanOrEqual(int)","44":"IntegerConstraintTest::::validGreaterThanOrEqual(int)","45":"IntegerConstraintTest::::validGreaterThanOrEqual(int)","46":"IntegerConstraintTest::::validGreaterThanOrEqual(int)","47":"IntegerConstraintTest::::validGreaterThanOrEqual(int)","48":"IntegerConstraintTest::::validGreaterThanOrEqual(int)","50":"IntegerConstraintTest::::invalidGreaterThanOrEqual(int)","51":"IntegerConstraintTest::::invalidGreaterThanOrEqual(int)","52":"IntegerConstraintTest::::invalidGreaterThanOrEqual(int)","53":"IntegerConstraintTest::::invalidGreaterThanOrEqual(int)","54":"IntegerConstraintTest::::invalidGreaterThanOrEqual(int)","55":"IntegerConstraintTest::::invalidGreaterThanOrEqual(int)","57":"IntegerConstraintTest::::validLessThan(int)","58":"IntegerConstraintTest::::validLessThan(int)","59":"IntegerConstraintTest::::validLessThan(int)","60":"IntegerConstraintTest::::validLessThan(int)","61":"IntegerConstraintTest::::validLessThan(int)","62":"IntegerConstraintTest::::validLessThan(int)","64":"IntegerConstraintTest::::invalidLessThan(int)","65":"IntegerConstraintTest::::invalidLessThan(int)","66":"IntegerConstraintTest::::invalidLessThan(int)","67":"IntegerConstraintTest::::invalidLessThan(int)","68":"IntegerConstraintTest::::invalidLessThan(int)","69":"IntegerConstraintTest::::invalidLessThan(int)","71":"IntegerConstraintTest::::validLessThanOrEqual(int)","72":"IntegerConstraintTest::::validLessThanOrEqual(int)","73":"IntegerConstraintTest::::validLessThanOrEqual(int)","74":"IntegerConstraintTest::::validLessThanOrEqual(int)","75":"IntegerConstraintTest::::validLessThanOrEqual(int)","76":"IntegerConstraintTest::::validLessThanOrEqual(int)","78":"IntegerConstraintTest::::invalidLessThanOrEqual(int)","79":"IntegerConstraintTest::::invalidLessThanOrEqual(int)","80":"IntegerConstraintTest::::invalidLessThanOrEqual(int)","81":"IntegerConstraintTest::::invalidLessThanOrEqual(int)","82":"IntegerConstraintTest::::invalidLessThanOrEqual(int)","83":"IntegerConstraintTest::::invalidLessThanOrEqual(int)","85":"IntegerConstraintTest::::validPositive(int)","86":"IntegerConstraintTest::::validPositive(int)","87":"IntegerConstraintTest::::validPositive(int)","88":"IntegerConstraintTest::::validPositive(int)","89":"IntegerConstraintTest::::validPositive(int)","90":"IntegerConstraintTest::::validPositive(int)","92":"IntegerConstraintTest::::invalidPositive(int)","93":"IntegerConstraintTest::::invalidPositive(int)","94":"IntegerConstraintTest::::invalidPositive(int)","95":"IntegerConstraintTest::::invalidPositive(int)","96":"IntegerConstraintTest::::invalidPositive(int)","97":"IntegerConstraintTest::::invalidPositive(int)","99":"IntegerConstraintTest::::invalidNegative(int)","100":"IntegerConstraintTest::::invalidNegative(int)","101":"IntegerConstraintTest::::invalidNegative(int)","102":"IntegerConstraintTest::::invalidNegative(int)","103":"IntegerConstraintTest::::invalidNegative(int)","104":"IntegerConstraintTest::::invalidNegative(int)","106":"IntegerConstraintTest::::validNegative(int)","107":"IntegerConstraintTest::::validNegative(int)","108":"IntegerConstraintTest::::validNegative(int)","109":"IntegerConstraintTest::::validNegative(int)","110":"IntegerConstraintTest::::validNegative(int)","111":"IntegerConstraintTest::::validNegative(int)","113":"IntegerConstraintTest::::validPositiveOrZero(int)","114":"IntegerConstraintTest::::validPositiveOrZero(int)","115":"IntegerConstraintTest::::validPositiveOrZero(int)","116":"IntegerConstraintTest::::validPositiveOrZero(int)","117":"IntegerConstraintTest::::validPositiveOrZero(int)","118":"IntegerConstraintTest::::validPositiveOrZero(int)","119":"IntegerConstraintTest::::validPositiveOrZero(int)","121":"IntegerConstraintTest::::invalidPositiveOrZero(int)","122":"IntegerConstraintTest::::invalidPositiveOrZero(int)","123":"IntegerConstraintTest::::invalidPositiveOrZero(int)","124":"IntegerConstraintTest::::invalidPositiveOrZero(int)","125":"IntegerConstraintTest::::invalidPositiveOrZero(int)","126":"IntegerConstraintTest::::invalidPositiveOrZero(int)","127":"IntegerConstraintTest::::invalidPositiveOrZero(int)","129":"IntegerConstraintTest::::invalidNegaitveOrZero(int)","130":"IntegerConstraintTest::::invalidNegaitveOrZero(int)","131":"IntegerConstraintTest::::invalidNegaitveOrZero(int)","132":"IntegerConstraintTest::::invalidNegaitveOrZero(int)","133":"IntegerConstraintTest::::invalidNegaitveOrZero(int)","134":"IntegerConstraintTest::::invalidNegaitveOrZero(int)","135":"IntegerConstraintTest::::invalidNegaitveOrZero(int)","137":"IntegerConstraintTest::::validNegaitveOrZero(int)","138":"IntegerConstraintTest::::validNegaitveOrZero(int)","139":"IntegerConstraintTest::::validNegaitveOrZero(int)","140":"IntegerConstraintTest::::validNegaitveOrZero(int)","141":"IntegerConstraintTest::::validNegaitveOrZero(int)","142":"IntegerConstraintTest::::validNegaitveOrZero(int)","143":"IntegerConstraintTest::::validNegaitveOrZero(int)","145":"IntegerConstraintTest::::invalidNegativeOrZero(int)","146":"IntegerConstraintTest::::invalidNegativeOrZero(int)","147":"IntegerConstraintTest::::invalidNegativeOrZero(int)","148":"IntegerConstraintTest::::invalidNegativeOrZero(int)","149":"IntegerConstraintTest::::invalidNegativeOrZero(int)","150":"IntegerConstraintTest::::invalidNegativeOrZero(int)","151":"IntegerConstraintTest::::invalidNegativeOrZero(int)","153":"IntegerConstraintTest::::validNegativeOrZero(int)","154":"IntegerConstraintTest::::validNegativeOrZero(int)","155":"IntegerConstraintTest::::validNegativeOrZero(int)","156":"IntegerConstraintTest::::validNegativeOrZero(int)","157":"IntegerConstraintTest::::validNegativeOrZero(int)","158":"IntegerConstraintTest::::validNegativeOrZero(int)","159":"IntegerConstraintTest::::validNegativeOrZero(int)"},"tests":[{"test_lines":[29,34],"covered_lines":[22,26,31],"label":"IntegerConstraint::::isGreaterThan(java.lang.Integer)"},{"test_lines":[36,41],"covered_lines":[22,26,31],"label":"IntegerConstraint::::isGreaterThan(java.lang.Integer)"},{"test_lines":[43,48],"covered_lines":[22,26,36],"label":"IntegerConstraint::::isGreaterThanOrEqual(java.lang.Integer)"},{"test_lines":[50,55],"covered_lines":[22,26,36],"label":"IntegerConstraint::::isGreaterThanOrEqual(java.lang.Integer)"},{"test_lines":[57,62],"covered_lines":[22,26,41],"label":"IntegerConstraint::::isLessThan(java.lang.Integer)"},{"test_lines":[64,69],"covered_lines":[22,26,41],"label":"IntegerConstraint::::isLessThan(java.lang.Integer)"},{"test_lines":[71,76],"covered_lines":[22,26,46],"label":"IntegerConstraint::::isLessThanOrEqual(java.lang.Integer)"},{"test_lines":[78,83],"covered_lines":[22,26,46],"label":"IntegerConstraint::::isLessThanOrEqual(java.lang.Integer)"},{"test_lines":[85,90],"covered_lines":[22,26,31,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[92,97],"covered_lines":[22,26,31,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[99,104],"covered_lines":[22,26,41,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[106,111],"covered_lines":[22,26,41,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[113,119],"covered_lines":[22,26,36,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[121,127],"covered_lines":[22,26,36,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[129,135],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[137,143],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[145,151],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[153,159],"covered_lines":[22,26,46,51],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/BooleanConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.BOOLEAN_IS_FALSE;\n","import static am.ik.yavi.core.ViolationMessage.Default.BOOLEAN_IS_TRUE;\n","\n","import am.ik.yavi.constraint.base.ConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class BooleanConstraint<T>\n","\t\textends ConstraintBase<T, Boolean, BooleanConstraint<T>> {\n","\n","\t@Override\n","\tpublic BooleanConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic BooleanConstraint<T> isFalse() {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> !x, BOOLEAN_IS_FALSE,\n","\t\t\t\t() -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\tpublic BooleanConstraint<T> isTrue() {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> x, BOOLEAN_IS_TRUE,\n","\t\t\t\t() -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class BooleanConstraintTest {\n","\tprivate BooleanConstraint<Boolean> constraint = new BooleanConstraint<>();\n","\n","\t@Test\n","\tvoid isFalse() {\n","\t\tPredicate<Boolean> predicate = constraint.isFalse().predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(true)).isFalse();\n","\t\tassertThat(predicate.test(false)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isTrue() {\n","\t\tPredicate<Boolean> predicate = constraint.isTrue().predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(true)).isTrue();\n","\t\tassertThat(predicate.test(false)).isFalse();\n","\t}\n","}\n"],"method_lines_dic":{"BooleanConstraint::::cast()":[28,31],"BooleanConstraint::::isFalse()":[33,37],"BooleanConstraint::::isTrue()":[39,43]},"test_method_lines_dic":{"BooleanConstraintTest::::isFalse()":[27,33],"BooleanConstraintTest::::isTrue()":[35,41]},"reverse_method_lines_dic":{"28":"BooleanConstraint::::cast()","29":"BooleanConstraint::::cast()","30":"BooleanConstraint::::cast()","31":"BooleanConstraint::::cast()","33":"BooleanConstraint::::isFalse()","34":"BooleanConstraint::::isFalse()","35":"BooleanConstraint::::isFalse()","36":"BooleanConstraint::::isFalse()","37":"BooleanConstraint::::isFalse()","39":"BooleanConstraint::::isTrue()","40":"BooleanConstraint::::isTrue()","41":"BooleanConstraint::::isTrue()","42":"BooleanConstraint::::isTrue()","43":"BooleanConstraint::::isTrue()"},"test_reverse_method_lines_dic":{"27":"BooleanConstraintTest::::isFalse()","28":"BooleanConstraintTest::::isFalse()","29":"BooleanConstraintTest::::isFalse()","30":"BooleanConstraintTest::::isFalse()","31":"BooleanConstraintTest::::isFalse()","32":"BooleanConstraintTest::::isFalse()","33":"BooleanConstraintTest::::isFalse()","35":"BooleanConstraintTest::::isTrue()","36":"BooleanConstraintTest::::isTrue()","37":"BooleanConstraintTest::::isTrue()","38":"BooleanConstraintTest::::isTrue()","39":"BooleanConstraintTest::::isTrue()","40":"BooleanConstraintTest::::isTrue()","41":"BooleanConstraintTest::::isTrue()"},"tests":[{"test_lines":[27,33],"covered_lines":[25,34,36],"label":"BooleanConstraint::::isFalse()"},{"test_lines":[35,41],"covered_lines":[25,40,42],"label":"BooleanConstraint::::isTrue()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/OffsetDateTimeConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.OffsetDateTime;\n","\n","import am.ik.yavi.constraint.base.TemporalConstraintBase;\n","\n","/**\n"," * This is the actual class for constraints on OffsetDateTime.\n"," * @since 0.10.0\n"," */\n","public class OffsetDateTimeConstraint<T>\n","\t\textends TemporalConstraintBase<T, OffsetDateTime, OffsetDateTimeConstraint<T>> {\n","\t@Override\n","\tprotected boolean isAfter(OffsetDateTime a, OffsetDateTime b) {\n","\t\treturn a.isAfter(b);\n","\t}\n","\n","\t@Override\n","\tprotected boolean isBefore(OffsetDateTime a, OffsetDateTime b) {\n","\t\treturn a.isBefore(b);\n","\t}\n","\n","\t@Override\n","\tprotected OffsetDateTime getNow(Clock clock) {\n","\t\treturn OffsetDateTime.now(clock);\n","\t}\n","\n","\t@Override\n","\tpublic OffsetDateTimeConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.Instant;\n","import java.time.OffsetDateTime;\n","import java.time.ZoneId;\n","import java.time.ZoneOffset;\n","import java.time.temporal.ChronoUnit;\n","import java.util.List;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","import java.util.function.Supplier;\n","import java.util.stream.Collectors;\n","import java.util.stream.IntStream;\n","import java.util.stream.Stream;\n","\n","import org.junit.jupiter.api.Test;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.Arguments;\n","import org.junit.jupiter.params.provider.MethodSource;\n","\n","import static java.time.DayOfWeek.SATURDAY;\n","import static java.time.temporal.ChronoField.DAY_OF_WEEK;\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.Assertions.assertThatThrownBy;\n","\n","class OffsetDateTimeConstraintTest {\n","\t@Test\n","\tvoid isPastValid() {\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(OffsetDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastInValid() {\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(OffsetDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.past(clock));\n","\t\tassertThat(predicate.test(OffsetDateTime.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentValid() {\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(OffsetDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentInValid() {\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(OffsetDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.pastOrPresent(clock));\n","\t\tassertThat(predicate.test(OffsetDateTime.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureValid() {\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(OffsetDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureInValid() {\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(OffsetDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.future(clock));\n","\t\tassertThat(predicate.test(OffsetDateTime.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentValid() {\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(OffsetDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentInValid() {\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(OffsetDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.futureOrPresent(clock));\n","\t\tassertThat(predicate.test(OffsetDateTime.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.before(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeInValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tOffsetDateTime past = now.minusDays(10);\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.before(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeExactInValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.before(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterInValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.minusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterExactInValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(c -> c.after(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualInValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tOffsetDateTime past = now.minusDays(10);\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualExactInValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualInValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.minusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualExactInValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@MethodSource(\"validBetweenDates\")\n","\tvoid isBetweenValid(OffsetDateTime now, OffsetDateTime rangeFrom,\n","\t\t\tOffsetDateTime rangeTo) {\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> rangeFrom, () -> rangeTo));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenExactInValid() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\t\tSupplier<OffsetDateTime> nowSupplier = () -> now;\n","\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(nowSupplier, nowSupplier));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenInValidException() {\n","\t\tOffsetDateTime now = OffsetDateTime.now();\n","\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> now.plusDays(1), () -> now.minusDays(1)));\n","\t\tassertThatThrownBy(() -> predicate.test(now))\n","\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n","\t\t\t\t.hasMessageContaining(\"Parameter 'rangeFrom' has to be before 'rangeTo'\");\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldValid() {\n","\t\tOffsetDateTime value = OffsetDateTime.of(2022, 1, 1, 0, 0, 0, 0,\n","\t\t\t\tZoneOffset.ofHours(9));\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(DAY_OF_WEEK, week -> week == SATURDAY.getValue()));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldInValid() {\n","\t\tOffsetDateTime value = OffsetDateTime.of(2022, 1, 2, 0, 0, 0, 0,\n","\t\t\t\tZoneOffset.ofHours(9));\n","\t\tPredicate<OffsetDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(DAY_OF_WEEK, week -> week == SATURDAY.getValue()));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\tprivate static Stream<Arguments> validBetweenDates() {\n","\t\tList<Arguments> validBetweenZones = IntStream.rangeClosed(1, 10).boxed()\n","\t\t\t\t.map(i -> ZoneId.SHORT_IDS.values().stream().map(ZoneId::of)\n","\t\t\t\t\t\t.map(OffsetDateTime::now)\n","\t\t\t\t\t\t.map(offsetDateTime -> Arguments.of(offsetDateTime,\n","\t\t\t\t\t\t\t\toffsetDateTime.minusHours(i),\n","\t\t\t\t\t\t\t\toffsetDateTime.plusHours(i)))\n","\t\t\t\t\t\t.collect(Collectors.toList()))\n","\t\t\t\t.flatMap(List::stream).collect(Collectors.toList());\n","\t\treturn validBetweenZones.stream();\n","\t}\n","\n","\tprivate static Predicate<OffsetDateTime> retrievePredicate(\n","\t\t\tFunction<OffsetDateTimeConstraint<OffsetDateTime>, OffsetDateTimeConstraint<OffsetDateTime>> constraint) {\n","\t\treturn constraint.apply(new OffsetDateTimeConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)":[29,32],"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)":[34,37],"OffsetDateTimeConstraint::::getNow(java.time.Clock)":[39,42],"OffsetDateTimeConstraint::::cast()":[44,47]},"test_method_lines_dic":{"OffsetDateTimeConstraintTest::::isPastValid()":[43,48],"OffsetDateTimeConstraintTest::::isPastInValid()":[50,55],"OffsetDateTimeConstraintTest::::isPastExactInValid()":[57,62],"OffsetDateTimeConstraintTest::::isPastOrPresentValid()":[64,69],"OffsetDateTimeConstraintTest::::isPastOrPresentInValid()":[71,76],"OffsetDateTimeConstraintTest::::isPastOrPresentExactInValid()":[78,84],"OffsetDateTimeConstraintTest::::isFutureValid()":[86,91],"OffsetDateTimeConstraintTest::::isFutureInValid()":[93,98],"OffsetDateTimeConstraintTest::::isFutureExactInValid()":[100,105],"OffsetDateTimeConstraintTest::::isFutureOrPresentValid()":[107,112],"OffsetDateTimeConstraintTest::::isFutureOrPresentInValid()":[114,119],"OffsetDateTimeConstraintTest::::isFutureOrPresentExactInValid()":[121,127],"OffsetDateTimeConstraintTest::::isBeforeValid()":[129,135],"OffsetDateTimeConstraintTest::::isBeforeInValid()":[137,144],"OffsetDateTimeConstraintTest::::isBeforeExactInValid()":[146,151],"OffsetDateTimeConstraintTest::::isAfterInValid()":[153,159],"OffsetDateTimeConstraintTest::::isAfterValid()":[161,167],"OffsetDateTimeConstraintTest::::isAfterExactInValid()":[169,174],"OffsetDateTimeConstraintTest::::isBeforeOrEqualValid()":[176,182],"OffsetDateTimeConstraintTest::::isBeforeOrEqualInValid()":[184,191],"OffsetDateTimeConstraintTest::::isBeforeOrEqualExactInValid()":[193,199],"OffsetDateTimeConstraintTest::::isAfterOrEqualInValid()":[201,207],"OffsetDateTimeConstraintTest::::isAfterOrEqualValid()":[209,215],"OffsetDateTimeConstraintTest::::isAfterOrEqualExactInValid()":[217,223],"OffsetDateTimeConstraintTest::::isBetweenValid(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.OffsetDateTime)":[225,232],"OffsetDateTimeConstraintTest::::isBetweenExactInValid()":[234,242],"OffsetDateTimeConstraintTest::::isBetweenInValidException()":[244,253],"OffsetDateTimeConstraintTest::::temporalFieldValid()":[255,262],"OffsetDateTimeConstraintTest::::temporalFieldInValid()":[264,271],"OffsetDateTimeConstraintTest::::validBetweenDates()":[273,283]},"reverse_method_lines_dic":{"29":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)","30":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)","31":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)","32":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)","34":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)","35":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)","36":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)","37":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)","39":"OffsetDateTimeConstraint::::getNow(java.time.Clock)","40":"OffsetDateTimeConstraint::::getNow(java.time.Clock)","41":"OffsetDateTimeConstraint::::getNow(java.time.Clock)","42":"OffsetDateTimeConstraint::::getNow(java.time.Clock)","44":"OffsetDateTimeConstraint::::cast()","45":"OffsetDateTimeConstraint::::cast()","46":"OffsetDateTimeConstraint::::cast()","47":"OffsetDateTimeConstraint::::cast()"},"test_reverse_method_lines_dic":{"43":"OffsetDateTimeConstraintTest::::isPastValid()","44":"OffsetDateTimeConstraintTest::::isPastValid()","45":"OffsetDateTimeConstraintTest::::isPastValid()","46":"OffsetDateTimeConstraintTest::::isPastValid()","47":"OffsetDateTimeConstraintTest::::isPastValid()","48":"OffsetDateTimeConstraintTest::::isPastValid()","50":"OffsetDateTimeConstraintTest::::isPastInValid()","51":"OffsetDateTimeConstraintTest::::isPastInValid()","52":"OffsetDateTimeConstraintTest::::isPastInValid()","53":"OffsetDateTimeConstraintTest::::isPastInValid()","54":"OffsetDateTimeConstraintTest::::isPastInValid()","55":"OffsetDateTimeConstraintTest::::isPastInValid()","57":"OffsetDateTimeConstraintTest::::isPastExactInValid()","58":"OffsetDateTimeConstraintTest::::isPastExactInValid()","59":"OffsetDateTimeConstraintTest::::isPastExactInValid()","60":"OffsetDateTimeConstraintTest::::isPastExactInValid()","61":"OffsetDateTimeConstraintTest::::isPastExactInValid()","62":"OffsetDateTimeConstraintTest::::isPastExactInValid()","64":"OffsetDateTimeConstraintTest::::isPastOrPresentValid()","65":"OffsetDateTimeConstraintTest::::isPastOrPresentValid()","66":"OffsetDateTimeConstraintTest::::isPastOrPresentValid()","67":"OffsetDateTimeConstraintTest::::isPastOrPresentValid()","68":"OffsetDateTimeConstraintTest::::isPastOrPresentValid()","69":"OffsetDateTimeConstraintTest::::isPastOrPresentValid()","71":"OffsetDateTimeConstraintTest::::isPastOrPresentInValid()","72":"OffsetDateTimeConstraintTest::::isPastOrPresentInValid()","73":"OffsetDateTimeConstraintTest::::isPastOrPresentInValid()","74":"OffsetDateTimeConstraintTest::::isPastOrPresentInValid()","75":"OffsetDateTimeConstraintTest::::isPastOrPresentInValid()","76":"OffsetDateTimeConstraintTest::::isPastOrPresentInValid()","78":"OffsetDateTimeConstraintTest::::isPastOrPresentExactInValid()","79":"OffsetDateTimeConstraintTest::::isPastOrPresentExactInValid()","80":"OffsetDateTimeConstraintTest::::isPastOrPresentExactInValid()","81":"OffsetDateTimeConstraintTest::::isPastOrPresentExactInValid()","82":"OffsetDateTimeConstraintTest::::isPastOrPresentExactInValid()","83":"OffsetDateTimeConstraintTest::::isPastOrPresentExactInValid()","84":"OffsetDateTimeConstraintTest::::isPastOrPresentExactInValid()","86":"OffsetDateTimeConstraintTest::::isFutureValid()","87":"OffsetDateTimeConstraintTest::::isFutureValid()","88":"OffsetDateTimeConstraintTest::::isFutureValid()","89":"OffsetDateTimeConstraintTest::::isFutureValid()","90":"OffsetDateTimeConstraintTest::::isFutureValid()","91":"OffsetDateTimeConstraintTest::::isFutureValid()","93":"OffsetDateTimeConstraintTest::::isFutureInValid()","94":"OffsetDateTimeConstraintTest::::isFutureInValid()","95":"OffsetDateTimeConstraintTest::::isFutureInValid()","96":"OffsetDateTimeConstraintTest::::isFutureInValid()","97":"OffsetDateTimeConstraintTest::::isFutureInValid()","98":"OffsetDateTimeConstraintTest::::isFutureInValid()","100":"OffsetDateTimeConstraintTest::::isFutureExactInValid()","101":"OffsetDateTimeConstraintTest::::isFutureExactInValid()","102":"OffsetDateTimeConstraintTest::::isFutureExactInValid()","103":"OffsetDateTimeConstraintTest::::isFutureExactInValid()","104":"OffsetDateTimeConstraintTest::::isFutureExactInValid()","105":"OffsetDateTimeConstraintTest::::isFutureExactInValid()","107":"OffsetDateTimeConstraintTest::::isFutureOrPresentValid()","108":"OffsetDateTimeConstraintTest::::isFutureOrPresentValid()","109":"OffsetDateTimeConstraintTest::::isFutureOrPresentValid()","110":"OffsetDateTimeConstraintTest::::isFutureOrPresentValid()","111":"OffsetDateTimeConstraintTest::::isFutureOrPresentValid()","112":"OffsetDateTimeConstraintTest::::isFutureOrPresentValid()","114":"OffsetDateTimeConstraintTest::::isFutureOrPresentInValid()","115":"OffsetDateTimeConstraintTest::::isFutureOrPresentInValid()","116":"OffsetDateTimeConstraintTest::::isFutureOrPresentInValid()","117":"OffsetDateTimeConstraintTest::::isFutureOrPresentInValid()","118":"OffsetDateTimeConstraintTest::::isFutureOrPresentInValid()","119":"OffsetDateTimeConstraintTest::::isFutureOrPresentInValid()","121":"OffsetDateTimeConstraintTest::::isFutureOrPresentExactInValid()","122":"OffsetDateTimeConstraintTest::::isFutureOrPresentExactInValid()","123":"OffsetDateTimeConstraintTest::::isFutureOrPresentExactInValid()","124":"OffsetDateTimeConstraintTest::::isFutureOrPresentExactInValid()","125":"OffsetDateTimeConstraintTest::::isFutureOrPresentExactInValid()","126":"OffsetDateTimeConstraintTest::::isFutureOrPresentExactInValid()","127":"OffsetDateTimeConstraintTest::::isFutureOrPresentExactInValid()","129":"OffsetDateTimeConstraintTest::::isBeforeValid()","130":"OffsetDateTimeConstraintTest::::isBeforeValid()","131":"OffsetDateTimeConstraintTest::::isBeforeValid()","132":"OffsetDateTimeConstraintTest::::isBeforeValid()","133":"OffsetDateTimeConstraintTest::::isBeforeValid()","134":"OffsetDateTimeConstraintTest::::isBeforeValid()","135":"OffsetDateTimeConstraintTest::::isBeforeValid()","137":"OffsetDateTimeConstraintTest::::isBeforeInValid()","138":"OffsetDateTimeConstraintTest::::isBeforeInValid()","139":"OffsetDateTimeConstraintTest::::isBeforeInValid()","140":"OffsetDateTimeConstraintTest::::isBeforeInValid()","141":"OffsetDateTimeConstraintTest::::isBeforeInValid()","142":"OffsetDateTimeConstraintTest::::isBeforeInValid()","143":"OffsetDateTimeConstraintTest::::isBeforeInValid()","144":"OffsetDateTimeConstraintTest::::isBeforeInValid()","146":"OffsetDateTimeConstraintTest::::isBeforeExactInValid()","147":"OffsetDateTimeConstraintTest::::isBeforeExactInValid()","148":"OffsetDateTimeConstraintTest::::isBeforeExactInValid()","149":"OffsetDateTimeConstraintTest::::isBeforeExactInValid()","150":"OffsetDateTimeConstraintTest::::isBeforeExactInValid()","151":"OffsetDateTimeConstraintTest::::isBeforeExactInValid()","153":"OffsetDateTimeConstraintTest::::isAfterInValid()","154":"OffsetDateTimeConstraintTest::::isAfterInValid()","155":"OffsetDateTimeConstraintTest::::isAfterInValid()","156":"OffsetDateTimeConstraintTest::::isAfterInValid()","157":"OffsetDateTimeConstraintTest::::isAfterInValid()","158":"OffsetDateTimeConstraintTest::::isAfterInValid()","159":"OffsetDateTimeConstraintTest::::isAfterInValid()","161":"OffsetDateTimeConstraintTest::::isAfterValid()","162":"OffsetDateTimeConstraintTest::::isAfterValid()","163":"OffsetDateTimeConstraintTest::::isAfterValid()","164":"OffsetDateTimeConstraintTest::::isAfterValid()","165":"OffsetDateTimeConstraintTest::::isAfterValid()","166":"OffsetDateTimeConstraintTest::::isAfterValid()","167":"OffsetDateTimeConstraintTest::::isAfterValid()","169":"OffsetDateTimeConstraintTest::::isAfterExactInValid()","170":"OffsetDateTimeConstraintTest::::isAfterExactInValid()","171":"OffsetDateTimeConstraintTest::::isAfterExactInValid()","172":"OffsetDateTimeConstraintTest::::isAfterExactInValid()","173":"OffsetDateTimeConstraintTest::::isAfterExactInValid()","174":"OffsetDateTimeConstraintTest::::isAfterExactInValid()","176":"OffsetDateTimeConstraintTest::::isBeforeOrEqualValid()","177":"OffsetDateTimeConstraintTest::::isBeforeOrEqualValid()","178":"OffsetDateTimeConstraintTest::::isBeforeOrEqualValid()","179":"OffsetDateTimeConstraintTest::::isBeforeOrEqualValid()","180":"OffsetDateTimeConstraintTest::::isBeforeOrEqualValid()","181":"OffsetDateTimeConstraintTest::::isBeforeOrEqualValid()","182":"OffsetDateTimeConstraintTest::::isBeforeOrEqualValid()","184":"OffsetDateTimeConstraintTest::::isBeforeOrEqualInValid()","185":"OffsetDateTimeConstraintTest::::isBeforeOrEqualInValid()","186":"OffsetDateTimeConstraintTest::::isBeforeOrEqualInValid()","187":"OffsetDateTimeConstraintTest::::isBeforeOrEqualInValid()","188":"OffsetDateTimeConstraintTest::::isBeforeOrEqualInValid()","189":"OffsetDateTimeConstraintTest::::isBeforeOrEqualInValid()","190":"OffsetDateTimeConstraintTest::::isBeforeOrEqualInValid()","191":"OffsetDateTimeConstraintTest::::isBeforeOrEqualInValid()","193":"OffsetDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","194":"OffsetDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","195":"OffsetDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","196":"OffsetDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","197":"OffsetDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","198":"OffsetDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","199":"OffsetDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","201":"OffsetDateTimeConstraintTest::::isAfterOrEqualInValid()","202":"OffsetDateTimeConstraintTest::::isAfterOrEqualInValid()","203":"OffsetDateTimeConstraintTest::::isAfterOrEqualInValid()","204":"OffsetDateTimeConstraintTest::::isAfterOrEqualInValid()","205":"OffsetDateTimeConstraintTest::::isAfterOrEqualInValid()","206":"OffsetDateTimeConstraintTest::::isAfterOrEqualInValid()","207":"OffsetDateTimeConstraintTest::::isAfterOrEqualInValid()","209":"OffsetDateTimeConstraintTest::::isAfterOrEqualValid()","210":"OffsetDateTimeConstraintTest::::isAfterOrEqualValid()","211":"OffsetDateTimeConstraintTest::::isAfterOrEqualValid()","212":"OffsetDateTimeConstraintTest::::isAfterOrEqualValid()","213":"OffsetDateTimeConstraintTest::::isAfterOrEqualValid()","214":"OffsetDateTimeConstraintTest::::isAfterOrEqualValid()","215":"OffsetDateTimeConstraintTest::::isAfterOrEqualValid()","217":"OffsetDateTimeConstraintTest::::isAfterOrEqualExactInValid()","218":"OffsetDateTimeConstraintTest::::isAfterOrEqualExactInValid()","219":"OffsetDateTimeConstraintTest::::isAfterOrEqualExactInValid()","220":"OffsetDateTimeConstraintTest::::isAfterOrEqualExactInValid()","221":"OffsetDateTimeConstraintTest::::isAfterOrEqualExactInValid()","222":"OffsetDateTimeConstraintTest::::isAfterOrEqualExactInValid()","223":"OffsetDateTimeConstraintTest::::isAfterOrEqualExactInValid()","225":"OffsetDateTimeConstraintTest::::isBetweenValid(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.OffsetDateTime)","226":"OffsetDateTimeConstraintTest::::isBetweenValid(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.OffsetDateTime)","227":"OffsetDateTimeConstraintTest::::isBetweenValid(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.OffsetDateTime)","228":"OffsetDateTimeConstraintTest::::isBetweenValid(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.OffsetDateTime)","229":"OffsetDateTimeConstraintTest::::isBetweenValid(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.OffsetDateTime)","230":"OffsetDateTimeConstraintTest::::isBetweenValid(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.OffsetDateTime)","231":"OffsetDateTimeConstraintTest::::isBetweenValid(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.OffsetDateTime)","232":"OffsetDateTimeConstraintTest::::isBetweenValid(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.OffsetDateTime)","234":"OffsetDateTimeConstraintTest::::isBetweenExactInValid()","235":"OffsetDateTimeConstraintTest::::isBetweenExactInValid()","236":"OffsetDateTimeConstraintTest::::isBetweenExactInValid()","237":"OffsetDateTimeConstraintTest::::isBetweenExactInValid()","238":"OffsetDateTimeConstraintTest::::isBetweenExactInValid()","239":"OffsetDateTimeConstraintTest::::isBetweenExactInValid()","240":"OffsetDateTimeConstraintTest::::isBetweenExactInValid()","241":"OffsetDateTimeConstraintTest::::isBetweenExactInValid()","242":"OffsetDateTimeConstraintTest::::isBetweenExactInValid()","244":"OffsetDateTimeConstraintTest::::isBetweenInValidException()","245":"OffsetDateTimeConstraintTest::::isBetweenInValidException()","246":"OffsetDateTimeConstraintTest::::isBetweenInValidException()","247":"OffsetDateTimeConstraintTest::::isBetweenInValidException()","248":"OffsetDateTimeConstraintTest::::isBetweenInValidException()","249":"OffsetDateTimeConstraintTest::::isBetweenInValidException()","250":"OffsetDateTimeConstraintTest::::isBetweenInValidException()","251":"OffsetDateTimeConstraintTest::::isBetweenInValidException()","252":"OffsetDateTimeConstraintTest::::isBetweenInValidException()","253":"OffsetDateTimeConstraintTest::::isBetweenInValidException()","255":"OffsetDateTimeConstraintTest::::temporalFieldValid()","256":"OffsetDateTimeConstraintTest::::temporalFieldValid()","257":"OffsetDateTimeConstraintTest::::temporalFieldValid()","258":"OffsetDateTimeConstraintTest::::temporalFieldValid()","259":"OffsetDateTimeConstraintTest::::temporalFieldValid()","260":"OffsetDateTimeConstraintTest::::temporalFieldValid()","261":"OffsetDateTimeConstraintTest::::temporalFieldValid()","262":"OffsetDateTimeConstraintTest::::temporalFieldValid()","264":"OffsetDateTimeConstraintTest::::temporalFieldInValid()","265":"OffsetDateTimeConstraintTest::::temporalFieldInValid()","266":"OffsetDateTimeConstraintTest::::temporalFieldInValid()","267":"OffsetDateTimeConstraintTest::::temporalFieldInValid()","268":"OffsetDateTimeConstraintTest::::temporalFieldInValid()","269":"OffsetDateTimeConstraintTest::::temporalFieldInValid()","270":"OffsetDateTimeConstraintTest::::temporalFieldInValid()","271":"OffsetDateTimeConstraintTest::::temporalFieldInValid()","273":"OffsetDateTimeConstraintTest::::validBetweenDates()","274":"OffsetDateTimeConstraintTest::::validBetweenDates()","275":"OffsetDateTimeConstraintTest::::validBetweenDates()","276":"OffsetDateTimeConstraintTest::::validBetweenDates()","277":"OffsetDateTimeConstraintTest::::validBetweenDates()","278":"OffsetDateTimeConstraintTest::::validBetweenDates()","279":"OffsetDateTimeConstraintTest::::validBetweenDates()","280":"OffsetDateTimeConstraintTest::::validBetweenDates()","281":"OffsetDateTimeConstraintTest::::validBetweenDates()","282":"OffsetDateTimeConstraintTest::::validBetweenDates()","283":"OffsetDateTimeConstraintTest::::validBetweenDates()"},"tests":[{"test_lines":[43,48],"covered_lines":[27,36,41,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[50,55],"covered_lines":[27,36,41,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[57,62],"covered_lines":[27,36,41,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[64,69],"covered_lines":[27,31,41,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[71,76],"covered_lines":[27,31,41,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[78,84],"covered_lines":[27,31,41,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[86,91],"covered_lines":[27,31,41,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[93,98],"covered_lines":[27,31,41,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[100,105],"covered_lines":[27,31,41,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[107,112],"covered_lines":[27,36,41,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[114,119],"covered_lines":[27,36,41,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[121,127],"covered_lines":[27,36,41,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[129,135],"covered_lines":[27,36,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[137,144],"covered_lines":[27,36,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[146,151],"covered_lines":[27,36,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[153,159],"covered_lines":[27,31,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[161,167],"covered_lines":[27,31,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[169,174],"covered_lines":[27,31,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[176,182],"covered_lines":[27,31,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[184,191],"covered_lines":[27,31,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[193,199],"covered_lines":[27,31,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[201,207],"covered_lines":[27,36,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[209,215],"covered_lines":[27,36,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[217,223],"covered_lines":[27,36,46],"label":"OffsetDateTimeConstraint::::isBefore(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[225,232],"covered_lines":[27,31,36,46],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[234,242],"covered_lines":[27,31,36,46],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[244,253],"covered_lines":[27,31,46],"label":"OffsetDateTimeConstraint::::isAfter(java.time.OffsetDateTime,java.time.OffsetDateTime)"},{"test_lines":[255,262],"covered_lines":[27,46],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[264,271],"covered_lines":[27,46],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/InstantConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.Instant;\n","\n","import am.ik.yavi.constraint.base.TemporalConstraintBase;\n","\n","/**\n"," * This is the actual class for constraints on Instant.\n"," * @since 0.10.0\n"," */\n","public class InstantConstraint<T>\n","\t\textends TemporalConstraintBase<T, Instant, InstantConstraint<T>> {\n","\t@Override\n","\tprotected boolean isAfter(Instant a, Instant b) {\n","\t\treturn a.isAfter(b);\n","\t}\n","\n","\t@Override\n","\tprotected boolean isBefore(Instant a, Instant b) {\n","\t\treturn a.isBefore(b);\n","\t}\n","\n","\t@Override\n","\tprotected Instant getNow(Clock clock) {\n","\t\treturn Instant.now(clock);\n","\t}\n","\n","\t@Override\n","\tpublic InstantConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.Instant;\n","import java.time.OffsetDateTime;\n","import java.time.ZoneId;\n","import java.time.ZoneOffset;\n","import java.time.temporal.ChronoUnit;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","import java.util.function.Supplier;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static java.time.temporal.ChronoField.INSTANT_SECONDS;\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.Assertions.assertThatThrownBy;\n","\n","class InstantConstraintTest {\n","\n","\t@Test\n","\tvoid isPastValid() {\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(Instant.now().minus(60, ChronoUnit.SECONDS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastInValid() {\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(Instant.now().plus(60, ChronoUnit.SECONDS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.past(clock));\n","\t\tassertThat(predicate.test(Instant.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentValid() {\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(Instant.now().minus(60, ChronoUnit.SECONDS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentInValid() {\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(Instant.now().plus(60, ChronoUnit.SECONDS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.pastOrPresent(clock));\n","\t\tassertThat(predicate.test(Instant.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureValid() {\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(Instant.now().plus(60, ChronoUnit.SECONDS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureInValid() {\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(Instant.now().minus(60, ChronoUnit.SECONDS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.future(clock));\n","\t\tassertThat(predicate.test(Instant.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentValid() {\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(Instant.now().plus(60, ChronoUnit.SECONDS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentInValid() {\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(Instant.now().minus(60, ChronoUnit.SECONDS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.futureOrPresent(clock));\n","\t\tassertThat(predicate.test(Instant.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeValid() {\n","\t\tInstant now = Instant.now();\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.before(() -> now.plusSeconds(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeInValid() {\n","\t\tInstant now = Instant.now();\n","\t\tInstant past = now.minusSeconds(10);\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.before(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeExactInValid() {\n","\t\tInstant now = Instant.now();\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.before(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterInValid() {\n","\t\tInstant now = Instant.now();\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.plusSeconds(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterValid() {\n","\t\tInstant now = Instant.now();\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.minusSeconds(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterExactInValid() {\n","\t\tInstant now = Instant.now();\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.after(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualValid() {\n","\t\tInstant now = Instant.now();\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> now.plusSeconds(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualInValid() {\n","\t\tInstant now = Instant.now();\n","\t\tInstant past = now.minusSeconds(10);\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualExactInValid() {\n","\t\tInstant now = Instant.now();\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.beforeOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualInValid() {\n","\t\tInstant now = Instant.now();\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.plusSeconds(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualValid() {\n","\t\tInstant now = Instant.now();\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.minusSeconds(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualExactValid() {\n","\t\tInstant now = Instant.now();\n","\t\tPredicate<Instant> predicate = retrievePredicate(c -> c.afterOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenExactInValid() {\n","\t\tInstant now = Instant.now();\n","\t\tSupplier<Instant> nowSupplier = () -> now;\n","\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(nowSupplier, nowSupplier));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenInValidException() {\n","\t\tInstant now = Instant.now();\n","\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> now.plusSeconds(1), () -> now.minusSeconds(1)));\n","\t\tassertThatThrownBy(() -> predicate.test(now))\n","\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n","\t\t\t\t.hasMessageContaining(\"Parameter 'rangeFrom' has to be before 'rangeTo'\");\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldValid() {\n","\t\tOffsetDateTime value = OffsetDateTime.of(1970, 1, 1, 0, 0, 0, 0,\n","\t\t\t\tZoneOffset.ofHours(0));\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(INSTANT_SECONDS, s -> s >= 0));\n","\t\tassertThat(predicate.test(value.toInstant())).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldInValid() {\n","\t\tOffsetDateTime value = OffsetDateTime.of(1969, 12, 31, 23, 59, 59, 0,\n","\t\t\t\tZoneOffset.ofHours(0));\n","\t\tPredicate<Instant> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(INSTANT_SECONDS, s -> s >= 0));\n","\t\tassertThat(predicate.test(value.toInstant())).isFalse();\n","\t}\n","\n","\tprivate static Predicate<Instant> retrievePredicate(\n","\t\t\tFunction<InstantConstraint<Instant>, InstantConstraint<Instant>> constraint) {\n","\t\treturn constraint.apply(new InstantConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)":[29,32],"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)":[34,37],"InstantConstraint::::getNow(java.time.Clock)":[39,42],"InstantConstraint::::cast()":[44,47]},"test_method_lines_dic":{"InstantConstraintTest::::isPastValid()":[36,40],"InstantConstraintTest::::isPastInValid()":[42,46],"InstantConstraintTest::::isPastExactInValid()":[48,53],"InstantConstraintTest::::isPastOrPresentValid()":[55,59],"InstantConstraintTest::::isPastOrPresentInValid()":[61,65],"InstantConstraintTest::::isPastOrPresentExactInValid()":[67,72],"InstantConstraintTest::::isFutureValid()":[74,78],"InstantConstraintTest::::isFutureInValid()":[80,84],"InstantConstraintTest::::isFutureExactInValid()":[86,91],"InstantConstraintTest::::isFutureOrPresentValid()":[93,97],"InstantConstraintTest::::isFutureOrPresentInValid()":[99,103],"InstantConstraintTest::::isFutureOrPresentExactInValid()":[105,110],"InstantConstraintTest::::isBeforeValid()":[112,118],"InstantConstraintTest::::isBeforeInValid()":[120,126],"InstantConstraintTest::::isBeforeExactInValid()":[128,133],"InstantConstraintTest::::isAfterInValid()":[135,141],"InstantConstraintTest::::isAfterValid()":[143,149],"InstantConstraintTest::::isAfterExactInValid()":[151,156],"InstantConstraintTest::::isBeforeOrEqualValid()":[158,164],"InstantConstraintTest::::isBeforeOrEqualInValid()":[166,173],"InstantConstraintTest::::isBeforeOrEqualExactInValid()":[175,180],"InstantConstraintTest::::isAfterOrEqualInValid()":[182,188],"InstantConstraintTest::::isAfterOrEqualValid()":[190,196],"InstantConstraintTest::::isAfterOrEqualExactValid()":[198,203],"InstantConstraintTest::::isBetweenExactInValid()":[205,213],"InstantConstraintTest::::isBetweenInValidException()":[215,224],"InstantConstraintTest::::temporalFieldValid()":[226,233],"InstantConstraintTest::::temporalFieldInValid()":[235,242]},"reverse_method_lines_dic":{"29":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)","30":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)","31":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)","32":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)","34":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)","35":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)","36":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)","37":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)","39":"InstantConstraint::::getNow(java.time.Clock)","40":"InstantConstraint::::getNow(java.time.Clock)","41":"InstantConstraint::::getNow(java.time.Clock)","42":"InstantConstraint::::getNow(java.time.Clock)","44":"InstantConstraint::::cast()","45":"InstantConstraint::::cast()","46":"InstantConstraint::::cast()","47":"InstantConstraint::::cast()"},"test_reverse_method_lines_dic":{"36":"InstantConstraintTest::::isPastValid()","37":"InstantConstraintTest::::isPastValid()","38":"InstantConstraintTest::::isPastValid()","39":"InstantConstraintTest::::isPastValid()","40":"InstantConstraintTest::::isPastValid()","42":"InstantConstraintTest::::isPastInValid()","43":"InstantConstraintTest::::isPastInValid()","44":"InstantConstraintTest::::isPastInValid()","45":"InstantConstraintTest::::isPastInValid()","46":"InstantConstraintTest::::isPastInValid()","48":"InstantConstraintTest::::isPastExactInValid()","49":"InstantConstraintTest::::isPastExactInValid()","50":"InstantConstraintTest::::isPastExactInValid()","51":"InstantConstraintTest::::isPastExactInValid()","52":"InstantConstraintTest::::isPastExactInValid()","53":"InstantConstraintTest::::isPastExactInValid()","55":"InstantConstraintTest::::isPastOrPresentValid()","56":"InstantConstraintTest::::isPastOrPresentValid()","57":"InstantConstraintTest::::isPastOrPresentValid()","58":"InstantConstraintTest::::isPastOrPresentValid()","59":"InstantConstraintTest::::isPastOrPresentValid()","61":"InstantConstraintTest::::isPastOrPresentInValid()","62":"InstantConstraintTest::::isPastOrPresentInValid()","63":"InstantConstraintTest::::isPastOrPresentInValid()","64":"InstantConstraintTest::::isPastOrPresentInValid()","65":"InstantConstraintTest::::isPastOrPresentInValid()","67":"InstantConstraintTest::::isPastOrPresentExactInValid()","68":"InstantConstraintTest::::isPastOrPresentExactInValid()","69":"InstantConstraintTest::::isPastOrPresentExactInValid()","70":"InstantConstraintTest::::isPastOrPresentExactInValid()","71":"InstantConstraintTest::::isPastOrPresentExactInValid()","72":"InstantConstraintTest::::isPastOrPresentExactInValid()","74":"InstantConstraintTest::::isFutureValid()","75":"InstantConstraintTest::::isFutureValid()","76":"InstantConstraintTest::::isFutureValid()","77":"InstantConstraintTest::::isFutureValid()","78":"InstantConstraintTest::::isFutureValid()","80":"InstantConstraintTest::::isFutureInValid()","81":"InstantConstraintTest::::isFutureInValid()","82":"InstantConstraintTest::::isFutureInValid()","83":"InstantConstraintTest::::isFutureInValid()","84":"InstantConstraintTest::::isFutureInValid()","86":"InstantConstraintTest::::isFutureExactInValid()","87":"InstantConstraintTest::::isFutureExactInValid()","88":"InstantConstraintTest::::isFutureExactInValid()","89":"InstantConstraintTest::::isFutureExactInValid()","90":"InstantConstraintTest::::isFutureExactInValid()","91":"InstantConstraintTest::::isFutureExactInValid()","93":"InstantConstraintTest::::isFutureOrPresentValid()","94":"InstantConstraintTest::::isFutureOrPresentValid()","95":"InstantConstraintTest::::isFutureOrPresentValid()","96":"InstantConstraintTest::::isFutureOrPresentValid()","97":"InstantConstraintTest::::isFutureOrPresentValid()","99":"InstantConstraintTest::::isFutureOrPresentInValid()","100":"InstantConstraintTest::::isFutureOrPresentInValid()","101":"InstantConstraintTest::::isFutureOrPresentInValid()","102":"InstantConstraintTest::::isFutureOrPresentInValid()","103":"InstantConstraintTest::::isFutureOrPresentInValid()","105":"InstantConstraintTest::::isFutureOrPresentExactInValid()","106":"InstantConstraintTest::::isFutureOrPresentExactInValid()","107":"InstantConstraintTest::::isFutureOrPresentExactInValid()","108":"InstantConstraintTest::::isFutureOrPresentExactInValid()","109":"InstantConstraintTest::::isFutureOrPresentExactInValid()","110":"InstantConstraintTest::::isFutureOrPresentExactInValid()","112":"InstantConstraintTest::::isBeforeValid()","113":"InstantConstraintTest::::isBeforeValid()","114":"InstantConstraintTest::::isBeforeValid()","115":"InstantConstraintTest::::isBeforeValid()","116":"InstantConstraintTest::::isBeforeValid()","117":"InstantConstraintTest::::isBeforeValid()","118":"InstantConstraintTest::::isBeforeValid()","120":"InstantConstraintTest::::isBeforeInValid()","121":"InstantConstraintTest::::isBeforeInValid()","122":"InstantConstraintTest::::isBeforeInValid()","123":"InstantConstraintTest::::isBeforeInValid()","124":"InstantConstraintTest::::isBeforeInValid()","125":"InstantConstraintTest::::isBeforeInValid()","126":"InstantConstraintTest::::isBeforeInValid()","128":"InstantConstraintTest::::isBeforeExactInValid()","129":"InstantConstraintTest::::isBeforeExactInValid()","130":"InstantConstraintTest::::isBeforeExactInValid()","131":"InstantConstraintTest::::isBeforeExactInValid()","132":"InstantConstraintTest::::isBeforeExactInValid()","133":"InstantConstraintTest::::isBeforeExactInValid()","135":"InstantConstraintTest::::isAfterInValid()","136":"InstantConstraintTest::::isAfterInValid()","137":"InstantConstraintTest::::isAfterInValid()","138":"InstantConstraintTest::::isAfterInValid()","139":"InstantConstraintTest::::isAfterInValid()","140":"InstantConstraintTest::::isAfterInValid()","141":"InstantConstraintTest::::isAfterInValid()","143":"InstantConstraintTest::::isAfterValid()","144":"InstantConstraintTest::::isAfterValid()","145":"InstantConstraintTest::::isAfterValid()","146":"InstantConstraintTest::::isAfterValid()","147":"InstantConstraintTest::::isAfterValid()","148":"InstantConstraintTest::::isAfterValid()","149":"InstantConstraintTest::::isAfterValid()","151":"InstantConstraintTest::::isAfterExactInValid()","152":"InstantConstraintTest::::isAfterExactInValid()","153":"InstantConstraintTest::::isAfterExactInValid()","154":"InstantConstraintTest::::isAfterExactInValid()","155":"InstantConstraintTest::::isAfterExactInValid()","156":"InstantConstraintTest::::isAfterExactInValid()","158":"InstantConstraintTest::::isBeforeOrEqualValid()","159":"InstantConstraintTest::::isBeforeOrEqualValid()","160":"InstantConstraintTest::::isBeforeOrEqualValid()","161":"InstantConstraintTest::::isBeforeOrEqualValid()","162":"InstantConstraintTest::::isBeforeOrEqualValid()","163":"InstantConstraintTest::::isBeforeOrEqualValid()","164":"InstantConstraintTest::::isBeforeOrEqualValid()","166":"InstantConstraintTest::::isBeforeOrEqualInValid()","167":"InstantConstraintTest::::isBeforeOrEqualInValid()","168":"InstantConstraintTest::::isBeforeOrEqualInValid()","169":"InstantConstraintTest::::isBeforeOrEqualInValid()","170":"InstantConstraintTest::::isBeforeOrEqualInValid()","171":"InstantConstraintTest::::isBeforeOrEqualInValid()","172":"InstantConstraintTest::::isBeforeOrEqualInValid()","173":"InstantConstraintTest::::isBeforeOrEqualInValid()","175":"InstantConstraintTest::::isBeforeOrEqualExactInValid()","176":"InstantConstraintTest::::isBeforeOrEqualExactInValid()","177":"InstantConstraintTest::::isBeforeOrEqualExactInValid()","178":"InstantConstraintTest::::isBeforeOrEqualExactInValid()","179":"InstantConstraintTest::::isBeforeOrEqualExactInValid()","180":"InstantConstraintTest::::isBeforeOrEqualExactInValid()","182":"InstantConstraintTest::::isAfterOrEqualInValid()","183":"InstantConstraintTest::::isAfterOrEqualInValid()","184":"InstantConstraintTest::::isAfterOrEqualInValid()","185":"InstantConstraintTest::::isAfterOrEqualInValid()","186":"InstantConstraintTest::::isAfterOrEqualInValid()","187":"InstantConstraintTest::::isAfterOrEqualInValid()","188":"InstantConstraintTest::::isAfterOrEqualInValid()","190":"InstantConstraintTest::::isAfterOrEqualValid()","191":"InstantConstraintTest::::isAfterOrEqualValid()","192":"InstantConstraintTest::::isAfterOrEqualValid()","193":"InstantConstraintTest::::isAfterOrEqualValid()","194":"InstantConstraintTest::::isAfterOrEqualValid()","195":"InstantConstraintTest::::isAfterOrEqualValid()","196":"InstantConstraintTest::::isAfterOrEqualValid()","198":"InstantConstraintTest::::isAfterOrEqualExactValid()","199":"InstantConstraintTest::::isAfterOrEqualExactValid()","200":"InstantConstraintTest::::isAfterOrEqualExactValid()","201":"InstantConstraintTest::::isAfterOrEqualExactValid()","202":"InstantConstraintTest::::isAfterOrEqualExactValid()","203":"InstantConstraintTest::::isAfterOrEqualExactValid()","205":"InstantConstraintTest::::isBetweenExactInValid()","206":"InstantConstraintTest::::isBetweenExactInValid()","207":"InstantConstraintTest::::isBetweenExactInValid()","208":"InstantConstraintTest::::isBetweenExactInValid()","209":"InstantConstraintTest::::isBetweenExactInValid()","210":"InstantConstraintTest::::isBetweenExactInValid()","211":"InstantConstraintTest::::isBetweenExactInValid()","212":"InstantConstraintTest::::isBetweenExactInValid()","213":"InstantConstraintTest::::isBetweenExactInValid()","215":"InstantConstraintTest::::isBetweenInValidException()","216":"InstantConstraintTest::::isBetweenInValidException()","217":"InstantConstraintTest::::isBetweenInValidException()","218":"InstantConstraintTest::::isBetweenInValidException()","219":"InstantConstraintTest::::isBetweenInValidException()","220":"InstantConstraintTest::::isBetweenInValidException()","221":"InstantConstraintTest::::isBetweenInValidException()","222":"InstantConstraintTest::::isBetweenInValidException()","223":"InstantConstraintTest::::isBetweenInValidException()","224":"InstantConstraintTest::::isBetweenInValidException()","226":"InstantConstraintTest::::temporalFieldValid()","227":"InstantConstraintTest::::temporalFieldValid()","228":"InstantConstraintTest::::temporalFieldValid()","229":"InstantConstraintTest::::temporalFieldValid()","230":"InstantConstraintTest::::temporalFieldValid()","231":"InstantConstraintTest::::temporalFieldValid()","232":"InstantConstraintTest::::temporalFieldValid()","233":"InstantConstraintTest::::temporalFieldValid()","235":"InstantConstraintTest::::temporalFieldInValid()","236":"InstantConstraintTest::::temporalFieldInValid()","237":"InstantConstraintTest::::temporalFieldInValid()","238":"InstantConstraintTest::::temporalFieldInValid()","239":"InstantConstraintTest::::temporalFieldInValid()","240":"InstantConstraintTest::::temporalFieldInValid()","241":"InstantConstraintTest::::temporalFieldInValid()","242":"InstantConstraintTest::::temporalFieldInValid()"},"tests":[{"test_lines":[36,40],"covered_lines":[27,36,41,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[42,46],"covered_lines":[27,36,41,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[48,53],"covered_lines":[27,36,41,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[55,59],"covered_lines":[27,31,41,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[61,65],"covered_lines":[27,31,41,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[67,72],"covered_lines":[27,31,41,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[74,78],"covered_lines":[27,31,41,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[80,84],"covered_lines":[27,31,41,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[86,91],"covered_lines":[27,31,41,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[93,97],"covered_lines":[27,36,41,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[99,103],"covered_lines":[27,36,41,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[105,110],"covered_lines":[27,36,41,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[112,118],"covered_lines":[27,36,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[120,126],"covered_lines":[27,36,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[128,133],"covered_lines":[27,36,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[135,141],"covered_lines":[27,31,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[143,149],"covered_lines":[27,31,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[151,156],"covered_lines":[27,31,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[158,164],"covered_lines":[27,31,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[166,173],"covered_lines":[27,31,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[175,180],"covered_lines":[27,31,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[182,188],"covered_lines":[27,36,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[190,196],"covered_lines":[27,36,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[198,203],"covered_lines":[27,36,46],"label":"InstantConstraint::::isBefore(java.time.Instant,java.time.Instant)"},{"test_lines":[205,213],"covered_lines":[27,31,36,46],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[215,224],"covered_lines":[27,31,46],"label":"InstantConstraint::::isAfter(java.time.Instant,java.time.Instant)"},{"test_lines":[226,233],"covered_lines":[27,46],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[235,242],"covered_lines":[27,46],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/ZonedDateTimeConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.ZonedDateTime;\n","\n","import am.ik.yavi.constraint.base.ChronoZonedDateTimeConstraintBase;\n","\n","/**\n"," * This is the actual class for constraints on ZonedDateTime.\n"," *\n"," * @author Diego Krupitza\n"," * @since 0.10.0\n"," */\n","public class ZonedDateTimeConstraint<T> extends\n","\t\tChronoZonedDateTimeConstraintBase<T, ZonedDateTime, ZonedDateTimeConstraint<T>> {\n","\n","\t@Override\n","\tprotected ZonedDateTime getNow(Clock clock) {\n","\t\treturn ZonedDateTime.now(clock);\n","\t}\n","\n","\t@Override\n","\tpublic ZonedDateTimeConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.Instant;\n","import java.time.ZoneId;\n","import java.time.ZoneOffset;\n","import java.time.ZonedDateTime;\n","import java.time.temporal.ChronoUnit;\n","import java.util.List;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","import java.util.function.Supplier;\n","import java.util.stream.Collectors;\n","import java.util.stream.IntStream;\n","import java.util.stream.Stream;\n","\n","import org.junit.jupiter.api.Test;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.Arguments;\n","import org.junit.jupiter.params.provider.MethodSource;\n","\n","import static java.time.DayOfWeek.SATURDAY;\n","import static java.time.temporal.ChronoField.DAY_OF_WEEK;\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.Assertions.assertThatThrownBy;\n","\n","class ZonedDateTimeConstraintTest {\n","\t@Test\n","\tvoid isPastValid() {\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(ZonedDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastInValid() {\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(ZonedDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.past(clock));\n","\t\tassertThat(predicate.test(ZonedDateTime.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentValid() {\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(ZonedDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentInValid() {\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(ZonedDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.pastOrPresent(clock));\n","\t\tassertThat(predicate.test(ZonedDateTime.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureValid() {\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(ZonedDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureInValid() {\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(ZonedDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.future(clock));\n","\t\tassertThat(predicate.test(ZonedDateTime.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentValid() {\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(ZonedDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentInValid() {\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(ZonedDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.futureOrPresent(clock));\n","\t\tassertThat(predicate.test(ZonedDateTime.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.before(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeInValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tZonedDateTime past = now.minusDays(10);\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.before(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeExactInValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.before(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterInValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.minusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterExactInValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(c -> c.after(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualInValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tZonedDateTime past = now.minusDays(10);\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualExactInValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualInValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.minusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualExactInValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@MethodSource(\"validBetweenDates\")\n","\tvoid isBetweenValid(ZonedDateTime now, ZonedDateTime rangeFrom,\n","\t\t\tZonedDateTime rangeTo) {\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> rangeFrom, () -> rangeTo));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenExactInValid() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\t\tSupplier<ZonedDateTime> nowSupplier = () -> now;\n","\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(nowSupplier, nowSupplier));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenInValidException() {\n","\t\tZonedDateTime now = ZonedDateTime.now();\n","\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> now.plusDays(1), () -> now.minusDays(1)));\n","\t\tassertThatThrownBy(() -> predicate.test(now))\n","\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n","\t\t\t\t.hasMessageContaining(\"Parameter 'rangeFrom' has to be before 'rangeTo'\");\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldValid() {\n","\t\tZonedDateTime value = ZonedDateTime.of(2022, 1, 1, 0, 0, 0, 0,\n","\t\t\t\tZoneOffset.ofHours(9));\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(DAY_OF_WEEK, week -> week == SATURDAY.getValue()));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldInValid() {\n","\t\tZonedDateTime value = ZonedDateTime.of(2022, 1, 2, 0, 0, 0, 0,\n","\t\t\t\tZoneOffset.ofHours(9));\n","\t\tPredicate<ZonedDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(DAY_OF_WEEK, week -> week == SATURDAY.getValue()));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\tprivate static Stream<Arguments> validBetweenDates() {\n","\t\tList<Arguments> validBetweenZones = IntStream.rangeClosed(1, 10).boxed()\n","\t\t\t\t.map(i -> ZoneId.SHORT_IDS.values().stream().map(ZoneId::of)\n","\t\t\t\t\t\t.map(ZonedDateTime::now)\n","\t\t\t\t\t\t.map(zonedDateTime -> Arguments.of(zonedDateTime,\n","\t\t\t\t\t\t\t\tzonedDateTime.minusHours(i), zonedDateTime.plusHours(i)))\n","\t\t\t\t\t\t.collect(Collectors.toList()))\n","\t\t\t\t.flatMap(List::stream).collect(Collectors.toList());\n","\t\treturn validBetweenZones.stream();\n","\t}\n","\n","\tprivate static Predicate<ZonedDateTime> retrievePredicate(\n","\t\t\tFunction<ZonedDateTimeConstraint<ZonedDateTime>, ZonedDateTimeConstraint<ZonedDateTime>> constraint) {\n","\t\treturn constraint.apply(new ZonedDateTimeConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"ZonedDateTimeConstraint::::getNow(java.time.Clock)":[32,35],"ZonedDateTimeConstraint::::cast()":[37,40]},"test_method_lines_dic":{"ZonedDateTimeConstraintTest::::isPastValid()":[43,48],"ZonedDateTimeConstraintTest::::isPastInValid()":[50,55],"ZonedDateTimeConstraintTest::::isPastExactInValid()":[57,62],"ZonedDateTimeConstraintTest::::isPastOrPresentValid()":[64,69],"ZonedDateTimeConstraintTest::::isPastOrPresentInValid()":[71,76],"ZonedDateTimeConstraintTest::::isPastOrPresentExactInValid()":[78,84],"ZonedDateTimeConstraintTest::::isFutureValid()":[86,91],"ZonedDateTimeConstraintTest::::isFutureInValid()":[93,98],"ZonedDateTimeConstraintTest::::isFutureExactInValid()":[100,105],"ZonedDateTimeConstraintTest::::isFutureOrPresentValid()":[107,112],"ZonedDateTimeConstraintTest::::isFutureOrPresentInValid()":[114,119],"ZonedDateTimeConstraintTest::::isFutureOrPresentExactInValid()":[121,127],"ZonedDateTimeConstraintTest::::isBeforeValid()":[129,135],"ZonedDateTimeConstraintTest::::isBeforeInValid()":[137,143],"ZonedDateTimeConstraintTest::::isBeforeExactInValid()":[145,150],"ZonedDateTimeConstraintTest::::isAfterInValid()":[152,158],"ZonedDateTimeConstraintTest::::isAfterValid()":[160,166],"ZonedDateTimeConstraintTest::::isAfterExactInValid()":[168,173],"ZonedDateTimeConstraintTest::::isBeforeOrEqualValid()":[175,181],"ZonedDateTimeConstraintTest::::isBeforeOrEqualInValid()":[183,190],"ZonedDateTimeConstraintTest::::isBeforeOrEqualExactInValid()":[192,198],"ZonedDateTimeConstraintTest::::isAfterOrEqualInValid()":[200,206],"ZonedDateTimeConstraintTest::::isAfterOrEqualValid()":[208,214],"ZonedDateTimeConstraintTest::::isAfterOrEqualExactInValid()":[216,222],"ZonedDateTimeConstraintTest::::isBetweenValid(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.ZonedDateTime)":[224,231],"ZonedDateTimeConstraintTest::::isBetweenExactInValid()":[233,241],"ZonedDateTimeConstraintTest::::isBetweenInValidException()":[243,252],"ZonedDateTimeConstraintTest::::temporalFieldValid()":[254,261],"ZonedDateTimeConstraintTest::::temporalFieldInValid()":[263,270],"ZonedDateTimeConstraintTest::::validBetweenDates()":[272,281]},"reverse_method_lines_dic":{"32":"ZonedDateTimeConstraint::::getNow(java.time.Clock)","33":"ZonedDateTimeConstraint::::getNow(java.time.Clock)","34":"ZonedDateTimeConstraint::::getNow(java.time.Clock)","35":"ZonedDateTimeConstraint::::getNow(java.time.Clock)","37":"ZonedDateTimeConstraint::::cast()","38":"ZonedDateTimeConstraint::::cast()","39":"ZonedDateTimeConstraint::::cast()","40":"ZonedDateTimeConstraint::::cast()"},"test_reverse_method_lines_dic":{"43":"ZonedDateTimeConstraintTest::::isPastValid()","44":"ZonedDateTimeConstraintTest::::isPastValid()","45":"ZonedDateTimeConstraintTest::::isPastValid()","46":"ZonedDateTimeConstraintTest::::isPastValid()","47":"ZonedDateTimeConstraintTest::::isPastValid()","48":"ZonedDateTimeConstraintTest::::isPastValid()","50":"ZonedDateTimeConstraintTest::::isPastInValid()","51":"ZonedDateTimeConstraintTest::::isPastInValid()","52":"ZonedDateTimeConstraintTest::::isPastInValid()","53":"ZonedDateTimeConstraintTest::::isPastInValid()","54":"ZonedDateTimeConstraintTest::::isPastInValid()","55":"ZonedDateTimeConstraintTest::::isPastInValid()","57":"ZonedDateTimeConstraintTest::::isPastExactInValid()","58":"ZonedDateTimeConstraintTest::::isPastExactInValid()","59":"ZonedDateTimeConstraintTest::::isPastExactInValid()","60":"ZonedDateTimeConstraintTest::::isPastExactInValid()","61":"ZonedDateTimeConstraintTest::::isPastExactInValid()","62":"ZonedDateTimeConstraintTest::::isPastExactInValid()","64":"ZonedDateTimeConstraintTest::::isPastOrPresentValid()","65":"ZonedDateTimeConstraintTest::::isPastOrPresentValid()","66":"ZonedDateTimeConstraintTest::::isPastOrPresentValid()","67":"ZonedDateTimeConstraintTest::::isPastOrPresentValid()","68":"ZonedDateTimeConstraintTest::::isPastOrPresentValid()","69":"ZonedDateTimeConstraintTest::::isPastOrPresentValid()","71":"ZonedDateTimeConstraintTest::::isPastOrPresentInValid()","72":"ZonedDateTimeConstraintTest::::isPastOrPresentInValid()","73":"ZonedDateTimeConstraintTest::::isPastOrPresentInValid()","74":"ZonedDateTimeConstraintTest::::isPastOrPresentInValid()","75":"ZonedDateTimeConstraintTest::::isPastOrPresentInValid()","76":"ZonedDateTimeConstraintTest::::isPastOrPresentInValid()","78":"ZonedDateTimeConstraintTest::::isPastOrPresentExactInValid()","79":"ZonedDateTimeConstraintTest::::isPastOrPresentExactInValid()","80":"ZonedDateTimeConstraintTest::::isPastOrPresentExactInValid()","81":"ZonedDateTimeConstraintTest::::isPastOrPresentExactInValid()","82":"ZonedDateTimeConstraintTest::::isPastOrPresentExactInValid()","83":"ZonedDateTimeConstraintTest::::isPastOrPresentExactInValid()","84":"ZonedDateTimeConstraintTest::::isPastOrPresentExactInValid()","86":"ZonedDateTimeConstraintTest::::isFutureValid()","87":"ZonedDateTimeConstraintTest::::isFutureValid()","88":"ZonedDateTimeConstraintTest::::isFutureValid()","89":"ZonedDateTimeConstraintTest::::isFutureValid()","90":"ZonedDateTimeConstraintTest::::isFutureValid()","91":"ZonedDateTimeConstraintTest::::isFutureValid()","93":"ZonedDateTimeConstraintTest::::isFutureInValid()","94":"ZonedDateTimeConstraintTest::::isFutureInValid()","95":"ZonedDateTimeConstraintTest::::isFutureInValid()","96":"ZonedDateTimeConstraintTest::::isFutureInValid()","97":"ZonedDateTimeConstraintTest::::isFutureInValid()","98":"ZonedDateTimeConstraintTest::::isFutureInValid()","100":"ZonedDateTimeConstraintTest::::isFutureExactInValid()","101":"ZonedDateTimeConstraintTest::::isFutureExactInValid()","102":"ZonedDateTimeConstraintTest::::isFutureExactInValid()","103":"ZonedDateTimeConstraintTest::::isFutureExactInValid()","104":"ZonedDateTimeConstraintTest::::isFutureExactInValid()","105":"ZonedDateTimeConstraintTest::::isFutureExactInValid()","107":"ZonedDateTimeConstraintTest::::isFutureOrPresentValid()","108":"ZonedDateTimeConstraintTest::::isFutureOrPresentValid()","109":"ZonedDateTimeConstraintTest::::isFutureOrPresentValid()","110":"ZonedDateTimeConstraintTest::::isFutureOrPresentValid()","111":"ZonedDateTimeConstraintTest::::isFutureOrPresentValid()","112":"ZonedDateTimeConstraintTest::::isFutureOrPresentValid()","114":"ZonedDateTimeConstraintTest::::isFutureOrPresentInValid()","115":"ZonedDateTimeConstraintTest::::isFutureOrPresentInValid()","116":"ZonedDateTimeConstraintTest::::isFutureOrPresentInValid()","117":"ZonedDateTimeConstraintTest::::isFutureOrPresentInValid()","118":"ZonedDateTimeConstraintTest::::isFutureOrPresentInValid()","119":"ZonedDateTimeConstraintTest::::isFutureOrPresentInValid()","121":"ZonedDateTimeConstraintTest::::isFutureOrPresentExactInValid()","122":"ZonedDateTimeConstraintTest::::isFutureOrPresentExactInValid()","123":"ZonedDateTimeConstraintTest::::isFutureOrPresentExactInValid()","124":"ZonedDateTimeConstraintTest::::isFutureOrPresentExactInValid()","125":"ZonedDateTimeConstraintTest::::isFutureOrPresentExactInValid()","126":"ZonedDateTimeConstraintTest::::isFutureOrPresentExactInValid()","127":"ZonedDateTimeConstraintTest::::isFutureOrPresentExactInValid()","129":"ZonedDateTimeConstraintTest::::isBeforeValid()","130":"ZonedDateTimeConstraintTest::::isBeforeValid()","131":"ZonedDateTimeConstraintTest::::isBeforeValid()","132":"ZonedDateTimeConstraintTest::::isBeforeValid()","133":"ZonedDateTimeConstraintTest::::isBeforeValid()","134":"ZonedDateTimeConstraintTest::::isBeforeValid()","135":"ZonedDateTimeConstraintTest::::isBeforeValid()","137":"ZonedDateTimeConstraintTest::::isBeforeInValid()","138":"ZonedDateTimeConstraintTest::::isBeforeInValid()","139":"ZonedDateTimeConstraintTest::::isBeforeInValid()","140":"ZonedDateTimeConstraintTest::::isBeforeInValid()","141":"ZonedDateTimeConstraintTest::::isBeforeInValid()","142":"ZonedDateTimeConstraintTest::::isBeforeInValid()","143":"ZonedDateTimeConstraintTest::::isBeforeInValid()","145":"ZonedDateTimeConstraintTest::::isBeforeExactInValid()","146":"ZonedDateTimeConstraintTest::::isBeforeExactInValid()","147":"ZonedDateTimeConstraintTest::::isBeforeExactInValid()","148":"ZonedDateTimeConstraintTest::::isBeforeExactInValid()","149":"ZonedDateTimeConstraintTest::::isBeforeExactInValid()","150":"ZonedDateTimeConstraintTest::::isBeforeExactInValid()","152":"ZonedDateTimeConstraintTest::::isAfterInValid()","153":"ZonedDateTimeConstraintTest::::isAfterInValid()","154":"ZonedDateTimeConstraintTest::::isAfterInValid()","155":"ZonedDateTimeConstraintTest::::isAfterInValid()","156":"ZonedDateTimeConstraintTest::::isAfterInValid()","157":"ZonedDateTimeConstraintTest::::isAfterInValid()","158":"ZonedDateTimeConstraintTest::::isAfterInValid()","160":"ZonedDateTimeConstraintTest::::isAfterValid()","161":"ZonedDateTimeConstraintTest::::isAfterValid()","162":"ZonedDateTimeConstraintTest::::isAfterValid()","163":"ZonedDateTimeConstraintTest::::isAfterValid()","164":"ZonedDateTimeConstraintTest::::isAfterValid()","165":"ZonedDateTimeConstraintTest::::isAfterValid()","166":"ZonedDateTimeConstraintTest::::isAfterValid()","168":"ZonedDateTimeConstraintTest::::isAfterExactInValid()","169":"ZonedDateTimeConstraintTest::::isAfterExactInValid()","170":"ZonedDateTimeConstraintTest::::isAfterExactInValid()","171":"ZonedDateTimeConstraintTest::::isAfterExactInValid()","172":"ZonedDateTimeConstraintTest::::isAfterExactInValid()","173":"ZonedDateTimeConstraintTest::::isAfterExactInValid()","175":"ZonedDateTimeConstraintTest::::isBeforeOrEqualValid()","176":"ZonedDateTimeConstraintTest::::isBeforeOrEqualValid()","177":"ZonedDateTimeConstraintTest::::isBeforeOrEqualValid()","178":"ZonedDateTimeConstraintTest::::isBeforeOrEqualValid()","179":"ZonedDateTimeConstraintTest::::isBeforeOrEqualValid()","180":"ZonedDateTimeConstraintTest::::isBeforeOrEqualValid()","181":"ZonedDateTimeConstraintTest::::isBeforeOrEqualValid()","183":"ZonedDateTimeConstraintTest::::isBeforeOrEqualInValid()","184":"ZonedDateTimeConstraintTest::::isBeforeOrEqualInValid()","185":"ZonedDateTimeConstraintTest::::isBeforeOrEqualInValid()","186":"ZonedDateTimeConstraintTest::::isBeforeOrEqualInValid()","187":"ZonedDateTimeConstraintTest::::isBeforeOrEqualInValid()","188":"ZonedDateTimeConstraintTest::::isBeforeOrEqualInValid()","189":"ZonedDateTimeConstraintTest::::isBeforeOrEqualInValid()","190":"ZonedDateTimeConstraintTest::::isBeforeOrEqualInValid()","192":"ZonedDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","193":"ZonedDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","194":"ZonedDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","195":"ZonedDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","196":"ZonedDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","197":"ZonedDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","198":"ZonedDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","200":"ZonedDateTimeConstraintTest::::isAfterOrEqualInValid()","201":"ZonedDateTimeConstraintTest::::isAfterOrEqualInValid()","202":"ZonedDateTimeConstraintTest::::isAfterOrEqualInValid()","203":"ZonedDateTimeConstraintTest::::isAfterOrEqualInValid()","204":"ZonedDateTimeConstraintTest::::isAfterOrEqualInValid()","205":"ZonedDateTimeConstraintTest::::isAfterOrEqualInValid()","206":"ZonedDateTimeConstraintTest::::isAfterOrEqualInValid()","208":"ZonedDateTimeConstraintTest::::isAfterOrEqualValid()","209":"ZonedDateTimeConstraintTest::::isAfterOrEqualValid()","210":"ZonedDateTimeConstraintTest::::isAfterOrEqualValid()","211":"ZonedDateTimeConstraintTest::::isAfterOrEqualValid()","212":"ZonedDateTimeConstraintTest::::isAfterOrEqualValid()","213":"ZonedDateTimeConstraintTest::::isAfterOrEqualValid()","214":"ZonedDateTimeConstraintTest::::isAfterOrEqualValid()","216":"ZonedDateTimeConstraintTest::::isAfterOrEqualExactInValid()","217":"ZonedDateTimeConstraintTest::::isAfterOrEqualExactInValid()","218":"ZonedDateTimeConstraintTest::::isAfterOrEqualExactInValid()","219":"ZonedDateTimeConstraintTest::::isAfterOrEqualExactInValid()","220":"ZonedDateTimeConstraintTest::::isAfterOrEqualExactInValid()","221":"ZonedDateTimeConstraintTest::::isAfterOrEqualExactInValid()","222":"ZonedDateTimeConstraintTest::::isAfterOrEqualExactInValid()","224":"ZonedDateTimeConstraintTest::::isBetweenValid(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.ZonedDateTime)","225":"ZonedDateTimeConstraintTest::::isBetweenValid(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.ZonedDateTime)","226":"ZonedDateTimeConstraintTest::::isBetweenValid(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.ZonedDateTime)","227":"ZonedDateTimeConstraintTest::::isBetweenValid(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.ZonedDateTime)","228":"ZonedDateTimeConstraintTest::::isBetweenValid(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.ZonedDateTime)","229":"ZonedDateTimeConstraintTest::::isBetweenValid(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.ZonedDateTime)","230":"ZonedDateTimeConstraintTest::::isBetweenValid(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.ZonedDateTime)","231":"ZonedDateTimeConstraintTest::::isBetweenValid(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.ZonedDateTime)","233":"ZonedDateTimeConstraintTest::::isBetweenExactInValid()","234":"ZonedDateTimeConstraintTest::::isBetweenExactInValid()","235":"ZonedDateTimeConstraintTest::::isBetweenExactInValid()","236":"ZonedDateTimeConstraintTest::::isBetweenExactInValid()","237":"ZonedDateTimeConstraintTest::::isBetweenExactInValid()","238":"ZonedDateTimeConstraintTest::::isBetweenExactInValid()","239":"ZonedDateTimeConstraintTest::::isBetweenExactInValid()","240":"ZonedDateTimeConstraintTest::::isBetweenExactInValid()","241":"ZonedDateTimeConstraintTest::::isBetweenExactInValid()","243":"ZonedDateTimeConstraintTest::::isBetweenInValidException()","244":"ZonedDateTimeConstraintTest::::isBetweenInValidException()","245":"ZonedDateTimeConstraintTest::::isBetweenInValidException()","246":"ZonedDateTimeConstraintTest::::isBetweenInValidException()","247":"ZonedDateTimeConstraintTest::::isBetweenInValidException()","248":"ZonedDateTimeConstraintTest::::isBetweenInValidException()","249":"ZonedDateTimeConstraintTest::::isBetweenInValidException()","250":"ZonedDateTimeConstraintTest::::isBetweenInValidException()","251":"ZonedDateTimeConstraintTest::::isBetweenInValidException()","252":"ZonedDateTimeConstraintTest::::isBetweenInValidException()","254":"ZonedDateTimeConstraintTest::::temporalFieldValid()","255":"ZonedDateTimeConstraintTest::::temporalFieldValid()","256":"ZonedDateTimeConstraintTest::::temporalFieldValid()","257":"ZonedDateTimeConstraintTest::::temporalFieldValid()","258":"ZonedDateTimeConstraintTest::::temporalFieldValid()","259":"ZonedDateTimeConstraintTest::::temporalFieldValid()","260":"ZonedDateTimeConstraintTest::::temporalFieldValid()","261":"ZonedDateTimeConstraintTest::::temporalFieldValid()","263":"ZonedDateTimeConstraintTest::::temporalFieldInValid()","264":"ZonedDateTimeConstraintTest::::temporalFieldInValid()","265":"ZonedDateTimeConstraintTest::::temporalFieldInValid()","266":"ZonedDateTimeConstraintTest::::temporalFieldInValid()","267":"ZonedDateTimeConstraintTest::::temporalFieldInValid()","268":"ZonedDateTimeConstraintTest::::temporalFieldInValid()","269":"ZonedDateTimeConstraintTest::::temporalFieldInValid()","270":"ZonedDateTimeConstraintTest::::temporalFieldInValid()","272":"ZonedDateTimeConstraintTest::::validBetweenDates()","273":"ZonedDateTimeConstraintTest::::validBetweenDates()","274":"ZonedDateTimeConstraintTest::::validBetweenDates()","275":"ZonedDateTimeConstraintTest::::validBetweenDates()","276":"ZonedDateTimeConstraintTest::::validBetweenDates()","277":"ZonedDateTimeConstraintTest::::validBetweenDates()","278":"ZonedDateTimeConstraintTest::::validBetweenDates()","279":"ZonedDateTimeConstraintTest::::validBetweenDates()","280":"ZonedDateTimeConstraintTest::::validBetweenDates()","281":"ZonedDateTimeConstraintTest::::validBetweenDates()"},"tests":[{"test_lines":[43,48],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[50,55],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[57,62],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[64,69],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[71,76],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[78,84],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[86,91],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[93,98],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[100,105],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[107,112],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[114,119],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[121,127],"covered_lines":[29,34,39],"label":"ZonedDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[129,135],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[137,143],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[145,150],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[152,158],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[160,166],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[168,173],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[175,181],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[183,190],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[192,198],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[200,206],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[208,214],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[216,222],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[224,231],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[233,241],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[243,252],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[254,261],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[263,270],"covered_lines":[29,39],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/LocalDateTimeConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.LocalDateTime;\n","\n","import am.ik.yavi.constraint.base.ChronoLocalDateTimeConstraintBase;\n","\n","/**\n"," * This is the actual class for constraints on LocalDateTime.\n"," *\n"," * @author Diego Krupitza\n"," * @since 0.10.0\n"," */\n","public class LocalDateTimeConstraint<T> extends\n","\t\tChronoLocalDateTimeConstraintBase<T, LocalDateTime, LocalDateTimeConstraint<T>> {\n","\n","\t@Override\n","\tpublic LocalDateTimeConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected LocalDateTime getNow(Clock clock) {\n","\t\treturn LocalDateTime.now(clock);\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.Instant;\n","import java.time.LocalDateTime;\n","import java.time.ZoneId;\n","import java.time.temporal.ChronoUnit;\n","import java.util.concurrent.atomic.AtomicReference;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","import java.util.function.Supplier;\n","import java.util.stream.IntStream;\n","import java.util.stream.Stream;\n","\n","import am.ik.yavi.arguments.LocalDateTimeValidator;\n","import am.ik.yavi.builder.LocalDateTimeValidatorBuilder;\n","import am.ik.yavi.core.Validated;\n","import org.junit.jupiter.api.Test;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.Arguments;\n","import org.junit.jupiter.params.provider.MethodSource;\n","\n","import static java.time.DayOfWeek.SATURDAY;\n","import static java.time.temporal.ChronoField.DAY_OF_WEEK;\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.Assertions.assertThatThrownBy;\n","\n","class LocalDateTimeConstraintTest {\n","\t@Test\n","\tvoid isPastValid() {\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(LocalDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastInValid() {\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(LocalDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.past(clock));\n","\t\tassertThat(predicate.test(LocalDateTime.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentValid() {\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(LocalDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentInValid() {\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(LocalDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.pastOrPresent(clock));\n","\t\tassertThat(predicate.test(LocalDateTime.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureValid() {\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(LocalDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureInValid() {\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(LocalDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.future(clock));\n","\t\tassertThat(predicate.test(LocalDateTime.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentValid() {\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(LocalDateTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentInValid() {\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(LocalDateTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.futureOrPresent(clock));\n","\t\tassertThat(predicate.test(LocalDateTime.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.before(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tLocalDateTime past = now.minusDays(10);\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.before(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeExactInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.before(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.minusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterExactInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(c -> c.after(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tLocalDateTime past = now.minusDays(10);\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualExactInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.minusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualExactInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@MethodSource(\"validBetweenDates\")\n","\tvoid isBetweenValid(LocalDateTime now, LocalDateTime rangeFrom,\n","\t\t\tLocalDateTime rangeTo) {\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> rangeFrom, () -> rangeTo));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenExactInValid() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\t\tSupplier<LocalDateTime> nowSupplier = () -> now;\n","\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(nowSupplier, nowSupplier));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenInValidException() {\n","\t\tLocalDateTime now = LocalDateTime.now();\n","\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> now.plusDays(1), () -> now.minusDays(1)));\n","\t\tassertThatThrownBy(() -> predicate.test(now))\n","\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n","\t\t\t\t.hasMessageContaining(\"Parameter 'rangeFrom' has to be before 'rangeTo'\");\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldValid() {\n","\t\tLocalDateTime value = LocalDateTime.of(2022, 1, 1, 0, 0, 0);\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(DAY_OF_WEEK, week -> week == SATURDAY.getValue()));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldInValid() {\n","\t\tLocalDateTime value = LocalDateTime.of(2022, 1, 2, 0, 0, 0);\n","\t\tPredicate<LocalDateTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(DAY_OF_WEEK, week -> week == SATURDAY.getValue()));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid Message() {\n","\t\tfinal AtomicReference<LocalDateTime> saved = new AtomicReference<>();\n","\t\tfinal LocalDateTimeValidator<LocalDateTime> validator = LocalDateTimeValidatorBuilder\n","\t\t\t\t.of(\"now\", c -> c.after(() -> {\n","\t\t\t\t\tfinal LocalDateTime now = LocalDateTime.now();\n","\t\t\t\t\tsaved.set(now);\n","\t\t\t\t\treturn now;\n","\t\t\t\t})).build();\n","\t\tfinal Validated<LocalDateTime> validated = validator\n","\t\t\t\t.validate(LocalDateTime.now());\n","\t\tassertThat(validated.isValid()).isFalse();\n","\t\tassertThat(validated.errors().get(0).message())\n","\t\t\t\t.isEqualTo(\"\\\"now\\\" has to be after \" + saved.get());\n","\t}\n","\n","\tprivate static Stream<Arguments> validBetweenDates() {\n","\t\treturn IntStream.rangeClosed(1, 10).boxed().map(i -> {\n","\t\t\tLocalDateTime now = LocalDateTime.now();\n","\t\t\treturn Arguments.of(now, now.minusHours(i), now.plusHours(i));\n","\t\t});\n","\t}\n","\n","\tprivate static Predicate<LocalDateTime> retrievePredicate(\n","\t\t\tFunction<LocalDateTimeConstraint<LocalDateTime>, LocalDateTimeConstraint<LocalDateTime>> constraint) {\n","\t\treturn constraint.apply(new LocalDateTimeConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"LocalDateTimeConstraint::::cast()":[32,35],"LocalDateTimeConstraint::::getNow(java.time.Clock)":[37,40]},"test_method_lines_dic":{"LocalDateTimeConstraintTest::::isPastValid()":[44,49],"LocalDateTimeConstraintTest::::isPastInValid()":[51,56],"LocalDateTimeConstraintTest::::isPastExactInValid()":[58,63],"LocalDateTimeConstraintTest::::isPastOrPresentValid()":[65,70],"LocalDateTimeConstraintTest::::isPastOrPresentInValid()":[72,77],"LocalDateTimeConstraintTest::::isPastOrPresentExactInValid()":[79,85],"LocalDateTimeConstraintTest::::isFutureValid()":[87,92],"LocalDateTimeConstraintTest::::isFutureInValid()":[94,99],"LocalDateTimeConstraintTest::::isFutureExactInValid()":[101,106],"LocalDateTimeConstraintTest::::isFutureOrPresentValid()":[108,113],"LocalDateTimeConstraintTest::::isFutureOrPresentInValid()":[115,120],"LocalDateTimeConstraintTest::::isFutureOrPresentExactInValid()":[122,128],"LocalDateTimeConstraintTest::::isBeforeValid()":[130,136],"LocalDateTimeConstraintTest::::isBeforeInValid()":[138,144],"LocalDateTimeConstraintTest::::isBeforeExactInValid()":[146,151],"LocalDateTimeConstraintTest::::isAfterInValid()":[153,159],"LocalDateTimeConstraintTest::::isAfterValid()":[161,167],"LocalDateTimeConstraintTest::::isAfterExactInValid()":[169,174],"LocalDateTimeConstraintTest::::isBeforeOrEqualValid()":[176,182],"LocalDateTimeConstraintTest::::isBeforeOrEqualInValid()":[184,191],"LocalDateTimeConstraintTest::::isBeforeOrEqualExactInValid()":[193,199],"LocalDateTimeConstraintTest::::isAfterOrEqualInValid()":[201,207],"LocalDateTimeConstraintTest::::isAfterOrEqualValid()":[209,215],"LocalDateTimeConstraintTest::::isAfterOrEqualExactInValid()":[217,223],"LocalDateTimeConstraintTest::::isBetweenValid(java.time.LocalDateTime,java.time.LocalDateTime,java.time.LocalDateTime)":[225,232],"LocalDateTimeConstraintTest::::isBetweenExactInValid()":[234,242],"LocalDateTimeConstraintTest::::isBetweenInValidException()":[244,253],"LocalDateTimeConstraintTest::::temporalFieldValid()":[255,261],"LocalDateTimeConstraintTest::::temporalFieldInValid()":[263,269],"LocalDateTimeConstraintTest::::Message()":[271,285],"LocalDateTimeConstraintTest::::validBetweenDates()":[287,292]},"reverse_method_lines_dic":{"32":"LocalDateTimeConstraint::::cast()","33":"LocalDateTimeConstraint::::cast()","34":"LocalDateTimeConstraint::::cast()","35":"LocalDateTimeConstraint::::cast()","37":"LocalDateTimeConstraint::::getNow(java.time.Clock)","38":"LocalDateTimeConstraint::::getNow(java.time.Clock)","39":"LocalDateTimeConstraint::::getNow(java.time.Clock)","40":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},"test_reverse_method_lines_dic":{"44":"LocalDateTimeConstraintTest::::isPastValid()","45":"LocalDateTimeConstraintTest::::isPastValid()","46":"LocalDateTimeConstraintTest::::isPastValid()","47":"LocalDateTimeConstraintTest::::isPastValid()","48":"LocalDateTimeConstraintTest::::isPastValid()","49":"LocalDateTimeConstraintTest::::isPastValid()","51":"LocalDateTimeConstraintTest::::isPastInValid()","52":"LocalDateTimeConstraintTest::::isPastInValid()","53":"LocalDateTimeConstraintTest::::isPastInValid()","54":"LocalDateTimeConstraintTest::::isPastInValid()","55":"LocalDateTimeConstraintTest::::isPastInValid()","56":"LocalDateTimeConstraintTest::::isPastInValid()","58":"LocalDateTimeConstraintTest::::isPastExactInValid()","59":"LocalDateTimeConstraintTest::::isPastExactInValid()","60":"LocalDateTimeConstraintTest::::isPastExactInValid()","61":"LocalDateTimeConstraintTest::::isPastExactInValid()","62":"LocalDateTimeConstraintTest::::isPastExactInValid()","63":"LocalDateTimeConstraintTest::::isPastExactInValid()","65":"LocalDateTimeConstraintTest::::isPastOrPresentValid()","66":"LocalDateTimeConstraintTest::::isPastOrPresentValid()","67":"LocalDateTimeConstraintTest::::isPastOrPresentValid()","68":"LocalDateTimeConstraintTest::::isPastOrPresentValid()","69":"LocalDateTimeConstraintTest::::isPastOrPresentValid()","70":"LocalDateTimeConstraintTest::::isPastOrPresentValid()","72":"LocalDateTimeConstraintTest::::isPastOrPresentInValid()","73":"LocalDateTimeConstraintTest::::isPastOrPresentInValid()","74":"LocalDateTimeConstraintTest::::isPastOrPresentInValid()","75":"LocalDateTimeConstraintTest::::isPastOrPresentInValid()","76":"LocalDateTimeConstraintTest::::isPastOrPresentInValid()","77":"LocalDateTimeConstraintTest::::isPastOrPresentInValid()","79":"LocalDateTimeConstraintTest::::isPastOrPresentExactInValid()","80":"LocalDateTimeConstraintTest::::isPastOrPresentExactInValid()","81":"LocalDateTimeConstraintTest::::isPastOrPresentExactInValid()","82":"LocalDateTimeConstraintTest::::isPastOrPresentExactInValid()","83":"LocalDateTimeConstraintTest::::isPastOrPresentExactInValid()","84":"LocalDateTimeConstraintTest::::isPastOrPresentExactInValid()","85":"LocalDateTimeConstraintTest::::isPastOrPresentExactInValid()","87":"LocalDateTimeConstraintTest::::isFutureValid()","88":"LocalDateTimeConstraintTest::::isFutureValid()","89":"LocalDateTimeConstraintTest::::isFutureValid()","90":"LocalDateTimeConstraintTest::::isFutureValid()","91":"LocalDateTimeConstraintTest::::isFutureValid()","92":"LocalDateTimeConstraintTest::::isFutureValid()","94":"LocalDateTimeConstraintTest::::isFutureInValid()","95":"LocalDateTimeConstraintTest::::isFutureInValid()","96":"LocalDateTimeConstraintTest::::isFutureInValid()","97":"LocalDateTimeConstraintTest::::isFutureInValid()","98":"LocalDateTimeConstraintTest::::isFutureInValid()","99":"LocalDateTimeConstraintTest::::isFutureInValid()","101":"LocalDateTimeConstraintTest::::isFutureExactInValid()","102":"LocalDateTimeConstraintTest::::isFutureExactInValid()","103":"LocalDateTimeConstraintTest::::isFutureExactInValid()","104":"LocalDateTimeConstraintTest::::isFutureExactInValid()","105":"LocalDateTimeConstraintTest::::isFutureExactInValid()","106":"LocalDateTimeConstraintTest::::isFutureExactInValid()","108":"LocalDateTimeConstraintTest::::isFutureOrPresentValid()","109":"LocalDateTimeConstraintTest::::isFutureOrPresentValid()","110":"LocalDateTimeConstraintTest::::isFutureOrPresentValid()","111":"LocalDateTimeConstraintTest::::isFutureOrPresentValid()","112":"LocalDateTimeConstraintTest::::isFutureOrPresentValid()","113":"LocalDateTimeConstraintTest::::isFutureOrPresentValid()","115":"LocalDateTimeConstraintTest::::isFutureOrPresentInValid()","116":"LocalDateTimeConstraintTest::::isFutureOrPresentInValid()","117":"LocalDateTimeConstraintTest::::isFutureOrPresentInValid()","118":"LocalDateTimeConstraintTest::::isFutureOrPresentInValid()","119":"LocalDateTimeConstraintTest::::isFutureOrPresentInValid()","120":"LocalDateTimeConstraintTest::::isFutureOrPresentInValid()","122":"LocalDateTimeConstraintTest::::isFutureOrPresentExactInValid()","123":"LocalDateTimeConstraintTest::::isFutureOrPresentExactInValid()","124":"LocalDateTimeConstraintTest::::isFutureOrPresentExactInValid()","125":"LocalDateTimeConstraintTest::::isFutureOrPresentExactInValid()","126":"LocalDateTimeConstraintTest::::isFutureOrPresentExactInValid()","127":"LocalDateTimeConstraintTest::::isFutureOrPresentExactInValid()","128":"LocalDateTimeConstraintTest::::isFutureOrPresentExactInValid()","130":"LocalDateTimeConstraintTest::::isBeforeValid()","131":"LocalDateTimeConstraintTest::::isBeforeValid()","132":"LocalDateTimeConstraintTest::::isBeforeValid()","133":"LocalDateTimeConstraintTest::::isBeforeValid()","134":"LocalDateTimeConstraintTest::::isBeforeValid()","135":"LocalDateTimeConstraintTest::::isBeforeValid()","136":"LocalDateTimeConstraintTest::::isBeforeValid()","138":"LocalDateTimeConstraintTest::::isBeforeInValid()","139":"LocalDateTimeConstraintTest::::isBeforeInValid()","140":"LocalDateTimeConstraintTest::::isBeforeInValid()","141":"LocalDateTimeConstraintTest::::isBeforeInValid()","142":"LocalDateTimeConstraintTest::::isBeforeInValid()","143":"LocalDateTimeConstraintTest::::isBeforeInValid()","144":"LocalDateTimeConstraintTest::::isBeforeInValid()","146":"LocalDateTimeConstraintTest::::isBeforeExactInValid()","147":"LocalDateTimeConstraintTest::::isBeforeExactInValid()","148":"LocalDateTimeConstraintTest::::isBeforeExactInValid()","149":"LocalDateTimeConstraintTest::::isBeforeExactInValid()","150":"LocalDateTimeConstraintTest::::isBeforeExactInValid()","151":"LocalDateTimeConstraintTest::::isBeforeExactInValid()","153":"LocalDateTimeConstraintTest::::isAfterInValid()","154":"LocalDateTimeConstraintTest::::isAfterInValid()","155":"LocalDateTimeConstraintTest::::isAfterInValid()","156":"LocalDateTimeConstraintTest::::isAfterInValid()","157":"LocalDateTimeConstraintTest::::isAfterInValid()","158":"LocalDateTimeConstraintTest::::isAfterInValid()","159":"LocalDateTimeConstraintTest::::isAfterInValid()","161":"LocalDateTimeConstraintTest::::isAfterValid()","162":"LocalDateTimeConstraintTest::::isAfterValid()","163":"LocalDateTimeConstraintTest::::isAfterValid()","164":"LocalDateTimeConstraintTest::::isAfterValid()","165":"LocalDateTimeConstraintTest::::isAfterValid()","166":"LocalDateTimeConstraintTest::::isAfterValid()","167":"LocalDateTimeConstraintTest::::isAfterValid()","169":"LocalDateTimeConstraintTest::::isAfterExactInValid()","170":"LocalDateTimeConstraintTest::::isAfterExactInValid()","171":"LocalDateTimeConstraintTest::::isAfterExactInValid()","172":"LocalDateTimeConstraintTest::::isAfterExactInValid()","173":"LocalDateTimeConstraintTest::::isAfterExactInValid()","174":"LocalDateTimeConstraintTest::::isAfterExactInValid()","176":"LocalDateTimeConstraintTest::::isBeforeOrEqualValid()","177":"LocalDateTimeConstraintTest::::isBeforeOrEqualValid()","178":"LocalDateTimeConstraintTest::::isBeforeOrEqualValid()","179":"LocalDateTimeConstraintTest::::isBeforeOrEqualValid()","180":"LocalDateTimeConstraintTest::::isBeforeOrEqualValid()","181":"LocalDateTimeConstraintTest::::isBeforeOrEqualValid()","182":"LocalDateTimeConstraintTest::::isBeforeOrEqualValid()","184":"LocalDateTimeConstraintTest::::isBeforeOrEqualInValid()","185":"LocalDateTimeConstraintTest::::isBeforeOrEqualInValid()","186":"LocalDateTimeConstraintTest::::isBeforeOrEqualInValid()","187":"LocalDateTimeConstraintTest::::isBeforeOrEqualInValid()","188":"LocalDateTimeConstraintTest::::isBeforeOrEqualInValid()","189":"LocalDateTimeConstraintTest::::isBeforeOrEqualInValid()","190":"LocalDateTimeConstraintTest::::isBeforeOrEqualInValid()","191":"LocalDateTimeConstraintTest::::isBeforeOrEqualInValid()","193":"LocalDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","194":"LocalDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","195":"LocalDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","196":"LocalDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","197":"LocalDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","198":"LocalDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","199":"LocalDateTimeConstraintTest::::isBeforeOrEqualExactInValid()","201":"LocalDateTimeConstraintTest::::isAfterOrEqualInValid()","202":"LocalDateTimeConstraintTest::::isAfterOrEqualInValid()","203":"LocalDateTimeConstraintTest::::isAfterOrEqualInValid()","204":"LocalDateTimeConstraintTest::::isAfterOrEqualInValid()","205":"LocalDateTimeConstraintTest::::isAfterOrEqualInValid()","206":"LocalDateTimeConstraintTest::::isAfterOrEqualInValid()","207":"LocalDateTimeConstraintTest::::isAfterOrEqualInValid()","209":"LocalDateTimeConstraintTest::::isAfterOrEqualValid()","210":"LocalDateTimeConstraintTest::::isAfterOrEqualValid()","211":"LocalDateTimeConstraintTest::::isAfterOrEqualValid()","212":"LocalDateTimeConstraintTest::::isAfterOrEqualValid()","213":"LocalDateTimeConstraintTest::::isAfterOrEqualValid()","214":"LocalDateTimeConstraintTest::::isAfterOrEqualValid()","215":"LocalDateTimeConstraintTest::::isAfterOrEqualValid()","217":"LocalDateTimeConstraintTest::::isAfterOrEqualExactInValid()","218":"LocalDateTimeConstraintTest::::isAfterOrEqualExactInValid()","219":"LocalDateTimeConstraintTest::::isAfterOrEqualExactInValid()","220":"LocalDateTimeConstraintTest::::isAfterOrEqualExactInValid()","221":"LocalDateTimeConstraintTest::::isAfterOrEqualExactInValid()","222":"LocalDateTimeConstraintTest::::isAfterOrEqualExactInValid()","223":"LocalDateTimeConstraintTest::::isAfterOrEqualExactInValid()","225":"LocalDateTimeConstraintTest::::isBetweenValid(java.time.LocalDateTime,java.time.LocalDateTime,java.time.LocalDateTime)","226":"LocalDateTimeConstraintTest::::isBetweenValid(java.time.LocalDateTime,java.time.LocalDateTime,java.time.LocalDateTime)","227":"LocalDateTimeConstraintTest::::isBetweenValid(java.time.LocalDateTime,java.time.LocalDateTime,java.time.LocalDateTime)","228":"LocalDateTimeConstraintTest::::isBetweenValid(java.time.LocalDateTime,java.time.LocalDateTime,java.time.LocalDateTime)","229":"LocalDateTimeConstraintTest::::isBetweenValid(java.time.LocalDateTime,java.time.LocalDateTime,java.time.LocalDateTime)","230":"LocalDateTimeConstraintTest::::isBetweenValid(java.time.LocalDateTime,java.time.LocalDateTime,java.time.LocalDateTime)","231":"LocalDateTimeConstraintTest::::isBetweenValid(java.time.LocalDateTime,java.time.LocalDateTime,java.time.LocalDateTime)","232":"LocalDateTimeConstraintTest::::isBetweenValid(java.time.LocalDateTime,java.time.LocalDateTime,java.time.LocalDateTime)","234":"LocalDateTimeConstraintTest::::isBetweenExactInValid()","235":"LocalDateTimeConstraintTest::::isBetweenExactInValid()","236":"LocalDateTimeConstraintTest::::isBetweenExactInValid()","237":"LocalDateTimeConstraintTest::::isBetweenExactInValid()","238":"LocalDateTimeConstraintTest::::isBetweenExactInValid()","239":"LocalDateTimeConstraintTest::::isBetweenExactInValid()","240":"LocalDateTimeConstraintTest::::isBetweenExactInValid()","241":"LocalDateTimeConstraintTest::::isBetweenExactInValid()","242":"LocalDateTimeConstraintTest::::isBetweenExactInValid()","244":"LocalDateTimeConstraintTest::::isBetweenInValidException()","245":"LocalDateTimeConstraintTest::::isBetweenInValidException()","246":"LocalDateTimeConstraintTest::::isBetweenInValidException()","247":"LocalDateTimeConstraintTest::::isBetweenInValidException()","248":"LocalDateTimeConstraintTest::::isBetweenInValidException()","249":"LocalDateTimeConstraintTest::::isBetweenInValidException()","250":"LocalDateTimeConstraintTest::::isBetweenInValidException()","251":"LocalDateTimeConstraintTest::::isBetweenInValidException()","252":"LocalDateTimeConstraintTest::::isBetweenInValidException()","253":"LocalDateTimeConstraintTest::::isBetweenInValidException()","255":"LocalDateTimeConstraintTest::::temporalFieldValid()","256":"LocalDateTimeConstraintTest::::temporalFieldValid()","257":"LocalDateTimeConstraintTest::::temporalFieldValid()","258":"LocalDateTimeConstraintTest::::temporalFieldValid()","259":"LocalDateTimeConstraintTest::::temporalFieldValid()","260":"LocalDateTimeConstraintTest::::temporalFieldValid()","261":"LocalDateTimeConstraintTest::::temporalFieldValid()","263":"LocalDateTimeConstraintTest::::temporalFieldInValid()","264":"LocalDateTimeConstraintTest::::temporalFieldInValid()","265":"LocalDateTimeConstraintTest::::temporalFieldInValid()","266":"LocalDateTimeConstraintTest::::temporalFieldInValid()","267":"LocalDateTimeConstraintTest::::temporalFieldInValid()","268":"LocalDateTimeConstraintTest::::temporalFieldInValid()","269":"LocalDateTimeConstraintTest::::temporalFieldInValid()","271":"LocalDateTimeConstraintTest::::Message()","272":"LocalDateTimeConstraintTest::::Message()","273":"LocalDateTimeConstraintTest::::Message()","274":"LocalDateTimeConstraintTest::::Message()","275":"LocalDateTimeConstraintTest::::Message()","276":"LocalDateTimeConstraintTest::::Message()","277":"LocalDateTimeConstraintTest::::Message()","278":"LocalDateTimeConstraintTest::::Message()","279":"LocalDateTimeConstraintTest::::Message()","280":"LocalDateTimeConstraintTest::::Message()","281":"LocalDateTimeConstraintTest::::Message()","282":"LocalDateTimeConstraintTest::::Message()","283":"LocalDateTimeConstraintTest::::Message()","284":"LocalDateTimeConstraintTest::::Message()","285":"LocalDateTimeConstraintTest::::Message()","287":"LocalDateTimeConstraintTest::::validBetweenDates()","288":"LocalDateTimeConstraintTest::::validBetweenDates()","289":"LocalDateTimeConstraintTest::::validBetweenDates()","290":"LocalDateTimeConstraintTest::::validBetweenDates()","291":"LocalDateTimeConstraintTest::::validBetweenDates()","292":"LocalDateTimeConstraintTest::::validBetweenDates()"},"tests":[{"test_lines":[44,49],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[51,56],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[58,63],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[65,70],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[72,77],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[79,85],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[87,92],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[94,99],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[101,106],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[108,113],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[115,120],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[122,128],"covered_lines":[29,34,39],"label":"LocalDateTimeConstraint::::getNow(java.time.Clock)"},{"test_lines":[130,136],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[138,144],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[146,151],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[153,159],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[161,167],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[169,174],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[176,182],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[184,191],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[193,199],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[201,207],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[209,215],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[217,223],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[225,232],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[234,242],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[244,253],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[255,261],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[263,269],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[271,285],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/LocalTimeConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.LocalTime;\n","\n","import am.ik.yavi.constraint.base.TemporalConstraintBase;\n","\n","/**\n"," * This is the actual class for constraints on LocalTime.\n"," *\n"," * @author Diego Krupitza\n"," * @since 0.10.0\n"," */\n","public class LocalTimeConstraint<T>\n","\t\textends TemporalConstraintBase<T, LocalTime, LocalTimeConstraint<T>> {\n","\t@Override\n","\tprotected boolean isAfter(LocalTime a, LocalTime b) {\n","\t\treturn a.isAfter(b);\n","\t}\n","\n","\t@Override\n","\tprotected boolean isBefore(LocalTime a, LocalTime b) {\n","\t\treturn a.isBefore(b);\n","\t}\n","\n","\t@Override\n","\tprotected LocalTime getNow(Clock clock) {\n","\t\treturn LocalTime.now(clock);\n","\t}\n","\n","\t@Override\n","\tpublic LocalTimeConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.Instant;\n","import java.time.LocalTime;\n","import java.time.ZoneId;\n","import java.time.temporal.ChronoUnit;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","import java.util.function.Supplier;\n","import java.util.stream.IntStream;\n","import java.util.stream.Stream;\n","\n","import org.junit.jupiter.api.Test;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.Arguments;\n","import org.junit.jupiter.params.provider.MethodSource;\n","\n","import static java.time.temporal.ChronoField.INSTANT_SECONDS;\n","import static java.time.temporal.ChronoField.MINUTE_OF_HOUR;\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.Assertions.assertThatThrownBy;\n","\n","class LocalTimeConstraintTest {\n","\n","\tprivate static final LocalTime BASE_TIME = LocalTime.of(12, 30);\n","\n","\t@Test\n","\tvoid isPastValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(LocalTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastInValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(LocalTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.past(clock));\n","\t\tassertThat(predicate.test(LocalTime.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(LocalTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentInValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(LocalTime.now().plus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.pastOrPresent(clock));\n","\t\tassertThat(predicate.test(LocalTime.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(LocalTime.now().plus(60, ChronoUnit.SECONDS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureInValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(LocalTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.future(clock));\n","\t\tassertThat(predicate.test(LocalTime.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(LocalTime.now().plus(60, ChronoUnit.SECONDS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentInValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(LocalTime.now().minus(60, ChronoUnit.SECONDS)))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.futureOrPresent(clock));\n","\t\tassertThat(predicate.test(LocalTime.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.before(() -> BASE_TIME.plusHours(10)));\n","\t\tassertThat(predicate.test(BASE_TIME)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeInValid() {\n","\t\tLocalTime past = BASE_TIME.minusHours(10);\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.before(() -> past));\n","\t\tassertThat(predicate.test(BASE_TIME)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeExactInValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.before(() -> BASE_TIME));\n","\t\tassertThat(predicate.test(BASE_TIME)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterInValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> BASE_TIME.plusHours(10)));\n","\t\tassertThat(predicate.test(BASE_TIME)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> BASE_TIME.minusHours(10)));\n","\t\tassertThat(predicate.test(BASE_TIME)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterExactInValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c.after(() -> BASE_TIME));\n","\t\tassertThat(predicate.test(BASE_TIME)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> BASE_TIME.plusHours(10)));\n","\t\tassertThat(predicate.test(BASE_TIME)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualInValid() {\n","\t\tLocalTime past = BASE_TIME.minusHours(10);\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> past));\n","\t\tassertThat(predicate.test(BASE_TIME)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualExactInValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> BASE_TIME));\n","\t\tassertThat(predicate.test(BASE_TIME)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualInValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> BASE_TIME.plusHours(10)));\n","\t\tassertThat(predicate.test(BASE_TIME)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> BASE_TIME.minusHours(10)));\n","\t\tassertThat(predicate.test(BASE_TIME)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualExactInValid() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> BASE_TIME));\n","\t\tassertThat(predicate.test(BASE_TIME)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@MethodSource(\"validBetweenDates\")\n","\tvoid isBetweenValid(LocalTime now, LocalTime rangeFrom, LocalTime rangeTo) {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> rangeFrom, () -> rangeTo));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenExactInValid() {\n","\t\tSupplier<LocalTime> nowSupplier = () -> BASE_TIME;\n","\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(nowSupplier, nowSupplier));\n","\t\tassertThat(predicate.test(BASE_TIME)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenInValidException() {\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(c -> c\n","\t\t\t\t.between(() -> BASE_TIME.plusHours(1), () -> BASE_TIME.minusHours(1)));\n","\t\tassertThatThrownBy(() -> predicate.test(BASE_TIME))\n","\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n","\t\t\t\t.hasMessageContaining(\"Parameter 'rangeFrom' has to be before 'rangeTo'\");\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldValid() {\n","\t\tLocalTime value = LocalTime.of(10, 30, 0);\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(MINUTE_OF_HOUR, s -> s % 15 == 0));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldInValid() {\n","\t\tLocalTime value = LocalTime.of(10, 40, 0);\n","\t\tPredicate<LocalTime> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(MINUTE_OF_HOUR, s -> s % 15 == 0));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\tprivate static Stream<Arguments> validBetweenDates() {\n","\t\treturn IntStream.rangeClosed(1, 10).boxed().map(i -> Arguments.of(BASE_TIME,\n","\t\t\t\tBASE_TIME.minusHours(i), BASE_TIME.plusHours(i)));\n","\t}\n","\n","\tprivate static Predicate<LocalTime> retrievePredicate(\n","\t\t\tFunction<LocalTimeConstraint<LocalTime>, LocalTimeConstraint<LocalTime>> constraint) {\n","\t\treturn constraint.apply(new LocalTimeConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","\n","}\n"],"method_lines_dic":{"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)":[31,34],"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)":[36,39],"LocalTimeConstraint::::getNow(java.time.Clock)":[41,44],"LocalTimeConstraint::::cast()":[46,49]},"test_method_lines_dic":{"LocalTimeConstraintTest::::isPastValid()":[43,48],"LocalTimeConstraintTest::::isPastInValid()":[50,55],"LocalTimeConstraintTest::::isPastExactInValid()":[57,62],"LocalTimeConstraintTest::::isPastOrPresentValid()":[64,69],"LocalTimeConstraintTest::::isPastOrPresentInValid()":[71,76],"LocalTimeConstraintTest::::isPastOrPresentExactInValid()":[78,83],"LocalTimeConstraintTest::::isFutureValid()":[85,89],"LocalTimeConstraintTest::::isFutureInValid()":[91,96],"LocalTimeConstraintTest::::isFutureExactInValid()":[98,103],"LocalTimeConstraintTest::::isFutureOrPresentValid()":[105,109],"LocalTimeConstraintTest::::isFutureOrPresentInValid()":[111,116],"LocalTimeConstraintTest::::isFutureOrPresentExactInValid()":[118,123],"LocalTimeConstraintTest::::isBeforeValid()":[125,130],"LocalTimeConstraintTest::::isBeforeInValid()":[132,137],"LocalTimeConstraintTest::::isBeforeExactInValid()":[139,144],"LocalTimeConstraintTest::::isAfterInValid()":[146,151],"LocalTimeConstraintTest::::isAfterValid()":[153,158],"LocalTimeConstraintTest::::isAfterExactInValid()":[160,164],"LocalTimeConstraintTest::::isBeforeOrEqualValid()":[166,171],"LocalTimeConstraintTest::::isBeforeOrEqualInValid()":[173,179],"LocalTimeConstraintTest::::isBeforeOrEqualExactInValid()":[181,186],"LocalTimeConstraintTest::::isAfterOrEqualInValid()":[188,193],"LocalTimeConstraintTest::::isAfterOrEqualValid()":[195,200],"LocalTimeConstraintTest::::isAfterOrEqualExactInValid()":[202,207],"LocalTimeConstraintTest::::isBetweenValid(java.time.LocalTime,java.time.LocalTime,java.time.LocalTime)":[209,215],"LocalTimeConstraintTest::::isBetweenExactInValid()":[217,224],"LocalTimeConstraintTest::::isBetweenInValidException()":[226,233],"LocalTimeConstraintTest::::temporalFieldValid()":[235,241],"LocalTimeConstraintTest::::temporalFieldInValid()":[243,249],"LocalTimeConstraintTest::::validBetweenDates()":[251,254]},"reverse_method_lines_dic":{"31":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)","32":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)","33":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)","34":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)","36":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)","37":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)","38":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)","39":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)","41":"LocalTimeConstraint::::getNow(java.time.Clock)","42":"LocalTimeConstraint::::getNow(java.time.Clock)","43":"LocalTimeConstraint::::getNow(java.time.Clock)","44":"LocalTimeConstraint::::getNow(java.time.Clock)","46":"LocalTimeConstraint::::cast()","47":"LocalTimeConstraint::::cast()","48":"LocalTimeConstraint::::cast()","49":"LocalTimeConstraint::::cast()"},"test_reverse_method_lines_dic":{"43":"LocalTimeConstraintTest::::isPastValid()","44":"LocalTimeConstraintTest::::isPastValid()","45":"LocalTimeConstraintTest::::isPastValid()","46":"LocalTimeConstraintTest::::isPastValid()","47":"LocalTimeConstraintTest::::isPastValid()","48":"LocalTimeConstraintTest::::isPastValid()","50":"LocalTimeConstraintTest::::isPastInValid()","51":"LocalTimeConstraintTest::::isPastInValid()","52":"LocalTimeConstraintTest::::isPastInValid()","53":"LocalTimeConstraintTest::::isPastInValid()","54":"LocalTimeConstraintTest::::isPastInValid()","55":"LocalTimeConstraintTest::::isPastInValid()","57":"LocalTimeConstraintTest::::isPastExactInValid()","58":"LocalTimeConstraintTest::::isPastExactInValid()","59":"LocalTimeConstraintTest::::isPastExactInValid()","60":"LocalTimeConstraintTest::::isPastExactInValid()","61":"LocalTimeConstraintTest::::isPastExactInValid()","62":"LocalTimeConstraintTest::::isPastExactInValid()","64":"LocalTimeConstraintTest::::isPastOrPresentValid()","65":"LocalTimeConstraintTest::::isPastOrPresentValid()","66":"LocalTimeConstraintTest::::isPastOrPresentValid()","67":"LocalTimeConstraintTest::::isPastOrPresentValid()","68":"LocalTimeConstraintTest::::isPastOrPresentValid()","69":"LocalTimeConstraintTest::::isPastOrPresentValid()","71":"LocalTimeConstraintTest::::isPastOrPresentInValid()","72":"LocalTimeConstraintTest::::isPastOrPresentInValid()","73":"LocalTimeConstraintTest::::isPastOrPresentInValid()","74":"LocalTimeConstraintTest::::isPastOrPresentInValid()","75":"LocalTimeConstraintTest::::isPastOrPresentInValid()","76":"LocalTimeConstraintTest::::isPastOrPresentInValid()","78":"LocalTimeConstraintTest::::isPastOrPresentExactInValid()","79":"LocalTimeConstraintTest::::isPastOrPresentExactInValid()","80":"LocalTimeConstraintTest::::isPastOrPresentExactInValid()","81":"LocalTimeConstraintTest::::isPastOrPresentExactInValid()","82":"LocalTimeConstraintTest::::isPastOrPresentExactInValid()","83":"LocalTimeConstraintTest::::isPastOrPresentExactInValid()","85":"LocalTimeConstraintTest::::isFutureValid()","86":"LocalTimeConstraintTest::::isFutureValid()","87":"LocalTimeConstraintTest::::isFutureValid()","88":"LocalTimeConstraintTest::::isFutureValid()","89":"LocalTimeConstraintTest::::isFutureValid()","91":"LocalTimeConstraintTest::::isFutureInValid()","92":"LocalTimeConstraintTest::::isFutureInValid()","93":"LocalTimeConstraintTest::::isFutureInValid()","94":"LocalTimeConstraintTest::::isFutureInValid()","95":"LocalTimeConstraintTest::::isFutureInValid()","96":"LocalTimeConstraintTest::::isFutureInValid()","98":"LocalTimeConstraintTest::::isFutureExactInValid()","99":"LocalTimeConstraintTest::::isFutureExactInValid()","100":"LocalTimeConstraintTest::::isFutureExactInValid()","101":"LocalTimeConstraintTest::::isFutureExactInValid()","102":"LocalTimeConstraintTest::::isFutureExactInValid()","103":"LocalTimeConstraintTest::::isFutureExactInValid()","105":"LocalTimeConstraintTest::::isFutureOrPresentValid()","106":"LocalTimeConstraintTest::::isFutureOrPresentValid()","107":"LocalTimeConstraintTest::::isFutureOrPresentValid()","108":"LocalTimeConstraintTest::::isFutureOrPresentValid()","109":"LocalTimeConstraintTest::::isFutureOrPresentValid()","111":"LocalTimeConstraintTest::::isFutureOrPresentInValid()","112":"LocalTimeConstraintTest::::isFutureOrPresentInValid()","113":"LocalTimeConstraintTest::::isFutureOrPresentInValid()","114":"LocalTimeConstraintTest::::isFutureOrPresentInValid()","115":"LocalTimeConstraintTest::::isFutureOrPresentInValid()","116":"LocalTimeConstraintTest::::isFutureOrPresentInValid()","118":"LocalTimeConstraintTest::::isFutureOrPresentExactInValid()","119":"LocalTimeConstraintTest::::isFutureOrPresentExactInValid()","120":"LocalTimeConstraintTest::::isFutureOrPresentExactInValid()","121":"LocalTimeConstraintTest::::isFutureOrPresentExactInValid()","122":"LocalTimeConstraintTest::::isFutureOrPresentExactInValid()","123":"LocalTimeConstraintTest::::isFutureOrPresentExactInValid()","125":"LocalTimeConstraintTest::::isBeforeValid()","126":"LocalTimeConstraintTest::::isBeforeValid()","127":"LocalTimeConstraintTest::::isBeforeValid()","128":"LocalTimeConstraintTest::::isBeforeValid()","129":"LocalTimeConstraintTest::::isBeforeValid()","130":"LocalTimeConstraintTest::::isBeforeValid()","132":"LocalTimeConstraintTest::::isBeforeInValid()","133":"LocalTimeConstraintTest::::isBeforeInValid()","134":"LocalTimeConstraintTest::::isBeforeInValid()","135":"LocalTimeConstraintTest::::isBeforeInValid()","136":"LocalTimeConstraintTest::::isBeforeInValid()","137":"LocalTimeConstraintTest::::isBeforeInValid()","139":"LocalTimeConstraintTest::::isBeforeExactInValid()","140":"LocalTimeConstraintTest::::isBeforeExactInValid()","141":"LocalTimeConstraintTest::::isBeforeExactInValid()","142":"LocalTimeConstraintTest::::isBeforeExactInValid()","143":"LocalTimeConstraintTest::::isBeforeExactInValid()","144":"LocalTimeConstraintTest::::isBeforeExactInValid()","146":"LocalTimeConstraintTest::::isAfterInValid()","147":"LocalTimeConstraintTest::::isAfterInValid()","148":"LocalTimeConstraintTest::::isAfterInValid()","149":"LocalTimeConstraintTest::::isAfterInValid()","150":"LocalTimeConstraintTest::::isAfterInValid()","151":"LocalTimeConstraintTest::::isAfterInValid()","153":"LocalTimeConstraintTest::::isAfterValid()","154":"LocalTimeConstraintTest::::isAfterValid()","155":"LocalTimeConstraintTest::::isAfterValid()","156":"LocalTimeConstraintTest::::isAfterValid()","157":"LocalTimeConstraintTest::::isAfterValid()","158":"LocalTimeConstraintTest::::isAfterValid()","160":"LocalTimeConstraintTest::::isAfterExactInValid()","161":"LocalTimeConstraintTest::::isAfterExactInValid()","162":"LocalTimeConstraintTest::::isAfterExactInValid()","163":"LocalTimeConstraintTest::::isAfterExactInValid()","164":"LocalTimeConstraintTest::::isAfterExactInValid()","166":"LocalTimeConstraintTest::::isBeforeOrEqualValid()","167":"LocalTimeConstraintTest::::isBeforeOrEqualValid()","168":"LocalTimeConstraintTest::::isBeforeOrEqualValid()","169":"LocalTimeConstraintTest::::isBeforeOrEqualValid()","170":"LocalTimeConstraintTest::::isBeforeOrEqualValid()","171":"LocalTimeConstraintTest::::isBeforeOrEqualValid()","173":"LocalTimeConstraintTest::::isBeforeOrEqualInValid()","174":"LocalTimeConstraintTest::::isBeforeOrEqualInValid()","175":"LocalTimeConstraintTest::::isBeforeOrEqualInValid()","176":"LocalTimeConstraintTest::::isBeforeOrEqualInValid()","177":"LocalTimeConstraintTest::::isBeforeOrEqualInValid()","178":"LocalTimeConstraintTest::::isBeforeOrEqualInValid()","179":"LocalTimeConstraintTest::::isBeforeOrEqualInValid()","181":"LocalTimeConstraintTest::::isBeforeOrEqualExactInValid()","182":"LocalTimeConstraintTest::::isBeforeOrEqualExactInValid()","183":"LocalTimeConstraintTest::::isBeforeOrEqualExactInValid()","184":"LocalTimeConstraintTest::::isBeforeOrEqualExactInValid()","185":"LocalTimeConstraintTest::::isBeforeOrEqualExactInValid()","186":"LocalTimeConstraintTest::::isBeforeOrEqualExactInValid()","188":"LocalTimeConstraintTest::::isAfterOrEqualInValid()","189":"LocalTimeConstraintTest::::isAfterOrEqualInValid()","190":"LocalTimeConstraintTest::::isAfterOrEqualInValid()","191":"LocalTimeConstraintTest::::isAfterOrEqualInValid()","192":"LocalTimeConstraintTest::::isAfterOrEqualInValid()","193":"LocalTimeConstraintTest::::isAfterOrEqualInValid()","195":"LocalTimeConstraintTest::::isAfterOrEqualValid()","196":"LocalTimeConstraintTest::::isAfterOrEqualValid()","197":"LocalTimeConstraintTest::::isAfterOrEqualValid()","198":"LocalTimeConstraintTest::::isAfterOrEqualValid()","199":"LocalTimeConstraintTest::::isAfterOrEqualValid()","200":"LocalTimeConstraintTest::::isAfterOrEqualValid()","202":"LocalTimeConstraintTest::::isAfterOrEqualExactInValid()","203":"LocalTimeConstraintTest::::isAfterOrEqualExactInValid()","204":"LocalTimeConstraintTest::::isAfterOrEqualExactInValid()","205":"LocalTimeConstraintTest::::isAfterOrEqualExactInValid()","206":"LocalTimeConstraintTest::::isAfterOrEqualExactInValid()","207":"LocalTimeConstraintTest::::isAfterOrEqualExactInValid()","209":"LocalTimeConstraintTest::::isBetweenValid(java.time.LocalTime,java.time.LocalTime,java.time.LocalTime)","210":"LocalTimeConstraintTest::::isBetweenValid(java.time.LocalTime,java.time.LocalTime,java.time.LocalTime)","211":"LocalTimeConstraintTest::::isBetweenValid(java.time.LocalTime,java.time.LocalTime,java.time.LocalTime)","212":"LocalTimeConstraintTest::::isBetweenValid(java.time.LocalTime,java.time.LocalTime,java.time.LocalTime)","213":"LocalTimeConstraintTest::::isBetweenValid(java.time.LocalTime,java.time.LocalTime,java.time.LocalTime)","214":"LocalTimeConstraintTest::::isBetweenValid(java.time.LocalTime,java.time.LocalTime,java.time.LocalTime)","215":"LocalTimeConstraintTest::::isBetweenValid(java.time.LocalTime,java.time.LocalTime,java.time.LocalTime)","217":"LocalTimeConstraintTest::::isBetweenExactInValid()","218":"LocalTimeConstraintTest::::isBetweenExactInValid()","219":"LocalTimeConstraintTest::::isBetweenExactInValid()","220":"LocalTimeConstraintTest::::isBetweenExactInValid()","221":"LocalTimeConstraintTest::::isBetweenExactInValid()","222":"LocalTimeConstraintTest::::isBetweenExactInValid()","223":"LocalTimeConstraintTest::::isBetweenExactInValid()","224":"LocalTimeConstraintTest::::isBetweenExactInValid()","226":"LocalTimeConstraintTest::::isBetweenInValidException()","227":"LocalTimeConstraintTest::::isBetweenInValidException()","228":"LocalTimeConstraintTest::::isBetweenInValidException()","229":"LocalTimeConstraintTest::::isBetweenInValidException()","230":"LocalTimeConstraintTest::::isBetweenInValidException()","231":"LocalTimeConstraintTest::::isBetweenInValidException()","232":"LocalTimeConstraintTest::::isBetweenInValidException()","233":"LocalTimeConstraintTest::::isBetweenInValidException()","235":"LocalTimeConstraintTest::::temporalFieldValid()","236":"LocalTimeConstraintTest::::temporalFieldValid()","237":"LocalTimeConstraintTest::::temporalFieldValid()","238":"LocalTimeConstraintTest::::temporalFieldValid()","239":"LocalTimeConstraintTest::::temporalFieldValid()","240":"LocalTimeConstraintTest::::temporalFieldValid()","241":"LocalTimeConstraintTest::::temporalFieldValid()","243":"LocalTimeConstraintTest::::temporalFieldInValid()","244":"LocalTimeConstraintTest::::temporalFieldInValid()","245":"LocalTimeConstraintTest::::temporalFieldInValid()","246":"LocalTimeConstraintTest::::temporalFieldInValid()","247":"LocalTimeConstraintTest::::temporalFieldInValid()","248":"LocalTimeConstraintTest::::temporalFieldInValid()","249":"LocalTimeConstraintTest::::temporalFieldInValid()","251":"LocalTimeConstraintTest::::validBetweenDates()","252":"LocalTimeConstraintTest::::validBetweenDates()","253":"LocalTimeConstraintTest::::validBetweenDates()","254":"LocalTimeConstraintTest::::validBetweenDates()"},"tests":[{"test_lines":[43,48],"covered_lines":[29,38,43,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[50,55],"covered_lines":[29,38,43,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[57,62],"covered_lines":[29,38,43,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[64,69],"covered_lines":[29,33,43,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[71,76],"covered_lines":[29,33,43,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[78,83],"covered_lines":[29,33,43,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[85,89],"covered_lines":[29,33,43,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[91,96],"covered_lines":[29,33,43,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[98,103],"covered_lines":[29,33,43,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[105,109],"covered_lines":[29,38,43,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[111,116],"covered_lines":[29,38,43,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[118,123],"covered_lines":[29,38,43,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[125,130],"covered_lines":[29,38,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[132,137],"covered_lines":[29,38,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[139,144],"covered_lines":[29,38,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[146,151],"covered_lines":[29,33,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[153,158],"covered_lines":[29,33,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[160,164],"covered_lines":[29,33,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[166,171],"covered_lines":[29,33,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[173,179],"covered_lines":[29,33,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[181,186],"covered_lines":[29,33,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[188,193],"covered_lines":[29,38,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[195,200],"covered_lines":[29,38,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[202,207],"covered_lines":[29,38,48],"label":"LocalTimeConstraint::::isBefore(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[209,215],"covered_lines":[29,33,38,48],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[217,224],"covered_lines":[29,33,38,48],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[226,233],"covered_lines":[29,33,48],"label":"LocalTimeConstraint::::isAfter(java.time.LocalTime,java.time.LocalTime)"},{"test_lines":[235,241],"covered_lines":[29,48],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[243,249],"covered_lines":[29,48],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/MapConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.Map;\n","import java.util.function.ToIntFunction;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.MAP_CONTAINS_KEY;\n","import static am.ik.yavi.core.ViolationMessage.Default.MAP_CONTAINS_VALUE;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class MapConstraint<T, K, V>\n","\t\textends ContainerConstraintBase<T, Map<K, V>, MapConstraint<T, K, V>> {\n","\n","\t@Override\n","\tpublic MapConstraint<T, K, V> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic MapConstraint<T, K, V> containsKey(K k) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> x.containsKey(k),\n","\t\t\t\tMAP_CONTAINS_KEY, () -> new Object[] { k }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\tpublic MapConstraint<T, K, V> containsValue(V v) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> x.containsValue(v),\n","\t\t\t\tMAP_CONTAINS_VALUE, () -> new Object[] { v }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<Map<K, V>> size() {\n","\t\treturn Map::size;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.util.Collections;\n","import java.util.HashMap;\n","import java.util.Map;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class MapConstraintTest {\n","\n","\t@Test\n","\tvoid containsKey() {\n","\t\tPredicate<Map<String, String>> predicate = retrievePredicate(\n","\t\t\t\tc -> c.containsKey(\"foo\"));\n","\t\tassertThat(predicate.test(Collections.singletonMap(\"foo\", \"bar\"))).isTrue();\n","\t\tassertThat(predicate.test(Collections.singletonMap(\"bar\", \"baz\"))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid containsValue() {\n","\t\tPredicate<Map<String, String>> predicate = retrievePredicate(\n","\t\t\t\tc -> c.containsValue(\"bar\"));\n","\t\tassertThat(predicate.test(Collections.singletonMap(\"foo\", \"bar\"))).isTrue();\n","\t\tassertThat(predicate.test(Collections.singletonMap(\"foo\", \"baz\"))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<Map<String, String>> predicate = retrievePredicate(c -> c.fixedSize(2));\n","\t\tassertThat(predicate.test(Collections.singletonMap(\"foo\", \"bar\"))).isFalse();\n","\t\tassertThat(predicate.test(new HashMap<String, String>() {\n","\t\t\t{\n","\t\t\t\tput(\"a\", \"b\");\n","\t\t\t\tput(\"b\", \"c\");\n","\t\t\t}\n","\t\t})).isTrue();\n","\t\tassertThat(predicate.test(new HashMap<String, String>() {\n","\t\t\t{\n","\t\t\t\tput(\"a\", \"b\");\n","\t\t\t\tput(\"b\", \"c\");\n","\t\t\t\tput(\"c\", \"d\");\n","\t\t\t}\n","\t\t})).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<Map<String, String>> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThan(2));\n","\t\tassertThat(predicate.test(new HashMap<String, String>() {\n","\t\t\t{\n","\t\t\t\tput(\"a\", \"b\");\n","\t\t\t\tput(\"b\", \"c\");\n","\t\t\t}\n","\t\t})).isFalse();\n","\t\tassertThat(predicate.test(new HashMap<String, String>() {\n","\t\t\t{\n","\t\t\t\tput(\"a\", \"b\");\n","\t\t\t\tput(\"b\", \"c\");\n","\t\t\t\tput(\"c\", \"d\");\n","\t\t\t}\n","\t\t})).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<Map<String, String>> predicate = retrievePredicate(\n","\t\t\t\tc -> c.greaterThanOrEqual(2));\n","\t\tassertThat(predicate.test(Collections.singletonMap(\"foo\", \"bar\"))).isFalse();\n","\t\tassertThat(predicate.test(new HashMap<String, String>() {\n","\t\t\t{\n","\t\t\t\tput(\"a\", \"b\");\n","\t\t\t\tput(\"b\", \"c\");\n","\t\t\t}\n","\t\t})).isTrue();\n","\t\tassertThat(predicate.test(new HashMap<String, String>() {\n","\t\t\t{\n","\t\t\t\tput(\"a\", \"b\");\n","\t\t\t\tput(\"b\", \"c\");\n","\t\t\t\tput(\"c\", \"d\");\n","\t\t\t}\n","\t\t})).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<Map<String, String>> predicate = retrievePredicate(c -> c.lessThan(2));\n","\t\tassertThat(predicate.test(Collections.singletonMap(\"foo\", \"bar\"))).isTrue();\n","\t\tassertThat(predicate.test(new HashMap<String, String>() {\n","\t\t\t{\n","\t\t\t\tput(\"a\", \"b\");\n","\t\t\t\tput(\"b\", \"c\");\n","\t\t\t}\n","\t\t})).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<Map<String, String>> predicate = retrievePredicate(\n","\t\t\t\tc -> c.lessThanOrEqual(2));\n","\t\tassertThat(predicate.test(Collections.singletonMap(\"foo\", \"bar\"))).isTrue();\n","\t\tassertThat(predicate.test(new HashMap<String, String>() {\n","\t\t\t{\n","\t\t\t\tput(\"a\", \"b\");\n","\t\t\t\tput(\"b\", \"c\");\n","\t\t\t}\n","\t\t})).isTrue();\n","\t\tassertThat(predicate.test(new HashMap<String, String>() {\n","\t\t\t{\n","\t\t\t\tput(\"a\", \"b\");\n","\t\t\t\tput(\"b\", \"c\");\n","\t\t\t\tput(\"c\", \"d\");\n","\t\t\t}\n","\t\t})).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid notEmpty() {\n","\t\tPredicate<Map<String, String>> predicate = retrievePredicate(c -> c.notEmpty());\n","\t\tassertThat(predicate.test(Collections.singletonMap(\"foo\", \"bar\"))).isTrue();\n","\t\tassertThat(predicate.test(Collections.emptyMap())).isFalse();\n","\t}\n","\n","\tprivate static Predicate<Map<String, String>> retrievePredicate(\n","\t\t\tFunction<MapConstraint<Map<String, String>, String, String>, MapConstraint<Map<String, String>, String, String>> constraint) {\n","\t\treturn constraint.apply(new MapConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"MapConstraint::::cast()":[31,34],"MapConstraint::::containsKey(K)":[36,40],"MapConstraint::::containsValue(V)":[42,46],"MapConstraint::::size()":[48,51]},"test_method_lines_dic":{"MapConstraintTest::::containsKey()":[30,36],"MapConstraintTest::::containsValue()":[38,44],"MapConstraintTest::::fixedSize()":[46,63],"MapConstraintTest::::greaterThan()":[65,82],"MapConstraintTest::::greaterThanOrEqual()":[84,102],"MapConstraintTest::::lessThan()":[104,114],"MapConstraintTest::::lessThanOrEqual()":[116,134],"MapConstraintTest::::notEmpty()":[136,141]},"reverse_method_lines_dic":{"31":"MapConstraint::::cast()","32":"MapConstraint::::cast()","33":"MapConstraint::::cast()","34":"MapConstraint::::cast()","36":"MapConstraint::::containsKey(K)","37":"MapConstraint::::containsKey(K)","38":"MapConstraint::::containsKey(K)","39":"MapConstraint::::containsKey(K)","40":"MapConstraint::::containsKey(K)","42":"MapConstraint::::containsValue(V)","43":"MapConstraint::::containsValue(V)","44":"MapConstraint::::containsValue(V)","45":"MapConstraint::::containsValue(V)","46":"MapConstraint::::containsValue(V)","48":"MapConstraint::::size()","49":"MapConstraint::::size()","50":"MapConstraint::::size()","51":"MapConstraint::::size()"},"test_reverse_method_lines_dic":{"30":"MapConstraintTest::::containsKey()","31":"MapConstraintTest::::containsKey()","32":"MapConstraintTest::::containsKey()","33":"MapConstraintTest::::containsKey()","34":"MapConstraintTest::::containsKey()","35":"MapConstraintTest::::containsKey()","36":"MapConstraintTest::::containsKey()","38":"MapConstraintTest::::containsValue()","39":"MapConstraintTest::::containsValue()","40":"MapConstraintTest::::containsValue()","41":"MapConstraintTest::::containsValue()","42":"MapConstraintTest::::containsValue()","43":"MapConstraintTest::::containsValue()","44":"MapConstraintTest::::containsValue()","46":"MapConstraintTest::::fixedSize()","47":"MapConstraintTest::::fixedSize()","48":"MapConstraintTest::::fixedSize()","49":"MapConstraintTest::::fixedSize()","50":"MapConstraintTest::::fixedSize()","51":"MapConstraintTest::::fixedSize()","52":"MapConstraintTest::::fixedSize()","53":"MapConstraintTest::::fixedSize()","54":"MapConstraintTest::::fixedSize()","55":"MapConstraintTest::::fixedSize()","56":"MapConstraintTest::::fixedSize()","57":"MapConstraintTest::::fixedSize()","58":"MapConstraintTest::::fixedSize()","59":"MapConstraintTest::::fixedSize()","60":"MapConstraintTest::::fixedSize()","61":"MapConstraintTest::::fixedSize()","62":"MapConstraintTest::::fixedSize()","63":"MapConstraintTest::::fixedSize()","65":"MapConstraintTest::::greaterThan()","66":"MapConstraintTest::::greaterThan()","67":"MapConstraintTest::::greaterThan()","68":"MapConstraintTest::::greaterThan()","69":"MapConstraintTest::::greaterThan()","70":"MapConstraintTest::::greaterThan()","71":"MapConstraintTest::::greaterThan()","72":"MapConstraintTest::::greaterThan()","73":"MapConstraintTest::::greaterThan()","74":"MapConstraintTest::::greaterThan()","75":"MapConstraintTest::::greaterThan()","76":"MapConstraintTest::::greaterThan()","77":"MapConstraintTest::::greaterThan()","78":"MapConstraintTest::::greaterThan()","79":"MapConstraintTest::::greaterThan()","80":"MapConstraintTest::::greaterThan()","81":"MapConstraintTest::::greaterThan()","82":"MapConstraintTest::::greaterThan()","84":"MapConstraintTest::::greaterThanOrEqual()","85":"MapConstraintTest::::greaterThanOrEqual()","86":"MapConstraintTest::::greaterThanOrEqual()","87":"MapConstraintTest::::greaterThanOrEqual()","88":"MapConstraintTest::::greaterThanOrEqual()","89":"MapConstraintTest::::greaterThanOrEqual()","90":"MapConstraintTest::::greaterThanOrEqual()","91":"MapConstraintTest::::greaterThanOrEqual()","92":"MapConstraintTest::::greaterThanOrEqual()","93":"MapConstraintTest::::greaterThanOrEqual()","94":"MapConstraintTest::::greaterThanOrEqual()","95":"MapConstraintTest::::greaterThanOrEqual()","96":"MapConstraintTest::::greaterThanOrEqual()","97":"MapConstraintTest::::greaterThanOrEqual()","98":"MapConstraintTest::::greaterThanOrEqual()","99":"MapConstraintTest::::greaterThanOrEqual()","100":"MapConstraintTest::::greaterThanOrEqual()","101":"MapConstraintTest::::greaterThanOrEqual()","102":"MapConstraintTest::::greaterThanOrEqual()","104":"MapConstraintTest::::lessThan()","105":"MapConstraintTest::::lessThan()","106":"MapConstraintTest::::lessThan()","107":"MapConstraintTest::::lessThan()","108":"MapConstraintTest::::lessThan()","109":"MapConstraintTest::::lessThan()","110":"MapConstraintTest::::lessThan()","111":"MapConstraintTest::::lessThan()","112":"MapConstraintTest::::lessThan()","113":"MapConstraintTest::::lessThan()","114":"MapConstraintTest::::lessThan()","116":"MapConstraintTest::::lessThanOrEqual()","117":"MapConstraintTest::::lessThanOrEqual()","118":"MapConstraintTest::::lessThanOrEqual()","119":"MapConstraintTest::::lessThanOrEqual()","120":"MapConstraintTest::::lessThanOrEqual()","121":"MapConstraintTest::::lessThanOrEqual()","122":"MapConstraintTest::::lessThanOrEqual()","123":"MapConstraintTest::::lessThanOrEqual()","124":"MapConstraintTest::::lessThanOrEqual()","125":"MapConstraintTest::::lessThanOrEqual()","126":"MapConstraintTest::::lessThanOrEqual()","127":"MapConstraintTest::::lessThanOrEqual()","128":"MapConstraintTest::::lessThanOrEqual()","129":"MapConstraintTest::::lessThanOrEqual()","130":"MapConstraintTest::::lessThanOrEqual()","131":"MapConstraintTest::::lessThanOrEqual()","132":"MapConstraintTest::::lessThanOrEqual()","133":"MapConstraintTest::::lessThanOrEqual()","134":"MapConstraintTest::::lessThanOrEqual()","136":"MapConstraintTest::::notEmpty()","137":"MapConstraintTest::::notEmpty()","138":"MapConstraintTest::::notEmpty()","139":"MapConstraintTest::::notEmpty()","140":"MapConstraintTest::::notEmpty()","141":"MapConstraintTest::::notEmpty()"},"tests":[{"test_lines":[30,36],"covered_lines":[28,37,39],"label":"MapConstraint::::containsKey(K)"},{"test_lines":[38,44],"covered_lines":[28,43,45],"label":"MapConstraint::::containsValue(V)"},{"test_lines":[46,63],"covered_lines":[28,33,50],"label":"MapConstraint::::size()"},{"test_lines":[65,82],"covered_lines":[28,33,50],"label":"MapConstraint::::size()"},{"test_lines":[84,102],"covered_lines":[28,33,50],"label":"MapConstraint::::size()"},{"test_lines":[104,114],"covered_lines":[28,33,50],"label":"MapConstraint::::size()"},{"test_lines":[116,134],"covered_lines":[28,33,50],"label":"MapConstraint::::size()"},{"test_lines":[136,141],"covered_lines":[28,33,50],"label":"MapConstraint::::size()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/LocalDateConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.LocalDate;\n","\n","import am.ik.yavi.constraint.base.ChronoLocalDateConstraintBase;\n","\n","/**\n"," * This is the actual class for constraints on LocalDate.\n"," *\n"," * @author Diego Krupitza\n"," * @since 0.10.0\n"," */\n","public class LocalDateConstraint<T>\n","\t\textends ChronoLocalDateConstraintBase<T, LocalDate, LocalDateConstraint<T>> {\n","\n","\t@Override\n","\tpublic LocalDateConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected LocalDate getNow(Clock clock) {\n","\t\treturn LocalDate.now(clock);\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint;\n","\n","import java.time.Clock;\n","import java.time.Instant;\n","import java.time.LocalDate;\n","import java.time.ZoneId;\n","import java.time.temporal.ChronoUnit;\n","import java.util.function.Function;\n","import java.util.function.Predicate;\n","import java.util.function.Supplier;\n","import java.util.stream.IntStream;\n","import java.util.stream.Stream;\n","\n","import org.junit.jupiter.api.Test;\n","import org.junit.jupiter.params.ParameterizedTest;\n","import org.junit.jupiter.params.provider.Arguments;\n","import org.junit.jupiter.params.provider.MethodSource;\n","\n","import static java.time.DayOfWeek.SATURDAY;\n","import static java.time.temporal.ChronoField.DAY_OF_WEEK;\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.Assertions.assertThatThrownBy;\n","\n","class LocalDateConstraintTest {\n","\t@Test\n","\tvoid isPastValid() {\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(LocalDate.now().minus(60, ChronoUnit.DAYS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastInValid() {\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.past());\n","\t\tassertThat(predicate.test(LocalDate.now().plus(60, ChronoUnit.DAYS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.past(clock));\n","\t\tassertThat(predicate.test(LocalDate.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentValid() {\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(LocalDate.now().minus(60, ChronoUnit.DAYS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentInValid() {\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.pastOrPresent());\n","\t\tassertThat(predicate.test(LocalDate.now().plus(60, ChronoUnit.DAYS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isPastOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.pastOrPresent(clock));\n","\t\tassertThat(predicate.test(LocalDate.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureValid() {\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(LocalDate.now().plus(60, ChronoUnit.DAYS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureInValid() {\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.future());\n","\t\tassertThat(predicate.test(LocalDate.now().minus(60, ChronoUnit.DAYS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.future(clock));\n","\t\tassertThat(predicate.test(LocalDate.now(clock))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentValid() {\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(LocalDate.now().plus(60, ChronoUnit.DAYS))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentInValid() {\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.futureOrPresent());\n","\t\tassertThat(predicate.test(LocalDate.now().minus(60, ChronoUnit.DAYS))).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isFutureOrPresentExactInValid() {\n","\t\tClock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.futureOrPresent(clock));\n","\t\tassertThat(predicate.test(LocalDate.now(clock))).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.before(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeInValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tLocalDate past = now.minusDays(10);\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.before(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeExactInValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.before(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterInValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.after(() -> now.minusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterExactInValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(c -> c.after(() -> now));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualInValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tLocalDate past = now.minusDays(10);\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> past));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBeforeOrEqualExactValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.beforeOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualInValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.plusDays(10)));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now.minusDays(10)));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isAfterOrEqualExactInValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.afterOrEqual(() -> now));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@ParameterizedTest\n","\t@MethodSource(\"validBetweenDates\")\n","\tvoid isBetweenValid(LocalDate now, LocalDate rangeFrom, LocalDate rangeTo) {\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> rangeFrom, () -> rangeTo));\n","\t\tassertThat(predicate.test(now)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenExactInValid() {\n","\t\tLocalDate now = LocalDate.now();\n","\t\tSupplier<LocalDate> nowSupplier = () -> now;\n","\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(nowSupplier, nowSupplier));\n","\t\tassertThat(predicate.test(now)).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid isBetweenInValidException() {\n","\t\tLocalDate now = LocalDate.now();\n","\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.between(() -> now.plusDays(1), () -> now.minusDays(1)));\n","\t\tassertThatThrownBy(() -> predicate.test(now))\n","\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n","\t\t\t\t.hasMessageContaining(\"Parameter 'rangeFrom' has to be before 'rangeTo'\");\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldValid() {\n","\t\tLocalDate value = LocalDate.of(2022, 1, 1);\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(DAY_OF_WEEK, week -> week == SATURDAY.getValue()));\n","\t\tassertThat(predicate.test(value)).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid temporalFieldInValid() {\n","\t\tLocalDate value = LocalDate.of(2022, 1, 2);\n","\t\tPredicate<LocalDate> predicate = retrievePredicate(\n","\t\t\t\tc -> c.fieldPredicate(DAY_OF_WEEK, week -> week == SATURDAY.getValue()));\n","\t\tassertThat(predicate.test(value)).isFalse();\n","\t}\n","\n","\tprivate static Stream<Arguments> validBetweenDates() {\n","\t\treturn IntStream.rangeClosed(1, 10).boxed().map(i -> {\n","\t\t\tLocalDate now = LocalDate.now();\n","\t\t\treturn Arguments.of(now, now.minusDays(i), now.plusDays(i));\n","\t\t});\n","\t}\n","\n","\tprivate static Predicate<LocalDate> retrievePredicate(\n","\t\t\tFunction<LocalDateConstraint<LocalDate>, LocalDateConstraint<LocalDate>> constraint) {\n","\t\treturn constraint.apply(new LocalDateConstraint<>()).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t}\n","}\n"],"method_lines_dic":{"LocalDateConstraint::::cast()":[32,35],"LocalDateConstraint::::getNow(java.time.Clock)":[37,40]},"test_method_lines_dic":{"LocalDateConstraintTest::::isPastValid()":[40,44],"LocalDateConstraintTest::::isPastInValid()":[46,50],"LocalDateConstraintTest::::isPastExactInValid()":[52,57],"LocalDateConstraintTest::::isPastOrPresentValid()":[59,63],"LocalDateConstraintTest::::isPastOrPresentInValid()":[65,69],"LocalDateConstraintTest::::isPastOrPresentExactInValid()":[71,76],"LocalDateConstraintTest::::isFutureValid()":[78,82],"LocalDateConstraintTest::::isFutureInValid()":[84,88],"LocalDateConstraintTest::::isFutureExactInValid()":[90,95],"LocalDateConstraintTest::::isFutureOrPresentValid()":[97,101],"LocalDateConstraintTest::::isFutureOrPresentInValid()":[103,107],"LocalDateConstraintTest::::isFutureOrPresentExactInValid()":[109,114],"LocalDateConstraintTest::::isBeforeValid()":[116,122],"LocalDateConstraintTest::::isBeforeInValid()":[124,130],"LocalDateConstraintTest::::isBeforeExactInValid()":[132,137],"LocalDateConstraintTest::::isAfterInValid()":[139,145],"LocalDateConstraintTest::::isAfterValid()":[147,153],"LocalDateConstraintTest::::isAfterExactInValid()":[155,160],"LocalDateConstraintTest::::isBeforeOrEqualValid()":[162,168],"LocalDateConstraintTest::::isBeforeOrEqualInValid()":[170,177],"LocalDateConstraintTest::::isBeforeOrEqualExactValid()":[179,185],"LocalDateConstraintTest::::isAfterOrEqualInValid()":[187,193],"LocalDateConstraintTest::::isAfterOrEqualValid()":[195,201],"LocalDateConstraintTest::::isAfterOrEqualExactInValid()":[203,209],"LocalDateConstraintTest::::isBetweenValid(java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)":[211,217],"LocalDateConstraintTest::::isBetweenExactInValid()":[219,227],"LocalDateConstraintTest::::isBetweenInValidException()":[229,238],"LocalDateConstraintTest::::temporalFieldValid()":[240,246],"LocalDateConstraintTest::::temporalFieldInValid()":[248,254],"LocalDateConstraintTest::::validBetweenDates()":[256,261]},"reverse_method_lines_dic":{"32":"LocalDateConstraint::::cast()","33":"LocalDateConstraint::::cast()","34":"LocalDateConstraint::::cast()","35":"LocalDateConstraint::::cast()","37":"LocalDateConstraint::::getNow(java.time.Clock)","38":"LocalDateConstraint::::getNow(java.time.Clock)","39":"LocalDateConstraint::::getNow(java.time.Clock)","40":"LocalDateConstraint::::getNow(java.time.Clock)"},"test_reverse_method_lines_dic":{"40":"LocalDateConstraintTest::::isPastValid()","41":"LocalDateConstraintTest::::isPastValid()","42":"LocalDateConstraintTest::::isPastValid()","43":"LocalDateConstraintTest::::isPastValid()","44":"LocalDateConstraintTest::::isPastValid()","46":"LocalDateConstraintTest::::isPastInValid()","47":"LocalDateConstraintTest::::isPastInValid()","48":"LocalDateConstraintTest::::isPastInValid()","49":"LocalDateConstraintTest::::isPastInValid()","50":"LocalDateConstraintTest::::isPastInValid()","52":"LocalDateConstraintTest::::isPastExactInValid()","53":"LocalDateConstraintTest::::isPastExactInValid()","54":"LocalDateConstraintTest::::isPastExactInValid()","55":"LocalDateConstraintTest::::isPastExactInValid()","56":"LocalDateConstraintTest::::isPastExactInValid()","57":"LocalDateConstraintTest::::isPastExactInValid()","59":"LocalDateConstraintTest::::isPastOrPresentValid()","60":"LocalDateConstraintTest::::isPastOrPresentValid()","61":"LocalDateConstraintTest::::isPastOrPresentValid()","62":"LocalDateConstraintTest::::isPastOrPresentValid()","63":"LocalDateConstraintTest::::isPastOrPresentValid()","65":"LocalDateConstraintTest::::isPastOrPresentInValid()","66":"LocalDateConstraintTest::::isPastOrPresentInValid()","67":"LocalDateConstraintTest::::isPastOrPresentInValid()","68":"LocalDateConstraintTest::::isPastOrPresentInValid()","69":"LocalDateConstraintTest::::isPastOrPresentInValid()","71":"LocalDateConstraintTest::::isPastOrPresentExactInValid()","72":"LocalDateConstraintTest::::isPastOrPresentExactInValid()","73":"LocalDateConstraintTest::::isPastOrPresentExactInValid()","74":"LocalDateConstraintTest::::isPastOrPresentExactInValid()","75":"LocalDateConstraintTest::::isPastOrPresentExactInValid()","76":"LocalDateConstraintTest::::isPastOrPresentExactInValid()","78":"LocalDateConstraintTest::::isFutureValid()","79":"LocalDateConstraintTest::::isFutureValid()","80":"LocalDateConstraintTest::::isFutureValid()","81":"LocalDateConstraintTest::::isFutureValid()","82":"LocalDateConstraintTest::::isFutureValid()","84":"LocalDateConstraintTest::::isFutureInValid()","85":"LocalDateConstraintTest::::isFutureInValid()","86":"LocalDateConstraintTest::::isFutureInValid()","87":"LocalDateConstraintTest::::isFutureInValid()","88":"LocalDateConstraintTest::::isFutureInValid()","90":"LocalDateConstraintTest::::isFutureExactInValid()","91":"LocalDateConstraintTest::::isFutureExactInValid()","92":"LocalDateConstraintTest::::isFutureExactInValid()","93":"LocalDateConstraintTest::::isFutureExactInValid()","94":"LocalDateConstraintTest::::isFutureExactInValid()","95":"LocalDateConstraintTest::::isFutureExactInValid()","97":"LocalDateConstraintTest::::isFutureOrPresentValid()","98":"LocalDateConstraintTest::::isFutureOrPresentValid()","99":"LocalDateConstraintTest::::isFutureOrPresentValid()","100":"LocalDateConstraintTest::::isFutureOrPresentValid()","101":"LocalDateConstraintTest::::isFutureOrPresentValid()","103":"LocalDateConstraintTest::::isFutureOrPresentInValid()","104":"LocalDateConstraintTest::::isFutureOrPresentInValid()","105":"LocalDateConstraintTest::::isFutureOrPresentInValid()","106":"LocalDateConstraintTest::::isFutureOrPresentInValid()","107":"LocalDateConstraintTest::::isFutureOrPresentInValid()","109":"LocalDateConstraintTest::::isFutureOrPresentExactInValid()","110":"LocalDateConstraintTest::::isFutureOrPresentExactInValid()","111":"LocalDateConstraintTest::::isFutureOrPresentExactInValid()","112":"LocalDateConstraintTest::::isFutureOrPresentExactInValid()","113":"LocalDateConstraintTest::::isFutureOrPresentExactInValid()","114":"LocalDateConstraintTest::::isFutureOrPresentExactInValid()","116":"LocalDateConstraintTest::::isBeforeValid()","117":"LocalDateConstraintTest::::isBeforeValid()","118":"LocalDateConstraintTest::::isBeforeValid()","119":"LocalDateConstraintTest::::isBeforeValid()","120":"LocalDateConstraintTest::::isBeforeValid()","121":"LocalDateConstraintTest::::isBeforeValid()","122":"LocalDateConstraintTest::::isBeforeValid()","124":"LocalDateConstraintTest::::isBeforeInValid()","125":"LocalDateConstraintTest::::isBeforeInValid()","126":"LocalDateConstraintTest::::isBeforeInValid()","127":"LocalDateConstraintTest::::isBeforeInValid()","128":"LocalDateConstraintTest::::isBeforeInValid()","129":"LocalDateConstraintTest::::isBeforeInValid()","130":"LocalDateConstraintTest::::isBeforeInValid()","132":"LocalDateConstraintTest::::isBeforeExactInValid()","133":"LocalDateConstraintTest::::isBeforeExactInValid()","134":"LocalDateConstraintTest::::isBeforeExactInValid()","135":"LocalDateConstraintTest::::isBeforeExactInValid()","136":"LocalDateConstraintTest::::isBeforeExactInValid()","137":"LocalDateConstraintTest::::isBeforeExactInValid()","139":"LocalDateConstraintTest::::isAfterInValid()","140":"LocalDateConstraintTest::::isAfterInValid()","141":"LocalDateConstraintTest::::isAfterInValid()","142":"LocalDateConstraintTest::::isAfterInValid()","143":"LocalDateConstraintTest::::isAfterInValid()","144":"LocalDateConstraintTest::::isAfterInValid()","145":"LocalDateConstraintTest::::isAfterInValid()","147":"LocalDateConstraintTest::::isAfterValid()","148":"LocalDateConstraintTest::::isAfterValid()","149":"LocalDateConstraintTest::::isAfterValid()","150":"LocalDateConstraintTest::::isAfterValid()","151":"LocalDateConstraintTest::::isAfterValid()","152":"LocalDateConstraintTest::::isAfterValid()","153":"LocalDateConstraintTest::::isAfterValid()","155":"LocalDateConstraintTest::::isAfterExactInValid()","156":"LocalDateConstraintTest::::isAfterExactInValid()","157":"LocalDateConstraintTest::::isAfterExactInValid()","158":"LocalDateConstraintTest::::isAfterExactInValid()","159":"LocalDateConstraintTest::::isAfterExactInValid()","160":"LocalDateConstraintTest::::isAfterExactInValid()","162":"LocalDateConstraintTest::::isBeforeOrEqualValid()","163":"LocalDateConstraintTest::::isBeforeOrEqualValid()","164":"LocalDateConstraintTest::::isBeforeOrEqualValid()","165":"LocalDateConstraintTest::::isBeforeOrEqualValid()","166":"LocalDateConstraintTest::::isBeforeOrEqualValid()","167":"LocalDateConstraintTest::::isBeforeOrEqualValid()","168":"LocalDateConstraintTest::::isBeforeOrEqualValid()","170":"LocalDateConstraintTest::::isBeforeOrEqualInValid()","171":"LocalDateConstraintTest::::isBeforeOrEqualInValid()","172":"LocalDateConstraintTest::::isBeforeOrEqualInValid()","173":"LocalDateConstraintTest::::isBeforeOrEqualInValid()","174":"LocalDateConstraintTest::::isBeforeOrEqualInValid()","175":"LocalDateConstraintTest::::isBeforeOrEqualInValid()","176":"LocalDateConstraintTest::::isBeforeOrEqualInValid()","177":"LocalDateConstraintTest::::isBeforeOrEqualInValid()","179":"LocalDateConstraintTest::::isBeforeOrEqualExactValid()","180":"LocalDateConstraintTest::::isBeforeOrEqualExactValid()","181":"LocalDateConstraintTest::::isBeforeOrEqualExactValid()","182":"LocalDateConstraintTest::::isBeforeOrEqualExactValid()","183":"LocalDateConstraintTest::::isBeforeOrEqualExactValid()","184":"LocalDateConstraintTest::::isBeforeOrEqualExactValid()","185":"LocalDateConstraintTest::::isBeforeOrEqualExactValid()","187":"LocalDateConstraintTest::::isAfterOrEqualInValid()","188":"LocalDateConstraintTest::::isAfterOrEqualInValid()","189":"LocalDateConstraintTest::::isAfterOrEqualInValid()","190":"LocalDateConstraintTest::::isAfterOrEqualInValid()","191":"LocalDateConstraintTest::::isAfterOrEqualInValid()","192":"LocalDateConstraintTest::::isAfterOrEqualInValid()","193":"LocalDateConstraintTest::::isAfterOrEqualInValid()","195":"LocalDateConstraintTest::::isAfterOrEqualValid()","196":"LocalDateConstraintTest::::isAfterOrEqualValid()","197":"LocalDateConstraintTest::::isAfterOrEqualValid()","198":"LocalDateConstraintTest::::isAfterOrEqualValid()","199":"LocalDateConstraintTest::::isAfterOrEqualValid()","200":"LocalDateConstraintTest::::isAfterOrEqualValid()","201":"LocalDateConstraintTest::::isAfterOrEqualValid()","203":"LocalDateConstraintTest::::isAfterOrEqualExactInValid()","204":"LocalDateConstraintTest::::isAfterOrEqualExactInValid()","205":"LocalDateConstraintTest::::isAfterOrEqualExactInValid()","206":"LocalDateConstraintTest::::isAfterOrEqualExactInValid()","207":"LocalDateConstraintTest::::isAfterOrEqualExactInValid()","208":"LocalDateConstraintTest::::isAfterOrEqualExactInValid()","209":"LocalDateConstraintTest::::isAfterOrEqualExactInValid()","211":"LocalDateConstraintTest::::isBetweenValid(java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)","212":"LocalDateConstraintTest::::isBetweenValid(java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)","213":"LocalDateConstraintTest::::isBetweenValid(java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)","214":"LocalDateConstraintTest::::isBetweenValid(java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)","215":"LocalDateConstraintTest::::isBetweenValid(java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)","216":"LocalDateConstraintTest::::isBetweenValid(java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)","217":"LocalDateConstraintTest::::isBetweenValid(java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)","219":"LocalDateConstraintTest::::isBetweenExactInValid()","220":"LocalDateConstraintTest::::isBetweenExactInValid()","221":"LocalDateConstraintTest::::isBetweenExactInValid()","222":"LocalDateConstraintTest::::isBetweenExactInValid()","223":"LocalDateConstraintTest::::isBetweenExactInValid()","224":"LocalDateConstraintTest::::isBetweenExactInValid()","225":"LocalDateConstraintTest::::isBetweenExactInValid()","226":"LocalDateConstraintTest::::isBetweenExactInValid()","227":"LocalDateConstraintTest::::isBetweenExactInValid()","229":"LocalDateConstraintTest::::isBetweenInValidException()","230":"LocalDateConstraintTest::::isBetweenInValidException()","231":"LocalDateConstraintTest::::isBetweenInValidException()","232":"LocalDateConstraintTest::::isBetweenInValidException()","233":"LocalDateConstraintTest::::isBetweenInValidException()","234":"LocalDateConstraintTest::::isBetweenInValidException()","235":"LocalDateConstraintTest::::isBetweenInValidException()","236":"LocalDateConstraintTest::::isBetweenInValidException()","237":"LocalDateConstraintTest::::isBetweenInValidException()","238":"LocalDateConstraintTest::::isBetweenInValidException()","240":"LocalDateConstraintTest::::temporalFieldValid()","241":"LocalDateConstraintTest::::temporalFieldValid()","242":"LocalDateConstraintTest::::temporalFieldValid()","243":"LocalDateConstraintTest::::temporalFieldValid()","244":"LocalDateConstraintTest::::temporalFieldValid()","245":"LocalDateConstraintTest::::temporalFieldValid()","246":"LocalDateConstraintTest::::temporalFieldValid()","248":"LocalDateConstraintTest::::temporalFieldInValid()","249":"LocalDateConstraintTest::::temporalFieldInValid()","250":"LocalDateConstraintTest::::temporalFieldInValid()","251":"LocalDateConstraintTest::::temporalFieldInValid()","252":"LocalDateConstraintTest::::temporalFieldInValid()","253":"LocalDateConstraintTest::::temporalFieldInValid()","254":"LocalDateConstraintTest::::temporalFieldInValid()","256":"LocalDateConstraintTest::::validBetweenDates()","257":"LocalDateConstraintTest::::validBetweenDates()","258":"LocalDateConstraintTest::::validBetweenDates()","259":"LocalDateConstraintTest::::validBetweenDates()","260":"LocalDateConstraintTest::::validBetweenDates()","261":"LocalDateConstraintTest::::validBetweenDates()"},"tests":[{"test_lines":[40,44],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[46,50],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[52,57],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[59,63],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[65,69],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[71,76],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[78,82],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[84,88],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[90,95],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[97,101],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[103,107],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[109,114],"covered_lines":[29,34,39],"label":"LocalDateConstraint::::getNow(java.time.Clock)"},{"test_lines":[116,122],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[124,130],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[132,137],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[139,145],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[147,153],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[155,160],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[162,168],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[170,177],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[179,185],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[187,193],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[195,201],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[203,209],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[211,217],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[219,227],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[229,238],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[240,246],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[248,254],"covered_lines":[29,34],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/charsequence/Emoji.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.charsequence;\n","\n","import am.ik.yavi.constraint.charsequence.variant.StandardizedVariationSequence;\n","import am.ik.yavi.jsr305.Nullable;\n","\n","public class Emoji {\n","\tprivate static final String COMBINING_ENCLOSING_KEYCAP = new String(\n","\t\t\tnew int[] { 0x20E3 }, 0, 1);\n","\n","\tprivate static final String DUMMY_REPLACEMENT = \"X\";\n","\n","\tprivate static final String ELF = new String(new int[] { 0x1F9DD }, 0, 1);\n","\n","\tprivate static final String E140_SKIN_RANGE = new String(new int[] { 0x1FAF0 }, 0, 1)\n","\t\t\t+ \"-\" + new String(new int[] { 0x1FAF6 }, 0, 1)\n","\t\t\t+ new String(new int[] { 0x1FAC3 }, 0, 1) + \"-\"\n","\t\t\t+ new String(new int[] { 0x1FAC5 }, 0, 1);\n","\n","\tprivate static final String ENGLAND = new String(\n","\t\t\tnew int[] { 0x1F3F4, 0xE0067, 0xE0062, 0xE0065, 0xE006E, 0xE0067, 0xE007F },\n","\t\t\t0, 7);\n","\n","\tprivate static final String PERSON = new String(new int[] { 0x1F9D1 }, 0, 1);\n","\n","\tprivate static final String REGIONAL_INDICATOR_SYMBOL_LETTER_RANGE = new String(\n","\t\t\tnew int[] { 0x1F1E6 }, 0, 1) + \"-\" + new String(new int[] { 0x1F1FF }, 0, 1);\n","\n","\tprivate static final String SCOTLAND = new String(\n","\t\t\tnew int[] { 0x1F3F4, 0xE0067, 0xE0062, 0xE0073, 0xE0063, 0xE0074, 0xE007F },\n","\t\t\t0, 7);\n","\n","\tprivate static final String SKIN_TONE_SELECTOR_RANGE = new String(\n","\t\t\tnew int[] { 0x1F3FB }, 0, 1) + \"-\" + new String(new int[] { 0x1F3FF }, 0, 1);\n","\n","\tprivate static final String SKUL_AND_CROSSBONES = new String(new int[] { 0x2620 }, 0,\n","\t\t\t1);\n","\n","\tprivate static final String WALES = new String(\n","\t\t\tnew int[] { 0x1F3F4, 0xE0067, 0xE0062, 0xE0077, 0xE006C, 0xE0073, 0xE007F },\n","\t\t\t0, 7);\n","\n","\tprivate static final String WHITE_UP_POINTING_INDEX = new String(new int[] { 0x261D },\n","\t\t\t0, 1);\n","\n","\tprivate static final String ADHESIVE_BANDAGE = new String(new int[] { 0x1FA79 }, 0,\n","\t\t\t1);\n","\n","\tprivate static final String ZERO_WIDTH_JOINER = \"\\u200D\";\n","\n","\t/**\n","\t * Try to return the length of the given string.<br>\n","\t * This method does not grantee the exact length.\n","\t * @see <a href=\"https://unicode.org/Public/emoji/12.0/emoji-test.txt\">Emoji 12.0</a>\n","\t * @param str\n","\t * @return the length of the given string which may be true\n","\t */\n","\tpublic static int bestEffortCount(@Nullable String str) {\n","\t\tif (str == null || str.isEmpty()) {\n","\t\t\treturn 0;\n","\t\t}\n","\t\tString s = str\n","\t\t\t\t.replaceAll(\"[\" + StandardizedVariationSequence.RANGE\n","\t\t\t\t\t\t+ COMBINING_ENCLOSING_KEYCAP + \"]\", \"\") //\n","\t\t\t\t.replaceAll(\n","\t\t\t\t\t\t\"([\" + WHITE_UP_POINTING_INDEX + \"-\" + ELF + E140_SKIN_RANGE\n","\t\t\t\t\t\t\t\t+ \"][\" + SKIN_TONE_SELECTOR_RANGE + \"])\",\n","\t\t\t\t\t\tDUMMY_REPLACEMENT)\n","\t\t\t\t.replaceAll(\"([\" + ZERO_WIDTH_JOINER + \"][\" + SKUL_AND_CROSSBONES + \"-\"\n","\t\t\t\t\t\t+ PERSON + ADHESIVE_BANDAGE + \"])\", \"\") //\n","\t\t\t\t.replaceAll(\"([\" + REGIONAL_INDICATOR_SYMBOL_LETTER_RANGE + \"]{2})\",\n","\t\t\t\t\t\tDUMMY_REPLACEMENT) //\n","\t\t\t\t.replace(ENGLAND, DUMMY_REPLACEMENT) //\n","\t\t\t\t.replace(SCOTLAND, DUMMY_REPLACEMENT) //\n","\t\t\t\t.replace(WALES, DUMMY_REPLACEMENT) //\n","\t\t\t\t// Support emojis that contains two skin tone selectors introduced in 12\n","\t\t\t\t.replaceAll(\"(\" + DUMMY_REPLACEMENT + ZERO_WIDTH_JOINER\n","\t\t\t\t\t\t+ DUMMY_REPLACEMENT + \")\", DUMMY_REPLACEMENT);\n","\t\treturn s.codePointCount(0, s.length());\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.charsequence;\n","\n","import java.io.BufferedReader;\n","import java.io.InputStreamReader;\n","import java.util.Arrays;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class EmojiTest {\n","\n","\t@Test\n","\tvoid elf() {\n","\t\tString emoji = \"🧝🧝🏻🧝🏼🧝🏽🧝🏾🧝🏿\";\n","\t\tassertThat(emoji.length()).isEqualTo(22);\n","\t\tassertThat(Emoji.bestEffortCount(emoji)).isEqualTo(6);\n","\t}\n","\n","\t@Test\n","\tvoid emoji() {\n","\t\tString emoji = \"I am 👱🏿\";\n","\t\tassertThat(emoji.length()).isEqualTo(9);\n","\t\tassertThat(Emoji.bestEffortCount(emoji)).isEqualTo(6);\n","\t}\n","\n","\t@Test\n","\tvoid emoji11All() throws Exception {\n","\t\tverifyEmojiAll(\"emoji-test-11.txt\");\n","\t}\n","\n","\t@Test\n","\tvoid emoji12All() throws Exception {\n","\t\tverifyEmojiAll(\"emoji-test-12.txt\");\n","\t}\n","\n","\t@Test\n","\tvoid emoji14All() throws Exception {\n","\t\tverifyEmojiAll(\"emoji-test-14.txt\");\n","\t}\n","\n","\t@Test\n","\tvoid family() {\n","\t\tString emoji = \"👩‍❤️‍💋‍👩👪👩‍👩‍👧‍👦👨‍👦‍👦👨‍👧👩‍👧\";\n","\t\tassertThat(emoji.length()).isEqualTo(42);\n","\t\tassertThat(Emoji.bestEffortCount(emoji)).isEqualTo(6);\n","\t}\n","\n","\t@Test\n","\tvoid heart() {\n","\t\tString emoji = \"❤️💙💚💛🧡💜🖤\";\n","\t\tassertThat(emoji.length()).isEqualTo(14);\n","\t\tassertThat(Emoji.bestEffortCount(emoji)).isEqualTo(7);\n","\t}\n","\n","\t@Test\n","\tvoid subdivisionFlags() {\n","\t\tString emoji = \"🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿\";\n","\t\tassertThat(emoji.length()).isEqualTo(42);\n","\t\tassertThat(Emoji.bestEffortCount(emoji)).isEqualTo(3);\n","\t}\n","\n","\tvoid verifyEmojiAll(String file) throws Exception {\n","\t\ttry (BufferedReader reader = new BufferedReader(new InputStreamReader(\n","\t\t\t\tthis.getClass().getClassLoader().getResourceAsStream(file)))) {\n","\t\t\tString line;\n","\t\t\tint n = 0;\n","\t\t\tdo {\n","\t\t\t\tn++;\n","\t\t\t\tline = reader.readLine();\n","\t\t\t\tif (line == null || line.startsWith(\"#\") || line.isEmpty()) {\n","\t\t\t\t\tcontinue;\n","\t\t\t\t}\n","\t\t\t\tint[] codePoints = Arrays.stream(line.split(\";\")[0].trim().split(\" \"))\n","\t\t\t\t\t\t.mapToInt(x -> Integer.parseInt(x, 16)).toArray();\n","\t\t\t\tString emoji = new String(codePoints, 0, codePoints.length);\n","\t\t\t\tint len = Emoji.bestEffortCount(\"This is \" + emoji + \".\");\n","\t\t\t\tassertThat(len).describedAs(emoji + \" L\" + n).isEqualTo(10);\n","\n","\t\t\t}\n","\t\t\twhile (line != null);\n","\t\t}\n","\t}\n","}\n"],"method_lines_dic":{"Emoji::::bestEffortCount(java.lang.String)":[72,94]},"test_method_lines_dic":{"EmojiTest::::elf()":[28,33],"EmojiTest::::emoji()":[35,40],"EmojiTest::::emoji11All()":[42,45],"EmojiTest::::emoji12All()":[47,50],"EmojiTest::::emoji14All()":[52,55],"EmojiTest::::family()":[57,62],"EmojiTest::::heart()":[64,69],"EmojiTest::::subdivisionFlags()":[71,76],"EmojiTest::::verifyEmojiAll(java.lang.String)":[78,98]},"reverse_method_lines_dic":{"72":"Emoji::::bestEffortCount(java.lang.String)","73":"Emoji::::bestEffortCount(java.lang.String)","74":"Emoji::::bestEffortCount(java.lang.String)","75":"Emoji::::bestEffortCount(java.lang.String)","76":"Emoji::::bestEffortCount(java.lang.String)","77":"Emoji::::bestEffortCount(java.lang.String)","78":"Emoji::::bestEffortCount(java.lang.String)","79":"Emoji::::bestEffortCount(java.lang.String)","80":"Emoji::::bestEffortCount(java.lang.String)","81":"Emoji::::bestEffortCount(java.lang.String)","82":"Emoji::::bestEffortCount(java.lang.String)","83":"Emoji::::bestEffortCount(java.lang.String)","84":"Emoji::::bestEffortCount(java.lang.String)","85":"Emoji::::bestEffortCount(java.lang.String)","86":"Emoji::::bestEffortCount(java.lang.String)","87":"Emoji::::bestEffortCount(java.lang.String)","88":"Emoji::::bestEffortCount(java.lang.String)","89":"Emoji::::bestEffortCount(java.lang.String)","90":"Emoji::::bestEffortCount(java.lang.String)","91":"Emoji::::bestEffortCount(java.lang.String)","92":"Emoji::::bestEffortCount(java.lang.String)","93":"Emoji::::bestEffortCount(java.lang.String)","94":"Emoji::::bestEffortCount(java.lang.String)"},"test_reverse_method_lines_dic":{"28":"EmojiTest::::elf()","29":"EmojiTest::::elf()","30":"EmojiTest::::elf()","31":"EmojiTest::::elf()","32":"EmojiTest::::elf()","33":"EmojiTest::::elf()","35":"EmojiTest::::emoji()","36":"EmojiTest::::emoji()","37":"EmojiTest::::emoji()","38":"EmojiTest::::emoji()","39":"EmojiTest::::emoji()","40":"EmojiTest::::emoji()","42":"EmojiTest::::emoji11All()","43":"EmojiTest::::emoji11All()","44":"EmojiTest::::emoji11All()","45":"EmojiTest::::emoji11All()","47":"EmojiTest::::emoji12All()","48":"EmojiTest::::emoji12All()","49":"EmojiTest::::emoji12All()","50":"EmojiTest::::emoji12All()","52":"EmojiTest::::emoji14All()","53":"EmojiTest::::emoji14All()","54":"EmojiTest::::emoji14All()","55":"EmojiTest::::emoji14All()","57":"EmojiTest::::family()","58":"EmojiTest::::family()","59":"EmojiTest::::family()","60":"EmojiTest::::family()","61":"EmojiTest::::family()","62":"EmojiTest::::family()","64":"EmojiTest::::heart()","65":"EmojiTest::::heart()","66":"EmojiTest::::heart()","67":"EmojiTest::::heart()","68":"EmojiTest::::heart()","69":"EmojiTest::::heart()","71":"EmojiTest::::subdivisionFlags()","72":"EmojiTest::::subdivisionFlags()","73":"EmojiTest::::subdivisionFlags()","74":"EmojiTest::::subdivisionFlags()","75":"EmojiTest::::subdivisionFlags()","76":"EmojiTest::::subdivisionFlags()","78":"EmojiTest::::verifyEmojiAll(java.lang.String)","79":"EmojiTest::::verifyEmojiAll(java.lang.String)","80":"EmojiTest::::verifyEmojiAll(java.lang.String)","81":"EmojiTest::::verifyEmojiAll(java.lang.String)","82":"EmojiTest::::verifyEmojiAll(java.lang.String)","83":"EmojiTest::::verifyEmojiAll(java.lang.String)","84":"EmojiTest::::verifyEmojiAll(java.lang.String)","85":"EmojiTest::::verifyEmojiAll(java.lang.String)","86":"EmojiTest::::verifyEmojiAll(java.lang.String)","87":"EmojiTest::::verifyEmojiAll(java.lang.String)","88":"EmojiTest::::verifyEmojiAll(java.lang.String)","89":"EmojiTest::::verifyEmojiAll(java.lang.String)","90":"EmojiTest::::verifyEmojiAll(java.lang.String)","91":"EmojiTest::::verifyEmojiAll(java.lang.String)","92":"EmojiTest::::verifyEmojiAll(java.lang.String)","93":"EmojiTest::::verifyEmojiAll(java.lang.String)","94":"EmojiTest::::verifyEmojiAll(java.lang.String)","95":"EmojiTest::::verifyEmojiAll(java.lang.String)","96":"EmojiTest::::verifyEmojiAll(java.lang.String)","97":"EmojiTest::::verifyEmojiAll(java.lang.String)","98":"EmojiTest::::verifyEmojiAll(java.lang.String)"},"tests":[{"test_lines":[28,33],"covered_lines":[22,27,29,34,38,40,43,47,50,53,57,60,73,76,77,79,83,85,87,88,89,91,93],"label":"Emoji::::bestEffortCount(java.lang.String)"},{"test_lines":[35,40],"covered_lines":[22,27,29,34,38,40,43,47,50,53,57,60,73,76,77,79,83,85,87,88,89,91,93],"label":"Emoji::::bestEffortCount(java.lang.String)"},{"test_lines":[42,45],"covered_lines":[22,27,29,34,38,40,43,47,50,53,57,60,73,76,77,79,83,85,87,88,89,91,93],"label":"Emoji::::bestEffortCount(java.lang.String)"},{"test_lines":[47,50],"covered_lines":[22,27,29,34,38,40,43,47,50,53,57,60,73,76,77,79,83,85,87,88,89,91,93],"label":"Emoji::::bestEffortCount(java.lang.String)"},{"test_lines":[52,55],"covered_lines":[22,27,29,34,38,40,43,47,50,53,57,60,73,76,77,79,83,85,87,88,89,91,93],"label":"Emoji::::bestEffortCount(java.lang.String)"},{"test_lines":[57,62],"covered_lines":[22,27,29,34,38,40,43,47,50,53,57,60,73,76,77,79,83,85,87,88,89,91,93],"label":"Emoji::::bestEffortCount(java.lang.String)"},{"test_lines":[64,69],"covered_lines":[22,27,29,34,38,40,43,47,50,53,57,60,73,76,77,79,83,85,87,88,89,91,93],"label":"Emoji::::bestEffortCount(java.lang.String)"},{"test_lines":[71,76],"covered_lines":[22,27,29,34,38,40,43,47,50,53,57,60,73,76,77,79,83,85,87,88,89,91,93],"label":"Emoji::::bestEffortCount(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/charsequence/ByteSizeConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.charsequence;\n","\n","import java.nio.charset.Charset;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.BYTE_SIZE_FIXED_SIZE;\n","import static am.ik.yavi.core.ViolationMessage.Default.BYTE_SIZE_GREATER_THAN;\n","import static am.ik.yavi.core.ViolationMessage.Default.BYTE_SIZE_GREATER_THAN_OR_EQUAL;\n","import static am.ik.yavi.core.ViolationMessage.Default.BYTE_SIZE_LESS_THAN;\n","import static am.ik.yavi.core.ViolationMessage.Default.BYTE_SIZE_LESS_THAN_OR_EQUAL;\n","\n","import am.ik.yavi.constraint.CharSequenceConstraint;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class ByteSizeConstraint<T, E extends CharSequence>\n","\t\textends CharSequenceConstraint<T, E> {\n","\tprivate final Charset charset;\n","\n","\tpublic ByteSizeConstraint(CharSequenceConstraint<T, E> delegate, Charset charset) {\n","\t\tsuper();\n","\t\tthis.charset = charset;\n","\t\tthis.predicates().addAll(delegate.predicates());\n","\t}\n","\n","\t@Override\n","\tpublic ByteSizeConstraint<T, E> cast() {\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tpublic ByteSizeConstraint<T, E> fixedSize(int size) {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.withViolatedValue(\n","\t\t\t\t\t\tthis.checkSizePredicate(x -> size(x) == size, this::size),\n","\t\t\t\t\t\tBYTE_SIZE_FIXED_SIZE, () -> new Object[] { size }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tpublic ByteSizeConstraint<T, E> greaterThan(int min) {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.withViolatedValue(\n","\t\t\t\t\t\tthis.checkSizePredicate(x -> size(x) > min, this::size),\n","\t\t\t\t\t\tBYTE_SIZE_GREATER_THAN, () -> new Object[] { min }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tpublic ByteSizeConstraint<T, E> greaterThanOrEqual(int min) {\n","\t\tthis.predicates().add(ConstraintPredicate.withViolatedValue(\n","\t\t\t\tthis.checkSizePredicate(x -> size(x) >= min, this::size),\n","\t\t\t\tBYTE_SIZE_GREATER_THAN_OR_EQUAL, () -> new Object[] { min }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tpublic ByteSizeConstraint<T, E> lessThan(int max) {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.withViolatedValue(\n","\t\t\t\t\t\tthis.checkSizePredicate(x -> size(x) < max, this::size),\n","\t\t\t\t\t\tBYTE_SIZE_LESS_THAN, () -> new Object[] { max }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tpublic ByteSizeConstraint<T, E> lessThanOrEqual(int max) {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.withViolatedValue(\n","\t\t\t\t\t\tthis.checkSizePredicate(x -> size(x) <= max, this::size),\n","\t\t\t\t\t\tBYTE_SIZE_LESS_THAN_OR_EQUAL, () -> new Object[] { max }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\tprivate int size(E x) {\n","\t\treturn x.toString().getBytes(charset).length;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.charsequence;\n","\n","import java.util.function.Predicate;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","import am.ik.yavi.constraint.CharSequenceConstraint;\n","\n","class ByteSizeConstraintTest {\n","\tprivate CharSequenceConstraint<String, String> constraint = new CharSequenceConstraint<>();\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<String> predicate = constraint.asByteArray().fixedSize(4).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(\"abcd\")).isTrue();\n","\t\tassertThat(predicate.test(\"abc\")).isFalse();\n","\t\tassertThat(predicate.test(\"あ\")).isFalse(); // 3\n","\t\tassertThat(predicate.test(\"あa\")).isTrue(); // 4\n","\t\tassertThat(predicate.test(\"\\uD842\\uDFB7\")).isTrue(); // 4\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<String> predicate = constraint.asByteArray().greaterThan(3).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(\"abcd\")).isTrue();\n","\t\tassertThat(predicate.test(\"abc\")).isFalse();\n","\t\tassertThat(predicate.test(\"あ\")).isFalse(); // 3\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<String> predicate = constraint.asByteArray().greaterThanOrEqual(3)\n","\t\t\t\t.predicates().peekFirst().predicate();\n","\t\tassertThat(predicate.test(\"abcd\")).isTrue();\n","\t\tassertThat(predicate.test(\"abc\")).isTrue();\n","\t\tassertThat(predicate.test(\"ab\")).isFalse();\n","\t\tassertThat(predicate.test(\"あ\")).isTrue(); // 3\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<String> predicate = constraint.asByteArray().lessThan(3).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(\"ab\")).isTrue();\n","\t\tassertThat(predicate.test(\"abc\")).isFalse();\n","\t\tassertThat(predicate.test(\"あ\")).isFalse(); // 3\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<String> predicate = constraint.asByteArray().lessThanOrEqual(3)\n","\t\t\t\t.predicates().peekFirst().predicate();\n","\t\tassertThat(predicate.test(\"ab\")).isTrue();\n","\t\tassertThat(predicate.test(\"abc\")).isTrue();\n","\t\tassertThat(predicate.test(\"abcd\")).isFalse();\n","\t\tassertThat(predicate.test(\"あ\")).isTrue(); // 3\n","\t\tassertThat(predicate.test(\"あa\")).isFalse(); // 4\n","\t}\n","}\n"],"method_lines_dic":{"ByteSizeConstraint::::cast()":[40,43],"ByteSizeConstraint::::fixedSize(int)":[45,52],"ByteSizeConstraint::::greaterThan(int)":[54,61],"ByteSizeConstraint::::greaterThanOrEqual(int)":[63,69],"ByteSizeConstraint::::lessThan(int)":[71,78],"ByteSizeConstraint::::lessThanOrEqual(int)":[80,87],"ByteSizeConstraint::::size(E)":[89,91]},"test_method_lines_dic":{"ByteSizeConstraintTest::::fixedSize()":[29,38],"ByteSizeConstraintTest::::greaterThan()":[40,47],"ByteSizeConstraintTest::::greaterThanOrEqual()":[49,57],"ByteSizeConstraintTest::::lessThan()":[59,66],"ByteSizeConstraintTest::::lessThanOrEqual()":[68,77]},"reverse_method_lines_dic":{"40":"ByteSizeConstraint::::cast()","41":"ByteSizeConstraint::::cast()","42":"ByteSizeConstraint::::cast()","43":"ByteSizeConstraint::::cast()","45":"ByteSizeConstraint::::fixedSize(int)","46":"ByteSizeConstraint::::fixedSize(int)","47":"ByteSizeConstraint::::fixedSize(int)","48":"ByteSizeConstraint::::fixedSize(int)","49":"ByteSizeConstraint::::fixedSize(int)","50":"ByteSizeConstraint::::fixedSize(int)","51":"ByteSizeConstraint::::fixedSize(int)","52":"ByteSizeConstraint::::fixedSize(int)","54":"ByteSizeConstraint::::greaterThan(int)","55":"ByteSizeConstraint::::greaterThan(int)","56":"ByteSizeConstraint::::greaterThan(int)","57":"ByteSizeConstraint::::greaterThan(int)","58":"ByteSizeConstraint::::greaterThan(int)","59":"ByteSizeConstraint::::greaterThan(int)","60":"ByteSizeConstraint::::greaterThan(int)","61":"ByteSizeConstraint::::greaterThan(int)","63":"ByteSizeConstraint::::greaterThanOrEqual(int)","64":"ByteSizeConstraint::::greaterThanOrEqual(int)","65":"ByteSizeConstraint::::greaterThanOrEqual(int)","66":"ByteSizeConstraint::::greaterThanOrEqual(int)","67":"ByteSizeConstraint::::greaterThanOrEqual(int)","68":"ByteSizeConstraint::::greaterThanOrEqual(int)","69":"ByteSizeConstraint::::greaterThanOrEqual(int)","71":"ByteSizeConstraint::::lessThan(int)","72":"ByteSizeConstraint::::lessThan(int)","73":"ByteSizeConstraint::::lessThan(int)","74":"ByteSizeConstraint::::lessThan(int)","75":"ByteSizeConstraint::::lessThan(int)","76":"ByteSizeConstraint::::lessThan(int)","77":"ByteSizeConstraint::::lessThan(int)","78":"ByteSizeConstraint::::lessThan(int)","80":"ByteSizeConstraint::::lessThanOrEqual(int)","81":"ByteSizeConstraint::::lessThanOrEqual(int)","82":"ByteSizeConstraint::::lessThanOrEqual(int)","83":"ByteSizeConstraint::::lessThanOrEqual(int)","84":"ByteSizeConstraint::::lessThanOrEqual(int)","85":"ByteSizeConstraint::::lessThanOrEqual(int)","86":"ByteSizeConstraint::::lessThanOrEqual(int)","87":"ByteSizeConstraint::::lessThanOrEqual(int)","89":"ByteSizeConstraint::::size(E)","90":"ByteSizeConstraint::::size(E)","91":"ByteSizeConstraint::::size(E)"},"test_reverse_method_lines_dic":{"29":"ByteSizeConstraintTest::::fixedSize()","30":"ByteSizeConstraintTest::::fixedSize()","31":"ByteSizeConstraintTest::::fixedSize()","32":"ByteSizeConstraintTest::::fixedSize()","33":"ByteSizeConstraintTest::::fixedSize()","34":"ByteSizeConstraintTest::::fixedSize()","35":"ByteSizeConstraintTest::::fixedSize()","36":"ByteSizeConstraintTest::::fixedSize()","37":"ByteSizeConstraintTest::::fixedSize()","38":"ByteSizeConstraintTest::::fixedSize()","40":"ByteSizeConstraintTest::::greaterThan()","41":"ByteSizeConstraintTest::::greaterThan()","42":"ByteSizeConstraintTest::::greaterThan()","43":"ByteSizeConstraintTest::::greaterThan()","44":"ByteSizeConstraintTest::::greaterThan()","45":"ByteSizeConstraintTest::::greaterThan()","46":"ByteSizeConstraintTest::::greaterThan()","47":"ByteSizeConstraintTest::::greaterThan()","49":"ByteSizeConstraintTest::::greaterThanOrEqual()","50":"ByteSizeConstraintTest::::greaterThanOrEqual()","51":"ByteSizeConstraintTest::::greaterThanOrEqual()","52":"ByteSizeConstraintTest::::greaterThanOrEqual()","53":"ByteSizeConstraintTest::::greaterThanOrEqual()","54":"ByteSizeConstraintTest::::greaterThanOrEqual()","55":"ByteSizeConstraintTest::::greaterThanOrEqual()","56":"ByteSizeConstraintTest::::greaterThanOrEqual()","57":"ByteSizeConstraintTest::::greaterThanOrEqual()","59":"ByteSizeConstraintTest::::lessThan()","60":"ByteSizeConstraintTest::::lessThan()","61":"ByteSizeConstraintTest::::lessThan()","62":"ByteSizeConstraintTest::::lessThan()","63":"ByteSizeConstraintTest::::lessThan()","64":"ByteSizeConstraintTest::::lessThan()","65":"ByteSizeConstraintTest::::lessThan()","66":"ByteSizeConstraintTest::::lessThan()","68":"ByteSizeConstraintTest::::lessThanOrEqual()","69":"ByteSizeConstraintTest::::lessThanOrEqual()","70":"ByteSizeConstraintTest::::lessThanOrEqual()","71":"ByteSizeConstraintTest::::lessThanOrEqual()","72":"ByteSizeConstraintTest::::lessThanOrEqual()","73":"ByteSizeConstraintTest::::lessThanOrEqual()","74":"ByteSizeConstraintTest::::lessThanOrEqual()","75":"ByteSizeConstraintTest::::lessThanOrEqual()","76":"ByteSizeConstraintTest::::lessThanOrEqual()","77":"ByteSizeConstraintTest::::lessThanOrEqual()"},"tests":[{"test_lines":[29,38],"covered_lines":[35,36,37,38,47,48,49,51,90],"label":"ByteSizeConstraint::::fixedSize(int)"},{"test_lines":[40,47],"covered_lines":[35,36,37,38,56,57,58,60,90],"label":"ByteSizeConstraint::::greaterThan(int)"},{"test_lines":[49,57],"covered_lines":[35,36,37,38,65,66,68,90],"label":"ByteSizeConstraint::::greaterThanOrEqual(int)"},{"test_lines":[59,66],"covered_lines":[35,36,37,38,73,74,75,77,90],"label":"ByteSizeConstraint::::lessThan(int)"},{"test_lines":[68,77],"covered_lines":[35,36,37,38,82,83,84,86,90],"label":"ByteSizeConstraint::::lessThanOrEqual(int)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/charsequence/CodePointsConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.charsequence;\n","\n","import java.util.LinkedHashSet;\n","import java.util.List;\n","import java.util.Optional;\n","import java.util.Set;\n","import java.util.stream.Collectors;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.CODE_POINTS_ALL_INCLUDED;\n","import static am.ik.yavi.core.ViolationMessage.Default.CODE_POINTS_NOT_INCLUDED;\n","\n","import am.ik.yavi.constraint.CharSequenceConstraint;\n","import am.ik.yavi.core.ConstraintPredicate;\n","import am.ik.yavi.core.ViolatedValue;\n","\n","public class CodePointsConstraint<T, E extends CharSequence>\n","\t\textends CharSequenceConstraint<T, E> {\n","\tprivate final CodePoints<E> codePoints;\n","\n","\tpublic CodePointsConstraint(CharSequenceConstraint<T, E> delegate,\n","\t\t\tCodePoints<E> codePoints) {\n","\t\tsuper();\n","\t\tthis.codePoints = codePoints;\n","\t\tthis.predicates().addAll(delegate.predicates());\n","\t}\n","\n","\tpublic CodePointsConstraint<T, E> asBlackList() {\n","\t\tthis.predicates().add(ConstraintPredicate.withViolatedValue(x -> {\n","\t\t\tSet<Integer> excludedFromBlackList = this.codePoints.allExcludedCodePoints(x);\n","\t\t\tInteger codePoint;\n","\t\t\tString str = x.toString();\n","\t\t\tint len = str.length();\n","\t\t\tSet<Integer> included = new LinkedHashSet<>();\n","\t\t\tfor (int i = 0; i < len; i += Character.charCount(codePoint)) {\n","\t\t\t\tcodePoint = str.codePointAt(i);\n","\t\t\t\tif (!excludedFromBlackList.contains(codePoint)) {\n","\t\t\t\t\tincluded.add(codePoint);\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\tif (included.isEmpty()) {\n","\t\t\t\treturn Optional.empty();\n","\t\t\t}\n","\t\t\tList<String> includedList = included.stream() //\n","\t\t\t\t\t.map(i -> new String(new int[] { i }, 0, 1)) //\n","\t\t\t\t\t.collect(Collectors.toList());\n","\t\t\treturn Optional.of(new ViolatedValue(includedList));\n","\t\t}, CODE_POINTS_NOT_INCLUDED, () -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\tpublic CodePointsConstraint<T, E> asWhiteList() {\n","\t\tthis.predicates().add(ConstraintPredicate.withViolatedValue(x -> {\n","\t\t\tSet<Integer> excludedFromWhiteList = this.codePoints.allExcludedCodePoints(x);\n","\t\t\tif (excludedFromWhiteList.isEmpty()) {\n","\t\t\t\treturn Optional.empty();\n","\t\t\t}\n","\t\t\tList<String> excludedList = excludedFromWhiteList.stream() //\n","\t\t\t\t\t.map(i -> new String(new int[] { i }, 0, 1)) //\n","\t\t\t\t\t.collect(Collectors.toList());\n","\t\t\treturn Optional.of(new ViolatedValue(excludedList));\n","\t\t}, CODE_POINTS_ALL_INCLUDED, () -> new Object[] {}, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tpublic CodePointsConstraint<T, E> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic static class Builder<T, E extends CharSequence> {\n","\t\tprivate final CodePoints<E> codePoints;\n","\n","\t\tprivate final CharSequenceConstraint<T, E> delegate;\n","\n","\t\tpublic Builder(CharSequenceConstraint<T, E> delegate, CodePoints<E> codePoints) {\n","\t\t\tthis.delegate = delegate;\n","\t\t\tthis.codePoints = codePoints;\n","\t\t}\n","\n","\t\tpublic CodePointsConstraint<T, E> asBlackList() {\n","\t\t\treturn new CodePointsConstraint<>(this.delegate, this.codePoints)\n","\t\t\t\t\t.asBlackList();\n","\t\t}\n","\n","\t\tpublic CodePointsConstraint<T, E> asWhiteList() {\n","\t\t\treturn new CodePointsConstraint<>(this.delegate, this.codePoints)\n","\t\t\t\t\t.asWhiteList();\n","\t\t}\n","\t}\n","\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.charsequence;\n","\n","import java.util.Arrays;\n","import java.util.Collections;\n","import java.util.HashSet;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","import am.ik.yavi.constraint.CharSequenceConstraint;\n","import am.ik.yavi.constraint.charsequence.CodePoints.CodePointsRanges;\n","import am.ik.yavi.constraint.charsequence.CodePoints.CodePointsSet;\n","import am.ik.yavi.constraint.charsequence.CodePoints.Range;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","class CodePointsConstraintTest {\n","\n","\t@Test\n","\tvoid allIncludedRange() {\n","\t\tCodePointsRanges<String> whiteList = () -> Arrays.asList(\n","\t\t\t\tRange.of(0x0041/* A */, 0x005A /* Z */),\n","\t\t\t\tRange.of(0x0061/* a */, 0x007A /* z */));\n","\n","\t\tConstraintPredicate<String> predicate = new CharSequenceConstraint<String, String>()\n","\t\t\t\t.codePoints(whiteList).asWhiteList().predicates().peekFirst();\n","\n","\t\tassertThat(predicate.violatedValue(\"ABCD\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"ABcD\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"AbcD\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"AbCＤ\").get().value())\n","\t\t\t\t.isEqualTo(Collections.singletonList(\"Ｄ\"));\n","\t\tassertThat(predicate.violatedValue(\"AbあCＤ\").get().value())\n","\t\t\t\t.isEqualTo(Arrays.asList(\"あ\", \"Ｄ\"));\n","\t}\n","\n","\t@Test\n","\tvoid allIncludedSet() {\n","\t\tCodePointsSet<String> whiteList = () -> new HashSet<>(\n","\t\t\t\tArrays.asList(0x0041 /* A */, 0x0042 /* B */, 0x0043 /* C */,\n","\t\t\t\t\t\t0x0044 /* D */, 0x0045 /* E */, 0x0046 /* F */, 0x0047 /* G */,\n","\t\t\t\t\t\t0x0048 /* H */, 0x0049 /* I */, 0x004A /* J */, 0x004B /* K */,\n","\t\t\t\t\t\t0x004C /* L */, 0x004D /* M */, 0x004E /* N */, 0x004F /* O */,\n","\t\t\t\t\t\t0x0050 /* P */, 0x0051 /* Q */, 0x0052 /* R */, 0x0053 /* S */,\n","\t\t\t\t\t\t0x0054 /* T */, 0x0055 /* U */, 0x0056 /* V */, 0x0057 /* W */,\n","\t\t\t\t\t\t0x0058 /* X */, 0x0059 /* Y */, 0x005A /* Z */, //\n","\t\t\t\t\t\t0x0061 /* a */, 0x0062 /* b */, 0x0063 /* c */, 0x0064 /* d */,\n","\t\t\t\t\t\t0x0065 /* e */, 0x0066 /* f */, 0x0067 /* g */, 0x0068 /* h */,\n","\t\t\t\t\t\t0x0069 /* i */, 0x006A /* j */, 0x006B /* k */, 0x006C /* l */,\n","\t\t\t\t\t\t0x006D /* m */, 0x006E /* n */, 0x006F /* o */, 0x0070 /* p */,\n","\t\t\t\t\t\t0x0071 /* q */, 0x0072 /* r */, 0x0073 /* s */, 0x0074 /* t */,\n","\t\t\t\t\t\t0x0075 /* u */, 0x0076 /* v */, 0x0077 /* w */, 0x0078 /* x */,\n","\t\t\t\t\t\t0x0079 /* y */, 0x007A /* z */));\n","\n","\t\tConstraintPredicate<String> predicate = new CharSequenceConstraint<String, String>()\n","\t\t\t\t.codePoints(whiteList).asWhiteList().predicates().peekFirst();\n","\n","\t\tassertThat(predicate.violatedValue(\"ABCD\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"ABcD\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"AbcD\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"AbCＤ\").get().value())\n","\t\t\t\t.isEqualTo(Collections.singletonList(\"Ｄ\"));\n","\t\tassertThat(predicate.violatedValue(\"AbあCＤ\").get().value())\n","\t\t\t\t.isEqualTo(Arrays.asList(\"あ\", \"Ｄ\"));\n","\t}\n","\n","\t@Test\n","\tvoid notIncludedRange() {\n","\t\tCodePointsRanges<String> blackList = () -> Arrays.asList(\n","\t\t\t\tRange.of(0x0041/* A */, 0x0042 /* B */),\n","\t\t\t\tRange.of(0x0061/* a */, 0x0062 /* b */));\n","\n","\t\tConstraintPredicate<String> predicate = new CharSequenceConstraint<String, String>()\n","\t\t\t\t.codePoints(blackList).asBlackList().predicates().peekFirst();\n","\n","\t\tassertThat(predicate.violatedValue(\"CD\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"cd\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"ABCD\").get().value())\n","\t\t\t\t.isEqualTo(Arrays.asList(\"A\", \"B\"));\n","\t\tassertThat(predicate.violatedValue(\"AbCD\").get().value())\n","\t\t\t\t.isEqualTo(Arrays.asList(\"A\", \"b\"));\n","\t}\n","\n","\t@Test\n","\tvoid notIncludedSet() {\n","\t\tCodePointsSet<String> blackList = () -> new HashSet<>(\n","\t\t\t\tArrays.asList(0x0041 /* A */, 0x0042 /* B */));\n","\n","\t\tConstraintPredicate<String> predicate = new CharSequenceConstraint<String, String>()\n","\t\t\t\t.codePoints(blackList).asBlackList().predicates().peekFirst();\n","\n","\t\tassertThat(predicate.violatedValue(\"CD\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"ab\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"abCD\").isPresent()).isFalse();\n","\t\tassertThat(predicate.violatedValue(\"AbCD\").get().value())\n","\t\t\t\t.isEqualTo(Collections.singletonList(\"A\"));\n","\t\tassertThat(predicate.violatedValue(\"ABCD\").get().value())\n","\t\t\t\t.isEqualTo(Arrays.asList(\"A\", \"B\"));\n","\t}\n","}\n"],"method_lines_dic":{"CodePointsConstraint::::asBlackList()":[43,65],"CodePointsConstraint::::asWhiteList()":[67,79],"CodePointsConstraint::::cast()":[81,84],"CodePointsConstraint.Builder::::asBlackList()":[96,99],"CodePointsConstraint.Builder::::asWhiteList()":[101,104]},"test_method_lines_dic":{"CodePointsConstraintTest::::allIncludedRange()":[34,50],"CodePointsConstraintTest::::allIncludedSet()":[52,80],"CodePointsConstraintTest::::notIncludedRange()":[82,97],"CodePointsConstraintTest::::notIncludedSet()":[99,114]},"reverse_method_lines_dic":{"43":"CodePointsConstraint::::asBlackList()","44":"CodePointsConstraint::::asBlackList()","45":"CodePointsConstraint::::asBlackList()","46":"CodePointsConstraint::::asBlackList()","47":"CodePointsConstraint::::asBlackList()","48":"CodePointsConstraint::::asBlackList()","49":"CodePointsConstraint::::asBlackList()","50":"CodePointsConstraint::::asBlackList()","51":"CodePointsConstraint::::asBlackList()","52":"CodePointsConstraint::::asBlackList()","53":"CodePointsConstraint::::asBlackList()","54":"CodePointsConstraint::::asBlackList()","55":"CodePointsConstraint::::asBlackList()","56":"CodePointsConstraint::::asBlackList()","57":"CodePointsConstraint::::asBlackList()","58":"CodePointsConstraint::::asBlackList()","59":"CodePointsConstraint::::asBlackList()","60":"CodePointsConstraint::::asBlackList()","61":"CodePointsConstraint::::asBlackList()","62":"CodePointsConstraint::::asBlackList()","63":"CodePointsConstraint::::asBlackList()","64":"CodePointsConstraint::::asBlackList()","65":"CodePointsConstraint::::asBlackList()","67":"CodePointsConstraint::::asWhiteList()","68":"CodePointsConstraint::::asWhiteList()","69":"CodePointsConstraint::::asWhiteList()","70":"CodePointsConstraint::::asWhiteList()","71":"CodePointsConstraint::::asWhiteList()","72":"CodePointsConstraint::::asWhiteList()","73":"CodePointsConstraint::::asWhiteList()","74":"CodePointsConstraint::::asWhiteList()","75":"CodePointsConstraint::::asWhiteList()","76":"CodePointsConstraint::::asWhiteList()","77":"CodePointsConstraint::::asWhiteList()","78":"CodePointsConstraint::::asWhiteList()","79":"CodePointsConstraint::::asWhiteList()","81":"CodePointsConstraint::::cast()","82":"CodePointsConstraint::::cast()","83":"CodePointsConstraint::::cast()","84":"CodePointsConstraint::::cast()","96":"CodePointsConstraint.Builder::::asBlackList()","97":"CodePointsConstraint.Builder::::asBlackList()","98":"CodePointsConstraint.Builder::::asBlackList()","99":"CodePointsConstraint.Builder::::asBlackList()","101":"CodePointsConstraint.Builder::::asWhiteList()","102":"CodePointsConstraint.Builder::::asWhiteList()","103":"CodePointsConstraint.Builder::::asWhiteList()","104":"CodePointsConstraint.Builder::::asWhiteList()"},"test_reverse_method_lines_dic":{"34":"CodePointsConstraintTest::::allIncludedRange()","35":"CodePointsConstraintTest::::allIncludedRange()","36":"CodePointsConstraintTest::::allIncludedRange()","37":"CodePointsConstraintTest::::allIncludedRange()","38":"CodePointsConstraintTest::::allIncludedRange()","39":"CodePointsConstraintTest::::allIncludedRange()","40":"CodePointsConstraintTest::::allIncludedRange()","41":"CodePointsConstraintTest::::allIncludedRange()","42":"CodePointsConstraintTest::::allIncludedRange()","43":"CodePointsConstraintTest::::allIncludedRange()","44":"CodePointsConstraintTest::::allIncludedRange()","45":"CodePointsConstraintTest::::allIncludedRange()","46":"CodePointsConstraintTest::::allIncludedRange()","47":"CodePointsConstraintTest::::allIncludedRange()","48":"CodePointsConstraintTest::::allIncludedRange()","49":"CodePointsConstraintTest::::allIncludedRange()","50":"CodePointsConstraintTest::::allIncludedRange()","52":"CodePointsConstraintTest::::allIncludedSet()","53":"CodePointsConstraintTest::::allIncludedSet()","54":"CodePointsConstraintTest::::allIncludedSet()","55":"CodePointsConstraintTest::::allIncludedSet()","56":"CodePointsConstraintTest::::allIncludedSet()","57":"CodePointsConstraintTest::::allIncludedSet()","58":"CodePointsConstraintTest::::allIncludedSet()","59":"CodePointsConstraintTest::::allIncludedSet()","60":"CodePointsConstraintTest::::allIncludedSet()","61":"CodePointsConstraintTest::::allIncludedSet()","62":"CodePointsConstraintTest::::allIncludedSet()","63":"CodePointsConstraintTest::::allIncludedSet()","64":"CodePointsConstraintTest::::allIncludedSet()","65":"CodePointsConstraintTest::::allIncludedSet()","66":"CodePointsConstraintTest::::allIncludedSet()","67":"CodePointsConstraintTest::::allIncludedSet()","68":"CodePointsConstraintTest::::allIncludedSet()","69":"CodePointsConstraintTest::::allIncludedSet()","70":"CodePointsConstraintTest::::allIncludedSet()","71":"CodePointsConstraintTest::::allIncludedSet()","72":"CodePointsConstraintTest::::allIncludedSet()","73":"CodePointsConstraintTest::::allIncludedSet()","74":"CodePointsConstraintTest::::allIncludedSet()","75":"CodePointsConstraintTest::::allIncludedSet()","76":"CodePointsConstraintTest::::allIncludedSet()","77":"CodePointsConstraintTest::::allIncludedSet()","78":"CodePointsConstraintTest::::allIncludedSet()","79":"CodePointsConstraintTest::::allIncludedSet()","80":"CodePointsConstraintTest::::allIncludedSet()","82":"CodePointsConstraintTest::::notIncludedRange()","83":"CodePointsConstraintTest::::notIncludedRange()","84":"CodePointsConstraintTest::::notIncludedRange()","85":"CodePointsConstraintTest::::notIncludedRange()","86":"CodePointsConstraintTest::::notIncludedRange()","87":"CodePointsConstraintTest::::notIncludedRange()","88":"CodePointsConstraintTest::::notIncludedRange()","89":"CodePointsConstraintTest::::notIncludedRange()","90":"CodePointsConstraintTest::::notIncludedRange()","91":"CodePointsConstraintTest::::notIncludedRange()","92":"CodePointsConstraintTest::::notIncludedRange()","93":"CodePointsConstraintTest::::notIncludedRange()","94":"CodePointsConstraintTest::::notIncludedRange()","95":"CodePointsConstraintTest::::notIncludedRange()","96":"CodePointsConstraintTest::::notIncludedRange()","97":"CodePointsConstraintTest::::notIncludedRange()","99":"CodePointsConstraintTest::::notIncludedSet()","100":"CodePointsConstraintTest::::notIncludedSet()","101":"CodePointsConstraintTest::::notIncludedSet()","102":"CodePointsConstraintTest::::notIncludedSet()","103":"CodePointsConstraintTest::::notIncludedSet()","104":"CodePointsConstraintTest::::notIncludedSet()","105":"CodePointsConstraintTest::::notIncludedSet()","106":"CodePointsConstraintTest::::notIncludedSet()","107":"CodePointsConstraintTest::::notIncludedSet()","108":"CodePointsConstraintTest::::notIncludedSet()","109":"CodePointsConstraintTest::::notIncludedSet()","110":"CodePointsConstraintTest::::notIncludedSet()","111":"CodePointsConstraintTest::::notIncludedSet()","112":"CodePointsConstraintTest::::notIncludedSet()","113":"CodePointsConstraintTest::::notIncludedSet()","114":"CodePointsConstraintTest::::notIncludedSet()"},"tests":[{"test_lines":[34,50],"covered_lines":[38,39,40,41,68,69,70,71,73,74,75,76,78,91,92,93,94,102,103],"label":"CodePointsConstraint::::asWhiteList()"},{"test_lines":[52,80],"covered_lines":[38,39,40,41,68,69,70,71,73,74,75,76,78,91,92,93,94,102,103],"label":"CodePointsConstraint::::asWhiteList()"},{"test_lines":[82,97],"covered_lines":[38,39,40,41,44,45,47,48,49,50,51,52,53,56,57,59,60,61,62,64,91,92,93,94,97,98],"label":"CodePointsConstraint::::asBlackList()"},{"test_lines":[99,114],"covered_lines":[38,39,40,41,44,45,47,48,49,50,51,52,53,56,57,59,60,61,62,64,91,92,93,94,97,98],"label":"CodePointsConstraint::::asBlackList()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/charsequence/codepoints/CompositeCodePoints.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.charsequence.codepoints;\n","\n","import java.util.ArrayList;\n","import java.util.Collections;\n","import java.util.LinkedHashSet;\n","import java.util.List;\n","import java.util.Set;\n","\n","import am.ik.yavi.constraint.charsequence.CodePoints;\n","\n","public class CompositeCodePoints<E extends CharSequence> implements CodePoints<E> {\n","\tprivate final List<CodePoints<E>> composite = new ArrayList<>();\n","\n","\t@SafeVarargs\n","\tpublic CompositeCodePoints(CodePoints<E>... codePoints) {\n","\t\tfinal Set<Integer> codePointsSet = new LinkedHashSet<>();\n","\t\tfinal List<Range> ranges = new ArrayList<>();\n","\t\tfor (CodePoints<E> points : codePoints) {\n","\t\t\tif (points instanceof CodePointsSet) {\n","\t\t\t\tcodePointsSet.addAll(((CodePointsSet<E>) points).asSet());\n","\t\t\t}\n","\t\t\telse if (points instanceof CodePointsRanges) {\n","\t\t\t\tranges.addAll(((CodePointsRanges<E>) points).asRanges());\n","\t\t\t}\n","\t\t\telse {\n","\t\t\t\tcomposite.add(points);\n","\t\t\t}\n","\t\t}\n","\t\tif (!codePointsSet.isEmpty()) {\n","\t\t\tcomposite.add((CodePointsSet<E>) () -> codePointsSet);\n","\t\t}\n","\t\tif (!ranges.isEmpty()) {\n","\t\t\tcomposite.add((CodePointsRanges<E>) () -> ranges);\n","\t\t}\n","\t\tif (composite.isEmpty()) {\n","\t\t\tthrow new IllegalArgumentException(\"No code point is included\");\n","\t\t}\n","\t}\n","\n","\t@Override\n","\tpublic Set<Integer> allExcludedCodePoints(E s) {\n","\t\tSet<Integer> excluded = null;\n","\t\tfor (CodePoints<E> codePoints : this.composite) {\n","\t\t\tSet<Integer> e = codePoints.allExcludedCodePoints(s);\n","\t\t\tif (e.isEmpty()) {\n","\t\t\t\treturn e;\n","\t\t\t}\n","\t\t\tif (excluded == null) {\n","\t\t\t\texcluded = e;\n","\t\t\t}\n","\t\t\telse {\n","\t\t\t\texcluded.retainAll(e);\n","\t\t\t}\n","\t\t}\n","\t\treturn excluded == null ? Collections.emptySet() : excluded;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.charsequence.codepoints;\n","\n","import java.util.Arrays;\n","import java.util.LinkedHashSet;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static am.ik.yavi.constraint.charsequence.codepoints.UnicodeCodePoints.HIRAGANA;\n","import static am.ik.yavi.constraint.charsequence.codepoints.UnicodeCodePoints.KATAKANA;\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","import am.ik.yavi.constraint.charsequence.CodePoints;\n","import am.ik.yavi.constraint.charsequence.CodePoints.CodePointsSet;\n","\n","class CompositeCodePointsTest {\n","\n","\t@Test\n","\tvoid codePointRange() {\n","\t\tCodePoints<String> codePoints = new CompositeCodePoints<>(HIRAGANA, KATAKANA);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"あ\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"い\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"ア\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"イ\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"あア\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"あいアイ\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"E\")).containsOnly(0x0045);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"EF\")).contains(0x0045, 0x0046);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"あいアイE\")).containsOnly(0x0045);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"あいアイEF\")).contains(0x0045, 0x0046);\n","\t}\n","\n","\t@Test\n","\tvoid codePointsSet() {\n","\t\tCodePointsSet<String> cp1 = () -> new LinkedHashSet<>(\n","\t\t\t\tArrays.asList(0x0041 /* A */, 0x0042 /* B */));\n","\t\tCodePointsSet<String> cp2 = () -> new LinkedHashSet<>(\n","\t\t\t\tArrays.asList(0x0043 /* C */, 0x0044 /* D */));\n","\t\tCodePoints<String> codePoints = new CompositeCodePoints<>(cp1, cp2);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"A\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"B\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"C\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"D\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"BC\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"ABCD\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"E\")).containsOnly(0x0045);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"EF\")).contains(0x0045, 0x0046);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"ABCDE\")).containsOnly(0x0045);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"ABCDEF\")).contains(0x0045, 0x0046);\n","\t}\n","\n","\t@Test\n","\tvoid mix() {\n","\t\tCodePointsSet<String> cp1 = () -> new LinkedHashSet<>(\n","\t\t\t\tArrays.asList(0x0041 /* A */, 0x0042 /* B */));\n","\t\tCodePointsSet<String> cp2 = () -> new LinkedHashSet<>(\n","\t\t\t\tArrays.asList(0x0043 /* C */, 0x0044 /* D */));\n","\t\tCodePoints<String> codePoints = new CompositeCodePoints<>(cp1, cp2, HIRAGANA);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"A\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"B\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"C\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"D\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"あ\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"い\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"BCあ\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"ABCDあい\")).isEmpty();\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"E\")).containsOnly(0x0045);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"EF\")).contains(0x0045, 0x0046);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"ABCDEあい\")).containsOnly(0x0045);\n","\t\tassertThat(codePoints.allExcludedCodePoints(\"ABCDEFあい\")).contains(0x0045, 0x0046);\n","\t}\n","}\n"],"method_lines_dic":{"CompositeCodePoints::::allExcludedCodePoints(E)":[55,71]},"test_method_lines_dic":{"CompositeCodePointsTest::::codePointRange()":[32,45],"CompositeCodePointsTest::::codePointsSet()":[47,64],"CompositeCodePointsTest::::mix()":[66,85]},"reverse_method_lines_dic":{"55":"CompositeCodePoints::::allExcludedCodePoints(E)","56":"CompositeCodePoints::::allExcludedCodePoints(E)","57":"CompositeCodePoints::::allExcludedCodePoints(E)","58":"CompositeCodePoints::::allExcludedCodePoints(E)","59":"CompositeCodePoints::::allExcludedCodePoints(E)","60":"CompositeCodePoints::::allExcludedCodePoints(E)","61":"CompositeCodePoints::::allExcludedCodePoints(E)","62":"CompositeCodePoints::::allExcludedCodePoints(E)","63":"CompositeCodePoints::::allExcludedCodePoints(E)","64":"CompositeCodePoints::::allExcludedCodePoints(E)","65":"CompositeCodePoints::::allExcludedCodePoints(E)","66":"CompositeCodePoints::::allExcludedCodePoints(E)","67":"CompositeCodePoints::::allExcludedCodePoints(E)","68":"CompositeCodePoints::::allExcludedCodePoints(E)","69":"CompositeCodePoints::::allExcludedCodePoints(E)","70":"CompositeCodePoints::::allExcludedCodePoints(E)","71":"CompositeCodePoints::::allExcludedCodePoints(E)"},"test_reverse_method_lines_dic":{"32":"CompositeCodePointsTest::::codePointRange()","33":"CompositeCodePointsTest::::codePointRange()","34":"CompositeCodePointsTest::::codePointRange()","35":"CompositeCodePointsTest::::codePointRange()","36":"CompositeCodePointsTest::::codePointRange()","37":"CompositeCodePointsTest::::codePointRange()","38":"CompositeCodePointsTest::::codePointRange()","39":"CompositeCodePointsTest::::codePointRange()","40":"CompositeCodePointsTest::::codePointRange()","41":"CompositeCodePointsTest::::codePointRange()","42":"CompositeCodePointsTest::::codePointRange()","43":"CompositeCodePointsTest::::codePointRange()","44":"CompositeCodePointsTest::::codePointRange()","45":"CompositeCodePointsTest::::codePointRange()","47":"CompositeCodePointsTest::::codePointsSet()","48":"CompositeCodePointsTest::::codePointsSet()","49":"CompositeCodePointsTest::::codePointsSet()","50":"CompositeCodePointsTest::::codePointsSet()","51":"CompositeCodePointsTest::::codePointsSet()","52":"CompositeCodePointsTest::::codePointsSet()","53":"CompositeCodePointsTest::::codePointsSet()","54":"CompositeCodePointsTest::::codePointsSet()","55":"CompositeCodePointsTest::::codePointsSet()","56":"CompositeCodePointsTest::::codePointsSet()","57":"CompositeCodePointsTest::::codePointsSet()","58":"CompositeCodePointsTest::::codePointsSet()","59":"CompositeCodePointsTest::::codePointsSet()","60":"CompositeCodePointsTest::::codePointsSet()","61":"CompositeCodePointsTest::::codePointsSet()","62":"CompositeCodePointsTest::::codePointsSet()","63":"CompositeCodePointsTest::::codePointsSet()","64":"CompositeCodePointsTest::::codePointsSet()","66":"CompositeCodePointsTest::::mix()","67":"CompositeCodePointsTest::::mix()","68":"CompositeCodePointsTest::::mix()","69":"CompositeCodePointsTest::::mix()","70":"CompositeCodePointsTest::::mix()","71":"CompositeCodePointsTest::::mix()","72":"CompositeCodePointsTest::::mix()","73":"CompositeCodePointsTest::::mix()","74":"CompositeCodePointsTest::::mix()","75":"CompositeCodePointsTest::::mix()","76":"CompositeCodePointsTest::::mix()","77":"CompositeCodePointsTest::::mix()","78":"CompositeCodePointsTest::::mix()","79":"CompositeCodePointsTest::::mix()","80":"CompositeCodePointsTest::::mix()","81":"CompositeCodePointsTest::::mix()","82":"CompositeCodePointsTest::::mix()","83":"CompositeCodePointsTest::::mix()","84":"CompositeCodePointsTest::::mix()","85":"CompositeCodePointsTest::::mix()"},"tests":[{"test_lines":[32,45],"covered_lines":[27,30,31,32,33,34,37,41,44,47,50,53,57,58,59,60,61,63,64,67,69,70],"label":"CompositeCodePoints::::allExcludedCodePoints(E)"},{"test_lines":[47,64],"covered_lines":[27,30,31,32,33,34,35,44,45,47,50,53,57,58,59,60,61,63,64,69,70],"label":"CompositeCodePoints::::allExcludedCodePoints(E)"},{"test_lines":[66,85],"covered_lines":[27,30,31,32,33,34,35,37,41,44,45,47,50,53,57,58,59,60,61,63,64,67,69,70],"label":"CompositeCodePoints::::allExcludedCodePoints(E)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/array/ByteArrayConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import java.util.function.ToIntFunction;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.ARRAY_CONTAINS;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class ByteArrayConstraint<T>\n","\t\textends ContainerConstraintBase<T, byte[], ByteArrayConstraint<T>> {\n","\n","\t@Override\n","\tpublic ByteArrayConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic ByteArrayConstraint<T> contains(byte v) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> {\n","\t\t\tfor (byte e : x) {\n","\t\t\t\tif (e == v) {\n","\t\t\t\t\treturn true;\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\treturn false;\n","\t\t}, ARRAY_CONTAINS, () -> new Object[] { v }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<byte[]> size() {\n","\t\treturn x -> x.length;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class ByteArrayConstraintTest {\n","\tprivate ByteArrayConstraint<byte[]> constraint = new ByteArrayConstraint<>();\n","\n","\t@Test\n","\tvoid contains() {\n","\t\tPredicate<byte[]> predicate = constraint.contains((byte) 100).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100, (byte) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 101, (byte) 102 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<byte[]> predicate = constraint.fixedSize(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100 })).isFalse();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100, (byte) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100, (byte) 101, (byte) 102 }))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<byte[]> predicate = constraint.greaterThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100, (byte) 101 })).isFalse();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100, (byte) 101, (byte) 102 }))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<byte[]> predicate = constraint.greaterThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100 })).isFalse();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100, (byte) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100, (byte) 101, (byte) 102 }))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<byte[]> predicate = constraint.lessThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100 })).isTrue();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100, (byte) 101 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<byte[]> predicate = constraint.lessThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100 })).isTrue();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100, (byte) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100, (byte) 101, (byte) 102 }))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid notEmpty() {\n","\t\tPredicate<byte[]> predicate = constraint.notEmpty().predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new byte[] { (byte) 100 })).isTrue();\n","\t\tassertThat(predicate.test(new byte[] {})).isFalse();\n","\t}\n","}\n"],"method_lines_dic":{"ByteArrayConstraint::::cast()":[29,32],"ByteArrayConstraint::::contains(byte)":[34,44],"ByteArrayConstraint::::size()":[46,49]},"test_method_lines_dic":{"ByteArrayConstraintTest::::contains()":[27,33],"ByteArrayConstraintTest::::fixedSize()":[35,43],"ByteArrayConstraintTest::::greaterThan()":[45,52],"ByteArrayConstraintTest::::greaterThanOrEqual()":[54,62],"ByteArrayConstraintTest::::lessThan()":[64,70],"ByteArrayConstraintTest::::lessThanOrEqual()":[72,80],"ByteArrayConstraintTest::::notEmpty()":[82,88]},"reverse_method_lines_dic":{"29":"ByteArrayConstraint::::cast()","30":"ByteArrayConstraint::::cast()","31":"ByteArrayConstraint::::cast()","32":"ByteArrayConstraint::::cast()","34":"ByteArrayConstraint::::contains(byte)","35":"ByteArrayConstraint::::contains(byte)","36":"ByteArrayConstraint::::contains(byte)","37":"ByteArrayConstraint::::contains(byte)","38":"ByteArrayConstraint::::contains(byte)","39":"ByteArrayConstraint::::contains(byte)","40":"ByteArrayConstraint::::contains(byte)","41":"ByteArrayConstraint::::contains(byte)","42":"ByteArrayConstraint::::contains(byte)","43":"ByteArrayConstraint::::contains(byte)","44":"ByteArrayConstraint::::contains(byte)","46":"ByteArrayConstraint::::size()","47":"ByteArrayConstraint::::size()","48":"ByteArrayConstraint::::size()","49":"ByteArrayConstraint::::size()"},"test_reverse_method_lines_dic":{"27":"ByteArrayConstraintTest::::contains()","28":"ByteArrayConstraintTest::::contains()","29":"ByteArrayConstraintTest::::contains()","30":"ByteArrayConstraintTest::::contains()","31":"ByteArrayConstraintTest::::contains()","32":"ByteArrayConstraintTest::::contains()","33":"ByteArrayConstraintTest::::contains()","35":"ByteArrayConstraintTest::::fixedSize()","36":"ByteArrayConstraintTest::::fixedSize()","37":"ByteArrayConstraintTest::::fixedSize()","38":"ByteArrayConstraintTest::::fixedSize()","39":"ByteArrayConstraintTest::::fixedSize()","40":"ByteArrayConstraintTest::::fixedSize()","41":"ByteArrayConstraintTest::::fixedSize()","42":"ByteArrayConstraintTest::::fixedSize()","43":"ByteArrayConstraintTest::::fixedSize()","45":"ByteArrayConstraintTest::::greaterThan()","46":"ByteArrayConstraintTest::::greaterThan()","47":"ByteArrayConstraintTest::::greaterThan()","48":"ByteArrayConstraintTest::::greaterThan()","49":"ByteArrayConstraintTest::::greaterThan()","50":"ByteArrayConstraintTest::::greaterThan()","51":"ByteArrayConstraintTest::::greaterThan()","52":"ByteArrayConstraintTest::::greaterThan()","54":"ByteArrayConstraintTest::::greaterThanOrEqual()","55":"ByteArrayConstraintTest::::greaterThanOrEqual()","56":"ByteArrayConstraintTest::::greaterThanOrEqual()","57":"ByteArrayConstraintTest::::greaterThanOrEqual()","58":"ByteArrayConstraintTest::::greaterThanOrEqual()","59":"ByteArrayConstraintTest::::greaterThanOrEqual()","60":"ByteArrayConstraintTest::::greaterThanOrEqual()","61":"ByteArrayConstraintTest::::greaterThanOrEqual()","62":"ByteArrayConstraintTest::::greaterThanOrEqual()","64":"ByteArrayConstraintTest::::lessThan()","65":"ByteArrayConstraintTest::::lessThan()","66":"ByteArrayConstraintTest::::lessThan()","67":"ByteArrayConstraintTest::::lessThan()","68":"ByteArrayConstraintTest::::lessThan()","69":"ByteArrayConstraintTest::::lessThan()","70":"ByteArrayConstraintTest::::lessThan()","72":"ByteArrayConstraintTest::::lessThanOrEqual()","73":"ByteArrayConstraintTest::::lessThanOrEqual()","74":"ByteArrayConstraintTest::::lessThanOrEqual()","75":"ByteArrayConstraintTest::::lessThanOrEqual()","76":"ByteArrayConstraintTest::::lessThanOrEqual()","77":"ByteArrayConstraintTest::::lessThanOrEqual()","78":"ByteArrayConstraintTest::::lessThanOrEqual()","79":"ByteArrayConstraintTest::::lessThanOrEqual()","80":"ByteArrayConstraintTest::::lessThanOrEqual()","82":"ByteArrayConstraintTest::::notEmpty()","83":"ByteArrayConstraintTest::::notEmpty()","84":"ByteArrayConstraintTest::::notEmpty()","85":"ByteArrayConstraintTest::::notEmpty()","86":"ByteArrayConstraintTest::::notEmpty()","87":"ByteArrayConstraintTest::::notEmpty()","88":"ByteArrayConstraintTest::::notEmpty()"},"tests":[{"test_lines":[27,33],"covered_lines":[26,35,36,37,38,41,43],"label":"ByteArrayConstraint::::contains(byte)"},{"test_lines":[35,43],"covered_lines":[26,31,48],"label":"ByteArrayConstraint::::size()"},{"test_lines":[45,52],"covered_lines":[26,31,48],"label":"ByteArrayConstraint::::size()"},{"test_lines":[54,62],"covered_lines":[26,31,48],"label":"ByteArrayConstraint::::size()"},{"test_lines":[64,70],"covered_lines":[26,31,48],"label":"ByteArrayConstraint::::size()"},{"test_lines":[72,80],"covered_lines":[26,31,48],"label":"ByteArrayConstraint::::size()"},{"test_lines":[82,88],"covered_lines":[26,31,48],"label":"ByteArrayConstraint::::size()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/array/ObjectArrayConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import java.util.Arrays;\n","import java.util.function.ToIntFunction;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.ARRAY_CONTAINS;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class ObjectArrayConstraint<T, E>\n","\t\textends ContainerConstraintBase<T, E[], ObjectArrayConstraint<T, E>> {\n","\n","\t@Override\n","\tpublic ObjectArrayConstraint<T, E> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic ObjectArrayConstraint<T, E> contains(E s) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> Arrays.asList(x).contains(s),\n","\t\t\t\tARRAY_CONTAINS, () -> new Object[] { s }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<E[]> size() {\n","\t\treturn x -> x.length;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class ObjectArrayConstraintTest {\n","\tprivate ObjectArrayConstraint<String[], String> constraint = new ObjectArrayConstraint<>();\n","\n","\t@Test\n","\tvoid contains() {\n","\t\tPredicate<String[]> predicate = constraint.contains(\"foo\").predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new String[] { \"foo\", \"bar\" })).isTrue();\n","\t\tassertThat(predicate.test(new String[] { \"bar\", \"baz\" })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<String[]> predicate = constraint.fixedSize(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new String[] { \"foo\" })).isFalse();\n","\t\tassertThat(predicate.test(new String[] { \"foo\", \"bar\" })).isTrue();\n","\t\tassertThat(predicate.test(new String[] { \"foo\", \"bar\", \"baz\" })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<String[]> predicate = constraint.greaterThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new String[] { \"foo\", \"bar\" })).isFalse();\n","\t\tassertThat(predicate.test(new String[] { \"foo\", \"bar\", \"baz\" })).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<String[]> predicate = constraint.greaterThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new String[] { \"foo\" })).isFalse();\n","\t\tassertThat(predicate.test(new String[] { \"foo\", \"bar\" })).isTrue();\n","\t\tassertThat(predicate.test(new String[] { \"foo\", \"bar\", \"baz\" })).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<String[]> predicate = constraint.lessThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new String[] { \"foo\" })).isTrue();\n","\t\tassertThat(predicate.test(new String[] { \"foo\", \"bar\" })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<String[]> predicate = constraint.lessThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new String[] { \"foo\" })).isTrue();\n","\t\tassertThat(predicate.test(new String[] { \"foo\", \"bar\" })).isTrue();\n","\t\tassertThat(predicate.test(new String[] { \"foo\", \"bar\", \"baz\" })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid notEmpty() {\n","\t\tPredicate<String[]> predicate = constraint.notEmpty().predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new String[] { \"foo\" })).isTrue();\n","\t\tassertThat(predicate.test(new String[] {})).isFalse();\n","\t}\n","}\n"],"method_lines_dic":{"ObjectArrayConstraint::::cast()":[30,33],"ObjectArrayConstraint::::contains(E)":[35,39],"ObjectArrayConstraint::::size()":[41,44]},"test_method_lines_dic":{"ObjectArrayConstraintTest::::contains()":[27,33],"ObjectArrayConstraintTest::::fixedSize()":[35,42],"ObjectArrayConstraintTest::::greaterThan()":[44,50],"ObjectArrayConstraintTest::::greaterThanOrEqual()":[52,59],"ObjectArrayConstraintTest::::lessThan()":[61,67],"ObjectArrayConstraintTest::::lessThanOrEqual()":[69,76],"ObjectArrayConstraintTest::::notEmpty()":[78,84]},"reverse_method_lines_dic":{"30":"ObjectArrayConstraint::::cast()","31":"ObjectArrayConstraint::::cast()","32":"ObjectArrayConstraint::::cast()","33":"ObjectArrayConstraint::::cast()","35":"ObjectArrayConstraint::::contains(E)","36":"ObjectArrayConstraint::::contains(E)","37":"ObjectArrayConstraint::::contains(E)","38":"ObjectArrayConstraint::::contains(E)","39":"ObjectArrayConstraint::::contains(E)","41":"ObjectArrayConstraint::::size()","42":"ObjectArrayConstraint::::size()","43":"ObjectArrayConstraint::::size()","44":"ObjectArrayConstraint::::size()"},"test_reverse_method_lines_dic":{"27":"ObjectArrayConstraintTest::::contains()","28":"ObjectArrayConstraintTest::::contains()","29":"ObjectArrayConstraintTest::::contains()","30":"ObjectArrayConstraintTest::::contains()","31":"ObjectArrayConstraintTest::::contains()","32":"ObjectArrayConstraintTest::::contains()","33":"ObjectArrayConstraintTest::::contains()","35":"ObjectArrayConstraintTest::::fixedSize()","36":"ObjectArrayConstraintTest::::fixedSize()","37":"ObjectArrayConstraintTest::::fixedSize()","38":"ObjectArrayConstraintTest::::fixedSize()","39":"ObjectArrayConstraintTest::::fixedSize()","40":"ObjectArrayConstraintTest::::fixedSize()","41":"ObjectArrayConstraintTest::::fixedSize()","42":"ObjectArrayConstraintTest::::fixedSize()","44":"ObjectArrayConstraintTest::::greaterThan()","45":"ObjectArrayConstraintTest::::greaterThan()","46":"ObjectArrayConstraintTest::::greaterThan()","47":"ObjectArrayConstraintTest::::greaterThan()","48":"ObjectArrayConstraintTest::::greaterThan()","49":"ObjectArrayConstraintTest::::greaterThan()","50":"ObjectArrayConstraintTest::::greaterThan()","52":"ObjectArrayConstraintTest::::greaterThanOrEqual()","53":"ObjectArrayConstraintTest::::greaterThanOrEqual()","54":"ObjectArrayConstraintTest::::greaterThanOrEqual()","55":"ObjectArrayConstraintTest::::greaterThanOrEqual()","56":"ObjectArrayConstraintTest::::greaterThanOrEqual()","57":"ObjectArrayConstraintTest::::greaterThanOrEqual()","58":"ObjectArrayConstraintTest::::greaterThanOrEqual()","59":"ObjectArrayConstraintTest::::greaterThanOrEqual()","61":"ObjectArrayConstraintTest::::lessThan()","62":"ObjectArrayConstraintTest::::lessThan()","63":"ObjectArrayConstraintTest::::lessThan()","64":"ObjectArrayConstraintTest::::lessThan()","65":"ObjectArrayConstraintTest::::lessThan()","66":"ObjectArrayConstraintTest::::lessThan()","67":"ObjectArrayConstraintTest::::lessThan()","69":"ObjectArrayConstraintTest::::lessThanOrEqual()","70":"ObjectArrayConstraintTest::::lessThanOrEqual()","71":"ObjectArrayConstraintTest::::lessThanOrEqual()","72":"ObjectArrayConstraintTest::::lessThanOrEqual()","73":"ObjectArrayConstraintTest::::lessThanOrEqual()","74":"ObjectArrayConstraintTest::::lessThanOrEqual()","75":"ObjectArrayConstraintTest::::lessThanOrEqual()","76":"ObjectArrayConstraintTest::::lessThanOrEqual()","78":"ObjectArrayConstraintTest::::notEmpty()","79":"ObjectArrayConstraintTest::::notEmpty()","80":"ObjectArrayConstraintTest::::notEmpty()","81":"ObjectArrayConstraintTest::::notEmpty()","82":"ObjectArrayConstraintTest::::notEmpty()","83":"ObjectArrayConstraintTest::::notEmpty()","84":"ObjectArrayConstraintTest::::notEmpty()"},"tests":[{"test_lines":[27,33],"covered_lines":[27,36,38],"label":"ObjectArrayConstraint::::contains(E)"},{"test_lines":[35,42],"covered_lines":[27,32,43],"label":"ObjectArrayConstraint::::size()"},{"test_lines":[44,50],"covered_lines":[27,32,43],"label":"ObjectArrayConstraint::::size()"},{"test_lines":[52,59],"covered_lines":[27,32,43],"label":"ObjectArrayConstraint::::size()"},{"test_lines":[61,67],"covered_lines":[27,32,43],"label":"ObjectArrayConstraint::::size()"},{"test_lines":[69,76],"covered_lines":[27,32,43],"label":"ObjectArrayConstraint::::size()"},{"test_lines":[78,84],"covered_lines":[27,32,43],"label":"ObjectArrayConstraint::::size()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/array/CharArrayConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import java.util.function.ToIntFunction;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.ARRAY_CONTAINS;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class CharArrayConstraint<T>\n","\t\textends ContainerConstraintBase<T, char[], CharArrayConstraint<T>> {\n","\n","\t@Override\n","\tpublic CharArrayConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic CharArrayConstraint<T> contains(char v) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> {\n","\t\t\tfor (char e : x) {\n","\t\t\t\tif (e == v) {\n","\t\t\t\t\treturn true;\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\treturn false;\n","\t\t}, ARRAY_CONTAINS, () -> new Object[] { v }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<char[]> size() {\n","\t\treturn x -> x.length;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class CharArrayConstraintTest {\n","\tprivate CharArrayConstraint<char[]> constraint = new CharArrayConstraint<>();\n","\n","\t@Test\n","\tvoid contains() {\n","\t\tPredicate<char[]> predicate = constraint.contains((char) 100).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new char[] { (char) 100, (char) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new char[] { (char) 101, (char) 102 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<char[]> predicate = constraint.fixedSize(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new char[] { (char) 100 })).isFalse();\n","\t\tassertThat(predicate.test(new char[] { (char) 100, (char) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new char[] { (char) 100, (char) 101, (char) 102 }))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<char[]> predicate = constraint.greaterThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new char[] { (char) 100, (char) 101 })).isFalse();\n","\t\tassertThat(predicate.test(new char[] { (char) 100, (char) 101, (char) 102 }))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<char[]> predicate = constraint.greaterThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new char[] { (char) 100 })).isFalse();\n","\t\tassertThat(predicate.test(new char[] { (char) 100, (char) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new char[] { (char) 100, (char) 101, (char) 102 }))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<char[]> predicate = constraint.lessThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new char[] { (char) 100 })).isTrue();\n","\t\tassertThat(predicate.test(new char[] { (char) 100, (char) 101 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<char[]> predicate = constraint.lessThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new char[] { (char) 100 })).isTrue();\n","\t\tassertThat(predicate.test(new char[] { (char) 100, (char) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new char[] { (char) 100, (char) 101, (char) 102 }))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid notEmpty() {\n","\t\tPredicate<char[]> predicate = constraint.notEmpty().predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new char[] { (char) 100 })).isTrue();\n","\t\tassertThat(predicate.test(new char[] {})).isFalse();\n","\t}\n","}\n"],"method_lines_dic":{"CharArrayConstraint::::cast()":[29,32],"CharArrayConstraint::::contains(char)":[34,44],"CharArrayConstraint::::size()":[46,49]},"test_method_lines_dic":{"CharArrayConstraintTest::::contains()":[27,33],"CharArrayConstraintTest::::fixedSize()":[35,43],"CharArrayConstraintTest::::greaterThan()":[45,52],"CharArrayConstraintTest::::greaterThanOrEqual()":[54,62],"CharArrayConstraintTest::::lessThan()":[64,70],"CharArrayConstraintTest::::lessThanOrEqual()":[72,80],"CharArrayConstraintTest::::notEmpty()":[82,88]},"reverse_method_lines_dic":{"29":"CharArrayConstraint::::cast()","30":"CharArrayConstraint::::cast()","31":"CharArrayConstraint::::cast()","32":"CharArrayConstraint::::cast()","34":"CharArrayConstraint::::contains(char)","35":"CharArrayConstraint::::contains(char)","36":"CharArrayConstraint::::contains(char)","37":"CharArrayConstraint::::contains(char)","38":"CharArrayConstraint::::contains(char)","39":"CharArrayConstraint::::contains(char)","40":"CharArrayConstraint::::contains(char)","41":"CharArrayConstraint::::contains(char)","42":"CharArrayConstraint::::contains(char)","43":"CharArrayConstraint::::contains(char)","44":"CharArrayConstraint::::contains(char)","46":"CharArrayConstraint::::size()","47":"CharArrayConstraint::::size()","48":"CharArrayConstraint::::size()","49":"CharArrayConstraint::::size()"},"test_reverse_method_lines_dic":{"27":"CharArrayConstraintTest::::contains()","28":"CharArrayConstraintTest::::contains()","29":"CharArrayConstraintTest::::contains()","30":"CharArrayConstraintTest::::contains()","31":"CharArrayConstraintTest::::contains()","32":"CharArrayConstraintTest::::contains()","33":"CharArrayConstraintTest::::contains()","35":"CharArrayConstraintTest::::fixedSize()","36":"CharArrayConstraintTest::::fixedSize()","37":"CharArrayConstraintTest::::fixedSize()","38":"CharArrayConstraintTest::::fixedSize()","39":"CharArrayConstraintTest::::fixedSize()","40":"CharArrayConstraintTest::::fixedSize()","41":"CharArrayConstraintTest::::fixedSize()","42":"CharArrayConstraintTest::::fixedSize()","43":"CharArrayConstraintTest::::fixedSize()","45":"CharArrayConstraintTest::::greaterThan()","46":"CharArrayConstraintTest::::greaterThan()","47":"CharArrayConstraintTest::::greaterThan()","48":"CharArrayConstraintTest::::greaterThan()","49":"CharArrayConstraintTest::::greaterThan()","50":"CharArrayConstraintTest::::greaterThan()","51":"CharArrayConstraintTest::::greaterThan()","52":"CharArrayConstraintTest::::greaterThan()","54":"CharArrayConstraintTest::::greaterThanOrEqual()","55":"CharArrayConstraintTest::::greaterThanOrEqual()","56":"CharArrayConstraintTest::::greaterThanOrEqual()","57":"CharArrayConstraintTest::::greaterThanOrEqual()","58":"CharArrayConstraintTest::::greaterThanOrEqual()","59":"CharArrayConstraintTest::::greaterThanOrEqual()","60":"CharArrayConstraintTest::::greaterThanOrEqual()","61":"CharArrayConstraintTest::::greaterThanOrEqual()","62":"CharArrayConstraintTest::::greaterThanOrEqual()","64":"CharArrayConstraintTest::::lessThan()","65":"CharArrayConstraintTest::::lessThan()","66":"CharArrayConstraintTest::::lessThan()","67":"CharArrayConstraintTest::::lessThan()","68":"CharArrayConstraintTest::::lessThan()","69":"CharArrayConstraintTest::::lessThan()","70":"CharArrayConstraintTest::::lessThan()","72":"CharArrayConstraintTest::::lessThanOrEqual()","73":"CharArrayConstraintTest::::lessThanOrEqual()","74":"CharArrayConstraintTest::::lessThanOrEqual()","75":"CharArrayConstraintTest::::lessThanOrEqual()","76":"CharArrayConstraintTest::::lessThanOrEqual()","77":"CharArrayConstraintTest::::lessThanOrEqual()","78":"CharArrayConstraintTest::::lessThanOrEqual()","79":"CharArrayConstraintTest::::lessThanOrEqual()","80":"CharArrayConstraintTest::::lessThanOrEqual()","82":"CharArrayConstraintTest::::notEmpty()","83":"CharArrayConstraintTest::::notEmpty()","84":"CharArrayConstraintTest::::notEmpty()","85":"CharArrayConstraintTest::::notEmpty()","86":"CharArrayConstraintTest::::notEmpty()","87":"CharArrayConstraintTest::::notEmpty()","88":"CharArrayConstraintTest::::notEmpty()"},"tests":[{"test_lines":[27,33],"covered_lines":[26,35,36,37,38,41,43],"label":"CharArrayConstraint::::contains(char)"},{"test_lines":[35,43],"covered_lines":[26,31,48],"label":"CharArrayConstraint::::size()"},{"test_lines":[45,52],"covered_lines":[26,31,48],"label":"CharArrayConstraint::::size()"},{"test_lines":[54,62],"covered_lines":[26,31,48],"label":"CharArrayConstraint::::size()"},{"test_lines":[64,70],"covered_lines":[26,31,48],"label":"CharArrayConstraint::::size()"},{"test_lines":[72,80],"covered_lines":[26,31,48],"label":"CharArrayConstraint::::size()"},{"test_lines":[82,88],"covered_lines":[26,31,48],"label":"CharArrayConstraint::::size()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/array/DoubleArrayConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import java.util.Arrays;\n","import java.util.function.ToIntFunction;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.ARRAY_CONTAINS;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class DoubleArrayConstraint<T>\n","\t\textends ContainerConstraintBase<T, double[], DoubleArrayConstraint<T>> {\n","\n","\t@Override\n","\tpublic DoubleArrayConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic DoubleArrayConstraint<T> contains(double v) {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.of(x -> Arrays.stream(x).anyMatch(e -> e == v),\n","\t\t\t\t\t\tARRAY_CONTAINS, () -> new Object[] { v }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<double[]> size() {\n","\t\treturn x -> x.length;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class DoubleArrayConstraintTest {\n","\tprivate DoubleArrayConstraint<double[]> constraint = new DoubleArrayConstraint<>();\n","\n","\t@Test\n","\tvoid contains() {\n","\t\tPredicate<double[]> predicate = constraint.contains(100.0).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new double[] { 100.0, 101.0 })).isTrue();\n","\t\tassertThat(predicate.test(new double[] { 101.0, 102.0 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<double[]> predicate = constraint.fixedSize(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new double[] { 100.0 })).isFalse();\n","\t\tassertThat(predicate.test(new double[] { 100.0, 101.0 })).isTrue();\n","\t\tassertThat(predicate.test(new double[] { 100.0, 101.0, 102.0 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<double[]> predicate = constraint.greaterThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new double[] { 100.0, 101.0 })).isFalse();\n","\t\tassertThat(predicate.test(new double[] { 100.0, 101.0, 102.0 })).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<double[]> predicate = constraint.greaterThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new double[] { 100.0 })).isFalse();\n","\t\tassertThat(predicate.test(new double[] { 100.0, 101.0 })).isTrue();\n","\t\tassertThat(predicate.test(new double[] { 100.0, 101.0, 102.0 })).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<double[]> predicate = constraint.lessThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new double[] { 100.0 })).isTrue();\n","\t\tassertThat(predicate.test(new double[] { 100.0, 101.0 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<double[]> predicate = constraint.lessThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new double[] { 100.0 })).isTrue();\n","\t\tassertThat(predicate.test(new double[] { 100.0, 101.0 })).isTrue();\n","\t\tassertThat(predicate.test(new double[] { 100.0, 101.0, 102.0 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid notEmpty() {\n","\t\tPredicate<double[]> predicate = constraint.notEmpty().predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new double[] { 100.0 })).isTrue();\n","\t\tassertThat(predicate.test(new double[] {})).isFalse();\n","\t}\n","}\n"],"method_lines_dic":{"DoubleArrayConstraint::::cast()":[30,33],"DoubleArrayConstraint::::contains(double)":[35,40],"DoubleArrayConstraint::::size()":[42,45]},"test_method_lines_dic":{"DoubleArrayConstraintTest::::contains()":[27,33],"DoubleArrayConstraintTest::::fixedSize()":[35,42],"DoubleArrayConstraintTest::::greaterThan()":[44,50],"DoubleArrayConstraintTest::::greaterThanOrEqual()":[52,59],"DoubleArrayConstraintTest::::lessThan()":[61,67],"DoubleArrayConstraintTest::::lessThanOrEqual()":[69,76],"DoubleArrayConstraintTest::::notEmpty()":[78,84]},"reverse_method_lines_dic":{"30":"DoubleArrayConstraint::::cast()","31":"DoubleArrayConstraint::::cast()","32":"DoubleArrayConstraint::::cast()","33":"DoubleArrayConstraint::::cast()","35":"DoubleArrayConstraint::::contains(double)","36":"DoubleArrayConstraint::::contains(double)","37":"DoubleArrayConstraint::::contains(double)","38":"DoubleArrayConstraint::::contains(double)","39":"DoubleArrayConstraint::::contains(double)","40":"DoubleArrayConstraint::::contains(double)","42":"DoubleArrayConstraint::::size()","43":"DoubleArrayConstraint::::size()","44":"DoubleArrayConstraint::::size()","45":"DoubleArrayConstraint::::size()"},"test_reverse_method_lines_dic":{"27":"DoubleArrayConstraintTest::::contains()","28":"DoubleArrayConstraintTest::::contains()","29":"DoubleArrayConstraintTest::::contains()","30":"DoubleArrayConstraintTest::::contains()","31":"DoubleArrayConstraintTest::::contains()","32":"DoubleArrayConstraintTest::::contains()","33":"DoubleArrayConstraintTest::::contains()","35":"DoubleArrayConstraintTest::::fixedSize()","36":"DoubleArrayConstraintTest::::fixedSize()","37":"DoubleArrayConstraintTest::::fixedSize()","38":"DoubleArrayConstraintTest::::fixedSize()","39":"DoubleArrayConstraintTest::::fixedSize()","40":"DoubleArrayConstraintTest::::fixedSize()","41":"DoubleArrayConstraintTest::::fixedSize()","42":"DoubleArrayConstraintTest::::fixedSize()","44":"DoubleArrayConstraintTest::::greaterThan()","45":"DoubleArrayConstraintTest::::greaterThan()","46":"DoubleArrayConstraintTest::::greaterThan()","47":"DoubleArrayConstraintTest::::greaterThan()","48":"DoubleArrayConstraintTest::::greaterThan()","49":"DoubleArrayConstraintTest::::greaterThan()","50":"DoubleArrayConstraintTest::::greaterThan()","52":"DoubleArrayConstraintTest::::greaterThanOrEqual()","53":"DoubleArrayConstraintTest::::greaterThanOrEqual()","54":"DoubleArrayConstraintTest::::greaterThanOrEqual()","55":"DoubleArrayConstraintTest::::greaterThanOrEqual()","56":"DoubleArrayConstraintTest::::greaterThanOrEqual()","57":"DoubleArrayConstraintTest::::greaterThanOrEqual()","58":"DoubleArrayConstraintTest::::greaterThanOrEqual()","59":"DoubleArrayConstraintTest::::greaterThanOrEqual()","61":"DoubleArrayConstraintTest::::lessThan()","62":"DoubleArrayConstraintTest::::lessThan()","63":"DoubleArrayConstraintTest::::lessThan()","64":"DoubleArrayConstraintTest::::lessThan()","65":"DoubleArrayConstraintTest::::lessThan()","66":"DoubleArrayConstraintTest::::lessThan()","67":"DoubleArrayConstraintTest::::lessThan()","69":"DoubleArrayConstraintTest::::lessThanOrEqual()","70":"DoubleArrayConstraintTest::::lessThanOrEqual()","71":"DoubleArrayConstraintTest::::lessThanOrEqual()","72":"DoubleArrayConstraintTest::::lessThanOrEqual()","73":"DoubleArrayConstraintTest::::lessThanOrEqual()","74":"DoubleArrayConstraintTest::::lessThanOrEqual()","75":"DoubleArrayConstraintTest::::lessThanOrEqual()","76":"DoubleArrayConstraintTest::::lessThanOrEqual()","78":"DoubleArrayConstraintTest::::notEmpty()","79":"DoubleArrayConstraintTest::::notEmpty()","80":"DoubleArrayConstraintTest::::notEmpty()","81":"DoubleArrayConstraintTest::::notEmpty()","82":"DoubleArrayConstraintTest::::notEmpty()","83":"DoubleArrayConstraintTest::::notEmpty()","84":"DoubleArrayConstraintTest::::notEmpty()"},"tests":[{"test_lines":[27,33],"covered_lines":[27,36,37,39],"label":"DoubleArrayConstraint::::contains(double)"},{"test_lines":[35,42],"covered_lines":[27,32,44],"label":"DoubleArrayConstraint::::size()"},{"test_lines":[44,50],"covered_lines":[27,32,44],"label":"DoubleArrayConstraint::::size()"},{"test_lines":[52,59],"covered_lines":[27,32,44],"label":"DoubleArrayConstraint::::size()"},{"test_lines":[61,67],"covered_lines":[27,32,44],"label":"DoubleArrayConstraint::::size()"},{"test_lines":[69,76],"covered_lines":[27,32,44],"label":"DoubleArrayConstraint::::size()"},{"test_lines":[78,84],"covered_lines":[27,32,44],"label":"DoubleArrayConstraint::::size()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/array/ShortArrayConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import java.util.function.ToIntFunction;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.ARRAY_CONTAINS;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class ShortArrayConstraint<T>\n","\t\textends ContainerConstraintBase<T, short[], ShortArrayConstraint<T>> {\n","\n","\t@Override\n","\tpublic ShortArrayConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic ShortArrayConstraint<T> contains(short v) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> {\n","\t\t\tfor (short e : x) {\n","\t\t\t\tif (e == v) {\n","\t\t\t\t\treturn true;\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\treturn false;\n","\t\t}, ARRAY_CONTAINS, () -> new Object[] { v }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<short[]> size() {\n","\t\treturn x -> x.length;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import java.util.function.Predicate;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class ShortArrayConstraintTest {\n","\tprivate ShortArrayConstraint<short[]> constraint = new ShortArrayConstraint<>();\n","\n","\t@Test\n","\tvoid contains() {\n","\t\tPredicate<short[]> predicate = constraint.contains((short) 100).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new short[] { (short) 100, (short) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new short[] { (short) 101, (short) 102 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<short[]> predicate = constraint.fixedSize(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new short[] { (short) 100 })).isFalse();\n","\t\tassertThat(predicate.test(new short[] { (short) 100, (short) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new short[] { (short) 100, (short) 101, (short) 102 }))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<short[]> predicate = constraint.greaterThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new short[] { (short) 100, (short) 101 })).isFalse();\n","\t\tassertThat(predicate.test(new short[] { (short) 100, (short) 101, (short) 102 }))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<short[]> predicate = constraint.greaterThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new short[] { (short) 100 })).isFalse();\n","\t\tassertThat(predicate.test(new short[] { (short) 100, (short) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new short[] { (short) 100, (short) 101, (short) 102 }))\n","\t\t\t\t.isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<short[]> predicate = constraint.lessThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new short[] { (short) 100 })).isTrue();\n","\t\tassertThat(predicate.test(new short[] { (short) 100, (short) 101 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<short[]> predicate = constraint.lessThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new short[] { (short) 100 })).isTrue();\n","\t\tassertThat(predicate.test(new short[] { (short) 100, (short) 101 })).isTrue();\n","\t\tassertThat(predicate.test(new short[] { (short) 100, (short) 101, (short) 102 }))\n","\t\t\t\t.isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid notEmpty() {\n","\t\tPredicate<short[]> predicate = constraint.notEmpty().predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new short[] { (short) 100 })).isTrue();\n","\t\tassertThat(predicate.test(new short[] {})).isFalse();\n","\t}\n","}\n"],"method_lines_dic":{"ShortArrayConstraint::::cast()":[29,32],"ShortArrayConstraint::::contains(short)":[34,44],"ShortArrayConstraint::::size()":[46,49]},"test_method_lines_dic":{"ShortArrayConstraintTest::::contains()":[27,33],"ShortArrayConstraintTest::::fixedSize()":[35,43],"ShortArrayConstraintTest::::greaterThan()":[45,52],"ShortArrayConstraintTest::::greaterThanOrEqual()":[54,62],"ShortArrayConstraintTest::::lessThan()":[64,70],"ShortArrayConstraintTest::::lessThanOrEqual()":[72,80],"ShortArrayConstraintTest::::notEmpty()":[82,88]},"reverse_method_lines_dic":{"29":"ShortArrayConstraint::::cast()","30":"ShortArrayConstraint::::cast()","31":"ShortArrayConstraint::::cast()","32":"ShortArrayConstraint::::cast()","34":"ShortArrayConstraint::::contains(short)","35":"ShortArrayConstraint::::contains(short)","36":"ShortArrayConstraint::::contains(short)","37":"ShortArrayConstraint::::contains(short)","38":"ShortArrayConstraint::::contains(short)","39":"ShortArrayConstraint::::contains(short)","40":"ShortArrayConstraint::::contains(short)","41":"ShortArrayConstraint::::contains(short)","42":"ShortArrayConstraint::::contains(short)","43":"ShortArrayConstraint::::contains(short)","44":"ShortArrayConstraint::::contains(short)","46":"ShortArrayConstraint::::size()","47":"ShortArrayConstraint::::size()","48":"ShortArrayConstraint::::size()","49":"ShortArrayConstraint::::size()"},"test_reverse_method_lines_dic":{"27":"ShortArrayConstraintTest::::contains()","28":"ShortArrayConstraintTest::::contains()","29":"ShortArrayConstraintTest::::contains()","30":"ShortArrayConstraintTest::::contains()","31":"ShortArrayConstraintTest::::contains()","32":"ShortArrayConstraintTest::::contains()","33":"ShortArrayConstraintTest::::contains()","35":"ShortArrayConstraintTest::::fixedSize()","36":"ShortArrayConstraintTest::::fixedSize()","37":"ShortArrayConstraintTest::::fixedSize()","38":"ShortArrayConstraintTest::::fixedSize()","39":"ShortArrayConstraintTest::::fixedSize()","40":"ShortArrayConstraintTest::::fixedSize()","41":"ShortArrayConstraintTest::::fixedSize()","42":"ShortArrayConstraintTest::::fixedSize()","43":"ShortArrayConstraintTest::::fixedSize()","45":"ShortArrayConstraintTest::::greaterThan()","46":"ShortArrayConstraintTest::::greaterThan()","47":"ShortArrayConstraintTest::::greaterThan()","48":"ShortArrayConstraintTest::::greaterThan()","49":"ShortArrayConstraintTest::::greaterThan()","50":"ShortArrayConstraintTest::::greaterThan()","51":"ShortArrayConstraintTest::::greaterThan()","52":"ShortArrayConstraintTest::::greaterThan()","54":"ShortArrayConstraintTest::::greaterThanOrEqual()","55":"ShortArrayConstraintTest::::greaterThanOrEqual()","56":"ShortArrayConstraintTest::::greaterThanOrEqual()","57":"ShortArrayConstraintTest::::greaterThanOrEqual()","58":"ShortArrayConstraintTest::::greaterThanOrEqual()","59":"ShortArrayConstraintTest::::greaterThanOrEqual()","60":"ShortArrayConstraintTest::::greaterThanOrEqual()","61":"ShortArrayConstraintTest::::greaterThanOrEqual()","62":"ShortArrayConstraintTest::::greaterThanOrEqual()","64":"ShortArrayConstraintTest::::lessThan()","65":"ShortArrayConstraintTest::::lessThan()","66":"ShortArrayConstraintTest::::lessThan()","67":"ShortArrayConstraintTest::::lessThan()","68":"ShortArrayConstraintTest::::lessThan()","69":"ShortArrayConstraintTest::::lessThan()","70":"ShortArrayConstraintTest::::lessThan()","72":"ShortArrayConstraintTest::::lessThanOrEqual()","73":"ShortArrayConstraintTest::::lessThanOrEqual()","74":"ShortArrayConstraintTest::::lessThanOrEqual()","75":"ShortArrayConstraintTest::::lessThanOrEqual()","76":"ShortArrayConstraintTest::::lessThanOrEqual()","77":"ShortArrayConstraintTest::::lessThanOrEqual()","78":"ShortArrayConstraintTest::::lessThanOrEqual()","79":"ShortArrayConstraintTest::::lessThanOrEqual()","80":"ShortArrayConstraintTest::::lessThanOrEqual()","82":"ShortArrayConstraintTest::::notEmpty()","83":"ShortArrayConstraintTest::::notEmpty()","84":"ShortArrayConstraintTest::::notEmpty()","85":"ShortArrayConstraintTest::::notEmpty()","86":"ShortArrayConstraintTest::::notEmpty()","87":"ShortArrayConstraintTest::::notEmpty()","88":"ShortArrayConstraintTest::::notEmpty()"},"tests":[{"test_lines":[27,33],"covered_lines":[26,35,36,37,38,41,43],"label":"ShortArrayConstraint::::contains(short)"},{"test_lines":[35,43],"covered_lines":[26,31,48],"label":"ShortArrayConstraint::::size()"},{"test_lines":[45,52],"covered_lines":[26,31,48],"label":"ShortArrayConstraint::::size()"},{"test_lines":[54,62],"covered_lines":[26,31,48],"label":"ShortArrayConstraint::::size()"},{"test_lines":[64,70],"covered_lines":[26,31,48],"label":"ShortArrayConstraint::::size()"},{"test_lines":[72,80],"covered_lines":[26,31,48],"label":"ShortArrayConstraint::::size()"},{"test_lines":[82,88],"covered_lines":[26,31,48],"label":"ShortArrayConstraint::::size()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/array/FloatArrayConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import java.util.function.ToIntFunction;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.ARRAY_CONTAINS;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class FloatArrayConstraint<T>\n","\t\textends ContainerConstraintBase<T, float[], FloatArrayConstraint<T>> {\n","\n","\t@Override\n","\tpublic FloatArrayConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic FloatArrayConstraint<T> contains(float v) {\n","\t\tthis.predicates().add(ConstraintPredicate.of(x -> {\n","\t\t\tfor (float e : x) {\n","\t\t\t\tif (e == v) {\n","\t\t\t\t\treturn true;\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\treturn false;\n","\t\t}, ARRAY_CONTAINS, () -> new Object[] { v }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<float[]> size() {\n","\t\treturn x -> x.length;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class FloatArrayConstraintTest {\n","\tprivate FloatArrayConstraint<float[]> constraint = new FloatArrayConstraint<>();\n","\n","\t@Test\n","\tvoid contains() {\n","\t\tPredicate<float[]> predicate = constraint.contains(100.0f).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new float[] { 100.0f, 101.0f })).isTrue();\n","\t\tassertThat(predicate.test(new float[] { 101.0f, 102.0f })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<float[]> predicate = constraint.fixedSize(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new float[] { 100.0f })).isFalse();\n","\t\tassertThat(predicate.test(new float[] { 100.0f, 101.0f })).isTrue();\n","\t\tassertThat(predicate.test(new float[] { 100.0f, 101.0f, 102.0f })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<float[]> predicate = constraint.greaterThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new float[] { 100.0f, 101.0f })).isFalse();\n","\t\tassertThat(predicate.test(new float[] { 100.0f, 101.0f, 102.0f })).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<float[]> predicate = constraint.greaterThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new float[] { 100.0f })).isFalse();\n","\t\tassertThat(predicate.test(new float[] { 100.0f, 101.0f })).isTrue();\n","\t\tassertThat(predicate.test(new float[] { 100.0f, 101.0f, 102.0f })).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<float[]> predicate = constraint.lessThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new float[] { 100.0f })).isTrue();\n","\t\tassertThat(predicate.test(new float[] { 100.0f, 101.0f })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<float[]> predicate = constraint.lessThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new float[] { 100.0f })).isTrue();\n","\t\tassertThat(predicate.test(new float[] { 100.0f, 101.0f })).isTrue();\n","\t\tassertThat(predicate.test(new float[] { 100.0f, 101.0f, 102.0f })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid notEmpty() {\n","\t\tPredicate<float[]> predicate = constraint.notEmpty().predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new float[] { 100.0f })).isTrue();\n","\t\tassertThat(predicate.test(new float[] {})).isFalse();\n","\t}\n","}\n"],"method_lines_dic":{"FloatArrayConstraint::::cast()":[29,32],"FloatArrayConstraint::::contains(float)":[34,44],"FloatArrayConstraint::::size()":[46,49]},"test_method_lines_dic":{"FloatArrayConstraintTest::::contains()":[27,33],"FloatArrayConstraintTest::::fixedSize()":[35,42],"FloatArrayConstraintTest::::greaterThan()":[44,50],"FloatArrayConstraintTest::::greaterThanOrEqual()":[52,59],"FloatArrayConstraintTest::::lessThan()":[61,67],"FloatArrayConstraintTest::::lessThanOrEqual()":[69,76],"FloatArrayConstraintTest::::notEmpty()":[78,84]},"reverse_method_lines_dic":{"29":"FloatArrayConstraint::::cast()","30":"FloatArrayConstraint::::cast()","31":"FloatArrayConstraint::::cast()","32":"FloatArrayConstraint::::cast()","34":"FloatArrayConstraint::::contains(float)","35":"FloatArrayConstraint::::contains(float)","36":"FloatArrayConstraint::::contains(float)","37":"FloatArrayConstraint::::contains(float)","38":"FloatArrayConstraint::::contains(float)","39":"FloatArrayConstraint::::contains(float)","40":"FloatArrayConstraint::::contains(float)","41":"FloatArrayConstraint::::contains(float)","42":"FloatArrayConstraint::::contains(float)","43":"FloatArrayConstraint::::contains(float)","44":"FloatArrayConstraint::::contains(float)","46":"FloatArrayConstraint::::size()","47":"FloatArrayConstraint::::size()","48":"FloatArrayConstraint::::size()","49":"FloatArrayConstraint::::size()"},"test_reverse_method_lines_dic":{"27":"FloatArrayConstraintTest::::contains()","28":"FloatArrayConstraintTest::::contains()","29":"FloatArrayConstraintTest::::contains()","30":"FloatArrayConstraintTest::::contains()","31":"FloatArrayConstraintTest::::contains()","32":"FloatArrayConstraintTest::::contains()","33":"FloatArrayConstraintTest::::contains()","35":"FloatArrayConstraintTest::::fixedSize()","36":"FloatArrayConstraintTest::::fixedSize()","37":"FloatArrayConstraintTest::::fixedSize()","38":"FloatArrayConstraintTest::::fixedSize()","39":"FloatArrayConstraintTest::::fixedSize()","40":"FloatArrayConstraintTest::::fixedSize()","41":"FloatArrayConstraintTest::::fixedSize()","42":"FloatArrayConstraintTest::::fixedSize()","44":"FloatArrayConstraintTest::::greaterThan()","45":"FloatArrayConstraintTest::::greaterThan()","46":"FloatArrayConstraintTest::::greaterThan()","47":"FloatArrayConstraintTest::::greaterThan()","48":"FloatArrayConstraintTest::::greaterThan()","49":"FloatArrayConstraintTest::::greaterThan()","50":"FloatArrayConstraintTest::::greaterThan()","52":"FloatArrayConstraintTest::::greaterThanOrEqual()","53":"FloatArrayConstraintTest::::greaterThanOrEqual()","54":"FloatArrayConstraintTest::::greaterThanOrEqual()","55":"FloatArrayConstraintTest::::greaterThanOrEqual()","56":"FloatArrayConstraintTest::::greaterThanOrEqual()","57":"FloatArrayConstraintTest::::greaterThanOrEqual()","58":"FloatArrayConstraintTest::::greaterThanOrEqual()","59":"FloatArrayConstraintTest::::greaterThanOrEqual()","61":"FloatArrayConstraintTest::::lessThan()","62":"FloatArrayConstraintTest::::lessThan()","63":"FloatArrayConstraintTest::::lessThan()","64":"FloatArrayConstraintTest::::lessThan()","65":"FloatArrayConstraintTest::::lessThan()","66":"FloatArrayConstraintTest::::lessThan()","67":"FloatArrayConstraintTest::::lessThan()","69":"FloatArrayConstraintTest::::lessThanOrEqual()","70":"FloatArrayConstraintTest::::lessThanOrEqual()","71":"FloatArrayConstraintTest::::lessThanOrEqual()","72":"FloatArrayConstraintTest::::lessThanOrEqual()","73":"FloatArrayConstraintTest::::lessThanOrEqual()","74":"FloatArrayConstraintTest::::lessThanOrEqual()","75":"FloatArrayConstraintTest::::lessThanOrEqual()","76":"FloatArrayConstraintTest::::lessThanOrEqual()","78":"FloatArrayConstraintTest::::notEmpty()","79":"FloatArrayConstraintTest::::notEmpty()","80":"FloatArrayConstraintTest::::notEmpty()","81":"FloatArrayConstraintTest::::notEmpty()","82":"FloatArrayConstraintTest::::notEmpty()","83":"FloatArrayConstraintTest::::notEmpty()","84":"FloatArrayConstraintTest::::notEmpty()"},"tests":[{"test_lines":[27,33],"covered_lines":[26,35,36,37,38,41,43],"label":"FloatArrayConstraint::::contains(float)"},{"test_lines":[35,42],"covered_lines":[26,31,48],"label":"FloatArrayConstraint::::size()"},{"test_lines":[44,50],"covered_lines":[26,31,48],"label":"FloatArrayConstraint::::size()"},{"test_lines":[52,59],"covered_lines":[26,31,48],"label":"FloatArrayConstraint::::size()"},{"test_lines":[61,67],"covered_lines":[26,31,48],"label":"FloatArrayConstraint::::size()"},{"test_lines":[69,76],"covered_lines":[26,31,48],"label":"FloatArrayConstraint::::size()"},{"test_lines":[78,84],"covered_lines":[26,31,48],"label":"FloatArrayConstraint::::size()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/array/IntArrayConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import java.util.Arrays;\n","import java.util.function.ToIntFunction;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.ARRAY_CONTAINS;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class IntArrayConstraint<T>\n","\t\textends ContainerConstraintBase<T, int[], IntArrayConstraint<T>> {\n","\n","\t@Override\n","\tpublic IntArrayConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic IntArrayConstraint<T> contains(int v) {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.of(x -> Arrays.stream(x).anyMatch(e -> e == v),\n","\t\t\t\t\t\tARRAY_CONTAINS, () -> new Object[] { v }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<int[]> size() {\n","\t\treturn x -> x.length;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import java.util.function.Predicate;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class IntArrayConstraintTest {\n","\tprivate IntArrayConstraint<int[]> constraint = new IntArrayConstraint<>();\n","\n","\t@Test\n","\tvoid contains() {\n","\t\tPredicate<int[]> predicate = constraint.contains(100).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new int[] { 100, 101 })).isTrue();\n","\t\tassertThat(predicate.test(new int[] { 101, 102 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<int[]> predicate = constraint.fixedSize(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new int[] { 100 })).isFalse();\n","\t\tassertThat(predicate.test(new int[] { 100, 101 })).isTrue();\n","\t\tassertThat(predicate.test(new int[] { 100, 101, 102 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<int[]> predicate = constraint.greaterThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new int[] { 100, 101 })).isFalse();\n","\t\tassertThat(predicate.test(new int[] { 100, 101, 102 })).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<int[]> predicate = constraint.greaterThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new int[] { 100 })).isFalse();\n","\t\tassertThat(predicate.test(new int[] { 100, 101 })).isTrue();\n","\t\tassertThat(predicate.test(new int[] { 100, 101, 102 })).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<int[]> predicate = constraint.lessThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new int[] { 100 })).isTrue();\n","\t\tassertThat(predicate.test(new int[] { 100, 101 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<int[]> predicate = constraint.lessThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new int[] { 100 })).isTrue();\n","\t\tassertThat(predicate.test(new int[] { 100, 101 })).isTrue();\n","\t\tassertThat(predicate.test(new int[] { 100, 101, 102 })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid notEmpty() {\n","\t\tPredicate<int[]> predicate = constraint.notEmpty().predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new int[] { 100 })).isTrue();\n","\t\tassertThat(predicate.test(new int[] {})).isFalse();\n","\t}\n","}\n"],"method_lines_dic":{"IntArrayConstraint::::cast()":[30,33],"IntArrayConstraint::::contains(int)":[35,40],"IntArrayConstraint::::size()":[42,45]},"test_method_lines_dic":{"IntArrayConstraintTest::::contains()":[27,33],"IntArrayConstraintTest::::fixedSize()":[35,42],"IntArrayConstraintTest::::greaterThan()":[44,50],"IntArrayConstraintTest::::greaterThanOrEqual()":[52,59],"IntArrayConstraintTest::::lessThan()":[61,67],"IntArrayConstraintTest::::lessThanOrEqual()":[69,76],"IntArrayConstraintTest::::notEmpty()":[78,84]},"reverse_method_lines_dic":{"30":"IntArrayConstraint::::cast()","31":"IntArrayConstraint::::cast()","32":"IntArrayConstraint::::cast()","33":"IntArrayConstraint::::cast()","35":"IntArrayConstraint::::contains(int)","36":"IntArrayConstraint::::contains(int)","37":"IntArrayConstraint::::contains(int)","38":"IntArrayConstraint::::contains(int)","39":"IntArrayConstraint::::contains(int)","40":"IntArrayConstraint::::contains(int)","42":"IntArrayConstraint::::size()","43":"IntArrayConstraint::::size()","44":"IntArrayConstraint::::size()","45":"IntArrayConstraint::::size()"},"test_reverse_method_lines_dic":{"27":"IntArrayConstraintTest::::contains()","28":"IntArrayConstraintTest::::contains()","29":"IntArrayConstraintTest::::contains()","30":"IntArrayConstraintTest::::contains()","31":"IntArrayConstraintTest::::contains()","32":"IntArrayConstraintTest::::contains()","33":"IntArrayConstraintTest::::contains()","35":"IntArrayConstraintTest::::fixedSize()","36":"IntArrayConstraintTest::::fixedSize()","37":"IntArrayConstraintTest::::fixedSize()","38":"IntArrayConstraintTest::::fixedSize()","39":"IntArrayConstraintTest::::fixedSize()","40":"IntArrayConstraintTest::::fixedSize()","41":"IntArrayConstraintTest::::fixedSize()","42":"IntArrayConstraintTest::::fixedSize()","44":"IntArrayConstraintTest::::greaterThan()","45":"IntArrayConstraintTest::::greaterThan()","46":"IntArrayConstraintTest::::greaterThan()","47":"IntArrayConstraintTest::::greaterThan()","48":"IntArrayConstraintTest::::greaterThan()","49":"IntArrayConstraintTest::::greaterThan()","50":"IntArrayConstraintTest::::greaterThan()","52":"IntArrayConstraintTest::::greaterThanOrEqual()","53":"IntArrayConstraintTest::::greaterThanOrEqual()","54":"IntArrayConstraintTest::::greaterThanOrEqual()","55":"IntArrayConstraintTest::::greaterThanOrEqual()","56":"IntArrayConstraintTest::::greaterThanOrEqual()","57":"IntArrayConstraintTest::::greaterThanOrEqual()","58":"IntArrayConstraintTest::::greaterThanOrEqual()","59":"IntArrayConstraintTest::::greaterThanOrEqual()","61":"IntArrayConstraintTest::::lessThan()","62":"IntArrayConstraintTest::::lessThan()","63":"IntArrayConstraintTest::::lessThan()","64":"IntArrayConstraintTest::::lessThan()","65":"IntArrayConstraintTest::::lessThan()","66":"IntArrayConstraintTest::::lessThan()","67":"IntArrayConstraintTest::::lessThan()","69":"IntArrayConstraintTest::::lessThanOrEqual()","70":"IntArrayConstraintTest::::lessThanOrEqual()","71":"IntArrayConstraintTest::::lessThanOrEqual()","72":"IntArrayConstraintTest::::lessThanOrEqual()","73":"IntArrayConstraintTest::::lessThanOrEqual()","74":"IntArrayConstraintTest::::lessThanOrEqual()","75":"IntArrayConstraintTest::::lessThanOrEqual()","76":"IntArrayConstraintTest::::lessThanOrEqual()","78":"IntArrayConstraintTest::::notEmpty()","79":"IntArrayConstraintTest::::notEmpty()","80":"IntArrayConstraintTest::::notEmpty()","81":"IntArrayConstraintTest::::notEmpty()","82":"IntArrayConstraintTest::::notEmpty()","83":"IntArrayConstraintTest::::notEmpty()","84":"IntArrayConstraintTest::::notEmpty()"},"tests":[{"test_lines":[27,33],"covered_lines":[27,36,37,39],"label":"IntArrayConstraint::::contains(int)"},{"test_lines":[35,42],"covered_lines":[27,32,44],"label":"IntArrayConstraint::::size()"},{"test_lines":[44,50],"covered_lines":[27,32,44],"label":"IntArrayConstraint::::size()"},{"test_lines":[52,59],"covered_lines":[27,32,44],"label":"IntArrayConstraint::::size()"},{"test_lines":[61,67],"covered_lines":[27,32,44],"label":"IntArrayConstraint::::size()"},{"test_lines":[69,76],"covered_lines":[27,32,44],"label":"IntArrayConstraint::::size()"},{"test_lines":[78,84],"covered_lines":[27,32,44],"label":"IntArrayConstraint::::size()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/constraint/array/LongArrayConstraint.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import java.util.Arrays;\n","import java.util.function.ToIntFunction;\n","\n","import static am.ik.yavi.core.NullAs.VALID;\n","import static am.ik.yavi.core.ViolationMessage.Default.ARRAY_CONTAINS;\n","\n","import am.ik.yavi.constraint.base.ContainerConstraintBase;\n","import am.ik.yavi.core.ConstraintPredicate;\n","\n","public class LongArrayConstraint<T>\n","\t\textends ContainerConstraintBase<T, long[], LongArrayConstraint<T>> {\n","\n","\t@Override\n","\tpublic LongArrayConstraint<T> cast() {\n","\t\treturn this;\n","\t}\n","\n","\tpublic LongArrayConstraint<T> contains(long v) {\n","\t\tthis.predicates()\n","\t\t\t\t.add(ConstraintPredicate.of(x -> Arrays.stream(x).anyMatch(e -> e == v),\n","\t\t\t\t\t\tARRAY_CONTAINS, () -> new Object[] { v }, VALID));\n","\t\treturn this;\n","\t}\n","\n","\t@Override\n","\tprotected ToIntFunction<long[]> size() {\n","\t\treturn x -> x.length;\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.constraint.array;\n","\n","import java.util.function.Predicate;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class LongArrayConstraintTest {\n","\tprivate LongArrayConstraint<long[]> constraint = new LongArrayConstraint<>();\n","\n","\t@Test\n","\tvoid contains() {\n","\t\tPredicate<long[]> predicate = constraint.contains(100L).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new long[] { 100L, 101L })).isTrue();\n","\t\tassertThat(predicate.test(new long[] { 101L, 102L })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid fixedSize() {\n","\t\tPredicate<long[]> predicate = constraint.fixedSize(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new long[] { 100L })).isFalse();\n","\t\tassertThat(predicate.test(new long[] { 100L, 101L })).isTrue();\n","\t\tassertThat(predicate.test(new long[] { 100L, 101L, 102L })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThan() {\n","\t\tPredicate<long[]> predicate = constraint.greaterThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new long[] { 100L, 101L })).isFalse();\n","\t\tassertThat(predicate.test(new long[] { 100L, 101L, 102L })).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid greaterThanOrEqual() {\n","\t\tPredicate<long[]> predicate = constraint.greaterThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new long[] { 100L })).isFalse();\n","\t\tassertThat(predicate.test(new long[] { 100L, 101L })).isTrue();\n","\t\tassertThat(predicate.test(new long[] { 100L, 101L, 102L })).isTrue();\n","\t}\n","\n","\t@Test\n","\tvoid lessThan() {\n","\t\tPredicate<long[]> predicate = constraint.lessThan(2).predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new long[] { 100L })).isTrue();\n","\t\tassertThat(predicate.test(new long[] { 100L, 101L })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid lessThanOrEqual() {\n","\t\tPredicate<long[]> predicate = constraint.lessThanOrEqual(2).predicates()\n","\t\t\t\t.peekFirst().predicate();\n","\t\tassertThat(predicate.test(new long[] { 100L })).isTrue();\n","\t\tassertThat(predicate.test(new long[] { 100L, 101L })).isTrue();\n","\t\tassertThat(predicate.test(new long[] { 100L, 101L, 102L })).isFalse();\n","\t}\n","\n","\t@Test\n","\tvoid notEmpty() {\n","\t\tPredicate<long[]> predicate = constraint.notEmpty().predicates().peekFirst()\n","\t\t\t\t.predicate();\n","\t\tassertThat(predicate.test(new long[] { 100L })).isTrue();\n","\t\tassertThat(predicate.test(new long[] {})).isFalse();\n","\t}\n","}\n"],"method_lines_dic":{"LongArrayConstraint::::cast()":[30,33],"LongArrayConstraint::::contains(long)":[35,40],"LongArrayConstraint::::size()":[42,45]},"test_method_lines_dic":{"LongArrayConstraintTest::::contains()":[27,33],"LongArrayConstraintTest::::fixedSize()":[35,42],"LongArrayConstraintTest::::greaterThan()":[44,50],"LongArrayConstraintTest::::greaterThanOrEqual()":[52,59],"LongArrayConstraintTest::::lessThan()":[61,67],"LongArrayConstraintTest::::lessThanOrEqual()":[69,76],"LongArrayConstraintTest::::notEmpty()":[78,84]},"reverse_method_lines_dic":{"30":"LongArrayConstraint::::cast()","31":"LongArrayConstraint::::cast()","32":"LongArrayConstraint::::cast()","33":"LongArrayConstraint::::cast()","35":"LongArrayConstraint::::contains(long)","36":"LongArrayConstraint::::contains(long)","37":"LongArrayConstraint::::contains(long)","38":"LongArrayConstraint::::contains(long)","39":"LongArrayConstraint::::contains(long)","40":"LongArrayConstraint::::contains(long)","42":"LongArrayConstraint::::size()","43":"LongArrayConstraint::::size()","44":"LongArrayConstraint::::size()","45":"LongArrayConstraint::::size()"},"test_reverse_method_lines_dic":{"27":"LongArrayConstraintTest::::contains()","28":"LongArrayConstraintTest::::contains()","29":"LongArrayConstraintTest::::contains()","30":"LongArrayConstraintTest::::contains()","31":"LongArrayConstraintTest::::contains()","32":"LongArrayConstraintTest::::contains()","33":"LongArrayConstraintTest::::contains()","35":"LongArrayConstraintTest::::fixedSize()","36":"LongArrayConstraintTest::::fixedSize()","37":"LongArrayConstraintTest::::fixedSize()","38":"LongArrayConstraintTest::::fixedSize()","39":"LongArrayConstraintTest::::fixedSize()","40":"LongArrayConstraintTest::::fixedSize()","41":"LongArrayConstraintTest::::fixedSize()","42":"LongArrayConstraintTest::::fixedSize()","44":"LongArrayConstraintTest::::greaterThan()","45":"LongArrayConstraintTest::::greaterThan()","46":"LongArrayConstraintTest::::greaterThan()","47":"LongArrayConstraintTest::::greaterThan()","48":"LongArrayConstraintTest::::greaterThan()","49":"LongArrayConstraintTest::::greaterThan()","50":"LongArrayConstraintTest::::greaterThan()","52":"LongArrayConstraintTest::::greaterThanOrEqual()","53":"LongArrayConstraintTest::::greaterThanOrEqual()","54":"LongArrayConstraintTest::::greaterThanOrEqual()","55":"LongArrayConstraintTest::::greaterThanOrEqual()","56":"LongArrayConstraintTest::::greaterThanOrEqual()","57":"LongArrayConstraintTest::::greaterThanOrEqual()","58":"LongArrayConstraintTest::::greaterThanOrEqual()","59":"LongArrayConstraintTest::::greaterThanOrEqual()","61":"LongArrayConstraintTest::::lessThan()","62":"LongArrayConstraintTest::::lessThan()","63":"LongArrayConstraintTest::::lessThan()","64":"LongArrayConstraintTest::::lessThan()","65":"LongArrayConstraintTest::::lessThan()","66":"LongArrayConstraintTest::::lessThan()","67":"LongArrayConstraintTest::::lessThan()","69":"LongArrayConstraintTest::::lessThanOrEqual()","70":"LongArrayConstraintTest::::lessThanOrEqual()","71":"LongArrayConstraintTest::::lessThanOrEqual()","72":"LongArrayConstraintTest::::lessThanOrEqual()","73":"LongArrayConstraintTest::::lessThanOrEqual()","74":"LongArrayConstraintTest::::lessThanOrEqual()","75":"LongArrayConstraintTest::::lessThanOrEqual()","76":"LongArrayConstraintTest::::lessThanOrEqual()","78":"LongArrayConstraintTest::::notEmpty()","79":"LongArrayConstraintTest::::notEmpty()","80":"LongArrayConstraintTest::::notEmpty()","81":"LongArrayConstraintTest::::notEmpty()","82":"LongArrayConstraintTest::::notEmpty()","83":"LongArrayConstraintTest::::notEmpty()","84":"LongArrayConstraintTest::::notEmpty()"},"tests":[{"test_lines":[27,33],"covered_lines":[27,36,37,39],"label":"LongArrayConstraint::::contains(long)"},{"test_lines":[35,42],"covered_lines":[27,32,44],"label":"LongArrayConstraint::::size()"},{"test_lines":[44,50],"covered_lines":[27,32,44],"label":"LongArrayConstraint::::size()"},{"test_lines":[52,59],"covered_lines":[27,32,44],"label":"LongArrayConstraint::::size()"},{"test_lines":[61,67],"covered_lines":[27,32,44],"label":"LongArrayConstraint::::size()"},{"test_lines":[69,76],"covered_lines":[27,32,44],"label":"LongArrayConstraint::::size()"},{"test_lines":[78,84],"covered_lines":[27,32,44],"label":"LongArrayConstraint::::size()"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/fn/Functions.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.fn;\n","\n","/**\n"," * Generated by\n"," * https://github.com/making/yavi/blob/develop/scripts/generate-applicative.sh\n"," *\n"," * @since 0.6.0\n"," */\n","public class Functions {\n","\tpublic static <T1, R> Function1<T1, R> curry(Function1<T1, R> f) {\n","\t\treturn t1 -> f.apply(t1);\n","\t}\n","\n","\tpublic static <T1, T2, R> Function1<T1, Function1<T2, R>> curry(\n","\t\t\tFunction2<T1, T2, R> f) {\n","\t\treturn t1 -> t2 -> f.apply(t1, t2);\n","\t}\n","\n","\tpublic static <T1, T2, T3, R> Function1<T1, Function1<T2, Function1<T3, R>>> curry(\n","\t\t\tFunction3<T1, T2, T3, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> f.apply(t1, t2, t3);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, R>>>> curry(\n","\t\t\tFunction4<T1, T2, T3, T4, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> f.apply(t1, t2, t3, t4);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, R>>>>> curry(\n","\t\t\tFunction5<T1, T2, T3, T4, T5, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> f.apply(t1, t2, t3, t4, t5);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, R>>>>>> curry(\n","\t\t\tFunction6<T1, T2, T3, T4, T5, T6, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> f.apply(t1, t2, t3, t4, t5, t6);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, T7, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, Function1<T7, R>>>>>>> curry(\n","\t\t\tFunction7<T1, T2, T3, T4, T5, T6, T7, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> f.apply(t1, t2, t3, t4, t5, t6,\n","\t\t\t\tt7);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, T7, T8, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, Function1<T7, Function1<T8, R>>>>>>>> curry(\n","\t\t\tFunction8<T1, T2, T3, T4, T5, T6, T7, T8, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> t8 -> f.apply(t1, t2, t3, t4, t5,\n","\t\t\t\tt6, t7, t8);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, T7, T8, T9, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, Function1<T7, Function1<T8, Function1<T9, R>>>>>>>>> curry(\n","\t\t\tFunction9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> t8 -> t9 -> f.apply(t1, t2, t3,\n","\t\t\t\tt4, t5, t6, t7, t8, t9);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, Function1<T7, Function1<T8, Function1<T9, Function1<T10, R>>>>>>>>>> curry(\n","\t\t\tFunction10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> t8 -> t9 -> t10 -> f.apply(t1,\n","\t\t\t\tt2, t3, t4, t5, t6, t7, t8, t9, t10);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, Function1<T7, Function1<T8, Function1<T9, Function1<T10, Function1<T11, R>>>>>>>>>>> curry(\n","\t\t\tFunction11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> t8 -> t9 -> t10 -> t11 -> f\n","\t\t\t\t.apply(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, Function1<T7, Function1<T8, Function1<T9, Function1<T10, Function1<T11, Function1<T12, R>>>>>>>>>>>> curry(\n","\t\t\tFunction12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> t8 -> t9 -> t10 -> t11 -> t12 -> f\n","\t\t\t\t.apply(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, Function1<T7, Function1<T8, Function1<T9, Function1<T10, Function1<T11, Function1<T12, Function1<T13, R>>>>>>>>>>>>> curry(\n","\t\t\tFunction13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> t8 -> t9 -> t10 -> t11 -> t12 -> t13 -> f\n","\t\t\t\t.apply(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, Function1<T7, Function1<T8, Function1<T9, Function1<T10, Function1<T11, Function1<T12, Function1<T13, Function1<T14, R>>>>>>>>>>>>>> curry(\n","\t\t\tFunction14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> t8 -> t9 -> t10 -> t11 -> t12 -> t13 -> t14 -> f\n","\t\t\t\t.apply(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, Function1<T7, Function1<T8, Function1<T9, Function1<T10, Function1<T11, Function1<T12, Function1<T13, Function1<T14, Function1<T15, R>>>>>>>>>>>>>>> curry(\n","\t\t\tFunction15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> t8 -> t9 -> t10 -> t11 -> t12 -> t13 -> t14 -> t15 -> f\n","\t\t\t\t.apply(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15);\n","\t}\n","\n","\tpublic static <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R> Function1<T1, Function1<T2, Function1<T3, Function1<T4, Function1<T5, Function1<T6, Function1<T7, Function1<T8, Function1<T9, Function1<T10, Function1<T11, Function1<T12, Function1<T13, Function1<T14, Function1<T15, Function1<T16, R>>>>>>>>>>>>>>>> curry(\n","\t\t\tFunction16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R> f) {\n","\t\treturn t1 -> t2 -> t3 -> t4 -> t5 -> t6 -> t7 -> t8 -> t9 -> t10 -> t11 -> t12 -> t13 -> t14 -> t15 -> t16 -> f\n","\t\t\t\t.apply(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15,\n","\t\t\t\t\t\tt16);\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.fn;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class FunctionsTest {\n","\n","\t@Test\n","\tvoid curry() {\n","\t\tfinal Function2<Integer, Integer, Integer> add = (x, y) -> x + y;\n","\t\tfinal Function1<Integer, Integer> add10 = Functions.curry(add).apply(10);\n","\t\tfinal Integer result = add10.apply(2);\n","\t\tassertThat(result).isEqualTo(12);\n","\t}\n","}"],"method_lines_dic":{"Functions::::curry(am.ik.yavi.fn.Function1<T1, R>)":[25,27],"Functions::::curry(am.ik.yavi.fn.Function2<T1, T2, R>)":[29,32],"Functions::::curry(am.ik.yavi.fn.Function3<T1, T2, T3, R>)":[34,37],"Functions::::curry(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>)":[39,42],"Functions::::curry(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>)":[44,47],"Functions::::curry(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>)":[49,52],"Functions::::curry(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>)":[54,58],"Functions::::curry(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>)":[60,64],"Functions::::curry(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>)":[66,70],"Functions::::curry(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>)":[72,76],"Functions::::curry(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>)":[78,82],"Functions::::curry(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>)":[84,88],"Functions::::curry(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>)":[90,94],"Functions::::curry(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>)":[96,100],"Functions::::curry(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>)":[102,106],"Functions::::curry(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>)":[108,113]},"test_method_lines_dic":{"FunctionsTest::::curry()":[24,30]},"reverse_method_lines_dic":{"25":"Functions::::curry(am.ik.yavi.fn.Function1<T1, R>)","26":"Functions::::curry(am.ik.yavi.fn.Function1<T1, R>)","27":"Functions::::curry(am.ik.yavi.fn.Function1<T1, R>)","29":"Functions::::curry(am.ik.yavi.fn.Function2<T1, T2, R>)","30":"Functions::::curry(am.ik.yavi.fn.Function2<T1, T2, R>)","31":"Functions::::curry(am.ik.yavi.fn.Function2<T1, T2, R>)","32":"Functions::::curry(am.ik.yavi.fn.Function2<T1, T2, R>)","34":"Functions::::curry(am.ik.yavi.fn.Function3<T1, T2, T3, R>)","35":"Functions::::curry(am.ik.yavi.fn.Function3<T1, T2, T3, R>)","36":"Functions::::curry(am.ik.yavi.fn.Function3<T1, T2, T3, R>)","37":"Functions::::curry(am.ik.yavi.fn.Function3<T1, T2, T3, R>)","39":"Functions::::curry(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>)","40":"Functions::::curry(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>)","41":"Functions::::curry(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>)","42":"Functions::::curry(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>)","44":"Functions::::curry(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>)","45":"Functions::::curry(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>)","46":"Functions::::curry(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>)","47":"Functions::::curry(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>)","49":"Functions::::curry(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>)","50":"Functions::::curry(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>)","51":"Functions::::curry(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>)","52":"Functions::::curry(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>)","54":"Functions::::curry(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>)","55":"Functions::::curry(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>)","56":"Functions::::curry(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>)","57":"Functions::::curry(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>)","58":"Functions::::curry(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>)","60":"Functions::::curry(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>)","61":"Functions::::curry(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>)","62":"Functions::::curry(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>)","63":"Functions::::curry(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>)","64":"Functions::::curry(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>)","66":"Functions::::curry(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>)","67":"Functions::::curry(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>)","68":"Functions::::curry(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>)","69":"Functions::::curry(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>)","70":"Functions::::curry(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>)","72":"Functions::::curry(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>)","73":"Functions::::curry(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>)","74":"Functions::::curry(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>)","75":"Functions::::curry(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>)","76":"Functions::::curry(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>)","78":"Functions::::curry(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>)","79":"Functions::::curry(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>)","80":"Functions::::curry(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>)","81":"Functions::::curry(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>)","82":"Functions::::curry(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>)","84":"Functions::::curry(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>)","85":"Functions::::curry(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>)","86":"Functions::::curry(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>)","87":"Functions::::curry(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>)","88":"Functions::::curry(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>)","90":"Functions::::curry(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>)","91":"Functions::::curry(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>)","92":"Functions::::curry(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>)","93":"Functions::::curry(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>)","94":"Functions::::curry(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>)","96":"Functions::::curry(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>)","97":"Functions::::curry(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>)","98":"Functions::::curry(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>)","99":"Functions::::curry(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>)","100":"Functions::::curry(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>)","102":"Functions::::curry(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>)","103":"Functions::::curry(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>)","104":"Functions::::curry(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>)","105":"Functions::::curry(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>)","106":"Functions::::curry(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>)","108":"Functions::::curry(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>)","109":"Functions::::curry(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>)","110":"Functions::::curry(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>)","111":"Functions::::curry(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>)","112":"Functions::::curry(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>)","113":"Functions::::curry(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>)"},"test_reverse_method_lines_dic":{"24":"FunctionsTest::::curry()","25":"FunctionsTest::::curry()","26":"FunctionsTest::::curry()","27":"FunctionsTest::::curry()","28":"FunctionsTest::::curry()","29":"FunctionsTest::::curry()","30":"FunctionsTest::::curry()"},"tests":[{"test_lines":[24,30],"covered_lines":[31],"label":"Functions::::curry(am.ik.yavi.fn.Function2<T1, T2, R>)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/fn/Validation.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.fn;\n","\n","import java.io.Serializable;\n","import java.util.ArrayList;\n","import java.util.Arrays;\n","import java.util.Collections;\n","import java.util.List;\n","import java.util.NoSuchElementException;\n","import java.util.Objects;\n","import java.util.function.Consumer;\n","import java.util.function.Function;\n","\n","import am.ik.yavi.jsr305.Nullable;\n","\n","import static java.util.stream.Collectors.toList;\n","\n","/**\n"," * An implementation similar to Vavr's\n"," * <a href=\"https://docs.vavr.io/#_validation\">Validation</a> control.<br>\n"," * The Validation control is an applicative functor and facilitates accumulating errors.\n"," *\n"," * @param <E> value type in the case of failure\n"," * @param <T> value type in the case of success\n"," * @since 0.6.0\n"," */\n","public abstract class Validation<E, T> implements Serializable {\n","\tprivate static final long serialVersionUID = 1L;\n","\n","\tpublic abstract boolean isValid();\n","\n","\t/**\n","\t * Returns the value of this {@code Validation} if is a {@code Success} or throws if\n","\t * this is an {@code Failure}.\n","\t *\n","\t * @return The value of this {@code Validation}\n","\t * @throws NoSuchElementException if this is an {@code Failure} or the value is\n","\t *     {@code null}\n","\t */\n","\tpublic abstract T value();\n","\n","\t/**\n","\t * Returns the value of this {@code Validation} if is a {@code Success} or throws if\n","\t * this is an {@code Failure}. {@code null} can be returned.\n","\t *\n","\t * @return The value of this {@code Validation}\n","\t * @throws NoSuchElementException if this is an {@code Failure}.\n","\t */\n","\t@Nullable\n","\tpublic abstract T valueNullable();\n","\n","\t/**\n","\t * Returns the errors of this {@code Validation} if it is an {@code Failure} or throws\n","\t * if this is a {@code Success}.\n","\t *\n","\t * @return The errors, if present\n","\t * @throws NoSuchElementException if this is a {@code Success}\n","\t */\n","\tpublic abstract List<E> errors();\n","\n","\t@SuppressWarnings(\"unchecked\")\n","\tpublic <T2, V extends Validation<E, T2>> V map(\n","\t\t\tFunction<? super T, ? extends T2> mapper) {\n","\t\treturn isValid() ? this.yieldSuccess(mapper.apply(value())) : (V) this;\n","\t}\n","\n","\t@SuppressWarnings(\"unchecked\")\n","\tpublic <T2, V extends Validation<E, T2>> V flatMap(Function<? super T, V> mapper) {\n","\t\treturn isValid() ? mapper.apply(value()) : (V) this;\n","\t}\n","\n","\tpublic Validation<E, T> peek(Consumer<? super T> consumer) {\n","\t\tif (isValid()) {\n","\t\t\tconsumer.accept(value());\n","\t\t}\n","\t\treturn this;\n","\t}\n","\n","\t@SuppressWarnings(\"unchecked\")\n","\tpublic <E2> Validation<E2, T> mapErrors(\n","\t\t\tFunction<? super List<E>, ? extends List<E2>> errorsMapper) {\n","\t\treturn isValid() ? (Validation<E2, T>) this\n","\t\t\t\t: Validation.failure(errorsMapper.apply(errors()));\n","\t}\n","\n","\t/**\n","\t * @since 0.8.2\n","\t */\n","\t@SuppressWarnings(\"unchecked\")\n","\tpublic <E2> Validation<E2, T> mapError(\n","\t\t\tFunction<? super E, ? extends E2> errorMapper) {\n","\t\treturn isValid() ? (Validation<E2, T>) this\n","\t\t\t\t: Validation\n","\t\t\t\t\t\t.failure(errors().stream().map(errorMapper).collect(toList()));\n","\t}\n","\n","\tpublic <E2, T2> Validation<E2, T2> bimap(\n","\t\t\tFunction<? super List<E>, ? extends List<E2>> errorsMapper,\n","\t\t\tFunction<? super T, ? extends T2> mapper) {\n","\t\treturn isValid() ? Validation.success(mapper.apply(value()))\n","\t\t\t\t: Validation.failure(errorsMapper.apply(errors()));\n","\t}\n","\n","\tpublic Validation<E, T> peekErrors(Consumer<? super List<E>> consumer) {\n","\t\tif (!isValid()) {\n","\t\t\tconsumer.accept(errors());\n","\t\t}\n","\t\treturn this;\n","\t}\n","\n","\tpublic <X extends Throwable> T orElseThrow(\n","\t\t\tFunction<? super List<E>, ? extends X> exceptionMapper) throws X {\n","\t\tif (isValid()) {\n","\t\t\treturn value();\n","\t\t}\n","\t\telse {\n","\t\t\tthrow exceptionMapper.apply(errors());\n","\t\t}\n","\t}\n","\n","\t/**\n","\t * @since 0.10.0\n","\t */\n","\tpublic <X extends Throwable> void throwIfInvalid(\n","\t\t\tFunction<? super List<E>, ? extends X> exceptionMapper) throws X {\n","\t\tif (!isValid()) {\n","\t\t\tthrow exceptionMapper.apply(errors());\n","\t\t}\n","\t}\n","\n","\tpublic T orElseGet(Function<? super List<E>, ? extends T> other) {\n","\t\tif (isValid()) {\n","\t\t\treturn value();\n","\t\t}\n","\t\telse {\n","\t\t\treturn other.apply(errors());\n","\t\t}\n","\t}\n","\n","\tpublic <U> U fold(Function<? super List<E>, ? extends U> errorsMapper,\n","\t\t\tFunction<? super T, ? extends U> mapper) {\n","\t\treturn isValid() ? mapper.apply(value()) : errorsMapper.apply(errors());\n","\t}\n","\n","\t@SuppressWarnings(\"unchecked\")\n","\tprotected <U, V extends Validation<E, U>> V yieldSuccess(@Nullable U value) {\n","\t\treturn (V) Validation.success(value);\n","\t}\n","\n","\t@SuppressWarnings(\"unchecked\")\n","\tprotected <U, V extends Validation<E, U>> V yieldFailure(List<E> errors) {\n","\t\treturn (V) Validation.failure(errors);\n","\t}\n","\n","\tpublic <U, V extends Validation<E, U>> V apply(\n","\t\t\tValidation<E, ? extends Function1<? super T, ? extends U>> validation) {\n","\t\tif (isValid()) {\n","\t\t\tif (validation.isValid()) {\n","\t\t\t\tfinal Function1<? super T, ? extends U> f = validation.valueNullable();\n","\t\t\t\tfinal U u = f == null ? null : f.apply(this.valueNullable());\n","\t\t\t\treturn this.yieldSuccess(u);\n","\t\t\t}\n","\t\t\telse {\n","\t\t\t\tfinal List<E> errors = validation.errors();\n","\t\t\t\treturn this.yieldFailure(errors);\n","\t\t\t}\n","\t\t}\n","\t\telse {\n","\t\t\tfinal List<E> errors = this.errors();\n","\t\t\tif (validation.isValid()) {\n","\t\t\t\treturn this.yieldFailure(errors);\n","\t\t\t}\n","\t\t\telse {\n","\t\t\t\tfinal List<E> errorsList = new ArrayList<>(validation.errors());\n","\t\t\t\terrorsList.addAll(errors);\n","\t\t\t\treturn this.yieldFailure(errorsList);\n","\t\t\t}\n","\t\t}\n","\t}\n","\n","\tpublic <T2> Combining2<E, T, T2> combine(Validation<E, T2> validation) {\n","\t\treturn new Combining2<>(this, validation);\n","\t}\n","\n","\tpublic static <E, T> Validation<E, T> success(@Nullable T value) {\n","\t\treturn new Success<>(value);\n","\t}\n","\n","\tpublic static <E, T> Validation<E, T> failure(List<E> errors) {\n","\t\treturn new Failure<>(errors);\n","\t}\n","\n","\t@SuppressWarnings(\"unchecked\")\n","\tpublic static <E, T> Validation<E, T> failure(E... errors) {\n","\t\treturn new Failure<>(Arrays.asList(errors));\n","\t}\n","\n","\tpublic static class Success<E, T> extends Validation<E, T> {\n","\t\tprivate static final long serialVersionUID = 1L;\n","\n","\t\tpublic final T value;\n","\n","\t\tSuccess(@Nullable T value) {\n","\t\t\tthis.value = value;\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic boolean isValid() {\n","\t\t\treturn true;\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic T value() {\n","\t\t\tif (this.value == null) {\n","\t\t\t\tthrow new NoSuchElementException(\"'value' is null.\");\n","\t\t\t}\n","\t\t\treturn this.value;\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic T valueNullable() {\n","\t\t\treturn this.value;\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic List<E> errors() throws RuntimeException {\n","\t\t\tthrow new NoSuchElementException(\n","\t\t\t\t\t\"errors of 'Success' Validation does not exist.\");\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic boolean equals(Object o) {\n","\t\t\tif (this == o)\n","\t\t\t\treturn true;\n","\t\t\tif (o == null || getClass() != o.getClass())\n","\t\t\t\treturn false;\n","\t\t\tSuccess<?, ?> success = (Success<?, ?>) o;\n","\t\t\treturn Objects.equals(value, success.value);\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic int hashCode() {\n","\t\t\treturn Objects.hash(value);\n","\t\t}\n","\t}\n","\n","\tpublic static class Failure<E, T> extends Validation<E, T> {\n","\t\tprivate static final long serialVersionUID = 1L;\n","\n","\t\tprivate final List<E> errors;\n","\n","\t\tFailure(List<E> errors) {\n","\t\t\tif (errors == null) {\n","\t\t\t\tthrow new IllegalArgumentException(\"'errors' must not be null.\");\n","\t\t\t}\n","\t\t\tif (errors.isEmpty()) {\n","\t\t\t\tthrow new IllegalArgumentException(\"'errors' must not be empty.\");\n","\t\t\t}\n","\t\t\tthis.errors = Collections.unmodifiableList(errors);\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic boolean isValid() {\n","\t\t\treturn false;\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic T value() {\n","\t\t\tthrow new NoSuchElementException(\n","\t\t\t\t\t\"value of 'Failure' Validation does not exists. Errors=\" + errors);\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic T valueNullable() {\n","\t\t\treturn this.value();\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic List<E> errors() {\n","\t\t\treturn this.errors;\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic boolean equals(Object o) {\n","\t\t\tif (this == o)\n","\t\t\t\treturn true;\n","\t\t\tif (o == null || getClass() != o.getClass())\n","\t\t\t\treturn false;\n","\t\t\tFailure<?, ?> failure = (Failure<?, ?>) o;\n","\t\t\treturn errors.equals(failure.errors);\n","\t\t}\n","\n","\t\t@Override\n","\t\tpublic int hashCode() {\n","\t\t\treturn Objects.hash(errors);\n","\t\t}\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.fn;\n","\n","import java.util.Arrays;\n","import java.util.List;\n","import java.util.NoSuchElementException;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static java.util.stream.Collectors.toList;\n","import static org.assertj.core.api.Assertions.assertThat;\n","import static org.assertj.core.api.Assertions.assertThatThrownBy;\n","\n","class ValidationTest {\n","\n","\t@Test\n","\tvoid success() {\n","\t\tfinal Validation<String, String> validation = Validation.success(\"test\");\n","\t\tassertThat(validation.isValid()).isTrue();\n","\t\tassertThat(validation.value()).isEqualTo(\"test\");\n","\t\tassertThatThrownBy(validation::errors).isInstanceOf(NoSuchElementException.class);\n","\t\tassertThat(validation.map(String::toUpperCase).value()).isEqualTo(\"TEST\");\n","\t\tassertThat(validation\n","\t\t\t\t.mapErrors(x -> x.stream().map(String::toUpperCase).collect(toList()))\n","\t\t\t\t.value()).isEqualTo(\"test\");\n","\t\tassertThat(validation.flatMap(s -> Validation.success(\"hello \" + s)).value())\n","\t\t\t\t.isEqualTo(\"hello test\");\n","\t\tassertThat(validation).isEqualTo(Validation.success(\"test\"));\n","\t\tassertThat(validation.hashCode())\n","\t\t\t\t.isEqualTo(Validation.success(\"test\").hashCode());\n","\t}\n","\n","\t@Test\n","\tvoid failure() {\n","\t\tfinal Validation<String, String> validation = Validation.failure(\"errors1\",\n","\t\t\t\t\"errors2\");\n","\t\tassertThat(validation.isValid()).isFalse();\n","\t\tassertThatThrownBy(validation::value).isInstanceOf(NoSuchElementException.class);\n","\t\tassertThat(validation.errors()).isEqualTo(Arrays.asList(\"errors1\", \"errors2\"));\n","\t\tassertThat(validation.map(String::toUpperCase).errors())\n","\t\t\t\t.isEqualTo(Arrays.asList(\"errors1\", \"errors2\"));\n","\t\tassertThat(validation\n","\t\t\t\t.mapErrors(x -> x.stream().map(String::toUpperCase).collect(toList()))\n","\t\t\t\t.errors()).isEqualTo(Arrays.asList(\"ERRORS1\", \"ERRORS2\"));\n","\t\tassertThat(validation.flatMap(s -> Validation.success(\"hello \" + s)).errors())\n","\t\t\t\t.isEqualTo(Arrays.asList(\"errors1\", \"errors2\"));\n","\t\tassertThat(validation).isEqualTo(Validation.failure(\"errors1\", \"errors2\"));\n","\t\tassertThat(validation.hashCode())\n","\t\t\t\t.isEqualTo(Validation.failure(\"errors1\", \"errors2\").hashCode());\n","\t}\n","\n","\t@Test\n","\tvoid foldSuccess() {\n","\t\tfinal Validation<String, String> validation = Validation.success(\"test\");\n","\t\tfinal String fold = validation.fold(e -> String.join(\",\", e),\n","\t\t\t\tString::toUpperCase);\n","\t\tassertThat(fold).isEqualTo(\"TEST\");\n","\t}\n","\n","\t@Test\n","\tvoid foldFailure() {\n","\t\tfinal Validation<String, String> validation = Validation.failure(\"errors1\",\n","\t\t\t\t\"errors2\");\n","\t\tfinal String fold = validation.fold(e -> String.join(\",\", e),\n","\t\t\t\tString::toUpperCase);\n","\t\tassertThat(fold).isEqualTo(\"errors1,errors2\");\n","\t}\n","\n","\t@Test\n","\tvoid bimapSuccess() {\n","\t\tfinal Validation<String, String> validation = Validation.success(\"test\");\n","\t\tfinal Validation<String, String> bimap = validation.bimap(\n","\t\t\t\terrors -> errors.stream().map(String::toUpperCase).collect(toList()),\n","\t\t\t\tString::toUpperCase);\n","\t\tassertThat(bimap.isValid()).isTrue();\n","\t\tassertThat(bimap.value()).isEqualTo(\"TEST\");\n","\t}\n","\n","\t@Test\n","\tvoid bimapFailure() {\n","\t\tfinal Validation<String, String> validation = Validation.failure(\"errors1\",\n","\t\t\t\t\"errors2\");\n","\t\tfinal Validation<String, String> bimap = validation.bimap(\n","\t\t\t\terrors -> errors.stream().map(String::toUpperCase).collect(toList()),\n","\t\t\t\tString::toUpperCase);\n","\t\tassertThat(bimap.isValid()).isFalse();\n","\t\tassertThat(bimap.errors()).isEqualTo(Arrays.asList(\"ERRORS1\", \"ERRORS2\"));\n","\t}\n","\n","\t@Test\n","\tvoid combine_all_valid() {\n","\t\tfinal Validation<String, String> v1 = Validation.success(\"s1\");\n","\t\tfinal Validation<String, String> v2 = Validation.success(\"s2\");\n","\t\tfinal Validation<String, String> v3 = Validation.success(\"s3\");\n","\t\tfinal Validation<String, String> v4 = Validation.success(\"s4\");\n","\t\tfinal Validation<String, String> v5 = Validation.success(\"s5\");\n","\t\tfinal Validation<String, String> v6 = Validation.success(\"s6\");\n","\t\tfinal Validation<String, String> v7 = Validation.success(\"s7\");\n","\t\tfinal Validation<String, String> v8 = Validation.success(\"s8\");\n","\t\tfinal Validation<String, String> v9 = Validation.success(\"s9\");\n","\t\tfinal Validation<String, String> v10 = Validation.success(\"s10\");\n","\n","\t\tfinal Validation<String, String> validation = v1.combine(v2).combine(v3)\n","\t\t\t\t.combine(v4).combine(v5).combine(v6).combine(v7).combine(v8).combine(v9)\n","\t\t\t\t.combine(v10).apply((s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) -> String\n","\t\t\t\t\t\t.join(\", \", s1, s2, s3, s4, s5, s6, s7, s8, s9, s10));\n","\t\tassertThat(validation.isValid()).isTrue();\n","\t\tassertThat(validation.value())\n","\t\t\t\t.isEqualTo(\"s1, s2, s3, s4, s5, s6, s7, s8, s9, s10\");\n","\t}\n","\n","\t@Test\n","\tvoid combine_all_invalid() {\n","\t\tfinal Validation<String, String> v1 = Validation.failure(\"f1\");\n","\t\tfinal Validation<String, String> v2 = Validation.failure(\"f2\");\n","\t\tfinal Validation<String, String> v3 = Validation.failure(\"f3\");\n","\t\tfinal Validation<String, String> v4 = Validation.failure(\"f4\");\n","\t\tfinal Validation<String, String> v5 = Validation.failure(\"f5\");\n","\t\tfinal Validation<String, String> v6 = Validation.failure(\"f6\");\n","\t\tfinal Validation<String, String> v7 = Validation.failure(\"f7\");\n","\t\tfinal Validation<String, String> v8 = Validation.failure(\"f8\");\n","\t\tfinal Validation<String, String> v9 = Validation.failure(\"f9\");\n","\t\tfinal Validation<String, String> v10 = Validation.failure(\"f10\");\n","\n","\t\tfinal Validation<String, String> validation = v1.combine(v2).combine(v3)\n","\t\t\t\t.combine(v4).combine(v5).combine(v6).combine(v7).combine(v8).combine(v9)\n","\t\t\t\t.combine(v10).apply((s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) -> String\n","\t\t\t\t\t\t.join(\", \", s1, s2, s3, s4, s5, s6, s7, s8, s9, s10));\n","\n","\t\tassertThat(validation.isValid()).isFalse();\n","\t\tassertThat(validation.errors()).containsExactly(\"f1\", \"f2\", \"f3\", \"f4\", \"f5\",\n","\t\t\t\t\"f6\", \"f7\", \"f8\", \"f9\", \"f10\");\n","\t}\n","\n","\t@Test\n","\tvoid combine_first_invalid() {\n","\t\tfinal Validation<String, String> v1 = Validation.failure(\"f1\");\n","\t\tfinal Validation<String, String> v2 = Validation.success(\"s2\");\n","\t\tfinal Validation<String, String> v3 = Validation.success(\"s3\");\n","\t\tfinal Validation<String, String> v4 = Validation.success(\"s4\");\n","\t\tfinal Validation<String, String> v5 = Validation.success(\"s5\");\n","\t\tfinal Validation<String, String> v6 = Validation.success(\"s6\");\n","\t\tfinal Validation<String, String> v7 = Validation.success(\"s7\");\n","\t\tfinal Validation<String, String> v8 = Validation.success(\"s8\");\n","\t\tfinal Validation<String, String> v9 = Validation.success(\"s9\");\n","\t\tfinal Validation<String, String> v10 = Validation.success(\"s10\");\n","\n","\t\tfinal Validation<String, String> validation = v1.combine(v2).combine(v3)\n","\t\t\t\t.combine(v4).combine(v5).combine(v6).combine(v7).combine(v8).combine(v9)\n","\t\t\t\t.combine(v10).apply((s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) -> String\n","\t\t\t\t\t\t.join(\", \", s1, s2, s3, s4, s5, s6, s7, s8, s9, s10));\n","\n","\t\tassertThat(validation.isValid()).isFalse();\n","\t\tassertThat(validation.errors()).containsExactly(\"f1\");\n","\t}\n","\n","\t@Test\n","\tvoid combine_last_invalid() {\n","\t\tfinal Validation<String, String> v1 = Validation.success(\"s1\");\n","\t\tfinal Validation<String, String> v2 = Validation.success(\"s2\");\n","\t\tfinal Validation<String, String> v3 = Validation.success(\"s3\");\n","\t\tfinal Validation<String, String> v4 = Validation.success(\"s4\");\n","\t\tfinal Validation<String, String> v5 = Validation.success(\"s5\");\n","\t\tfinal Validation<String, String> v6 = Validation.success(\"s6\");\n","\t\tfinal Validation<String, String> v7 = Validation.success(\"s7\");\n","\t\tfinal Validation<String, String> v8 = Validation.success(\"s8\");\n","\t\tfinal Validation<String, String> v9 = Validation.success(\"s9\");\n","\t\tfinal Validation<String, String> v10 = Validation.failure(\"f10\");\n","\n","\t\tfinal Validation<String, String> validation = v1.combine(v2).combine(v3)\n","\t\t\t\t.combine(v4).combine(v5).combine(v6).combine(v7).combine(v8).combine(v9)\n","\t\t\t\t.combine(v10).apply((s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) -> String\n","\t\t\t\t\t\t.join(\", \", s1, s2, s3, s4, s5, s6, s7, s8, s9, s10));\n","\n","\t\tassertThat(validation.isValid()).isFalse();\n","\t\tassertThat(validation.errors()).containsExactly(\"f10\");\n","\t}\n","\n","\t@Test\n","\tvoid orElseThrowSuccess() {\n","\t\tfinal String s = Validation.<String, String> success(\"test\")\n","\t\t\t\t.orElseThrow(errors -> new IllegalArgumentException(\"errors=\" + errors));\n","\t\tassertThat(s).isEqualTo(\"test\");\n","\t}\n","\n","\t@Test\n","\tvoid orElseThrowFailure() {\n","\t\tassertThatThrownBy(() -> Validation\n","\t\t\t\t.<String, String> failure(Arrays.asList(\"e1\", \"e2\"))\n","\t\t\t\t.orElseThrow(errors -> new IllegalArgumentException(\"errors=\" + errors)))\n","\t\t\t\t.hasMessage(\"errors=[e1, e2]\")\n","\t\t\t\t.isInstanceOf(IllegalArgumentException.class);\n","\t}\n","\n","\t@Test\n","\tvoid orElseGetSuccess() {\n","\t\tfinal String s = Validation.<String, String> success(\"test\")\n","\t\t\t\t.orElseGet(errors -> String.join(\",\", errors));\n","\t\tassertThat(s).isEqualTo(\"test\");\n","\t}\n","\n","\t@Test\n","\tvoid orElseGetFailure() {\n","\t\tfinal String s = Validation.<String, String> failure(\"e1\", \"e2\")\n","\t\t\t\t.orElseGet(errors -> String.join(\",\", errors));\n","\t\tassertThat(s).isEqualTo(\"e1,e2\");\n","\t}\n","}\n"],"method_lines_dic":{"Validation::::isValid()":[44,44],"Validation::::value()":[54,54],"Validation::::valueNullable()":[63,64],"Validation::::errors()":[73,73],"Validation::::map(java.util.function.Function<? super T, ? extends T2>)":[75,79],"Validation::::flatMap(java.util.function.Function<? super T, V>)":[81,84],"Validation::::peek(java.util.function.Consumer<? super T>)":[86,91],"Validation::::mapErrors(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>)":[93,98],"Validation::::mapError(java.util.function.Function<? super E, ? extends E2>)":[103,109],"Validation::::bimap(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>,java.util.function.Function<? super T, ? extends T2>)":[111,116],"Validation::::peekErrors(java.util.function.Consumer<? super java.util.List<E>>)":[118,123],"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)":[125,133],"Validation::::throwIfInvalid(java.util.function.Function<? super java.util.List<E>, ? extends X>)":[138,143],"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)":[145,152],"Validation::::fold(java.util.function.Function<? super java.util.List<E>, ? extends U>,java.util.function.Function<? super T, ? extends U>)":[154,157],"Validation::::yieldSuccess(U)":[159,162],"Validation::::yieldFailure(java.util.List<E>)":[164,167],"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)":[169,193],"Validation::::combine(am.ik.yavi.fn.Validation<E, T2>)":[195,197],"Validation::::success(T)":[199,201],"Validation::::failure(java.util.List<E>)":[203,205],"Validation::::failure(E[])":[207,210],"Validation.Success::::isValid()":[221,224],"Validation.Success::::value()":[226,232],"Validation.Success::::valueNullable()":[234,237],"Validation.Success::::errors()":[239,243],"Validation.Success::::equals(java.lang.Object)":[245,253],"Validation.Success::::hashCode()":[255,258],"Validation.Failure::::isValid()":[276,279],"Validation.Failure::::value()":[281,285],"Validation.Failure::::valueNullable()":[287,290],"Validation.Failure::::errors()":[292,295],"Validation.Failure::::equals(java.lang.Object)":[297,305],"Validation.Failure::::hashCode()":[307,310]},"test_method_lines_dic":{"ValidationTest::::success()":[30,45],"ValidationTest::::failure()":[47,64],"ValidationTest::::foldSuccess()":[66,72],"ValidationTest::::foldFailure()":[74,81],"ValidationTest::::bimapSuccess()":[83,91],"ValidationTest::::bimapFailure()":[93,102],"ValidationTest::::combine_all_valid()":[104,124],"ValidationTest::::combine_all_invalid()":[126,147],"ValidationTest::::combine_first_invalid()":[149,169],"ValidationTest::::combine_last_invalid()":[171,191],"ValidationTest::::orElseThrowSuccess()":[193,198],"ValidationTest::::orElseThrowFailure()":[200,207],"ValidationTest::::orElseGetSuccess()":[209,214],"ValidationTest::::orElseGetFailure()":[216,221]},"reverse_method_lines_dic":{"44":"Validation::::isValid()","54":"Validation::::value()","63":"Validation::::valueNullable()","64":"Validation::::valueNullable()","73":"Validation::::errors()","75":"Validation::::map(java.util.function.Function<? super T, ? extends T2>)","76":"Validation::::map(java.util.function.Function<? super T, ? extends T2>)","77":"Validation::::map(java.util.function.Function<? super T, ? extends T2>)","78":"Validation::::map(java.util.function.Function<? super T, ? extends T2>)","79":"Validation::::map(java.util.function.Function<? super T, ? extends T2>)","81":"Validation::::flatMap(java.util.function.Function<? super T, V>)","82":"Validation::::flatMap(java.util.function.Function<? super T, V>)","83":"Validation::::flatMap(java.util.function.Function<? super T, V>)","84":"Validation::::flatMap(java.util.function.Function<? super T, V>)","86":"Validation::::peek(java.util.function.Consumer<? super T>)","87":"Validation::::peek(java.util.function.Consumer<? super T>)","88":"Validation::::peek(java.util.function.Consumer<? super T>)","89":"Validation::::peek(java.util.function.Consumer<? super T>)","90":"Validation::::peek(java.util.function.Consumer<? super T>)","91":"Validation::::peek(java.util.function.Consumer<? super T>)","93":"Validation::::mapErrors(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>)","94":"Validation::::mapErrors(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>)","95":"Validation::::mapErrors(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>)","96":"Validation::::mapErrors(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>)","97":"Validation::::mapErrors(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>)","98":"Validation::::mapErrors(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>)","103":"Validation::::mapError(java.util.function.Function<? super E, ? extends E2>)","104":"Validation::::mapError(java.util.function.Function<? super E, ? extends E2>)","105":"Validation::::mapError(java.util.function.Function<? super E, ? extends E2>)","106":"Validation::::mapError(java.util.function.Function<? super E, ? extends E2>)","107":"Validation::::mapError(java.util.function.Function<? super E, ? extends E2>)","108":"Validation::::mapError(java.util.function.Function<? super E, ? extends E2>)","109":"Validation::::mapError(java.util.function.Function<? super E, ? extends E2>)","111":"Validation::::bimap(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>,java.util.function.Function<? super T, ? extends T2>)","112":"Validation::::bimap(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>,java.util.function.Function<? super T, ? extends T2>)","113":"Validation::::bimap(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>,java.util.function.Function<? super T, ? extends T2>)","114":"Validation::::bimap(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>,java.util.function.Function<? super T, ? extends T2>)","115":"Validation::::bimap(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>,java.util.function.Function<? super T, ? extends T2>)","116":"Validation::::bimap(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>,java.util.function.Function<? super T, ? extends T2>)","118":"Validation::::peekErrors(java.util.function.Consumer<? super java.util.List<E>>)","119":"Validation::::peekErrors(java.util.function.Consumer<? super java.util.List<E>>)","120":"Validation::::peekErrors(java.util.function.Consumer<? super java.util.List<E>>)","121":"Validation::::peekErrors(java.util.function.Consumer<? super java.util.List<E>>)","122":"Validation::::peekErrors(java.util.function.Consumer<? super java.util.List<E>>)","123":"Validation::::peekErrors(java.util.function.Consumer<? super java.util.List<E>>)","125":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)","126":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)","127":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)","128":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)","129":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)","130":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)","131":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)","132":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)","133":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)","138":"Validation::::throwIfInvalid(java.util.function.Function<? super java.util.List<E>, ? extends X>)","139":"Validation::::throwIfInvalid(java.util.function.Function<? super java.util.List<E>, ? extends X>)","140":"Validation::::throwIfInvalid(java.util.function.Function<? super java.util.List<E>, ? extends X>)","141":"Validation::::throwIfInvalid(java.util.function.Function<? super java.util.List<E>, ? extends X>)","142":"Validation::::throwIfInvalid(java.util.function.Function<? super java.util.List<E>, ? extends X>)","143":"Validation::::throwIfInvalid(java.util.function.Function<? super java.util.List<E>, ? extends X>)","145":"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)","146":"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)","147":"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)","148":"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)","149":"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)","150":"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)","151":"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)","152":"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)","154":"Validation::::fold(java.util.function.Function<? super java.util.List<E>, ? extends U>,java.util.function.Function<? super T, ? extends U>)","155":"Validation::::fold(java.util.function.Function<? super java.util.List<E>, ? extends U>,java.util.function.Function<? super T, ? extends U>)","156":"Validation::::fold(java.util.function.Function<? super java.util.List<E>, ? extends U>,java.util.function.Function<? super T, ? extends U>)","157":"Validation::::fold(java.util.function.Function<? super java.util.List<E>, ? extends U>,java.util.function.Function<? super T, ? extends U>)","159":"Validation::::yieldSuccess(U)","160":"Validation::::yieldSuccess(U)","161":"Validation::::yieldSuccess(U)","162":"Validation::::yieldSuccess(U)","164":"Validation::::yieldFailure(java.util.List<E>)","165":"Validation::::yieldFailure(java.util.List<E>)","166":"Validation::::yieldFailure(java.util.List<E>)","167":"Validation::::yieldFailure(java.util.List<E>)","169":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","170":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","171":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","172":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","173":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","174":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","175":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","176":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","177":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","178":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","179":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","180":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","181":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","182":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","183":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","184":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","185":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","186":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","187":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","188":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","189":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","190":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","191":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","192":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","193":"Validation::::apply(am.ik.yavi.fn.Validation<E, ? extends am.ik.yavi.fn.Function1<? super T, ? extends U>>)","195":"Validation::::combine(am.ik.yavi.fn.Validation<E, T2>)","196":"Validation::::combine(am.ik.yavi.fn.Validation<E, T2>)","197":"Validation::::combine(am.ik.yavi.fn.Validation<E, T2>)","199":"Validation::::success(T)","200":"Validation::::success(T)","201":"Validation::::success(T)","203":"Validation::::failure(java.util.List<E>)","204":"Validation::::failure(java.util.List<E>)","205":"Validation::::failure(java.util.List<E>)","207":"Validation::::failure(E[])","208":"Validation::::failure(E[])","209":"Validation::::failure(E[])","210":"Validation::::failure(E[])","221":"Validation.Success::::isValid()","222":"Validation.Success::::isValid()","223":"Validation.Success::::isValid()","224":"Validation.Success::::isValid()","226":"Validation.Success::::value()","227":"Validation.Success::::value()","228":"Validation.Success::::value()","229":"Validation.Success::::value()","230":"Validation.Success::::value()","231":"Validation.Success::::value()","232":"Validation.Success::::value()","234":"Validation.Success::::valueNullable()","235":"Validation.Success::::valueNullable()","236":"Validation.Success::::valueNullable()","237":"Validation.Success::::valueNullable()","239":"Validation.Success::::errors()","240":"Validation.Success::::errors()","241":"Validation.Success::::errors()","242":"Validation.Success::::errors()","243":"Validation.Success::::errors()","245":"Validation.Success::::equals(java.lang.Object)","246":"Validation.Success::::equals(java.lang.Object)","247":"Validation.Success::::equals(java.lang.Object)","248":"Validation.Success::::equals(java.lang.Object)","249":"Validation.Success::::equals(java.lang.Object)","250":"Validation.Success::::equals(java.lang.Object)","251":"Validation.Success::::equals(java.lang.Object)","252":"Validation.Success::::equals(java.lang.Object)","253":"Validation.Success::::equals(java.lang.Object)","255":"Validation.Success::::hashCode()","256":"Validation.Success::::hashCode()","257":"Validation.Success::::hashCode()","258":"Validation.Success::::hashCode()","276":"Validation.Failure::::isValid()","277":"Validation.Failure::::isValid()","278":"Validation.Failure::::isValid()","279":"Validation.Failure::::isValid()","281":"Validation.Failure::::value()","282":"Validation.Failure::::value()","283":"Validation.Failure::::value()","284":"Validation.Failure::::value()","285":"Validation.Failure::::value()","287":"Validation.Failure::::valueNullable()","288":"Validation.Failure::::valueNullable()","289":"Validation.Failure::::valueNullable()","290":"Validation.Failure::::valueNullable()","292":"Validation.Failure::::errors()","293":"Validation.Failure::::errors()","294":"Validation.Failure::::errors()","295":"Validation.Failure::::errors()","297":"Validation.Failure::::equals(java.lang.Object)","298":"Validation.Failure::::equals(java.lang.Object)","299":"Validation.Failure::::equals(java.lang.Object)","300":"Validation.Failure::::equals(java.lang.Object)","301":"Validation.Failure::::equals(java.lang.Object)","302":"Validation.Failure::::equals(java.lang.Object)","303":"Validation.Failure::::equals(java.lang.Object)","304":"Validation.Failure::::equals(java.lang.Object)","305":"Validation.Failure::::equals(java.lang.Object)","307":"Validation.Failure::::hashCode()","308":"Validation.Failure::::hashCode()","309":"Validation.Failure::::hashCode()","310":"Validation.Failure::::hashCode()"},"test_reverse_method_lines_dic":{"30":"ValidationTest::::success()","31":"ValidationTest::::success()","32":"ValidationTest::::success()","33":"ValidationTest::::success()","34":"ValidationTest::::success()","35":"ValidationTest::::success()","36":"ValidationTest::::success()","37":"ValidationTest::::success()","38":"ValidationTest::::success()","39":"ValidationTest::::success()","40":"ValidationTest::::success()","41":"ValidationTest::::success()","42":"ValidationTest::::success()","43":"ValidationTest::::success()","44":"ValidationTest::::success()","45":"ValidationTest::::success()","47":"ValidationTest::::failure()","48":"ValidationTest::::failure()","49":"ValidationTest::::failure()","50":"ValidationTest::::failure()","51":"ValidationTest::::failure()","52":"ValidationTest::::failure()","53":"ValidationTest::::failure()","54":"ValidationTest::::failure()","55":"ValidationTest::::failure()","56":"ValidationTest::::failure()","57":"ValidationTest::::failure()","58":"ValidationTest::::failure()","59":"ValidationTest::::failure()","60":"ValidationTest::::failure()","61":"ValidationTest::::failure()","62":"ValidationTest::::failure()","63":"ValidationTest::::failure()","64":"ValidationTest::::failure()","66":"ValidationTest::::foldSuccess()","67":"ValidationTest::::foldSuccess()","68":"ValidationTest::::foldSuccess()","69":"ValidationTest::::foldSuccess()","70":"ValidationTest::::foldSuccess()","71":"ValidationTest::::foldSuccess()","72":"ValidationTest::::foldSuccess()","74":"ValidationTest::::foldFailure()","75":"ValidationTest::::foldFailure()","76":"ValidationTest::::foldFailure()","77":"ValidationTest::::foldFailure()","78":"ValidationTest::::foldFailure()","79":"ValidationTest::::foldFailure()","80":"ValidationTest::::foldFailure()","81":"ValidationTest::::foldFailure()","83":"ValidationTest::::bimapSuccess()","84":"ValidationTest::::bimapSuccess()","85":"ValidationTest::::bimapSuccess()","86":"ValidationTest::::bimapSuccess()","87":"ValidationTest::::bimapSuccess()","88":"ValidationTest::::bimapSuccess()","89":"ValidationTest::::bimapSuccess()","90":"ValidationTest::::bimapSuccess()","91":"ValidationTest::::bimapSuccess()","93":"ValidationTest::::bimapFailure()","94":"ValidationTest::::bimapFailure()","95":"ValidationTest::::bimapFailure()","96":"ValidationTest::::bimapFailure()","97":"ValidationTest::::bimapFailure()","98":"ValidationTest::::bimapFailure()","99":"ValidationTest::::bimapFailure()","100":"ValidationTest::::bimapFailure()","101":"ValidationTest::::bimapFailure()","102":"ValidationTest::::bimapFailure()","104":"ValidationTest::::combine_all_valid()","105":"ValidationTest::::combine_all_valid()","106":"ValidationTest::::combine_all_valid()","107":"ValidationTest::::combine_all_valid()","108":"ValidationTest::::combine_all_valid()","109":"ValidationTest::::combine_all_valid()","110":"ValidationTest::::combine_all_valid()","111":"ValidationTest::::combine_all_valid()","112":"ValidationTest::::combine_all_valid()","113":"ValidationTest::::combine_all_valid()","114":"ValidationTest::::combine_all_valid()","115":"ValidationTest::::combine_all_valid()","116":"ValidationTest::::combine_all_valid()","117":"ValidationTest::::combine_all_valid()","118":"ValidationTest::::combine_all_valid()","119":"ValidationTest::::combine_all_valid()","120":"ValidationTest::::combine_all_valid()","121":"ValidationTest::::combine_all_valid()","122":"ValidationTest::::combine_all_valid()","123":"ValidationTest::::combine_all_valid()","124":"ValidationTest::::combine_all_valid()","126":"ValidationTest::::combine_all_invalid()","127":"ValidationTest::::combine_all_invalid()","128":"ValidationTest::::combine_all_invalid()","129":"ValidationTest::::combine_all_invalid()","130":"ValidationTest::::combine_all_invalid()","131":"ValidationTest::::combine_all_invalid()","132":"ValidationTest::::combine_all_invalid()","133":"ValidationTest::::combine_all_invalid()","134":"ValidationTest::::combine_all_invalid()","135":"ValidationTest::::combine_all_invalid()","136":"ValidationTest::::combine_all_invalid()","137":"ValidationTest::::combine_all_invalid()","138":"ValidationTest::::combine_all_invalid()","139":"ValidationTest::::combine_all_invalid()","140":"ValidationTest::::combine_all_invalid()","141":"ValidationTest::::combine_all_invalid()","142":"ValidationTest::::combine_all_invalid()","143":"ValidationTest::::combine_all_invalid()","144":"ValidationTest::::combine_all_invalid()","145":"ValidationTest::::combine_all_invalid()","146":"ValidationTest::::combine_all_invalid()","147":"ValidationTest::::combine_all_invalid()","149":"ValidationTest::::combine_first_invalid()","150":"ValidationTest::::combine_first_invalid()","151":"ValidationTest::::combine_first_invalid()","152":"ValidationTest::::combine_first_invalid()","153":"ValidationTest::::combine_first_invalid()","154":"ValidationTest::::combine_first_invalid()","155":"ValidationTest::::combine_first_invalid()","156":"ValidationTest::::combine_first_invalid()","157":"ValidationTest::::combine_first_invalid()","158":"ValidationTest::::combine_first_invalid()","159":"ValidationTest::::combine_first_invalid()","160":"ValidationTest::::combine_first_invalid()","161":"ValidationTest::::combine_first_invalid()","162":"ValidationTest::::combine_first_invalid()","163":"ValidationTest::::combine_first_invalid()","164":"ValidationTest::::combine_first_invalid()","165":"ValidationTest::::combine_first_invalid()","166":"ValidationTest::::combine_first_invalid()","167":"ValidationTest::::combine_first_invalid()","168":"ValidationTest::::combine_first_invalid()","169":"ValidationTest::::combine_first_invalid()","171":"ValidationTest::::combine_last_invalid()","172":"ValidationTest::::combine_last_invalid()","173":"ValidationTest::::combine_last_invalid()","174":"ValidationTest::::combine_last_invalid()","175":"ValidationTest::::combine_last_invalid()","176":"ValidationTest::::combine_last_invalid()","177":"ValidationTest::::combine_last_invalid()","178":"ValidationTest::::combine_last_invalid()","179":"ValidationTest::::combine_last_invalid()","180":"ValidationTest::::combine_last_invalid()","181":"ValidationTest::::combine_last_invalid()","182":"ValidationTest::::combine_last_invalid()","183":"ValidationTest::::combine_last_invalid()","184":"ValidationTest::::combine_last_invalid()","185":"ValidationTest::::combine_last_invalid()","186":"ValidationTest::::combine_last_invalid()","187":"ValidationTest::::combine_last_invalid()","188":"ValidationTest::::combine_last_invalid()","189":"ValidationTest::::combine_last_invalid()","190":"ValidationTest::::combine_last_invalid()","191":"ValidationTest::::combine_last_invalid()","193":"ValidationTest::::orElseThrowSuccess()","194":"ValidationTest::::orElseThrowSuccess()","195":"ValidationTest::::orElseThrowSuccess()","196":"ValidationTest::::orElseThrowSuccess()","197":"ValidationTest::::orElseThrowSuccess()","198":"ValidationTest::::orElseThrowSuccess()","200":"ValidationTest::::orElseThrowFailure()","201":"ValidationTest::::orElseThrowFailure()","202":"ValidationTest::::orElseThrowFailure()","203":"ValidationTest::::orElseThrowFailure()","204":"ValidationTest::::orElseThrowFailure()","205":"ValidationTest::::orElseThrowFailure()","206":"ValidationTest::::orElseThrowFailure()","207":"ValidationTest::::orElseThrowFailure()","209":"ValidationTest::::orElseGetSuccess()","210":"ValidationTest::::orElseGetSuccess()","211":"ValidationTest::::orElseGetSuccess()","212":"ValidationTest::::orElseGetSuccess()","213":"ValidationTest::::orElseGetSuccess()","214":"ValidationTest::::orElseGetSuccess()","216":"ValidationTest::::orElseGetFailure()","217":"ValidationTest::::orElseGetFailure()","218":"ValidationTest::::orElseGetFailure()","219":"ValidationTest::::orElseGetFailure()","220":"ValidationTest::::orElseGetFailure()","221":"ValidationTest::::orElseGetFailure()"},"tests":[{"test_lines":[30,45],"covered_lines":[41,78,83,96,161,200,217,218,219,223,228,231,241,247,249,251,252,257],"label":"Validation::::success(T)"},{"test_lines":[47,64],"covered_lines":[41,78,83,96,97,204,209,266,267,270,273,274,278,283,294,299,301,303,304,309],"label":"Validation::::failure(java.util.List<E>)"},{"test_lines":[66,72],"covered_lines":[41,156,200,217,218,219,223,228,231],"label":"Validation::::fold(java.util.function.Function<? super java.util.List<E>, ? extends U>,java.util.function.Function<? super T, ? extends U>)"},{"test_lines":[74,81],"covered_lines":[41,156,209,266,267,270,273,274,278,294],"label":"Validation::::fold(java.util.function.Function<? super java.util.List<E>, ? extends U>,java.util.function.Function<? super T, ? extends U>)"},{"test_lines":[83,91],"covered_lines":[41,114,200,217,218,219,223,228,231],"label":"Validation::::bimap(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>,java.util.function.Function<? super T, ? extends T2>)"},{"test_lines":[93,102],"covered_lines":[41,114,115,204,209,266,267,270,273,274,278,294],"label":"Validation::::bimap(java.util.function.Function<? super java.util.List<E>, ? extends java.util.List<E2>>,java.util.function.Function<? super T, ? extends T2>)"},{"test_lines":[104,124],"covered_lines":[41,161,171,172,173,174,175,196,200,217,218,219,223,228,231,236],"label":"Validation::::combine(am.ik.yavi.fn.Validation<E, T2>)"},{"test_lines":[126,147],"covered_lines":[41,166,171,183,184,185,188,189,190,196,200,204,209,217,218,219,223,266,267,270,273,274,278,294],"label":"Validation::::combine(am.ik.yavi.fn.Validation<E, T2>)"},{"test_lines":[149,169],"covered_lines":[41,166,171,172,178,179,183,184,185,196,200,204,209,217,218,219,223,266,267,270,273,274,278,294],"label":"Validation::::combine(am.ik.yavi.fn.Validation<E, T2>)"},{"test_lines":[171,191],"covered_lines":[41,161,166,171,172,173,174,175,183,184,185,196,200,204,209,217,218,219,223,236,266,267,270,273,274,278,294],"label":"Validation::::combine(am.ik.yavi.fn.Validation<E, T2>)"},{"test_lines":[193,198],"covered_lines":[41,127,128,200,217,218,219,223,228,231],"label":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)"},{"test_lines":[200,207],"covered_lines":[41,127,131,204,266,267,270,273,274,278,294],"label":"Validation::::orElseThrow(java.util.function.Function<? super java.util.List<E>, ? extends X>)"},{"test_lines":[209,214],"covered_lines":[41,146,147,200,217,218,219,223,228,231],"label":"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)"},{"test_lines":[216,221],"covered_lines":[41,146,150,209,266,267,270,273,274,278,294],"label":"Validation::::orElseGet(java.util.function.Function<? super java.util.List<E>, ? extends T>)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/fn/Validations.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.fn;\n","\n","import java.util.ArrayList;\n","import java.util.Collection;\n","import java.util.List;\n","import java.util.Optional;\n","import java.util.function.Function;\n","import java.util.function.Supplier;\n","\n","import static java.util.function.Function.identity;\n","\n","/**\n"," * Generated by\n"," * https://github.com/making/yavi/blob/develop/scripts/generate-applicative.sh\n"," *\n"," * @since 0.6.0\n"," */\n","public class Validations {\n","\tpublic static <E, T1> Combining1<E, T1> combine(Validation<E, T1> v1) {\n","\t\treturn new Combining1<>(v1);\n","\t}\n","\n","\tpublic static <E, T1, T2> Combining2<E, T1, T2> combine(Validation<E, T1> v1,\n","\t\t\tValidation<E, T2> v2) {\n","\t\treturn new Combining2<>(v1, v2);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3> Combining3<E, T1, T2, T3> combine(Validation<E, T1> v1,\n","\t\t\tValidation<E, T2> v2, Validation<E, T3> v3) {\n","\t\treturn new Combining3<>(v1, v2, v3);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4> Combining4<E, T1, T2, T3, T4> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4) {\n","\t\treturn new Combining4<>(v1, v2, v3, v4);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5> Combining5<E, T1, T2, T3, T4, T5> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5) {\n","\t\treturn new Combining5<>(v1, v2, v3, v4, v5);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6> Combining6<E, T1, T2, T3, T4, T5, T6> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6) {\n","\t\treturn new Combining6<>(v1, v2, v3, v4, v5, v6);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6, T7> Combining7<E, T1, T2, T3, T4, T5, T6, T7> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7) {\n","\t\treturn new Combining7<>(v1, v2, v3, v4, v5, v6, v7);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6, T7, T8> Combining8<E, T1, T2, T3, T4, T5, T6, T7, T8> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8) {\n","\t\treturn new Combining8<>(v1, v2, v3, v4, v5, v6, v7, v8);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6, T7, T8, T9> Combining9<E, T1, T2, T3, T4, T5, T6, T7, T8, T9> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9) {\n","\t\treturn new Combining9<>(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Combining10<E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10) {\n","\t\treturn new Combining10<>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Combining11<E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11) {\n","\t\treturn new Combining11<>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Combining12<E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11, Validation<E, T12> v12) {\n","\t\treturn new Combining12<>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Combining13<E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11, Validation<E, T12> v12,\n","\t\t\tValidation<E, T13> v13) {\n","\t\treturn new Combining13<>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Combining14<E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11, Validation<E, T12> v12,\n","\t\t\tValidation<E, T13> v13, Validation<E, T14> v14) {\n","\t\treturn new Combining14<>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13,\n","\t\t\t\tv14);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Combining15<E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11, Validation<E, T12> v12,\n","\t\t\tValidation<E, T13> v13, Validation<E, T14> v14, Validation<E, T15> v15) {\n","\t\treturn new Combining15<>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13,\n","\t\t\t\tv14, v15);\n","\t}\n","\n","\tpublic static <E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Combining16<E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> combine(\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11, Validation<E, T12> v12,\n","\t\t\tValidation<E, T13> v13, Validation<E, T14> v14, Validation<E, T15> v15,\n","\t\t\tValidation<E, T16> v16) {\n","\t\treturn new Combining16<>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13,\n","\t\t\t\tv14, v15, v16);\n","\t}\n","\n","\tpublic static <R, E, T1, V extends Validation<E, R>> V apply(Function1<T1, R> f,\n","\t\t\tValidation<E, T1> v1) {\n","\t\treturn combine(v1).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, V extends Validation<E, R>> V apply(\n","\t\t\tFunction2<T1, T2, R> f, Validation<E, T1> v1, Validation<E, T2> v2) {\n","\t\treturn combine(v1, v2).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, V extends Validation<E, R>> V apply(\n","\t\t\tFunction3<T1, T2, T3, R> f, Validation<E, T1> v1, Validation<E, T2> v2,\n","\t\t\tValidation<E, T3> v3) {\n","\t\treturn combine(v1, v2, v3).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, V extends Validation<E, R>> V apply(\n","\t\t\tFunction4<T1, T2, T3, T4, R> f, Validation<E, T1> v1, Validation<E, T2> v2,\n","\t\t\tValidation<E, T3> v3, Validation<E, T4> v4) {\n","\t\treturn combine(v1, v2, v3, v4).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, V extends Validation<E, R>> V apply(\n","\t\t\tFunction5<T1, T2, T3, T4, T5, R> f, Validation<E, T1> v1,\n","\t\t\tValidation<E, T2> v2, Validation<E, T3> v3, Validation<E, T4> v4,\n","\t\t\tValidation<E, T5> v5) {\n","\t\treturn combine(v1, v2, v3, v4, v5).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, V extends Validation<E, R>> V apply(\n","\t\t\tFunction6<T1, T2, T3, T4, T5, T6, R> f, Validation<E, T1> v1,\n","\t\t\tValidation<E, T2> v2, Validation<E, T3> v3, Validation<E, T4> v4,\n","\t\t\tValidation<E, T5> v5, Validation<E, T6> v6) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, T7, V extends Validation<E, R>> V apply(\n","\t\t\tFunction7<T1, T2, T3, T4, T5, T6, T7, R> f, Validation<E, T1> v1,\n","\t\t\tValidation<E, T2> v2, Validation<E, T3> v3, Validation<E, T4> v4,\n","\t\t\tValidation<E, T5> v5, Validation<E, T6> v6, Validation<E, T7> v7) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6, v7).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, V extends Validation<E, R>> V apply(\n","\t\t\tFunction8<T1, T2, T3, T4, T5, T6, T7, T8, R> f, Validation<E, T1> v1,\n","\t\t\tValidation<E, T2> v2, Validation<E, T3> v3, Validation<E, T4> v4,\n","\t\t\tValidation<E, T5> v5, Validation<E, T6> v6, Validation<E, T7> v7,\n","\t\t\tValidation<E, T8> v8) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6, v7, v8).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, T9, V extends Validation<E, R>> V apply(\n","\t\t\tFunction9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> f, Validation<E, T1> v1,\n","\t\t\tValidation<E, T2> v2, Validation<E, T3> v3, Validation<E, T4> v4,\n","\t\t\tValidation<E, T5> v5, Validation<E, T6> v6, Validation<E, T7> v7,\n","\t\t\tValidation<E, T8> v8, Validation<E, T9> v9) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6, v7, v8, v9).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, V extends Validation<E, R>> V apply(\n","\t\t\tFunction10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> f,\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, V extends Validation<E, R>> V apply(\n","\t\t\tFunction11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R> f,\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, V extends Validation<E, R>> V apply(\n","\t\t\tFunction12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R> f,\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11, Validation<E, T12> v12) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, V extends Validation<E, R>> V apply(\n","\t\t\tFunction13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R> f,\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11, Validation<E, T12> v12,\n","\t\t\tValidation<E, T13> v13) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13).apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, V extends Validation<E, R>> V apply(\n","\t\t\tFunction14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R> f,\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11, Validation<E, T12> v12,\n","\t\t\tValidation<E, T13> v13, Validation<E, T14> v14) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)\n","\t\t\t\t.apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, V extends Validation<E, R>> V apply(\n","\t\t\tFunction15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R> f,\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11, Validation<E, T12> v12,\n","\t\t\tValidation<E, T13> v13, Validation<E, T14> v14, Validation<E, T15> v15) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)\n","\t\t\t\t.apply(f);\n","\t}\n","\n","\tpublic static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, V extends Validation<E, R>> V apply(\n","\t\t\tFunction16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R> f,\n","\t\t\tValidation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,\n","\t\t\tValidation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,\n","\t\t\tValidation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,\n","\t\t\tValidation<E, T10> v10, Validation<E, T11> v11, Validation<E, T12> v12,\n","\t\t\tValidation<E, T13> v13, Validation<E, T14> v14, Validation<E, T15> v15,\n","\t\t\tValidation<E, T16> v16) {\n","\t\treturn combine(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15,\n","\t\t\t\tv16).apply(f);\n","\t}\n","\n","\tpublic static <E, T> Validation<E, List<T>> sequence(\n","\t\t\tIterable<? extends Validation<? extends E, ? extends T>> validations) {\n","\t\treturn traverse(validations, identity());\n","\t}\n","\n","\tpublic static <E, T, U> Validation<E, List<U>> traverse(Iterable<T> values,\n","\t\t\tFunction<? super T, ? extends Validation<? extends E, ? extends U>> mapper) {\n","\t\treturn traverseIndexed(values, IndexedTraverser.ignoreIndex(mapper));\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\t@FunctionalInterface\n","\tpublic interface IndexedTraverser<A, R> {\n","\t\tR apply(A a, int index);\n","\n","\t\tstatic <A, R> IndexedTraverser<A, R> ignoreIndex(\n","\t\t\t\tFunction<? super A, ? extends R> f) {\n","\t\t\treturn (a, index) -> f.apply(a);\n","\t\t}\n","\t}\n","\n","\t/**\n","\t * @since 0.7.0\n","\t */\n","\tpublic static <E, T, U> Validation<E, List<U>> traverseIndexed(Iterable<T> values,\n","\t\t\tIndexedTraverser<? super T, ? extends Validation<? extends E, ? extends U>> traverser) {\n","\t\treturn traverseIndexed(values, traverser, ArrayList::new);\n","\t}\n","\n","\t/**\n","\t * @since 0.8.0\n","\t */\n","\tpublic static <E, T, U, C extends Collection<U>> Validation<E, C> traverseIndexed(\n","\t\t\tIterable<T> values,\n","\t\t\tIndexedTraverser<? super T, ? extends Validation<? extends E, ? extends U>> traverser,\n","\t\t\tSupplier<C> factory) {\n","\t\tfinal List<E> errors = new ArrayList<>();\n","\t\tfinal C results = factory.get();\n","\t\tint index = 0;\n","\t\tfor (T value : values) {\n","\t\t\ttraverser.apply(value, index++).fold(errors::addAll, results::add);\n","\t\t}\n","\t\treturn errors.isEmpty() ? Validation.success(results)\n","\t\t\t\t: Validation.failure(errors);\n","\t}\n","\n","\t/**\n","\t * @since 0.8.0\n","\t */\n","\t@SuppressWarnings(\"unchecked\")\n","\tpublic static <E, T, U> Validation<E, Optional<U>> traverseOptional(Optional<T> value,\n","\t\t\tFunction<? super T, ? extends Validation<? extends E, ? extends U>> mapper) {\n","\t\treturn value.map(\n","\t\t\t\tt -> mapper.apply(t).bimap(es -> (List<E>) es, u -> Optional.of((U) u))) //\n","\t\t\t\t.orElse(Validation.success(Optional.empty()));\n","\t}\n","\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.fn;\n","\n","import java.util.Arrays;\n","import java.util.List;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class ValidationsTest {\n","\t@Test\n","\tvoid combine() {\n","\t\tfinal Validation<List<String>, String> v1 = Validation.success(\"s1\");\n","\t\tfinal Validation<List<String>, String> v2 = Validation.success(\"s2\");\n","\t\tfinal Validation<List<String>, String> v3 = Validation.success(\"s3\");\n","\n","\t\tfinal String s = Validations.combine(v1, v2, v3)\n","\t\t\t\t.apply((s1, s2, s3) -> String.join(\"-\", s1, s2, s3)).value();\n","\t\tassertThat(s).isEqualTo(\"s1-s2-s3\");\n","\t}\n","\n","\t@Test\n","\tvoid apply() {\n","\t\tfinal Validation<List<String>, String> v1 = Validation.success(\"s1\");\n","\t\tfinal Validation<List<String>, String> v2 = Validation.success(\"s2\");\n","\t\tfinal Validation<List<String>, String> v3 = Validation.success(\"s3\");\n","\n","\t\tfinal String s = Validations\n","\t\t\t\t.apply((s1, s2, s3) -> String.join(\"-\", s1, s2, s3), v1, v2, v3).value();\n","\t\tassertThat(s).isEqualTo(\"s1-s2-s3\");\n","\t}\n","\n","\t@Test\n","\tvoid sequenceValid() {\n","\t\tfinal Validation<List<String>, List<Integer>> validation = Validations\n","\t\t\t\t.sequence(Arrays.asList(Validation.success(1), Validation.success(2)));\n","\t\tassertThat(validation.value()).containsExactly(1, 2);\n","\t}\n","\n","\t@Test\n","\tvoid sequenceInvalid() {\n","\t\tfinal Validation<String, List<Integer>> validation = Validations\n","\t\t\t\t.sequence(Arrays.asList(Validation.success(1),\n","\t\t\t\t\t\tValidation.failure(Arrays.asList(\"e1\", \"e2\")),\n","\t\t\t\t\t\tValidation.success(2),\n","\t\t\t\t\t\tValidation.failure(Arrays.asList(\"e3\", \"e4\"))));\n","\t\tassertThat(validation.errors()).containsExactly(\"e1\", \"e2\", \"e3\", \"e4\");\n","\t}\n","\n","\t@Test\n","\tvoid traverseValid() {\n","\t\tfinal Validation<String, List<Integer>> validation = Validations\n","\t\t\t\t.traverse(Arrays.asList(1, 2), i -> Validation.success(i));\n","\t\tassertThat(validation.value()).containsExactly(1, 2);\n","\t}\n","\n","\t@Test\n","\tvoid traverseInvalid() {\n","\t\tfinal Validation<String, List<Integer>> validation = Validations\n","\t\t\t\t.traverse(Arrays.asList(1, -1, 2, -2), i -> {\n","\t\t\t\t\tif (i > 0) {\n","\t\t\t\t\t\treturn Validation.success(i);\n","\t\t\t\t\t}\n","\t\t\t\t\telse {\n","\t\t\t\t\t\treturn Validation.failure(\n","\t\t\t\t\t\t\t\tArrays.asList(\"e\" + (-2 * i - 1), \"e\" + (-2 * i)));\n","\t\t\t\t\t}\n","\t\t\t\t});\n","\t\tassertThat(validation.errors()).containsExactly(\"e1\", \"e2\", \"e3\", \"e4\");\n","\t}\n","\n","\t@Test\n","\tvoid traverseIndexedInvalid() {\n","\t\tfinal Validation<String, List<Integer>> validation = Validations\n","\t\t\t\t.traverseIndexed(Arrays.asList(1, -1, 2, -2), (i, index) -> {\n","\t\t\t\t\tif (i > 0) {\n","\t\t\t\t\t\treturn Validation.success(i);\n","\t\t\t\t\t}\n","\t\t\t\t\telse {\n","\t\t\t\t\t\treturn Validation.failure(\"e[\" + index + \"]\");\n","\t\t\t\t\t}\n","\t\t\t\t});\n","\t\tassertThat(validation.errors()).containsExactly(\"e[1]\", \"e[3]\");\n","\t}\n","}"],"method_lines_dic":{"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>)":[34,36],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>)":[38,41],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)":[43,46],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)":[48,52],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)":[54,58],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)":[60,64],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)":[66,71],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)":[73,78],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)":[80,85],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)":[87,93],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)":[95,101],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)":[103,109],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)":[111,118],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)":[120,128],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)":[130,138],"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)":[140,149],"Validations::::apply(am.ik.yavi.fn.Function1<T1, R>,am.ik.yavi.fn.Validation<E, T1>)":[151,154],"Validations::::apply(am.ik.yavi.fn.Function2<T1, T2, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>)":[156,159],"Validations::::apply(am.ik.yavi.fn.Function3<T1, T2, T3, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)":[161,165],"Validations::::apply(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)":[167,171],"Validations::::apply(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)":[173,178],"Validations::::apply(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)":[180,185],"Validations::::apply(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)":[187,192],"Validations::::apply(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)":[194,200],"Validations::::apply(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)":[202,208],"Validations::::apply(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)":[210,217],"Validations::::apply(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)":[219,226],"Validations::::apply(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)":[228,235],"Validations::::apply(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)":[237,245],"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)":[247,256],"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)":[258,267],"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)":[269,279],"Validations::::sequence(java.lang.Iterable<? extends am.ik.yavi.fn.Validation<? extends E, ? extends T>>)":[281,284],"Validations::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)":[286,289],"Validations.IndexedTraverser::::apply(A,int)":[296,296],"Validations.IndexedTraverser::::ignoreIndex(java.util.function.Function<? super A, ? extends R>)":[298,301],"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)":[307,310],"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)":[315,327],"Validations::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)":[332,338]},"test_method_lines_dic":{"ValidationsTest::::combine()":[26,35],"ValidationsTest::::apply()":[37,46],"ValidationsTest::::sequenceValid()":[48,53],"ValidationsTest::::sequenceInvalid()":[55,63],"ValidationsTest::::traverseValid()":[65,70],"ValidationsTest::::traverseInvalid()":[72,85],"ValidationsTest::::traverseIndexedInvalid()":[87,99]},"reverse_method_lines_dic":{"34":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>)","35":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>)","36":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>)","38":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>)","39":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>)","40":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>)","41":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>)","43":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)","44":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)","45":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)","46":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)","48":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)","49":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)","50":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)","51":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)","52":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)","54":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","55":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","56":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","57":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","58":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","60":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","61":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","62":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","63":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","64":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","66":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","67":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","68":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","69":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","70":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","71":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","73":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","74":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","75":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","76":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","77":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","78":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","80":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","81":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","82":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","83":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","84":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","85":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","87":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","88":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","89":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","90":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","91":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","92":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","93":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","95":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","96":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","97":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","98":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","99":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","100":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","101":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","103":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","104":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","105":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","106":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","107":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","108":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","109":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","111":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","112":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","113":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","114":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","115":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","116":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","117":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","118":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","120":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","121":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","122":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","123":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","124":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","125":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","126":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","127":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","128":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","130":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","131":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","132":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","133":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","134":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","135":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","136":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","137":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","138":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","140":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","141":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","142":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","143":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","144":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","145":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","146":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","147":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","148":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","149":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","151":"Validations::::apply(am.ik.yavi.fn.Function1<T1, R>,am.ik.yavi.fn.Validation<E, T1>)","152":"Validations::::apply(am.ik.yavi.fn.Function1<T1, R>,am.ik.yavi.fn.Validation<E, T1>)","153":"Validations::::apply(am.ik.yavi.fn.Function1<T1, R>,am.ik.yavi.fn.Validation<E, T1>)","154":"Validations::::apply(am.ik.yavi.fn.Function1<T1, R>,am.ik.yavi.fn.Validation<E, T1>)","156":"Validations::::apply(am.ik.yavi.fn.Function2<T1, T2, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>)","157":"Validations::::apply(am.ik.yavi.fn.Function2<T1, T2, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>)","158":"Validations::::apply(am.ik.yavi.fn.Function2<T1, T2, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>)","159":"Validations::::apply(am.ik.yavi.fn.Function2<T1, T2, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>)","161":"Validations::::apply(am.ik.yavi.fn.Function3<T1, T2, T3, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)","162":"Validations::::apply(am.ik.yavi.fn.Function3<T1, T2, T3, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)","163":"Validations::::apply(am.ik.yavi.fn.Function3<T1, T2, T3, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)","164":"Validations::::apply(am.ik.yavi.fn.Function3<T1, T2, T3, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)","165":"Validations::::apply(am.ik.yavi.fn.Function3<T1, T2, T3, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)","167":"Validations::::apply(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)","168":"Validations::::apply(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)","169":"Validations::::apply(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)","170":"Validations::::apply(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)","171":"Validations::::apply(am.ik.yavi.fn.Function4<T1, T2, T3, T4, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>)","173":"Validations::::apply(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","174":"Validations::::apply(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","175":"Validations::::apply(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","176":"Validations::::apply(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","177":"Validations::::apply(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","178":"Validations::::apply(am.ik.yavi.fn.Function5<T1, T2, T3, T4, T5, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>)","180":"Validations::::apply(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","181":"Validations::::apply(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","182":"Validations::::apply(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","183":"Validations::::apply(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","184":"Validations::::apply(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","185":"Validations::::apply(am.ik.yavi.fn.Function6<T1, T2, T3, T4, T5, T6, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>)","187":"Validations::::apply(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","188":"Validations::::apply(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","189":"Validations::::apply(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","190":"Validations::::apply(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","191":"Validations::::apply(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","192":"Validations::::apply(am.ik.yavi.fn.Function7<T1, T2, T3, T4, T5, T6, T7, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>)","194":"Validations::::apply(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","195":"Validations::::apply(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","196":"Validations::::apply(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","197":"Validations::::apply(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","198":"Validations::::apply(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","199":"Validations::::apply(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","200":"Validations::::apply(am.ik.yavi.fn.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>)","202":"Validations::::apply(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","203":"Validations::::apply(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","204":"Validations::::apply(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","205":"Validations::::apply(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","206":"Validations::::apply(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","207":"Validations::::apply(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","208":"Validations::::apply(am.ik.yavi.fn.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>)","210":"Validations::::apply(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","211":"Validations::::apply(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","212":"Validations::::apply(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","213":"Validations::::apply(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","214":"Validations::::apply(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","215":"Validations::::apply(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","216":"Validations::::apply(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","217":"Validations::::apply(am.ik.yavi.fn.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>)","219":"Validations::::apply(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","220":"Validations::::apply(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","221":"Validations::::apply(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","222":"Validations::::apply(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","223":"Validations::::apply(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","224":"Validations::::apply(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","225":"Validations::::apply(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","226":"Validations::::apply(am.ik.yavi.fn.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>)","228":"Validations::::apply(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","229":"Validations::::apply(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","230":"Validations::::apply(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","231":"Validations::::apply(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","232":"Validations::::apply(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","233":"Validations::::apply(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","234":"Validations::::apply(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","235":"Validations::::apply(am.ik.yavi.fn.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>)","237":"Validations::::apply(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","238":"Validations::::apply(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","239":"Validations::::apply(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","240":"Validations::::apply(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","241":"Validations::::apply(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","242":"Validations::::apply(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","243":"Validations::::apply(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","244":"Validations::::apply(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","245":"Validations::::apply(am.ik.yavi.fn.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>)","247":"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","248":"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","249":"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","250":"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","251":"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","252":"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","253":"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","254":"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","255":"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","256":"Validations::::apply(am.ik.yavi.fn.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>)","258":"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","259":"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","260":"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","261":"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","262":"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","263":"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","264":"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","265":"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","266":"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","267":"Validations::::apply(am.ik.yavi.fn.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>)","269":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","270":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","271":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","272":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","273":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","274":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","275":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","276":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","277":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","278":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","279":"Validations::::apply(am.ik.yavi.fn.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>,am.ik.yavi.fn.Validation<E, T4>,am.ik.yavi.fn.Validation<E, T5>,am.ik.yavi.fn.Validation<E, T6>,am.ik.yavi.fn.Validation<E, T7>,am.ik.yavi.fn.Validation<E, T8>,am.ik.yavi.fn.Validation<E, T9>,am.ik.yavi.fn.Validation<E, T10>,am.ik.yavi.fn.Validation<E, T11>,am.ik.yavi.fn.Validation<E, T12>,am.ik.yavi.fn.Validation<E, T13>,am.ik.yavi.fn.Validation<E, T14>,am.ik.yavi.fn.Validation<E, T15>,am.ik.yavi.fn.Validation<E, T16>)","281":"Validations::::sequence(java.lang.Iterable<? extends am.ik.yavi.fn.Validation<? extends E, ? extends T>>)","282":"Validations::::sequence(java.lang.Iterable<? extends am.ik.yavi.fn.Validation<? extends E, ? extends T>>)","283":"Validations::::sequence(java.lang.Iterable<? extends am.ik.yavi.fn.Validation<? extends E, ? extends T>>)","284":"Validations::::sequence(java.lang.Iterable<? extends am.ik.yavi.fn.Validation<? extends E, ? extends T>>)","286":"Validations::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","287":"Validations::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","288":"Validations::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","289":"Validations::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","296":"Validations.IndexedTraverser::::apply(A,int)","298":"Validations.IndexedTraverser::::ignoreIndex(java.util.function.Function<? super A, ? extends R>)","299":"Validations.IndexedTraverser::::ignoreIndex(java.util.function.Function<? super A, ? extends R>)","300":"Validations.IndexedTraverser::::ignoreIndex(java.util.function.Function<? super A, ? extends R>)","301":"Validations.IndexedTraverser::::ignoreIndex(java.util.function.Function<? super A, ? extends R>)","307":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","308":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","309":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","310":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","315":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","316":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","317":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","318":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","319":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","320":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","321":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","322":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","323":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","324":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","325":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","326":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","327":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)","332":"Validations::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","333":"Validations::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","334":"Validations::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","335":"Validations::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","336":"Validations::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","337":"Validations::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)","338":"Validations::::traverseOptional(java.util.Optional<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)"},"test_reverse_method_lines_dic":{"26":"ValidationsTest::::combine()","27":"ValidationsTest::::combine()","28":"ValidationsTest::::combine()","29":"ValidationsTest::::combine()","30":"ValidationsTest::::combine()","31":"ValidationsTest::::combine()","32":"ValidationsTest::::combine()","33":"ValidationsTest::::combine()","34":"ValidationsTest::::combine()","35":"ValidationsTest::::combine()","37":"ValidationsTest::::apply()","38":"ValidationsTest::::apply()","39":"ValidationsTest::::apply()","40":"ValidationsTest::::apply()","41":"ValidationsTest::::apply()","42":"ValidationsTest::::apply()","43":"ValidationsTest::::apply()","44":"ValidationsTest::::apply()","45":"ValidationsTest::::apply()","46":"ValidationsTest::::apply()","48":"ValidationsTest::::sequenceValid()","49":"ValidationsTest::::sequenceValid()","50":"ValidationsTest::::sequenceValid()","51":"ValidationsTest::::sequenceValid()","52":"ValidationsTest::::sequenceValid()","53":"ValidationsTest::::sequenceValid()","55":"ValidationsTest::::sequenceInvalid()","56":"ValidationsTest::::sequenceInvalid()","57":"ValidationsTest::::sequenceInvalid()","58":"ValidationsTest::::sequenceInvalid()","59":"ValidationsTest::::sequenceInvalid()","60":"ValidationsTest::::sequenceInvalid()","61":"ValidationsTest::::sequenceInvalid()","62":"ValidationsTest::::sequenceInvalid()","63":"ValidationsTest::::sequenceInvalid()","65":"ValidationsTest::::traverseValid()","66":"ValidationsTest::::traverseValid()","67":"ValidationsTest::::traverseValid()","68":"ValidationsTest::::traverseValid()","69":"ValidationsTest::::traverseValid()","70":"ValidationsTest::::traverseValid()","72":"ValidationsTest::::traverseInvalid()","73":"ValidationsTest::::traverseInvalid()","74":"ValidationsTest::::traverseInvalid()","75":"ValidationsTest::::traverseInvalid()","76":"ValidationsTest::::traverseInvalid()","77":"ValidationsTest::::traverseInvalid()","78":"ValidationsTest::::traverseInvalid()","79":"ValidationsTest::::traverseInvalid()","80":"ValidationsTest::::traverseInvalid()","81":"ValidationsTest::::traverseInvalid()","82":"ValidationsTest::::traverseInvalid()","83":"ValidationsTest::::traverseInvalid()","84":"ValidationsTest::::traverseInvalid()","85":"ValidationsTest::::traverseInvalid()","87":"ValidationsTest::::traverseIndexedInvalid()","88":"ValidationsTest::::traverseIndexedInvalid()","89":"ValidationsTest::::traverseIndexedInvalid()","90":"ValidationsTest::::traverseIndexedInvalid()","91":"ValidationsTest::::traverseIndexedInvalid()","92":"ValidationsTest::::traverseIndexedInvalid()","93":"ValidationsTest::::traverseIndexedInvalid()","94":"ValidationsTest::::traverseIndexedInvalid()","95":"ValidationsTest::::traverseIndexedInvalid()","96":"ValidationsTest::::traverseIndexedInvalid()","97":"ValidationsTest::::traverseIndexedInvalid()","98":"ValidationsTest::::traverseIndexedInvalid()","99":"ValidationsTest::::traverseIndexedInvalid()"},"tests":[{"test_lines":[26,35],"covered_lines":[45],"label":"Validations::::combine(am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)"},{"test_lines":[37,46],"covered_lines":[45,164],"label":"Validations::::apply(am.ik.yavi.fn.Function3<T1, T2, T3, R>,am.ik.yavi.fn.Validation<E, T1>,am.ik.yavi.fn.Validation<E, T2>,am.ik.yavi.fn.Validation<E, T3>)"},{"test_lines":[48,53],"covered_lines":[283,288,300,309,319,320,321,322,323,324,325],"label":"Validations::::sequence(java.lang.Iterable<? extends am.ik.yavi.fn.Validation<? extends E, ? extends T>>)"},{"test_lines":[55,63],"covered_lines":[283,288,300,309,319,320,321,322,323,324,325,326],"label":"Validations::::sequence(java.lang.Iterable<? extends am.ik.yavi.fn.Validation<? extends E, ? extends T>>)"},{"test_lines":[65,70],"covered_lines":[288,300,309,319,320,321,322,323,324,325],"label":"Validations::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)"},{"test_lines":[72,85],"covered_lines":[288,300,309,319,320,321,322,323,324,325,326],"label":"Validations::::traverse(java.lang.Iterable<T>,java.util.function.Function<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>)"},{"test_lines":[87,99],"covered_lines":[309,319,320,321,322,323,324,325,326],"label":"Validations::::traverseIndexed(java.lang.Iterable<T>,am.ik.yavi.fn.Validations.IndexedTraverser<? super T, ? extends am.ik.yavi.fn.Validation<? extends E, ? extends U>>,java.util.function.Supplier<C>)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/factory/BiValidatorFactory.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.factory;\n","\n","import java.util.function.Function;\n","\n","import am.ik.yavi.builder.ValidatorBuilder;\n","import am.ik.yavi.core.BiValidator;\n","import am.ik.yavi.core.BiValidator.ErrorHandler;\n","import am.ik.yavi.jsr305.Nullable;\n","import am.ik.yavi.message.MessageFormatter;\n","\n","/**\n"," * Deprecated in favor of {@link BiConsumerFactory}\n"," *\n"," * A factory class of <code>BiValidator</code>. It can be used to manage the common\n"," * configurations of <code>BiValidator</code> in IoC container etc.<br>\n"," *\n"," * In case of Spring Framework, you can define <code>BiValidatorFactory</code> as follows:\n"," *\n"," * <pre>\n"," *{@literal @Bean}\n"," * public BiValidatorFactory&lt;Errors&gt; biValidatorFactory(MessageSource messageSource) {\n"," *   MessageFormatter messageFormatter = new MessageSourceMessageFormatter(messageSource::getMessage);\n"," *   return new BiValidatorFactory&lt;&gt;(null, messageFormatter, Errors::rejectValues);\n"," * }\n"," * </pre>\n"," *\n"," * A component can create a validator like following:\n"," *\n"," * <pre>\n"," *{@literal @RestController}\n"," * public class OrderController {\n"," *     private final BiValidator&lt;CartItem, Errors&gt; validator;\n"," *\n"," *     public OrderController(BiValidatorFactory&lt;Errors&gt; factory) {\n"," *         this.validator = factory.validator(builder -&gt; builder.constraint(...));\n"," *     }\n"," * }\n"," * </pre>\n"," *\n"," * @param <E> the type of the errors object\n"," * @author Toshiaki Maki\n"," * @since 0.5.0\n"," */\n","@Deprecated\n","public class BiValidatorFactory<E> extends ValidatorFactorySupport {\n","\tprivate final BiValidator.ErrorHandler<E> errorHandler;\n","\n","\tpublic BiValidatorFactory(@Nullable String messageKeySeparator,\n","\t\t\t@Nullable MessageFormatter messageFormatter,\n","\t\t\t@Nullable ErrorHandler<E> errorHandler) {\n","\t\tsuper(messageKeySeparator, messageFormatter);\n","\t\tthis.errorHandler = errorHandler;\n","\t}\n","\n","\tpublic BiValidatorFactory(@Nullable ErrorHandler<E> errorHandler) {\n","\t\tthis(null, null, errorHandler);\n","\t}\n","\n","\tpublic <T> BiValidator<T, E> validator(\n","\t\t\tFunction<ValidatorBuilder<T>, ValidatorBuilder<T>> constraints) {\n","\t\tif (this.errorHandler == null) {\n","\t\t\tthrow new IllegalArgumentException(\"'errorHandler' must not be null.\");\n","\t\t}\n","\t\tfinal ValidatorBuilder<T> builder = super.initBuilder();\n","\t\treturn constraints.apply(builder).build(this.errorHandler);\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.factory;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","import java.util.Locale;\n","\n","import am.ik.yavi.User;\n","import am.ik.yavi.core.BiValidator;\n","import am.ik.yavi.core.BiValidator.ErrorHandler;\n","import am.ik.yavi.core.ConstraintViolation;\n","import am.ik.yavi.message.SimpleMessageFormatter;\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class BiValidatorFactoryTest {\n","\tprivate final ErrorHandler<List<ConstraintViolation>> errorHandler = (errors, name,\n","\t\t\tmessageKey, args,\n","\t\t\tdefaultMessage) -> errors.add(new ConstraintViolation(name, messageKey,\n","\t\t\t\t\tdefaultMessage, args, new SimpleMessageFormatter(), Locale.ENGLISH));\n","\n","\tprivate final BiValidatorFactory<List<ConstraintViolation>> validatorFactory = new BiValidatorFactory<>(\n","\t\t\tthis.errorHandler);\n","\n","\t@Test\n","\tvoid validator() {\n","\t\tfinal BiValidator<User, List<ConstraintViolation>> validator = this.validatorFactory\n","\t\t\t\t.validator(builder -> builder\n","\t\t\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\t\t\tc -> c.notNull().greaterThanOrEqual(1)\n","\t\t\t\t\t\t\t\t\t\t.lessThanOrEqual(20))\n","\t\t\t\t\t\t.constraint(User::getEmail, \"email\",\n","\t\t\t\t\t\t\t\tc -> c.notNull().greaterThanOrEqual(5).lessThanOrEqual(50)\n","\t\t\t\t\t\t\t\t\t\t.email())\n","\t\t\t\t\t\t.constraint(User::getAge, \"age\",\n","\t\t\t\t\t\t\t\tc -> c.notNull().greaterThanOrEqual(0)\n","\t\t\t\t\t\t\t\t\t\t.lessThanOrEqual(200))\n","\t\t\t\t\t\t.constraint(User::isEnabled, \"enabled\", c -> c.isTrue()));\n","\n","\t\tfinal User user = new User(\"\", \"example.com\", 300);\n","\t\tuser.setEnabled(false);\n","\t\tfinal List<ConstraintViolation> violations = new ArrayList<>();\n","\n","\t\tvalidator.accept(user, violations);\n","\t\tassertThat(violations.size()).isEqualTo(4);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"name\\\" must be greater than or equal to 1. The given size is 0\");\n","\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t.isEqualTo(\"container.greaterThanOrEqual\");\n","\t\tassertThat(violations.get(1).message())\n","\t\t\t\t.isEqualTo(\"\\\"email\\\" must be a valid email address\");\n","\t\tassertThat(violations.get(1).messageKey()).isEqualTo(\"charSequence.email\");\n","\t\tassertThat(violations.get(2).message())\n","\t\t\t\t.isEqualTo(\"\\\"age\\\" must be less than or equal to 200\");\n","\t\tassertThat(violations.get(2).messageKey()).isEqualTo(\"numeric.lessThanOrEqual\");\n","\t\tassertThat(violations.get(3).message()).isEqualTo(\"\\\"enabled\\\" must be true\");\n","\t\tassertThat(violations.get(3).messageKey()).isEqualTo(\"boolean.isTrue\");\n","\t}\n","}"],"method_lines_dic":{"BiValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)":[74,81]},"test_method_lines_dic":{"BiValidatorFactoryTest::::validator()":[40,73]},"reverse_method_lines_dic":{"74":"BiValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","75":"BiValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","76":"BiValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","77":"BiValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","78":"BiValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","79":"BiValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","80":"BiValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","81":"BiValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)"},"test_reverse_method_lines_dic":{"40":"BiValidatorFactoryTest::::validator()","41":"BiValidatorFactoryTest::::validator()","42":"BiValidatorFactoryTest::::validator()","43":"BiValidatorFactoryTest::::validator()","44":"BiValidatorFactoryTest::::validator()","45":"BiValidatorFactoryTest::::validator()","46":"BiValidatorFactoryTest::::validator()","47":"BiValidatorFactoryTest::::validator()","48":"BiValidatorFactoryTest::::validator()","49":"BiValidatorFactoryTest::::validator()","50":"BiValidatorFactoryTest::::validator()","51":"BiValidatorFactoryTest::::validator()","52":"BiValidatorFactoryTest::::validator()","53":"BiValidatorFactoryTest::::validator()","54":"BiValidatorFactoryTest::::validator()","55":"BiValidatorFactoryTest::::validator()","56":"BiValidatorFactoryTest::::validator()","57":"BiValidatorFactoryTest::::validator()","58":"BiValidatorFactoryTest::::validator()","59":"BiValidatorFactoryTest::::validator()","60":"BiValidatorFactoryTest::::validator()","61":"BiValidatorFactoryTest::::validator()","62":"BiValidatorFactoryTest::::validator()","63":"BiValidatorFactoryTest::::validator()","64":"BiValidatorFactoryTest::::validator()","65":"BiValidatorFactoryTest::::validator()","66":"BiValidatorFactoryTest::::validator()","67":"BiValidatorFactoryTest::::validator()","68":"BiValidatorFactoryTest::::validator()","69":"BiValidatorFactoryTest::::validator()","70":"BiValidatorFactoryTest::::validator()","71":"BiValidatorFactoryTest::::validator()","72":"BiValidatorFactoryTest::::validator()","73":"BiValidatorFactoryTest::::validator()"},"tests":[{"test_lines":[40,73],"covered_lines":[66,67,68,71,72,76,79,80],"label":"BiValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/factory/BiConsumerFactory.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.factory;\n","\n","import java.util.function.BiConsumer;\n","import java.util.function.Function;\n","\n","import am.ik.yavi.builder.ValidatorBuilder;\n","import am.ik.yavi.core.ErrorHandler;\n","import am.ik.yavi.core.Validator;\n","import am.ik.yavi.jsr305.Nullable;\n","import am.ik.yavi.message.MessageFormatter;\n","\n","/**\n"," * A factory class of <code>BiConsumer</code>. It can be used to manage the common\n"," * configurations of <code>BiConsumer</code> in IoC container etc.<br>\n"," * In case of Spring Framework, you can define <code>BiConsumerFactory</code> as follows:\n"," *\n"," * <pre>\n"," * {@literal @Bean}\n"," * public BiConsumerFactory&lt;Errors&gt; biConsumerFactory(MessageSource messageSource) {\n"," *   MessageFormatter messageFormatter = new MessageSourceMessageFormatter(messageSource::getMessage);\n"," *   return new BiConsumerFactory&lt;&gt;(null, messageFormatter, Errors::rejectValues);\n"," * }\n"," * </pre>\n"," *\n"," * A component can create a validator like following:\n"," *\n"," * <pre>\n"," * {@literal @RestController}\n"," * public class OrderController {\n"," *     private final BiConsumer&lt;CartItem, Errors&gt; validator;\n"," *     public OrderController(BiConsumerFactory&lt;Errors&gt; factory) {\n"," *         this.validator = factory.validator(builder -&gt; builder.constraint(...));\n"," *     }\n"," * }\n"," * </pre>\n"," *\n"," * @param <E> the type of the errors object\n"," * @author Toshiaki Maki\n"," * @since 0.13.0\n"," */\n","public class BiConsumerFactory<E> extends ValidatorFactorySupport {\n","\tprivate final ErrorHandler<E> errorHandler;\n","\n","\tpublic BiConsumerFactory(@Nullable String messageKeySeparator,\n","\t\t\t@Nullable MessageFormatter messageFormatter,\n","\t\t\t@Nullable ErrorHandler<E> errorHandler) {\n","\t\tsuper(messageKeySeparator, messageFormatter);\n","\t\tthis.errorHandler = errorHandler;\n","\t}\n","\n","\tpublic BiConsumerFactory(@Nullable ErrorHandler<E> errorHandler) {\n","\t\tthis(null, null, errorHandler);\n","\t}\n","\n","\tpublic <T> BiConsumer<T, E> validator(\n","\t\t\tFunction<ValidatorBuilder<T>, ValidatorBuilder<T>> constraints) {\n","\t\tif (this.errorHandler == null) {\n","\t\t\tthrow new IllegalArgumentException(\"'errorHandler' must not be null.\");\n","\t\t}\n","\t\tfinal ValidatorBuilder<T> builder = super.initBuilder();\n","\t\tfinal Validator<T> validator = constraints.apply(builder).build();\n","\t\treturn validator.toBiConsumer(this.errorHandler);\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.factory;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","import java.util.Locale;\n","import java.util.function.BiConsumer;\n","\n","import am.ik.yavi.User;\n","import am.ik.yavi.core.ConstraintViolation;\n","import am.ik.yavi.core.ErrorHandler;\n","import am.ik.yavi.message.SimpleMessageFormatter;\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class BiConsumerFactoryTest {\n","\tprivate final ErrorHandler<List<ConstraintViolation>> errorHandler = (errors, name,\n","\t\t\tmessageKey, args,\n","\t\t\tdefaultMessage) -> errors.add(new ConstraintViolation(name, messageKey,\n","\t\t\t\t\tdefaultMessage, args, new SimpleMessageFormatter(), Locale.ENGLISH));\n","\n","\tprivate final BiConsumerFactory<List<ConstraintViolation>> validatorFactory = new BiConsumerFactory<>(\n","\t\t\tthis.errorHandler);\n","\n","\t@Test\n","\tvoid validator() {\n","\t\tfinal BiConsumer<User, List<ConstraintViolation>> validator = this.validatorFactory\n","\t\t\t\t.validator(builder -> builder\n","\t\t\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\t\t\tc -> c.notNull().greaterThanOrEqual(1)\n","\t\t\t\t\t\t\t\t\t\t.lessThanOrEqual(20))\n","\t\t\t\t\t\t.constraint(User::getEmail, \"email\",\n","\t\t\t\t\t\t\t\tc -> c.notNull().greaterThanOrEqual(5).lessThanOrEqual(50)\n","\t\t\t\t\t\t\t\t\t\t.email())\n","\t\t\t\t\t\t.constraint(User::getAge, \"age\",\n","\t\t\t\t\t\t\t\tc -> c.notNull().greaterThanOrEqual(0)\n","\t\t\t\t\t\t\t\t\t\t.lessThanOrEqual(200))\n","\t\t\t\t\t\t.constraint(User::isEnabled, \"enabled\", c -> c.isTrue()));\n","\n","\t\tfinal User user = new User(\"\", \"example.com\", 300);\n","\t\tuser.setEnabled(false);\n","\t\tfinal List<ConstraintViolation> violations = new ArrayList<>();\n","\n","\t\tvalidator.accept(user, violations);\n","\t\tassertThat(violations.size()).isEqualTo(4);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"name\\\" must be greater than or equal to 1. The given size is 0\");\n","\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t.isEqualTo(\"container.greaterThanOrEqual\");\n","\t\tassertThat(violations.get(1).message())\n","\t\t\t\t.isEqualTo(\"\\\"email\\\" must be a valid email address\");\n","\t\tassertThat(violations.get(1).messageKey()).isEqualTo(\"charSequence.email\");\n","\t\tassertThat(violations.get(2).message())\n","\t\t\t\t.isEqualTo(\"\\\"age\\\" must be less than or equal to 200\");\n","\t\tassertThat(violations.get(2).messageKey()).isEqualTo(\"numeric.lessThanOrEqual\");\n","\t\tassertThat(violations.get(3).message()).isEqualTo(\"\\\"enabled\\\" must be true\");\n","\t\tassertThat(violations.get(3).messageKey()).isEqualTo(\"boolean.isTrue\");\n","\t}\n","}"],"method_lines_dic":{"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)":[70,78]},"test_method_lines_dic":{"BiConsumerFactoryTest::::validator()":[40,73]},"reverse_method_lines_dic":{"70":"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","71":"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","72":"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","73":"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","74":"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","75":"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","76":"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","77":"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","78":"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)"},"test_reverse_method_lines_dic":{"40":"BiConsumerFactoryTest::::validator()","41":"BiConsumerFactoryTest::::validator()","42":"BiConsumerFactoryTest::::validator()","43":"BiConsumerFactoryTest::::validator()","44":"BiConsumerFactoryTest::::validator()","45":"BiConsumerFactoryTest::::validator()","46":"BiConsumerFactoryTest::::validator()","47":"BiConsumerFactoryTest::::validator()","48":"BiConsumerFactoryTest::::validator()","49":"BiConsumerFactoryTest::::validator()","50":"BiConsumerFactoryTest::::validator()","51":"BiConsumerFactoryTest::::validator()","52":"BiConsumerFactoryTest::::validator()","53":"BiConsumerFactoryTest::::validator()","54":"BiConsumerFactoryTest::::validator()","55":"BiConsumerFactoryTest::::validator()","56":"BiConsumerFactoryTest::::validator()","57":"BiConsumerFactoryTest::::validator()","58":"BiConsumerFactoryTest::::validator()","59":"BiConsumerFactoryTest::::validator()","60":"BiConsumerFactoryTest::::validator()","61":"BiConsumerFactoryTest::::validator()","62":"BiConsumerFactoryTest::::validator()","63":"BiConsumerFactoryTest::::validator()","64":"BiConsumerFactoryTest::::validator()","65":"BiConsumerFactoryTest::::validator()","66":"BiConsumerFactoryTest::::validator()","67":"BiConsumerFactoryTest::::validator()","68":"BiConsumerFactoryTest::::validator()","69":"BiConsumerFactoryTest::::validator()","70":"BiConsumerFactoryTest::::validator()","71":"BiConsumerFactoryTest::::validator()","72":"BiConsumerFactoryTest::::validator()","73":"BiConsumerFactoryTest::::validator()"},"tests":[{"test_lines":[40,73],"covered_lines":[62,63,64,67,68,72,75,76,77],"label":"BiConsumerFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/factory/ValidatorFactory.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.factory;\n","\n","import java.util.function.Function;\n","\n","import am.ik.yavi.builder.ValidatorBuilder;\n","import am.ik.yavi.core.Validator;\n","import am.ik.yavi.jsr305.Nullable;\n","import am.ik.yavi.message.MessageFormatter;\n","\n","/**\n"," * A factory class of <code>Validator</code>. It can be used to manage the common\n"," * configurations of <code>Validator</code> in IoC container etc.<br>\n"," *\n"," * In case of Spring Framework, you can define <code>BiValidatorFactory</code> as follows:\n"," *\n"," * <pre>\n"," *{@literal @Bean}\n"," * public ValidatorFactory validatorFactory(MessageSource messageSource) {\n"," *   MessageFormatter messageFormatter = new MessageSourceMessageFormatter(messageSource::getMessage);\n"," *   return new ValidatorFactory(null, messageFormatter);\n"," * }\n"," * </pre>\n"," *\n"," * A component can create a validator like following:\n"," *\n"," * <pre>\n"," *{@literal @RestController}\n"," * public class OrderController {\n"," *     private final Validator&lt;CartItem&gt; validator;\n"," *\n"," *     public OrderController(ValidatorFactory factory) {\n"," *         this.validator = factory.validator(builder -&gt; builder.constraint(...));\n"," *     }\n"," * }\n"," * </pre>\n"," *\n"," * @author Toshiaki Maki\n"," * @since 0.5.0\n"," */\n","public class ValidatorFactory extends ValidatorFactorySupport {\n","\n","\tpublic ValidatorFactory() {\n","\t\tthis(null, null);\n","\t}\n","\n","\tpublic ValidatorFactory(@Nullable String messageKeySeparator,\n","\t\t\t@Nullable MessageFormatter messageFormatter) {\n","\t\tsuper(messageKeySeparator, messageFormatter);\n","\t}\n","\n","\tpublic <T> Validator<T> validator(\n","\t\t\tFunction<ValidatorBuilder<T>, ValidatorBuilder<T>> constraints) {\n","\t\tfinal ValidatorBuilder<T> builder = super.initBuilder();\n","\t\treturn constraints.apply(builder).build();\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.factory;\n","\n","import am.ik.yavi.User;\n","import am.ik.yavi.core.ConstraintViolations;\n","import am.ik.yavi.core.Validator;\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class ValidatorFactoryTest {\n","\tprivate final ValidatorFactory validatorFactory = new ValidatorFactory();\n","\n","\t@Test\n","\tvoid validator() {\n","\t\tfinal Validator<User> validator = this.validatorFactory\n","\t\t\t\t.validator(builder -> builder\n","\t\t\t\t\t\t.constraint(User::getName, \"name\",\n","\t\t\t\t\t\t\t\tc -> c.notNull().greaterThanOrEqual(1)\n","\t\t\t\t\t\t\t\t\t\t.lessThanOrEqual(20))\n","\t\t\t\t\t\t.constraint(User::getEmail, \"email\",\n","\t\t\t\t\t\t\t\tc -> c.notNull().greaterThanOrEqual(5).lessThanOrEqual(50)\n","\t\t\t\t\t\t\t\t\t\t.email())\n","\t\t\t\t\t\t.constraint(User::getAge, \"age\",\n","\t\t\t\t\t\t\t\tc -> c.notNull().greaterThanOrEqual(0)\n","\t\t\t\t\t\t\t\t\t\t.lessThanOrEqual(200))\n","\t\t\t\t\t\t.constraint(User::isEnabled, \"enabled\", c -> c.isTrue()));\n","\n","\t\tfinal User user = new User(\"\", \"example.com\", 300);\n","\t\tuser.setEnabled(false);\n","\n","\t\tfinal ConstraintViolations violations = validator.validate(user);\n","\t\tassertThat(violations.size()).isEqualTo(4);\n","\t\tassertThat(violations.get(0).message()).isEqualTo(\n","\t\t\t\t\"The size of \\\"name\\\" must be greater than or equal to 1. The given size is 0\");\n","\t\tassertThat(violations.get(0).messageKey())\n","\t\t\t\t.isEqualTo(\"container.greaterThanOrEqual\");\n","\t\tassertThat(violations.get(1).message())\n","\t\t\t\t.isEqualTo(\"\\\"email\\\" must be a valid email address\");\n","\t\tassertThat(violations.get(1).messageKey()).isEqualTo(\"charSequence.email\");\n","\t\tassertThat(violations.get(2).message())\n","\t\t\t\t.isEqualTo(\"\\\"age\\\" must be less than or equal to 200\");\n","\t\tassertThat(violations.get(2).messageKey()).isEqualTo(\"numeric.lessThanOrEqual\");\n","\t\tassertThat(violations.get(3).message()).isEqualTo(\"\\\"enabled\\\" must be true\");\n","\t\tassertThat(violations.get(3).messageKey()).isEqualTo(\"boolean.isTrue\");\n","\t}\n","}"],"method_lines_dic":{"ValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)":[66,70]},"test_method_lines_dic":{"ValidatorFactoryTest::::validator()":[28,60]},"reverse_method_lines_dic":{"66":"ValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","67":"ValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","68":"ValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","69":"ValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)","70":"ValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)"},"test_reverse_method_lines_dic":{"28":"ValidatorFactoryTest::::validator()","29":"ValidatorFactoryTest::::validator()","30":"ValidatorFactoryTest::::validator()","31":"ValidatorFactoryTest::::validator()","32":"ValidatorFactoryTest::::validator()","33":"ValidatorFactoryTest::::validator()","34":"ValidatorFactoryTest::::validator()","35":"ValidatorFactoryTest::::validator()","36":"ValidatorFactoryTest::::validator()","37":"ValidatorFactoryTest::::validator()","38":"ValidatorFactoryTest::::validator()","39":"ValidatorFactoryTest::::validator()","40":"ValidatorFactoryTest::::validator()","41":"ValidatorFactoryTest::::validator()","42":"ValidatorFactoryTest::::validator()","43":"ValidatorFactoryTest::::validator()","44":"ValidatorFactoryTest::::validator()","45":"ValidatorFactoryTest::::validator()","46":"ValidatorFactoryTest::::validator()","47":"ValidatorFactoryTest::::validator()","48":"ValidatorFactoryTest::::validator()","49":"ValidatorFactoryTest::::validator()","50":"ValidatorFactoryTest::::validator()","51":"ValidatorFactoryTest::::validator()","52":"ValidatorFactoryTest::::validator()","53":"ValidatorFactoryTest::::validator()","54":"ValidatorFactoryTest::::validator()","55":"ValidatorFactoryTest::::validator()","56":"ValidatorFactoryTest::::validator()","57":"ValidatorFactoryTest::::validator()","58":"ValidatorFactoryTest::::validator()","59":"ValidatorFactoryTest::::validator()","60":"ValidatorFactoryTest::::validator()"},"tests":[{"test_lines":[28,60],"covered_lines":[58,59,63,64,68,69],"label":"ValidatorFactory::::validator(java.util.function.Function<am.ik.yavi.builder.ValidatorBuilder<T>, am.ik.yavi.builder.ValidatorBuilder<T>>)"}]},"/bernard/dataset_construction/prep/repos/yavi/src/main/java/am/ik/yavi/message/MessageSourceMessageFormatter.java":{"class_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.message;\n","\n","import java.text.MessageFormat;\n","import java.util.Locale;\n","import java.util.Objects;\n","\n","import am.ik.yavi.jsr305.Nullable;\n","\n","/**\n"," * <code>MessageFormatter</code> implementation that delegates formatting to\n"," * <code>MessageSource</code>.<br>\n"," * This can adopt Spring Framework's <code>MessageSource</code> as follows:\n"," *\n"," * <pre>\n"," * <code>\n"," * org.springframework.context.MessageSource messageSource = ...;\n"," * Validator&lt;CartItem&gt; validator = ValidatorBuilder.&lt;CartItem&gt; of()\n"," *                        .messageFormatter(new MessageSourceMessageFormatter(messageSource::getMessage))\n"," *                        .constraint(CartItem::getQuantity, \"quantity\", c -&gt; c.greaterThan(0))\n"," *                        .constraint(...)\n"," *                        .build();\n"," * </code>\n"," * </pre>\n"," *\n"," * @author Toshiaki Maki\n"," * @since 0.5.0\n"," */\n","public class MessageSourceMessageFormatter implements MessageFormatter {\n","\tprivate final MessageSource messageSource;\n","\n","\tpublic MessageSourceMessageFormatter(MessageSource messageSource) {\n","\t\tthis.messageSource = messageSource;\n","\t}\n","\n","\t@Override\n","\tpublic String format(String messageKey, String defaultMessageFormat, Object[] args,\n","\t\t\tLocale locale) {\n","\t\tfinal String defaultMessage = new MessageFormat(defaultMessageFormat, locale)\n","\t\t\t\t.format(args);\n","\t\tfinal String message = this.messageSource.getMessage(messageKey, args,\n","\t\t\t\tdefaultMessage, locale);\n","\t\treturn Objects.requireNonNull(message, defaultMessage);\n","\t}\n","\n","\t/**\n","\t * A compatible interface of Spring Framework's <code>MessageSource</code>.\n","\t */\n","\t@FunctionalInterface\n","\tpublic interface MessageSource {\n","\t\t@Nullable\n","\t\tString getMessage(String code, Object[] args, String defaultMessage,\n","\t\t\t\tLocale locale);\n","\t}\n","}\n"],"test_content":["/*\n"," * Copyright (C) 2018-2024 Toshiaki Maki <makingx@gmail.com>\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," *         http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package am.ik.yavi.message;\n","\n","import java.util.Arrays;\n","import java.util.Locale;\n","\n","import am.ik.yavi.message.MessageSourceMessageFormatter.MessageSource;\n","import org.junit.jupiter.api.Test;\n","\n","import static org.assertj.core.api.Assertions.assertThat;\n","\n","class MessageSourceMessageFormatterTest {\n","\n","\t@Test\n","\tvoid format() {\n","\t\tfinal MessageSource messageSource = (code, args, defaultMessage,\n","\t\t\t\tlocale) -> \"Message \" + code + \" \" + Arrays.toString(args);\n","\t\tfinal MessageSourceMessageFormatter messageFormatter = new MessageSourceMessageFormatter(\n","\t\t\t\tmessageSource);\n","\t\tfinal String message = messageFormatter.format(\"demo\", \"\", new Object[] { 1, 2 },\n","\t\t\t\tLocale.ENGLISH);\n","\t\tassertThat(message).isEqualTo(\"Message demo [1, 2]\");\n","\t}\n","}"],"method_lines_dic":{"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)":[50,58],"MessageSourceMessageFormatter.MessageSource::::getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale)":[65,67]},"test_method_lines_dic":{"MessageSourceMessageFormatterTest::::format()":[28,37]},"reverse_method_lines_dic":{"50":"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)","51":"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)","52":"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)","53":"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)","54":"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)","55":"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)","56":"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)","57":"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)","58":"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)","65":"MessageSourceMessageFormatter.MessageSource::::getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale)","66":"MessageSourceMessageFormatter.MessageSource::::getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale)","67":"MessageSourceMessageFormatter.MessageSource::::getMessage(java.lang.String,java.lang.Object[],java.lang.String,java.util.Locale)"},"test_reverse_method_lines_dic":{"28":"MessageSourceMessageFormatterTest::::format()","29":"MessageSourceMessageFormatterTest::::format()","30":"MessageSourceMessageFormatterTest::::format()","31":"MessageSourceMessageFormatterTest::::format()","32":"MessageSourceMessageFormatterTest::::format()","33":"MessageSourceMessageFormatterTest::::format()","34":"MessageSourceMessageFormatterTest::::format()","35":"MessageSourceMessageFormatterTest::::format()","36":"MessageSourceMessageFormatterTest::::format()","37":"MessageSourceMessageFormatterTest::::format()"},"tests":[{"test_lines":[28,37],"covered_lines":[46,47,48,53,54,55,57],"label":"MessageSourceMessageFormatter::::format(java.lang.String,java.lang.String,java.lang.Object[],java.util.Locale)"}]}}