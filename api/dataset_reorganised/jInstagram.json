{
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/realtime/SubscriptionResponse.java": {
    "class_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "@Deprecated\n",
      "public class SubscriptionResponse {\n",
      "\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate SubscriptionResponseData data;\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the data\n",
      "\t */\n",
      "\tpublic SubscriptionResponseData getData() {\n",
      "\t\treturn data;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param data the data to set\n",
      "\t */\n",
      "\tpublic void setData(SubscriptionResponseData data) {\n",
      "\t\tthis.data = data;\n",
      "\t}\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>SubscriptionResponseTest</code> contains tests for the class\n",
      " * <code>{@link SubscriptionResponse}</code>.\n",
      " * \n",
      " */\n",
      "public class SubscriptionResponseTest {\n",
      "\t/**\n",
      "\t * Run the SubscriptionResponseData getData() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetData_1() throws Exception {\n",
      "\t\tSubscriptionResponse fixture = new SubscriptionResponse();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new SubscriptionResponseData());\n",
      "\n",
      "\t\tSubscriptionResponseData result = fixture.getData();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(null, result.getObjectId());\n",
      "\t\tassertEquals(null, result.getObject());\n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t\tassertEquals(null, result.getType());\n",
      "\t\tassertEquals(null, result.getAspect());\n",
      "\t\tassertEquals(null, result.getCallbackUrl());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1() throws Exception {\n",
      "\t\tSubscriptionResponse fixture = new SubscriptionResponse();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new SubscriptionResponseData());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setData(SubscriptionResponseData) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetData_1() throws Exception {\n",
      "\t\tSubscriptionResponse fixture = new SubscriptionResponse();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new SubscriptionResponseData());\n",
      "\t\tSubscriptionResponseData data = new SubscriptionResponseData();\n",
      "\n",
      "\t\tfixture.setData(data);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1() throws Exception {\n",
      "\t\tSubscriptionResponse fixture = new SubscriptionResponse();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new SubscriptionResponseData());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "SubscriptionResponse::::getMeta()": [
        19,
        21
      ],
      "SubscriptionResponse::::setMeta(org.jinstagram.entity.common.Meta)": [
        26,
        28
      ],
      "SubscriptionResponse::::getData()": [
        33,
        35
      ],
      "SubscriptionResponse::::setData(org.jinstagram.realtime.SubscriptionResponseData)": [
        40,
        42
      ]
    },
    "test_method_lines_dic": {
      "SubscriptionResponseTest::::testGetData_1()": [
        20,
        36
      ],
      "SubscriptionResponseTest::::testGetMeta_1()": [
        45,
        59
      ],
      "SubscriptionResponseTest::::testSetData_1()": [
        68,
        78
      ],
      "SubscriptionResponseTest::::testSetMeta_1()": [
        87,
        97
      ]
    },
    "reverse_method_lines_dic": {
      "19": "SubscriptionResponse::::getMeta()",
      "20": "SubscriptionResponse::::getMeta()",
      "21": "SubscriptionResponse::::getMeta()",
      "26": "SubscriptionResponse::::setMeta(org.jinstagram.entity.common.Meta)",
      "27": "SubscriptionResponse::::setMeta(org.jinstagram.entity.common.Meta)",
      "28": "SubscriptionResponse::::setMeta(org.jinstagram.entity.common.Meta)",
      "33": "SubscriptionResponse::::getData()",
      "34": "SubscriptionResponse::::getData()",
      "35": "SubscriptionResponse::::getData()",
      "40": "SubscriptionResponse::::setData(org.jinstagram.realtime.SubscriptionResponseData)",
      "41": "SubscriptionResponse::::setData(org.jinstagram.realtime.SubscriptionResponseData)",
      "42": "SubscriptionResponse::::setData(org.jinstagram.realtime.SubscriptionResponseData)"
    },
    "test_reverse_method_lines_dic": {
      "20": "SubscriptionResponseTest::::testGetData_1()",
      "21": "SubscriptionResponseTest::::testGetData_1()",
      "22": "SubscriptionResponseTest::::testGetData_1()",
      "23": "SubscriptionResponseTest::::testGetData_1()",
      "24": "SubscriptionResponseTest::::testGetData_1()",
      "25": "SubscriptionResponseTest::::testGetData_1()",
      "26": "SubscriptionResponseTest::::testGetData_1()",
      "27": "SubscriptionResponseTest::::testGetData_1()",
      "28": "SubscriptionResponseTest::::testGetData_1()",
      "29": "SubscriptionResponseTest::::testGetData_1()",
      "30": "SubscriptionResponseTest::::testGetData_1()",
      "31": "SubscriptionResponseTest::::testGetData_1()",
      "32": "SubscriptionResponseTest::::testGetData_1()",
      "33": "SubscriptionResponseTest::::testGetData_1()",
      "34": "SubscriptionResponseTest::::testGetData_1()",
      "35": "SubscriptionResponseTest::::testGetData_1()",
      "36": "SubscriptionResponseTest::::testGetData_1()",
      "45": "SubscriptionResponseTest::::testGetMeta_1()",
      "46": "SubscriptionResponseTest::::testGetMeta_1()",
      "47": "SubscriptionResponseTest::::testGetMeta_1()",
      "48": "SubscriptionResponseTest::::testGetMeta_1()",
      "49": "SubscriptionResponseTest::::testGetMeta_1()",
      "50": "SubscriptionResponseTest::::testGetMeta_1()",
      "51": "SubscriptionResponseTest::::testGetMeta_1()",
      "52": "SubscriptionResponseTest::::testGetMeta_1()",
      "53": "SubscriptionResponseTest::::testGetMeta_1()",
      "54": "SubscriptionResponseTest::::testGetMeta_1()",
      "55": "SubscriptionResponseTest::::testGetMeta_1()",
      "56": "SubscriptionResponseTest::::testGetMeta_1()",
      "57": "SubscriptionResponseTest::::testGetMeta_1()",
      "58": "SubscriptionResponseTest::::testGetMeta_1()",
      "59": "SubscriptionResponseTest::::testGetMeta_1()",
      "68": "SubscriptionResponseTest::::testSetData_1()",
      "69": "SubscriptionResponseTest::::testSetData_1()",
      "70": "SubscriptionResponseTest::::testSetData_1()",
      "71": "SubscriptionResponseTest::::testSetData_1()",
      "72": "SubscriptionResponseTest::::testSetData_1()",
      "73": "SubscriptionResponseTest::::testSetData_1()",
      "74": "SubscriptionResponseTest::::testSetData_1()",
      "75": "SubscriptionResponseTest::::testSetData_1()",
      "76": "SubscriptionResponseTest::::testSetData_1()",
      "77": "SubscriptionResponseTest::::testSetData_1()",
      "78": "SubscriptionResponseTest::::testSetData_1()",
      "87": "SubscriptionResponseTest::::testSetMeta_1()",
      "88": "SubscriptionResponseTest::::testSetMeta_1()",
      "89": "SubscriptionResponseTest::::testSetMeta_1()",
      "90": "SubscriptionResponseTest::::testSetMeta_1()",
      "91": "SubscriptionResponseTest::::testSetMeta_1()",
      "92": "SubscriptionResponseTest::::testSetMeta_1()",
      "93": "SubscriptionResponseTest::::testSetMeta_1()",
      "94": "SubscriptionResponseTest::::testSetMeta_1()",
      "95": "SubscriptionResponseTest::::testSetMeta_1()",
      "96": "SubscriptionResponseTest::::testSetMeta_1()",
      "97": "SubscriptionResponseTest::::testSetMeta_1()"
    },
    "tests": [
      {
        "test_lines": [
          20,
          36
        ],
        "covered_lines": [
          8,
          27,
          28,
          34,
          41,
          42
        ],
        "label": "SubscriptionResponse::::getData()"
      },
      {
        "test_lines": [
          45,
          59
        ],
        "covered_lines": [
          8,
          20,
          27,
          28,
          41,
          42
        ],
        "label": "SubscriptionResponse::::getMeta()"
      },
      {
        "test_lines": [
          68,
          78
        ],
        "covered_lines": [
          8,
          27,
          28,
          41,
          42
        ],
        "label": "SubscriptionResponse::::setData(org.jinstagram.realtime.SubscriptionResponseData)"
      },
      {
        "test_lines": [
          87,
          97
        ],
        "covered_lines": [
          8,
          27,
          28,
          41,
          42
        ],
        "label": "SubscriptionResponse::::setMeta(org.jinstagram.entity.common.Meta)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/realtime/InstagramSubscription.java": {
    "class_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import static org.jinstagram.Instagram.configureConnectionSettings;\n",
      "\n",
      "import org.jinstagram.InstagramConfig;\n",
      "import org.jinstagram.auth.model.OAuthConstants;\n",
      "import org.jinstagram.auth.model.OAuthRequest;\n",
      "import org.jinstagram.exceptions.InstagramException;\n",
      "import org.jinstagram.http.Response;\n",
      "import org.jinstagram.http.Verbs;\n",
      "import org.jinstagram.model.Methods;\n",
      "import org.jinstagram.utils.Preconditions;\n",
      "\n",
      "import com.google.gson.Gson;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "@Deprecated\n",
      "public class InstagramSubscription {\n",
      "\n",
      "\tprivate final Map<String, String> params;\n",
      "\tprivate InstagramConfig config = new InstagramConfig();\n",
      "\n",
      "\t/**\n",
      "\t * Default constructor\n",
      "\t */\n",
      "\tpublic InstagramSubscription() {\n",
      "\t\tthis.params = new HashMap<String, String>();\n",
      "\t\tthis.params.put(Constants.CALLBACK_URL, OAuthConstants.OUT_OF_BAND);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configures the callback url\n",
      "\t *\n",
      "\t * @param callback The callback for your application\n",
      "\t * @return the {@link InstagramSubscription} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramSubscription callback(String callback) {\n",
      "\t\tPreconditions.checkValidUrl(callback, \"Invalid Callback Url\");\n",
      "\n",
      "\t\tthis.params.put(Constants.CALLBACK_URL, callback);\n",
      "\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configures the clientId\n",
      "\t *\n",
      "\t * @param clientId The clientId for your application\n",
      "\t * @return the {@link InstagramSubscription} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramSubscription clientId(String clientId) {\n",
      "\t\tPreconditions.checkEmptyString(clientId, \"Invalid 'clientId' key\");\n",
      "\n",
      "\t\tthis.params.put(Constants.CLIENT_ID, clientId);\n",
      "\t\t\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configure the clientSecret\n",
      "\t * @param clientSecret The clientSecret for your application\n",
      "\t * @return the {@link InstagramSubscription} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramSubscription clientSecret(String clientSecret) {\n",
      "\t\tPreconditions.checkEmptyString(clientSecret, \"Invalid 'clientSecret' key\");\n",
      "\n",
      "\t\tthis.params.put(Constants.CLIENT_SECRET, clientSecret);\n",
      "\t\t\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configure the subscription type\n",
      "\t * @param type The subscription type for your usage\n",
      "\t * @return the {@link InstagramSubscription} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramSubscription object(SubscriptionType type) {\n",
      "\n",
      "\t\tthis.params.put(Constants.SUBSCRIPTION_TYPE, type.toString());\n",
      "\t\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "    /**\n",
      "     * Configures the target id for the subscription, if any. In case of a a real-time tag update, this\n",
      "     * defines the target tag to use.\n",
      "     *\n",
      "     * @param objectId the object to target for this real-time subscription\n",
      "     * @return the {@link InstagramSubscription} instance for method chaining\n",
      "     */\n",
      "    public InstagramSubscription objectId(String objectId) {\n",
      "    \tthis.params.put(Constants.OBJECT_ID, objectId);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Configure the verifyToken for the subscription\n",
      "     * \n",
      "     * @param verifyToken The token for the subscription\n",
      "     * @return the {@link InstagramSubscription} instance for method chaining\n",
      "     */\n",
      "\tpublic InstagramSubscription verifyToken(String verifyToken) {\n",
      "\t\tPreconditions.checkEmptyString(verifyToken, \"Invalid 'verifyToken' key\");\n",
      "\n",
      "\t\tthis.params.put(Constants.VERIFY_TOKEN, verifyToken);\n",
      "\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configure the aspect for the subscription\n",
      "\t * \n",
      "\t * @param aspect The aspect of the subscription\n",
      "\t * @return the {@link InstagramSubscription} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramSubscription aspect(String aspect) {\n",
      "\t\tPreconditions.checkEmptyString(aspect, \"Invalid 'aspect' key\");\n",
      "\t\t\n",
      "\t\tthis.params.put(Constants.ASPECT, aspect);\n",
      "\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\t\n",
      "\t/**\n",
      "\t * Configure the latitude for geography subscription\n",
      "\t * @param latitude The latitude for geography subscription\n",
      "\t * @return the {@link InstagramSubscription} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramSubscription latitute(String latitude){\n",
      "\t\tPreconditions.checkValidLatLong(latitude, \"Invalid 'lat' key\");\n",
      "\t\t\n",
      "\t\tthis.params.put(Constants.LATITUDE, latitude);\n",
      "\t\t\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\t\n",
      "\t/**\n",
      "\t * Configure the longitude for geography subscription\n",
      "\t * @param longitude The longitude for geography subscription\n",
      "\t * @return the {@link InstagramSubscription} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramSubscription longitude(String longitude){\n",
      "\t\tPreconditions.checkValidLatLong(longitude, \"Invalid 'lng' key\");\n",
      "\t\t\n",
      "\t\tthis.params.put(Constants.LONGITUDE, longitude);\n",
      "\t\t\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\t\n",
      "\t/**\n",
      "\t * Configure the radius for geography subscription\n",
      "\t * @param radius The radius for geography subscription in metre\n",
      "\t * @return the {@link InstagramSubscription} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramSubscription radius(String radius){\n",
      "\t\tPreconditions.checkValidRadius(radius, \"Invalid 'radius' key\");\n",
      "\t\t\n",
      "\t\tthis.params.put(Constants.RADIUS, radius);\n",
      "\t\t\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configure the connection configuration\n",
      "\t */\n",
      "\tpublic InstagramSubscription requestConfiguration(final InstagramConfig config){\n",
      "\t\tif(config != null) {\n",
      "\t\t\tthis.config = config;\n",
      "\t\t}\n",
      "\t\treturn this;\n",
      "\t}\n",
      "    \n",
      "    /**\n",
      "     * Creates a subscription with the current state of this instance.\n",
      "     * <p/>\n",
      "     * The {@link SubscriptionResponse} holds the result of the subscription such as the identifier\n",
      "     * of the subscription that can be used later to {@linkplain #deleteSubscription(String) delete it}.\n",
      "     *\n",
      "     * @return the result of the subscription\n",
      "     * @throws InstagramException\n",
      "     */\n",
      "\tpublic SubscriptionResponse createSubscription() throws InstagramException {\n",
      "\t\tString callback = params.get(Constants.CALLBACK_URL);\n",
      "\t\tif(callback == null){\n",
      "\t\t\tcallback = \"\";\n",
      "\t\t}\n",
      "\t\tPreconditions.checkEmptyString(callback, \"You must provide a callback url\");\n",
      "\n",
      "        final OAuthRequest request = prepareOAuthRequest(Verbs.POST);\n",
      "\t\trequest.addBodyParameter(Constants.ASPECT, \"media\");\n",
      "\t\t\n",
      "\t\tfor(Map.Entry<String, String> entry: this.params.entrySet()){\n",
      "\t\t\trequest.addBodyParameter(entry.getKey(), entry.getValue());\n",
      "\t\t}\n",
      "\n",
      "        try {\n",
      "            final Response response = request.send();\n",
      "            return getSubscriptionResponse(response.getBody());\n",
      "        } catch (IOException e) {\n",
      "            throw new InstagramException(\"Failed to create subscription\", e);\n",
      "        }\n",
      "\t}\n",
      "\n",
      "    /**\n",
      "     * Deletes a subscription with the specified identifier.\n",
      "     *\n",
      "     * @param id the id of the subscription to remove\n",
      "     */\n",
      "    public SubscriptionResponse deleteSubscription(String id) throws InstagramException {\n",
      "        final OAuthRequest request = prepareOAuthRequest(Verbs.DELETE);\n",
      "        request.addQuerystringParameter(\"id\", id);\n",
      "\n",
      "        try {\n",
      "            final Response response = request.send();\n",
      "            return getSubscriptionResponse(response.getBody());\n",
      "        } catch (IOException e) {\n",
      "            throw new InstagramException(\"Failed to delete subscription with id [\"+id+\"]\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Deletes all the known subscription.\n",
      "     *\n",
      "     * @return the response of this request, holding mainly the code\n",
      "     */\n",
      "\tpublic SubscriptionResponse deleteAllSubscription() throws InstagramException {\n",
      "        final OAuthRequest request = prepareOAuthRequest(Verbs.DELETE);\n",
      "\t\trequest.addQuerystringParameter(Constants.SUBSCRIPTION_TYPE, \"all\");\n",
      "\n",
      "        try {\n",
      "            final Response response = request.send();\n",
      "            return getSubscriptionResponse(response.getBody());\n",
      "        } catch (IOException e) {\n",
      "            throw new InstagramException(\"Failed to delete all subscriptions\", e);\n",
      "        }\n",
      "\t}\n",
      "\n",
      "    /**\n",
      "     * Returns the currently active subscription.\n",
      "     *\n",
      "     * @return the active subscription\n",
      "     */\n",
      "\tpublic SubscriptionsListResponse getSubscriptionList() throws InstagramException {\n",
      "\t\tfinal OAuthRequest request = prepareOAuthRequest(Verbs.GET);\n",
      "\n",
      "        try {\n",
      "            final Response response = request.send();\n",
      "            return getSubscriptionsListResponse(response.getBody());\n",
      "        } catch (IOException e) {\n",
      "            throw new InstagramException(\"Failed to get subscription list\", e);\n",
      "        }\n",
      "\t}\n",
      "\n",
      "    private OAuthRequest prepareOAuthRequest(Verbs verb) {\n",
      "    \tString clientId = params.get(Constants.CLIENT_ID);\n",
      "        Preconditions.checkEmptyString(clientId, \"You must provide a clientId key\");\n",
      "  \n",
      "        String clientSecret = params.get(Constants.CLIENT_SECRET);\n",
      "        Preconditions.checkEmptyString(clientSecret, \"You must provide a clientSecret\");\n",
      "        \n",
      "        final OAuthRequest request = new OAuthRequest(verb, config.getApiURL() + Methods.SUBSCRIPTIONS);\n",
      "        // Add the oauth parameter in the body\n",
      "        request.addQuerystringParameter(Constants.CLIENT_ID, clientId);\n",
      "        request.addQuerystringParameter(Constants.CLIENT_SECRET, clientSecret);\n",
      "        configureConnectionSettings(request, config);\n",
      "        \n",
      "        return request;\n",
      "    }\n",
      "\n",
      "    private SubscriptionResponse getSubscriptionResponse(String jsonBody) throws InstagramException {\n",
      "        Gson gson = new Gson();\n",
      "        SubscriptionResponse response;\n",
      "\n",
      "        try {\n",
      "            response = gson.fromJson(jsonBody, SubscriptionResponse.class);\n",
      "        } catch (Exception e) {\n",
      "            throw new InstagramException(\"Error parsing json to object type \");\n",
      "        }\n",
      "\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private SubscriptionsListResponse getSubscriptionsListResponse(String jsonBody) throws InstagramException {\n",
      "        Gson gson = new Gson();\n",
      "        SubscriptionsListResponse response = null;\n",
      "\n",
      "        try {\n",
      "            response = gson.fromJson(jsonBody, SubscriptionsListResponse.class);\n",
      "        } catch (Exception e) {\n",
      "            throw new InstagramException(\"Error parsing json to object type \");\n",
      "        }\n",
      "\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        StringBuilder builder = new StringBuilder();\n",
      "        builder.append(\"InstagramSubscription [\");\n",
      "        \n",
      "        for(Map.Entry<String, String> entry: this.params.entrySet()){\n",
      "        \tbuilder.append(entry.getKey()).append('=').append(entry.getValue()).append(',');\n",
      "        }\n",
      "        int lastIndexOfComma = builder.lastIndexOf(\",\");\n",
      "        builder.replace(lastIndexOfComma, lastIndexOfComma + 1, \"\");\n",
      "        \n",
      "        builder.append(\"]\");\n",
      "        return builder.toString();\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.jinstagram.InstagramConfig;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>InstagramSubscriptionTest</code> contains tests for the class\n",
      " * <code>{@link InstagramSubscription}</code>.\n",
      " */\n",
      "public class InstagramSubscriptionTest {\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription() constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramSubscription() throws Exception {\n",
      "\n",
      "\t\tInstagramSubscription result = new InstagramSubscription();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription aspect(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testAspect() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tString aspect = \"\";\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.aspect(aspect);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription callback(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testCallback() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tString callback = \"\";\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.callback(callback);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription clientId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testClientId() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tString clientId = \"\";\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.clientId(clientId);\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription clientSecret(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testClientSecret() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tString clientSecret = \"\";\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.clientSecret(clientSecret);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the SubscriptionResponse createSubscription() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testCreateSubscription() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\n",
      "\t\tSubscriptionResponse result = fixture.createSubscription();\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the SubscriptionResponse createSubscription() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testCreateSubscription_2() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\n",
      "\t\tSubscriptionResponse result = fixture.createSubscription();\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the SubscriptionResponse deleteAllSubscription() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testDeleteAllSubscription() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\n",
      "\t\tSubscriptionResponse result = fixture.deleteAllSubscription();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: You must provide a clientId key\n",
      "\t\t// at org.jinstagram.utils.Preconditions.check(Preconditions.java:116)\n",
      "\t\t// at\n",
      "\t\t// org.jinstagram.utils.Preconditions.checkEmptyString(Preconditions.java:48)\n",
      "\t\t// at\n",
      "\t\t// org.jinstagram.realtime.InstagramSubscription.prepareOAuthRequest(InstagramSubscription.java:259)\n",
      "\t\t// at\n",
      "\t\t// org.jinstagram.realtime.InstagramSubscription.deleteAllSubscription(InstagramSubscription.java:230)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the SubscriptionResponse deleteSubscription(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testDeleteSubscription() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tString id = \"\";\n",
      "\n",
      "\t\tSubscriptionResponse result = fixture.deleteSubscription(id);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the SubscriptionsListResponse getSubscriptionList() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testGetSubscriptionList() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\n",
      "\t\tSubscriptionsListResponse result = fixture.getSubscriptionList();\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription latitute(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testLatitute() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tString latitude = \"\";\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.latitute(latitude);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription longitude(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testLongitude() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tString longitude = \"\";\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.longitude(longitude);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription object(SubscriptionType) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testObject() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tSubscriptionType type = SubscriptionType.GEOGRAPHIES;\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.object(type);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription objectId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testObjectId() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tString objectId = \"\";\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.objectId(objectId);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription radius(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testRadius() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tString radius = \"\";\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.radius(radius);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription requestConfiguration(InstagramConfig)\n",
      "\t * method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testRequestConfiguration() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tInstagramConfig config = new InstagramConfig();\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.requestConfiguration(config);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription requestConfiguration(InstagramConfig)\n",
      "\t * method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testRequestConfiguration_2() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tInstagramConfig config = null;\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.requestConfiguration(config);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\tassertEquals(\"InstagramSubscription [callback_url=oob]\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramSubscription verifyToken(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testVerifyToken() throws Exception {\n",
      "\t\tInstagramSubscription fixture = new InstagramSubscription();\n",
      "\t\tString verifyToken = \"\";\n",
      "\n",
      "\t\tInstagramSubscription result = fixture.verifyToken(verifyToken);\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "InstagramSubscription::::callback(java.lang.String)": [
        40,
        46
      ],
      "InstagramSubscription::::clientId(java.lang.String)": [
        54,
        60
      ],
      "InstagramSubscription::::clientSecret(java.lang.String)": [
        67,
        73
      ],
      "InstagramSubscription::::object(org.jinstagram.realtime.SubscriptionType)": [
        80,
        85
      ],
      "InstagramSubscription::::objectId(java.lang.String)": [
        94,
        97
      ],
      "InstagramSubscription::::verifyToken(java.lang.String)": [
        105,
        111
      ],
      "InstagramSubscription::::aspect(java.lang.String)": [
        119,
        125
      ],
      "InstagramSubscription::::latitute(java.lang.String)": [
        132,
        138
      ],
      "InstagramSubscription::::longitude(java.lang.String)": [
        145,
        151
      ],
      "InstagramSubscription::::radius(java.lang.String)": [
        158,
        164
      ],
      "InstagramSubscription::::requestConfiguration(org.jinstagram.InstagramConfig)": [
        169,
        174
      ],
      "InstagramSubscription::::createSubscription()": [
        185,
        205
      ],
      "InstagramSubscription::::deleteSubscription(java.lang.String)": [
        212,
        222
      ],
      "InstagramSubscription::::deleteAllSubscription()": [
        229,
        239
      ],
      "InstagramSubscription::::getSubscriptionList()": [
        246,
        255
      ],
      "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)": [
        257,
        271
      ],
      "InstagramSubscription::::getSubscriptionResponse(java.lang.String)": [
        273,
        284
      ],
      "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)": [
        286,
        297
      ],
      "InstagramSubscription::::toString()": [
        299,
        312
      ]
    },
    "test_method_lines_dic": {
      "InstagramSubscriptionTest::::testInstagramSubscription()": [
        21,
        28
      ],
      "InstagramSubscriptionTest::::testAspect()": [
        37,
        45
      ],
      "InstagramSubscriptionTest::::testCallback()": [
        54,
        62
      ],
      "InstagramSubscriptionTest::::testClientId()": [
        71,
        78
      ],
      "InstagramSubscriptionTest::::testClientSecret()": [
        87,
        95
      ],
      "InstagramSubscriptionTest::::testCreateSubscription()": [
        104,
        111
      ],
      "InstagramSubscriptionTest::::testCreateSubscription_2()": [
        120,
        125
      ],
      "InstagramSubscriptionTest::::testDeleteAllSubscription()": [
        134,
        152
      ],
      "InstagramSubscriptionTest::::testDeleteSubscription()": [
        161,
        169
      ],
      "InstagramSubscriptionTest::::testGetSubscriptionList()": [
        178,
        185
      ],
      "InstagramSubscriptionTest::::testLatitute()": [
        194,
        202
      ],
      "InstagramSubscriptionTest::::testLongitude()": [
        211,
        219
      ],
      "InstagramSubscriptionTest::::testObject()": [
        228,
        236
      ],
      "InstagramSubscriptionTest::::testObjectId()": [
        245,
        254
      ],
      "InstagramSubscriptionTest::::testRadius()": [
        263,
        271
      ],
      "InstagramSubscriptionTest::::testRequestConfiguration()": [
        281,
        289
      ],
      "InstagramSubscriptionTest::::testRequestConfiguration_2()": [
        299,
        307
      ],
      "InstagramSubscriptionTest::::testToString()": [
        316,
        323
      ],
      "InstagramSubscriptionTest::::testVerifyToken()": [
        332,
        339
      ]
    },
    "reverse_method_lines_dic": {
      "40": "InstagramSubscription::::callback(java.lang.String)",
      "41": "InstagramSubscription::::callback(java.lang.String)",
      "42": "InstagramSubscription::::callback(java.lang.String)",
      "43": "InstagramSubscription::::callback(java.lang.String)",
      "44": "InstagramSubscription::::callback(java.lang.String)",
      "45": "InstagramSubscription::::callback(java.lang.String)",
      "46": "InstagramSubscription::::callback(java.lang.String)",
      "54": "InstagramSubscription::::clientId(java.lang.String)",
      "55": "InstagramSubscription::::clientId(java.lang.String)",
      "56": "InstagramSubscription::::clientId(java.lang.String)",
      "57": "InstagramSubscription::::clientId(java.lang.String)",
      "58": "InstagramSubscription::::clientId(java.lang.String)",
      "59": "InstagramSubscription::::clientId(java.lang.String)",
      "60": "InstagramSubscription::::clientId(java.lang.String)",
      "67": "InstagramSubscription::::clientSecret(java.lang.String)",
      "68": "InstagramSubscription::::clientSecret(java.lang.String)",
      "69": "InstagramSubscription::::clientSecret(java.lang.String)",
      "70": "InstagramSubscription::::clientSecret(java.lang.String)",
      "71": "InstagramSubscription::::clientSecret(java.lang.String)",
      "72": "InstagramSubscription::::clientSecret(java.lang.String)",
      "73": "InstagramSubscription::::clientSecret(java.lang.String)",
      "80": "InstagramSubscription::::object(org.jinstagram.realtime.SubscriptionType)",
      "81": "InstagramSubscription::::object(org.jinstagram.realtime.SubscriptionType)",
      "82": "InstagramSubscription::::object(org.jinstagram.realtime.SubscriptionType)",
      "83": "InstagramSubscription::::object(org.jinstagram.realtime.SubscriptionType)",
      "84": "InstagramSubscription::::object(org.jinstagram.realtime.SubscriptionType)",
      "85": "InstagramSubscription::::object(org.jinstagram.realtime.SubscriptionType)",
      "94": "InstagramSubscription::::objectId(java.lang.String)",
      "95": "InstagramSubscription::::objectId(java.lang.String)",
      "96": "InstagramSubscription::::objectId(java.lang.String)",
      "97": "InstagramSubscription::::objectId(java.lang.String)",
      "105": "InstagramSubscription::::verifyToken(java.lang.String)",
      "106": "InstagramSubscription::::verifyToken(java.lang.String)",
      "107": "InstagramSubscription::::verifyToken(java.lang.String)",
      "108": "InstagramSubscription::::verifyToken(java.lang.String)",
      "109": "InstagramSubscription::::verifyToken(java.lang.String)",
      "110": "InstagramSubscription::::verifyToken(java.lang.String)",
      "111": "InstagramSubscription::::verifyToken(java.lang.String)",
      "119": "InstagramSubscription::::aspect(java.lang.String)",
      "120": "InstagramSubscription::::aspect(java.lang.String)",
      "121": "InstagramSubscription::::aspect(java.lang.String)",
      "122": "InstagramSubscription::::aspect(java.lang.String)",
      "123": "InstagramSubscription::::aspect(java.lang.String)",
      "124": "InstagramSubscription::::aspect(java.lang.String)",
      "125": "InstagramSubscription::::aspect(java.lang.String)",
      "132": "InstagramSubscription::::latitute(java.lang.String)",
      "133": "InstagramSubscription::::latitute(java.lang.String)",
      "134": "InstagramSubscription::::latitute(java.lang.String)",
      "135": "InstagramSubscription::::latitute(java.lang.String)",
      "136": "InstagramSubscription::::latitute(java.lang.String)",
      "137": "InstagramSubscription::::latitute(java.lang.String)",
      "138": "InstagramSubscription::::latitute(java.lang.String)",
      "145": "InstagramSubscription::::longitude(java.lang.String)",
      "146": "InstagramSubscription::::longitude(java.lang.String)",
      "147": "InstagramSubscription::::longitude(java.lang.String)",
      "148": "InstagramSubscription::::longitude(java.lang.String)",
      "149": "InstagramSubscription::::longitude(java.lang.String)",
      "150": "InstagramSubscription::::longitude(java.lang.String)",
      "151": "InstagramSubscription::::longitude(java.lang.String)",
      "158": "InstagramSubscription::::radius(java.lang.String)",
      "159": "InstagramSubscription::::radius(java.lang.String)",
      "160": "InstagramSubscription::::radius(java.lang.String)",
      "161": "InstagramSubscription::::radius(java.lang.String)",
      "162": "InstagramSubscription::::radius(java.lang.String)",
      "163": "InstagramSubscription::::radius(java.lang.String)",
      "164": "InstagramSubscription::::radius(java.lang.String)",
      "169": "InstagramSubscription::::requestConfiguration(org.jinstagram.InstagramConfig)",
      "170": "InstagramSubscription::::requestConfiguration(org.jinstagram.InstagramConfig)",
      "171": "InstagramSubscription::::requestConfiguration(org.jinstagram.InstagramConfig)",
      "172": "InstagramSubscription::::requestConfiguration(org.jinstagram.InstagramConfig)",
      "173": "InstagramSubscription::::requestConfiguration(org.jinstagram.InstagramConfig)",
      "174": "InstagramSubscription::::requestConfiguration(org.jinstagram.InstagramConfig)",
      "185": "InstagramSubscription::::createSubscription()",
      "186": "InstagramSubscription::::createSubscription()",
      "187": "InstagramSubscription::::createSubscription()",
      "188": "InstagramSubscription::::createSubscription()",
      "189": "InstagramSubscription::::createSubscription()",
      "190": "InstagramSubscription::::createSubscription()",
      "191": "InstagramSubscription::::createSubscription()",
      "192": "InstagramSubscription::::createSubscription()",
      "193": "InstagramSubscription::::createSubscription()",
      "194": "InstagramSubscription::::createSubscription()",
      "195": "InstagramSubscription::::createSubscription()",
      "196": "InstagramSubscription::::createSubscription()",
      "197": "InstagramSubscription::::createSubscription()",
      "198": "InstagramSubscription::::createSubscription()",
      "199": "InstagramSubscription::::createSubscription()",
      "200": "InstagramSubscription::::createSubscription()",
      "201": "InstagramSubscription::::createSubscription()",
      "202": "InstagramSubscription::::createSubscription()",
      "203": "InstagramSubscription::::createSubscription()",
      "204": "InstagramSubscription::::createSubscription()",
      "205": "InstagramSubscription::::createSubscription()",
      "212": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "213": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "214": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "215": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "216": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "217": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "218": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "219": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "220": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "221": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "222": "InstagramSubscription::::deleteSubscription(java.lang.String)",
      "229": "InstagramSubscription::::deleteAllSubscription()",
      "230": "InstagramSubscription::::deleteAllSubscription()",
      "231": "InstagramSubscription::::deleteAllSubscription()",
      "232": "InstagramSubscription::::deleteAllSubscription()",
      "233": "InstagramSubscription::::deleteAllSubscription()",
      "234": "InstagramSubscription::::deleteAllSubscription()",
      "235": "InstagramSubscription::::deleteAllSubscription()",
      "236": "InstagramSubscription::::deleteAllSubscription()",
      "237": "InstagramSubscription::::deleteAllSubscription()",
      "238": "InstagramSubscription::::deleteAllSubscription()",
      "239": "InstagramSubscription::::deleteAllSubscription()",
      "246": "InstagramSubscription::::getSubscriptionList()",
      "247": "InstagramSubscription::::getSubscriptionList()",
      "248": "InstagramSubscription::::getSubscriptionList()",
      "249": "InstagramSubscription::::getSubscriptionList()",
      "250": "InstagramSubscription::::getSubscriptionList()",
      "251": "InstagramSubscription::::getSubscriptionList()",
      "252": "InstagramSubscription::::getSubscriptionList()",
      "253": "InstagramSubscription::::getSubscriptionList()",
      "254": "InstagramSubscription::::getSubscriptionList()",
      "255": "InstagramSubscription::::getSubscriptionList()",
      "257": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "258": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "259": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "260": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "261": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "262": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "263": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "264": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "265": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "266": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "267": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "268": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "269": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "270": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "271": "InstagramSubscription::::prepareOAuthRequest(org.jinstagram.http.Verbs)",
      "273": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "274": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "275": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "276": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "277": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "278": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "279": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "280": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "281": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "282": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "283": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "284": "InstagramSubscription::::getSubscriptionResponse(java.lang.String)",
      "286": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "287": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "288": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "289": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "290": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "291": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "292": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "293": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "294": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "295": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "296": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "297": "InstagramSubscription::::getSubscriptionsListResponse(java.lang.String)",
      "299": "InstagramSubscription::::toString()",
      "300": "InstagramSubscription::::toString()",
      "301": "InstagramSubscription::::toString()",
      "302": "InstagramSubscription::::toString()",
      "303": "InstagramSubscription::::toString()",
      "304": "InstagramSubscription::::toString()",
      "305": "InstagramSubscription::::toString()",
      "306": "InstagramSubscription::::toString()",
      "307": "InstagramSubscription::::toString()",
      "308": "InstagramSubscription::::toString()",
      "309": "InstagramSubscription::::toString()",
      "310": "InstagramSubscription::::toString()",
      "311": "InstagramSubscription::::toString()",
      "312": "InstagramSubscription::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "21": "InstagramSubscriptionTest::::testInstagramSubscription()",
      "22": "InstagramSubscriptionTest::::testInstagramSubscription()",
      "23": "InstagramSubscriptionTest::::testInstagramSubscription()",
      "24": "InstagramSubscriptionTest::::testInstagramSubscription()",
      "25": "InstagramSubscriptionTest::::testInstagramSubscription()",
      "26": "InstagramSubscriptionTest::::testInstagramSubscription()",
      "27": "InstagramSubscriptionTest::::testInstagramSubscription()",
      "28": "InstagramSubscriptionTest::::testInstagramSubscription()",
      "37": "InstagramSubscriptionTest::::testAspect()",
      "38": "InstagramSubscriptionTest::::testAspect()",
      "39": "InstagramSubscriptionTest::::testAspect()",
      "40": "InstagramSubscriptionTest::::testAspect()",
      "41": "InstagramSubscriptionTest::::testAspect()",
      "42": "InstagramSubscriptionTest::::testAspect()",
      "43": "InstagramSubscriptionTest::::testAspect()",
      "44": "InstagramSubscriptionTest::::testAspect()",
      "45": "InstagramSubscriptionTest::::testAspect()",
      "54": "InstagramSubscriptionTest::::testCallback()",
      "55": "InstagramSubscriptionTest::::testCallback()",
      "56": "InstagramSubscriptionTest::::testCallback()",
      "57": "InstagramSubscriptionTest::::testCallback()",
      "58": "InstagramSubscriptionTest::::testCallback()",
      "59": "InstagramSubscriptionTest::::testCallback()",
      "60": "InstagramSubscriptionTest::::testCallback()",
      "61": "InstagramSubscriptionTest::::testCallback()",
      "62": "InstagramSubscriptionTest::::testCallback()",
      "71": "InstagramSubscriptionTest::::testClientId()",
      "72": "InstagramSubscriptionTest::::testClientId()",
      "73": "InstagramSubscriptionTest::::testClientId()",
      "74": "InstagramSubscriptionTest::::testClientId()",
      "75": "InstagramSubscriptionTest::::testClientId()",
      "76": "InstagramSubscriptionTest::::testClientId()",
      "77": "InstagramSubscriptionTest::::testClientId()",
      "78": "InstagramSubscriptionTest::::testClientId()",
      "87": "InstagramSubscriptionTest::::testClientSecret()",
      "88": "InstagramSubscriptionTest::::testClientSecret()",
      "89": "InstagramSubscriptionTest::::testClientSecret()",
      "90": "InstagramSubscriptionTest::::testClientSecret()",
      "91": "InstagramSubscriptionTest::::testClientSecret()",
      "92": "InstagramSubscriptionTest::::testClientSecret()",
      "93": "InstagramSubscriptionTest::::testClientSecret()",
      "94": "InstagramSubscriptionTest::::testClientSecret()",
      "95": "InstagramSubscriptionTest::::testClientSecret()",
      "104": "InstagramSubscriptionTest::::testCreateSubscription()",
      "105": "InstagramSubscriptionTest::::testCreateSubscription()",
      "106": "InstagramSubscriptionTest::::testCreateSubscription()",
      "107": "InstagramSubscriptionTest::::testCreateSubscription()",
      "108": "InstagramSubscriptionTest::::testCreateSubscription()",
      "109": "InstagramSubscriptionTest::::testCreateSubscription()",
      "110": "InstagramSubscriptionTest::::testCreateSubscription()",
      "111": "InstagramSubscriptionTest::::testCreateSubscription()",
      "120": "InstagramSubscriptionTest::::testCreateSubscription_2()",
      "121": "InstagramSubscriptionTest::::testCreateSubscription_2()",
      "122": "InstagramSubscriptionTest::::testCreateSubscription_2()",
      "123": "InstagramSubscriptionTest::::testCreateSubscription_2()",
      "124": "InstagramSubscriptionTest::::testCreateSubscription_2()",
      "125": "InstagramSubscriptionTest::::testCreateSubscription_2()",
      "134": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "135": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "136": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "137": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "138": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "139": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "140": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "141": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "142": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "143": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "144": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "145": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "146": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "147": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "148": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "149": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "150": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "151": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "152": "InstagramSubscriptionTest::::testDeleteAllSubscription()",
      "161": "InstagramSubscriptionTest::::testDeleteSubscription()",
      "162": "InstagramSubscriptionTest::::testDeleteSubscription()",
      "163": "InstagramSubscriptionTest::::testDeleteSubscription()",
      "164": "InstagramSubscriptionTest::::testDeleteSubscription()",
      "165": "InstagramSubscriptionTest::::testDeleteSubscription()",
      "166": "InstagramSubscriptionTest::::testDeleteSubscription()",
      "167": "InstagramSubscriptionTest::::testDeleteSubscription()",
      "168": "InstagramSubscriptionTest::::testDeleteSubscription()",
      "169": "InstagramSubscriptionTest::::testDeleteSubscription()",
      "178": "InstagramSubscriptionTest::::testGetSubscriptionList()",
      "179": "InstagramSubscriptionTest::::testGetSubscriptionList()",
      "180": "InstagramSubscriptionTest::::testGetSubscriptionList()",
      "181": "InstagramSubscriptionTest::::testGetSubscriptionList()",
      "182": "InstagramSubscriptionTest::::testGetSubscriptionList()",
      "183": "InstagramSubscriptionTest::::testGetSubscriptionList()",
      "184": "InstagramSubscriptionTest::::testGetSubscriptionList()",
      "185": "InstagramSubscriptionTest::::testGetSubscriptionList()",
      "194": "InstagramSubscriptionTest::::testLatitute()",
      "195": "InstagramSubscriptionTest::::testLatitute()",
      "196": "InstagramSubscriptionTest::::testLatitute()",
      "197": "InstagramSubscriptionTest::::testLatitute()",
      "198": "InstagramSubscriptionTest::::testLatitute()",
      "199": "InstagramSubscriptionTest::::testLatitute()",
      "200": "InstagramSubscriptionTest::::testLatitute()",
      "201": "InstagramSubscriptionTest::::testLatitute()",
      "202": "InstagramSubscriptionTest::::testLatitute()",
      "211": "InstagramSubscriptionTest::::testLongitude()",
      "212": "InstagramSubscriptionTest::::testLongitude()",
      "213": "InstagramSubscriptionTest::::testLongitude()",
      "214": "InstagramSubscriptionTest::::testLongitude()",
      "215": "InstagramSubscriptionTest::::testLongitude()",
      "216": "InstagramSubscriptionTest::::testLongitude()",
      "217": "InstagramSubscriptionTest::::testLongitude()",
      "218": "InstagramSubscriptionTest::::testLongitude()",
      "219": "InstagramSubscriptionTest::::testLongitude()",
      "228": "InstagramSubscriptionTest::::testObject()",
      "229": "InstagramSubscriptionTest::::testObject()",
      "230": "InstagramSubscriptionTest::::testObject()",
      "231": "InstagramSubscriptionTest::::testObject()",
      "232": "InstagramSubscriptionTest::::testObject()",
      "233": "InstagramSubscriptionTest::::testObject()",
      "234": "InstagramSubscriptionTest::::testObject()",
      "235": "InstagramSubscriptionTest::::testObject()",
      "236": "InstagramSubscriptionTest::::testObject()",
      "245": "InstagramSubscriptionTest::::testObjectId()",
      "246": "InstagramSubscriptionTest::::testObjectId()",
      "247": "InstagramSubscriptionTest::::testObjectId()",
      "248": "InstagramSubscriptionTest::::testObjectId()",
      "249": "InstagramSubscriptionTest::::testObjectId()",
      "250": "InstagramSubscriptionTest::::testObjectId()",
      "251": "InstagramSubscriptionTest::::testObjectId()",
      "252": "InstagramSubscriptionTest::::testObjectId()",
      "253": "InstagramSubscriptionTest::::testObjectId()",
      "254": "InstagramSubscriptionTest::::testObjectId()",
      "263": "InstagramSubscriptionTest::::testRadius()",
      "264": "InstagramSubscriptionTest::::testRadius()",
      "265": "InstagramSubscriptionTest::::testRadius()",
      "266": "InstagramSubscriptionTest::::testRadius()",
      "267": "InstagramSubscriptionTest::::testRadius()",
      "268": "InstagramSubscriptionTest::::testRadius()",
      "269": "InstagramSubscriptionTest::::testRadius()",
      "270": "InstagramSubscriptionTest::::testRadius()",
      "271": "InstagramSubscriptionTest::::testRadius()",
      "281": "InstagramSubscriptionTest::::testRequestConfiguration()",
      "282": "InstagramSubscriptionTest::::testRequestConfiguration()",
      "283": "InstagramSubscriptionTest::::testRequestConfiguration()",
      "284": "InstagramSubscriptionTest::::testRequestConfiguration()",
      "285": "InstagramSubscriptionTest::::testRequestConfiguration()",
      "286": "InstagramSubscriptionTest::::testRequestConfiguration()",
      "287": "InstagramSubscriptionTest::::testRequestConfiguration()",
      "288": "InstagramSubscriptionTest::::testRequestConfiguration()",
      "289": "InstagramSubscriptionTest::::testRequestConfiguration()",
      "299": "InstagramSubscriptionTest::::testRequestConfiguration_2()",
      "300": "InstagramSubscriptionTest::::testRequestConfiguration_2()",
      "301": "InstagramSubscriptionTest::::testRequestConfiguration_2()",
      "302": "InstagramSubscriptionTest::::testRequestConfiguration_2()",
      "303": "InstagramSubscriptionTest::::testRequestConfiguration_2()",
      "304": "InstagramSubscriptionTest::::testRequestConfiguration_2()",
      "305": "InstagramSubscriptionTest::::testRequestConfiguration_2()",
      "306": "InstagramSubscriptionTest::::testRequestConfiguration_2()",
      "307": "InstagramSubscriptionTest::::testRequestConfiguration_2()",
      "316": "InstagramSubscriptionTest::::testToString()",
      "317": "InstagramSubscriptionTest::::testToString()",
      "318": "InstagramSubscriptionTest::::testToString()",
      "319": "InstagramSubscriptionTest::::testToString()",
      "320": "InstagramSubscriptionTest::::testToString()",
      "321": "InstagramSubscriptionTest::::testToString()",
      "322": "InstagramSubscriptionTest::::testToString()",
      "323": "InstagramSubscriptionTest::::testToString()",
      "332": "InstagramSubscriptionTest::::testVerifyToken()",
      "333": "InstagramSubscriptionTest::::testVerifyToken()",
      "334": "InstagramSubscriptionTest::::testVerifyToken()",
      "335": "InstagramSubscriptionTest::::testVerifyToken()",
      "336": "InstagramSubscriptionTest::::testVerifyToken()",
      "337": "InstagramSubscriptionTest::::testVerifyToken()",
      "338": "InstagramSubscriptionTest::::testVerifyToken()",
      "339": "InstagramSubscriptionTest::::testVerifyToken()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          28
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          37,
          45
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          54,
          62
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          71,
          78
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          87,
          95
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          104,
          111
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32,
          186,
          187,
          190,
          258
        ],
        "label": "InstagramSubscription::::createSubscription()"
      },
      {
        "test_lines": [
          120,
          125
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32,
          186,
          187,
          190,
          258
        ],
        "label": "InstagramSubscription::::createSubscription()"
      },
      {
        "test_lines": [
          134,
          152
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32,
          258
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          161,
          169
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32,
          258
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          178,
          185
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32,
          258
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          194,
          202
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          211,
          219
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          228,
          236
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32,
          82,
          84
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          245,
          254
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32,
          95,
          96
        ],
        "label": "InstagramSubscription::::objectId(java.lang.String)"
      },
      {
        "test_lines": [
          263,
          271
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          281,
          289
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32,
          170,
          171,
          173
        ],
        "label": "InstagramSubscription::::requestConfiguration(org.jinstagram.InstagramConfig)"
      },
      {
        "test_lines": [
          299,
          307
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32,
          170,
          173
        ],
        "label": "InstagramSubscription::::requestConfiguration(org.jinstagram.InstagramConfig)"
      },
      {
        "test_lines": [
          316,
          323
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32,
          301,
          302,
          304,
          305,
          306,
          307,
          308,
          310,
          311
        ],
        "label": "InstagramSubscription::::toString()"
      },
      {
        "test_lines": [
          332,
          339
        ],
        "covered_lines": [
          24,
          29,
          30,
          31,
          32
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/realtime/Constants.java": {
    "class_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "class Constants {\n",
      "\tpublic static final String CLIENT_ID = \"client_id\";\n",
      "\n",
      "\tpublic static final String CLIENT_SECRET = \"client_secret\";\n",
      "\n",
      "\tpublic static final String SUBSCRIPTION_TYPE = \"object\";\n",
      "\n",
      "    public static final String OBJECT_ID = \"object_id\";\n",
      "\n",
      "\tpublic static final String VERIFY_TOKEN = \"verify_token\";\n",
      "\n",
      "\tpublic static final String CALLBACK_URL = \"callback_url\";\n",
      "\n",
      "\tpublic static final String ASPECT = \"aspect\";\n",
      "\t\n",
      "\tpublic static final String LATITUDE = \"lat\";\n",
      "\t\n",
      "\tpublic static final String LONGITUDE = \"lng\";\n",
      "\t\n",
      "\tpublic static final String RADIUS = \"radius\";\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>ConstantsTest</code> contains tests for the class\n",
      " * <code>{@link Constants}</code>.\n",
      " */\n",
      "public class ConstantsTest {\n",
      "\t/**\n",
      "\t * Run the Constants() constructor test.\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testConstants_1() throws Exception {\n",
      "\t\tConstants result = new Constants();\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "ConstantsTest::::testConstants_1()": [
        17,
        21
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "17": "ConstantsTest::::testConstants_1()",
      "18": "ConstantsTest::::testConstants_1()",
      "19": "ConstantsTest::::testConstants_1()",
      "20": "ConstantsTest::::testConstants_1()",
      "21": "ConstantsTest::::testConstants_1()"
    },
    "tests": [
      {
        "test_lines": [
          17,
          21
        ],
        "covered_lines": [
          3
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/realtime/SubscriptionResponseData.java": {
    "class_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "@Deprecated\n",
      "public class SubscriptionResponseData {\n",
      "\n",
      "\t@SerializedName(\"object\")\n",
      "\tprivate String object;\n",
      "\n",
      "\t@SerializedName(\"object_id\")\n",
      "\tprivate String objectId;\n",
      "\n",
      "\t@SerializedName(\"aspect\")\n",
      "\tprivate String aspect;\n",
      "\n",
      "\t@SerializedName(\"callback_url\")\n",
      "\tprivate String callbackUrl;\n",
      "\n",
      "\t@SerializedName(\"type\")\n",
      "\tprivate String type;\n",
      "\n",
      "\t@SerializedName(\"id\")\n",
      "\tprivate String id;\n",
      "\n",
      "\t/**\n",
      "\t * @return the object\n",
      "\t */\n",
      "\tpublic String getObject() {\n",
      "\t\treturn object;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param object the object to set\n",
      "\t */\n",
      "\tpublic void setObject(String object) {\n",
      "\t\tthis.object = object;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the objectId\n",
      "\t */\n",
      "\tpublic String getObjectId() {\n",
      "\t\treturn objectId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param objectId the objectId to set\n",
      "\t */\n",
      "\tpublic void setObjectId(String objectId) {\n",
      "\t\tthis.objectId = objectId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the aspect\n",
      "\t */\n",
      "\tpublic String getAspect() {\n",
      "\t\treturn aspect;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param aspect the aspect to set\n",
      "\t */\n",
      "\tpublic void setAspect(String aspect) {\n",
      "\t\tthis.aspect = aspect;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the callbackUrl\n",
      "\t */\n",
      "\tpublic String getCallbackUrl() {\n",
      "\t\treturn callbackUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param callbackUrl the callbackUrl to set\n",
      "\t */\n",
      "\tpublic void setCallbackUrl(String callbackUrl) {\n",
      "\t\tthis.callbackUrl = callbackUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the type\n",
      "\t */\n",
      "\tpublic String getType() {\n",
      "\t\treturn type;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param type the type to set\n",
      "\t */\n",
      "\tpublic void setType(String type) {\n",
      "\t\tthis.type = type;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the id\n",
      "\t */\n",
      "\tpublic String getId() {\n",
      "\t\treturn id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param id the id to set\n",
      "\t */\n",
      "\tpublic void setId(String id) {\n",
      "\t\tthis.id = id;\n",
      "\t}\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>SubscriptionResponseDataTest</code> contains tests for the\n",
      " * class <code>{@link SubscriptionResponseData}</code>.\n",
      " */\n",
      "public class SubscriptionResponseDataTest {\n",
      "\t/**\n",
      "\t * Run the String getAspect() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetAspect() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\n",
      "\t\tString result = fixture.getAspect();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getCallbackUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCallbackUrl() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\n",
      "\t\tString result = fixture.getCallbackUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetId() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\n",
      "\t\tString result = fixture.getId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getObject() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetObject() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\n",
      "\t\tString result = fixture.getObject();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getObjectId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetObjectId() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\n",
      "\t\tString result = fixture.getObjectId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getType() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetType() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\n",
      "\t\tString result = fixture.getType();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setAspect(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetAspect() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tString aspect = \"\";\n",
      "\n",
      "\t\tfixture.setAspect(aspect);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCallbackUrl(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCallbackUrl() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tString callbackUrl = \"\";\n",
      "\n",
      "\t\tfixture.setCallbackUrl(callbackUrl);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetId() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tString id = \"\";\n",
      "\n",
      "\t\tfixture.setId(id);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setObject(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetObject() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tString object = \"\";\n",
      "\n",
      "\t\tfixture.setObject(object);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setObjectId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetObjectId() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tString objectId = \"\";\n",
      "\n",
      "\t\tfixture.setObjectId(objectId);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setType(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetType() throws Exception {\n",
      "\t\tSubscriptionResponseData fixture = new SubscriptionResponseData();\n",
      "\t\tfixture.setCallbackUrl(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setAspect(\"\");\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tString type = \"\";\n",
      "\n",
      "\t\tfixture.setType(type);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "SubscriptionResponseData::::getObject()": [
        29,
        31
      ],
      "SubscriptionResponseData::::setObject(java.lang.String)": [
        36,
        38
      ],
      "SubscriptionResponseData::::getObjectId()": [
        43,
        45
      ],
      "SubscriptionResponseData::::setObjectId(java.lang.String)": [
        50,
        52
      ],
      "SubscriptionResponseData::::getAspect()": [
        57,
        59
      ],
      "SubscriptionResponseData::::setAspect(java.lang.String)": [
        64,
        66
      ],
      "SubscriptionResponseData::::getCallbackUrl()": [
        71,
        73
      ],
      "SubscriptionResponseData::::setCallbackUrl(java.lang.String)": [
        78,
        80
      ],
      "SubscriptionResponseData::::getType()": [
        85,
        87
      ],
      "SubscriptionResponseData::::setType(java.lang.String)": [
        92,
        94
      ],
      "SubscriptionResponseData::::getId()": [
        99,
        101
      ],
      "SubscriptionResponseData::::setId(java.lang.String)": [
        106,
        108
      ]
    },
    "test_method_lines_dic": {
      "SubscriptionResponseDataTest::::testGetAspect()": [
        18,
        32
      ],
      "SubscriptionResponseDataTest::::testGetCallbackUrl()": [
        41,
        55
      ],
      "SubscriptionResponseDataTest::::testGetId()": [
        64,
        78
      ],
      "SubscriptionResponseDataTest::::testGetObject()": [
        87,
        101
      ],
      "SubscriptionResponseDataTest::::testGetObjectId()": [
        110,
        124
      ],
      "SubscriptionResponseDataTest::::testGetType()": [
        133,
        147
      ],
      "SubscriptionResponseDataTest::::testSetAspect()": [
        156,
        170
      ],
      "SubscriptionResponseDataTest::::testSetCallbackUrl()": [
        179,
        193
      ],
      "SubscriptionResponseDataTest::::testSetId()": [
        202,
        216
      ],
      "SubscriptionResponseDataTest::::testSetObject()": [
        225,
        239
      ],
      "SubscriptionResponseDataTest::::testSetObjectId()": [
        248,
        262
      ],
      "SubscriptionResponseDataTest::::testSetType()": [
        271,
        285
      ]
    },
    "reverse_method_lines_dic": {
      "29": "SubscriptionResponseData::::getObject()",
      "30": "SubscriptionResponseData::::getObject()",
      "31": "SubscriptionResponseData::::getObject()",
      "36": "SubscriptionResponseData::::setObject(java.lang.String)",
      "37": "SubscriptionResponseData::::setObject(java.lang.String)",
      "38": "SubscriptionResponseData::::setObject(java.lang.String)",
      "43": "SubscriptionResponseData::::getObjectId()",
      "44": "SubscriptionResponseData::::getObjectId()",
      "45": "SubscriptionResponseData::::getObjectId()",
      "50": "SubscriptionResponseData::::setObjectId(java.lang.String)",
      "51": "SubscriptionResponseData::::setObjectId(java.lang.String)",
      "52": "SubscriptionResponseData::::setObjectId(java.lang.String)",
      "57": "SubscriptionResponseData::::getAspect()",
      "58": "SubscriptionResponseData::::getAspect()",
      "59": "SubscriptionResponseData::::getAspect()",
      "64": "SubscriptionResponseData::::setAspect(java.lang.String)",
      "65": "SubscriptionResponseData::::setAspect(java.lang.String)",
      "66": "SubscriptionResponseData::::setAspect(java.lang.String)",
      "71": "SubscriptionResponseData::::getCallbackUrl()",
      "72": "SubscriptionResponseData::::getCallbackUrl()",
      "73": "SubscriptionResponseData::::getCallbackUrl()",
      "78": "SubscriptionResponseData::::setCallbackUrl(java.lang.String)",
      "79": "SubscriptionResponseData::::setCallbackUrl(java.lang.String)",
      "80": "SubscriptionResponseData::::setCallbackUrl(java.lang.String)",
      "85": "SubscriptionResponseData::::getType()",
      "86": "SubscriptionResponseData::::getType()",
      "87": "SubscriptionResponseData::::getType()",
      "92": "SubscriptionResponseData::::setType(java.lang.String)",
      "93": "SubscriptionResponseData::::setType(java.lang.String)",
      "94": "SubscriptionResponseData::::setType(java.lang.String)",
      "99": "SubscriptionResponseData::::getId()",
      "100": "SubscriptionResponseData::::getId()",
      "101": "SubscriptionResponseData::::getId()",
      "106": "SubscriptionResponseData::::setId(java.lang.String)",
      "107": "SubscriptionResponseData::::setId(java.lang.String)",
      "108": "SubscriptionResponseData::::setId(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "18": "SubscriptionResponseDataTest::::testGetAspect()",
      "19": "SubscriptionResponseDataTest::::testGetAspect()",
      "20": "SubscriptionResponseDataTest::::testGetAspect()",
      "21": "SubscriptionResponseDataTest::::testGetAspect()",
      "22": "SubscriptionResponseDataTest::::testGetAspect()",
      "23": "SubscriptionResponseDataTest::::testGetAspect()",
      "24": "SubscriptionResponseDataTest::::testGetAspect()",
      "25": "SubscriptionResponseDataTest::::testGetAspect()",
      "26": "SubscriptionResponseDataTest::::testGetAspect()",
      "27": "SubscriptionResponseDataTest::::testGetAspect()",
      "28": "SubscriptionResponseDataTest::::testGetAspect()",
      "29": "SubscriptionResponseDataTest::::testGetAspect()",
      "30": "SubscriptionResponseDataTest::::testGetAspect()",
      "31": "SubscriptionResponseDataTest::::testGetAspect()",
      "32": "SubscriptionResponseDataTest::::testGetAspect()",
      "41": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "42": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "43": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "44": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "45": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "46": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "47": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "48": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "49": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "50": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "51": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "52": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "53": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "54": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "55": "SubscriptionResponseDataTest::::testGetCallbackUrl()",
      "64": "SubscriptionResponseDataTest::::testGetId()",
      "65": "SubscriptionResponseDataTest::::testGetId()",
      "66": "SubscriptionResponseDataTest::::testGetId()",
      "67": "SubscriptionResponseDataTest::::testGetId()",
      "68": "SubscriptionResponseDataTest::::testGetId()",
      "69": "SubscriptionResponseDataTest::::testGetId()",
      "70": "SubscriptionResponseDataTest::::testGetId()",
      "71": "SubscriptionResponseDataTest::::testGetId()",
      "72": "SubscriptionResponseDataTest::::testGetId()",
      "73": "SubscriptionResponseDataTest::::testGetId()",
      "74": "SubscriptionResponseDataTest::::testGetId()",
      "75": "SubscriptionResponseDataTest::::testGetId()",
      "76": "SubscriptionResponseDataTest::::testGetId()",
      "77": "SubscriptionResponseDataTest::::testGetId()",
      "78": "SubscriptionResponseDataTest::::testGetId()",
      "87": "SubscriptionResponseDataTest::::testGetObject()",
      "88": "SubscriptionResponseDataTest::::testGetObject()",
      "89": "SubscriptionResponseDataTest::::testGetObject()",
      "90": "SubscriptionResponseDataTest::::testGetObject()",
      "91": "SubscriptionResponseDataTest::::testGetObject()",
      "92": "SubscriptionResponseDataTest::::testGetObject()",
      "93": "SubscriptionResponseDataTest::::testGetObject()",
      "94": "SubscriptionResponseDataTest::::testGetObject()",
      "95": "SubscriptionResponseDataTest::::testGetObject()",
      "96": "SubscriptionResponseDataTest::::testGetObject()",
      "97": "SubscriptionResponseDataTest::::testGetObject()",
      "98": "SubscriptionResponseDataTest::::testGetObject()",
      "99": "SubscriptionResponseDataTest::::testGetObject()",
      "100": "SubscriptionResponseDataTest::::testGetObject()",
      "101": "SubscriptionResponseDataTest::::testGetObject()",
      "110": "SubscriptionResponseDataTest::::testGetObjectId()",
      "111": "SubscriptionResponseDataTest::::testGetObjectId()",
      "112": "SubscriptionResponseDataTest::::testGetObjectId()",
      "113": "SubscriptionResponseDataTest::::testGetObjectId()",
      "114": "SubscriptionResponseDataTest::::testGetObjectId()",
      "115": "SubscriptionResponseDataTest::::testGetObjectId()",
      "116": "SubscriptionResponseDataTest::::testGetObjectId()",
      "117": "SubscriptionResponseDataTest::::testGetObjectId()",
      "118": "SubscriptionResponseDataTest::::testGetObjectId()",
      "119": "SubscriptionResponseDataTest::::testGetObjectId()",
      "120": "SubscriptionResponseDataTest::::testGetObjectId()",
      "121": "SubscriptionResponseDataTest::::testGetObjectId()",
      "122": "SubscriptionResponseDataTest::::testGetObjectId()",
      "123": "SubscriptionResponseDataTest::::testGetObjectId()",
      "124": "SubscriptionResponseDataTest::::testGetObjectId()",
      "133": "SubscriptionResponseDataTest::::testGetType()",
      "134": "SubscriptionResponseDataTest::::testGetType()",
      "135": "SubscriptionResponseDataTest::::testGetType()",
      "136": "SubscriptionResponseDataTest::::testGetType()",
      "137": "SubscriptionResponseDataTest::::testGetType()",
      "138": "SubscriptionResponseDataTest::::testGetType()",
      "139": "SubscriptionResponseDataTest::::testGetType()",
      "140": "SubscriptionResponseDataTest::::testGetType()",
      "141": "SubscriptionResponseDataTest::::testGetType()",
      "142": "SubscriptionResponseDataTest::::testGetType()",
      "143": "SubscriptionResponseDataTest::::testGetType()",
      "144": "SubscriptionResponseDataTest::::testGetType()",
      "145": "SubscriptionResponseDataTest::::testGetType()",
      "146": "SubscriptionResponseDataTest::::testGetType()",
      "147": "SubscriptionResponseDataTest::::testGetType()",
      "156": "SubscriptionResponseDataTest::::testSetAspect()",
      "157": "SubscriptionResponseDataTest::::testSetAspect()",
      "158": "SubscriptionResponseDataTest::::testSetAspect()",
      "159": "SubscriptionResponseDataTest::::testSetAspect()",
      "160": "SubscriptionResponseDataTest::::testSetAspect()",
      "161": "SubscriptionResponseDataTest::::testSetAspect()",
      "162": "SubscriptionResponseDataTest::::testSetAspect()",
      "163": "SubscriptionResponseDataTest::::testSetAspect()",
      "164": "SubscriptionResponseDataTest::::testSetAspect()",
      "165": "SubscriptionResponseDataTest::::testSetAspect()",
      "166": "SubscriptionResponseDataTest::::testSetAspect()",
      "167": "SubscriptionResponseDataTest::::testSetAspect()",
      "168": "SubscriptionResponseDataTest::::testSetAspect()",
      "169": "SubscriptionResponseDataTest::::testSetAspect()",
      "170": "SubscriptionResponseDataTest::::testSetAspect()",
      "179": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "180": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "181": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "182": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "183": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "184": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "185": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "186": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "187": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "188": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "189": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "190": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "191": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "192": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "193": "SubscriptionResponseDataTest::::testSetCallbackUrl()",
      "202": "SubscriptionResponseDataTest::::testSetId()",
      "203": "SubscriptionResponseDataTest::::testSetId()",
      "204": "SubscriptionResponseDataTest::::testSetId()",
      "205": "SubscriptionResponseDataTest::::testSetId()",
      "206": "SubscriptionResponseDataTest::::testSetId()",
      "207": "SubscriptionResponseDataTest::::testSetId()",
      "208": "SubscriptionResponseDataTest::::testSetId()",
      "209": "SubscriptionResponseDataTest::::testSetId()",
      "210": "SubscriptionResponseDataTest::::testSetId()",
      "211": "SubscriptionResponseDataTest::::testSetId()",
      "212": "SubscriptionResponseDataTest::::testSetId()",
      "213": "SubscriptionResponseDataTest::::testSetId()",
      "214": "SubscriptionResponseDataTest::::testSetId()",
      "215": "SubscriptionResponseDataTest::::testSetId()",
      "216": "SubscriptionResponseDataTest::::testSetId()",
      "225": "SubscriptionResponseDataTest::::testSetObject()",
      "226": "SubscriptionResponseDataTest::::testSetObject()",
      "227": "SubscriptionResponseDataTest::::testSetObject()",
      "228": "SubscriptionResponseDataTest::::testSetObject()",
      "229": "SubscriptionResponseDataTest::::testSetObject()",
      "230": "SubscriptionResponseDataTest::::testSetObject()",
      "231": "SubscriptionResponseDataTest::::testSetObject()",
      "232": "SubscriptionResponseDataTest::::testSetObject()",
      "233": "SubscriptionResponseDataTest::::testSetObject()",
      "234": "SubscriptionResponseDataTest::::testSetObject()",
      "235": "SubscriptionResponseDataTest::::testSetObject()",
      "236": "SubscriptionResponseDataTest::::testSetObject()",
      "237": "SubscriptionResponseDataTest::::testSetObject()",
      "238": "SubscriptionResponseDataTest::::testSetObject()",
      "239": "SubscriptionResponseDataTest::::testSetObject()",
      "248": "SubscriptionResponseDataTest::::testSetObjectId()",
      "249": "SubscriptionResponseDataTest::::testSetObjectId()",
      "250": "SubscriptionResponseDataTest::::testSetObjectId()",
      "251": "SubscriptionResponseDataTest::::testSetObjectId()",
      "252": "SubscriptionResponseDataTest::::testSetObjectId()",
      "253": "SubscriptionResponseDataTest::::testSetObjectId()",
      "254": "SubscriptionResponseDataTest::::testSetObjectId()",
      "255": "SubscriptionResponseDataTest::::testSetObjectId()",
      "256": "SubscriptionResponseDataTest::::testSetObjectId()",
      "257": "SubscriptionResponseDataTest::::testSetObjectId()",
      "258": "SubscriptionResponseDataTest::::testSetObjectId()",
      "259": "SubscriptionResponseDataTest::::testSetObjectId()",
      "260": "SubscriptionResponseDataTest::::testSetObjectId()",
      "261": "SubscriptionResponseDataTest::::testSetObjectId()",
      "262": "SubscriptionResponseDataTest::::testSetObjectId()",
      "271": "SubscriptionResponseDataTest::::testSetType()",
      "272": "SubscriptionResponseDataTest::::testSetType()",
      "273": "SubscriptionResponseDataTest::::testSetType()",
      "274": "SubscriptionResponseDataTest::::testSetType()",
      "275": "SubscriptionResponseDataTest::::testSetType()",
      "276": "SubscriptionResponseDataTest::::testSetType()",
      "277": "SubscriptionResponseDataTest::::testSetType()",
      "278": "SubscriptionResponseDataTest::::testSetType()",
      "279": "SubscriptionResponseDataTest::::testSetType()",
      "280": "SubscriptionResponseDataTest::::testSetType()",
      "281": "SubscriptionResponseDataTest::::testSetType()",
      "282": "SubscriptionResponseDataTest::::testSetType()",
      "283": "SubscriptionResponseDataTest::::testSetType()",
      "284": "SubscriptionResponseDataTest::::testSetType()",
      "285": "SubscriptionResponseDataTest::::testSetType()"
    },
    "tests": [
      {
        "test_lines": [
          18,
          32
        ],
        "covered_lines": [
          6,
          37,
          38,
          51,
          52,
          58,
          65,
          66,
          79,
          80,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::getAspect()"
      },
      {
        "test_lines": [
          41,
          55
        ],
        "covered_lines": [
          6,
          37,
          38,
          51,
          52,
          65,
          66,
          72,
          79,
          80,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::getCallbackUrl()"
      },
      {
        "test_lines": [
          64,
          78
        ],
        "covered_lines": [
          6,
          37,
          38,
          51,
          52,
          65,
          66,
          79,
          80,
          93,
          94,
          100,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::getId()"
      },
      {
        "test_lines": [
          87,
          101
        ],
        "covered_lines": [
          6,
          30,
          37,
          38,
          51,
          52,
          65,
          66,
          79,
          80,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::getObject()"
      },
      {
        "test_lines": [
          110,
          124
        ],
        "covered_lines": [
          6,
          37,
          38,
          44,
          51,
          52,
          65,
          66,
          79,
          80,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::getObjectId()"
      },
      {
        "test_lines": [
          133,
          147
        ],
        "covered_lines": [
          6,
          37,
          38,
          51,
          52,
          65,
          66,
          79,
          80,
          86,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::getType()"
      },
      {
        "test_lines": [
          156,
          170
        ],
        "covered_lines": [
          6,
          37,
          38,
          51,
          52,
          65,
          66,
          79,
          80,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::setAspect(java.lang.String)"
      },
      {
        "test_lines": [
          179,
          193
        ],
        "covered_lines": [
          6,
          37,
          38,
          51,
          52,
          65,
          66,
          79,
          80,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::setCallbackUrl(java.lang.String)"
      },
      {
        "test_lines": [
          202,
          216
        ],
        "covered_lines": [
          6,
          37,
          38,
          51,
          52,
          65,
          66,
          79,
          80,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::setId(java.lang.String)"
      },
      {
        "test_lines": [
          225,
          239
        ],
        "covered_lines": [
          6,
          37,
          38,
          51,
          52,
          65,
          66,
          79,
          80,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::setObject(java.lang.String)"
      },
      {
        "test_lines": [
          248,
          262
        ],
        "covered_lines": [
          6,
          37,
          38,
          51,
          52,
          65,
          66,
          79,
          80,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::setObjectId(java.lang.String)"
      },
      {
        "test_lines": [
          271,
          285
        ],
        "covered_lines": [
          6,
          37,
          38,
          51,
          52,
          65,
          66,
          79,
          80,
          93,
          94,
          107,
          108
        ],
        "label": "SubscriptionResponseData::::setType(java.lang.String)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/realtime/SubscriptionsListResponse.java": {
    "class_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "@Deprecated\n",
      "public class SubscriptionsListResponse {\n",
      "\n",
      "    @SerializedName(\"meta\")\n",
      "    private Meta meta;\n",
      "\n",
      "    @SerializedName(\"data\")\n",
      "    private List<SubscriptionResponseData> data;\n",
      "\n",
      "    /**\n",
      "     * @return the meta\n",
      "     */\n",
      "    public Meta getMeta() {\n",
      "        return meta;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @param meta the meta to set\n",
      "     */\n",
      "    public void setMeta(Meta meta) {\n",
      "        this.meta = meta;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return the data\n",
      "     */\n",
      "    public List<SubscriptionResponseData> getData() {\n",
      "        return data;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @param data the data to set\n",
      "     */\n",
      "    public void setData(List<SubscriptionResponseData> data) {\n",
      "        this.data = data;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>SubscriptionsListResponseTest</code> contains tests for the\n",
      " * class <code>{@link SubscriptionsListResponse}</code>.\n",
      " * \n",
      " */\n",
      "public class SubscriptionsListResponseTest {\n",
      "\t/**\n",
      "\t * Run the List<SubscriptionResponseData> getData() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetData_1() throws Exception {\n",
      "\t\tSubscriptionsListResponse fixture = new SubscriptionsListResponse();\n",
      "\t\tfixture.setData(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tList<SubscriptionResponseData> result = fixture.getData();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1() throws Exception {\n",
      "\t\tSubscriptionsListResponse fixture = new SubscriptionsListResponse();\n",
      "\t\tfixture.setData(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setData(List<SubscriptionResponseData>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetData_1() throws Exception {\n",
      "\t\tSubscriptionsListResponse fixture = new SubscriptionsListResponse();\n",
      "\t\tfixture.setData(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tList<SubscriptionResponseData> data = new LinkedList();\n",
      "\n",
      "\t\tfixture.setData(data);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1() throws Exception {\n",
      "\t\tSubscriptionsListResponse fixture = new SubscriptionsListResponse();\n",
      "\t\tfixture.setData(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "SubscriptionsListResponse::::getMeta()": [
        21,
        23
      ],
      "SubscriptionsListResponse::::setMeta(org.jinstagram.entity.common.Meta)": [
        28,
        30
      ],
      "SubscriptionsListResponse::::getData()": [
        35,
        37
      ],
      "SubscriptionsListResponse::::setData(java.util.List<org.jinstagram.realtime.SubscriptionResponseData>)": [
        42,
        44
      ]
    },
    "test_method_lines_dic": {
      "SubscriptionsListResponseTest::::testGetData_1()": [
        22,
        33
      ],
      "SubscriptionsListResponseTest::::testGetMeta_1()": [
        42,
        56
      ],
      "SubscriptionsListResponseTest::::testSetData_1()": [
        65,
        75
      ],
      "SubscriptionsListResponseTest::::testSetMeta_1()": [
        84,
        94
      ]
    },
    "reverse_method_lines_dic": {
      "21": "SubscriptionsListResponse::::getMeta()",
      "22": "SubscriptionsListResponse::::getMeta()",
      "23": "SubscriptionsListResponse::::getMeta()",
      "28": "SubscriptionsListResponse::::setMeta(org.jinstagram.entity.common.Meta)",
      "29": "SubscriptionsListResponse::::setMeta(org.jinstagram.entity.common.Meta)",
      "30": "SubscriptionsListResponse::::setMeta(org.jinstagram.entity.common.Meta)",
      "35": "SubscriptionsListResponse::::getData()",
      "36": "SubscriptionsListResponse::::getData()",
      "37": "SubscriptionsListResponse::::getData()",
      "42": "SubscriptionsListResponse::::setData(java.util.List<org.jinstagram.realtime.SubscriptionResponseData>)",
      "43": "SubscriptionsListResponse::::setData(java.util.List<org.jinstagram.realtime.SubscriptionResponseData>)",
      "44": "SubscriptionsListResponse::::setData(java.util.List<org.jinstagram.realtime.SubscriptionResponseData>)"
    },
    "test_reverse_method_lines_dic": {
      "22": "SubscriptionsListResponseTest::::testGetData_1()",
      "23": "SubscriptionsListResponseTest::::testGetData_1()",
      "24": "SubscriptionsListResponseTest::::testGetData_1()",
      "25": "SubscriptionsListResponseTest::::testGetData_1()",
      "26": "SubscriptionsListResponseTest::::testGetData_1()",
      "27": "SubscriptionsListResponseTest::::testGetData_1()",
      "28": "SubscriptionsListResponseTest::::testGetData_1()",
      "29": "SubscriptionsListResponseTest::::testGetData_1()",
      "30": "SubscriptionsListResponseTest::::testGetData_1()",
      "31": "SubscriptionsListResponseTest::::testGetData_1()",
      "32": "SubscriptionsListResponseTest::::testGetData_1()",
      "33": "SubscriptionsListResponseTest::::testGetData_1()",
      "42": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "43": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "44": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "45": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "46": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "47": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "48": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "49": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "50": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "51": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "52": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "53": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "54": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "55": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "56": "SubscriptionsListResponseTest::::testGetMeta_1()",
      "65": "SubscriptionsListResponseTest::::testSetData_1()",
      "66": "SubscriptionsListResponseTest::::testSetData_1()",
      "67": "SubscriptionsListResponseTest::::testSetData_1()",
      "68": "SubscriptionsListResponseTest::::testSetData_1()",
      "69": "SubscriptionsListResponseTest::::testSetData_1()",
      "70": "SubscriptionsListResponseTest::::testSetData_1()",
      "71": "SubscriptionsListResponseTest::::testSetData_1()",
      "72": "SubscriptionsListResponseTest::::testSetData_1()",
      "73": "SubscriptionsListResponseTest::::testSetData_1()",
      "74": "SubscriptionsListResponseTest::::testSetData_1()",
      "75": "SubscriptionsListResponseTest::::testSetData_1()",
      "84": "SubscriptionsListResponseTest::::testSetMeta_1()",
      "85": "SubscriptionsListResponseTest::::testSetMeta_1()",
      "86": "SubscriptionsListResponseTest::::testSetMeta_1()",
      "87": "SubscriptionsListResponseTest::::testSetMeta_1()",
      "88": "SubscriptionsListResponseTest::::testSetMeta_1()",
      "89": "SubscriptionsListResponseTest::::testSetMeta_1()",
      "90": "SubscriptionsListResponseTest::::testSetMeta_1()",
      "91": "SubscriptionsListResponseTest::::testSetMeta_1()",
      "92": "SubscriptionsListResponseTest::::testSetMeta_1()",
      "93": "SubscriptionsListResponseTest::::testSetMeta_1()",
      "94": "SubscriptionsListResponseTest::::testSetMeta_1()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          33
        ],
        "covered_lines": [
          10,
          29,
          30,
          36,
          43,
          44
        ],
        "label": "SubscriptionsListResponse::::getData()"
      },
      {
        "test_lines": [
          42,
          56
        ],
        "covered_lines": [
          10,
          22,
          29,
          30,
          43,
          44
        ],
        "label": "SubscriptionsListResponse::::getMeta()"
      },
      {
        "test_lines": [
          65,
          75
        ],
        "covered_lines": [
          10,
          29,
          30,
          43,
          44
        ],
        "label": "SubscriptionsListResponse::::setData(java.util.List<org.jinstagram.realtime.SubscriptionResponseData>)"
      },
      {
        "test_lines": [
          84,
          94
        ],
        "covered_lines": [
          10,
          29,
          30,
          43,
          44
        ],
        "label": "SubscriptionsListResponse::::setMeta(org.jinstagram.entity.common.Meta)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/realtime/SubscriptionType.java": {
    "class_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "@Deprecated\n",
      "public enum SubscriptionType {\n",
      "\t/**\n",
      "\t * A enum to denote the 'user' subscription type.\n",
      "\t */\n",
      "\tUSERS(\"user\"),\n",
      "\n",
      "\t/**\n",
      "\t * A enum to denote the 'tag' subscription type.\n",
      "\t */\n",
      "\tTAGS(\"tag\"),\n",
      "\n",
      "\t/**\n",
      "\t * A enum to denote the 'location' subscription type.\n",
      "\t */\n",
      "\tLOCATIONS(\"location\"),\n",
      "\n",
      "\t/**\n",
      "\t * A enum to denote the 'geography' subscription type.\n",
      "\t */\n",
      "\tGEOGRAPHIES(\"geography\");\n",
      "\n",
      "\tprivate String subType;\n",
      "\n",
      "\tprivate SubscriptionType(String subType) {\n",
      "\t\tthis.subType = subType;\n",
      "\t}\n",
      "\n",
      "\t@Override\n",
      "\tpublic String toString() {\n",
      "\t\treturn subType;\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>SubscriptionTypeTest</code> contains tests for the class\n",
      " * <code>{@link SubscriptionType}</code>.\n",
      " * \n",
      " */\n",
      "public class SubscriptionTypeTest {\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tSubscriptionType fixture = SubscriptionType.GEOGRAPHIES;\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"geography\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "SubscriptionType::::toString()": [
        31,
        34
      ]
    },
    "test_method_lines_dic": {
      "SubscriptionTypeTest::::testToString_1()": [
        19,
        27
      ]
    },
    "reverse_method_lines_dic": {
      "31": "SubscriptionType::::toString()",
      "32": "SubscriptionType::::toString()",
      "33": "SubscriptionType::::toString()",
      "34": "SubscriptionType::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "19": "SubscriptionTypeTest::::testToString_1()",
      "20": "SubscriptionTypeTest::::testToString_1()",
      "21": "SubscriptionTypeTest::::testToString_1()",
      "22": "SubscriptionTypeTest::::testToString_1()",
      "23": "SubscriptionTypeTest::::testToString_1()",
      "24": "SubscriptionTypeTest::::testToString_1()",
      "25": "SubscriptionTypeTest::::testToString_1()",
      "26": "SubscriptionTypeTest::::testToString_1()",
      "27": "SubscriptionTypeTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          19,
          27
        ],
        "covered_lines": [
          3,
          8,
          13,
          18,
          23,
          27,
          28,
          29,
          33
        ],
        "label": "SubscriptionType::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/realtime/SubscriptionResponseObject.java": {
    "class_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "@Deprecated\n",
      "public class SubscriptionResponseObject {\n",
      "\n",
      "\t@SerializedName(\"changed_aspect\")\n",
      "\tprivate String changedAspect;\n",
      "\n",
      "\t@SerializedName(\"subscription_id\")\n",
      "\tprivate String subscriptionId;\n",
      "\n",
      "\t@SerializedName(\"object\")\n",
      "\tprivate String object;\n",
      "\n",
      "\t@SerializedName(\"object_id\")\n",
      "\tprivate String objectId;\n",
      "\n",
      "\t@SerializedName(\"time\")\n",
      "\tprivate long epochTime;\n",
      "\n",
      "\t/**\n",
      "\t * @return the changedAspect\n",
      "\t */\n",
      "\tpublic String getChangedAspect() {\n",
      "\t\treturn changedAspect;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param changedAspect the changedAspect to set\n",
      "\t */\n",
      "\tpublic void setChangedAspect(String changedAspect) {\n",
      "\t\tthis.changedAspect = changedAspect;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the subscriptionId\n",
      "\t */\n",
      "\tpublic String getSubscriptionId() {\n",
      "\t\treturn subscriptionId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param subscriptionId the subscriptionId to set\n",
      "\t */\n",
      "\tpublic void setSubscriptionId(String subscriptionId) {\n",
      "\t\tthis.subscriptionId = subscriptionId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the object\n",
      "\t */\n",
      "\tpublic String getObject() {\n",
      "\t\treturn object;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param object the object to set\n",
      "\t */\n",
      "\tpublic void setObject(String object) {\n",
      "\t\tthis.object = object;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the objectId\n",
      "\t */\n",
      "\tpublic String getObjectId() {\n",
      "\t\treturn objectId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param objectId the objectId to set\n",
      "\t */\n",
      "\tpublic void setObjectId(String objectId) {\n",
      "\t\tthis.objectId = objectId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the epochTime\n",
      "\t */\n",
      "\tpublic long getEpochTime() {\n",
      "\t\treturn epochTime;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param epochTime the epochTime to set\n",
      "\t */\n",
      "\tpublic void setEpochTime(long epochTime) {\n",
      "\t\tthis.epochTime = epochTime;\n",
      "\t}\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.realtime;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>SubscriptionResponseObjectTest</code> contains tests for the\n",
      " * class <code>{@link SubscriptionResponseObject}</code>.\n",
      " */\n",
      "public class SubscriptionResponseObjectTest {\n",
      "\t/**\n",
      "\t * Run the String getChangedAspect() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetChangedAspect() throws Exception {\n",
      "\t\tSubscriptionResponseObject fixture = new SubscriptionResponseObject();\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setEpochTime(1L);\n",
      "\t\tfixture.setChangedAspect(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setSubscriptionId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getChangedAspect();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the long getEpochTime() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetEpochTime() throws Exception {\n",
      "\t\tSubscriptionResponseObject fixture = new SubscriptionResponseObject();\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setEpochTime(1L);\n",
      "\t\tfixture.setChangedAspect(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setSubscriptionId(\"\");\n",
      "\n",
      "\t\tlong result = fixture.getEpochTime();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1L, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getObject() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetObject() throws Exception {\n",
      "\t\tSubscriptionResponseObject fixture = new SubscriptionResponseObject();\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setEpochTime(1L);\n",
      "\t\tfixture.setChangedAspect(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setSubscriptionId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getObject();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getObjectId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetObjectId() throws Exception {\n",
      "\t\tSubscriptionResponseObject fixture = new SubscriptionResponseObject();\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setEpochTime(1L);\n",
      "\t\tfixture.setChangedAspect(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setSubscriptionId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getObjectId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getSubscriptionId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetSubscriptionId() throws Exception {\n",
      "\t\tSubscriptionResponseObject fixture = new SubscriptionResponseObject();\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setEpochTime(1L);\n",
      "\t\tfixture.setChangedAspect(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setSubscriptionId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getSubscriptionId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setChangedAspect(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetChangedAspect() throws Exception {\n",
      "\t\tSubscriptionResponseObject fixture = new SubscriptionResponseObject();\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setEpochTime(1L);\n",
      "\t\tfixture.setChangedAspect(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setSubscriptionId(\"\");\n",
      "\t\tString changedAspect = \"\";\n",
      "\n",
      "\t\tfixture.setChangedAspect(changedAspect);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setEpochTime(long) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetEpochTime() throws Exception {\n",
      "\t\tSubscriptionResponseObject fixture = new SubscriptionResponseObject();\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setEpochTime(1L);\n",
      "\t\tfixture.setChangedAspect(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setSubscriptionId(\"\");\n",
      "\t\tlong epochTime = 1L;\n",
      "\n",
      "\t\tfixture.setEpochTime(epochTime);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setObject(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetObject() throws Exception {\n",
      "\t\tSubscriptionResponseObject fixture = new SubscriptionResponseObject();\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setEpochTime(1L);\n",
      "\t\tfixture.setChangedAspect(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setSubscriptionId(\"\");\n",
      "\t\tString object = \"\";\n",
      "\n",
      "\t\tfixture.setObject(object);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setObjectId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetObjectId() throws Exception {\n",
      "\t\tSubscriptionResponseObject fixture = new SubscriptionResponseObject();\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setEpochTime(1L);\n",
      "\t\tfixture.setChangedAspect(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setSubscriptionId(\"\");\n",
      "\t\tString objectId = \"\";\n",
      "\n",
      "\t\tfixture.setObjectId(objectId);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setSubscriptionId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetSubscriptionId() throws Exception {\n",
      "\t\tSubscriptionResponseObject fixture = new SubscriptionResponseObject();\n",
      "\t\tfixture.setObjectId(\"\");\n",
      "\t\tfixture.setEpochTime(1L);\n",
      "\t\tfixture.setChangedAspect(\"\");\n",
      "\t\tfixture.setObject(\"\");\n",
      "\t\tfixture.setSubscriptionId(\"\");\n",
      "\t\tString subscriptionId = \"\";\n",
      "\n",
      "\t\tfixture.setSubscriptionId(subscriptionId);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "SubscriptionResponseObject::::getChangedAspect()": [
        26,
        28
      ],
      "SubscriptionResponseObject::::setChangedAspect(java.lang.String)": [
        33,
        35
      ],
      "SubscriptionResponseObject::::getSubscriptionId()": [
        40,
        42
      ],
      "SubscriptionResponseObject::::setSubscriptionId(java.lang.String)": [
        47,
        49
      ],
      "SubscriptionResponseObject::::getObject()": [
        54,
        56
      ],
      "SubscriptionResponseObject::::setObject(java.lang.String)": [
        61,
        63
      ],
      "SubscriptionResponseObject::::getObjectId()": [
        68,
        70
      ],
      "SubscriptionResponseObject::::setObjectId(java.lang.String)": [
        75,
        77
      ],
      "SubscriptionResponseObject::::getEpochTime()": [
        82,
        84
      ],
      "SubscriptionResponseObject::::setEpochTime(long)": [
        89,
        91
      ]
    },
    "test_method_lines_dic": {
      "SubscriptionResponseObjectTest::::testGetChangedAspect()": [
        18,
        31
      ],
      "SubscriptionResponseObjectTest::::testGetEpochTime()": [
        40,
        53
      ],
      "SubscriptionResponseObjectTest::::testGetObject()": [
        62,
        75
      ],
      "SubscriptionResponseObjectTest::::testGetObjectId()": [
        84,
        97
      ],
      "SubscriptionResponseObjectTest::::testGetSubscriptionId()": [
        106,
        119
      ],
      "SubscriptionResponseObjectTest::::testSetChangedAspect()": [
        128,
        141
      ],
      "SubscriptionResponseObjectTest::::testSetEpochTime()": [
        150,
        163
      ],
      "SubscriptionResponseObjectTest::::testSetObject()": [
        172,
        185
      ],
      "SubscriptionResponseObjectTest::::testSetObjectId()": [
        194,
        207
      ],
      "SubscriptionResponseObjectTest::::testSetSubscriptionId()": [
        216,
        229
      ]
    },
    "reverse_method_lines_dic": {
      "26": "SubscriptionResponseObject::::getChangedAspect()",
      "27": "SubscriptionResponseObject::::getChangedAspect()",
      "28": "SubscriptionResponseObject::::getChangedAspect()",
      "33": "SubscriptionResponseObject::::setChangedAspect(java.lang.String)",
      "34": "SubscriptionResponseObject::::setChangedAspect(java.lang.String)",
      "35": "SubscriptionResponseObject::::setChangedAspect(java.lang.String)",
      "40": "SubscriptionResponseObject::::getSubscriptionId()",
      "41": "SubscriptionResponseObject::::getSubscriptionId()",
      "42": "SubscriptionResponseObject::::getSubscriptionId()",
      "47": "SubscriptionResponseObject::::setSubscriptionId(java.lang.String)",
      "48": "SubscriptionResponseObject::::setSubscriptionId(java.lang.String)",
      "49": "SubscriptionResponseObject::::setSubscriptionId(java.lang.String)",
      "54": "SubscriptionResponseObject::::getObject()",
      "55": "SubscriptionResponseObject::::getObject()",
      "56": "SubscriptionResponseObject::::getObject()",
      "61": "SubscriptionResponseObject::::setObject(java.lang.String)",
      "62": "SubscriptionResponseObject::::setObject(java.lang.String)",
      "63": "SubscriptionResponseObject::::setObject(java.lang.String)",
      "68": "SubscriptionResponseObject::::getObjectId()",
      "69": "SubscriptionResponseObject::::getObjectId()",
      "70": "SubscriptionResponseObject::::getObjectId()",
      "75": "SubscriptionResponseObject::::setObjectId(java.lang.String)",
      "76": "SubscriptionResponseObject::::setObjectId(java.lang.String)",
      "77": "SubscriptionResponseObject::::setObjectId(java.lang.String)",
      "82": "SubscriptionResponseObject::::getEpochTime()",
      "83": "SubscriptionResponseObject::::getEpochTime()",
      "84": "SubscriptionResponseObject::::getEpochTime()",
      "89": "SubscriptionResponseObject::::setEpochTime(long)",
      "90": "SubscriptionResponseObject::::setEpochTime(long)",
      "91": "SubscriptionResponseObject::::setEpochTime(long)"
    },
    "test_reverse_method_lines_dic": {
      "18": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "19": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "20": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "21": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "22": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "23": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "24": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "25": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "26": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "27": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "28": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "29": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "30": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "31": "SubscriptionResponseObjectTest::::testGetChangedAspect()",
      "40": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "41": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "42": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "43": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "44": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "45": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "46": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "47": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "48": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "49": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "50": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "51": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "52": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "53": "SubscriptionResponseObjectTest::::testGetEpochTime()",
      "62": "SubscriptionResponseObjectTest::::testGetObject()",
      "63": "SubscriptionResponseObjectTest::::testGetObject()",
      "64": "SubscriptionResponseObjectTest::::testGetObject()",
      "65": "SubscriptionResponseObjectTest::::testGetObject()",
      "66": "SubscriptionResponseObjectTest::::testGetObject()",
      "67": "SubscriptionResponseObjectTest::::testGetObject()",
      "68": "SubscriptionResponseObjectTest::::testGetObject()",
      "69": "SubscriptionResponseObjectTest::::testGetObject()",
      "70": "SubscriptionResponseObjectTest::::testGetObject()",
      "71": "SubscriptionResponseObjectTest::::testGetObject()",
      "72": "SubscriptionResponseObjectTest::::testGetObject()",
      "73": "SubscriptionResponseObjectTest::::testGetObject()",
      "74": "SubscriptionResponseObjectTest::::testGetObject()",
      "75": "SubscriptionResponseObjectTest::::testGetObject()",
      "84": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "85": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "86": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "87": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "88": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "89": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "90": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "91": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "92": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "93": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "94": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "95": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "96": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "97": "SubscriptionResponseObjectTest::::testGetObjectId()",
      "106": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "107": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "108": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "109": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "110": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "111": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "112": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "113": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "114": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "115": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "116": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "117": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "118": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "119": "SubscriptionResponseObjectTest::::testGetSubscriptionId()",
      "128": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "129": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "130": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "131": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "132": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "133": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "134": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "135": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "136": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "137": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "138": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "139": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "140": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "141": "SubscriptionResponseObjectTest::::testSetChangedAspect()",
      "150": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "151": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "152": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "153": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "154": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "155": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "156": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "157": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "158": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "159": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "160": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "161": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "162": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "163": "SubscriptionResponseObjectTest::::testSetEpochTime()",
      "172": "SubscriptionResponseObjectTest::::testSetObject()",
      "173": "SubscriptionResponseObjectTest::::testSetObject()",
      "174": "SubscriptionResponseObjectTest::::testSetObject()",
      "175": "SubscriptionResponseObjectTest::::testSetObject()",
      "176": "SubscriptionResponseObjectTest::::testSetObject()",
      "177": "SubscriptionResponseObjectTest::::testSetObject()",
      "178": "SubscriptionResponseObjectTest::::testSetObject()",
      "179": "SubscriptionResponseObjectTest::::testSetObject()",
      "180": "SubscriptionResponseObjectTest::::testSetObject()",
      "181": "SubscriptionResponseObjectTest::::testSetObject()",
      "182": "SubscriptionResponseObjectTest::::testSetObject()",
      "183": "SubscriptionResponseObjectTest::::testSetObject()",
      "184": "SubscriptionResponseObjectTest::::testSetObject()",
      "185": "SubscriptionResponseObjectTest::::testSetObject()",
      "194": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "195": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "196": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "197": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "198": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "199": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "200": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "201": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "202": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "203": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "204": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "205": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "206": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "207": "SubscriptionResponseObjectTest::::testSetObjectId()",
      "216": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "217": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "218": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "219": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "220": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "221": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "222": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "223": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "224": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "225": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "226": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "227": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "228": "SubscriptionResponseObjectTest::::testSetSubscriptionId()",
      "229": "SubscriptionResponseObjectTest::::testSetSubscriptionId()"
    },
    "tests": [
      {
        "test_lines": [
          18,
          31
        ],
        "covered_lines": [
          6,
          27,
          34,
          35,
          48,
          49,
          62,
          63,
          76,
          77,
          90,
          91
        ],
        "label": "SubscriptionResponseObject::::getChangedAspect()"
      },
      {
        "test_lines": [
          40,
          53
        ],
        "covered_lines": [
          6,
          34,
          35,
          48,
          49,
          62,
          63,
          76,
          77,
          83,
          90,
          91
        ],
        "label": "SubscriptionResponseObject::::getEpochTime()"
      },
      {
        "test_lines": [
          62,
          75
        ],
        "covered_lines": [
          6,
          34,
          35,
          48,
          49,
          55,
          62,
          63,
          76,
          77,
          90,
          91
        ],
        "label": "SubscriptionResponseObject::::getObject()"
      },
      {
        "test_lines": [
          84,
          97
        ],
        "covered_lines": [
          6,
          34,
          35,
          48,
          49,
          62,
          63,
          69,
          76,
          77,
          90,
          91
        ],
        "label": "SubscriptionResponseObject::::getObjectId()"
      },
      {
        "test_lines": [
          106,
          119
        ],
        "covered_lines": [
          6,
          34,
          35,
          41,
          48,
          49,
          62,
          63,
          76,
          77,
          90,
          91
        ],
        "label": "SubscriptionResponseObject::::getSubscriptionId()"
      },
      {
        "test_lines": [
          128,
          141
        ],
        "covered_lines": [
          6,
          34,
          35,
          48,
          49,
          62,
          63,
          76,
          77,
          90,
          91
        ],
        "label": "SubscriptionResponseObject::::setChangedAspect(java.lang.String)"
      },
      {
        "test_lines": [
          150,
          163
        ],
        "covered_lines": [
          6,
          34,
          35,
          48,
          49,
          62,
          63,
          76,
          77,
          90,
          91
        ],
        "label": "SubscriptionResponseObject::::setEpochTime(long)"
      },
      {
        "test_lines": [
          172,
          185
        ],
        "covered_lines": [
          6,
          34,
          35,
          48,
          49,
          62,
          63,
          76,
          77,
          90,
          91
        ],
        "label": "SubscriptionResponseObject::::setObject(java.lang.String)"
      },
      {
        "test_lines": [
          194,
          207
        ],
        "covered_lines": [
          6,
          34,
          35,
          48,
          49,
          62,
          63,
          76,
          77,
          90,
          91
        ],
        "label": "SubscriptionResponseObject::::setObjectId(java.lang.String)"
      },
      {
        "test_lines": [
          216,
          229
        ],
        "covered_lines": [
          6,
          34,
          35,
          48,
          49,
          62,
          63,
          76,
          77,
          90,
          91
        ],
        "label": "SubscriptionResponseObject::::setSubscriptionId(java.lang.String)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/comments/MediaCommentsFeed.java": {
    "class_content": [
      "package org.jinstagram.entity.comments;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "public class MediaCommentsFeed extends InstagramObject{\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate List<CommentData> commentDataList;\n",
      "\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the commentDataList\n",
      "\t */\n",
      "\tpublic List<CommentData> getCommentDataList() {\n",
      "\t\treturn commentDataList;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param commentDataList the commentDataList to set\n",
      "\t */\n",
      "\tpublic void setCommentDataList(List<CommentData> commentDataList) {\n",
      "\t\tthis.commentDataList = commentDataList;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"MediaCommentsFeed [commentDataList=%s, meta=%s]\", commentDataList, meta);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.comments;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>MediaCommentsFeedTest</code> contains tests for the class\n",
      " * <code>{@link MediaCommentsFeed}</code>.\n",
      " *\n",
      " */\n",
      "public class MediaCommentsFeedTest {\n",
      "\t/**\n",
      "\t * Run the List<CommentData> getCommentDataList() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCommentDataList() throws Exception {\n",
      "\t\tMediaCommentsFeed fixture = new MediaCommentsFeed();\n",
      "\t\tfixture.setCommentDataList(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tList<CommentData> result = fixture.getCommentDataList();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta() throws Exception {\n",
      "\t\tMediaCommentsFeed fixture = new MediaCommentsFeed();\n",
      "\t\tfixture.setCommentDataList(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCommentDataList(List<CommentData>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCommentDataList() throws Exception {\n",
      "\t\tMediaCommentsFeed fixture = new MediaCommentsFeed();\n",
      "\t\tfixture.setCommentDataList(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tList<CommentData> commentDataList = new LinkedList();\n",
      "\n",
      "\t\tfixture.setCommentDataList(commentDataList);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta() throws Exception {\n",
      "\t\tMediaCommentsFeed fixture = new MediaCommentsFeed();\n",
      "\t\tfixture.setCommentDataList(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tMediaCommentsFeed fixture = new MediaCommentsFeed();\n",
      "\t\tfixture.setCommentDataList(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"MediaCommentsFeed [commentDataList=[], meta=Meta [code=0, errorMessage=null, errorType=null]]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "MediaCommentsFeed::::getMeta()": [
        20,
        22
      ],
      "MediaCommentsFeed::::setMeta(org.jinstagram.entity.common.Meta)": [
        27,
        29
      ],
      "MediaCommentsFeed::::getCommentDataList()": [
        34,
        36
      ],
      "MediaCommentsFeed::::setCommentDataList(java.util.List<org.jinstagram.entity.comments.CommentData>)": [
        41,
        43
      ],
      "MediaCommentsFeed::::toString()": [
        45,
        48
      ]
    },
    "test_method_lines_dic": {
      "MediaCommentsFeedTest::::testGetCommentDataList()": [
        25,
        36
      ],
      "MediaCommentsFeedTest::::testGetMeta()": [
        45,
        59
      ],
      "MediaCommentsFeedTest::::testSetCommentDataList()": [
        68,
        78
      ],
      "MediaCommentsFeedTest::::testSetMeta()": [
        87,
        97
      ],
      "MediaCommentsFeedTest::::testToString()": [
        106,
        117
      ]
    },
    "reverse_method_lines_dic": {
      "20": "MediaCommentsFeed::::getMeta()",
      "21": "MediaCommentsFeed::::getMeta()",
      "22": "MediaCommentsFeed::::getMeta()",
      "27": "MediaCommentsFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "28": "MediaCommentsFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "29": "MediaCommentsFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "34": "MediaCommentsFeed::::getCommentDataList()",
      "35": "MediaCommentsFeed::::getCommentDataList()",
      "36": "MediaCommentsFeed::::getCommentDataList()",
      "41": "MediaCommentsFeed::::setCommentDataList(java.util.List<org.jinstagram.entity.comments.CommentData>)",
      "42": "MediaCommentsFeed::::setCommentDataList(java.util.List<org.jinstagram.entity.comments.CommentData>)",
      "43": "MediaCommentsFeed::::setCommentDataList(java.util.List<org.jinstagram.entity.comments.CommentData>)",
      "45": "MediaCommentsFeed::::toString()",
      "46": "MediaCommentsFeed::::toString()",
      "47": "MediaCommentsFeed::::toString()",
      "48": "MediaCommentsFeed::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "25": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "26": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "27": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "28": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "29": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "30": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "31": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "32": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "33": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "34": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "35": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "36": "MediaCommentsFeedTest::::testGetCommentDataList()",
      "45": "MediaCommentsFeedTest::::testGetMeta()",
      "46": "MediaCommentsFeedTest::::testGetMeta()",
      "47": "MediaCommentsFeedTest::::testGetMeta()",
      "48": "MediaCommentsFeedTest::::testGetMeta()",
      "49": "MediaCommentsFeedTest::::testGetMeta()",
      "50": "MediaCommentsFeedTest::::testGetMeta()",
      "51": "MediaCommentsFeedTest::::testGetMeta()",
      "52": "MediaCommentsFeedTest::::testGetMeta()",
      "53": "MediaCommentsFeedTest::::testGetMeta()",
      "54": "MediaCommentsFeedTest::::testGetMeta()",
      "55": "MediaCommentsFeedTest::::testGetMeta()",
      "56": "MediaCommentsFeedTest::::testGetMeta()",
      "57": "MediaCommentsFeedTest::::testGetMeta()",
      "58": "MediaCommentsFeedTest::::testGetMeta()",
      "59": "MediaCommentsFeedTest::::testGetMeta()",
      "68": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "69": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "70": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "71": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "72": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "73": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "74": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "75": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "76": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "77": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "78": "MediaCommentsFeedTest::::testSetCommentDataList()",
      "87": "MediaCommentsFeedTest::::testSetMeta()",
      "88": "MediaCommentsFeedTest::::testSetMeta()",
      "89": "MediaCommentsFeedTest::::testSetMeta()",
      "90": "MediaCommentsFeedTest::::testSetMeta()",
      "91": "MediaCommentsFeedTest::::testSetMeta()",
      "92": "MediaCommentsFeedTest::::testSetMeta()",
      "93": "MediaCommentsFeedTest::::testSetMeta()",
      "94": "MediaCommentsFeedTest::::testSetMeta()",
      "95": "MediaCommentsFeedTest::::testSetMeta()",
      "96": "MediaCommentsFeedTest::::testSetMeta()",
      "97": "MediaCommentsFeedTest::::testSetMeta()",
      "106": "MediaCommentsFeedTest::::testToString()",
      "107": "MediaCommentsFeedTest::::testToString()",
      "108": "MediaCommentsFeedTest::::testToString()",
      "109": "MediaCommentsFeedTest::::testToString()",
      "110": "MediaCommentsFeedTest::::testToString()",
      "111": "MediaCommentsFeedTest::::testToString()",
      "112": "MediaCommentsFeedTest::::testToString()",
      "113": "MediaCommentsFeedTest::::testToString()",
      "114": "MediaCommentsFeedTest::::testToString()",
      "115": "MediaCommentsFeedTest::::testToString()",
      "116": "MediaCommentsFeedTest::::testToString()",
      "117": "MediaCommentsFeedTest::::testToString()"
    },
    "tests": [
      {
        "test_lines": [
          25,
          36
        ],
        "covered_lines": [
          10,
          28,
          29,
          35,
          42,
          43
        ],
        "label": "MediaCommentsFeed::::getCommentDataList()"
      },
      {
        "test_lines": [
          45,
          59
        ],
        "covered_lines": [
          10,
          21,
          28,
          29,
          42,
          43
        ],
        "label": "MediaCommentsFeed::::getMeta()"
      },
      {
        "test_lines": [
          68,
          78
        ],
        "covered_lines": [
          10,
          28,
          29,
          42,
          43
        ],
        "label": "MediaCommentsFeed::::setCommentDataList(java.util.List<org.jinstagram.entity.comments.CommentData>)"
      },
      {
        "test_lines": [
          87,
          97
        ],
        "covered_lines": [
          10,
          28,
          29,
          42,
          43
        ],
        "label": "MediaCommentsFeed::::setMeta(org.jinstagram.entity.common.Meta)"
      },
      {
        "test_lines": [
          106,
          117
        ],
        "covered_lines": [
          10,
          28,
          29,
          42,
          43,
          47
        ],
        "label": "MediaCommentsFeed::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/comments/CommentData.java": {
    "class_content": [
      "package org.jinstagram.entity.comments;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.entity.common.FromTagData;\n",
      "\n",
      "public class CommentData {\n",
      "\t@SerializedName(\"from\")\n",
      "\tprivate FromTagData commentFrom;\n",
      "\n",
      "\t@SerializedName(\"created_time\")\n",
      "\tprivate String createdTime;\n",
      "\n",
      "\t@SerializedName(\"id\")\n",
      "\tprivate String id;\n",
      "\n",
      "\t@SerializedName(\"text\")\n",
      "\tprivate String text;\n",
      "\n",
      "\t/**\n",
      "\t * @return the createdTime\n",
      "\t */\n",
      "\tpublic String getCreatedTime() {\n",
      "\t\treturn createdTime;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param createdTime the createdTime to set\n",
      "\t */\n",
      "\tpublic void setCreatedTime(String createdTime) {\n",
      "\t\tthis.createdTime = createdTime;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the text\n",
      "\t */\n",
      "\tpublic String getText() {\n",
      "\t\treturn text;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param text the text to set\n",
      "\t */\n",
      "\tpublic void setText(String text) {\n",
      "\t\tthis.text = text;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the commentFrom\n",
      "\t */\n",
      "\tpublic FromTagData getCommentFrom() {\n",
      "\t\treturn commentFrom;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param commentFrom the commentFrom to set\n",
      "\t */\n",
      "\tpublic void setCommentFrom(FromTagData commentFrom) {\n",
      "\t\tthis.commentFrom = commentFrom;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the id\n",
      "\t */\n",
      "\tpublic String getId() {\n",
      "\t\treturn id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param id the id to set\n",
      "\t */\n",
      "\tpublic void setId(String id) {\n",
      "\t\tthis.id = id;\n",
      "\t}\n",
      "\n",
      "\t@Override\n",
      "\tpublic String toString() {\n",
      "\t\treturn String.format(\"CommentData [commentFrom=%s, createdTime=%s, id=%s, text=%s]\", commentFrom, createdTime,\n",
      "\t\t\t\tid, text);\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.comments;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.jinstagram.entity.common.FromTagData;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>CommentDataTest</code> contains tests for the class\n",
      " * <code>{@link CommentData}</code>.\n",
      " */\n",
      "public class CommentDataTest {\n",
      "\t/**\n",
      "\t * Run the FromTagData getCommentFrom() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCommentFrom() throws Exception {\n",
      "\t\tCommentData commentData = new CommentData();\n",
      "\t\tcommentData.setText(\"\");\n",
      "\t\tcommentData.setCommentFrom(new FromTagData());\n",
      "\t\tcommentData.setCreatedTime(\"\");\n",
      "\t\tcommentData.setId(\"\");\n",
      "\n",
      "\t\tFromTagData result = commentData.getCommentFrom();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(null, result.getProfilePicture());\n",
      "\t\tassertEquals(null, result.getUsername());\n",
      "\t\tassertEquals(null, result.getFullName());\n",
      "\t\tassertEquals(\"FromTagData [fullName=null, id=null, profilePicture=null, username=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getCreatedTime() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCreatedTime() throws Exception {\n",
      "\t\tCommentData fixture = new CommentData();\n",
      "\t\tfixture.setText(\"\");\n",
      "\t\tfixture.setCommentFrom(new FromTagData());\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getCreatedTime();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetId() throws Exception {\n",
      "\t\tCommentData fixture = new CommentData();\n",
      "\t\tfixture.setText(\"\");\n",
      "\t\tfixture.setCommentFrom(new FromTagData());\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getText() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetText() throws Exception {\n",
      "\t\tCommentData fixture = new CommentData();\n",
      "\t\tfixture.setText(\"\");\n",
      "\t\tfixture.setCommentFrom(new FromTagData());\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getText();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCommentFrom(FromTagData) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCommentFrom() throws Exception {\n",
      "\t\tCommentData fixture = new CommentData();\n",
      "\t\tfixture.setText(\"\");\n",
      "\t\tfixture.setCommentFrom(new FromTagData());\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tFromTagData commentFrom = new FromTagData();\n",
      "\n",
      "\t\tfixture.setCommentFrom(commentFrom);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCreatedTime(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCreatedTime() throws Exception {\n",
      "\t\tCommentData fixture = new CommentData();\n",
      "\t\tfixture.setText(\"\");\n",
      "\t\tfixture.setCommentFrom(new FromTagData());\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tString createdTime = \"\";\n",
      "\n",
      "\t\tfixture.setCreatedTime(createdTime);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetId() throws Exception {\n",
      "\t\tCommentData fixture = new CommentData();\n",
      "\t\tfixture.setText(\"\");\n",
      "\t\tfixture.setCommentFrom(new FromTagData());\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tString id = \"\";\n",
      "\n",
      "\t\tfixture.setId(id);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setText(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetText() throws Exception {\n",
      "\t\tCommentData fixture = new CommentData();\n",
      "\t\tfixture.setText(\"\");\n",
      "\t\tfixture.setCommentFrom(new FromTagData());\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tString text = \"\";\n",
      "\n",
      "\t\tfixture.setText(text);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tCommentData fixture = new CommentData();\n",
      "\t\tfixture.setText(\"\");\n",
      "\t\tfixture.setCommentFrom(new FromTagData());\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"CommentData [commentFrom=FromTagData [fullName=null, id=null, profilePicture=null, username=null], createdTime=, id=, text=]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "CommentData::::getCreatedTime()": [
        23,
        25
      ],
      "CommentData::::setCreatedTime(java.lang.String)": [
        30,
        32
      ],
      "CommentData::::getText()": [
        37,
        39
      ],
      "CommentData::::setText(java.lang.String)": [
        44,
        46
      ],
      "CommentData::::getCommentFrom()": [
        51,
        53
      ],
      "CommentData::::setCommentFrom(org.jinstagram.entity.common.FromTagData)": [
        58,
        60
      ],
      "CommentData::::getId()": [
        65,
        67
      ],
      "CommentData::::setId(java.lang.String)": [
        72,
        74
      ],
      "CommentData::::toString()": [
        76,
        80
      ]
    },
    "test_method_lines_dic": {
      "CommentDataTest::::testGetCommentFrom()": [
        19,
        36
      ],
      "CommentDataTest::::testGetCreatedTime()": [
        43,
        55
      ],
      "CommentDataTest::::testGetId()": [
        62,
        74
      ],
      "CommentDataTest::::testGetText()": [
        83,
        95
      ],
      "CommentDataTest::::testSetCommentFrom()": [
        104,
        116
      ],
      "CommentDataTest::::testSetCreatedTime()": [
        124,
        136
      ],
      "CommentDataTest::::testSetId()": [
        144,
        156
      ],
      "CommentDataTest::::testSetText()": [
        164,
        176
      ],
      "CommentDataTest::::testToString()": [
        184,
        198
      ]
    },
    "reverse_method_lines_dic": {
      "23": "CommentData::::getCreatedTime()",
      "24": "CommentData::::getCreatedTime()",
      "25": "CommentData::::getCreatedTime()",
      "30": "CommentData::::setCreatedTime(java.lang.String)",
      "31": "CommentData::::setCreatedTime(java.lang.String)",
      "32": "CommentData::::setCreatedTime(java.lang.String)",
      "37": "CommentData::::getText()",
      "38": "CommentData::::getText()",
      "39": "CommentData::::getText()",
      "44": "CommentData::::setText(java.lang.String)",
      "45": "CommentData::::setText(java.lang.String)",
      "46": "CommentData::::setText(java.lang.String)",
      "51": "CommentData::::getCommentFrom()",
      "52": "CommentData::::getCommentFrom()",
      "53": "CommentData::::getCommentFrom()",
      "58": "CommentData::::setCommentFrom(org.jinstagram.entity.common.FromTagData)",
      "59": "CommentData::::setCommentFrom(org.jinstagram.entity.common.FromTagData)",
      "60": "CommentData::::setCommentFrom(org.jinstagram.entity.common.FromTagData)",
      "65": "CommentData::::getId()",
      "66": "CommentData::::getId()",
      "67": "CommentData::::getId()",
      "72": "CommentData::::setId(java.lang.String)",
      "73": "CommentData::::setId(java.lang.String)",
      "74": "CommentData::::setId(java.lang.String)",
      "76": "CommentData::::toString()",
      "77": "CommentData::::toString()",
      "78": "CommentData::::toString()",
      "79": "CommentData::::toString()",
      "80": "CommentData::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "19": "CommentDataTest::::testGetCommentFrom()",
      "20": "CommentDataTest::::testGetCommentFrom()",
      "21": "CommentDataTest::::testGetCommentFrom()",
      "22": "CommentDataTest::::testGetCommentFrom()",
      "23": "CommentDataTest::::testGetCommentFrom()",
      "24": "CommentDataTest::::testGetCommentFrom()",
      "25": "CommentDataTest::::testGetCommentFrom()",
      "26": "CommentDataTest::::testGetCommentFrom()",
      "27": "CommentDataTest::::testGetCommentFrom()",
      "28": "CommentDataTest::::testGetCommentFrom()",
      "29": "CommentDataTest::::testGetCommentFrom()",
      "30": "CommentDataTest::::testGetCommentFrom()",
      "31": "CommentDataTest::::testGetCommentFrom()",
      "32": "CommentDataTest::::testGetCommentFrom()",
      "33": "CommentDataTest::::testGetCommentFrom()",
      "34": "CommentDataTest::::testGetCommentFrom()",
      "35": "CommentDataTest::::testGetCommentFrom()",
      "36": "CommentDataTest::::testGetCommentFrom()",
      "43": "CommentDataTest::::testGetCreatedTime()",
      "44": "CommentDataTest::::testGetCreatedTime()",
      "45": "CommentDataTest::::testGetCreatedTime()",
      "46": "CommentDataTest::::testGetCreatedTime()",
      "47": "CommentDataTest::::testGetCreatedTime()",
      "48": "CommentDataTest::::testGetCreatedTime()",
      "49": "CommentDataTest::::testGetCreatedTime()",
      "50": "CommentDataTest::::testGetCreatedTime()",
      "51": "CommentDataTest::::testGetCreatedTime()",
      "52": "CommentDataTest::::testGetCreatedTime()",
      "53": "CommentDataTest::::testGetCreatedTime()",
      "54": "CommentDataTest::::testGetCreatedTime()",
      "55": "CommentDataTest::::testGetCreatedTime()",
      "62": "CommentDataTest::::testGetId()",
      "63": "CommentDataTest::::testGetId()",
      "64": "CommentDataTest::::testGetId()",
      "65": "CommentDataTest::::testGetId()",
      "66": "CommentDataTest::::testGetId()",
      "67": "CommentDataTest::::testGetId()",
      "68": "CommentDataTest::::testGetId()",
      "69": "CommentDataTest::::testGetId()",
      "70": "CommentDataTest::::testGetId()",
      "71": "CommentDataTest::::testGetId()",
      "72": "CommentDataTest::::testGetId()",
      "73": "CommentDataTest::::testGetId()",
      "74": "CommentDataTest::::testGetId()",
      "83": "CommentDataTest::::testGetText()",
      "84": "CommentDataTest::::testGetText()",
      "85": "CommentDataTest::::testGetText()",
      "86": "CommentDataTest::::testGetText()",
      "87": "CommentDataTest::::testGetText()",
      "88": "CommentDataTest::::testGetText()",
      "89": "CommentDataTest::::testGetText()",
      "90": "CommentDataTest::::testGetText()",
      "91": "CommentDataTest::::testGetText()",
      "92": "CommentDataTest::::testGetText()",
      "93": "CommentDataTest::::testGetText()",
      "94": "CommentDataTest::::testGetText()",
      "95": "CommentDataTest::::testGetText()",
      "104": "CommentDataTest::::testSetCommentFrom()",
      "105": "CommentDataTest::::testSetCommentFrom()",
      "106": "CommentDataTest::::testSetCommentFrom()",
      "107": "CommentDataTest::::testSetCommentFrom()",
      "108": "CommentDataTest::::testSetCommentFrom()",
      "109": "CommentDataTest::::testSetCommentFrom()",
      "110": "CommentDataTest::::testSetCommentFrom()",
      "111": "CommentDataTest::::testSetCommentFrom()",
      "112": "CommentDataTest::::testSetCommentFrom()",
      "113": "CommentDataTest::::testSetCommentFrom()",
      "114": "CommentDataTest::::testSetCommentFrom()",
      "115": "CommentDataTest::::testSetCommentFrom()",
      "116": "CommentDataTest::::testSetCommentFrom()",
      "124": "CommentDataTest::::testSetCreatedTime()",
      "125": "CommentDataTest::::testSetCreatedTime()",
      "126": "CommentDataTest::::testSetCreatedTime()",
      "127": "CommentDataTest::::testSetCreatedTime()",
      "128": "CommentDataTest::::testSetCreatedTime()",
      "129": "CommentDataTest::::testSetCreatedTime()",
      "130": "CommentDataTest::::testSetCreatedTime()",
      "131": "CommentDataTest::::testSetCreatedTime()",
      "132": "CommentDataTest::::testSetCreatedTime()",
      "133": "CommentDataTest::::testSetCreatedTime()",
      "134": "CommentDataTest::::testSetCreatedTime()",
      "135": "CommentDataTest::::testSetCreatedTime()",
      "136": "CommentDataTest::::testSetCreatedTime()",
      "144": "CommentDataTest::::testSetId()",
      "145": "CommentDataTest::::testSetId()",
      "146": "CommentDataTest::::testSetId()",
      "147": "CommentDataTest::::testSetId()",
      "148": "CommentDataTest::::testSetId()",
      "149": "CommentDataTest::::testSetId()",
      "150": "CommentDataTest::::testSetId()",
      "151": "CommentDataTest::::testSetId()",
      "152": "CommentDataTest::::testSetId()",
      "153": "CommentDataTest::::testSetId()",
      "154": "CommentDataTest::::testSetId()",
      "155": "CommentDataTest::::testSetId()",
      "156": "CommentDataTest::::testSetId()",
      "164": "CommentDataTest::::testSetText()",
      "165": "CommentDataTest::::testSetText()",
      "166": "CommentDataTest::::testSetText()",
      "167": "CommentDataTest::::testSetText()",
      "168": "CommentDataTest::::testSetText()",
      "169": "CommentDataTest::::testSetText()",
      "170": "CommentDataTest::::testSetText()",
      "171": "CommentDataTest::::testSetText()",
      "172": "CommentDataTest::::testSetText()",
      "173": "CommentDataTest::::testSetText()",
      "174": "CommentDataTest::::testSetText()",
      "175": "CommentDataTest::::testSetText()",
      "176": "CommentDataTest::::testSetText()",
      "184": "CommentDataTest::::testToString()",
      "185": "CommentDataTest::::testToString()",
      "186": "CommentDataTest::::testToString()",
      "187": "CommentDataTest::::testToString()",
      "188": "CommentDataTest::::testToString()",
      "189": "CommentDataTest::::testToString()",
      "190": "CommentDataTest::::testToString()",
      "191": "CommentDataTest::::testToString()",
      "192": "CommentDataTest::::testToString()",
      "193": "CommentDataTest::::testToString()",
      "194": "CommentDataTest::::testToString()",
      "195": "CommentDataTest::::testToString()",
      "196": "CommentDataTest::::testToString()",
      "197": "CommentDataTest::::testToString()",
      "198": "CommentDataTest::::testToString()"
    },
    "tests": [
      {
        "test_lines": [
          19,
          36
        ],
        "covered_lines": [
          7,
          31,
          32,
          45,
          46,
          52,
          59,
          60,
          73,
          74
        ],
        "label": "CommentData::::getCommentFrom()"
      },
      {
        "test_lines": [
          43,
          55
        ],
        "covered_lines": [
          7,
          24,
          31,
          32,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "CommentData::::getCreatedTime()"
      },
      {
        "test_lines": [
          62,
          74
        ],
        "covered_lines": [
          7,
          31,
          32,
          45,
          46,
          59,
          60,
          66,
          73,
          74
        ],
        "label": "CommentData::::getId()"
      },
      {
        "test_lines": [
          83,
          95
        ],
        "covered_lines": [
          7,
          31,
          32,
          38,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "CommentData::::getText()"
      },
      {
        "test_lines": [
          104,
          116
        ],
        "covered_lines": [
          7,
          31,
          32,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "CommentData::::setCommentFrom(org.jinstagram.entity.common.FromTagData)"
      },
      {
        "test_lines": [
          124,
          136
        ],
        "covered_lines": [
          7,
          31,
          32,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "CommentData::::setCreatedTime(java.lang.String)"
      },
      {
        "test_lines": [
          144,
          156
        ],
        "covered_lines": [
          7,
          31,
          32,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "CommentData::::setId(java.lang.String)"
      },
      {
        "test_lines": [
          164,
          176
        ],
        "covered_lines": [
          7,
          31,
          32,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "CommentData::::setText(java.lang.String)"
      },
      {
        "test_lines": [
          184,
          198
        ],
        "covered_lines": [
          7,
          31,
          32,
          45,
          46,
          59,
          60,
          73,
          74,
          78
        ],
        "label": "CommentData::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/comments/MediaCommentResponse.java": {
    "class_content": [
      "package org.jinstagram.entity.comments;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "\n",
      "public class MediaCommentResponse extends InstagramObject{\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate CommentData commentData;\n",
      "\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t/**\n",
      "\t * @return the commentData\n",
      "\t */\n",
      "\tpublic CommentData getCommentData() {\n",
      "\t\treturn commentData;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param commentData the commentData to set\n",
      "\t */\n",
      "\tpublic void setCommentData(CommentData commentData) {\n",
      "\t\tthis.commentData = commentData;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"MediaCommentResponse [commentData=%s, meta=%s]\", commentData, meta);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.comments;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.junit.After;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>MediaCommentResponseTest</code> contains tests for the class\n",
      " * <code>{@link MediaCommentResponse}</code>.\n",
      " */\n",
      "public class MediaCommentResponseTest {\n",
      "\t/**\n",
      "\t * Run the CommentData getCommentData() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCommentData_1() throws Exception {\n",
      "\t\tMediaCommentResponse fixture = new MediaCommentResponse();\n",
      "\t\tfixture.setCommentData(new CommentData());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tCommentData result = fixture.getCommentData();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(null, result.getText());\n",
      "\t\tassertEquals(\"CommentData [commentFrom=null, createdTime=null, id=null, text=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t\tassertEquals(null, result.getCommentFrom());\n",
      "\t\tassertEquals(null, result.getCreatedTime());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1() throws Exception {\n",
      "\t\tMediaCommentResponse fixture = new MediaCommentResponse();\n",
      "\t\tfixture.setCommentData(new CommentData());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCommentData(CommentData) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCommentData_1() throws Exception {\n",
      "\t\tMediaCommentResponse fixture = new MediaCommentResponse();\n",
      "\t\tfixture.setCommentData(new CommentData());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tCommentData commentData = new CommentData();\n",
      "\n",
      "\t\tfixture.setCommentData(commentData);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1() throws Exception {\n",
      "\t\tMediaCommentResponse fixture = new MediaCommentResponse();\n",
      "\t\tfixture.setCommentData(new CommentData());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tMediaCommentResponse fixture = new MediaCommentResponse();\n",
      "\t\tfixture.setCommentData(new CommentData());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"MediaCommentResponse [commentData=CommentData [commentFrom=null, createdTime=null, id=null, text=null], meta=Meta [code=0, errorMessage=null, errorType=null]]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "MediaCommentResponse::::getCommentData()": [
        18,
        20
      ],
      "MediaCommentResponse::::setCommentData(org.jinstagram.entity.comments.CommentData)": [
        25,
        27
      ],
      "MediaCommentResponse::::getMeta()": [
        32,
        34
      ],
      "MediaCommentResponse::::setMeta(org.jinstagram.entity.common.Meta)": [
        39,
        41
      ],
      "MediaCommentResponse::::toString()": [
        43,
        46
      ]
    },
    "test_method_lines_dic": {
      "MediaCommentResponseTest::::testGetCommentData_1()": [
        23,
        38
      ],
      "MediaCommentResponseTest::::testGetMeta_1()": [
        47,
        61
      ],
      "MediaCommentResponseTest::::testSetCommentData_1()": [
        70,
        80
      ],
      "MediaCommentResponseTest::::testSetMeta_1()": [
        89,
        99
      ],
      "MediaCommentResponseTest::::testToString_1()": [
        108,
        120
      ]
    },
    "reverse_method_lines_dic": {
      "18": "MediaCommentResponse::::getCommentData()",
      "19": "MediaCommentResponse::::getCommentData()",
      "20": "MediaCommentResponse::::getCommentData()",
      "25": "MediaCommentResponse::::setCommentData(org.jinstagram.entity.comments.CommentData)",
      "26": "MediaCommentResponse::::setCommentData(org.jinstagram.entity.comments.CommentData)",
      "27": "MediaCommentResponse::::setCommentData(org.jinstagram.entity.comments.CommentData)",
      "32": "MediaCommentResponse::::getMeta()",
      "33": "MediaCommentResponse::::getMeta()",
      "34": "MediaCommentResponse::::getMeta()",
      "39": "MediaCommentResponse::::setMeta(org.jinstagram.entity.common.Meta)",
      "40": "MediaCommentResponse::::setMeta(org.jinstagram.entity.common.Meta)",
      "41": "MediaCommentResponse::::setMeta(org.jinstagram.entity.common.Meta)",
      "43": "MediaCommentResponse::::toString()",
      "44": "MediaCommentResponse::::toString()",
      "45": "MediaCommentResponse::::toString()",
      "46": "MediaCommentResponse::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "23": "MediaCommentResponseTest::::testGetCommentData_1()",
      "24": "MediaCommentResponseTest::::testGetCommentData_1()",
      "25": "MediaCommentResponseTest::::testGetCommentData_1()",
      "26": "MediaCommentResponseTest::::testGetCommentData_1()",
      "27": "MediaCommentResponseTest::::testGetCommentData_1()",
      "28": "MediaCommentResponseTest::::testGetCommentData_1()",
      "29": "MediaCommentResponseTest::::testGetCommentData_1()",
      "30": "MediaCommentResponseTest::::testGetCommentData_1()",
      "31": "MediaCommentResponseTest::::testGetCommentData_1()",
      "32": "MediaCommentResponseTest::::testGetCommentData_1()",
      "33": "MediaCommentResponseTest::::testGetCommentData_1()",
      "34": "MediaCommentResponseTest::::testGetCommentData_1()",
      "35": "MediaCommentResponseTest::::testGetCommentData_1()",
      "36": "MediaCommentResponseTest::::testGetCommentData_1()",
      "37": "MediaCommentResponseTest::::testGetCommentData_1()",
      "38": "MediaCommentResponseTest::::testGetCommentData_1()",
      "47": "MediaCommentResponseTest::::testGetMeta_1()",
      "48": "MediaCommentResponseTest::::testGetMeta_1()",
      "49": "MediaCommentResponseTest::::testGetMeta_1()",
      "50": "MediaCommentResponseTest::::testGetMeta_1()",
      "51": "MediaCommentResponseTest::::testGetMeta_1()",
      "52": "MediaCommentResponseTest::::testGetMeta_1()",
      "53": "MediaCommentResponseTest::::testGetMeta_1()",
      "54": "MediaCommentResponseTest::::testGetMeta_1()",
      "55": "MediaCommentResponseTest::::testGetMeta_1()",
      "56": "MediaCommentResponseTest::::testGetMeta_1()",
      "57": "MediaCommentResponseTest::::testGetMeta_1()",
      "58": "MediaCommentResponseTest::::testGetMeta_1()",
      "59": "MediaCommentResponseTest::::testGetMeta_1()",
      "60": "MediaCommentResponseTest::::testGetMeta_1()",
      "61": "MediaCommentResponseTest::::testGetMeta_1()",
      "70": "MediaCommentResponseTest::::testSetCommentData_1()",
      "71": "MediaCommentResponseTest::::testSetCommentData_1()",
      "72": "MediaCommentResponseTest::::testSetCommentData_1()",
      "73": "MediaCommentResponseTest::::testSetCommentData_1()",
      "74": "MediaCommentResponseTest::::testSetCommentData_1()",
      "75": "MediaCommentResponseTest::::testSetCommentData_1()",
      "76": "MediaCommentResponseTest::::testSetCommentData_1()",
      "77": "MediaCommentResponseTest::::testSetCommentData_1()",
      "78": "MediaCommentResponseTest::::testSetCommentData_1()",
      "79": "MediaCommentResponseTest::::testSetCommentData_1()",
      "80": "MediaCommentResponseTest::::testSetCommentData_1()",
      "89": "MediaCommentResponseTest::::testSetMeta_1()",
      "90": "MediaCommentResponseTest::::testSetMeta_1()",
      "91": "MediaCommentResponseTest::::testSetMeta_1()",
      "92": "MediaCommentResponseTest::::testSetMeta_1()",
      "93": "MediaCommentResponseTest::::testSetMeta_1()",
      "94": "MediaCommentResponseTest::::testSetMeta_1()",
      "95": "MediaCommentResponseTest::::testSetMeta_1()",
      "96": "MediaCommentResponseTest::::testSetMeta_1()",
      "97": "MediaCommentResponseTest::::testSetMeta_1()",
      "98": "MediaCommentResponseTest::::testSetMeta_1()",
      "99": "MediaCommentResponseTest::::testSetMeta_1()",
      "108": "MediaCommentResponseTest::::testToString_1()",
      "109": "MediaCommentResponseTest::::testToString_1()",
      "110": "MediaCommentResponseTest::::testToString_1()",
      "111": "MediaCommentResponseTest::::testToString_1()",
      "112": "MediaCommentResponseTest::::testToString_1()",
      "113": "MediaCommentResponseTest::::testToString_1()",
      "114": "MediaCommentResponseTest::::testToString_1()",
      "115": "MediaCommentResponseTest::::testToString_1()",
      "116": "MediaCommentResponseTest::::testToString_1()",
      "117": "MediaCommentResponseTest::::testToString_1()",
      "118": "MediaCommentResponseTest::::testToString_1()",
      "119": "MediaCommentResponseTest::::testToString_1()",
      "120": "MediaCommentResponseTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          23,
          38
        ],
        "covered_lines": [
          8,
          19,
          26,
          27,
          40,
          41
        ],
        "label": "MediaCommentResponse::::getCommentData()"
      },
      {
        "test_lines": [
          47,
          61
        ],
        "covered_lines": [
          8,
          26,
          27,
          33,
          40,
          41
        ],
        "label": "MediaCommentResponse::::getMeta()"
      },
      {
        "test_lines": [
          70,
          80
        ],
        "covered_lines": [
          8,
          26,
          27,
          40,
          41
        ],
        "label": "MediaCommentResponse::::setCommentData(org.jinstagram.entity.comments.CommentData)"
      },
      {
        "test_lines": [
          89,
          99
        ],
        "covered_lines": [
          8,
          26,
          27,
          40,
          41
        ],
        "label": "MediaCommentResponse::::setMeta(org.jinstagram.entity.common.Meta)"
      },
      {
        "test_lines": [
          108,
          120
        ],
        "covered_lines": [
          8,
          26,
          27,
          40,
          41,
          45
        ],
        "label": "MediaCommentResponse::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/Images.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class Images {\n",
      "\t@SerializedName(\"low_resolution\")\n",
      "\tprivate ImageData lowResolution;\n",
      "\n",
      "\t@SerializedName(\"standard_resolution\")\n",
      "\tprivate ImageData standardResolution;\n",
      "\n",
      "\t@SerializedName(\"thumbnail\")\n",
      "\tprivate ImageData thumbnail;\n",
      "\n",
      "\tpublic ImageData getLowResolution() {\n",
      "\t\treturn lowResolution;\n",
      "\t}\n",
      "\n",
      "\tpublic void setLowResolution(ImageData lowResolution) {\n",
      "\t\tthis.lowResolution = lowResolution;\n",
      "\t}\n",
      "\n",
      "\tpublic ImageData getThumbnail() {\n",
      "\t\treturn thumbnail;\n",
      "\t}\n",
      "\n",
      "\tpublic void setThumbnail(ImageData thumbnail) {\n",
      "\t\tthis.thumbnail = thumbnail;\n",
      "\t}\n",
      "\n",
      "\tpublic ImageData getStandardResolution() {\n",
      "\t\treturn standardResolution;\n",
      "\t}\n",
      "\n",
      "\tpublic void setStandardResolution(ImageData standardResolution) {\n",
      "\t\tthis.standardResolution = standardResolution;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"Images [lowResolution=%s, standardResolution=%s, thumbnail=%s]\",\n",
      "                lowResolution, standardResolution, thumbnail);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>ImagesTest</code> contains tests for the class\n",
      " * <code>{@link Images}</code>.\n",
      " */\n",
      "public class ImagesTest {\n",
      "\t/**\n",
      "\t * Run the ImageData getLowResolution() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLowResolution() throws Exception {\n",
      "\t\tImages fixture = new Images();\n",
      "\t\tfixture.setThumbnail(new ImageData());\n",
      "\t\tfixture.setLowResolution(new ImageData());\n",
      "\t\tfixture.setStandardResolution(new ImageData());\n",
      "\n",
      "\t\tImageData result = fixture.getLowResolution();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"ImageData [imageHeight=0, imageUrl=null, imageWidth=0]\", result.toString());\n",
      "\t\tassertEquals(null, result.getImageUrl());\n",
      "\t\tassertEquals(0, result.getImageHeight());\n",
      "\t\tassertEquals(0, result.getImageWidth());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the ImageData getStandardResolution() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetStandardResolution() throws Exception {\n",
      "\t\tImages fixture = new Images();\n",
      "\t\tfixture.setThumbnail(new ImageData());\n",
      "\t\tfixture.setLowResolution(new ImageData());\n",
      "\t\tfixture.setStandardResolution(new ImageData());\n",
      "\n",
      "\t\tImageData result = fixture.getStandardResolution();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"ImageData [imageHeight=0, imageUrl=null, imageWidth=0]\", result.toString());\n",
      "\t\tassertEquals(null, result.getImageUrl());\n",
      "\t\tassertEquals(0, result.getImageHeight());\n",
      "\t\tassertEquals(0, result.getImageWidth());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the ImageData getThumbnail() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetThumbnail() throws Exception {\n",
      "\t\tImages fixture = new Images();\n",
      "\t\tfixture.setThumbnail(new ImageData());\n",
      "\t\tfixture.setLowResolution(new ImageData());\n",
      "\t\tfixture.setStandardResolution(new ImageData());\n",
      "\n",
      "\t\tImageData result = fixture.getThumbnail();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"ImageData [imageHeight=0, imageUrl=null, imageWidth=0]\", result.toString());\n",
      "\t\tassertEquals(null, result.getImageUrl());\n",
      "\t\tassertEquals(0, result.getImageHeight());\n",
      "\t\tassertEquals(0, result.getImageWidth());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLowResolution(ImageData) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLowResolution() throws Exception {\n",
      "\t\tImages fixture = new Images();\n",
      "\t\tfixture.setThumbnail(new ImageData());\n",
      "\t\tfixture.setLowResolution(new ImageData());\n",
      "\t\tfixture.setStandardResolution(new ImageData());\n",
      "\t\tImageData lowResolution = new ImageData();\n",
      "\n",
      "\t\tfixture.setLowResolution(lowResolution);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setStandardResolution(ImageData) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetStandardResolution() throws Exception {\n",
      "\t\tImages fixture = new Images();\n",
      "\t\tfixture.setThumbnail(new ImageData());\n",
      "\t\tfixture.setLowResolution(new ImageData());\n",
      "\t\tfixture.setStandardResolution(new ImageData());\n",
      "\t\tImageData standardResolution = new ImageData();\n",
      "\n",
      "\t\tfixture.setStandardResolution(standardResolution);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setThumbnail(ImageData) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetThumbnail() throws Exception {\n",
      "\t\tImages fixture = new Images();\n",
      "\t\tfixture.setThumbnail(new ImageData());\n",
      "\t\tfixture.setLowResolution(new ImageData());\n",
      "\t\tfixture.setStandardResolution(new ImageData());\n",
      "\t\tImageData thumbnail = new ImageData();\n",
      "\n",
      "\t\tfixture.setThumbnail(thumbnail);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tImages fixture = new Images();\n",
      "\t\tfixture.setThumbnail(new ImageData());\n",
      "\t\tfixture.setLowResolution(new ImageData());\n",
      "\t\tfixture.setStandardResolution(new ImageData());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"Images [lowResolution=ImageData [imageHeight=0, imageUrl=null, imageWidth=0], standardResolution=ImageData [imageHeight=0, imageUrl=null, imageWidth=0], thumbnail=ImageData [imageHeight=0, imageUrl=null, imageWidth=0]]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "Images::::getLowResolution()": [
        15,
        17
      ],
      "Images::::setLowResolution(org.jinstagram.entity.common.ImageData)": [
        19,
        21
      ],
      "Images::::getThumbnail()": [
        23,
        25
      ],
      "Images::::setThumbnail(org.jinstagram.entity.common.ImageData)": [
        27,
        29
      ],
      "Images::::getStandardResolution()": [
        31,
        33
      ],
      "Images::::setStandardResolution(org.jinstagram.entity.common.ImageData)": [
        35,
        37
      ],
      "Images::::toString()": [
        39,
        43
      ]
    },
    "test_method_lines_dic": {
      "ImagesTest::::testGetLowResolution()": [
        20,
        35
      ],
      "ImagesTest::::testGetStandardResolution()": [
        44,
        59
      ],
      "ImagesTest::::testGetThumbnail()": [
        68,
        83
      ],
      "ImagesTest::::testSetLowResolution()": [
        92,
        103
      ],
      "ImagesTest::::testSetStandardResolution()": [
        112,
        123
      ],
      "ImagesTest::::testSetThumbnail()": [
        132,
        143
      ],
      "ImagesTest::::testToString()": [
        152,
        165
      ]
    },
    "reverse_method_lines_dic": {
      "15": "Images::::getLowResolution()",
      "16": "Images::::getLowResolution()",
      "17": "Images::::getLowResolution()",
      "19": "Images::::setLowResolution(org.jinstagram.entity.common.ImageData)",
      "20": "Images::::setLowResolution(org.jinstagram.entity.common.ImageData)",
      "21": "Images::::setLowResolution(org.jinstagram.entity.common.ImageData)",
      "23": "Images::::getThumbnail()",
      "24": "Images::::getThumbnail()",
      "25": "Images::::getThumbnail()",
      "27": "Images::::setThumbnail(org.jinstagram.entity.common.ImageData)",
      "28": "Images::::setThumbnail(org.jinstagram.entity.common.ImageData)",
      "29": "Images::::setThumbnail(org.jinstagram.entity.common.ImageData)",
      "31": "Images::::getStandardResolution()",
      "32": "Images::::getStandardResolution()",
      "33": "Images::::getStandardResolution()",
      "35": "Images::::setStandardResolution(org.jinstagram.entity.common.ImageData)",
      "36": "Images::::setStandardResolution(org.jinstagram.entity.common.ImageData)",
      "37": "Images::::setStandardResolution(org.jinstagram.entity.common.ImageData)",
      "39": "Images::::toString()",
      "40": "Images::::toString()",
      "41": "Images::::toString()",
      "42": "Images::::toString()",
      "43": "Images::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "20": "ImagesTest::::testGetLowResolution()",
      "21": "ImagesTest::::testGetLowResolution()",
      "22": "ImagesTest::::testGetLowResolution()",
      "23": "ImagesTest::::testGetLowResolution()",
      "24": "ImagesTest::::testGetLowResolution()",
      "25": "ImagesTest::::testGetLowResolution()",
      "26": "ImagesTest::::testGetLowResolution()",
      "27": "ImagesTest::::testGetLowResolution()",
      "28": "ImagesTest::::testGetLowResolution()",
      "29": "ImagesTest::::testGetLowResolution()",
      "30": "ImagesTest::::testGetLowResolution()",
      "31": "ImagesTest::::testGetLowResolution()",
      "32": "ImagesTest::::testGetLowResolution()",
      "33": "ImagesTest::::testGetLowResolution()",
      "34": "ImagesTest::::testGetLowResolution()",
      "35": "ImagesTest::::testGetLowResolution()",
      "44": "ImagesTest::::testGetStandardResolution()",
      "45": "ImagesTest::::testGetStandardResolution()",
      "46": "ImagesTest::::testGetStandardResolution()",
      "47": "ImagesTest::::testGetStandardResolution()",
      "48": "ImagesTest::::testGetStandardResolution()",
      "49": "ImagesTest::::testGetStandardResolution()",
      "50": "ImagesTest::::testGetStandardResolution()",
      "51": "ImagesTest::::testGetStandardResolution()",
      "52": "ImagesTest::::testGetStandardResolution()",
      "53": "ImagesTest::::testGetStandardResolution()",
      "54": "ImagesTest::::testGetStandardResolution()",
      "55": "ImagesTest::::testGetStandardResolution()",
      "56": "ImagesTest::::testGetStandardResolution()",
      "57": "ImagesTest::::testGetStandardResolution()",
      "58": "ImagesTest::::testGetStandardResolution()",
      "59": "ImagesTest::::testGetStandardResolution()",
      "68": "ImagesTest::::testGetThumbnail()",
      "69": "ImagesTest::::testGetThumbnail()",
      "70": "ImagesTest::::testGetThumbnail()",
      "71": "ImagesTest::::testGetThumbnail()",
      "72": "ImagesTest::::testGetThumbnail()",
      "73": "ImagesTest::::testGetThumbnail()",
      "74": "ImagesTest::::testGetThumbnail()",
      "75": "ImagesTest::::testGetThumbnail()",
      "76": "ImagesTest::::testGetThumbnail()",
      "77": "ImagesTest::::testGetThumbnail()",
      "78": "ImagesTest::::testGetThumbnail()",
      "79": "ImagesTest::::testGetThumbnail()",
      "80": "ImagesTest::::testGetThumbnail()",
      "81": "ImagesTest::::testGetThumbnail()",
      "82": "ImagesTest::::testGetThumbnail()",
      "83": "ImagesTest::::testGetThumbnail()",
      "92": "ImagesTest::::testSetLowResolution()",
      "93": "ImagesTest::::testSetLowResolution()",
      "94": "ImagesTest::::testSetLowResolution()",
      "95": "ImagesTest::::testSetLowResolution()",
      "96": "ImagesTest::::testSetLowResolution()",
      "97": "ImagesTest::::testSetLowResolution()",
      "98": "ImagesTest::::testSetLowResolution()",
      "99": "ImagesTest::::testSetLowResolution()",
      "100": "ImagesTest::::testSetLowResolution()",
      "101": "ImagesTest::::testSetLowResolution()",
      "102": "ImagesTest::::testSetLowResolution()",
      "103": "ImagesTest::::testSetLowResolution()",
      "112": "ImagesTest::::testSetStandardResolution()",
      "113": "ImagesTest::::testSetStandardResolution()",
      "114": "ImagesTest::::testSetStandardResolution()",
      "115": "ImagesTest::::testSetStandardResolution()",
      "116": "ImagesTest::::testSetStandardResolution()",
      "117": "ImagesTest::::testSetStandardResolution()",
      "118": "ImagesTest::::testSetStandardResolution()",
      "119": "ImagesTest::::testSetStandardResolution()",
      "120": "ImagesTest::::testSetStandardResolution()",
      "121": "ImagesTest::::testSetStandardResolution()",
      "122": "ImagesTest::::testSetStandardResolution()",
      "123": "ImagesTest::::testSetStandardResolution()",
      "132": "ImagesTest::::testSetThumbnail()",
      "133": "ImagesTest::::testSetThumbnail()",
      "134": "ImagesTest::::testSetThumbnail()",
      "135": "ImagesTest::::testSetThumbnail()",
      "136": "ImagesTest::::testSetThumbnail()",
      "137": "ImagesTest::::testSetThumbnail()",
      "138": "ImagesTest::::testSetThumbnail()",
      "139": "ImagesTest::::testSetThumbnail()",
      "140": "ImagesTest::::testSetThumbnail()",
      "141": "ImagesTest::::testSetThumbnail()",
      "142": "ImagesTest::::testSetThumbnail()",
      "143": "ImagesTest::::testSetThumbnail()",
      "152": "ImagesTest::::testToString()",
      "153": "ImagesTest::::testToString()",
      "154": "ImagesTest::::testToString()",
      "155": "ImagesTest::::testToString()",
      "156": "ImagesTest::::testToString()",
      "157": "ImagesTest::::testToString()",
      "158": "ImagesTest::::testToString()",
      "159": "ImagesTest::::testToString()",
      "160": "ImagesTest::::testToString()",
      "161": "ImagesTest::::testToString()",
      "162": "ImagesTest::::testToString()",
      "163": "ImagesTest::::testToString()",
      "164": "ImagesTest::::testToString()",
      "165": "ImagesTest::::testToString()"
    },
    "tests": [
      {
        "test_lines": [
          20,
          35
        ],
        "covered_lines": [
          5,
          16,
          20,
          21,
          28,
          29,
          36,
          37
        ],
        "label": "Images::::getLowResolution()"
      },
      {
        "test_lines": [
          44,
          59
        ],
        "covered_lines": [
          5,
          20,
          21,
          28,
          29,
          32,
          36,
          37
        ],
        "label": "Images::::getStandardResolution()"
      },
      {
        "test_lines": [
          68,
          83
        ],
        "covered_lines": [
          5,
          20,
          21,
          24,
          28,
          29,
          36,
          37
        ],
        "label": "Images::::getThumbnail()"
      },
      {
        "test_lines": [
          92,
          103
        ],
        "covered_lines": [
          5,
          20,
          21,
          28,
          29,
          36,
          37
        ],
        "label": "Images::::setLowResolution(org.jinstagram.entity.common.ImageData)"
      },
      {
        "test_lines": [
          112,
          123
        ],
        "covered_lines": [
          5,
          20,
          21,
          28,
          29,
          36,
          37
        ],
        "label": "Images::::setStandardResolution(org.jinstagram.entity.common.ImageData)"
      },
      {
        "test_lines": [
          132,
          143
        ],
        "covered_lines": [
          5,
          20,
          21,
          28,
          29,
          36,
          37
        ],
        "label": "Images::::setThumbnail(org.jinstagram.entity.common.ImageData)"
      },
      {
        "test_lines": [
          152,
          165
        ],
        "covered_lines": [
          5,
          20,
          21,
          28,
          29,
          36,
          37,
          41
        ],
        "label": "Images::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/FromTagData.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class FromTagData {\n",
      "\t@SerializedName(\"full_name\")\n",
      "\tprivate String fullName;\n",
      "\n",
      "\t@SerializedName(\"id\")\n",
      "\tprivate String id;\n",
      "\n",
      "\t@SerializedName(\"profile_picture\")\n",
      "\tprivate String profilePicture;\n",
      "\n",
      "\t@SerializedName(\"username\")\n",
      "\tprivate String username;\n",
      "\n",
      "\tpublic String getUsername() {\n",
      "\t\treturn username;\n",
      "\t}\n",
      "\n",
      "\tpublic void setUsername(String username) {\n",
      "\t\tthis.username = username;\n",
      "\t}\n",
      "\n",
      "\tpublic String getId() {\n",
      "\t\treturn id;\n",
      "\t}\n",
      "\n",
      "\tpublic void setId(String id) {\n",
      "\t\tthis.id = id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the profilePicture\n",
      "\t */\n",
      "\tpublic String getProfilePicture() {\n",
      "\t\treturn profilePicture;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param profilePicture the profilePicture to set\n",
      "\t */\n",
      "\tpublic void setProfilePicture(String profilePicture) {\n",
      "\t\tthis.profilePicture = profilePicture;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the fullName\n",
      "\t */\n",
      "\tpublic String getFullName() {\n",
      "\t\treturn fullName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param fullName the fullName to set\n",
      "\t */\n",
      "\tpublic void setFullName(String fullName) {\n",
      "\t\tthis.fullName = fullName;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"FromTagData [fullName=%s, id=%s, profilePicture=%s, username=%s]\",\n",
      "                fullName, id, profilePicture, username);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>FromTagDataTest</code> contains tests for the class\n",
      " * <code>{@link FromTagData}</code>.\n",
      " *\n",
      " * \n",
      " * @author Sachin Handiekar\n",
      " */\n",
      "public class FromTagDataTest {\n",
      "\t/**\n",
      "\t * Run the String getFullName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetFullName() throws Exception {\n",
      "\t\tFromTagData fromTagData = new FromTagData();\n",
      "\t\tfromTagData.setProfilePicture(\"\");\n",
      "\t\tfromTagData.setUsername(\"\");\n",
      "\t\tfromTagData.setId(\"\");\n",
      "\t\tfromTagData.setFullName(\"\");\n",
      "\n",
      "\t\tString result = fromTagData.getFullName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetId() throws Exception {\n",
      "\t\tFromTagData fromTagData = new FromTagData();\n",
      "\t\tfromTagData.setProfilePicture(\"\");\n",
      "\t\tfromTagData.setUsername(\"\");\n",
      "\t\tfromTagData.setId(\"\");\n",
      "\t\tfromTagData.setFullName(\"\");\n",
      "\n",
      "\t\tString result = fromTagData.getId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getProfilePicture() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetProfilePicture() throws Exception {\n",
      "\t\tFromTagData fromTagData = new FromTagData();\n",
      "\t\tfromTagData.setProfilePicture(\"\");\n",
      "\t\tfromTagData.setUsername(\"\");\n",
      "\t\tfromTagData.setId(\"\");\n",
      "\t\tfromTagData.setFullName(\"\");\n",
      "\n",
      "\t\tString result = fromTagData.getProfilePicture();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getUsername() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUsername() throws Exception {\n",
      "\t\tFromTagData fromTagData = new FromTagData();\n",
      "\t\tfromTagData.setProfilePicture(\"\");\n",
      "\t\tfromTagData.setUsername(\"\");\n",
      "\t\tfromTagData.setId(\"\");\n",
      "\t\tfromTagData.setFullName(\"\");\n",
      "\n",
      "\t\tString result = fromTagData.getUsername();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setFullName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetFullName() throws Exception {\n",
      "\t\tFromTagData fromTagData = new FromTagData();\n",
      "\t\tfromTagData.setProfilePicture(\"\");\n",
      "\t\tfromTagData.setUsername(\"\");\n",
      "\t\tfromTagData.setId(\"\");\n",
      "\t\tfromTagData.setFullName(\"\");\n",
      "\t\tString fullName = \"\";\n",
      "\n",
      "\t\tfromTagData.setFullName(fullName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetId() throws Exception {\n",
      "\t\tFromTagData fromTagData = new FromTagData();\n",
      "\t\tfromTagData.setProfilePicture(\"\");\n",
      "\t\tfromTagData.setUsername(\"\");\n",
      "\t\tfromTagData.setId(\"\");\n",
      "\t\tfromTagData.setFullName(\"\");\n",
      "\t\tString id = \"\";\n",
      "\n",
      "\t\tfromTagData.setId(id);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setProfilePicture(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetProfilePicture() throws Exception {\n",
      "\t\tFromTagData fromTagData = new FromTagData();\n",
      "\t\tfromTagData.setProfilePicture(\"\");\n",
      "\t\tfromTagData.setUsername(\"\");\n",
      "\t\tfromTagData.setId(\"\");\n",
      "\t\tfromTagData.setFullName(\"\");\n",
      "\t\tString profilePicture = \"\";\n",
      "\n",
      "\t\tfromTagData.setProfilePicture(profilePicture);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUsername(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUsername() throws Exception {\n",
      "\t\tFromTagData fromTagData = new FromTagData();\n",
      "\t\tfromTagData.setProfilePicture(\"\");\n",
      "\t\tfromTagData.setUsername(\"\");\n",
      "\t\tfromTagData.setId(\"\");\n",
      "\t\tfromTagData.setFullName(\"\");\n",
      "\t\tString username = \"\";\n",
      "\n",
      "\t\tfromTagData.setUsername(username);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tFromTagData fromTagData = new FromTagData();\n",
      "\t\tfromTagData.setProfilePicture(\"\");\n",
      "\t\tfromTagData.setUsername(\"\");\n",
      "\t\tfromTagData.setId(\"\");\n",
      "\t\tfromTagData.setFullName(\"\");\n",
      "\n",
      "\t\tString result = fromTagData.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"FromTagData [fullName=, id=, profilePicture=, username=]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "FromTagData::::getUsername()": [
        18,
        20
      ],
      "FromTagData::::setUsername(java.lang.String)": [
        22,
        24
      ],
      "FromTagData::::getId()": [
        26,
        28
      ],
      "FromTagData::::setId(java.lang.String)": [
        30,
        32
      ],
      "FromTagData::::getProfilePicture()": [
        37,
        39
      ],
      "FromTagData::::setProfilePicture(java.lang.String)": [
        44,
        46
      ],
      "FromTagData::::getFullName()": [
        51,
        53
      ],
      "FromTagData::::setFullName(java.lang.String)": [
        58,
        60
      ],
      "FromTagData::::toString()": [
        62,
        66
      ]
    },
    "test_method_lines_dic": {
      "FromTagDataTest::::testGetFullName()": [
        21,
        33
      ],
      "FromTagDataTest::::testGetId()": [
        43,
        55
      ],
      "FromTagDataTest::::testGetProfilePicture()": [
        65,
        77
      ],
      "FromTagDataTest::::testGetUsername()": [
        85,
        97
      ],
      "FromTagDataTest::::testSetFullName()": [
        107,
        119
      ],
      "FromTagDataTest::::testSetId()": [
        129,
        141
      ],
      "FromTagDataTest::::testSetProfilePicture()": [
        151,
        163
      ],
      "FromTagDataTest::::testSetUsername()": [
        173,
        185
      ],
      "FromTagDataTest::::testToString()": [
        193,
        205
      ]
    },
    "reverse_method_lines_dic": {
      "18": "FromTagData::::getUsername()",
      "19": "FromTagData::::getUsername()",
      "20": "FromTagData::::getUsername()",
      "22": "FromTagData::::setUsername(java.lang.String)",
      "23": "FromTagData::::setUsername(java.lang.String)",
      "24": "FromTagData::::setUsername(java.lang.String)",
      "26": "FromTagData::::getId()",
      "27": "FromTagData::::getId()",
      "28": "FromTagData::::getId()",
      "30": "FromTagData::::setId(java.lang.String)",
      "31": "FromTagData::::setId(java.lang.String)",
      "32": "FromTagData::::setId(java.lang.String)",
      "37": "FromTagData::::getProfilePicture()",
      "38": "FromTagData::::getProfilePicture()",
      "39": "FromTagData::::getProfilePicture()",
      "44": "FromTagData::::setProfilePicture(java.lang.String)",
      "45": "FromTagData::::setProfilePicture(java.lang.String)",
      "46": "FromTagData::::setProfilePicture(java.lang.String)",
      "51": "FromTagData::::getFullName()",
      "52": "FromTagData::::getFullName()",
      "53": "FromTagData::::getFullName()",
      "58": "FromTagData::::setFullName(java.lang.String)",
      "59": "FromTagData::::setFullName(java.lang.String)",
      "60": "FromTagData::::setFullName(java.lang.String)",
      "62": "FromTagData::::toString()",
      "63": "FromTagData::::toString()",
      "64": "FromTagData::::toString()",
      "65": "FromTagData::::toString()",
      "66": "FromTagData::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "21": "FromTagDataTest::::testGetFullName()",
      "22": "FromTagDataTest::::testGetFullName()",
      "23": "FromTagDataTest::::testGetFullName()",
      "24": "FromTagDataTest::::testGetFullName()",
      "25": "FromTagDataTest::::testGetFullName()",
      "26": "FromTagDataTest::::testGetFullName()",
      "27": "FromTagDataTest::::testGetFullName()",
      "28": "FromTagDataTest::::testGetFullName()",
      "29": "FromTagDataTest::::testGetFullName()",
      "30": "FromTagDataTest::::testGetFullName()",
      "31": "FromTagDataTest::::testGetFullName()",
      "32": "FromTagDataTest::::testGetFullName()",
      "33": "FromTagDataTest::::testGetFullName()",
      "43": "FromTagDataTest::::testGetId()",
      "44": "FromTagDataTest::::testGetId()",
      "45": "FromTagDataTest::::testGetId()",
      "46": "FromTagDataTest::::testGetId()",
      "47": "FromTagDataTest::::testGetId()",
      "48": "FromTagDataTest::::testGetId()",
      "49": "FromTagDataTest::::testGetId()",
      "50": "FromTagDataTest::::testGetId()",
      "51": "FromTagDataTest::::testGetId()",
      "52": "FromTagDataTest::::testGetId()",
      "53": "FromTagDataTest::::testGetId()",
      "54": "FromTagDataTest::::testGetId()",
      "55": "FromTagDataTest::::testGetId()",
      "65": "FromTagDataTest::::testGetProfilePicture()",
      "66": "FromTagDataTest::::testGetProfilePicture()",
      "67": "FromTagDataTest::::testGetProfilePicture()",
      "68": "FromTagDataTest::::testGetProfilePicture()",
      "69": "FromTagDataTest::::testGetProfilePicture()",
      "70": "FromTagDataTest::::testGetProfilePicture()",
      "71": "FromTagDataTest::::testGetProfilePicture()",
      "72": "FromTagDataTest::::testGetProfilePicture()",
      "73": "FromTagDataTest::::testGetProfilePicture()",
      "74": "FromTagDataTest::::testGetProfilePicture()",
      "75": "FromTagDataTest::::testGetProfilePicture()",
      "76": "FromTagDataTest::::testGetProfilePicture()",
      "77": "FromTagDataTest::::testGetProfilePicture()",
      "85": "FromTagDataTest::::testGetUsername()",
      "86": "FromTagDataTest::::testGetUsername()",
      "87": "FromTagDataTest::::testGetUsername()",
      "88": "FromTagDataTest::::testGetUsername()",
      "89": "FromTagDataTest::::testGetUsername()",
      "90": "FromTagDataTest::::testGetUsername()",
      "91": "FromTagDataTest::::testGetUsername()",
      "92": "FromTagDataTest::::testGetUsername()",
      "93": "FromTagDataTest::::testGetUsername()",
      "94": "FromTagDataTest::::testGetUsername()",
      "95": "FromTagDataTest::::testGetUsername()",
      "96": "FromTagDataTest::::testGetUsername()",
      "97": "FromTagDataTest::::testGetUsername()",
      "107": "FromTagDataTest::::testSetFullName()",
      "108": "FromTagDataTest::::testSetFullName()",
      "109": "FromTagDataTest::::testSetFullName()",
      "110": "FromTagDataTest::::testSetFullName()",
      "111": "FromTagDataTest::::testSetFullName()",
      "112": "FromTagDataTest::::testSetFullName()",
      "113": "FromTagDataTest::::testSetFullName()",
      "114": "FromTagDataTest::::testSetFullName()",
      "115": "FromTagDataTest::::testSetFullName()",
      "116": "FromTagDataTest::::testSetFullName()",
      "117": "FromTagDataTest::::testSetFullName()",
      "118": "FromTagDataTest::::testSetFullName()",
      "119": "FromTagDataTest::::testSetFullName()",
      "129": "FromTagDataTest::::testSetId()",
      "130": "FromTagDataTest::::testSetId()",
      "131": "FromTagDataTest::::testSetId()",
      "132": "FromTagDataTest::::testSetId()",
      "133": "FromTagDataTest::::testSetId()",
      "134": "FromTagDataTest::::testSetId()",
      "135": "FromTagDataTest::::testSetId()",
      "136": "FromTagDataTest::::testSetId()",
      "137": "FromTagDataTest::::testSetId()",
      "138": "FromTagDataTest::::testSetId()",
      "139": "FromTagDataTest::::testSetId()",
      "140": "FromTagDataTest::::testSetId()",
      "141": "FromTagDataTest::::testSetId()",
      "151": "FromTagDataTest::::testSetProfilePicture()",
      "152": "FromTagDataTest::::testSetProfilePicture()",
      "153": "FromTagDataTest::::testSetProfilePicture()",
      "154": "FromTagDataTest::::testSetProfilePicture()",
      "155": "FromTagDataTest::::testSetProfilePicture()",
      "156": "FromTagDataTest::::testSetProfilePicture()",
      "157": "FromTagDataTest::::testSetProfilePicture()",
      "158": "FromTagDataTest::::testSetProfilePicture()",
      "159": "FromTagDataTest::::testSetProfilePicture()",
      "160": "FromTagDataTest::::testSetProfilePicture()",
      "161": "FromTagDataTest::::testSetProfilePicture()",
      "162": "FromTagDataTest::::testSetProfilePicture()",
      "163": "FromTagDataTest::::testSetProfilePicture()",
      "173": "FromTagDataTest::::testSetUsername()",
      "174": "FromTagDataTest::::testSetUsername()",
      "175": "FromTagDataTest::::testSetUsername()",
      "176": "FromTagDataTest::::testSetUsername()",
      "177": "FromTagDataTest::::testSetUsername()",
      "178": "FromTagDataTest::::testSetUsername()",
      "179": "FromTagDataTest::::testSetUsername()",
      "180": "FromTagDataTest::::testSetUsername()",
      "181": "FromTagDataTest::::testSetUsername()",
      "182": "FromTagDataTest::::testSetUsername()",
      "183": "FromTagDataTest::::testSetUsername()",
      "184": "FromTagDataTest::::testSetUsername()",
      "185": "FromTagDataTest::::testSetUsername()",
      "193": "FromTagDataTest::::testToString()",
      "194": "FromTagDataTest::::testToString()",
      "195": "FromTagDataTest::::testToString()",
      "196": "FromTagDataTest::::testToString()",
      "197": "FromTagDataTest::::testToString()",
      "198": "FromTagDataTest::::testToString()",
      "199": "FromTagDataTest::::testToString()",
      "200": "FromTagDataTest::::testToString()",
      "201": "FromTagDataTest::::testToString()",
      "202": "FromTagDataTest::::testToString()",
      "203": "FromTagDataTest::::testToString()",
      "204": "FromTagDataTest::::testToString()",
      "205": "FromTagDataTest::::testToString()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          33
        ],
        "covered_lines": [
          5,
          23,
          24,
          31,
          32,
          45,
          46,
          52,
          59,
          60
        ],
        "label": "FromTagData::::getFullName()"
      },
      {
        "test_lines": [
          43,
          55
        ],
        "covered_lines": [
          5,
          23,
          24,
          27,
          31,
          32,
          45,
          46,
          59,
          60
        ],
        "label": "FromTagData::::getId()"
      },
      {
        "test_lines": [
          65,
          77
        ],
        "covered_lines": [
          5,
          23,
          24,
          31,
          32,
          38,
          45,
          46,
          59,
          60
        ],
        "label": "FromTagData::::getProfilePicture()"
      },
      {
        "test_lines": [
          85,
          97
        ],
        "covered_lines": [
          5,
          19,
          23,
          24,
          31,
          32,
          45,
          46,
          59,
          60
        ],
        "label": "FromTagData::::getUsername()"
      },
      {
        "test_lines": [
          107,
          119
        ],
        "covered_lines": [
          5,
          23,
          24,
          31,
          32,
          45,
          46,
          59,
          60
        ],
        "label": "FromTagData::::setFullName(java.lang.String)"
      },
      {
        "test_lines": [
          129,
          141
        ],
        "covered_lines": [
          5,
          23,
          24,
          31,
          32,
          45,
          46,
          59,
          60
        ],
        "label": "FromTagData::::setId(java.lang.String)"
      },
      {
        "test_lines": [
          151,
          163
        ],
        "covered_lines": [
          5,
          23,
          24,
          31,
          32,
          45,
          46,
          59,
          60
        ],
        "label": "FromTagData::::setProfilePicture(java.lang.String)"
      },
      {
        "test_lines": [
          173,
          185
        ],
        "covered_lines": [
          5,
          23,
          24,
          31,
          32,
          45,
          46,
          59,
          60
        ],
        "label": "FromTagData::::setUsername(java.lang.String)"
      },
      {
        "test_lines": [
          193,
          205
        ],
        "covered_lines": [
          5,
          23,
          24,
          31,
          32,
          45,
          46,
          59,
          60,
          64
        ],
        "label": "FromTagData::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/Comments.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.entity.comments.CommentData;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "public class Comments {\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate List<CommentData> comments;\n",
      "\n",
      "\t@SerializedName(\"count\")\n",
      "\tprivate int count;\n",
      "\n",
      "\tpublic List<CommentData> getComments() {\n",
      "\t\treturn comments;\n",
      "\t}\n",
      "\n",
      "\tpublic void setComments(List<CommentData> comments) {\n",
      "\t\tthis.comments = comments;\n",
      "\t}\n",
      "\n",
      "\tpublic int getCount() {\n",
      "\t\treturn count;\n",
      "\t}\n",
      "\n",
      "\tpublic void setCount(int count) {\n",
      "\t\tthis.count = count;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"Comments [comments=%s, count=%s]\", comments, count);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import org.jinstagram.entity.comments.CommentData;\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>CommentsTest</code> contains tests for the class\n",
      " * <code>{@link Comments}</code>.\n",
      " *\n",
      " * \n",
      " * @author Sachin Handiekar\n",
      " */\n",
      "public class CommentsTest {\n",
      "\t/**\n",
      "\t * Run the List<CommentData> getComments() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetComments() throws Exception {\n",
      "\t\tComments caption = new Comments();\n",
      "\t\tcaption.setCount(1);\n",
      "\t\tcaption.setComments(new ArrayList<CommentData>());\n",
      "\n",
      "\t\tList<CommentData> result = caption.getComments();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the int getCount() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCount() throws Exception {\n",
      "\t\tComments caption = new Comments();\n",
      "\t\tcaption.setCount(1);\n",
      "\t\tcaption.setComments(new ArrayList<CommentData>());\n",
      "\n",
      "\t\tint result = caption.getCount();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setComments(List<CommentData>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetComments() throws Exception {\n",
      "\t\tComments caption = new Comments();\n",
      "\t\tcaption.setCount(1);\n",
      "\t\tcaption.setComments(new ArrayList<CommentData>());\n",
      "\t\tList<CommentData> comments = new ArrayList<CommentData>();\n",
      "\n",
      "\t\tcaption.setComments(comments);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCount(int) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCount() throws Exception {\n",
      "\t\tComments caption = new Comments();\n",
      "\t\tcaption.setCount(1);\n",
      "\t\tcaption.setComments(new ArrayList<CommentData>());\n",
      "\t\tint count = 1;\n",
      "\n",
      "\t\tcaption.setCount(count);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tComments caption = new Comments();\n",
      "\t\tcaption.setCount(1);\n",
      "\t\tcaption.setComments(new ArrayList<CommentData>());\n",
      "\n",
      "\t\tString result = caption.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"Comments [comments=[], count=1]\", result);\n",
      "\t}\n",
      "\n",
      " \n",
      "}"
    ],
    "method_lines_dic": {
      "Comments::::getComments()": [
        16,
        18
      ],
      "Comments::::setComments(java.util.List<org.jinstagram.entity.comments.CommentData>)": [
        20,
        22
      ],
      "Comments::::getCount()": [
        24,
        26
      ],
      "Comments::::setCount(int)": [
        28,
        30
      ],
      "Comments::::toString()": [
        32,
        35
      ]
    },
    "test_method_lines_dic": {
      "CommentsTest::::testGetComments()": [
        22,
        33
      ],
      "CommentsTest::::testGetCount()": [
        42,
        52
      ],
      "CommentsTest::::testSetComments()": [
        61,
        71
      ],
      "CommentsTest::::testSetCount()": [
        80,
        90
      ],
      "CommentsTest::::testToString()": [
        99,
        109
      ]
    },
    "reverse_method_lines_dic": {
      "16": "Comments::::getComments()",
      "17": "Comments::::getComments()",
      "18": "Comments::::getComments()",
      "20": "Comments::::setComments(java.util.List<org.jinstagram.entity.comments.CommentData>)",
      "21": "Comments::::setComments(java.util.List<org.jinstagram.entity.comments.CommentData>)",
      "22": "Comments::::setComments(java.util.List<org.jinstagram.entity.comments.CommentData>)",
      "24": "Comments::::getCount()",
      "25": "Comments::::getCount()",
      "26": "Comments::::getCount()",
      "28": "Comments::::setCount(int)",
      "29": "Comments::::setCount(int)",
      "30": "Comments::::setCount(int)",
      "32": "Comments::::toString()",
      "33": "Comments::::toString()",
      "34": "Comments::::toString()",
      "35": "Comments::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "22": "CommentsTest::::testGetComments()",
      "23": "CommentsTest::::testGetComments()",
      "24": "CommentsTest::::testGetComments()",
      "25": "CommentsTest::::testGetComments()",
      "26": "CommentsTest::::testGetComments()",
      "27": "CommentsTest::::testGetComments()",
      "28": "CommentsTest::::testGetComments()",
      "29": "CommentsTest::::testGetComments()",
      "30": "CommentsTest::::testGetComments()",
      "31": "CommentsTest::::testGetComments()",
      "32": "CommentsTest::::testGetComments()",
      "33": "CommentsTest::::testGetComments()",
      "42": "CommentsTest::::testGetCount()",
      "43": "CommentsTest::::testGetCount()",
      "44": "CommentsTest::::testGetCount()",
      "45": "CommentsTest::::testGetCount()",
      "46": "CommentsTest::::testGetCount()",
      "47": "CommentsTest::::testGetCount()",
      "48": "CommentsTest::::testGetCount()",
      "49": "CommentsTest::::testGetCount()",
      "50": "CommentsTest::::testGetCount()",
      "51": "CommentsTest::::testGetCount()",
      "52": "CommentsTest::::testGetCount()",
      "61": "CommentsTest::::testSetComments()",
      "62": "CommentsTest::::testSetComments()",
      "63": "CommentsTest::::testSetComments()",
      "64": "CommentsTest::::testSetComments()",
      "65": "CommentsTest::::testSetComments()",
      "66": "CommentsTest::::testSetComments()",
      "67": "CommentsTest::::testSetComments()",
      "68": "CommentsTest::::testSetComments()",
      "69": "CommentsTest::::testSetComments()",
      "70": "CommentsTest::::testSetComments()",
      "71": "CommentsTest::::testSetComments()",
      "80": "CommentsTest::::testSetCount()",
      "81": "CommentsTest::::testSetCount()",
      "82": "CommentsTest::::testSetCount()",
      "83": "CommentsTest::::testSetCount()",
      "84": "CommentsTest::::testSetCount()",
      "85": "CommentsTest::::testSetCount()",
      "86": "CommentsTest::::testSetCount()",
      "87": "CommentsTest::::testSetCount()",
      "88": "CommentsTest::::testSetCount()",
      "89": "CommentsTest::::testSetCount()",
      "90": "CommentsTest::::testSetCount()",
      "99": "CommentsTest::::testToString()",
      "100": "CommentsTest::::testToString()",
      "101": "CommentsTest::::testToString()",
      "102": "CommentsTest::::testToString()",
      "103": "CommentsTest::::testToString()",
      "104": "CommentsTest::::testToString()",
      "105": "CommentsTest::::testToString()",
      "106": "CommentsTest::::testToString()",
      "107": "CommentsTest::::testToString()",
      "108": "CommentsTest::::testToString()",
      "109": "CommentsTest::::testToString()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          33
        ],
        "covered_lines": [
          9,
          17,
          21,
          22,
          29,
          30
        ],
        "label": "Comments::::getComments()"
      },
      {
        "test_lines": [
          42,
          52
        ],
        "covered_lines": [
          9,
          21,
          22,
          25,
          29,
          30
        ],
        "label": "Comments::::getCount()"
      },
      {
        "test_lines": [
          61,
          71
        ],
        "covered_lines": [
          9,
          21,
          22,
          29,
          30
        ],
        "label": "Comments::::setComments(java.util.List<org.jinstagram.entity.comments.CommentData>)"
      },
      {
        "test_lines": [
          80,
          90
        ],
        "covered_lines": [
          9,
          21,
          22,
          29,
          30
        ],
        "label": "Comments::::setCount(int)"
      },
      {
        "test_lines": [
          99,
          109
        ],
        "covered_lines": [
          9,
          21,
          22,
          29,
          30,
          34
        ],
        "label": "Comments::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/Pagination.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "import org.apache.commons.lang3.StringUtils;\n",
      "\n",
      "public class Pagination {\n",
      "\t@SerializedName(\"deprecation_warning\")\n",
      "\tprivate String depreciationWarning;\n",
      "\n",
      "\t@SerializedName(\"min_tag_id\")\n",
      "\tprivate String minTagId;\n",
      "\n",
      "\t@SerializedName(\"next_max_id\")\n",
      "\tprivate String nextMaxId;\n",
      "\n",
      "\t@SerializedName(\"next_max_tag_id\")\n",
      "\tprivate String nextMaxTagId;\n",
      "\n",
      "\t@SerializedName(\"next_min_id\")\n",
      "\tprivate String nextMinId;\n",
      "\n",
      "\t@SerializedName(\"next_url\")\n",
      "\tprivate String nextUrl;\n",
      "\t\n",
      "\t@SerializedName(\"next_cursor\")\n",
      "\tprivate String nextCursor;\n",
      "\n",
      "\t/**\n",
      "\t * @return the nextUrl\n",
      "\t */\n",
      "\tpublic String getNextUrl() {\n",
      "\t\treturn nextUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param nextUrl the nextUrl to set\n",
      "\t */\n",
      "\tpublic void setNextUrl(String nextUrl) {\n",
      "\t\tthis.nextUrl = nextUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the nextMaxId\n",
      "\t */\n",
      "\tpublic String getNextMaxId() {\n",
      "\t\treturn nextMaxId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param nextMaxId the nextMaxId to set\n",
      "\t */\n",
      "\tpublic void setNextMaxId(String nextMaxId) {\n",
      "\t\tthis.nextMaxId = nextMaxId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the nextMinId\n",
      "\t */\n",
      "\tpublic String getNextMinId() {\n",
      "\t\treturn nextMinId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param nextMinId the nextMinId to set\n",
      "\t */\n",
      "\tpublic void setNextMinId(String nextMinId) {\n",
      "\t\tthis.nextMinId = nextMinId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the minTagId\n",
      "\t */\n",
      "\tpublic String getMinTagId() {\n",
      "\t\treturn minTagId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param minTagId the minTagId to set\n",
      "\t */\n",
      "\tpublic void setMinTagId(String minTagId) {\n",
      "\t\tthis.minTagId = minTagId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the nextMaxTagId\n",
      "\t */\n",
      "\tpublic String getNextMaxTagId() {\n",
      "\t\treturn nextMaxTagId;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param nextMaxTagId the nextMaxTagId to set\n",
      "\t */\n",
      "\tpublic void setNextMaxTagId(String nextMaxTagId) {\n",
      "\t\tthis.nextMaxTagId = nextMaxTagId;\n",
      "\t}\n",
      "    \n",
      "    /**\n",
      "     * @return the next cursor\n",
      "     */\n",
      "    public String getNextCursor() {\n",
      "        return nextCursor;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @param nextCursor The next cursor to set\n",
      "     */\n",
      "    public void setNextCursor(String nextCursor) {\n",
      "        this.nextCursor = nextCursor;\n",
      "    }\n",
      "\n",
      "\t/**\n",
      "\t * @return the depreciationWarning\n",
      "\t */\n",
      "\tpublic String getDepreciationWarning() {\n",
      "\t\treturn depreciationWarning;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param depreciationWarning the depreciationWarning to set\n",
      "\t */\n",
      "\tpublic void setDepreciationWarning(String depreciationWarning) {\n",
      "\t\tthis.depreciationWarning = depreciationWarning;\n",
      "\t}\n",
      "\n",
      "    public boolean hasNextPage() {\n",
      "        return !StringUtils.isBlank(nextUrl);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"Pagination [depreciationWarning=%s, minTagId=%s, nextMaxId=%s, nextMaxTagId=%s, nextMinId=%s, nextUrl=%s]\",\n",
      "                        depreciationWarning, minTagId, nextMaxId, nextMaxTagId, nextMinId, nextUrl);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>PaginationTest</code> contains tests for the class\n",
      " * <code>{@link Pagination}</code>.\n",
      " */\n",
      "public class PaginationTest {\n",
      "\t/**\n",
      "\t * Run the String getDepreciationWarning() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetDepreciationWarning_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\n",
      "\t\tString result = fixture.getDepreciationWarning();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getMinTagId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMinTagId_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\n",
      "\t\tString result = fixture.getMinTagId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getNextCursor() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetNextCursor_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\n",
      "\t\tString result = fixture.getNextCursor();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getNextMaxId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetNextMaxId_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\n",
      "\t\tString result = fixture.getNextMaxId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getNextMaxTagId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetNextMaxTagId_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\n",
      "\t\tString result = fixture.getNextMaxTagId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getNextMinId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetNextMinId_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\n",
      "\t\tString result = fixture.getNextMinId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getNextUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetNextUrl_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\n",
      "\t\tString result = fixture.getNextUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the boolean hasNextPage() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testHasNextPage_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\n",
      "\t\tboolean result = fixture.hasNextPage();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(false, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the boolean hasNextPage() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testHasNextPage_2() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\n",
      "\t\tboolean result = fixture.hasNextPage();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(false, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setDepreciationWarning(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetDepreciationWarning_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\t\tString depreciationWarning = \"\";\n",
      "\n",
      "\t\tfixture.setDepreciationWarning(depreciationWarning);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMinTagId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMinTagId_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\t\tString minTagId = \"\";\n",
      "\n",
      "\t\tfixture.setMinTagId(minTagId);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setNextCursor(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetNextCursor_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\t\tString nextCursor = \"\";\n",
      "\n",
      "\t\tfixture.setNextCursor(nextCursor);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setNextMaxId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetNextMaxId_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\t\tString nextMaxId = \"\";\n",
      "\n",
      "\t\tfixture.setNextMaxId(nextMaxId);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setNextMaxTagId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetNextMaxTagId_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\t\tString nextMaxTagId = \"\";\n",
      "\n",
      "\t\tfixture.setNextMaxTagId(nextMaxTagId);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setNextMinId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetNextMinId_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\t\tString nextMinId = \"\";\n",
      "\n",
      "\t\tfixture.setNextMinId(nextMinId);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setNextUrl(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetNextUrl_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\t\tString nextUrl = \"\";\n",
      "\n",
      "\t\tfixture.setNextUrl(nextUrl);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tPagination fixture = new Pagination();\n",
      "\t\tfixture.setNextMaxId(\"\");\n",
      "\t\tfixture.setNextMaxTagId(\"\");\n",
      "\t\tfixture.setNextMinId(\"\");\n",
      "\t\tfixture.setNextUrl(\"\");\n",
      "\t\tfixture.setMinTagId(\"\");\n",
      "\t\tfixture.setDepreciationWarning(\"\");\n",
      "\t\tfixture.setNextCursor(\"\");\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"Pagination [depreciationWarning=, minTagId=, nextMaxId=, nextMaxTagId=, nextMinId=, nextUrl=]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "Pagination::::getNextUrl()": [
        31,
        33
      ],
      "Pagination::::setNextUrl(java.lang.String)": [
        38,
        40
      ],
      "Pagination::::getNextMaxId()": [
        45,
        47
      ],
      "Pagination::::setNextMaxId(java.lang.String)": [
        52,
        54
      ],
      "Pagination::::getNextMinId()": [
        59,
        61
      ],
      "Pagination::::setNextMinId(java.lang.String)": [
        66,
        68
      ],
      "Pagination::::getMinTagId()": [
        73,
        75
      ],
      "Pagination::::setMinTagId(java.lang.String)": [
        80,
        82
      ],
      "Pagination::::getNextMaxTagId()": [
        87,
        89
      ],
      "Pagination::::setNextMaxTagId(java.lang.String)": [
        94,
        96
      ],
      "Pagination::::getNextCursor()": [
        101,
        103
      ],
      "Pagination::::setNextCursor(java.lang.String)": [
        108,
        110
      ],
      "Pagination::::getDepreciationWarning()": [
        115,
        117
      ],
      "Pagination::::setDepreciationWarning(java.lang.String)": [
        122,
        124
      ],
      "Pagination::::hasNextPage()": [
        126,
        128
      ],
      "Pagination::::toString()": [
        130,
        134
      ]
    },
    "test_method_lines_dic": {
      "PaginationTest::::testGetDepreciationWarning_1()": [
        19,
        34
      ],
      "PaginationTest::::testGetMinTagId_1()": [
        43,
        58
      ],
      "PaginationTest::::testGetNextCursor_1()": [
        67,
        82
      ],
      "PaginationTest::::testGetNextMaxId_1()": [
        91,
        106
      ],
      "PaginationTest::::testGetNextMaxTagId_1()": [
        115,
        130
      ],
      "PaginationTest::::testGetNextMinId_1()": [
        139,
        154
      ],
      "PaginationTest::::testGetNextUrl_1()": [
        163,
        178
      ],
      "PaginationTest::::testHasNextPage_1()": [
        187,
        202
      ],
      "PaginationTest::::testHasNextPage_2()": [
        211,
        226
      ],
      "PaginationTest::::testSetDepreciationWarning_1()": [
        235,
        250
      ],
      "PaginationTest::::testSetMinTagId_1()": [
        259,
        274
      ],
      "PaginationTest::::testSetNextCursor_1()": [
        283,
        298
      ],
      "PaginationTest::::testSetNextMaxId_1()": [
        307,
        322
      ],
      "PaginationTest::::testSetNextMaxTagId_1()": [
        331,
        346
      ],
      "PaginationTest::::testSetNextMinId_1()": [
        355,
        370
      ],
      "PaginationTest::::testSetNextUrl_1()": [
        379,
        394
      ],
      "PaginationTest::::testToString_1()": [
        403,
        419
      ]
    },
    "reverse_method_lines_dic": {
      "31": "Pagination::::getNextUrl()",
      "32": "Pagination::::getNextUrl()",
      "33": "Pagination::::getNextUrl()",
      "38": "Pagination::::setNextUrl(java.lang.String)",
      "39": "Pagination::::setNextUrl(java.lang.String)",
      "40": "Pagination::::setNextUrl(java.lang.String)",
      "45": "Pagination::::getNextMaxId()",
      "46": "Pagination::::getNextMaxId()",
      "47": "Pagination::::getNextMaxId()",
      "52": "Pagination::::setNextMaxId(java.lang.String)",
      "53": "Pagination::::setNextMaxId(java.lang.String)",
      "54": "Pagination::::setNextMaxId(java.lang.String)",
      "59": "Pagination::::getNextMinId()",
      "60": "Pagination::::getNextMinId()",
      "61": "Pagination::::getNextMinId()",
      "66": "Pagination::::setNextMinId(java.lang.String)",
      "67": "Pagination::::setNextMinId(java.lang.String)",
      "68": "Pagination::::setNextMinId(java.lang.String)",
      "73": "Pagination::::getMinTagId()",
      "74": "Pagination::::getMinTagId()",
      "75": "Pagination::::getMinTagId()",
      "80": "Pagination::::setMinTagId(java.lang.String)",
      "81": "Pagination::::setMinTagId(java.lang.String)",
      "82": "Pagination::::setMinTagId(java.lang.String)",
      "87": "Pagination::::getNextMaxTagId()",
      "88": "Pagination::::getNextMaxTagId()",
      "89": "Pagination::::getNextMaxTagId()",
      "94": "Pagination::::setNextMaxTagId(java.lang.String)",
      "95": "Pagination::::setNextMaxTagId(java.lang.String)",
      "96": "Pagination::::setNextMaxTagId(java.lang.String)",
      "101": "Pagination::::getNextCursor()",
      "102": "Pagination::::getNextCursor()",
      "103": "Pagination::::getNextCursor()",
      "108": "Pagination::::setNextCursor(java.lang.String)",
      "109": "Pagination::::setNextCursor(java.lang.String)",
      "110": "Pagination::::setNextCursor(java.lang.String)",
      "115": "Pagination::::getDepreciationWarning()",
      "116": "Pagination::::getDepreciationWarning()",
      "117": "Pagination::::getDepreciationWarning()",
      "122": "Pagination::::setDepreciationWarning(java.lang.String)",
      "123": "Pagination::::setDepreciationWarning(java.lang.String)",
      "124": "Pagination::::setDepreciationWarning(java.lang.String)",
      "126": "Pagination::::hasNextPage()",
      "127": "Pagination::::hasNextPage()",
      "128": "Pagination::::hasNextPage()",
      "130": "Pagination::::toString()",
      "131": "Pagination::::toString()",
      "132": "Pagination::::toString()",
      "133": "Pagination::::toString()",
      "134": "Pagination::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "19": "PaginationTest::::testGetDepreciationWarning_1()",
      "20": "PaginationTest::::testGetDepreciationWarning_1()",
      "21": "PaginationTest::::testGetDepreciationWarning_1()",
      "22": "PaginationTest::::testGetDepreciationWarning_1()",
      "23": "PaginationTest::::testGetDepreciationWarning_1()",
      "24": "PaginationTest::::testGetDepreciationWarning_1()",
      "25": "PaginationTest::::testGetDepreciationWarning_1()",
      "26": "PaginationTest::::testGetDepreciationWarning_1()",
      "27": "PaginationTest::::testGetDepreciationWarning_1()",
      "28": "PaginationTest::::testGetDepreciationWarning_1()",
      "29": "PaginationTest::::testGetDepreciationWarning_1()",
      "30": "PaginationTest::::testGetDepreciationWarning_1()",
      "31": "PaginationTest::::testGetDepreciationWarning_1()",
      "32": "PaginationTest::::testGetDepreciationWarning_1()",
      "33": "PaginationTest::::testGetDepreciationWarning_1()",
      "34": "PaginationTest::::testGetDepreciationWarning_1()",
      "43": "PaginationTest::::testGetMinTagId_1()",
      "44": "PaginationTest::::testGetMinTagId_1()",
      "45": "PaginationTest::::testGetMinTagId_1()",
      "46": "PaginationTest::::testGetMinTagId_1()",
      "47": "PaginationTest::::testGetMinTagId_1()",
      "48": "PaginationTest::::testGetMinTagId_1()",
      "49": "PaginationTest::::testGetMinTagId_1()",
      "50": "PaginationTest::::testGetMinTagId_1()",
      "51": "PaginationTest::::testGetMinTagId_1()",
      "52": "PaginationTest::::testGetMinTagId_1()",
      "53": "PaginationTest::::testGetMinTagId_1()",
      "54": "PaginationTest::::testGetMinTagId_1()",
      "55": "PaginationTest::::testGetMinTagId_1()",
      "56": "PaginationTest::::testGetMinTagId_1()",
      "57": "PaginationTest::::testGetMinTagId_1()",
      "58": "PaginationTest::::testGetMinTagId_1()",
      "67": "PaginationTest::::testGetNextCursor_1()",
      "68": "PaginationTest::::testGetNextCursor_1()",
      "69": "PaginationTest::::testGetNextCursor_1()",
      "70": "PaginationTest::::testGetNextCursor_1()",
      "71": "PaginationTest::::testGetNextCursor_1()",
      "72": "PaginationTest::::testGetNextCursor_1()",
      "73": "PaginationTest::::testGetNextCursor_1()",
      "74": "PaginationTest::::testGetNextCursor_1()",
      "75": "PaginationTest::::testGetNextCursor_1()",
      "76": "PaginationTest::::testGetNextCursor_1()",
      "77": "PaginationTest::::testGetNextCursor_1()",
      "78": "PaginationTest::::testGetNextCursor_1()",
      "79": "PaginationTest::::testGetNextCursor_1()",
      "80": "PaginationTest::::testGetNextCursor_1()",
      "81": "PaginationTest::::testGetNextCursor_1()",
      "82": "PaginationTest::::testGetNextCursor_1()",
      "91": "PaginationTest::::testGetNextMaxId_1()",
      "92": "PaginationTest::::testGetNextMaxId_1()",
      "93": "PaginationTest::::testGetNextMaxId_1()",
      "94": "PaginationTest::::testGetNextMaxId_1()",
      "95": "PaginationTest::::testGetNextMaxId_1()",
      "96": "PaginationTest::::testGetNextMaxId_1()",
      "97": "PaginationTest::::testGetNextMaxId_1()",
      "98": "PaginationTest::::testGetNextMaxId_1()",
      "99": "PaginationTest::::testGetNextMaxId_1()",
      "100": "PaginationTest::::testGetNextMaxId_1()",
      "101": "PaginationTest::::testGetNextMaxId_1()",
      "102": "PaginationTest::::testGetNextMaxId_1()",
      "103": "PaginationTest::::testGetNextMaxId_1()",
      "104": "PaginationTest::::testGetNextMaxId_1()",
      "105": "PaginationTest::::testGetNextMaxId_1()",
      "106": "PaginationTest::::testGetNextMaxId_1()",
      "115": "PaginationTest::::testGetNextMaxTagId_1()",
      "116": "PaginationTest::::testGetNextMaxTagId_1()",
      "117": "PaginationTest::::testGetNextMaxTagId_1()",
      "118": "PaginationTest::::testGetNextMaxTagId_1()",
      "119": "PaginationTest::::testGetNextMaxTagId_1()",
      "120": "PaginationTest::::testGetNextMaxTagId_1()",
      "121": "PaginationTest::::testGetNextMaxTagId_1()",
      "122": "PaginationTest::::testGetNextMaxTagId_1()",
      "123": "PaginationTest::::testGetNextMaxTagId_1()",
      "124": "PaginationTest::::testGetNextMaxTagId_1()",
      "125": "PaginationTest::::testGetNextMaxTagId_1()",
      "126": "PaginationTest::::testGetNextMaxTagId_1()",
      "127": "PaginationTest::::testGetNextMaxTagId_1()",
      "128": "PaginationTest::::testGetNextMaxTagId_1()",
      "129": "PaginationTest::::testGetNextMaxTagId_1()",
      "130": "PaginationTest::::testGetNextMaxTagId_1()",
      "139": "PaginationTest::::testGetNextMinId_1()",
      "140": "PaginationTest::::testGetNextMinId_1()",
      "141": "PaginationTest::::testGetNextMinId_1()",
      "142": "PaginationTest::::testGetNextMinId_1()",
      "143": "PaginationTest::::testGetNextMinId_1()",
      "144": "PaginationTest::::testGetNextMinId_1()",
      "145": "PaginationTest::::testGetNextMinId_1()",
      "146": "PaginationTest::::testGetNextMinId_1()",
      "147": "PaginationTest::::testGetNextMinId_1()",
      "148": "PaginationTest::::testGetNextMinId_1()",
      "149": "PaginationTest::::testGetNextMinId_1()",
      "150": "PaginationTest::::testGetNextMinId_1()",
      "151": "PaginationTest::::testGetNextMinId_1()",
      "152": "PaginationTest::::testGetNextMinId_1()",
      "153": "PaginationTest::::testGetNextMinId_1()",
      "154": "PaginationTest::::testGetNextMinId_1()",
      "163": "PaginationTest::::testGetNextUrl_1()",
      "164": "PaginationTest::::testGetNextUrl_1()",
      "165": "PaginationTest::::testGetNextUrl_1()",
      "166": "PaginationTest::::testGetNextUrl_1()",
      "167": "PaginationTest::::testGetNextUrl_1()",
      "168": "PaginationTest::::testGetNextUrl_1()",
      "169": "PaginationTest::::testGetNextUrl_1()",
      "170": "PaginationTest::::testGetNextUrl_1()",
      "171": "PaginationTest::::testGetNextUrl_1()",
      "172": "PaginationTest::::testGetNextUrl_1()",
      "173": "PaginationTest::::testGetNextUrl_1()",
      "174": "PaginationTest::::testGetNextUrl_1()",
      "175": "PaginationTest::::testGetNextUrl_1()",
      "176": "PaginationTest::::testGetNextUrl_1()",
      "177": "PaginationTest::::testGetNextUrl_1()",
      "178": "PaginationTest::::testGetNextUrl_1()",
      "187": "PaginationTest::::testHasNextPage_1()",
      "188": "PaginationTest::::testHasNextPage_1()",
      "189": "PaginationTest::::testHasNextPage_1()",
      "190": "PaginationTest::::testHasNextPage_1()",
      "191": "PaginationTest::::testHasNextPage_1()",
      "192": "PaginationTest::::testHasNextPage_1()",
      "193": "PaginationTest::::testHasNextPage_1()",
      "194": "PaginationTest::::testHasNextPage_1()",
      "195": "PaginationTest::::testHasNextPage_1()",
      "196": "PaginationTest::::testHasNextPage_1()",
      "197": "PaginationTest::::testHasNextPage_1()",
      "198": "PaginationTest::::testHasNextPage_1()",
      "199": "PaginationTest::::testHasNextPage_1()",
      "200": "PaginationTest::::testHasNextPage_1()",
      "201": "PaginationTest::::testHasNextPage_1()",
      "202": "PaginationTest::::testHasNextPage_1()",
      "211": "PaginationTest::::testHasNextPage_2()",
      "212": "PaginationTest::::testHasNextPage_2()",
      "213": "PaginationTest::::testHasNextPage_2()",
      "214": "PaginationTest::::testHasNextPage_2()",
      "215": "PaginationTest::::testHasNextPage_2()",
      "216": "PaginationTest::::testHasNextPage_2()",
      "217": "PaginationTest::::testHasNextPage_2()",
      "218": "PaginationTest::::testHasNextPage_2()",
      "219": "PaginationTest::::testHasNextPage_2()",
      "220": "PaginationTest::::testHasNextPage_2()",
      "221": "PaginationTest::::testHasNextPage_2()",
      "222": "PaginationTest::::testHasNextPage_2()",
      "223": "PaginationTest::::testHasNextPage_2()",
      "224": "PaginationTest::::testHasNextPage_2()",
      "225": "PaginationTest::::testHasNextPage_2()",
      "226": "PaginationTest::::testHasNextPage_2()",
      "235": "PaginationTest::::testSetDepreciationWarning_1()",
      "236": "PaginationTest::::testSetDepreciationWarning_1()",
      "237": "PaginationTest::::testSetDepreciationWarning_1()",
      "238": "PaginationTest::::testSetDepreciationWarning_1()",
      "239": "PaginationTest::::testSetDepreciationWarning_1()",
      "240": "PaginationTest::::testSetDepreciationWarning_1()",
      "241": "PaginationTest::::testSetDepreciationWarning_1()",
      "242": "PaginationTest::::testSetDepreciationWarning_1()",
      "243": "PaginationTest::::testSetDepreciationWarning_1()",
      "244": "PaginationTest::::testSetDepreciationWarning_1()",
      "245": "PaginationTest::::testSetDepreciationWarning_1()",
      "246": "PaginationTest::::testSetDepreciationWarning_1()",
      "247": "PaginationTest::::testSetDepreciationWarning_1()",
      "248": "PaginationTest::::testSetDepreciationWarning_1()",
      "249": "PaginationTest::::testSetDepreciationWarning_1()",
      "250": "PaginationTest::::testSetDepreciationWarning_1()",
      "259": "PaginationTest::::testSetMinTagId_1()",
      "260": "PaginationTest::::testSetMinTagId_1()",
      "261": "PaginationTest::::testSetMinTagId_1()",
      "262": "PaginationTest::::testSetMinTagId_1()",
      "263": "PaginationTest::::testSetMinTagId_1()",
      "264": "PaginationTest::::testSetMinTagId_1()",
      "265": "PaginationTest::::testSetMinTagId_1()",
      "266": "PaginationTest::::testSetMinTagId_1()",
      "267": "PaginationTest::::testSetMinTagId_1()",
      "268": "PaginationTest::::testSetMinTagId_1()",
      "269": "PaginationTest::::testSetMinTagId_1()",
      "270": "PaginationTest::::testSetMinTagId_1()",
      "271": "PaginationTest::::testSetMinTagId_1()",
      "272": "PaginationTest::::testSetMinTagId_1()",
      "273": "PaginationTest::::testSetMinTagId_1()",
      "274": "PaginationTest::::testSetMinTagId_1()",
      "283": "PaginationTest::::testSetNextCursor_1()",
      "284": "PaginationTest::::testSetNextCursor_1()",
      "285": "PaginationTest::::testSetNextCursor_1()",
      "286": "PaginationTest::::testSetNextCursor_1()",
      "287": "PaginationTest::::testSetNextCursor_1()",
      "288": "PaginationTest::::testSetNextCursor_1()",
      "289": "PaginationTest::::testSetNextCursor_1()",
      "290": "PaginationTest::::testSetNextCursor_1()",
      "291": "PaginationTest::::testSetNextCursor_1()",
      "292": "PaginationTest::::testSetNextCursor_1()",
      "293": "PaginationTest::::testSetNextCursor_1()",
      "294": "PaginationTest::::testSetNextCursor_1()",
      "295": "PaginationTest::::testSetNextCursor_1()",
      "296": "PaginationTest::::testSetNextCursor_1()",
      "297": "PaginationTest::::testSetNextCursor_1()",
      "298": "PaginationTest::::testSetNextCursor_1()",
      "307": "PaginationTest::::testSetNextMaxId_1()",
      "308": "PaginationTest::::testSetNextMaxId_1()",
      "309": "PaginationTest::::testSetNextMaxId_1()",
      "310": "PaginationTest::::testSetNextMaxId_1()",
      "311": "PaginationTest::::testSetNextMaxId_1()",
      "312": "PaginationTest::::testSetNextMaxId_1()",
      "313": "PaginationTest::::testSetNextMaxId_1()",
      "314": "PaginationTest::::testSetNextMaxId_1()",
      "315": "PaginationTest::::testSetNextMaxId_1()",
      "316": "PaginationTest::::testSetNextMaxId_1()",
      "317": "PaginationTest::::testSetNextMaxId_1()",
      "318": "PaginationTest::::testSetNextMaxId_1()",
      "319": "PaginationTest::::testSetNextMaxId_1()",
      "320": "PaginationTest::::testSetNextMaxId_1()",
      "321": "PaginationTest::::testSetNextMaxId_1()",
      "322": "PaginationTest::::testSetNextMaxId_1()",
      "331": "PaginationTest::::testSetNextMaxTagId_1()",
      "332": "PaginationTest::::testSetNextMaxTagId_1()",
      "333": "PaginationTest::::testSetNextMaxTagId_1()",
      "334": "PaginationTest::::testSetNextMaxTagId_1()",
      "335": "PaginationTest::::testSetNextMaxTagId_1()",
      "336": "PaginationTest::::testSetNextMaxTagId_1()",
      "337": "PaginationTest::::testSetNextMaxTagId_1()",
      "338": "PaginationTest::::testSetNextMaxTagId_1()",
      "339": "PaginationTest::::testSetNextMaxTagId_1()",
      "340": "PaginationTest::::testSetNextMaxTagId_1()",
      "341": "PaginationTest::::testSetNextMaxTagId_1()",
      "342": "PaginationTest::::testSetNextMaxTagId_1()",
      "343": "PaginationTest::::testSetNextMaxTagId_1()",
      "344": "PaginationTest::::testSetNextMaxTagId_1()",
      "345": "PaginationTest::::testSetNextMaxTagId_1()",
      "346": "PaginationTest::::testSetNextMaxTagId_1()",
      "355": "PaginationTest::::testSetNextMinId_1()",
      "356": "PaginationTest::::testSetNextMinId_1()",
      "357": "PaginationTest::::testSetNextMinId_1()",
      "358": "PaginationTest::::testSetNextMinId_1()",
      "359": "PaginationTest::::testSetNextMinId_1()",
      "360": "PaginationTest::::testSetNextMinId_1()",
      "361": "PaginationTest::::testSetNextMinId_1()",
      "362": "PaginationTest::::testSetNextMinId_1()",
      "363": "PaginationTest::::testSetNextMinId_1()",
      "364": "PaginationTest::::testSetNextMinId_1()",
      "365": "PaginationTest::::testSetNextMinId_1()",
      "366": "PaginationTest::::testSetNextMinId_1()",
      "367": "PaginationTest::::testSetNextMinId_1()",
      "368": "PaginationTest::::testSetNextMinId_1()",
      "369": "PaginationTest::::testSetNextMinId_1()",
      "370": "PaginationTest::::testSetNextMinId_1()",
      "379": "PaginationTest::::testSetNextUrl_1()",
      "380": "PaginationTest::::testSetNextUrl_1()",
      "381": "PaginationTest::::testSetNextUrl_1()",
      "382": "PaginationTest::::testSetNextUrl_1()",
      "383": "PaginationTest::::testSetNextUrl_1()",
      "384": "PaginationTest::::testSetNextUrl_1()",
      "385": "PaginationTest::::testSetNextUrl_1()",
      "386": "PaginationTest::::testSetNextUrl_1()",
      "387": "PaginationTest::::testSetNextUrl_1()",
      "388": "PaginationTest::::testSetNextUrl_1()",
      "389": "PaginationTest::::testSetNextUrl_1()",
      "390": "PaginationTest::::testSetNextUrl_1()",
      "391": "PaginationTest::::testSetNextUrl_1()",
      "392": "PaginationTest::::testSetNextUrl_1()",
      "393": "PaginationTest::::testSetNextUrl_1()",
      "394": "PaginationTest::::testSetNextUrl_1()",
      "403": "PaginationTest::::testToString_1()",
      "404": "PaginationTest::::testToString_1()",
      "405": "PaginationTest::::testToString_1()",
      "406": "PaginationTest::::testToString_1()",
      "407": "PaginationTest::::testToString_1()",
      "408": "PaginationTest::::testToString_1()",
      "409": "PaginationTest::::testToString_1()",
      "410": "PaginationTest::::testToString_1()",
      "411": "PaginationTest::::testToString_1()",
      "412": "PaginationTest::::testToString_1()",
      "413": "PaginationTest::::testToString_1()",
      "414": "PaginationTest::::testToString_1()",
      "415": "PaginationTest::::testToString_1()",
      "416": "PaginationTest::::testToString_1()",
      "417": "PaginationTest::::testToString_1()",
      "418": "PaginationTest::::testToString_1()",
      "419": "PaginationTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          19,
          34
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          116,
          123,
          124
        ],
        "label": "Pagination::::getDepreciationWarning()"
      },
      {
        "test_lines": [
          43,
          58
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          74,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::getMinTagId()"
      },
      {
        "test_lines": [
          67,
          82
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          102,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::getNextCursor()"
      },
      {
        "test_lines": [
          91,
          106
        ],
        "covered_lines": [
          6,
          39,
          40,
          46,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::getNextMaxId()"
      },
      {
        "test_lines": [
          115,
          130
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          88,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::getNextMaxTagId()"
      },
      {
        "test_lines": [
          139,
          154
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          60,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::getNextMinId()"
      },
      {
        "test_lines": [
          163,
          178
        ],
        "covered_lines": [
          6,
          32,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::getNextUrl()"
      },
      {
        "test_lines": [
          187,
          202
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124,
          127
        ],
        "label": "Pagination::::hasNextPage()"
      },
      {
        "test_lines": [
          211,
          226
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124,
          127
        ],
        "label": "Pagination::::hasNextPage()"
      },
      {
        "test_lines": [
          235,
          250
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::setDepreciationWarning(java.lang.String)"
      },
      {
        "test_lines": [
          259,
          274
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::setMinTagId(java.lang.String)"
      },
      {
        "test_lines": [
          283,
          298
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::setNextCursor(java.lang.String)"
      },
      {
        "test_lines": [
          307,
          322
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::setNextMaxId(java.lang.String)"
      },
      {
        "test_lines": [
          331,
          346
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::setNextMaxTagId(java.lang.String)"
      },
      {
        "test_lines": [
          355,
          370
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::setNextMinId(java.lang.String)"
      },
      {
        "test_lines": [
          379,
          394
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124
        ],
        "label": "Pagination::::setNextUrl(java.lang.String)"
      },
      {
        "test_lines": [
          403,
          419
        ],
        "covered_lines": [
          6,
          39,
          40,
          53,
          54,
          67,
          68,
          81,
          82,
          95,
          96,
          109,
          110,
          123,
          124,
          132
        ],
        "label": "Pagination::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/Caption.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class Caption {\n",
      "\t@SerializedName(\"created_time\")\n",
      "\tprivate String createdTime;\n",
      "\n",
      "\t@SerializedName(\"from\")\n",
      "\tprivate FromTagData from;\n",
      "\n",
      "\t@SerializedName(\"id\")\n",
      "\tprivate String id;\n",
      "\n",
      "\t@SerializedName(\"text\")\n",
      "\tprivate String text;\n",
      "\n",
      "\t/**\n",
      "\t * @return the createdTime\n",
      "\t */\n",
      "\tpublic String getCreatedTime() {\n",
      "\t\treturn createdTime;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param createdTime the createdTime to set\n",
      "\t */\n",
      "\tpublic void setCreatedTime(String createdTime) {\n",
      "\t\tthis.createdTime = createdTime;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the text\n",
      "\t */\n",
      "\tpublic String getText() {\n",
      "\t\treturn text;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param text the text to set\n",
      "\t */\n",
      "\tpublic void setText(String text) {\n",
      "\t\tthis.text = text;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the from\n",
      "\t */\n",
      "\tpublic FromTagData getFrom() {\n",
      "\t\treturn from;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param from the from to set\n",
      "\t */\n",
      "\tpublic void setFrom(FromTagData from) {\n",
      "\t\tthis.from = from;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the id\n",
      "\t */\n",
      "\tpublic String getId() {\n",
      "\t\treturn id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param id the id to set\n",
      "\t */\n",
      "\tpublic void setId(String id) {\n",
      "\t\tthis.id = id;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"Caption [createdTime=%s, from=%s, id=%s, text=%s]\", createdTime, from, id, text);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>CaptionTest</code> contains tests for the class\n",
      " * <code>{@link Caption}</code>.\n",
      " *\n",
      " * @author Sachin Handiekar\n",
      " */\n",
      "public class CaptionTest {\n",
      "\t/**\n",
      "\t * Run the String getCreatedTime() method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCreatedTime() throws Exception {\n",
      "\t\tCaption caption = new Caption();\n",
      "\t\tcaption.setCreatedTime(\"\");\n",
      "\t\tcaption.setFrom(new FromTagData());\n",
      "\t\tcaption.setText(\"\");\n",
      "\t\tcaption.setId(\"\");\n",
      "\n",
      "\t\tString result = caption.getCreatedTime();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the FromTagData getFrom() method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetFrom() throws Exception {\n",
      "\t\tCaption caption = new Caption();\n",
      "\t\tcaption.setCreatedTime(\"\");\n",
      "\t\tcaption.setFrom(new FromTagData());\n",
      "\t\tcaption.setText(\"\");\n",
      "\t\tcaption.setId(\"\");\n",
      "\n",
      "\t\tFromTagData result = caption.getFrom();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"FromTagData [fullName=null, id=null, profilePicture=null, username=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t\tassertEquals(null, result.getFullName());\n",
      "\t\tassertEquals(null, result.getProfilePicture());\n",
      "\t\tassertEquals(null, result.getUsername());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getId() method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetId() throws Exception {\n",
      "\t\tCaption caption = new Caption();\n",
      "\t\tcaption.setCreatedTime(\"\");\n",
      "\t\tcaption.setFrom(new FromTagData());\n",
      "\t\tcaption.setText(\"\");\n",
      "\t\tcaption.setId(\"\");\n",
      "\n",
      "\t\tString result = caption.getId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getText() method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetText() throws Exception {\n",
      "\t\tCaption caption = new Caption();\n",
      "\t\tcaption.setCreatedTime(\"\");\n",
      "\t\tcaption.setFrom(new FromTagData());\n",
      "\t\tcaption.setText(\"\");\n",
      "\t\tcaption.setId(\"\");\n",
      "\n",
      "\t\tString result = caption.getText();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCreatedTime(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCreatedTime() throws Exception {\n",
      "\t\tCaption caption = new Caption();\n",
      "\t\tcaption.setCreatedTime(\"\");\n",
      "\t\tcaption.setFrom(new FromTagData());\n",
      "\t\tcaption.setText(\"\");\n",
      "\t\tcaption.setId(\"\");\n",
      "\t\tString createdTime = \"\";\n",
      "\n",
      "\t\tcaption.setCreatedTime(createdTime);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setFrom(FromTagData) method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetFrom() throws Exception {\n",
      "\t\tCaption caption = new Caption();\n",
      "\t\tcaption.setCreatedTime(\"\");\n",
      "\t\tcaption.setFrom(new FromTagData());\n",
      "\t\tcaption.setText(\"\");\n",
      "\t\tcaption.setId(\"\");\n",
      "\t\tFromTagData from = new FromTagData();\n",
      "\n",
      "\t\tcaption.setFrom(from);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetId() throws Exception {\n",
      "\t\tCaption caption = new Caption();\n",
      "\t\tcaption.setCreatedTime(\"\");\n",
      "\t\tcaption.setFrom(new FromTagData());\n",
      "\t\tcaption.setText(\"\");\n",
      "\t\tcaption.setId(\"\");\n",
      "\t\tString id = \"\";\n",
      "\n",
      "\t\tcaption.setId(id);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setText(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetText() throws Exception {\n",
      "\t\tCaption caption = new Caption();\n",
      "\t\tcaption.setCreatedTime(\"\");\n",
      "\t\tcaption.setFrom(new FromTagData());\n",
      "\t\tcaption.setText(\"\");\n",
      "\t\tcaption.setId(\"\");\n",
      "\t\tString text = \"\";\n",
      "\n",
      "\t\tcaption.setText(text);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tCaption caption = new Caption();\n",
      "\t\tcaption.setCreatedTime(\"\");\n",
      "\t\tcaption.setFrom(new FromTagData());\n",
      "\t\tcaption.setText(\"\");\n",
      "\t\tcaption.setId(\"\");\n",
      "\n",
      "\t\tString result = caption.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"Caption [createdTime=, from=FromTagData [fullName=null, id=null, profilePicture=null, username=null], id=, text=]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "Caption::::getCreatedTime()": [
        21,
        23
      ],
      "Caption::::setCreatedTime(java.lang.String)": [
        28,
        30
      ],
      "Caption::::getText()": [
        35,
        37
      ],
      "Caption::::setText(java.lang.String)": [
        42,
        44
      ],
      "Caption::::getFrom()": [
        49,
        51
      ],
      "Caption::::setFrom(org.jinstagram.entity.common.FromTagData)": [
        56,
        58
      ],
      "Caption::::getId()": [
        63,
        65
      ],
      "Caption::::setId(java.lang.String)": [
        70,
        72
      ],
      "Caption::::toString()": [
        74,
        77
      ]
    },
    "test_method_lines_dic": {
      "CaptionTest::::testGetCreatedTime()": [
        20,
        32
      ],
      "CaptionTest::::testGetFrom()": [
        39,
        56
      ],
      "CaptionTest::::testGetId()": [
        65,
        77
      ],
      "CaptionTest::::testGetText()": [
        86,
        98
      ],
      "CaptionTest::::testSetCreatedTime()": [
        107,
        119
      ],
      "CaptionTest::::testSetFrom()": [
        128,
        140
      ],
      "CaptionTest::::testSetId()": [
        149,
        161
      ],
      "CaptionTest::::testSetText()": [
        170,
        182
      ],
      "CaptionTest::::testToString()": [
        191,
        205
      ]
    },
    "reverse_method_lines_dic": {
      "21": "Caption::::getCreatedTime()",
      "22": "Caption::::getCreatedTime()",
      "23": "Caption::::getCreatedTime()",
      "28": "Caption::::setCreatedTime(java.lang.String)",
      "29": "Caption::::setCreatedTime(java.lang.String)",
      "30": "Caption::::setCreatedTime(java.lang.String)",
      "35": "Caption::::getText()",
      "36": "Caption::::getText()",
      "37": "Caption::::getText()",
      "42": "Caption::::setText(java.lang.String)",
      "43": "Caption::::setText(java.lang.String)",
      "44": "Caption::::setText(java.lang.String)",
      "49": "Caption::::getFrom()",
      "50": "Caption::::getFrom()",
      "51": "Caption::::getFrom()",
      "56": "Caption::::setFrom(org.jinstagram.entity.common.FromTagData)",
      "57": "Caption::::setFrom(org.jinstagram.entity.common.FromTagData)",
      "58": "Caption::::setFrom(org.jinstagram.entity.common.FromTagData)",
      "63": "Caption::::getId()",
      "64": "Caption::::getId()",
      "65": "Caption::::getId()",
      "70": "Caption::::setId(java.lang.String)",
      "71": "Caption::::setId(java.lang.String)",
      "72": "Caption::::setId(java.lang.String)",
      "74": "Caption::::toString()",
      "75": "Caption::::toString()",
      "76": "Caption::::toString()",
      "77": "Caption::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "20": "CaptionTest::::testGetCreatedTime()",
      "21": "CaptionTest::::testGetCreatedTime()",
      "22": "CaptionTest::::testGetCreatedTime()",
      "23": "CaptionTest::::testGetCreatedTime()",
      "24": "CaptionTest::::testGetCreatedTime()",
      "25": "CaptionTest::::testGetCreatedTime()",
      "26": "CaptionTest::::testGetCreatedTime()",
      "27": "CaptionTest::::testGetCreatedTime()",
      "28": "CaptionTest::::testGetCreatedTime()",
      "29": "CaptionTest::::testGetCreatedTime()",
      "30": "CaptionTest::::testGetCreatedTime()",
      "31": "CaptionTest::::testGetCreatedTime()",
      "32": "CaptionTest::::testGetCreatedTime()",
      "39": "CaptionTest::::testGetFrom()",
      "40": "CaptionTest::::testGetFrom()",
      "41": "CaptionTest::::testGetFrom()",
      "42": "CaptionTest::::testGetFrom()",
      "43": "CaptionTest::::testGetFrom()",
      "44": "CaptionTest::::testGetFrom()",
      "45": "CaptionTest::::testGetFrom()",
      "46": "CaptionTest::::testGetFrom()",
      "47": "CaptionTest::::testGetFrom()",
      "48": "CaptionTest::::testGetFrom()",
      "49": "CaptionTest::::testGetFrom()",
      "50": "CaptionTest::::testGetFrom()",
      "51": "CaptionTest::::testGetFrom()",
      "52": "CaptionTest::::testGetFrom()",
      "53": "CaptionTest::::testGetFrom()",
      "54": "CaptionTest::::testGetFrom()",
      "55": "CaptionTest::::testGetFrom()",
      "56": "CaptionTest::::testGetFrom()",
      "65": "CaptionTest::::testGetId()",
      "66": "CaptionTest::::testGetId()",
      "67": "CaptionTest::::testGetId()",
      "68": "CaptionTest::::testGetId()",
      "69": "CaptionTest::::testGetId()",
      "70": "CaptionTest::::testGetId()",
      "71": "CaptionTest::::testGetId()",
      "72": "CaptionTest::::testGetId()",
      "73": "CaptionTest::::testGetId()",
      "74": "CaptionTest::::testGetId()",
      "75": "CaptionTest::::testGetId()",
      "76": "CaptionTest::::testGetId()",
      "77": "CaptionTest::::testGetId()",
      "86": "CaptionTest::::testGetText()",
      "87": "CaptionTest::::testGetText()",
      "88": "CaptionTest::::testGetText()",
      "89": "CaptionTest::::testGetText()",
      "90": "CaptionTest::::testGetText()",
      "91": "CaptionTest::::testGetText()",
      "92": "CaptionTest::::testGetText()",
      "93": "CaptionTest::::testGetText()",
      "94": "CaptionTest::::testGetText()",
      "95": "CaptionTest::::testGetText()",
      "96": "CaptionTest::::testGetText()",
      "97": "CaptionTest::::testGetText()",
      "98": "CaptionTest::::testGetText()",
      "107": "CaptionTest::::testSetCreatedTime()",
      "108": "CaptionTest::::testSetCreatedTime()",
      "109": "CaptionTest::::testSetCreatedTime()",
      "110": "CaptionTest::::testSetCreatedTime()",
      "111": "CaptionTest::::testSetCreatedTime()",
      "112": "CaptionTest::::testSetCreatedTime()",
      "113": "CaptionTest::::testSetCreatedTime()",
      "114": "CaptionTest::::testSetCreatedTime()",
      "115": "CaptionTest::::testSetCreatedTime()",
      "116": "CaptionTest::::testSetCreatedTime()",
      "117": "CaptionTest::::testSetCreatedTime()",
      "118": "CaptionTest::::testSetCreatedTime()",
      "119": "CaptionTest::::testSetCreatedTime()",
      "128": "CaptionTest::::testSetFrom()",
      "129": "CaptionTest::::testSetFrom()",
      "130": "CaptionTest::::testSetFrom()",
      "131": "CaptionTest::::testSetFrom()",
      "132": "CaptionTest::::testSetFrom()",
      "133": "CaptionTest::::testSetFrom()",
      "134": "CaptionTest::::testSetFrom()",
      "135": "CaptionTest::::testSetFrom()",
      "136": "CaptionTest::::testSetFrom()",
      "137": "CaptionTest::::testSetFrom()",
      "138": "CaptionTest::::testSetFrom()",
      "139": "CaptionTest::::testSetFrom()",
      "140": "CaptionTest::::testSetFrom()",
      "149": "CaptionTest::::testSetId()",
      "150": "CaptionTest::::testSetId()",
      "151": "CaptionTest::::testSetId()",
      "152": "CaptionTest::::testSetId()",
      "153": "CaptionTest::::testSetId()",
      "154": "CaptionTest::::testSetId()",
      "155": "CaptionTest::::testSetId()",
      "156": "CaptionTest::::testSetId()",
      "157": "CaptionTest::::testSetId()",
      "158": "CaptionTest::::testSetId()",
      "159": "CaptionTest::::testSetId()",
      "160": "CaptionTest::::testSetId()",
      "161": "CaptionTest::::testSetId()",
      "170": "CaptionTest::::testSetText()",
      "171": "CaptionTest::::testSetText()",
      "172": "CaptionTest::::testSetText()",
      "173": "CaptionTest::::testSetText()",
      "174": "CaptionTest::::testSetText()",
      "175": "CaptionTest::::testSetText()",
      "176": "CaptionTest::::testSetText()",
      "177": "CaptionTest::::testSetText()",
      "178": "CaptionTest::::testSetText()",
      "179": "CaptionTest::::testSetText()",
      "180": "CaptionTest::::testSetText()",
      "181": "CaptionTest::::testSetText()",
      "182": "CaptionTest::::testSetText()",
      "191": "CaptionTest::::testToString()",
      "192": "CaptionTest::::testToString()",
      "193": "CaptionTest::::testToString()",
      "194": "CaptionTest::::testToString()",
      "195": "CaptionTest::::testToString()",
      "196": "CaptionTest::::testToString()",
      "197": "CaptionTest::::testToString()",
      "198": "CaptionTest::::testToString()",
      "199": "CaptionTest::::testToString()",
      "200": "CaptionTest::::testToString()",
      "201": "CaptionTest::::testToString()",
      "202": "CaptionTest::::testToString()",
      "203": "CaptionTest::::testToString()",
      "204": "CaptionTest::::testToString()",
      "205": "CaptionTest::::testToString()"
    },
    "tests": [
      {
        "test_lines": [
          20,
          32
        ],
        "covered_lines": [
          5,
          22,
          29,
          30,
          43,
          44,
          57,
          58,
          71,
          72
        ],
        "label": "Caption::::getCreatedTime()"
      },
      {
        "test_lines": [
          39,
          56
        ],
        "covered_lines": [
          5,
          29,
          30,
          43,
          44,
          50,
          57,
          58,
          71,
          72
        ],
        "label": "Caption::::getFrom()"
      },
      {
        "test_lines": [
          65,
          77
        ],
        "covered_lines": [
          5,
          29,
          30,
          43,
          44,
          57,
          58,
          64,
          71,
          72
        ],
        "label": "Caption::::getId()"
      },
      {
        "test_lines": [
          86,
          98
        ],
        "covered_lines": [
          5,
          29,
          30,
          36,
          43,
          44,
          57,
          58,
          71,
          72
        ],
        "label": "Caption::::getText()"
      },
      {
        "test_lines": [
          107,
          119
        ],
        "covered_lines": [
          5,
          29,
          30,
          43,
          44,
          57,
          58,
          71,
          72
        ],
        "label": "Caption::::setCreatedTime(java.lang.String)"
      },
      {
        "test_lines": [
          128,
          140
        ],
        "covered_lines": [
          5,
          29,
          30,
          43,
          44,
          57,
          58,
          71,
          72
        ],
        "label": "Caption::::setFrom(org.jinstagram.entity.common.FromTagData)"
      },
      {
        "test_lines": [
          149,
          161
        ],
        "covered_lines": [
          5,
          29,
          30,
          43,
          44,
          57,
          58,
          71,
          72
        ],
        "label": "Caption::::setId(java.lang.String)"
      },
      {
        "test_lines": [
          170,
          182
        ],
        "covered_lines": [
          5,
          29,
          30,
          43,
          44,
          57,
          58,
          71,
          72
        ],
        "label": "Caption::::setText(java.lang.String)"
      },
      {
        "test_lines": [
          191,
          205
        ],
        "covered_lines": [
          5,
          29,
          30,
          43,
          44,
          57,
          58,
          71,
          72,
          76
        ],
        "label": "Caption::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/Location.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class Location {\n",
      "\t@SerializedName(\"id\")\n",
      "\tprivate String id;\n",
      "\n",
      "\t@SerializedName(\"name\")\n",
      "\tprivate String name;\n",
      "\n",
      "\t@SerializedName(\"latitude\")\n",
      "\tprivate double latitude;\n",
      "\n",
      "\t@SerializedName(\"longitude\")\n",
      "\tprivate double longitude;\n",
      "\n",
      "\t/**\n",
      "\t * @return the latitude\n",
      "\t */\n",
      "\tpublic double getLatitude() {\n",
      "\t\treturn latitude;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param latitude\n",
      "\t *            the latitude to set\n",
      "\t */\n",
      "\tpublic void setLatitude(double latitude) {\n",
      "\t\tthis.latitude = latitude;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the longitude\n",
      "\t */\n",
      "\tpublic double getLongitude() {\n",
      "\t\treturn longitude;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param longitude\n",
      "\t *            the longitude to set\n",
      "\t */\n",
      "\tpublic void setLongitude(double longitude) {\n",
      "\t\tthis.longitude = longitude;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the id\n",
      "\t */\n",
      "\tpublic String getId() {\n",
      "\t\treturn id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param id the id to set\n",
      "\t */\n",
      "\tpublic void setId(String id) {\n",
      "\t\tthis.id = id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the name\n",
      "\t */\n",
      "\tpublic String getName() {\n",
      "\t\treturn name;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param name the name to set\n",
      "\t */\n",
      "\tpublic void setName(String name) {\n",
      "\t\tthis.name = name;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"Location [id=%s, name=%s, latitude=%s, longitude=%s]\", id, name, latitude, longitude);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>LocationTest</code> contains tests for the class <code>{@link Location}</code>.\n",
      " */\n",
      "public class LocationTest {\n",
      "\t/**\n",
      "\t * Run the String getId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetId_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocation fixture = new Location();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setName(\"\");\n",
      "\t\tfixture.setLatitude(1.0);\n",
      "\t\tfixture.setLongitude(1.0);\n",
      "\n",
      "\t\tString result = fixture.getId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the double getLatitude() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLatitude_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocation fixture = new Location();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setName(\"\");\n",
      "\t\tfixture.setLatitude(1.0);\n",
      "\t\tfixture.setLongitude(1.0);\n",
      "\n",
      "\t\tdouble result = fixture.getLatitude();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1.0, result, 0.1);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the double getLongitude() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLongitude_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocation fixture = new Location();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setName(\"\");\n",
      "\t\tfixture.setLatitude(1.0);\n",
      "\t\tfixture.setLongitude(1.0);\n",
      "\n",
      "\t\tdouble result = fixture.getLongitude();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1.0, result, 0.1);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetName_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocation fixture = new Location();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setName(\"\");\n",
      "\t\tfixture.setLatitude(1.0);\n",
      "\t\tfixture.setLongitude(1.0);\n",
      "\n",
      "\t\tString result = fixture.getName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetId_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocation fixture = new Location();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setName(\"\");\n",
      "\t\tfixture.setLatitude(1.0);\n",
      "\t\tfixture.setLongitude(1.0);\n",
      "\t\tString id = \"\";\n",
      "\n",
      "\t\tfixture.setId(id);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLatitude(double) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLatitude_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocation fixture = new Location();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setName(\"\");\n",
      "\t\tfixture.setLatitude(1.0);\n",
      "\t\tfixture.setLongitude(1.0);\n",
      "\t\tdouble latitude = 1.0;\n",
      "\n",
      "\t\tfixture.setLatitude(latitude);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLongitude(double) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLongitude_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocation fixture = new Location();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setName(\"\");\n",
      "\t\tfixture.setLatitude(1.0);\n",
      "\t\tfixture.setLongitude(1.0);\n",
      "\t\tdouble longitude = 1.0;\n",
      "\n",
      "\t\tfixture.setLongitude(longitude);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetName_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocation fixture = new Location();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setName(\"\");\n",
      "\t\tfixture.setLatitude(1.0);\n",
      "\t\tfixture.setLongitude(1.0);\n",
      "\t\tString name = \"\";\n",
      "\n",
      "\t\tfixture.setName(name);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocation fixture = new Location();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setName(\"\");\n",
      "\t\tfixture.setLatitude(1.0);\n",
      "\t\tfixture.setLongitude(1.0);\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"Location [id=, name=, latitude=1.0, longitude=1.0]\", result);\n",
      "\t}\n",
      "\n",
      " \n",
      "}"
    ],
    "method_lines_dic": {
      "Location::::getLatitude()": [
        21,
        23
      ],
      "Location::::setLatitude(double)": [
        29,
        31
      ],
      "Location::::getLongitude()": [
        36,
        38
      ],
      "Location::::setLongitude(double)": [
        44,
        46
      ],
      "Location::::getId()": [
        51,
        53
      ],
      "Location::::setId(java.lang.String)": [
        58,
        60
      ],
      "Location::::getName()": [
        65,
        67
      ],
      "Location::::setName(java.lang.String)": [
        72,
        74
      ],
      "Location::::toString()": [
        76,
        79
      ]
    },
    "test_method_lines_dic": {
      "LocationTest::::testGetId_1()": [
        17,
        30
      ],
      "LocationTest::::testGetLatitude_1()": [
        39,
        52
      ],
      "LocationTest::::testGetLongitude_1()": [
        61,
        74
      ],
      "LocationTest::::testGetName_1()": [
        83,
        96
      ],
      "LocationTest::::testSetId_1()": [
        105,
        118
      ],
      "LocationTest::::testSetLatitude_1()": [
        127,
        140
      ],
      "LocationTest::::testSetLongitude_1()": [
        149,
        162
      ],
      "LocationTest::::testSetName_1()": [
        171,
        184
      ],
      "LocationTest::::testToString_1()": [
        193,
        206
      ]
    },
    "reverse_method_lines_dic": {
      "21": "Location::::getLatitude()",
      "22": "Location::::getLatitude()",
      "23": "Location::::getLatitude()",
      "29": "Location::::setLatitude(double)",
      "30": "Location::::setLatitude(double)",
      "31": "Location::::setLatitude(double)",
      "36": "Location::::getLongitude()",
      "37": "Location::::getLongitude()",
      "38": "Location::::getLongitude()",
      "44": "Location::::setLongitude(double)",
      "45": "Location::::setLongitude(double)",
      "46": "Location::::setLongitude(double)",
      "51": "Location::::getId()",
      "52": "Location::::getId()",
      "53": "Location::::getId()",
      "58": "Location::::setId(java.lang.String)",
      "59": "Location::::setId(java.lang.String)",
      "60": "Location::::setId(java.lang.String)",
      "65": "Location::::getName()",
      "66": "Location::::getName()",
      "67": "Location::::getName()",
      "72": "Location::::setName(java.lang.String)",
      "73": "Location::::setName(java.lang.String)",
      "74": "Location::::setName(java.lang.String)",
      "76": "Location::::toString()",
      "77": "Location::::toString()",
      "78": "Location::::toString()",
      "79": "Location::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "17": "LocationTest::::testGetId_1()",
      "18": "LocationTest::::testGetId_1()",
      "19": "LocationTest::::testGetId_1()",
      "20": "LocationTest::::testGetId_1()",
      "21": "LocationTest::::testGetId_1()",
      "22": "LocationTest::::testGetId_1()",
      "23": "LocationTest::::testGetId_1()",
      "24": "LocationTest::::testGetId_1()",
      "25": "LocationTest::::testGetId_1()",
      "26": "LocationTest::::testGetId_1()",
      "27": "LocationTest::::testGetId_1()",
      "28": "LocationTest::::testGetId_1()",
      "29": "LocationTest::::testGetId_1()",
      "30": "LocationTest::::testGetId_1()",
      "39": "LocationTest::::testGetLatitude_1()",
      "40": "LocationTest::::testGetLatitude_1()",
      "41": "LocationTest::::testGetLatitude_1()",
      "42": "LocationTest::::testGetLatitude_1()",
      "43": "LocationTest::::testGetLatitude_1()",
      "44": "LocationTest::::testGetLatitude_1()",
      "45": "LocationTest::::testGetLatitude_1()",
      "46": "LocationTest::::testGetLatitude_1()",
      "47": "LocationTest::::testGetLatitude_1()",
      "48": "LocationTest::::testGetLatitude_1()",
      "49": "LocationTest::::testGetLatitude_1()",
      "50": "LocationTest::::testGetLatitude_1()",
      "51": "LocationTest::::testGetLatitude_1()",
      "52": "LocationTest::::testGetLatitude_1()",
      "61": "LocationTest::::testGetLongitude_1()",
      "62": "LocationTest::::testGetLongitude_1()",
      "63": "LocationTest::::testGetLongitude_1()",
      "64": "LocationTest::::testGetLongitude_1()",
      "65": "LocationTest::::testGetLongitude_1()",
      "66": "LocationTest::::testGetLongitude_1()",
      "67": "LocationTest::::testGetLongitude_1()",
      "68": "LocationTest::::testGetLongitude_1()",
      "69": "LocationTest::::testGetLongitude_1()",
      "70": "LocationTest::::testGetLongitude_1()",
      "71": "LocationTest::::testGetLongitude_1()",
      "72": "LocationTest::::testGetLongitude_1()",
      "73": "LocationTest::::testGetLongitude_1()",
      "74": "LocationTest::::testGetLongitude_1()",
      "83": "LocationTest::::testGetName_1()",
      "84": "LocationTest::::testGetName_1()",
      "85": "LocationTest::::testGetName_1()",
      "86": "LocationTest::::testGetName_1()",
      "87": "LocationTest::::testGetName_1()",
      "88": "LocationTest::::testGetName_1()",
      "89": "LocationTest::::testGetName_1()",
      "90": "LocationTest::::testGetName_1()",
      "91": "LocationTest::::testGetName_1()",
      "92": "LocationTest::::testGetName_1()",
      "93": "LocationTest::::testGetName_1()",
      "94": "LocationTest::::testGetName_1()",
      "95": "LocationTest::::testGetName_1()",
      "96": "LocationTest::::testGetName_1()",
      "105": "LocationTest::::testSetId_1()",
      "106": "LocationTest::::testSetId_1()",
      "107": "LocationTest::::testSetId_1()",
      "108": "LocationTest::::testSetId_1()",
      "109": "LocationTest::::testSetId_1()",
      "110": "LocationTest::::testSetId_1()",
      "111": "LocationTest::::testSetId_1()",
      "112": "LocationTest::::testSetId_1()",
      "113": "LocationTest::::testSetId_1()",
      "114": "LocationTest::::testSetId_1()",
      "115": "LocationTest::::testSetId_1()",
      "116": "LocationTest::::testSetId_1()",
      "117": "LocationTest::::testSetId_1()",
      "118": "LocationTest::::testSetId_1()",
      "127": "LocationTest::::testSetLatitude_1()",
      "128": "LocationTest::::testSetLatitude_1()",
      "129": "LocationTest::::testSetLatitude_1()",
      "130": "LocationTest::::testSetLatitude_1()",
      "131": "LocationTest::::testSetLatitude_1()",
      "132": "LocationTest::::testSetLatitude_1()",
      "133": "LocationTest::::testSetLatitude_1()",
      "134": "LocationTest::::testSetLatitude_1()",
      "135": "LocationTest::::testSetLatitude_1()",
      "136": "LocationTest::::testSetLatitude_1()",
      "137": "LocationTest::::testSetLatitude_1()",
      "138": "LocationTest::::testSetLatitude_1()",
      "139": "LocationTest::::testSetLatitude_1()",
      "140": "LocationTest::::testSetLatitude_1()",
      "149": "LocationTest::::testSetLongitude_1()",
      "150": "LocationTest::::testSetLongitude_1()",
      "151": "LocationTest::::testSetLongitude_1()",
      "152": "LocationTest::::testSetLongitude_1()",
      "153": "LocationTest::::testSetLongitude_1()",
      "154": "LocationTest::::testSetLongitude_1()",
      "155": "LocationTest::::testSetLongitude_1()",
      "156": "LocationTest::::testSetLongitude_1()",
      "157": "LocationTest::::testSetLongitude_1()",
      "158": "LocationTest::::testSetLongitude_1()",
      "159": "LocationTest::::testSetLongitude_1()",
      "160": "LocationTest::::testSetLongitude_1()",
      "161": "LocationTest::::testSetLongitude_1()",
      "162": "LocationTest::::testSetLongitude_1()",
      "171": "LocationTest::::testSetName_1()",
      "172": "LocationTest::::testSetName_1()",
      "173": "LocationTest::::testSetName_1()",
      "174": "LocationTest::::testSetName_1()",
      "175": "LocationTest::::testSetName_1()",
      "176": "LocationTest::::testSetName_1()",
      "177": "LocationTest::::testSetName_1()",
      "178": "LocationTest::::testSetName_1()",
      "179": "LocationTest::::testSetName_1()",
      "180": "LocationTest::::testSetName_1()",
      "181": "LocationTest::::testSetName_1()",
      "182": "LocationTest::::testSetName_1()",
      "183": "LocationTest::::testSetName_1()",
      "184": "LocationTest::::testSetName_1()",
      "193": "LocationTest::::testToString_1()",
      "194": "LocationTest::::testToString_1()",
      "195": "LocationTest::::testToString_1()",
      "196": "LocationTest::::testToString_1()",
      "197": "LocationTest::::testToString_1()",
      "198": "LocationTest::::testToString_1()",
      "199": "LocationTest::::testToString_1()",
      "200": "LocationTest::::testToString_1()",
      "201": "LocationTest::::testToString_1()",
      "202": "LocationTest::::testToString_1()",
      "203": "LocationTest::::testToString_1()",
      "204": "LocationTest::::testToString_1()",
      "205": "LocationTest::::testToString_1()",
      "206": "LocationTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          17,
          30
        ],
        "covered_lines": [
          5,
          30,
          31,
          45,
          46,
          52,
          59,
          60,
          73,
          74
        ],
        "label": "Location::::getId()"
      },
      {
        "test_lines": [
          39,
          52
        ],
        "covered_lines": [
          5,
          22,
          30,
          31,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "Location::::getLatitude()"
      },
      {
        "test_lines": [
          61,
          74
        ],
        "covered_lines": [
          5,
          30,
          31,
          37,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "Location::::getLongitude()"
      },
      {
        "test_lines": [
          83,
          96
        ],
        "covered_lines": [
          5,
          30,
          31,
          45,
          46,
          59,
          60,
          66,
          73,
          74
        ],
        "label": "Location::::getName()"
      },
      {
        "test_lines": [
          105,
          118
        ],
        "covered_lines": [
          5,
          30,
          31,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "Location::::setId(java.lang.String)"
      },
      {
        "test_lines": [
          127,
          140
        ],
        "covered_lines": [
          5,
          30,
          31,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "Location::::setLatitude(double)"
      },
      {
        "test_lines": [
          149,
          162
        ],
        "covered_lines": [
          5,
          30,
          31,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "Location::::setLongitude(double)"
      },
      {
        "test_lines": [
          171,
          184
        ],
        "covered_lines": [
          5,
          30,
          31,
          45,
          46,
          59,
          60,
          73,
          74
        ],
        "label": "Location::::setName(java.lang.String)"
      },
      {
        "test_lines": [
          193,
          206
        ],
        "covered_lines": [
          5,
          30,
          31,
          45,
          46,
          59,
          60,
          73,
          74,
          78
        ],
        "label": "Location::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/User.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class User {\n",
      "\t@SerializedName(\"bio\")\n",
      "\tprivate String bio;\n",
      "\n",
      "\t@SerializedName(\"full_name\")\n",
      "\tprivate String fullName;\n",
      "\n",
      "\t@SerializedName(\"id\")\n",
      "\tprivate String id;\n",
      "\n",
      "\t@SerializedName(\"profile_picture\")\n",
      "\tprivate String profilePictureUrl;\n",
      "\n",
      "\t@SerializedName(\"username\")\n",
      "\tprivate String userName;\n",
      "\n",
      "\t@SerializedName(\"website\")\n",
      "\tprivate String websiteUrl;\n",
      "\n",
      "\t/**\n",
      "\t * @return the userName\n",
      "\t */\n",
      "\tpublic String getUserName() {\n",
      "\t\treturn userName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param userName the userName to set\n",
      "\t */\n",
      "\tpublic void setUserName(String userName) {\n",
      "\t\tthis.userName = userName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the fullName\n",
      "\t */\n",
      "\tpublic String getFullName() {\n",
      "\t\treturn fullName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param fullName the fullName to set\n",
      "\t */\n",
      "\tpublic void setFullName(String fullName) {\n",
      "\t\tthis.fullName = fullName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the profilePictureUrl\n",
      "\t */\n",
      "\tpublic String getProfilePictureUrl() {\n",
      "\t\treturn profilePictureUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param profilePictureUrl the profilePictureUrl to set\n",
      "\t */\n",
      "\tpublic void setProfilePictureUrl(String profilePictureUrl) {\n",
      "\t\tthis.profilePictureUrl = profilePictureUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the bio\n",
      "\t */\n",
      "\tpublic String getBio() {\n",
      "\t\treturn bio;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param bio the bio to set\n",
      "\t */\n",
      "\tpublic void setBio(String bio) {\n",
      "\t\tthis.bio = bio;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the websiteUrl\n",
      "\t */\n",
      "\tpublic String getWebsiteUrl() {\n",
      "\t\treturn websiteUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param websiteUrl the websiteUrl to set\n",
      "\t */\n",
      "\tpublic void setWebsiteUrl(String websiteUrl) {\n",
      "\t\tthis.websiteUrl = websiteUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the id\n",
      "\t */\n",
      "\tpublic String getId() {\n",
      "\t\treturn id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param id the id to set\n",
      "\t */\n",
      "\tpublic void setId(String id) {\n",
      "\t\tthis.id = id;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"User [bio=%s, fullName=%s, id=%s, profilePictureUrl=%s, userName=%s, websiteUrl=%s]\",\n",
      "                bio, fullName, id, profilePictureUrl, userName, websiteUrl);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>UserTest</code> contains tests for the class\n",
      " * <code>{@link User}</code>.\n",
      " */\n",
      "public class UserTest {\n",
      "\t/**\n",
      "\t * Run the String getBio() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetBio() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getBio();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getFullName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetFullName() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getFullName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetId() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getProfilePictureUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetProfilePictureUrl() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getProfilePictureUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getUserName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUserName() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getUserName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getWebsiteUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetWebsiteUrl() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.getWebsiteUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setBio(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetBio() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tString bio = \"\";\n",
      "\n",
      "\t\tfixture.setBio(bio);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setFullName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetFullName() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tString fullName = \"\";\n",
      "\n",
      "\t\tfixture.setFullName(fullName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetId() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tString id = \"\";\n",
      "\n",
      "\t\tfixture.setId(id);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setProfilePictureUrl(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetProfilePictureUrl() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tString profilePictureUrl = \"\";\n",
      "\n",
      "\t\tfixture.setProfilePictureUrl(profilePictureUrl);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUserName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUserName() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tString userName = \"\";\n",
      "\n",
      "\t\tfixture.setUserName(userName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setWebsiteUrl(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetWebsiteUrl() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tString websiteUrl = \"\";\n",
      "\n",
      "\t\tfixture.setWebsiteUrl(websiteUrl);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tUser fixture = new User();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setWebsiteUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"User [bio=, fullName=, id=, profilePictureUrl=, userName=, websiteUrl=]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "User::::getUserName()": [
        27,
        29
      ],
      "User::::setUserName(java.lang.String)": [
        34,
        36
      ],
      "User::::getFullName()": [
        41,
        43
      ],
      "User::::setFullName(java.lang.String)": [
        48,
        50
      ],
      "User::::getProfilePictureUrl()": [
        55,
        57
      ],
      "User::::setProfilePictureUrl(java.lang.String)": [
        62,
        64
      ],
      "User::::getBio()": [
        69,
        71
      ],
      "User::::setBio(java.lang.String)": [
        76,
        78
      ],
      "User::::getWebsiteUrl()": [
        83,
        85
      ],
      "User::::setWebsiteUrl(java.lang.String)": [
        90,
        92
      ],
      "User::::getId()": [
        97,
        99
      ],
      "User::::setId(java.lang.String)": [
        104,
        106
      ],
      "User::::toString()": [
        108,
        112
      ]
    },
    "test_method_lines_dic": {
      "UserTest::::testGetBio()": [
        18,
        32
      ],
      "UserTest::::testGetFullName()": [
        41,
        55
      ],
      "UserTest::::testGetId()": [
        64,
        78
      ],
      "UserTest::::testGetProfilePictureUrl()": [
        87,
        101
      ],
      "UserTest::::testGetUserName()": [
        110,
        124
      ],
      "UserTest::::testGetWebsiteUrl()": [
        133,
        147
      ],
      "UserTest::::testSetBio()": [
        156,
        170
      ],
      "UserTest::::testSetFullName()": [
        179,
        193
      ],
      "UserTest::::testSetId()": [
        202,
        216
      ],
      "UserTest::::testSetProfilePictureUrl()": [
        225,
        239
      ],
      "UserTest::::testSetUserName()": [
        248,
        262
      ],
      "UserTest::::testSetWebsiteUrl()": [
        271,
        285
      ],
      "UserTest::::testToString()": [
        294,
        308
      ]
    },
    "reverse_method_lines_dic": {
      "27": "User::::getUserName()",
      "28": "User::::getUserName()",
      "29": "User::::getUserName()",
      "34": "User::::setUserName(java.lang.String)",
      "35": "User::::setUserName(java.lang.String)",
      "36": "User::::setUserName(java.lang.String)",
      "41": "User::::getFullName()",
      "42": "User::::getFullName()",
      "43": "User::::getFullName()",
      "48": "User::::setFullName(java.lang.String)",
      "49": "User::::setFullName(java.lang.String)",
      "50": "User::::setFullName(java.lang.String)",
      "55": "User::::getProfilePictureUrl()",
      "56": "User::::getProfilePictureUrl()",
      "57": "User::::getProfilePictureUrl()",
      "62": "User::::setProfilePictureUrl(java.lang.String)",
      "63": "User::::setProfilePictureUrl(java.lang.String)",
      "64": "User::::setProfilePictureUrl(java.lang.String)",
      "69": "User::::getBio()",
      "70": "User::::getBio()",
      "71": "User::::getBio()",
      "76": "User::::setBio(java.lang.String)",
      "77": "User::::setBio(java.lang.String)",
      "78": "User::::setBio(java.lang.String)",
      "83": "User::::getWebsiteUrl()",
      "84": "User::::getWebsiteUrl()",
      "85": "User::::getWebsiteUrl()",
      "90": "User::::setWebsiteUrl(java.lang.String)",
      "91": "User::::setWebsiteUrl(java.lang.String)",
      "92": "User::::setWebsiteUrl(java.lang.String)",
      "97": "User::::getId()",
      "98": "User::::getId()",
      "99": "User::::getId()",
      "104": "User::::setId(java.lang.String)",
      "105": "User::::setId(java.lang.String)",
      "106": "User::::setId(java.lang.String)",
      "108": "User::::toString()",
      "109": "User::::toString()",
      "110": "User::::toString()",
      "111": "User::::toString()",
      "112": "User::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "18": "UserTest::::testGetBio()",
      "19": "UserTest::::testGetBio()",
      "20": "UserTest::::testGetBio()",
      "21": "UserTest::::testGetBio()",
      "22": "UserTest::::testGetBio()",
      "23": "UserTest::::testGetBio()",
      "24": "UserTest::::testGetBio()",
      "25": "UserTest::::testGetBio()",
      "26": "UserTest::::testGetBio()",
      "27": "UserTest::::testGetBio()",
      "28": "UserTest::::testGetBio()",
      "29": "UserTest::::testGetBio()",
      "30": "UserTest::::testGetBio()",
      "31": "UserTest::::testGetBio()",
      "32": "UserTest::::testGetBio()",
      "41": "UserTest::::testGetFullName()",
      "42": "UserTest::::testGetFullName()",
      "43": "UserTest::::testGetFullName()",
      "44": "UserTest::::testGetFullName()",
      "45": "UserTest::::testGetFullName()",
      "46": "UserTest::::testGetFullName()",
      "47": "UserTest::::testGetFullName()",
      "48": "UserTest::::testGetFullName()",
      "49": "UserTest::::testGetFullName()",
      "50": "UserTest::::testGetFullName()",
      "51": "UserTest::::testGetFullName()",
      "52": "UserTest::::testGetFullName()",
      "53": "UserTest::::testGetFullName()",
      "54": "UserTest::::testGetFullName()",
      "55": "UserTest::::testGetFullName()",
      "64": "UserTest::::testGetId()",
      "65": "UserTest::::testGetId()",
      "66": "UserTest::::testGetId()",
      "67": "UserTest::::testGetId()",
      "68": "UserTest::::testGetId()",
      "69": "UserTest::::testGetId()",
      "70": "UserTest::::testGetId()",
      "71": "UserTest::::testGetId()",
      "72": "UserTest::::testGetId()",
      "73": "UserTest::::testGetId()",
      "74": "UserTest::::testGetId()",
      "75": "UserTest::::testGetId()",
      "76": "UserTest::::testGetId()",
      "77": "UserTest::::testGetId()",
      "78": "UserTest::::testGetId()",
      "87": "UserTest::::testGetProfilePictureUrl()",
      "88": "UserTest::::testGetProfilePictureUrl()",
      "89": "UserTest::::testGetProfilePictureUrl()",
      "90": "UserTest::::testGetProfilePictureUrl()",
      "91": "UserTest::::testGetProfilePictureUrl()",
      "92": "UserTest::::testGetProfilePictureUrl()",
      "93": "UserTest::::testGetProfilePictureUrl()",
      "94": "UserTest::::testGetProfilePictureUrl()",
      "95": "UserTest::::testGetProfilePictureUrl()",
      "96": "UserTest::::testGetProfilePictureUrl()",
      "97": "UserTest::::testGetProfilePictureUrl()",
      "98": "UserTest::::testGetProfilePictureUrl()",
      "99": "UserTest::::testGetProfilePictureUrl()",
      "100": "UserTest::::testGetProfilePictureUrl()",
      "101": "UserTest::::testGetProfilePictureUrl()",
      "110": "UserTest::::testGetUserName()",
      "111": "UserTest::::testGetUserName()",
      "112": "UserTest::::testGetUserName()",
      "113": "UserTest::::testGetUserName()",
      "114": "UserTest::::testGetUserName()",
      "115": "UserTest::::testGetUserName()",
      "116": "UserTest::::testGetUserName()",
      "117": "UserTest::::testGetUserName()",
      "118": "UserTest::::testGetUserName()",
      "119": "UserTest::::testGetUserName()",
      "120": "UserTest::::testGetUserName()",
      "121": "UserTest::::testGetUserName()",
      "122": "UserTest::::testGetUserName()",
      "123": "UserTest::::testGetUserName()",
      "124": "UserTest::::testGetUserName()",
      "133": "UserTest::::testGetWebsiteUrl()",
      "134": "UserTest::::testGetWebsiteUrl()",
      "135": "UserTest::::testGetWebsiteUrl()",
      "136": "UserTest::::testGetWebsiteUrl()",
      "137": "UserTest::::testGetWebsiteUrl()",
      "138": "UserTest::::testGetWebsiteUrl()",
      "139": "UserTest::::testGetWebsiteUrl()",
      "140": "UserTest::::testGetWebsiteUrl()",
      "141": "UserTest::::testGetWebsiteUrl()",
      "142": "UserTest::::testGetWebsiteUrl()",
      "143": "UserTest::::testGetWebsiteUrl()",
      "144": "UserTest::::testGetWebsiteUrl()",
      "145": "UserTest::::testGetWebsiteUrl()",
      "146": "UserTest::::testGetWebsiteUrl()",
      "147": "UserTest::::testGetWebsiteUrl()",
      "156": "UserTest::::testSetBio()",
      "157": "UserTest::::testSetBio()",
      "158": "UserTest::::testSetBio()",
      "159": "UserTest::::testSetBio()",
      "160": "UserTest::::testSetBio()",
      "161": "UserTest::::testSetBio()",
      "162": "UserTest::::testSetBio()",
      "163": "UserTest::::testSetBio()",
      "164": "UserTest::::testSetBio()",
      "165": "UserTest::::testSetBio()",
      "166": "UserTest::::testSetBio()",
      "167": "UserTest::::testSetBio()",
      "168": "UserTest::::testSetBio()",
      "169": "UserTest::::testSetBio()",
      "170": "UserTest::::testSetBio()",
      "179": "UserTest::::testSetFullName()",
      "180": "UserTest::::testSetFullName()",
      "181": "UserTest::::testSetFullName()",
      "182": "UserTest::::testSetFullName()",
      "183": "UserTest::::testSetFullName()",
      "184": "UserTest::::testSetFullName()",
      "185": "UserTest::::testSetFullName()",
      "186": "UserTest::::testSetFullName()",
      "187": "UserTest::::testSetFullName()",
      "188": "UserTest::::testSetFullName()",
      "189": "UserTest::::testSetFullName()",
      "190": "UserTest::::testSetFullName()",
      "191": "UserTest::::testSetFullName()",
      "192": "UserTest::::testSetFullName()",
      "193": "UserTest::::testSetFullName()",
      "202": "UserTest::::testSetId()",
      "203": "UserTest::::testSetId()",
      "204": "UserTest::::testSetId()",
      "205": "UserTest::::testSetId()",
      "206": "UserTest::::testSetId()",
      "207": "UserTest::::testSetId()",
      "208": "UserTest::::testSetId()",
      "209": "UserTest::::testSetId()",
      "210": "UserTest::::testSetId()",
      "211": "UserTest::::testSetId()",
      "212": "UserTest::::testSetId()",
      "213": "UserTest::::testSetId()",
      "214": "UserTest::::testSetId()",
      "215": "UserTest::::testSetId()",
      "216": "UserTest::::testSetId()",
      "225": "UserTest::::testSetProfilePictureUrl()",
      "226": "UserTest::::testSetProfilePictureUrl()",
      "227": "UserTest::::testSetProfilePictureUrl()",
      "228": "UserTest::::testSetProfilePictureUrl()",
      "229": "UserTest::::testSetProfilePictureUrl()",
      "230": "UserTest::::testSetProfilePictureUrl()",
      "231": "UserTest::::testSetProfilePictureUrl()",
      "232": "UserTest::::testSetProfilePictureUrl()",
      "233": "UserTest::::testSetProfilePictureUrl()",
      "234": "UserTest::::testSetProfilePictureUrl()",
      "235": "UserTest::::testSetProfilePictureUrl()",
      "236": "UserTest::::testSetProfilePictureUrl()",
      "237": "UserTest::::testSetProfilePictureUrl()",
      "238": "UserTest::::testSetProfilePictureUrl()",
      "239": "UserTest::::testSetProfilePictureUrl()",
      "248": "UserTest::::testSetUserName()",
      "249": "UserTest::::testSetUserName()",
      "250": "UserTest::::testSetUserName()",
      "251": "UserTest::::testSetUserName()",
      "252": "UserTest::::testSetUserName()",
      "253": "UserTest::::testSetUserName()",
      "254": "UserTest::::testSetUserName()",
      "255": "UserTest::::testSetUserName()",
      "256": "UserTest::::testSetUserName()",
      "257": "UserTest::::testSetUserName()",
      "258": "UserTest::::testSetUserName()",
      "259": "UserTest::::testSetUserName()",
      "260": "UserTest::::testSetUserName()",
      "261": "UserTest::::testSetUserName()",
      "262": "UserTest::::testSetUserName()",
      "271": "UserTest::::testSetWebsiteUrl()",
      "272": "UserTest::::testSetWebsiteUrl()",
      "273": "UserTest::::testSetWebsiteUrl()",
      "274": "UserTest::::testSetWebsiteUrl()",
      "275": "UserTest::::testSetWebsiteUrl()",
      "276": "UserTest::::testSetWebsiteUrl()",
      "277": "UserTest::::testSetWebsiteUrl()",
      "278": "UserTest::::testSetWebsiteUrl()",
      "279": "UserTest::::testSetWebsiteUrl()",
      "280": "UserTest::::testSetWebsiteUrl()",
      "281": "UserTest::::testSetWebsiteUrl()",
      "282": "UserTest::::testSetWebsiteUrl()",
      "283": "UserTest::::testSetWebsiteUrl()",
      "284": "UserTest::::testSetWebsiteUrl()",
      "285": "UserTest::::testSetWebsiteUrl()",
      "294": "UserTest::::testToString()",
      "295": "UserTest::::testToString()",
      "296": "UserTest::::testToString()",
      "297": "UserTest::::testToString()",
      "298": "UserTest::::testToString()",
      "299": "UserTest::::testToString()",
      "300": "UserTest::::testToString()",
      "301": "UserTest::::testToString()",
      "302": "UserTest::::testToString()",
      "303": "UserTest::::testToString()",
      "304": "UserTest::::testToString()",
      "305": "UserTest::::testToString()",
      "306": "UserTest::::testToString()",
      "307": "UserTest::::testToString()",
      "308": "UserTest::::testToString()"
    },
    "tests": [
      {
        "test_lines": [
          18,
          32
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          63,
          64,
          70,
          77,
          78,
          91,
          92,
          105,
          106
        ],
        "label": "User::::getBio()"
      },
      {
        "test_lines": [
          41,
          55
        ],
        "covered_lines": [
          5,
          35,
          36,
          42,
          49,
          50,
          63,
          64,
          77,
          78,
          91,
          92,
          105,
          106
        ],
        "label": "User::::getFullName()"
      },
      {
        "test_lines": [
          64,
          78
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          63,
          64,
          77,
          78,
          91,
          92,
          98,
          105,
          106
        ],
        "label": "User::::getId()"
      },
      {
        "test_lines": [
          87,
          101
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          56,
          63,
          64,
          77,
          78,
          91,
          92,
          105,
          106
        ],
        "label": "User::::getProfilePictureUrl()"
      },
      {
        "test_lines": [
          110,
          124
        ],
        "covered_lines": [
          5,
          28,
          35,
          36,
          49,
          50,
          63,
          64,
          77,
          78,
          91,
          92,
          105,
          106
        ],
        "label": "User::::getUserName()"
      },
      {
        "test_lines": [
          133,
          147
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          63,
          64,
          77,
          78,
          84,
          91,
          92,
          105,
          106
        ],
        "label": "User::::getWebsiteUrl()"
      },
      {
        "test_lines": [
          156,
          170
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          63,
          64,
          77,
          78,
          91,
          92,
          105,
          106
        ],
        "label": "User::::setBio(java.lang.String)"
      },
      {
        "test_lines": [
          179,
          193
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          63,
          64,
          77,
          78,
          91,
          92,
          105,
          106
        ],
        "label": "User::::setFullName(java.lang.String)"
      },
      {
        "test_lines": [
          202,
          216
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          63,
          64,
          77,
          78,
          91,
          92,
          105,
          106
        ],
        "label": "User::::setId(java.lang.String)"
      },
      {
        "test_lines": [
          225,
          239
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          63,
          64,
          77,
          78,
          91,
          92,
          105,
          106
        ],
        "label": "User::::setProfilePictureUrl(java.lang.String)"
      },
      {
        "test_lines": [
          248,
          262
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          63,
          64,
          77,
          78,
          91,
          92,
          105,
          106
        ],
        "label": "User::::setUserName(java.lang.String)"
      },
      {
        "test_lines": [
          271,
          285
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          63,
          64,
          77,
          78,
          91,
          92,
          105,
          106
        ],
        "label": "User::::setWebsiteUrl(java.lang.String)"
      },
      {
        "test_lines": [
          294,
          308
        ],
        "covered_lines": [
          5,
          35,
          36,
          49,
          50,
          63,
          64,
          77,
          78,
          91,
          92,
          105,
          106,
          110
        ],
        "label": "User::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/GridPosition.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class GridPosition {\n",
      "\n",
      "\t@SerializedName(\"x\")\n",
      "\tprivate double x;\n",
      "\n",
      "\t@SerializedName(\"y\")\n",
      "\tprivate double y;\n",
      "\n",
      "\tpublic double getX() {\n",
      "\t\treturn x;\n",
      "\t}\n",
      "\n",
      "\tpublic void setX(double x) {\n",
      "\t\tthis.x = x;\n",
      "\t}\n",
      "\n",
      "\tpublic double getY() {\n",
      "\t\treturn y;\n",
      "\t}\n",
      "\n",
      "\tpublic void setY(double y) {\n",
      "\t\tthis.y = y;\n",
      "\t}\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>GridPositionTest</code> contains tests for the class\n",
      " * <code>{@link GridPosition}</code>.\n",
      " *\n",
      " * \n",
      " * @author Sachin Handiekar\n",
      " */\n",
      "public class GridPositionTest {\n",
      "\t/**\n",
      "\t * Run the double getX() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetX() throws Exception {\n",
      "\t\tGridPosition fixture = new GridPosition();\n",
      "\t\tfixture.setX(1.0);\n",
      "\t\tfixture.setY(1.0);\n",
      "\n",
      "\t\tdouble result = fixture.getX();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1.0, result, 0.1);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the double getY() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetY() throws Exception {\n",
      "\t\tGridPosition fixture = new GridPosition();\n",
      "\t\tfixture.setX(1.0);\n",
      "\t\tfixture.setY(1.0);\n",
      "\n",
      "\t\tdouble result = fixture.getY();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1.0, result, 0.1);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setX(double) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetX() throws Exception {\n",
      "\t\tGridPosition fixture = new GridPosition();\n",
      "\t\tfixture.setX(1.0);\n",
      "\t\tfixture.setY(1.0);\n",
      "\t\tdouble x = 1.0;\n",
      "\n",
      "\t\tfixture.setX(x);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setY(double) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetY() throws Exception {\n",
      "\t\tGridPosition fixture = new GridPosition();\n",
      "\t\tfixture.setX(1.0);\n",
      "\t\tfixture.setY(1.0);\n",
      "\t\tdouble y = 1.0;\n",
      "\n",
      "\t\tfixture.setY(y);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {
      "GridPosition::::getX()": [
        13,
        15
      ],
      "GridPosition::::setX(double)": [
        17,
        19
      ],
      "GridPosition::::getY()": [
        21,
        23
      ],
      "GridPosition::::setY(double)": [
        25,
        27
      ]
    },
    "test_method_lines_dic": {
      "GridPositionTest::::testGetX()": [
        21,
        31
      ],
      "GridPositionTest::::testGetY()": [
        40,
        50
      ],
      "GridPositionTest::::testSetX()": [
        59,
        69
      ],
      "GridPositionTest::::testSetY()": [
        78,
        88
      ]
    },
    "reverse_method_lines_dic": {
      "13": "GridPosition::::getX()",
      "14": "GridPosition::::getX()",
      "15": "GridPosition::::getX()",
      "17": "GridPosition::::setX(double)",
      "18": "GridPosition::::setX(double)",
      "19": "GridPosition::::setX(double)",
      "21": "GridPosition::::getY()",
      "22": "GridPosition::::getY()",
      "23": "GridPosition::::getY()",
      "25": "GridPosition::::setY(double)",
      "26": "GridPosition::::setY(double)",
      "27": "GridPosition::::setY(double)"
    },
    "test_reverse_method_lines_dic": {
      "21": "GridPositionTest::::testGetX()",
      "22": "GridPositionTest::::testGetX()",
      "23": "GridPositionTest::::testGetX()",
      "24": "GridPositionTest::::testGetX()",
      "25": "GridPositionTest::::testGetX()",
      "26": "GridPositionTest::::testGetX()",
      "27": "GridPositionTest::::testGetX()",
      "28": "GridPositionTest::::testGetX()",
      "29": "GridPositionTest::::testGetX()",
      "30": "GridPositionTest::::testGetX()",
      "31": "GridPositionTest::::testGetX()",
      "40": "GridPositionTest::::testGetY()",
      "41": "GridPositionTest::::testGetY()",
      "42": "GridPositionTest::::testGetY()",
      "43": "GridPositionTest::::testGetY()",
      "44": "GridPositionTest::::testGetY()",
      "45": "GridPositionTest::::testGetY()",
      "46": "GridPositionTest::::testGetY()",
      "47": "GridPositionTest::::testGetY()",
      "48": "GridPositionTest::::testGetY()",
      "49": "GridPositionTest::::testGetY()",
      "50": "GridPositionTest::::testGetY()",
      "59": "GridPositionTest::::testSetX()",
      "60": "GridPositionTest::::testSetX()",
      "61": "GridPositionTest::::testSetX()",
      "62": "GridPositionTest::::testSetX()",
      "63": "GridPositionTest::::testSetX()",
      "64": "GridPositionTest::::testSetX()",
      "65": "GridPositionTest::::testSetX()",
      "66": "GridPositionTest::::testSetX()",
      "67": "GridPositionTest::::testSetX()",
      "68": "GridPositionTest::::testSetX()",
      "69": "GridPositionTest::::testSetX()",
      "78": "GridPositionTest::::testSetY()",
      "79": "GridPositionTest::::testSetY()",
      "80": "GridPositionTest::::testSetY()",
      "81": "GridPositionTest::::testSetY()",
      "82": "GridPositionTest::::testSetY()",
      "83": "GridPositionTest::::testSetY()",
      "84": "GridPositionTest::::testSetY()",
      "85": "GridPositionTest::::testSetY()",
      "86": "GridPositionTest::::testSetY()",
      "87": "GridPositionTest::::testSetY()",
      "88": "GridPositionTest::::testSetY()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          31
        ],
        "covered_lines": [
          5,
          14,
          18,
          19,
          26,
          27
        ],
        "label": "GridPosition::::getX()"
      },
      {
        "test_lines": [
          40,
          50
        ],
        "covered_lines": [
          5,
          18,
          19,
          22,
          26,
          27
        ],
        "label": "GridPosition::::getY()"
      },
      {
        "test_lines": [
          59,
          69
        ],
        "covered_lines": [
          5,
          18,
          19,
          26,
          27
        ],
        "label": "GridPosition::::setX(double)"
      },
      {
        "test_lines": [
          78,
          88
        ],
        "covered_lines": [
          5,
          18,
          19,
          26,
          27
        ],
        "label": "GridPosition::::setY(double)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/ImageData.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "/**\n",
      " * A class to denote the ImageData.\n",
      " *\n",
      " * @author Sachin Handiekar\n",
      " * @version 1.0\n",
      " */\n",
      "public class ImageData {\n",
      "\t@SerializedName(\"height\")\n",
      "\tprivate int imageHeight;\n",
      "\n",
      "\t@SerializedName(\"url\")\n",
      "\tprivate String imageUrl;\n",
      "\n",
      "\t@SerializedName(\"width\")\n",
      "\tprivate int imageWidth;\n",
      "\n",
      "\t/**\n",
      "\t * @return the imageUrl\n",
      "\t */\n",
      "\tpublic String getImageUrl() {\n",
      "\t\treturn imageUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param imageUrl the imageUrl to set\n",
      "\t */\n",
      "\tpublic void setImageUrl(String imageUrl) {\n",
      "\t\tthis.imageUrl = imageUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the imageWidth\n",
      "\t */\n",
      "\tpublic int getImageWidth() {\n",
      "\t\treturn imageWidth;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param imageWidth the imageWidth to set\n",
      "\t */\n",
      "\tpublic void setImageWidth(int imageWidth) {\n",
      "\t\tthis.imageWidth = imageWidth;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the imageHeight\n",
      "\t */\n",
      "\tpublic int getImageHeight() {\n",
      "\t\treturn imageHeight;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param imageHeight the imageHeight to set\n",
      "\t */\n",
      "\tpublic void setImageHeight(int imageHeight) {\n",
      "\t\tthis.imageHeight = imageHeight;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"ImageData [imageHeight=%s, imageUrl=%s, imageWidth=%s]\",\n",
      "                imageHeight, imageUrl, imageWidth);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>ImageDataTest</code> contains tests for the class\n",
      " * <code>{@link ImageData}</code>.\n",
      " *\n",
      " * \n",
      " * @author sachin.handiekar\n",
      " */\n",
      "public class ImageDataTest {\n",
      "\t/**\n",
      "\t * Run the int getImageHeight() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetImageHeight_1() throws Exception {\n",
      "\t\tImageData fixture = new ImageData();\n",
      "\t\tfixture.setImageHeight(1);\n",
      "\t\tfixture.setImageUrl(\"\");\n",
      "\t\tfixture.setImageWidth(1);\n",
      "\n",
      "\t\tint result = fixture.getImageHeight();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getImageUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetImageUrl_1() throws Exception {\n",
      "\t\tImageData fixture = new ImageData();\n",
      "\t\tfixture.setImageHeight(1);\n",
      "\t\tfixture.setImageUrl(\"\");\n",
      "\t\tfixture.setImageWidth(1);\n",
      "\n",
      "\t\tString result = fixture.getImageUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the int getImageWidth() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetImageWidth_1() throws Exception {\n",
      "\t\tImageData fixture = new ImageData();\n",
      "\t\tfixture.setImageHeight(1);\n",
      "\t\tfixture.setImageUrl(\"\");\n",
      "\t\tfixture.setImageWidth(1);\n",
      "\n",
      "\t\tint result = fixture.getImageWidth();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setImageHeight(int) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetImageHeight_1() throws Exception {\n",
      "\t\tImageData fixture = new ImageData();\n",
      "\t\tfixture.setImageHeight(1);\n",
      "\t\tfixture.setImageUrl(\"\");\n",
      "\t\tfixture.setImageWidth(1);\n",
      "\t\tint imageHeight = 1;\n",
      "\n",
      "\t\tfixture.setImageHeight(imageHeight);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setImageUrl(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetImageUrl_1() throws Exception {\n",
      "\t\tImageData fixture = new ImageData();\n",
      "\t\tfixture.setImageHeight(1);\n",
      "\t\tfixture.setImageUrl(\"\");\n",
      "\t\tfixture.setImageWidth(1);\n",
      "\t\tString imageUrl = \"\";\n",
      "\n",
      "\t\tfixture.setImageUrl(imageUrl);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setImageWidth(int) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetImageWidth_1() throws Exception {\n",
      "\t\tImageData fixture = new ImageData();\n",
      "\t\tfixture.setImageHeight(1);\n",
      "\t\tfixture.setImageUrl(\"\");\n",
      "\t\tfixture.setImageWidth(1);\n",
      "\t\tint imageWidth = 1;\n",
      "\n",
      "\t\tfixture.setImageWidth(imageWidth);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tImageData fixture = new ImageData();\n",
      "\t\tfixture.setImageHeight(1);\n",
      "\t\tfixture.setImageUrl(\"\");\n",
      "\t\tfixture.setImageWidth(1);\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"ImageData [imageHeight=1, imageUrl=, imageWidth=1]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "ImageData::::getImageUrl()": [
        24,
        26
      ],
      "ImageData::::setImageUrl(java.lang.String)": [
        31,
        33
      ],
      "ImageData::::getImageWidth()": [
        38,
        40
      ],
      "ImageData::::setImageWidth(int)": [
        45,
        47
      ],
      "ImageData::::getImageHeight()": [
        52,
        54
      ],
      "ImageData::::setImageHeight(int)": [
        59,
        61
      ],
      "ImageData::::toString()": [
        63,
        67
      ]
    },
    "test_method_lines_dic": {
      "ImageDataTest::::testGetImageHeight_1()": [
        21,
        32
      ],
      "ImageDataTest::::testGetImageUrl_1()": [
        41,
        52
      ],
      "ImageDataTest::::testGetImageWidth_1()": [
        61,
        72
      ],
      "ImageDataTest::::testSetImageHeight_1()": [
        81,
        92
      ],
      "ImageDataTest::::testSetImageUrl_1()": [
        101,
        112
      ],
      "ImageDataTest::::testSetImageWidth_1()": [
        121,
        132
      ],
      "ImageDataTest::::testToString_1()": [
        141,
        152
      ]
    },
    "reverse_method_lines_dic": {
      "24": "ImageData::::getImageUrl()",
      "25": "ImageData::::getImageUrl()",
      "26": "ImageData::::getImageUrl()",
      "31": "ImageData::::setImageUrl(java.lang.String)",
      "32": "ImageData::::setImageUrl(java.lang.String)",
      "33": "ImageData::::setImageUrl(java.lang.String)",
      "38": "ImageData::::getImageWidth()",
      "39": "ImageData::::getImageWidth()",
      "40": "ImageData::::getImageWidth()",
      "45": "ImageData::::setImageWidth(int)",
      "46": "ImageData::::setImageWidth(int)",
      "47": "ImageData::::setImageWidth(int)",
      "52": "ImageData::::getImageHeight()",
      "53": "ImageData::::getImageHeight()",
      "54": "ImageData::::getImageHeight()",
      "59": "ImageData::::setImageHeight(int)",
      "60": "ImageData::::setImageHeight(int)",
      "61": "ImageData::::setImageHeight(int)",
      "63": "ImageData::::toString()",
      "64": "ImageData::::toString()",
      "65": "ImageData::::toString()",
      "66": "ImageData::::toString()",
      "67": "ImageData::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "21": "ImageDataTest::::testGetImageHeight_1()",
      "22": "ImageDataTest::::testGetImageHeight_1()",
      "23": "ImageDataTest::::testGetImageHeight_1()",
      "24": "ImageDataTest::::testGetImageHeight_1()",
      "25": "ImageDataTest::::testGetImageHeight_1()",
      "26": "ImageDataTest::::testGetImageHeight_1()",
      "27": "ImageDataTest::::testGetImageHeight_1()",
      "28": "ImageDataTest::::testGetImageHeight_1()",
      "29": "ImageDataTest::::testGetImageHeight_1()",
      "30": "ImageDataTest::::testGetImageHeight_1()",
      "31": "ImageDataTest::::testGetImageHeight_1()",
      "32": "ImageDataTest::::testGetImageHeight_1()",
      "41": "ImageDataTest::::testGetImageUrl_1()",
      "42": "ImageDataTest::::testGetImageUrl_1()",
      "43": "ImageDataTest::::testGetImageUrl_1()",
      "44": "ImageDataTest::::testGetImageUrl_1()",
      "45": "ImageDataTest::::testGetImageUrl_1()",
      "46": "ImageDataTest::::testGetImageUrl_1()",
      "47": "ImageDataTest::::testGetImageUrl_1()",
      "48": "ImageDataTest::::testGetImageUrl_1()",
      "49": "ImageDataTest::::testGetImageUrl_1()",
      "50": "ImageDataTest::::testGetImageUrl_1()",
      "51": "ImageDataTest::::testGetImageUrl_1()",
      "52": "ImageDataTest::::testGetImageUrl_1()",
      "61": "ImageDataTest::::testGetImageWidth_1()",
      "62": "ImageDataTest::::testGetImageWidth_1()",
      "63": "ImageDataTest::::testGetImageWidth_1()",
      "64": "ImageDataTest::::testGetImageWidth_1()",
      "65": "ImageDataTest::::testGetImageWidth_1()",
      "66": "ImageDataTest::::testGetImageWidth_1()",
      "67": "ImageDataTest::::testGetImageWidth_1()",
      "68": "ImageDataTest::::testGetImageWidth_1()",
      "69": "ImageDataTest::::testGetImageWidth_1()",
      "70": "ImageDataTest::::testGetImageWidth_1()",
      "71": "ImageDataTest::::testGetImageWidth_1()",
      "72": "ImageDataTest::::testGetImageWidth_1()",
      "81": "ImageDataTest::::testSetImageHeight_1()",
      "82": "ImageDataTest::::testSetImageHeight_1()",
      "83": "ImageDataTest::::testSetImageHeight_1()",
      "84": "ImageDataTest::::testSetImageHeight_1()",
      "85": "ImageDataTest::::testSetImageHeight_1()",
      "86": "ImageDataTest::::testSetImageHeight_1()",
      "87": "ImageDataTest::::testSetImageHeight_1()",
      "88": "ImageDataTest::::testSetImageHeight_1()",
      "89": "ImageDataTest::::testSetImageHeight_1()",
      "90": "ImageDataTest::::testSetImageHeight_1()",
      "91": "ImageDataTest::::testSetImageHeight_1()",
      "92": "ImageDataTest::::testSetImageHeight_1()",
      "101": "ImageDataTest::::testSetImageUrl_1()",
      "102": "ImageDataTest::::testSetImageUrl_1()",
      "103": "ImageDataTest::::testSetImageUrl_1()",
      "104": "ImageDataTest::::testSetImageUrl_1()",
      "105": "ImageDataTest::::testSetImageUrl_1()",
      "106": "ImageDataTest::::testSetImageUrl_1()",
      "107": "ImageDataTest::::testSetImageUrl_1()",
      "108": "ImageDataTest::::testSetImageUrl_1()",
      "109": "ImageDataTest::::testSetImageUrl_1()",
      "110": "ImageDataTest::::testSetImageUrl_1()",
      "111": "ImageDataTest::::testSetImageUrl_1()",
      "112": "ImageDataTest::::testSetImageUrl_1()",
      "121": "ImageDataTest::::testSetImageWidth_1()",
      "122": "ImageDataTest::::testSetImageWidth_1()",
      "123": "ImageDataTest::::testSetImageWidth_1()",
      "124": "ImageDataTest::::testSetImageWidth_1()",
      "125": "ImageDataTest::::testSetImageWidth_1()",
      "126": "ImageDataTest::::testSetImageWidth_1()",
      "127": "ImageDataTest::::testSetImageWidth_1()",
      "128": "ImageDataTest::::testSetImageWidth_1()",
      "129": "ImageDataTest::::testSetImageWidth_1()",
      "130": "ImageDataTest::::testSetImageWidth_1()",
      "131": "ImageDataTest::::testSetImageWidth_1()",
      "132": "ImageDataTest::::testSetImageWidth_1()",
      "141": "ImageDataTest::::testToString_1()",
      "142": "ImageDataTest::::testToString_1()",
      "143": "ImageDataTest::::testToString_1()",
      "144": "ImageDataTest::::testToString_1()",
      "145": "ImageDataTest::::testToString_1()",
      "146": "ImageDataTest::::testToString_1()",
      "147": "ImageDataTest::::testToString_1()",
      "148": "ImageDataTest::::testToString_1()",
      "149": "ImageDataTest::::testToString_1()",
      "150": "ImageDataTest::::testToString_1()",
      "151": "ImageDataTest::::testToString_1()",
      "152": "ImageDataTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          32
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          53,
          60,
          61
        ],
        "label": "ImageData::::getImageHeight()"
      },
      {
        "test_lines": [
          41,
          52
        ],
        "covered_lines": [
          11,
          25,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "ImageData::::getImageUrl()"
      },
      {
        "test_lines": [
          61,
          72
        ],
        "covered_lines": [
          11,
          32,
          33,
          39,
          46,
          47,
          60,
          61
        ],
        "label": "ImageData::::getImageWidth()"
      },
      {
        "test_lines": [
          81,
          92
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "ImageData::::setImageHeight(int)"
      },
      {
        "test_lines": [
          101,
          112
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "ImageData::::setImageUrl(java.lang.String)"
      },
      {
        "test_lines": [
          121,
          132
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "ImageData::::setImageWidth(int)"
      },
      {
        "test_lines": [
          141,
          152
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61,
          65,
          66
        ],
        "label": "ImageData::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/Meta.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "/**\n",
      " * The meta key is used to communicate extra information about the response to\n",
      " * the developer. If all goes well, you'll only ever see a code key with value\n",
      " * 200.\n",
      " *\n",
      " * @author Sachin Handiekar\n",
      " * @version 1.0\n",
      " */\n",
      "public class Meta {\n",
      "\t@SerializedName(\"code\")\n",
      "\tprivate int code;\n",
      "\n",
      "\t@SerializedName(\"error_message\")\n",
      "\tprivate String errorMessage;\n",
      "\n",
      "\t@SerializedName(\"error_type\")\n",
      "\tprivate String errorType;\n",
      "\n",
      "\t/**\n",
      "\t * @return the code\n",
      "\t */\n",
      "\tpublic int getCode() {\n",
      "\t\treturn code;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param code the code to set\n",
      "\t */\n",
      "\tpublic void setCode(int code) {\n",
      "\t\tthis.code = code;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the errorType\n",
      "\t */\n",
      "\tpublic String getErrorType() {\n",
      "\t\treturn errorType;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param errorType the errorType to set\n",
      "\t */\n",
      "\tpublic void setErrorType(String errorType) {\n",
      "\t\tthis.errorType = errorType;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the errorMessage\n",
      "\t */\n",
      "\tpublic String getErrorMessage() {\n",
      "\t\treturn errorMessage;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param errorMessage the errorMessage to set\n",
      "\t */\n",
      "\tpublic void setErrorMessage(String errorMessage) {\n",
      "\t\tthis.errorMessage = errorMessage;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"Meta [code=%s, errorMessage=%s, errorType=%s]\", code, errorMessage, errorType);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>MetaTest</code> contains tests for the class\n",
      " * <code>{@link Meta}</code>.\n",
      " *\n",
      " */\n",
      "public class MetaTest {\n",
      "\t/**\n",
      "\t * Run the int getCode() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCode() throws Exception {\n",
      "\t\tMeta fixture = new Meta();\n",
      "\t\tfixture.setErrorType(\"\");\n",
      "\t\tfixture.setCode(1);\n",
      "\t\tfixture.setErrorMessage(\"\");\n",
      "\n",
      "\t\tint result = fixture.getCode();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getErrorMessage() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetErrorMessage() throws Exception {\n",
      "\t\tMeta fixture = new Meta();\n",
      "\t\tfixture.setErrorType(\"\");\n",
      "\t\tfixture.setCode(1);\n",
      "\t\tfixture.setErrorMessage(\"\");\n",
      "\n",
      "\t\tString result = fixture.getErrorMessage();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getErrorType() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetErrorType() throws Exception {\n",
      "\t\tMeta fixture = new Meta();\n",
      "\t\tfixture.setErrorType(\"\");\n",
      "\t\tfixture.setCode(1);\n",
      "\t\tfixture.setErrorMessage(\"\");\n",
      "\n",
      "\t\tString result = fixture.getErrorType();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCode(int) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCode() throws Exception {\n",
      "\t\tMeta fixture = new Meta();\n",
      "\t\tfixture.setErrorType(\"\");\n",
      "\t\tfixture.setCode(1);\n",
      "\t\tfixture.setErrorMessage(\"\");\n",
      "\t\tint code = 1;\n",
      "\n",
      "\t\tfixture.setCode(code);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setErrorMessage(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetErrorMessage() throws Exception {\n",
      "\t\tMeta fixture = new Meta();\n",
      "\t\tfixture.setErrorType(\"\");\n",
      "\t\tfixture.setCode(1);\n",
      "\t\tfixture.setErrorMessage(\"\");\n",
      "\t\tString errorMessage = \"\";\n",
      "\n",
      "\t\tfixture.setErrorMessage(errorMessage);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setErrorType(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetErrorType() throws Exception {\n",
      "\t\tMeta fixture = new Meta();\n",
      "\t\tfixture.setErrorType(\"\");\n",
      "\t\tfixture.setCode(1);\n",
      "\t\tfixture.setErrorMessage(\"\");\n",
      "\t\tString errorType = \"\";\n",
      "\n",
      "\t\tfixture.setErrorType(errorType);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tMeta fixture = new Meta();\n",
      "\t\tfixture.setErrorType(\"\");\n",
      "\t\tfixture.setCode(1);\n",
      "\t\tfixture.setErrorMessage(\"\");\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"Meta [code=1, errorMessage=, errorType=]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "Meta::::getCode()": [
        26,
        28
      ],
      "Meta::::setCode(int)": [
        33,
        35
      ],
      "Meta::::getErrorType()": [
        40,
        42
      ],
      "Meta::::setErrorType(java.lang.String)": [
        47,
        49
      ],
      "Meta::::getErrorMessage()": [
        54,
        56
      ],
      "Meta::::setErrorMessage(java.lang.String)": [
        61,
        63
      ],
      "Meta::::toString()": [
        65,
        68
      ]
    },
    "test_method_lines_dic": {
      "MetaTest::::testGetCode()": [
        20,
        31
      ],
      "MetaTest::::testGetErrorMessage()": [
        40,
        51
      ],
      "MetaTest::::testGetErrorType()": [
        60,
        71
      ],
      "MetaTest::::testSetCode()": [
        80,
        91
      ],
      "MetaTest::::testSetErrorMessage()": [
        100,
        111
      ],
      "MetaTest::::testSetErrorType()": [
        118,
        129
      ],
      "MetaTest::::testToString()": [
        136,
        147
      ]
    },
    "reverse_method_lines_dic": {
      "26": "Meta::::getCode()",
      "27": "Meta::::getCode()",
      "28": "Meta::::getCode()",
      "33": "Meta::::setCode(int)",
      "34": "Meta::::setCode(int)",
      "35": "Meta::::setCode(int)",
      "40": "Meta::::getErrorType()",
      "41": "Meta::::getErrorType()",
      "42": "Meta::::getErrorType()",
      "47": "Meta::::setErrorType(java.lang.String)",
      "48": "Meta::::setErrorType(java.lang.String)",
      "49": "Meta::::setErrorType(java.lang.String)",
      "54": "Meta::::getErrorMessage()",
      "55": "Meta::::getErrorMessage()",
      "56": "Meta::::getErrorMessage()",
      "61": "Meta::::setErrorMessage(java.lang.String)",
      "62": "Meta::::setErrorMessage(java.lang.String)",
      "63": "Meta::::setErrorMessage(java.lang.String)",
      "65": "Meta::::toString()",
      "66": "Meta::::toString()",
      "67": "Meta::::toString()",
      "68": "Meta::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "20": "MetaTest::::testGetCode()",
      "21": "MetaTest::::testGetCode()",
      "22": "MetaTest::::testGetCode()",
      "23": "MetaTest::::testGetCode()",
      "24": "MetaTest::::testGetCode()",
      "25": "MetaTest::::testGetCode()",
      "26": "MetaTest::::testGetCode()",
      "27": "MetaTest::::testGetCode()",
      "28": "MetaTest::::testGetCode()",
      "29": "MetaTest::::testGetCode()",
      "30": "MetaTest::::testGetCode()",
      "31": "MetaTest::::testGetCode()",
      "40": "MetaTest::::testGetErrorMessage()",
      "41": "MetaTest::::testGetErrorMessage()",
      "42": "MetaTest::::testGetErrorMessage()",
      "43": "MetaTest::::testGetErrorMessage()",
      "44": "MetaTest::::testGetErrorMessage()",
      "45": "MetaTest::::testGetErrorMessage()",
      "46": "MetaTest::::testGetErrorMessage()",
      "47": "MetaTest::::testGetErrorMessage()",
      "48": "MetaTest::::testGetErrorMessage()",
      "49": "MetaTest::::testGetErrorMessage()",
      "50": "MetaTest::::testGetErrorMessage()",
      "51": "MetaTest::::testGetErrorMessage()",
      "60": "MetaTest::::testGetErrorType()",
      "61": "MetaTest::::testGetErrorType()",
      "62": "MetaTest::::testGetErrorType()",
      "63": "MetaTest::::testGetErrorType()",
      "64": "MetaTest::::testGetErrorType()",
      "65": "MetaTest::::testGetErrorType()",
      "66": "MetaTest::::testGetErrorType()",
      "67": "MetaTest::::testGetErrorType()",
      "68": "MetaTest::::testGetErrorType()",
      "69": "MetaTest::::testGetErrorType()",
      "70": "MetaTest::::testGetErrorType()",
      "71": "MetaTest::::testGetErrorType()",
      "80": "MetaTest::::testSetCode()",
      "81": "MetaTest::::testSetCode()",
      "82": "MetaTest::::testSetCode()",
      "83": "MetaTest::::testSetCode()",
      "84": "MetaTest::::testSetCode()",
      "85": "MetaTest::::testSetCode()",
      "86": "MetaTest::::testSetCode()",
      "87": "MetaTest::::testSetCode()",
      "88": "MetaTest::::testSetCode()",
      "89": "MetaTest::::testSetCode()",
      "90": "MetaTest::::testSetCode()",
      "91": "MetaTest::::testSetCode()",
      "100": "MetaTest::::testSetErrorMessage()",
      "101": "MetaTest::::testSetErrorMessage()",
      "102": "MetaTest::::testSetErrorMessage()",
      "103": "MetaTest::::testSetErrorMessage()",
      "104": "MetaTest::::testSetErrorMessage()",
      "105": "MetaTest::::testSetErrorMessage()",
      "106": "MetaTest::::testSetErrorMessage()",
      "107": "MetaTest::::testSetErrorMessage()",
      "108": "MetaTest::::testSetErrorMessage()",
      "109": "MetaTest::::testSetErrorMessage()",
      "110": "MetaTest::::testSetErrorMessage()",
      "111": "MetaTest::::testSetErrorMessage()",
      "118": "MetaTest::::testSetErrorType()",
      "119": "MetaTest::::testSetErrorType()",
      "120": "MetaTest::::testSetErrorType()",
      "121": "MetaTest::::testSetErrorType()",
      "122": "MetaTest::::testSetErrorType()",
      "123": "MetaTest::::testSetErrorType()",
      "124": "MetaTest::::testSetErrorType()",
      "125": "MetaTest::::testSetErrorType()",
      "126": "MetaTest::::testSetErrorType()",
      "127": "MetaTest::::testSetErrorType()",
      "128": "MetaTest::::testSetErrorType()",
      "129": "MetaTest::::testSetErrorType()",
      "136": "MetaTest::::testToString()",
      "137": "MetaTest::::testToString()",
      "138": "MetaTest::::testToString()",
      "139": "MetaTest::::testToString()",
      "140": "MetaTest::::testToString()",
      "141": "MetaTest::::testToString()",
      "142": "MetaTest::::testToString()",
      "143": "MetaTest::::testToString()",
      "144": "MetaTest::::testToString()",
      "145": "MetaTest::::testToString()",
      "146": "MetaTest::::testToString()",
      "147": "MetaTest::::testToString()"
    },
    "tests": [
      {
        "test_lines": [
          20,
          31
        ],
        "covered_lines": [
          13,
          27,
          34,
          35,
          48,
          49,
          62,
          63
        ],
        "label": "Meta::::getCode()"
      },
      {
        "test_lines": [
          40,
          51
        ],
        "covered_lines": [
          13,
          34,
          35,
          48,
          49,
          55,
          62,
          63
        ],
        "label": "Meta::::getErrorMessage()"
      },
      {
        "test_lines": [
          60,
          71
        ],
        "covered_lines": [
          13,
          34,
          35,
          41,
          48,
          49,
          62,
          63
        ],
        "label": "Meta::::getErrorType()"
      },
      {
        "test_lines": [
          80,
          91
        ],
        "covered_lines": [
          13,
          34,
          35,
          48,
          49,
          62,
          63
        ],
        "label": "Meta::::setCode(int)"
      },
      {
        "test_lines": [
          100,
          111
        ],
        "covered_lines": [
          13,
          34,
          35,
          48,
          49,
          62,
          63
        ],
        "label": "Meta::::setErrorMessage(java.lang.String)"
      },
      {
        "test_lines": [
          118,
          129
        ],
        "covered_lines": [
          13,
          34,
          35,
          48,
          49,
          62,
          63
        ],
        "label": "Meta::::setErrorType(java.lang.String)"
      },
      {
        "test_lines": [
          136,
          147
        ],
        "covered_lines": [
          13,
          34,
          35,
          48,
          49,
          62,
          63,
          67
        ],
        "label": "Meta::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/Likes.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "public class Likes {\n",
      "\t@SerializedName(\"count\")\n",
      "\tprivate int count;\n",
      "\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate List<User> likesUserList;\n",
      "\n",
      "\t/**\n",
      "\t * @return the count\n",
      "\t */\n",
      "\tpublic int getCount() {\n",
      "\t\treturn count;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param count the count to set\n",
      "\t */\n",
      "\tpublic void setCount(int count) {\n",
      "\t\tthis.count = count;\n",
      "\t}\n",
      "\n",
      "\tpublic List<User> getLikesUserList() {\n",
      "\t\treturn likesUserList;\n",
      "\t}\n",
      "\n",
      "\tpublic void setLikesUserList(List<User> likesUserList) {\n",
      "\t\tthis.likesUserList = likesUserList;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"Likes [count=%s, likesUserList=%s]\", count, likesUserList);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>LikesTest</code> contains tests for the class\n",
      " * <code>{@link Likes}</code>.\n",
      " */\n",
      "public class LikesTest {\n",
      "\t/**\n",
      "\t * Run the int getCount() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCount() throws Exception {\n",
      "\t\tLikes fixture = new Likes();\n",
      "\t\tfixture.setCount(1);\n",
      "\t\tfixture.setLikesUserList(new ArrayList<User>());\n",
      "\n",
      "\t\tint result = fixture.getCount();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the List<User> getLikesUserList() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t *\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLikesUserList() throws Exception {\n",
      "\t\tLikes fixture = new Likes();\n",
      "\t\tfixture.setCount(1);\n",
      "\t\tfixture.setLikesUserList(new ArrayList<User>());\n",
      "\n",
      "\t\tList<User> result = fixture.getLikesUserList();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCount(int) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t *\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCount() throws Exception {\n",
      "\t\tLikes fixture = new Likes();\n",
      "\t\tfixture.setCount(1);\n",
      "\t\tfixture.setLikesUserList(new ArrayList<User>());\n",
      "\t\tint count = 1;\n",
      "\n",
      "\t\tfixture.setCount(count);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLikesUserList(List<User>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t *\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLikesUserList() throws Exception {\n",
      "\t\tLikes fixture = new Likes();\n",
      "\t\tfixture.setCount(1);\n",
      "\t\tfixture.setLikesUserList(new ArrayList<User>());\n",
      "\t\tList<User> likesUserList = new ArrayList<User>();\n",
      "\n",
      "\t\tfixture.setLikesUserList(likesUserList);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t *\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tLikes fixture = new Likes();\n",
      "\t\tfixture.setCount(1);\n",
      "\t\tfixture.setLikesUserList(new ArrayList<User>());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"Likes [count=1, likesUserList=[]]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "Likes::::getCount()": [
        17,
        19
      ],
      "Likes::::setCount(int)": [
        24,
        26
      ],
      "Likes::::getLikesUserList()": [
        28,
        30
      ],
      "Likes::::setLikesUserList(java.util.List<org.jinstagram.entity.common.User>)": [
        32,
        34
      ],
      "Likes::::toString()": [
        36,
        39
      ]
    },
    "test_method_lines_dic": {
      "LikesTest::::testGetCount()": [
        22,
        32
      ],
      "LikesTest::::testGetLikesUserList()": [
        41,
        52
      ],
      "LikesTest::::testSetCount()": [
        61,
        71
      ],
      "LikesTest::::testSetLikesUserList()": [
        80,
        90
      ],
      "LikesTest::::testToString()": [
        99,
        109
      ]
    },
    "reverse_method_lines_dic": {
      "17": "Likes::::getCount()",
      "18": "Likes::::getCount()",
      "19": "Likes::::getCount()",
      "24": "Likes::::setCount(int)",
      "25": "Likes::::setCount(int)",
      "26": "Likes::::setCount(int)",
      "28": "Likes::::getLikesUserList()",
      "29": "Likes::::getLikesUserList()",
      "30": "Likes::::getLikesUserList()",
      "32": "Likes::::setLikesUserList(java.util.List<org.jinstagram.entity.common.User>)",
      "33": "Likes::::setLikesUserList(java.util.List<org.jinstagram.entity.common.User>)",
      "34": "Likes::::setLikesUserList(java.util.List<org.jinstagram.entity.common.User>)",
      "36": "Likes::::toString()",
      "37": "Likes::::toString()",
      "38": "Likes::::toString()",
      "39": "Likes::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "22": "LikesTest::::testGetCount()",
      "23": "LikesTest::::testGetCount()",
      "24": "LikesTest::::testGetCount()",
      "25": "LikesTest::::testGetCount()",
      "26": "LikesTest::::testGetCount()",
      "27": "LikesTest::::testGetCount()",
      "28": "LikesTest::::testGetCount()",
      "29": "LikesTest::::testGetCount()",
      "30": "LikesTest::::testGetCount()",
      "31": "LikesTest::::testGetCount()",
      "32": "LikesTest::::testGetCount()",
      "41": "LikesTest::::testGetLikesUserList()",
      "42": "LikesTest::::testGetLikesUserList()",
      "43": "LikesTest::::testGetLikesUserList()",
      "44": "LikesTest::::testGetLikesUserList()",
      "45": "LikesTest::::testGetLikesUserList()",
      "46": "LikesTest::::testGetLikesUserList()",
      "47": "LikesTest::::testGetLikesUserList()",
      "48": "LikesTest::::testGetLikesUserList()",
      "49": "LikesTest::::testGetLikesUserList()",
      "50": "LikesTest::::testGetLikesUserList()",
      "51": "LikesTest::::testGetLikesUserList()",
      "52": "LikesTest::::testGetLikesUserList()",
      "61": "LikesTest::::testSetCount()",
      "62": "LikesTest::::testSetCount()",
      "63": "LikesTest::::testSetCount()",
      "64": "LikesTest::::testSetCount()",
      "65": "LikesTest::::testSetCount()",
      "66": "LikesTest::::testSetCount()",
      "67": "LikesTest::::testSetCount()",
      "68": "LikesTest::::testSetCount()",
      "69": "LikesTest::::testSetCount()",
      "70": "LikesTest::::testSetCount()",
      "71": "LikesTest::::testSetCount()",
      "80": "LikesTest::::testSetLikesUserList()",
      "81": "LikesTest::::testSetLikesUserList()",
      "82": "LikesTest::::testSetLikesUserList()",
      "83": "LikesTest::::testSetLikesUserList()",
      "84": "LikesTest::::testSetLikesUserList()",
      "85": "LikesTest::::testSetLikesUserList()",
      "86": "LikesTest::::testSetLikesUserList()",
      "87": "LikesTest::::testSetLikesUserList()",
      "88": "LikesTest::::testSetLikesUserList()",
      "89": "LikesTest::::testSetLikesUserList()",
      "90": "LikesTest::::testSetLikesUserList()",
      "99": "LikesTest::::testToString()",
      "100": "LikesTest::::testToString()",
      "101": "LikesTest::::testToString()",
      "102": "LikesTest::::testToString()",
      "103": "LikesTest::::testToString()",
      "104": "LikesTest::::testToString()",
      "105": "LikesTest::::testToString()",
      "106": "LikesTest::::testToString()",
      "107": "LikesTest::::testToString()",
      "108": "LikesTest::::testToString()",
      "109": "LikesTest::::testToString()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          32
        ],
        "covered_lines": [
          7,
          18,
          25,
          26,
          33,
          34
        ],
        "label": "Likes::::getCount()"
      },
      {
        "test_lines": [
          41,
          52
        ],
        "covered_lines": [
          7,
          25,
          26,
          29,
          33,
          34
        ],
        "label": "Likes::::getLikesUserList()"
      },
      {
        "test_lines": [
          61,
          71
        ],
        "covered_lines": [
          7,
          25,
          26,
          33,
          34
        ],
        "label": "Likes::::setCount(int)"
      },
      {
        "test_lines": [
          80,
          90
        ],
        "covered_lines": [
          7,
          25,
          26,
          33,
          34
        ],
        "label": "Likes::::setLikesUserList(java.util.List<org.jinstagram.entity.common.User>)"
      },
      {
        "test_lines": [
          99,
          109
        ],
        "covered_lines": [
          7,
          25,
          26,
          33,
          34,
          38
        ],
        "label": "Likes::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/common/UsersInPhoto.java": {
    "class_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "/**\n",
      " * A class to denote users_in_photo json data.\n",
      " * \n",
      " e.x. \n",
      " \n",
      " \"users_in_photo\": [{\n",
      "            \"user\": {\n",
      "                \"username\": \"kevin\",\n",
      "                \"full_name\": \"Kevin S\",\n",
      "                \"id\": \"3\",\n",
      "                \"profile_picture\": \"...\"\n",
      "            },\n",
      "            \"position\": {\n",
      "                \"x\": 0.315,\n",
      "                \"y\": 0.9111\n",
      "            }\n",
      "        }],\n",
      "        \n",
      "        \n",
      " * @author Sachin Handiekar\n",
      " * @since 1.1.10\n",
      " */\n",
      "public class UsersInPhoto {\n",
      "\n",
      "\t@SerializedName(\"user\")\n",
      "\tprivate User user;\n",
      "\n",
      "\t@SerializedName(\"position\")\n",
      "\tprivate GridPosition position;\n",
      "\n",
      "\tpublic User getUser() {\n",
      "\t\treturn user;\n",
      "\t}\n",
      "\n",
      "\tpublic void setUser(User user) {\n",
      "\t\tthis.user = user;\n",
      "\t}\n",
      "\n",
      "\tpublic GridPosition getPosition() {\n",
      "\t\treturn position;\n",
      "\t}\n",
      "\n",
      "\tpublic void setPosition(GridPosition position) {\n",
      "\t\tthis.position = position;\n",
      "\t}\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.common;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>UsersInPhotoTest</code> contains tests for the class\n",
      " * <code>{@link UsersInPhoto}</code>.\n",
      " *\n",
      " */\n",
      "public class UsersInPhotoTest {\n",
      "\t/**\n",
      "\t * Run the GridPosition getPosition() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetPosition_1() throws Exception {\n",
      "\t\tUsersInPhoto fixture = new UsersInPhoto();\n",
      "\t\tfixture.setPosition(new GridPosition());\n",
      "\t\tfixture.setUser(new User());\n",
      "\n",
      "\t\tGridPosition result = fixture.getPosition();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0.0, result.getX(), 1.0);\n",
      "\t\tassertEquals(0.0, result.getY(), 1.0);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the User getUser() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUser_1() throws Exception {\n",
      "\t\tUsersInPhoto fixture = new UsersInPhoto();\n",
      "\t\tfixture.setPosition(new GridPosition());\n",
      "\t\tfixture.setUser(new User());\n",
      "\n",
      "\t\tUser result = fixture.getUser();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"User [bio=null, fullName=null, id=null, profilePictureUrl=null, userName=null, websiteUrl=null]\",\n",
      "\t\t\t\tresult.toString());\n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t\tassertEquals(null, result.getFullName());\n",
      "\t\tassertEquals(null, result.getProfilePictureUrl());\n",
      "\t\tassertEquals(null, result.getUserName());\n",
      "\t\tassertEquals(null, result.getBio());\n",
      "\t\tassertEquals(null, result.getWebsiteUrl());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setPosition(GridPosition) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetPosition_1() throws Exception {\n",
      "\t\tUsersInPhoto fixture = new UsersInPhoto();\n",
      "\t\tfixture.setPosition(new GridPosition());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tGridPosition position = new GridPosition();\n",
      "\n",
      "\t\tfixture.setPosition(position);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUser(User) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUser_1() throws Exception {\n",
      "\t\tUsersInPhoto fixture = new UsersInPhoto();\n",
      "\t\tfixture.setPosition(new GridPosition());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tUser user = new User();\n",
      "\n",
      "\t\tfixture.setUser(user);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "UsersInPhoto::::getUser()": [
        35,
        37
      ],
      "UsersInPhoto::::setUser(org.jinstagram.entity.common.User)": [
        39,
        41
      ],
      "UsersInPhoto::::getPosition()": [
        43,
        45
      ],
      "UsersInPhoto::::setPosition(org.jinstagram.entity.common.GridPosition)": [
        47,
        49
      ]
    },
    "test_method_lines_dic": {
      "UsersInPhotoTest::::testGetPosition_1()": [
        18,
        30
      ],
      "UsersInPhotoTest::::testGetUser_1()": [
        38,
        56
      ],
      "UsersInPhotoTest::::testSetPosition_1()": [
        64,
        74
      ],
      "UsersInPhotoTest::::testSetUser_1()": [
        82,
        92
      ]
    },
    "reverse_method_lines_dic": {
      "35": "UsersInPhoto::::getUser()",
      "36": "UsersInPhoto::::getUser()",
      "37": "UsersInPhoto::::getUser()",
      "39": "UsersInPhoto::::setUser(org.jinstagram.entity.common.User)",
      "40": "UsersInPhoto::::setUser(org.jinstagram.entity.common.User)",
      "41": "UsersInPhoto::::setUser(org.jinstagram.entity.common.User)",
      "43": "UsersInPhoto::::getPosition()",
      "44": "UsersInPhoto::::getPosition()",
      "45": "UsersInPhoto::::getPosition()",
      "47": "UsersInPhoto::::setPosition(org.jinstagram.entity.common.GridPosition)",
      "48": "UsersInPhoto::::setPosition(org.jinstagram.entity.common.GridPosition)",
      "49": "UsersInPhoto::::setPosition(org.jinstagram.entity.common.GridPosition)"
    },
    "test_reverse_method_lines_dic": {
      "18": "UsersInPhotoTest::::testGetPosition_1()",
      "19": "UsersInPhotoTest::::testGetPosition_1()",
      "20": "UsersInPhotoTest::::testGetPosition_1()",
      "21": "UsersInPhotoTest::::testGetPosition_1()",
      "22": "UsersInPhotoTest::::testGetPosition_1()",
      "23": "UsersInPhotoTest::::testGetPosition_1()",
      "24": "UsersInPhotoTest::::testGetPosition_1()",
      "25": "UsersInPhotoTest::::testGetPosition_1()",
      "26": "UsersInPhotoTest::::testGetPosition_1()",
      "27": "UsersInPhotoTest::::testGetPosition_1()",
      "28": "UsersInPhotoTest::::testGetPosition_1()",
      "29": "UsersInPhotoTest::::testGetPosition_1()",
      "30": "UsersInPhotoTest::::testGetPosition_1()",
      "38": "UsersInPhotoTest::::testGetUser_1()",
      "39": "UsersInPhotoTest::::testGetUser_1()",
      "40": "UsersInPhotoTest::::testGetUser_1()",
      "41": "UsersInPhotoTest::::testGetUser_1()",
      "42": "UsersInPhotoTest::::testGetUser_1()",
      "43": "UsersInPhotoTest::::testGetUser_1()",
      "44": "UsersInPhotoTest::::testGetUser_1()",
      "45": "UsersInPhotoTest::::testGetUser_1()",
      "46": "UsersInPhotoTest::::testGetUser_1()",
      "47": "UsersInPhotoTest::::testGetUser_1()",
      "48": "UsersInPhotoTest::::testGetUser_1()",
      "49": "UsersInPhotoTest::::testGetUser_1()",
      "50": "UsersInPhotoTest::::testGetUser_1()",
      "51": "UsersInPhotoTest::::testGetUser_1()",
      "52": "UsersInPhotoTest::::testGetUser_1()",
      "53": "UsersInPhotoTest::::testGetUser_1()",
      "54": "UsersInPhotoTest::::testGetUser_1()",
      "55": "UsersInPhotoTest::::testGetUser_1()",
      "56": "UsersInPhotoTest::::testGetUser_1()",
      "64": "UsersInPhotoTest::::testSetPosition_1()",
      "65": "UsersInPhotoTest::::testSetPosition_1()",
      "66": "UsersInPhotoTest::::testSetPosition_1()",
      "67": "UsersInPhotoTest::::testSetPosition_1()",
      "68": "UsersInPhotoTest::::testSetPosition_1()",
      "69": "UsersInPhotoTest::::testSetPosition_1()",
      "70": "UsersInPhotoTest::::testSetPosition_1()",
      "71": "UsersInPhotoTest::::testSetPosition_1()",
      "72": "UsersInPhotoTest::::testSetPosition_1()",
      "73": "UsersInPhotoTest::::testSetPosition_1()",
      "74": "UsersInPhotoTest::::testSetPosition_1()",
      "82": "UsersInPhotoTest::::testSetUser_1()",
      "83": "UsersInPhotoTest::::testSetUser_1()",
      "84": "UsersInPhotoTest::::testSetUser_1()",
      "85": "UsersInPhotoTest::::testSetUser_1()",
      "86": "UsersInPhotoTest::::testSetUser_1()",
      "87": "UsersInPhotoTest::::testSetUser_1()",
      "88": "UsersInPhotoTest::::testSetUser_1()",
      "89": "UsersInPhotoTest::::testSetUser_1()",
      "90": "UsersInPhotoTest::::testSetUser_1()",
      "91": "UsersInPhotoTest::::testSetUser_1()",
      "92": "UsersInPhotoTest::::testSetUser_1()"
    },
    "tests": [
      {
        "test_lines": [
          18,
          30
        ],
        "covered_lines": [
          27,
          40,
          41,
          44,
          48,
          49
        ],
        "label": "UsersInPhoto::::getPosition()"
      },
      {
        "test_lines": [
          38,
          56
        ],
        "covered_lines": [
          27,
          36,
          40,
          41,
          48,
          49
        ],
        "label": "UsersInPhoto::::getUser()"
      },
      {
        "test_lines": [
          64,
          74
        ],
        "covered_lines": [
          27,
          40,
          41,
          48,
          49
        ],
        "label": "UsersInPhoto::::setPosition(org.jinstagram.entity.common.GridPosition)"
      },
      {
        "test_lines": [
          82,
          92
        ],
        "covered_lines": [
          27,
          40,
          41,
          48,
          49
        ],
        "label": "UsersInPhoto::::setUser(org.jinstagram.entity.common.User)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/oembed/OembedInformation.java": {
    "class_content": [
      "package org.jinstagram.entity.oembed;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "/**\n",
      " * Holds information returned from the oembed API endpoint\n",
      " * https://www.instagram.com/developer/embedding/#oembed\n",
      " *\n",
      " * @author Brenn Hill\n",
      " */\n",
      "public class OembedInformation {\n",
      "\n",
      "    @SerializedName(\"provider_url\")\n",
      "    private String providerUrl;\n",
      "\n",
      "    @SerializedName(\"title\")\n",
      "    private String title;\n",
      "\n",
      "    @SerializedName(\"url\")\n",
      "    private String url;\n",
      "\n",
      "    @SerializedName(\"author_name\")\n",
      "    private String authorName;\n",
      "\n",
      "    @SerializedName(\"height\")\n",
      "    private String height;\n",
      "\n",
      "    @SerializedName(\"width\")\n",
      "    private String width;\n",
      "\n",
      "    @SerializedName(\"html\")\n",
      "    private String html;\n",
      "\n",
      "    @SerializedName(\"thumbnail_url\")\n",
      "    private String thumbnailUrl;\n",
      "\n",
      "    @SerializedName(\"thumbnail_width\")\n",
      "    private int thumbnailWidth;\n",
      "\n",
      "    @SerializedName(\"thumbnail_height\")\n",
      "    private int thumbnailHeight;\n",
      "\n",
      "    @SerializedName(\"media_id\")\n",
      "    private String mediaId;\n",
      "\n",
      "    @SerializedName(\"version\")\n",
      "    private String version;\n",
      "\n",
      "    @SerializedName(\"author_url\")\n",
      "    private String authorUrl;\n",
      "\n",
      "    @SerializedName(\"provider_name\")\n",
      "    private String providerName;\n",
      "\n",
      "    @SerializedName(\"type\")\n",
      "    private String type;\n",
      "\n",
      "    public String getProviderUrl() {\n",
      "        return providerUrl;\n",
      "    }\n",
      "\n",
      "    public void setProviderUrl(String providerUrl) {\n",
      "        this.providerUrl = providerUrl;\n",
      "    }\n",
      "\n",
      "    public String getTitle() {\n",
      "        return title;\n",
      "    }\n",
      "\n",
      "    public void setTitle(String title) {\n",
      "        this.title = title;\n",
      "    }\n",
      "\n",
      "    public String getUrl() {\n",
      "        return url;\n",
      "    }\n",
      "\n",
      "    public void setUrl(String url) {\n",
      "        this.url = url;\n",
      "    }\n",
      "\n",
      "    public String getAuthorName() {\n",
      "        return authorName;\n",
      "    }\n",
      "\n",
      "    public void setAuthorName(String authorName) {\n",
      "        this.authorName = authorName;\n",
      "    }\n",
      "\n",
      "    public String getHeight() {\n",
      "        return height;\n",
      "    }\n",
      "\n",
      "    public void setHeight(String height) {\n",
      "        this.height = height;\n",
      "    }\n",
      "\n",
      "    public String getWidth() {\n",
      "        return width;\n",
      "    }\n",
      "\n",
      "    public void setWidth(String width) {\n",
      "        this.width = width;\n",
      "    }\n",
      "\n",
      "    public String getVersion() {\n",
      "        return version;\n",
      "    }\n",
      "\n",
      "    public void setVersion(String version) {\n",
      "        this.version = version;\n",
      "    }\n",
      "\n",
      "    public String getAuthorUrl() {\n",
      "        return authorUrl;\n",
      "    }\n",
      "\n",
      "    public void setAuthorUrl(String authorUrl) {\n",
      "        this.authorUrl = authorUrl;\n",
      "    }\n",
      "\n",
      "    public String getProviderName() {\n",
      "        return providerName;\n",
      "    }\n",
      "\n",
      "    public void setProviderName(String providerName) {\n",
      "        this.providerName = providerName;\n",
      "    }\n",
      "\n",
      "    public String getType() {\n",
      "        return type;\n",
      "    }\n",
      "\n",
      "    public void setType(String type) {\n",
      "        this.type = type;\n",
      "    }\n",
      "\n",
      "    public String getMediaId() {\n",
      "        return mediaId;\n",
      "    }\n",
      "\n",
      "    public void setMediaId(String mediaId) {\n",
      "        this.mediaId = mediaId;\n",
      "    }\n",
      "\n",
      "    public String getHtml() { return html; }\n",
      "\n",
      "    public void setHtml(final String html) { this.html = html; }\n",
      "\n",
      "    public String getThumbnailUrl() { return thumbnailUrl; }\n",
      "\n",
      "    public void setThumbnailUrl(final String thumbnailUrl) { this.thumbnailUrl = thumbnailUrl; }\n",
      "\n",
      "    public int getThumbnailWidth() { return thumbnailWidth; }\n",
      "\n",
      "    public void setThumbnailWidth(final int thumbnailWidth) { this.thumbnailWidth = thumbnailWidth; }\n",
      "\n",
      "    public int getThumbnailHeight() { return thumbnailHeight; }\n",
      "\n",
      "    public void setThumbnailHeight(final int thumbnailHeight) { this.thumbnailHeight = thumbnailHeight; }\n",
      "\n",
      "    /*\n",
      "                 * (non-Javadoc)\n",
      "                 *\n",
      "                 * @see java.lang.Object#toString()\n",
      "                 */\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return \"OembedInformation [\"\n",
      "                + (providerUrl != null ? \"provider_url=\" + providerUrl + \", \"  : \"\")\n",
      "                + (title != null ? \"title=\" + title + \", \" : \"\")\n",
      "                + (url != null ? \"url=\" + url + \", \" : \"\")\n",
      "                + (authorName != null ? \"author_name=\" + authorName + \", \" : \"\")\n",
      "                + (height != null ? \"height=\" + height + \", \" : \"\")\n",
      "                + (width != null ? \"width=\" + width + \", \" : \"\")\n",
      "                + (version != null ? \"version=\" + version + \", \" : \"\")\n",
      "                + (authorUrl != null ? \"author_url=\" + authorUrl + \", \" : \"\")\n",
      "                + (providerName != null ? \"provider_name=\" + providerName + \", \" : \"\")\n",
      "                + (type != null ? \"type=\" + type + \", \" : \"\")\n",
      "                + (mediaId != null ? \"mediaId=\" + mediaId : \"\")\n",
      "                + \"]\";\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.oembed;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>OembedInformationTest</code> contains tests for the class <code>{@link OembedInformation}</code>.\n",
      " *\n",
      " * @generatedBy CodePro at 31/08/15 16:47\n",
      " * @author sachin.handiekar\n",
      " * @version $Revision: 1.0 $\n",
      " */\n",
      "public class OembedInformationTest {\n",
      "\t/**\n",
      "\t * Run the String getAuthorName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetAuthorName_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getAuthorName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getAuthorUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetAuthorUrl_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getAuthorUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getHeight() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetHeight_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getHeight();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getMediaId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMediaId_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getMediaId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getProviderName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetProviderName_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getProviderName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getProviderUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetProviderUrl_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getProviderUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getTitle() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetTitle_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getTitle();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getType() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetType_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getType();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUrl_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getVersion() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetVersion_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getVersion();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getWidth() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetWidth_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.getWidth();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setAuthorName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetAuthorName_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString authorName = \"\";\n",
      "\n",
      "\t\tfixture.setAuthorName(authorName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setAuthorUrl(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetAuthorUrl_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString authorUrl = \"\";\n",
      "\n",
      "\t\tfixture.setAuthorUrl(authorUrl);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setHeight(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetHeight_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString height = \"\";\n",
      "\n",
      "\t\tfixture.setHeight(height);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMediaId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMediaId_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString mediaId = \"\";\n",
      "\n",
      "\t\tfixture.setMediaId(mediaId);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setProviderName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetProviderName_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString providerName = \"\";\n",
      "\n",
      "\t\tfixture.setProviderName(providerName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setProviderUrl(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetProviderUrl_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString providerUrl = \"\";\n",
      "\n",
      "\t\tfixture.setProviderUrl(providerUrl);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setTitle(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetTitle_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString title = \"\";\n",
      "\n",
      "\t\tfixture.setTitle(title);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setType(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetType_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString type = \"\";\n",
      "\n",
      "\t\tfixture.setType(type);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUrl(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUrl_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString url = \"\";\n",
      "\n",
      "\t\tfixture.setUrl(url);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setVersion(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetVersion_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString version = \"\";\n",
      "\n",
      "\t\tfixture.setVersion(version);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setWidth(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetWidth_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\t\tString width = \"\";\n",
      "\n",
      "\t\tfixture.setWidth(width);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion((String) null);\n",
      "\t\tfixture.setTitle(\"\");\n",
      "\t\tfixture.setProviderUrl(\"\");\n",
      "\t\tfixture.setUrl(\"\");\n",
      "\t\tfixture.setAuthorName(\"\");\n",
      "\t\tfixture.setHeight(\"\");\n",
      "\t\tfixture.setMediaId((String) null);\n",
      "\t\tfixture.setProviderName((String) null);\n",
      "\t\tfixture.setType((String) null);\n",
      "\t\tfixture.setWidth((String) null);\n",
      "\t\tfixture.setAuthorUrl((String) null);\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"OembedInformation [provider_url=, title=, url=, author_name=, height=, ]\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_2()\n",
      "\t\tthrows Exception {\n",
      "\t\tOembedInformation fixture = new OembedInformation();\n",
      "\t\tfixture.setVersion(\"\");\n",
      "\t\tfixture.setTitle((String) null);\n",
      "\t\tfixture.setProviderUrl((String) null);\n",
      "\t\tfixture.setUrl((String) null);\n",
      "\t\tfixture.setAuthorName((String) null);\n",
      "\t\tfixture.setHeight((String) null);\n",
      "\t\tfixture.setMediaId(\"\");\n",
      "\t\tfixture.setProviderName(\"\");\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setWidth(\"\");\n",
      "\t\tfixture.setAuthorUrl(\"\");\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"OembedInformation [width=, version=, author_url=, provider_name=, type=, mediaId=]\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the initialization fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp()\n",
      "\t\tthrows Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown()\n",
      "\t\tthrows Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args the command line arguments\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:47\n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(OembedInformationTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {
      "OembedInformation::::getProviderUrl()": [
        58,
        60
      ],
      "OembedInformation::::setProviderUrl(java.lang.String)": [
        62,
        64
      ],
      "OembedInformation::::getTitle()": [
        66,
        68
      ],
      "OembedInformation::::setTitle(java.lang.String)": [
        70,
        72
      ],
      "OembedInformation::::getUrl()": [
        74,
        76
      ],
      "OembedInformation::::setUrl(java.lang.String)": [
        78,
        80
      ],
      "OembedInformation::::getAuthorName()": [
        82,
        84
      ],
      "OembedInformation::::setAuthorName(java.lang.String)": [
        86,
        88
      ],
      "OembedInformation::::getHeight()": [
        90,
        92
      ],
      "OembedInformation::::setHeight(java.lang.String)": [
        94,
        96
      ],
      "OembedInformation::::getWidth()": [
        98,
        100
      ],
      "OembedInformation::::setWidth(java.lang.String)": [
        102,
        104
      ],
      "OembedInformation::::getVersion()": [
        106,
        108
      ],
      "OembedInformation::::setVersion(java.lang.String)": [
        110,
        112
      ],
      "OembedInformation::::getAuthorUrl()": [
        114,
        116
      ],
      "OembedInformation::::setAuthorUrl(java.lang.String)": [
        118,
        120
      ],
      "OembedInformation::::getProviderName()": [
        122,
        124
      ],
      "OembedInformation::::setProviderName(java.lang.String)": [
        126,
        128
      ],
      "OembedInformation::::getType()": [
        130,
        132
      ],
      "OembedInformation::::setType(java.lang.String)": [
        134,
        136
      ],
      "OembedInformation::::getMediaId()": [
        138,
        140
      ],
      "OembedInformation::::setMediaId(java.lang.String)": [
        142,
        144
      ],
      "OembedInformation::::getHtml()": [
        146,
        146
      ],
      "OembedInformation::::setHtml(java.lang.String)": [
        148,
        148
      ],
      "OembedInformation::::getThumbnailUrl()": [
        150,
        150
      ],
      "OembedInformation::::setThumbnailUrl(java.lang.String)": [
        152,
        152
      ],
      "OembedInformation::::getThumbnailWidth()": [
        154,
        154
      ],
      "OembedInformation::::setThumbnailWidth(int)": [
        156,
        156
      ],
      "OembedInformation::::getThumbnailHeight()": [
        158,
        158
      ],
      "OembedInformation::::setThumbnailHeight(int)": [
        160,
        160
      ],
      "OembedInformation::::toString()": [
        167,
        182
      ]
    },
    "test_method_lines_dic": {
      "OembedInformationTest::::testGetAuthorName_1()": [
        21,
        41
      ],
      "OembedInformationTest::::testGetAuthorUrl_1()": [
        50,
        70
      ],
      "OembedInformationTest::::testGetHeight_1()": [
        79,
        99
      ],
      "OembedInformationTest::::testGetMediaId_1()": [
        108,
        128
      ],
      "OembedInformationTest::::testGetProviderName_1()": [
        137,
        157
      ],
      "OembedInformationTest::::testGetProviderUrl_1()": [
        166,
        186
      ],
      "OembedInformationTest::::testGetTitle_1()": [
        195,
        215
      ],
      "OembedInformationTest::::testGetType_1()": [
        224,
        244
      ],
      "OembedInformationTest::::testGetUrl_1()": [
        253,
        273
      ],
      "OembedInformationTest::::testGetVersion_1()": [
        282,
        302
      ],
      "OembedInformationTest::::testGetWidth_1()": [
        311,
        331
      ],
      "OembedInformationTest::::testSetAuthorName_1()": [
        340,
        360
      ],
      "OembedInformationTest::::testSetAuthorUrl_1()": [
        369,
        389
      ],
      "OembedInformationTest::::testSetHeight_1()": [
        398,
        418
      ],
      "OembedInformationTest::::testSetMediaId_1()": [
        427,
        447
      ],
      "OembedInformationTest::::testSetProviderName_1()": [
        456,
        476
      ],
      "OembedInformationTest::::testSetProviderUrl_1()": [
        485,
        505
      ],
      "OembedInformationTest::::testSetTitle_1()": [
        514,
        534
      ],
      "OembedInformationTest::::testSetType_1()": [
        543,
        563
      ],
      "OembedInformationTest::::testSetUrl_1()": [
        572,
        592
      ],
      "OembedInformationTest::::testSetVersion_1()": [
        601,
        621
      ],
      "OembedInformationTest::::testSetWidth_1()": [
        630,
        650
      ],
      "OembedInformationTest::::testToString_1()": [
        659,
        679
      ],
      "OembedInformationTest::::testToString_2()": [
        688,
        708
      ],
      "OembedInformationTest::::setUp()": [
        718,
        722
      ],
      "OembedInformationTest::::tearDown()": [
        732,
        736
      ],
      "OembedInformationTest::::main(java.lang.String[])": [
        745,
        747
      ]
    },
    "reverse_method_lines_dic": {
      "58": "OembedInformation::::getProviderUrl()",
      "59": "OembedInformation::::getProviderUrl()",
      "60": "OembedInformation::::getProviderUrl()",
      "62": "OembedInformation::::setProviderUrl(java.lang.String)",
      "63": "OembedInformation::::setProviderUrl(java.lang.String)",
      "64": "OembedInformation::::setProviderUrl(java.lang.String)",
      "66": "OembedInformation::::getTitle()",
      "67": "OembedInformation::::getTitle()",
      "68": "OembedInformation::::getTitle()",
      "70": "OembedInformation::::setTitle(java.lang.String)",
      "71": "OembedInformation::::setTitle(java.lang.String)",
      "72": "OembedInformation::::setTitle(java.lang.String)",
      "74": "OembedInformation::::getUrl()",
      "75": "OembedInformation::::getUrl()",
      "76": "OembedInformation::::getUrl()",
      "78": "OembedInformation::::setUrl(java.lang.String)",
      "79": "OembedInformation::::setUrl(java.lang.String)",
      "80": "OembedInformation::::setUrl(java.lang.String)",
      "82": "OembedInformation::::getAuthorName()",
      "83": "OembedInformation::::getAuthorName()",
      "84": "OembedInformation::::getAuthorName()",
      "86": "OembedInformation::::setAuthorName(java.lang.String)",
      "87": "OembedInformation::::setAuthorName(java.lang.String)",
      "88": "OembedInformation::::setAuthorName(java.lang.String)",
      "90": "OembedInformation::::getHeight()",
      "91": "OembedInformation::::getHeight()",
      "92": "OembedInformation::::getHeight()",
      "94": "OembedInformation::::setHeight(java.lang.String)",
      "95": "OembedInformation::::setHeight(java.lang.String)",
      "96": "OembedInformation::::setHeight(java.lang.String)",
      "98": "OembedInformation::::getWidth()",
      "99": "OembedInformation::::getWidth()",
      "100": "OembedInformation::::getWidth()",
      "102": "OembedInformation::::setWidth(java.lang.String)",
      "103": "OembedInformation::::setWidth(java.lang.String)",
      "104": "OembedInformation::::setWidth(java.lang.String)",
      "106": "OembedInformation::::getVersion()",
      "107": "OembedInformation::::getVersion()",
      "108": "OembedInformation::::getVersion()",
      "110": "OembedInformation::::setVersion(java.lang.String)",
      "111": "OembedInformation::::setVersion(java.lang.String)",
      "112": "OembedInformation::::setVersion(java.lang.String)",
      "114": "OembedInformation::::getAuthorUrl()",
      "115": "OembedInformation::::getAuthorUrl()",
      "116": "OembedInformation::::getAuthorUrl()",
      "118": "OembedInformation::::setAuthorUrl(java.lang.String)",
      "119": "OembedInformation::::setAuthorUrl(java.lang.String)",
      "120": "OembedInformation::::setAuthorUrl(java.lang.String)",
      "122": "OembedInformation::::getProviderName()",
      "123": "OembedInformation::::getProviderName()",
      "124": "OembedInformation::::getProviderName()",
      "126": "OembedInformation::::setProviderName(java.lang.String)",
      "127": "OembedInformation::::setProviderName(java.lang.String)",
      "128": "OembedInformation::::setProviderName(java.lang.String)",
      "130": "OembedInformation::::getType()",
      "131": "OembedInformation::::getType()",
      "132": "OembedInformation::::getType()",
      "134": "OembedInformation::::setType(java.lang.String)",
      "135": "OembedInformation::::setType(java.lang.String)",
      "136": "OembedInformation::::setType(java.lang.String)",
      "138": "OembedInformation::::getMediaId()",
      "139": "OembedInformation::::getMediaId()",
      "140": "OembedInformation::::getMediaId()",
      "142": "OembedInformation::::setMediaId(java.lang.String)",
      "143": "OembedInformation::::setMediaId(java.lang.String)",
      "144": "OembedInformation::::setMediaId(java.lang.String)",
      "146": "OembedInformation::::getHtml()",
      "148": "OembedInformation::::setHtml(java.lang.String)",
      "150": "OembedInformation::::getThumbnailUrl()",
      "152": "OembedInformation::::setThumbnailUrl(java.lang.String)",
      "154": "OembedInformation::::getThumbnailWidth()",
      "156": "OembedInformation::::setThumbnailWidth(int)",
      "158": "OembedInformation::::getThumbnailHeight()",
      "160": "OembedInformation::::setThumbnailHeight(int)",
      "167": "OembedInformation::::toString()",
      "168": "OembedInformation::::toString()",
      "169": "OembedInformation::::toString()",
      "170": "OembedInformation::::toString()",
      "171": "OembedInformation::::toString()",
      "172": "OembedInformation::::toString()",
      "173": "OembedInformation::::toString()",
      "174": "OembedInformation::::toString()",
      "175": "OembedInformation::::toString()",
      "176": "OembedInformation::::toString()",
      "177": "OembedInformation::::toString()",
      "178": "OembedInformation::::toString()",
      "179": "OembedInformation::::toString()",
      "180": "OembedInformation::::toString()",
      "181": "OembedInformation::::toString()",
      "182": "OembedInformation::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "21": "OembedInformationTest::::testGetAuthorName_1()",
      "22": "OembedInformationTest::::testGetAuthorName_1()",
      "23": "OembedInformationTest::::testGetAuthorName_1()",
      "24": "OembedInformationTest::::testGetAuthorName_1()",
      "25": "OembedInformationTest::::testGetAuthorName_1()",
      "26": "OembedInformationTest::::testGetAuthorName_1()",
      "27": "OembedInformationTest::::testGetAuthorName_1()",
      "28": "OembedInformationTest::::testGetAuthorName_1()",
      "29": "OembedInformationTest::::testGetAuthorName_1()",
      "30": "OembedInformationTest::::testGetAuthorName_1()",
      "31": "OembedInformationTest::::testGetAuthorName_1()",
      "32": "OembedInformationTest::::testGetAuthorName_1()",
      "33": "OembedInformationTest::::testGetAuthorName_1()",
      "34": "OembedInformationTest::::testGetAuthorName_1()",
      "35": "OembedInformationTest::::testGetAuthorName_1()",
      "36": "OembedInformationTest::::testGetAuthorName_1()",
      "37": "OembedInformationTest::::testGetAuthorName_1()",
      "38": "OembedInformationTest::::testGetAuthorName_1()",
      "39": "OembedInformationTest::::testGetAuthorName_1()",
      "40": "OembedInformationTest::::testGetAuthorName_1()",
      "41": "OembedInformationTest::::testGetAuthorName_1()",
      "50": "OembedInformationTest::::testGetAuthorUrl_1()",
      "51": "OembedInformationTest::::testGetAuthorUrl_1()",
      "52": "OembedInformationTest::::testGetAuthorUrl_1()",
      "53": "OembedInformationTest::::testGetAuthorUrl_1()",
      "54": "OembedInformationTest::::testGetAuthorUrl_1()",
      "55": "OembedInformationTest::::testGetAuthorUrl_1()",
      "56": "OembedInformationTest::::testGetAuthorUrl_1()",
      "57": "OembedInformationTest::::testGetAuthorUrl_1()",
      "58": "OembedInformationTest::::testGetAuthorUrl_1()",
      "59": "OembedInformationTest::::testGetAuthorUrl_1()",
      "60": "OembedInformationTest::::testGetAuthorUrl_1()",
      "61": "OembedInformationTest::::testGetAuthorUrl_1()",
      "62": "OembedInformationTest::::testGetAuthorUrl_1()",
      "63": "OembedInformationTest::::testGetAuthorUrl_1()",
      "64": "OembedInformationTest::::testGetAuthorUrl_1()",
      "65": "OembedInformationTest::::testGetAuthorUrl_1()",
      "66": "OembedInformationTest::::testGetAuthorUrl_1()",
      "67": "OembedInformationTest::::testGetAuthorUrl_1()",
      "68": "OembedInformationTest::::testGetAuthorUrl_1()",
      "69": "OembedInformationTest::::testGetAuthorUrl_1()",
      "70": "OembedInformationTest::::testGetAuthorUrl_1()",
      "79": "OembedInformationTest::::testGetHeight_1()",
      "80": "OembedInformationTest::::testGetHeight_1()",
      "81": "OembedInformationTest::::testGetHeight_1()",
      "82": "OembedInformationTest::::testGetHeight_1()",
      "83": "OembedInformationTest::::testGetHeight_1()",
      "84": "OembedInformationTest::::testGetHeight_1()",
      "85": "OembedInformationTest::::testGetHeight_1()",
      "86": "OembedInformationTest::::testGetHeight_1()",
      "87": "OembedInformationTest::::testGetHeight_1()",
      "88": "OembedInformationTest::::testGetHeight_1()",
      "89": "OembedInformationTest::::testGetHeight_1()",
      "90": "OembedInformationTest::::testGetHeight_1()",
      "91": "OembedInformationTest::::testGetHeight_1()",
      "92": "OembedInformationTest::::testGetHeight_1()",
      "93": "OembedInformationTest::::testGetHeight_1()",
      "94": "OembedInformationTest::::testGetHeight_1()",
      "95": "OembedInformationTest::::testGetHeight_1()",
      "96": "OembedInformationTest::::testGetHeight_1()",
      "97": "OembedInformationTest::::testGetHeight_1()",
      "98": "OembedInformationTest::::testGetHeight_1()",
      "99": "OembedInformationTest::::testGetHeight_1()",
      "108": "OembedInformationTest::::testGetMediaId_1()",
      "109": "OembedInformationTest::::testGetMediaId_1()",
      "110": "OembedInformationTest::::testGetMediaId_1()",
      "111": "OembedInformationTest::::testGetMediaId_1()",
      "112": "OembedInformationTest::::testGetMediaId_1()",
      "113": "OembedInformationTest::::testGetMediaId_1()",
      "114": "OembedInformationTest::::testGetMediaId_1()",
      "115": "OembedInformationTest::::testGetMediaId_1()",
      "116": "OembedInformationTest::::testGetMediaId_1()",
      "117": "OembedInformationTest::::testGetMediaId_1()",
      "118": "OembedInformationTest::::testGetMediaId_1()",
      "119": "OembedInformationTest::::testGetMediaId_1()",
      "120": "OembedInformationTest::::testGetMediaId_1()",
      "121": "OembedInformationTest::::testGetMediaId_1()",
      "122": "OembedInformationTest::::testGetMediaId_1()",
      "123": "OembedInformationTest::::testGetMediaId_1()",
      "124": "OembedInformationTest::::testGetMediaId_1()",
      "125": "OembedInformationTest::::testGetMediaId_1()",
      "126": "OembedInformationTest::::testGetMediaId_1()",
      "127": "OembedInformationTest::::testGetMediaId_1()",
      "128": "OembedInformationTest::::testGetMediaId_1()",
      "137": "OembedInformationTest::::testGetProviderName_1()",
      "138": "OembedInformationTest::::testGetProviderName_1()",
      "139": "OembedInformationTest::::testGetProviderName_1()",
      "140": "OembedInformationTest::::testGetProviderName_1()",
      "141": "OembedInformationTest::::testGetProviderName_1()",
      "142": "OembedInformationTest::::testGetProviderName_1()",
      "143": "OembedInformationTest::::testGetProviderName_1()",
      "144": "OembedInformationTest::::testGetProviderName_1()",
      "145": "OembedInformationTest::::testGetProviderName_1()",
      "146": "OembedInformationTest::::testGetProviderName_1()",
      "147": "OembedInformationTest::::testGetProviderName_1()",
      "148": "OembedInformationTest::::testGetProviderName_1()",
      "149": "OembedInformationTest::::testGetProviderName_1()",
      "150": "OembedInformationTest::::testGetProviderName_1()",
      "151": "OembedInformationTest::::testGetProviderName_1()",
      "152": "OembedInformationTest::::testGetProviderName_1()",
      "153": "OembedInformationTest::::testGetProviderName_1()",
      "154": "OembedInformationTest::::testGetProviderName_1()",
      "155": "OembedInformationTest::::testGetProviderName_1()",
      "156": "OembedInformationTest::::testGetProviderName_1()",
      "157": "OembedInformationTest::::testGetProviderName_1()",
      "166": "OembedInformationTest::::testGetProviderUrl_1()",
      "167": "OembedInformationTest::::testGetProviderUrl_1()",
      "168": "OembedInformationTest::::testGetProviderUrl_1()",
      "169": "OembedInformationTest::::testGetProviderUrl_1()",
      "170": "OembedInformationTest::::testGetProviderUrl_1()",
      "171": "OembedInformationTest::::testGetProviderUrl_1()",
      "172": "OembedInformationTest::::testGetProviderUrl_1()",
      "173": "OembedInformationTest::::testGetProviderUrl_1()",
      "174": "OembedInformationTest::::testGetProviderUrl_1()",
      "175": "OembedInformationTest::::testGetProviderUrl_1()",
      "176": "OembedInformationTest::::testGetProviderUrl_1()",
      "177": "OembedInformationTest::::testGetProviderUrl_1()",
      "178": "OembedInformationTest::::testGetProviderUrl_1()",
      "179": "OembedInformationTest::::testGetProviderUrl_1()",
      "180": "OembedInformationTest::::testGetProviderUrl_1()",
      "181": "OembedInformationTest::::testGetProviderUrl_1()",
      "182": "OembedInformationTest::::testGetProviderUrl_1()",
      "183": "OembedInformationTest::::testGetProviderUrl_1()",
      "184": "OembedInformationTest::::testGetProviderUrl_1()",
      "185": "OembedInformationTest::::testGetProviderUrl_1()",
      "186": "OembedInformationTest::::testGetProviderUrl_1()",
      "195": "OembedInformationTest::::testGetTitle_1()",
      "196": "OembedInformationTest::::testGetTitle_1()",
      "197": "OembedInformationTest::::testGetTitle_1()",
      "198": "OembedInformationTest::::testGetTitle_1()",
      "199": "OembedInformationTest::::testGetTitle_1()",
      "200": "OembedInformationTest::::testGetTitle_1()",
      "201": "OembedInformationTest::::testGetTitle_1()",
      "202": "OembedInformationTest::::testGetTitle_1()",
      "203": "OembedInformationTest::::testGetTitle_1()",
      "204": "OembedInformationTest::::testGetTitle_1()",
      "205": "OembedInformationTest::::testGetTitle_1()",
      "206": "OembedInformationTest::::testGetTitle_1()",
      "207": "OembedInformationTest::::testGetTitle_1()",
      "208": "OembedInformationTest::::testGetTitle_1()",
      "209": "OembedInformationTest::::testGetTitle_1()",
      "210": "OembedInformationTest::::testGetTitle_1()",
      "211": "OembedInformationTest::::testGetTitle_1()",
      "212": "OembedInformationTest::::testGetTitle_1()",
      "213": "OembedInformationTest::::testGetTitle_1()",
      "214": "OembedInformationTest::::testGetTitle_1()",
      "215": "OembedInformationTest::::testGetTitle_1()",
      "224": "OembedInformationTest::::testGetType_1()",
      "225": "OembedInformationTest::::testGetType_1()",
      "226": "OembedInformationTest::::testGetType_1()",
      "227": "OembedInformationTest::::testGetType_1()",
      "228": "OembedInformationTest::::testGetType_1()",
      "229": "OembedInformationTest::::testGetType_1()",
      "230": "OembedInformationTest::::testGetType_1()",
      "231": "OembedInformationTest::::testGetType_1()",
      "232": "OembedInformationTest::::testGetType_1()",
      "233": "OembedInformationTest::::testGetType_1()",
      "234": "OembedInformationTest::::testGetType_1()",
      "235": "OembedInformationTest::::testGetType_1()",
      "236": "OembedInformationTest::::testGetType_1()",
      "237": "OembedInformationTest::::testGetType_1()",
      "238": "OembedInformationTest::::testGetType_1()",
      "239": "OembedInformationTest::::testGetType_1()",
      "240": "OembedInformationTest::::testGetType_1()",
      "241": "OembedInformationTest::::testGetType_1()",
      "242": "OembedInformationTest::::testGetType_1()",
      "243": "OembedInformationTest::::testGetType_1()",
      "244": "OembedInformationTest::::testGetType_1()",
      "253": "OembedInformationTest::::testGetUrl_1()",
      "254": "OembedInformationTest::::testGetUrl_1()",
      "255": "OembedInformationTest::::testGetUrl_1()",
      "256": "OembedInformationTest::::testGetUrl_1()",
      "257": "OembedInformationTest::::testGetUrl_1()",
      "258": "OembedInformationTest::::testGetUrl_1()",
      "259": "OembedInformationTest::::testGetUrl_1()",
      "260": "OembedInformationTest::::testGetUrl_1()",
      "261": "OembedInformationTest::::testGetUrl_1()",
      "262": "OembedInformationTest::::testGetUrl_1()",
      "263": "OembedInformationTest::::testGetUrl_1()",
      "264": "OembedInformationTest::::testGetUrl_1()",
      "265": "OembedInformationTest::::testGetUrl_1()",
      "266": "OembedInformationTest::::testGetUrl_1()",
      "267": "OembedInformationTest::::testGetUrl_1()",
      "268": "OembedInformationTest::::testGetUrl_1()",
      "269": "OembedInformationTest::::testGetUrl_1()",
      "270": "OembedInformationTest::::testGetUrl_1()",
      "271": "OembedInformationTest::::testGetUrl_1()",
      "272": "OembedInformationTest::::testGetUrl_1()",
      "273": "OembedInformationTest::::testGetUrl_1()",
      "282": "OembedInformationTest::::testGetVersion_1()",
      "283": "OembedInformationTest::::testGetVersion_1()",
      "284": "OembedInformationTest::::testGetVersion_1()",
      "285": "OembedInformationTest::::testGetVersion_1()",
      "286": "OembedInformationTest::::testGetVersion_1()",
      "287": "OembedInformationTest::::testGetVersion_1()",
      "288": "OembedInformationTest::::testGetVersion_1()",
      "289": "OembedInformationTest::::testGetVersion_1()",
      "290": "OembedInformationTest::::testGetVersion_1()",
      "291": "OembedInformationTest::::testGetVersion_1()",
      "292": "OembedInformationTest::::testGetVersion_1()",
      "293": "OembedInformationTest::::testGetVersion_1()",
      "294": "OembedInformationTest::::testGetVersion_1()",
      "295": "OembedInformationTest::::testGetVersion_1()",
      "296": "OembedInformationTest::::testGetVersion_1()",
      "297": "OembedInformationTest::::testGetVersion_1()",
      "298": "OembedInformationTest::::testGetVersion_1()",
      "299": "OembedInformationTest::::testGetVersion_1()",
      "300": "OembedInformationTest::::testGetVersion_1()",
      "301": "OembedInformationTest::::testGetVersion_1()",
      "302": "OembedInformationTest::::testGetVersion_1()",
      "311": "OembedInformationTest::::testGetWidth_1()",
      "312": "OembedInformationTest::::testGetWidth_1()",
      "313": "OembedInformationTest::::testGetWidth_1()",
      "314": "OembedInformationTest::::testGetWidth_1()",
      "315": "OembedInformationTest::::testGetWidth_1()",
      "316": "OembedInformationTest::::testGetWidth_1()",
      "317": "OembedInformationTest::::testGetWidth_1()",
      "318": "OembedInformationTest::::testGetWidth_1()",
      "319": "OembedInformationTest::::testGetWidth_1()",
      "320": "OembedInformationTest::::testGetWidth_1()",
      "321": "OembedInformationTest::::testGetWidth_1()",
      "322": "OembedInformationTest::::testGetWidth_1()",
      "323": "OembedInformationTest::::testGetWidth_1()",
      "324": "OembedInformationTest::::testGetWidth_1()",
      "325": "OembedInformationTest::::testGetWidth_1()",
      "326": "OembedInformationTest::::testGetWidth_1()",
      "327": "OembedInformationTest::::testGetWidth_1()",
      "328": "OembedInformationTest::::testGetWidth_1()",
      "329": "OembedInformationTest::::testGetWidth_1()",
      "330": "OembedInformationTest::::testGetWidth_1()",
      "331": "OembedInformationTest::::testGetWidth_1()",
      "340": "OembedInformationTest::::testSetAuthorName_1()",
      "341": "OembedInformationTest::::testSetAuthorName_1()",
      "342": "OembedInformationTest::::testSetAuthorName_1()",
      "343": "OembedInformationTest::::testSetAuthorName_1()",
      "344": "OembedInformationTest::::testSetAuthorName_1()",
      "345": "OembedInformationTest::::testSetAuthorName_1()",
      "346": "OembedInformationTest::::testSetAuthorName_1()",
      "347": "OembedInformationTest::::testSetAuthorName_1()",
      "348": "OembedInformationTest::::testSetAuthorName_1()",
      "349": "OembedInformationTest::::testSetAuthorName_1()",
      "350": "OembedInformationTest::::testSetAuthorName_1()",
      "351": "OembedInformationTest::::testSetAuthorName_1()",
      "352": "OembedInformationTest::::testSetAuthorName_1()",
      "353": "OembedInformationTest::::testSetAuthorName_1()",
      "354": "OembedInformationTest::::testSetAuthorName_1()",
      "355": "OembedInformationTest::::testSetAuthorName_1()",
      "356": "OembedInformationTest::::testSetAuthorName_1()",
      "357": "OembedInformationTest::::testSetAuthorName_1()",
      "358": "OembedInformationTest::::testSetAuthorName_1()",
      "359": "OembedInformationTest::::testSetAuthorName_1()",
      "360": "OembedInformationTest::::testSetAuthorName_1()",
      "369": "OembedInformationTest::::testSetAuthorUrl_1()",
      "370": "OembedInformationTest::::testSetAuthorUrl_1()",
      "371": "OembedInformationTest::::testSetAuthorUrl_1()",
      "372": "OembedInformationTest::::testSetAuthorUrl_1()",
      "373": "OembedInformationTest::::testSetAuthorUrl_1()",
      "374": "OembedInformationTest::::testSetAuthorUrl_1()",
      "375": "OembedInformationTest::::testSetAuthorUrl_1()",
      "376": "OembedInformationTest::::testSetAuthorUrl_1()",
      "377": "OembedInformationTest::::testSetAuthorUrl_1()",
      "378": "OembedInformationTest::::testSetAuthorUrl_1()",
      "379": "OembedInformationTest::::testSetAuthorUrl_1()",
      "380": "OembedInformationTest::::testSetAuthorUrl_1()",
      "381": "OembedInformationTest::::testSetAuthorUrl_1()",
      "382": "OembedInformationTest::::testSetAuthorUrl_1()",
      "383": "OembedInformationTest::::testSetAuthorUrl_1()",
      "384": "OembedInformationTest::::testSetAuthorUrl_1()",
      "385": "OembedInformationTest::::testSetAuthorUrl_1()",
      "386": "OembedInformationTest::::testSetAuthorUrl_1()",
      "387": "OembedInformationTest::::testSetAuthorUrl_1()",
      "388": "OembedInformationTest::::testSetAuthorUrl_1()",
      "389": "OembedInformationTest::::testSetAuthorUrl_1()",
      "398": "OembedInformationTest::::testSetHeight_1()",
      "399": "OembedInformationTest::::testSetHeight_1()",
      "400": "OembedInformationTest::::testSetHeight_1()",
      "401": "OembedInformationTest::::testSetHeight_1()",
      "402": "OembedInformationTest::::testSetHeight_1()",
      "403": "OembedInformationTest::::testSetHeight_1()",
      "404": "OembedInformationTest::::testSetHeight_1()",
      "405": "OembedInformationTest::::testSetHeight_1()",
      "406": "OembedInformationTest::::testSetHeight_1()",
      "407": "OembedInformationTest::::testSetHeight_1()",
      "408": "OembedInformationTest::::testSetHeight_1()",
      "409": "OembedInformationTest::::testSetHeight_1()",
      "410": "OembedInformationTest::::testSetHeight_1()",
      "411": "OembedInformationTest::::testSetHeight_1()",
      "412": "OembedInformationTest::::testSetHeight_1()",
      "413": "OembedInformationTest::::testSetHeight_1()",
      "414": "OembedInformationTest::::testSetHeight_1()",
      "415": "OembedInformationTest::::testSetHeight_1()",
      "416": "OembedInformationTest::::testSetHeight_1()",
      "417": "OembedInformationTest::::testSetHeight_1()",
      "418": "OembedInformationTest::::testSetHeight_1()",
      "427": "OembedInformationTest::::testSetMediaId_1()",
      "428": "OembedInformationTest::::testSetMediaId_1()",
      "429": "OembedInformationTest::::testSetMediaId_1()",
      "430": "OembedInformationTest::::testSetMediaId_1()",
      "431": "OembedInformationTest::::testSetMediaId_1()",
      "432": "OembedInformationTest::::testSetMediaId_1()",
      "433": "OembedInformationTest::::testSetMediaId_1()",
      "434": "OembedInformationTest::::testSetMediaId_1()",
      "435": "OembedInformationTest::::testSetMediaId_1()",
      "436": "OembedInformationTest::::testSetMediaId_1()",
      "437": "OembedInformationTest::::testSetMediaId_1()",
      "438": "OembedInformationTest::::testSetMediaId_1()",
      "439": "OembedInformationTest::::testSetMediaId_1()",
      "440": "OembedInformationTest::::testSetMediaId_1()",
      "441": "OembedInformationTest::::testSetMediaId_1()",
      "442": "OembedInformationTest::::testSetMediaId_1()",
      "443": "OembedInformationTest::::testSetMediaId_1()",
      "444": "OembedInformationTest::::testSetMediaId_1()",
      "445": "OembedInformationTest::::testSetMediaId_1()",
      "446": "OembedInformationTest::::testSetMediaId_1()",
      "447": "OembedInformationTest::::testSetMediaId_1()",
      "456": "OembedInformationTest::::testSetProviderName_1()",
      "457": "OembedInformationTest::::testSetProviderName_1()",
      "458": "OembedInformationTest::::testSetProviderName_1()",
      "459": "OembedInformationTest::::testSetProviderName_1()",
      "460": "OembedInformationTest::::testSetProviderName_1()",
      "461": "OembedInformationTest::::testSetProviderName_1()",
      "462": "OembedInformationTest::::testSetProviderName_1()",
      "463": "OembedInformationTest::::testSetProviderName_1()",
      "464": "OembedInformationTest::::testSetProviderName_1()",
      "465": "OembedInformationTest::::testSetProviderName_1()",
      "466": "OembedInformationTest::::testSetProviderName_1()",
      "467": "OembedInformationTest::::testSetProviderName_1()",
      "468": "OembedInformationTest::::testSetProviderName_1()",
      "469": "OembedInformationTest::::testSetProviderName_1()",
      "470": "OembedInformationTest::::testSetProviderName_1()",
      "471": "OembedInformationTest::::testSetProviderName_1()",
      "472": "OembedInformationTest::::testSetProviderName_1()",
      "473": "OembedInformationTest::::testSetProviderName_1()",
      "474": "OembedInformationTest::::testSetProviderName_1()",
      "475": "OembedInformationTest::::testSetProviderName_1()",
      "476": "OembedInformationTest::::testSetProviderName_1()",
      "485": "OembedInformationTest::::testSetProviderUrl_1()",
      "486": "OembedInformationTest::::testSetProviderUrl_1()",
      "487": "OembedInformationTest::::testSetProviderUrl_1()",
      "488": "OembedInformationTest::::testSetProviderUrl_1()",
      "489": "OembedInformationTest::::testSetProviderUrl_1()",
      "490": "OembedInformationTest::::testSetProviderUrl_1()",
      "491": "OembedInformationTest::::testSetProviderUrl_1()",
      "492": "OembedInformationTest::::testSetProviderUrl_1()",
      "493": "OembedInformationTest::::testSetProviderUrl_1()",
      "494": "OembedInformationTest::::testSetProviderUrl_1()",
      "495": "OembedInformationTest::::testSetProviderUrl_1()",
      "496": "OembedInformationTest::::testSetProviderUrl_1()",
      "497": "OembedInformationTest::::testSetProviderUrl_1()",
      "498": "OembedInformationTest::::testSetProviderUrl_1()",
      "499": "OembedInformationTest::::testSetProviderUrl_1()",
      "500": "OembedInformationTest::::testSetProviderUrl_1()",
      "501": "OembedInformationTest::::testSetProviderUrl_1()",
      "502": "OembedInformationTest::::testSetProviderUrl_1()",
      "503": "OembedInformationTest::::testSetProviderUrl_1()",
      "504": "OembedInformationTest::::testSetProviderUrl_1()",
      "505": "OembedInformationTest::::testSetProviderUrl_1()",
      "514": "OembedInformationTest::::testSetTitle_1()",
      "515": "OembedInformationTest::::testSetTitle_1()",
      "516": "OembedInformationTest::::testSetTitle_1()",
      "517": "OembedInformationTest::::testSetTitle_1()",
      "518": "OembedInformationTest::::testSetTitle_1()",
      "519": "OembedInformationTest::::testSetTitle_1()",
      "520": "OembedInformationTest::::testSetTitle_1()",
      "521": "OembedInformationTest::::testSetTitle_1()",
      "522": "OembedInformationTest::::testSetTitle_1()",
      "523": "OembedInformationTest::::testSetTitle_1()",
      "524": "OembedInformationTest::::testSetTitle_1()",
      "525": "OembedInformationTest::::testSetTitle_1()",
      "526": "OembedInformationTest::::testSetTitle_1()",
      "527": "OembedInformationTest::::testSetTitle_1()",
      "528": "OembedInformationTest::::testSetTitle_1()",
      "529": "OembedInformationTest::::testSetTitle_1()",
      "530": "OembedInformationTest::::testSetTitle_1()",
      "531": "OembedInformationTest::::testSetTitle_1()",
      "532": "OembedInformationTest::::testSetTitle_1()",
      "533": "OembedInformationTest::::testSetTitle_1()",
      "534": "OembedInformationTest::::testSetTitle_1()",
      "543": "OembedInformationTest::::testSetType_1()",
      "544": "OembedInformationTest::::testSetType_1()",
      "545": "OembedInformationTest::::testSetType_1()",
      "546": "OembedInformationTest::::testSetType_1()",
      "547": "OembedInformationTest::::testSetType_1()",
      "548": "OembedInformationTest::::testSetType_1()",
      "549": "OembedInformationTest::::testSetType_1()",
      "550": "OembedInformationTest::::testSetType_1()",
      "551": "OembedInformationTest::::testSetType_1()",
      "552": "OembedInformationTest::::testSetType_1()",
      "553": "OembedInformationTest::::testSetType_1()",
      "554": "OembedInformationTest::::testSetType_1()",
      "555": "OembedInformationTest::::testSetType_1()",
      "556": "OembedInformationTest::::testSetType_1()",
      "557": "OembedInformationTest::::testSetType_1()",
      "558": "OembedInformationTest::::testSetType_1()",
      "559": "OembedInformationTest::::testSetType_1()",
      "560": "OembedInformationTest::::testSetType_1()",
      "561": "OembedInformationTest::::testSetType_1()",
      "562": "OembedInformationTest::::testSetType_1()",
      "563": "OembedInformationTest::::testSetType_1()",
      "572": "OembedInformationTest::::testSetUrl_1()",
      "573": "OembedInformationTest::::testSetUrl_1()",
      "574": "OembedInformationTest::::testSetUrl_1()",
      "575": "OembedInformationTest::::testSetUrl_1()",
      "576": "OembedInformationTest::::testSetUrl_1()",
      "577": "OembedInformationTest::::testSetUrl_1()",
      "578": "OembedInformationTest::::testSetUrl_1()",
      "579": "OembedInformationTest::::testSetUrl_1()",
      "580": "OembedInformationTest::::testSetUrl_1()",
      "581": "OembedInformationTest::::testSetUrl_1()",
      "582": "OembedInformationTest::::testSetUrl_1()",
      "583": "OembedInformationTest::::testSetUrl_1()",
      "584": "OembedInformationTest::::testSetUrl_1()",
      "585": "OembedInformationTest::::testSetUrl_1()",
      "586": "OembedInformationTest::::testSetUrl_1()",
      "587": "OembedInformationTest::::testSetUrl_1()",
      "588": "OembedInformationTest::::testSetUrl_1()",
      "589": "OembedInformationTest::::testSetUrl_1()",
      "590": "OembedInformationTest::::testSetUrl_1()",
      "591": "OembedInformationTest::::testSetUrl_1()",
      "592": "OembedInformationTest::::testSetUrl_1()",
      "601": "OembedInformationTest::::testSetVersion_1()",
      "602": "OembedInformationTest::::testSetVersion_1()",
      "603": "OembedInformationTest::::testSetVersion_1()",
      "604": "OembedInformationTest::::testSetVersion_1()",
      "605": "OembedInformationTest::::testSetVersion_1()",
      "606": "OembedInformationTest::::testSetVersion_1()",
      "607": "OembedInformationTest::::testSetVersion_1()",
      "608": "OembedInformationTest::::testSetVersion_1()",
      "609": "OembedInformationTest::::testSetVersion_1()",
      "610": "OembedInformationTest::::testSetVersion_1()",
      "611": "OembedInformationTest::::testSetVersion_1()",
      "612": "OembedInformationTest::::testSetVersion_1()",
      "613": "OembedInformationTest::::testSetVersion_1()",
      "614": "OembedInformationTest::::testSetVersion_1()",
      "615": "OembedInformationTest::::testSetVersion_1()",
      "616": "OembedInformationTest::::testSetVersion_1()",
      "617": "OembedInformationTest::::testSetVersion_1()",
      "618": "OembedInformationTest::::testSetVersion_1()",
      "619": "OembedInformationTest::::testSetVersion_1()",
      "620": "OembedInformationTest::::testSetVersion_1()",
      "621": "OembedInformationTest::::testSetVersion_1()",
      "630": "OembedInformationTest::::testSetWidth_1()",
      "631": "OembedInformationTest::::testSetWidth_1()",
      "632": "OembedInformationTest::::testSetWidth_1()",
      "633": "OembedInformationTest::::testSetWidth_1()",
      "634": "OembedInformationTest::::testSetWidth_1()",
      "635": "OembedInformationTest::::testSetWidth_1()",
      "636": "OembedInformationTest::::testSetWidth_1()",
      "637": "OembedInformationTest::::testSetWidth_1()",
      "638": "OembedInformationTest::::testSetWidth_1()",
      "639": "OembedInformationTest::::testSetWidth_1()",
      "640": "OembedInformationTest::::testSetWidth_1()",
      "641": "OembedInformationTest::::testSetWidth_1()",
      "642": "OembedInformationTest::::testSetWidth_1()",
      "643": "OembedInformationTest::::testSetWidth_1()",
      "644": "OembedInformationTest::::testSetWidth_1()",
      "645": "OembedInformationTest::::testSetWidth_1()",
      "646": "OembedInformationTest::::testSetWidth_1()",
      "647": "OembedInformationTest::::testSetWidth_1()",
      "648": "OembedInformationTest::::testSetWidth_1()",
      "649": "OembedInformationTest::::testSetWidth_1()",
      "650": "OembedInformationTest::::testSetWidth_1()",
      "659": "OembedInformationTest::::testToString_1()",
      "660": "OembedInformationTest::::testToString_1()",
      "661": "OembedInformationTest::::testToString_1()",
      "662": "OembedInformationTest::::testToString_1()",
      "663": "OembedInformationTest::::testToString_1()",
      "664": "OembedInformationTest::::testToString_1()",
      "665": "OembedInformationTest::::testToString_1()",
      "666": "OembedInformationTest::::testToString_1()",
      "667": "OembedInformationTest::::testToString_1()",
      "668": "OembedInformationTest::::testToString_1()",
      "669": "OembedInformationTest::::testToString_1()",
      "670": "OembedInformationTest::::testToString_1()",
      "671": "OembedInformationTest::::testToString_1()",
      "672": "OembedInformationTest::::testToString_1()",
      "673": "OembedInformationTest::::testToString_1()",
      "674": "OembedInformationTest::::testToString_1()",
      "675": "OembedInformationTest::::testToString_1()",
      "676": "OembedInformationTest::::testToString_1()",
      "677": "OembedInformationTest::::testToString_1()",
      "678": "OembedInformationTest::::testToString_1()",
      "679": "OembedInformationTest::::testToString_1()",
      "688": "OembedInformationTest::::testToString_2()",
      "689": "OembedInformationTest::::testToString_2()",
      "690": "OembedInformationTest::::testToString_2()",
      "691": "OembedInformationTest::::testToString_2()",
      "692": "OembedInformationTest::::testToString_2()",
      "693": "OembedInformationTest::::testToString_2()",
      "694": "OembedInformationTest::::testToString_2()",
      "695": "OembedInformationTest::::testToString_2()",
      "696": "OembedInformationTest::::testToString_2()",
      "697": "OembedInformationTest::::testToString_2()",
      "698": "OembedInformationTest::::testToString_2()",
      "699": "OembedInformationTest::::testToString_2()",
      "700": "OembedInformationTest::::testToString_2()",
      "701": "OembedInformationTest::::testToString_2()",
      "702": "OembedInformationTest::::testToString_2()",
      "703": "OembedInformationTest::::testToString_2()",
      "704": "OembedInformationTest::::testToString_2()",
      "705": "OembedInformationTest::::testToString_2()",
      "706": "OembedInformationTest::::testToString_2()",
      "707": "OembedInformationTest::::testToString_2()",
      "708": "OembedInformationTest::::testToString_2()",
      "718": "OembedInformationTest::::setUp()",
      "719": "OembedInformationTest::::setUp()",
      "720": "OembedInformationTest::::setUp()",
      "721": "OembedInformationTest::::setUp()",
      "722": "OembedInformationTest::::setUp()",
      "732": "OembedInformationTest::::tearDown()",
      "733": "OembedInformationTest::::tearDown()",
      "734": "OembedInformationTest::::tearDown()",
      "735": "OembedInformationTest::::tearDown()",
      "736": "OembedInformationTest::::tearDown()",
      "745": "OembedInformationTest::::main(java.lang.String[])",
      "746": "OembedInformationTest::::main(java.lang.String[])",
      "747": "OembedInformationTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          21,
          41
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          83,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::getAuthorName()"
      },
      {
        "test_lines": [
          50,
          70
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          115,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::getAuthorUrl()"
      },
      {
        "test_lines": [
          79,
          99
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          91,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::getHeight()"
      },
      {
        "test_lines": [
          108,
          128
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          139,
          143,
          144
        ],
        "label": "OembedInformation::::getMediaId()"
      },
      {
        "test_lines": [
          137,
          157
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          123,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::getProviderName()"
      },
      {
        "test_lines": [
          166,
          186
        ],
        "covered_lines": [
          11,
          59,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setProviderUrl(java.lang.String)"
      },
      {
        "test_lines": [
          195,
          215
        ],
        "covered_lines": [
          11,
          63,
          64,
          67,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::getTitle()"
      },
      {
        "test_lines": [
          224,
          244
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          131,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::getType()"
      },
      {
        "test_lines": [
          253,
          273
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          75,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::getUrl()"
      },
      {
        "test_lines": [
          282,
          302
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          107,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::getVersion()"
      },
      {
        "test_lines": [
          311,
          331
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          99,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::getWidth()"
      },
      {
        "test_lines": [
          340,
          360
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setAuthorName(java.lang.String)"
      },
      {
        "test_lines": [
          369,
          389
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setAuthorUrl(java.lang.String)"
      },
      {
        "test_lines": [
          398,
          418
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setHeight(java.lang.String)"
      },
      {
        "test_lines": [
          427,
          447
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setMediaId(java.lang.String)"
      },
      {
        "test_lines": [
          456,
          476
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setProviderName(java.lang.String)"
      },
      {
        "test_lines": [
          485,
          505
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setProviderUrl(java.lang.String)"
      },
      {
        "test_lines": [
          514,
          534
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setTitle(java.lang.String)"
      },
      {
        "test_lines": [
          543,
          563
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setType(java.lang.String)"
      },
      {
        "test_lines": [
          572,
          592
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setUrl(java.lang.String)"
      },
      {
        "test_lines": [
          601,
          621
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setVersion(java.lang.String)"
      },
      {
        "test_lines": [
          630,
          650
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144
        ],
        "label": "OembedInformation::::setWidth(java.lang.String)"
      },
      {
        "test_lines": [
          659,
          679
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144,
          169
        ],
        "label": "OembedInformation::::toString()"
      },
      {
        "test_lines": [
          688,
          708
        ],
        "covered_lines": [
          11,
          63,
          64,
          71,
          72,
          79,
          80,
          87,
          88,
          95,
          96,
          103,
          104,
          111,
          112,
          119,
          120,
          127,
          128,
          135,
          136,
          143,
          144,
          169
        ],
        "label": "OembedInformation::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/relationships/RelationshipFeed.java": {
    "class_content": [
      "package org.jinstagram.entity.relationships;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "\n",
      "public class RelationshipFeed extends InstagramObject{\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate RelationshipData data;\n",
      "\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the data\n",
      "\t */\n",
      "\tpublic RelationshipData getData() {\n",
      "\t\treturn data;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param data the data to set\n",
      "\t */\n",
      "\tpublic void setData(RelationshipData data) {\n",
      "\t\tthis.data = data;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"RelationshipFeed [data=%s, meta=%s]\", data, meta);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.relationships;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>RelationshipFeedTest</code> contains tests for the class\n",
      " * <code>{@link RelationshipFeed}</code>.\n",
      " *\n",
      " */\n",
      "public class RelationshipFeedTest {\n",
      "\t/**\n",
      "\t * Run the RelationshipData getData() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetData_1() throws Exception {\n",
      "\t\tRelationshipFeed fixture = new RelationshipFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new RelationshipData());\n",
      "\n",
      "\t\tRelationshipData result = fixture.getData();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"RelationshipData [incomingStatus=null, outgoingStatus=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getOutgoingStatus());\n",
      "\t\tassertEquals(false, result.isTargetUserPrivate());\n",
      "\t\tassertEquals(null, result.getIncomingStatus());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1() throws Exception {\n",
      "\t\tRelationshipFeed fixture = new RelationshipFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new RelationshipData());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setData(RelationshipData) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetData_1() throws Exception {\n",
      "\t\tRelationshipFeed fixture = new RelationshipFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new RelationshipData());\n",
      "\t\tRelationshipData data = new RelationshipData();\n",
      "\n",
      "\t\tfixture.setData(data);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1() throws Exception {\n",
      "\t\tRelationshipFeed fixture = new RelationshipFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new RelationshipData());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tRelationshipFeed fixture = new RelationshipFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new RelationshipData());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"RelationshipFeed [data=RelationshipData [incomingStatus=null, outgoingStatus=null], meta=Meta [code=0, errorMessage=null, errorType=null]]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "RelationshipFeed::::getMeta()": [
        18,
        20
      ],
      "RelationshipFeed::::setMeta(org.jinstagram.entity.common.Meta)": [
        25,
        27
      ],
      "RelationshipFeed::::getData()": [
        32,
        34
      ],
      "RelationshipFeed::::setData(org.jinstagram.entity.relationships.RelationshipData)": [
        39,
        41
      ],
      "RelationshipFeed::::toString()": [
        43,
        46
      ]
    },
    "test_method_lines_dic": {
      "RelationshipFeedTest::::testGetData_1()": [
        22,
        36
      ],
      "RelationshipFeedTest::::testGetMeta_1()": [
        45,
        59
      ],
      "RelationshipFeedTest::::testSetData_1()": [
        68,
        78
      ],
      "RelationshipFeedTest::::testSetMeta_1()": [
        87,
        97
      ],
      "RelationshipFeedTest::::testToString_1()": [
        106,
        118
      ]
    },
    "reverse_method_lines_dic": {
      "18": "RelationshipFeed::::getMeta()",
      "19": "RelationshipFeed::::getMeta()",
      "20": "RelationshipFeed::::getMeta()",
      "25": "RelationshipFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "26": "RelationshipFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "27": "RelationshipFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "32": "RelationshipFeed::::getData()",
      "33": "RelationshipFeed::::getData()",
      "34": "RelationshipFeed::::getData()",
      "39": "RelationshipFeed::::setData(org.jinstagram.entity.relationships.RelationshipData)",
      "40": "RelationshipFeed::::setData(org.jinstagram.entity.relationships.RelationshipData)",
      "41": "RelationshipFeed::::setData(org.jinstagram.entity.relationships.RelationshipData)",
      "43": "RelationshipFeed::::toString()",
      "44": "RelationshipFeed::::toString()",
      "45": "RelationshipFeed::::toString()",
      "46": "RelationshipFeed::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "22": "RelationshipFeedTest::::testGetData_1()",
      "23": "RelationshipFeedTest::::testGetData_1()",
      "24": "RelationshipFeedTest::::testGetData_1()",
      "25": "RelationshipFeedTest::::testGetData_1()",
      "26": "RelationshipFeedTest::::testGetData_1()",
      "27": "RelationshipFeedTest::::testGetData_1()",
      "28": "RelationshipFeedTest::::testGetData_1()",
      "29": "RelationshipFeedTest::::testGetData_1()",
      "30": "RelationshipFeedTest::::testGetData_1()",
      "31": "RelationshipFeedTest::::testGetData_1()",
      "32": "RelationshipFeedTest::::testGetData_1()",
      "33": "RelationshipFeedTest::::testGetData_1()",
      "34": "RelationshipFeedTest::::testGetData_1()",
      "35": "RelationshipFeedTest::::testGetData_1()",
      "36": "RelationshipFeedTest::::testGetData_1()",
      "45": "RelationshipFeedTest::::testGetMeta_1()",
      "46": "RelationshipFeedTest::::testGetMeta_1()",
      "47": "RelationshipFeedTest::::testGetMeta_1()",
      "48": "RelationshipFeedTest::::testGetMeta_1()",
      "49": "RelationshipFeedTest::::testGetMeta_1()",
      "50": "RelationshipFeedTest::::testGetMeta_1()",
      "51": "RelationshipFeedTest::::testGetMeta_1()",
      "52": "RelationshipFeedTest::::testGetMeta_1()",
      "53": "RelationshipFeedTest::::testGetMeta_1()",
      "54": "RelationshipFeedTest::::testGetMeta_1()",
      "55": "RelationshipFeedTest::::testGetMeta_1()",
      "56": "RelationshipFeedTest::::testGetMeta_1()",
      "57": "RelationshipFeedTest::::testGetMeta_1()",
      "58": "RelationshipFeedTest::::testGetMeta_1()",
      "59": "RelationshipFeedTest::::testGetMeta_1()",
      "68": "RelationshipFeedTest::::testSetData_1()",
      "69": "RelationshipFeedTest::::testSetData_1()",
      "70": "RelationshipFeedTest::::testSetData_1()",
      "71": "RelationshipFeedTest::::testSetData_1()",
      "72": "RelationshipFeedTest::::testSetData_1()",
      "73": "RelationshipFeedTest::::testSetData_1()",
      "74": "RelationshipFeedTest::::testSetData_1()",
      "75": "RelationshipFeedTest::::testSetData_1()",
      "76": "RelationshipFeedTest::::testSetData_1()",
      "77": "RelationshipFeedTest::::testSetData_1()",
      "78": "RelationshipFeedTest::::testSetData_1()",
      "87": "RelationshipFeedTest::::testSetMeta_1()",
      "88": "RelationshipFeedTest::::testSetMeta_1()",
      "89": "RelationshipFeedTest::::testSetMeta_1()",
      "90": "RelationshipFeedTest::::testSetMeta_1()",
      "91": "RelationshipFeedTest::::testSetMeta_1()",
      "92": "RelationshipFeedTest::::testSetMeta_1()",
      "93": "RelationshipFeedTest::::testSetMeta_1()",
      "94": "RelationshipFeedTest::::testSetMeta_1()",
      "95": "RelationshipFeedTest::::testSetMeta_1()",
      "96": "RelationshipFeedTest::::testSetMeta_1()",
      "97": "RelationshipFeedTest::::testSetMeta_1()",
      "106": "RelationshipFeedTest::::testToString_1()",
      "107": "RelationshipFeedTest::::testToString_1()",
      "108": "RelationshipFeedTest::::testToString_1()",
      "109": "RelationshipFeedTest::::testToString_1()",
      "110": "RelationshipFeedTest::::testToString_1()",
      "111": "RelationshipFeedTest::::testToString_1()",
      "112": "RelationshipFeedTest::::testToString_1()",
      "113": "RelationshipFeedTest::::testToString_1()",
      "114": "RelationshipFeedTest::::testToString_1()",
      "115": "RelationshipFeedTest::::testToString_1()",
      "116": "RelationshipFeedTest::::testToString_1()",
      "117": "RelationshipFeedTest::::testToString_1()",
      "118": "RelationshipFeedTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          36
        ],
        "covered_lines": [
          8,
          26,
          27,
          33,
          40,
          41
        ],
        "label": "RelationshipFeed::::getData()"
      },
      {
        "test_lines": [
          45,
          59
        ],
        "covered_lines": [
          8,
          19,
          26,
          27,
          40,
          41
        ],
        "label": "RelationshipFeed::::getMeta()"
      },
      {
        "test_lines": [
          68,
          78
        ],
        "covered_lines": [
          8,
          26,
          27,
          40,
          41
        ],
        "label": "RelationshipFeed::::setData(org.jinstagram.entity.relationships.RelationshipData)"
      },
      {
        "test_lines": [
          87,
          97
        ],
        "covered_lines": [
          8,
          26,
          27,
          40,
          41
        ],
        "label": "RelationshipFeed::::setMeta(org.jinstagram.entity.common.Meta)"
      },
      {
        "test_lines": [
          106,
          118
        ],
        "covered_lines": [
          8,
          26,
          27,
          40,
          41,
          45
        ],
        "label": "RelationshipFeed::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/relationships/RelationshipData.java": {
    "class_content": [
      "package org.jinstagram.entity.relationships;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class RelationshipData {\n",
      "\t\n",
      "\t@SerializedName(\"incoming_status\")\n",
      "\tprivate String incomingStatus;\n",
      "\n",
      "\t@SerializedName(\"outgoing_status\")\n",
      "\tprivate String outgoingStatus;\n",
      "\n",
      "\t@SerializedName(\"target_user_is_private\")\n",
      "\tprivate boolean targetUserPrivate;\n",
      "\t\n",
      "\t/**\n",
      "\t * @return the outgoingStatus\n",
      "\t */\n",
      "\tpublic String getOutgoingStatus() {\n",
      "\t\treturn outgoingStatus;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param outgoingStatus the outgoingStatus to set\n",
      "\t */\n",
      "\tpublic void setOutgoingStatus(String outgoingStatus) {\n",
      "\t\tthis.outgoingStatus = outgoingStatus;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param target_user_is_private set user is locked or not\n",
      "\t */\n",
      "\tpublic void setTargetUserPrivate(boolean targetUserPrivate){\n",
      "\t\tthis.targetUserPrivate = targetUserPrivate;\n",
      "\t}\n",
      "\t/**\n",
      "\t * @return the target_user_is_private boolean\n",
      "\t */\n",
      "\tpublic boolean isTargetUserPrivate(){\n",
      "\t\treturn targetUserPrivate;\n",
      "\t}\n",
      "\t/**\n",
      "\t * @return the incomingStatus\n",
      "\t */\n",
      "\tpublic String getIncomingStatus() {\n",
      "\t\treturn incomingStatus;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param incomingStatus the incomingStatus to set\n",
      "\t */\n",
      "\tpublic void setIncomingStatus(String incomingStatus) {\n",
      "\t\tthis.incomingStatus = incomingStatus;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"RelationshipData [incomingStatus=%s, outgoingStatus=%s]\", incomingStatus, outgoingStatus);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.relationships;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>RelationshipDataTest</code> contains tests for the class <code>{@link RelationshipData}</code>.\n",
      " */\n",
      "public class RelationshipDataTest {\n",
      "\t/**\n",
      "\t * Run the String getIncomingStatus() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetIncomingStatus_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tRelationshipData fixture = new RelationshipData();\n",
      "\t\tfixture.setIncomingStatus(\"\");\n",
      "\t\tfixture.setOutgoingStatus(\"\");\n",
      "\t\tfixture.setTargetUserPrivate(true);\n",
      "\n",
      "\t\tString result = fixture.getIncomingStatus();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getOutgoingStatus() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetOutgoingStatus_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tRelationshipData fixture = new RelationshipData();\n",
      "\t\tfixture.setIncomingStatus(\"\");\n",
      "\t\tfixture.setOutgoingStatus(\"\");\n",
      "\t\tfixture.setTargetUserPrivate(true);\n",
      "\n",
      "\t\tString result = fixture.getOutgoingStatus();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the boolean isTargetUserPrivate() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testIsTargetUserPrivate_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tRelationshipData fixture = new RelationshipData();\n",
      "\t\tfixture.setIncomingStatus(\"\");\n",
      "\t\tfixture.setOutgoingStatus(\"\");\n",
      "\t\tfixture.setTargetUserPrivate(true);\n",
      "\n",
      "\t\tboolean result = fixture.isTargetUserPrivate();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(true, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the boolean isTargetUserPrivate() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testIsTargetUserPrivate_2()\n",
      "\t\tthrows Exception {\n",
      "\t\tRelationshipData fixture = new RelationshipData();\n",
      "\t\tfixture.setIncomingStatus(\"\");\n",
      "\t\tfixture.setOutgoingStatus(\"\");\n",
      "\t\tfixture.setTargetUserPrivate(false);\n",
      "\n",
      "\t\tboolean result = fixture.isTargetUserPrivate();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(false, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setIncomingStatus(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetIncomingStatus_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tRelationshipData fixture = new RelationshipData();\n",
      "\t\tfixture.setIncomingStatus(\"\");\n",
      "\t\tfixture.setOutgoingStatus(\"\");\n",
      "\t\tfixture.setTargetUserPrivate(true);\n",
      "\t\tString incomingStatus = \"\";\n",
      "\n",
      "\t\tfixture.setIncomingStatus(incomingStatus);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setOutgoingStatus(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetOutgoingStatus_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tRelationshipData fixture = new RelationshipData();\n",
      "\t\tfixture.setIncomingStatus(\"\");\n",
      "\t\tfixture.setOutgoingStatus(\"\");\n",
      "\t\tfixture.setTargetUserPrivate(true);\n",
      "\t\tString outgoingStatus = \"\";\n",
      "\n",
      "\t\tfixture.setOutgoingStatus(outgoingStatus);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setTargetUserPrivate(boolean) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetTargetUserPrivate_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tRelationshipData fixture = new RelationshipData();\n",
      "\t\tfixture.setIncomingStatus(\"\");\n",
      "\t\tfixture.setOutgoingStatus(\"\");\n",
      "\t\tfixture.setTargetUserPrivate(true);\n",
      "\t\tboolean targetUserPrivate = true;\n",
      "\n",
      "\t\tfixture.setTargetUserPrivate(targetUserPrivate);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tRelationshipData fixture = new RelationshipData();\n",
      "\t\tfixture.setIncomingStatus(\"\");\n",
      "\t\tfixture.setOutgoingStatus(\"\");\n",
      "\t\tfixture.setTargetUserPrivate(true);\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"RelationshipData [incomingStatus=, outgoingStatus=]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "RelationshipData::::getOutgoingStatus()": [
        19,
        21
      ],
      "RelationshipData::::setOutgoingStatus(java.lang.String)": [
        26,
        28
      ],
      "RelationshipData::::setTargetUserPrivate(boolean)": [
        33,
        35
      ],
      "RelationshipData::::isTargetUserPrivate()": [
        39,
        41
      ],
      "RelationshipData::::getIncomingStatus()": [
        45,
        47
      ],
      "RelationshipData::::setIncomingStatus(java.lang.String)": [
        52,
        54
      ],
      "RelationshipData::::toString()": [
        56,
        59
      ]
    },
    "test_method_lines_dic": {
      "RelationshipDataTest::::testGetIncomingStatus_1()": [
        17,
        29
      ],
      "RelationshipDataTest::::testGetOutgoingStatus_1()": [
        38,
        50
      ],
      "RelationshipDataTest::::testIsTargetUserPrivate_1()": [
        59,
        71
      ],
      "RelationshipDataTest::::testIsTargetUserPrivate_2()": [
        80,
        92
      ],
      "RelationshipDataTest::::testSetIncomingStatus_1()": [
        101,
        113
      ],
      "RelationshipDataTest::::testSetOutgoingStatus_1()": [
        122,
        134
      ],
      "RelationshipDataTest::::testSetTargetUserPrivate_1()": [
        143,
        155
      ],
      "RelationshipDataTest::::testToString_1()": [
        164,
        176
      ]
    },
    "reverse_method_lines_dic": {
      "19": "RelationshipData::::getOutgoingStatus()",
      "20": "RelationshipData::::getOutgoingStatus()",
      "21": "RelationshipData::::getOutgoingStatus()",
      "26": "RelationshipData::::setOutgoingStatus(java.lang.String)",
      "27": "RelationshipData::::setOutgoingStatus(java.lang.String)",
      "28": "RelationshipData::::setOutgoingStatus(java.lang.String)",
      "33": "RelationshipData::::setTargetUserPrivate(boolean)",
      "34": "RelationshipData::::setTargetUserPrivate(boolean)",
      "35": "RelationshipData::::setTargetUserPrivate(boolean)",
      "39": "RelationshipData::::isTargetUserPrivate()",
      "40": "RelationshipData::::isTargetUserPrivate()",
      "41": "RelationshipData::::isTargetUserPrivate()",
      "45": "RelationshipData::::getIncomingStatus()",
      "46": "RelationshipData::::getIncomingStatus()",
      "47": "RelationshipData::::getIncomingStatus()",
      "52": "RelationshipData::::setIncomingStatus(java.lang.String)",
      "53": "RelationshipData::::setIncomingStatus(java.lang.String)",
      "54": "RelationshipData::::setIncomingStatus(java.lang.String)",
      "56": "RelationshipData::::toString()",
      "57": "RelationshipData::::toString()",
      "58": "RelationshipData::::toString()",
      "59": "RelationshipData::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "17": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "18": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "19": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "20": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "21": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "22": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "23": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "24": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "25": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "26": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "27": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "28": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "29": "RelationshipDataTest::::testGetIncomingStatus_1()",
      "38": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "39": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "40": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "41": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "42": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "43": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "44": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "45": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "46": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "47": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "48": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "49": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "50": "RelationshipDataTest::::testGetOutgoingStatus_1()",
      "59": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "60": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "61": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "62": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "63": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "64": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "65": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "66": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "67": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "68": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "69": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "70": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "71": "RelationshipDataTest::::testIsTargetUserPrivate_1()",
      "80": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "81": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "82": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "83": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "84": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "85": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "86": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "87": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "88": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "89": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "90": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "91": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "92": "RelationshipDataTest::::testIsTargetUserPrivate_2()",
      "101": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "102": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "103": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "104": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "105": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "106": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "107": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "108": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "109": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "110": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "111": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "112": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "113": "RelationshipDataTest::::testSetIncomingStatus_1()",
      "122": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "123": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "124": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "125": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "126": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "127": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "128": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "129": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "130": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "131": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "132": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "133": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "134": "RelationshipDataTest::::testSetOutgoingStatus_1()",
      "143": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "144": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "145": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "146": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "147": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "148": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "149": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "150": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "151": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "152": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "153": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "154": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "155": "RelationshipDataTest::::testSetTargetUserPrivate_1()",
      "164": "RelationshipDataTest::::testToString_1()",
      "165": "RelationshipDataTest::::testToString_1()",
      "166": "RelationshipDataTest::::testToString_1()",
      "167": "RelationshipDataTest::::testToString_1()",
      "168": "RelationshipDataTest::::testToString_1()",
      "169": "RelationshipDataTest::::testToString_1()",
      "170": "RelationshipDataTest::::testToString_1()",
      "171": "RelationshipDataTest::::testToString_1()",
      "172": "RelationshipDataTest::::testToString_1()",
      "173": "RelationshipDataTest::::testToString_1()",
      "174": "RelationshipDataTest::::testToString_1()",
      "175": "RelationshipDataTest::::testToString_1()",
      "176": "RelationshipDataTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          17,
          29
        ],
        "covered_lines": [
          5,
          27,
          28,
          34,
          35,
          46,
          53,
          54
        ],
        "label": "RelationshipData::::getIncomingStatus()"
      },
      {
        "test_lines": [
          38,
          50
        ],
        "covered_lines": [
          5,
          20,
          27,
          28,
          34,
          35,
          53,
          54
        ],
        "label": "RelationshipData::::getOutgoingStatus()"
      },
      {
        "test_lines": [
          59,
          71
        ],
        "covered_lines": [
          5,
          27,
          28,
          34,
          35,
          40,
          53,
          54
        ],
        "label": "RelationshipData::::isTargetUserPrivate()"
      },
      {
        "test_lines": [
          80,
          92
        ],
        "covered_lines": [
          5,
          27,
          28,
          34,
          35,
          40,
          53,
          54
        ],
        "label": "RelationshipData::::isTargetUserPrivate()"
      },
      {
        "test_lines": [
          101,
          113
        ],
        "covered_lines": [
          5,
          27,
          28,
          34,
          35,
          53,
          54
        ],
        "label": "RelationshipData::::setIncomingStatus(java.lang.String)"
      },
      {
        "test_lines": [
          122,
          134
        ],
        "covered_lines": [
          5,
          27,
          28,
          34,
          35,
          53,
          54
        ],
        "label": "RelationshipData::::setOutgoingStatus(java.lang.String)"
      },
      {
        "test_lines": [
          143,
          155
        ],
        "covered_lines": [
          5,
          27,
          28,
          34,
          35,
          53,
          54
        ],
        "label": "RelationshipData::::setTargetUserPrivate(boolean)"
      },
      {
        "test_lines": [
          164,
          176
        ],
        "covered_lines": [
          5,
          27,
          28,
          34,
          35,
          53,
          54,
          58
        ],
        "label": "RelationshipData::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/locations/LocationSearchFeed.java": {
    "class_content": [
      "package org.jinstagram.entity.locations;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Location;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class LocationSearchFeed extends InstagramObject{\n",
      "\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate List<Location> locationList;\n",
      "\n",
      "\t/**\n",
      "\t * @return the locationList\n",
      "\t */\n",
      "\tpublic List<Location> getLocationList() {\n",
      "\t\treturn locationList;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param locationList\n",
      "\t *            the locationList to set\n",
      "\t */\n",
      "\tpublic void setLocationList(List<Location> locationList) {\n",
      "\t\tthis.locationList = locationList;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"LocationSearchFeed [locationList=%s]\", locationList);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.locations;\n",
      "\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "import org.jinstagram.entity.common.Location;\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>LocationSearchFeedTest</code> contains tests for the class <code>{@link LocationSearchFeed}</code>.\n",
      " *\n",
      " * @generatedBy CodePro at 31/01/16 15:05\n",
      " * @author SachinHandiekar\n",
      " * @version $Revision: 1.0 $\n",
      " */\n",
      "public class LocationSearchFeedTest {\n",
      "\t/**\n",
      "\t * Run the List<Location> getLocationList() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLocationList_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocationSearchFeed fixture = new LocationSearchFeed();\n",
      "\t\tfixture.setLocationList(new LinkedList());\n",
      "\n",
      "\t\tList<Location> result = fixture.getLocationList();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLocationList(List<Location>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLocationList_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocationSearchFeed fixture = new LocationSearchFeed();\n",
      "\t\tfixture.setLocationList(new LinkedList());\n",
      "\t\tList<Location> locationList = new LinkedList();\n",
      "\n",
      "\t\tfixture.setLocationList(locationList);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocationSearchFeed fixture = new LocationSearchFeed();\n",
      "\t\tfixture.setLocationList(new LinkedList());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"LocationSearchFeed [locationList=[]]\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the initialization fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp()\n",
      "\t\tthrows Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown()\n",
      "\t\tthrows Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args the command line arguments\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(LocationSearchFeedTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {
      "LocationSearchFeed::::getLocationList()": [
        18,
        20
      ],
      "LocationSearchFeed::::setLocationList(java.util.List<org.jinstagram.entity.common.Location>)": [
        26,
        28
      ],
      "LocationSearchFeed::::toString()": [
        30,
        33
      ]
    },
    "test_method_lines_dic": {
      "LocationSearchFeedTest::::testGetLocationList_1()": [
        24,
        35
      ],
      "LocationSearchFeedTest::::testSetLocationList_1()": [
        44,
        54
      ],
      "LocationSearchFeedTest::::testToString_1()": [
        63,
        73
      ],
      "LocationSearchFeedTest::::setUp()": [
        83,
        87
      ],
      "LocationSearchFeedTest::::tearDown()": [
        97,
        101
      ],
      "LocationSearchFeedTest::::main(java.lang.String[])": [
        110,
        112
      ]
    },
    "reverse_method_lines_dic": {
      "18": "LocationSearchFeed::::getLocationList()",
      "19": "LocationSearchFeed::::getLocationList()",
      "20": "LocationSearchFeed::::getLocationList()",
      "26": "LocationSearchFeed::::setLocationList(java.util.List<org.jinstagram.entity.common.Location>)",
      "27": "LocationSearchFeed::::setLocationList(java.util.List<org.jinstagram.entity.common.Location>)",
      "28": "LocationSearchFeed::::setLocationList(java.util.List<org.jinstagram.entity.common.Location>)",
      "30": "LocationSearchFeed::::toString()",
      "31": "LocationSearchFeed::::toString()",
      "32": "LocationSearchFeed::::toString()",
      "33": "LocationSearchFeed::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "24": "LocationSearchFeedTest::::testGetLocationList_1()",
      "25": "LocationSearchFeedTest::::testGetLocationList_1()",
      "26": "LocationSearchFeedTest::::testGetLocationList_1()",
      "27": "LocationSearchFeedTest::::testGetLocationList_1()",
      "28": "LocationSearchFeedTest::::testGetLocationList_1()",
      "29": "LocationSearchFeedTest::::testGetLocationList_1()",
      "30": "LocationSearchFeedTest::::testGetLocationList_1()",
      "31": "LocationSearchFeedTest::::testGetLocationList_1()",
      "32": "LocationSearchFeedTest::::testGetLocationList_1()",
      "33": "LocationSearchFeedTest::::testGetLocationList_1()",
      "34": "LocationSearchFeedTest::::testGetLocationList_1()",
      "35": "LocationSearchFeedTest::::testGetLocationList_1()",
      "44": "LocationSearchFeedTest::::testSetLocationList_1()",
      "45": "LocationSearchFeedTest::::testSetLocationList_1()",
      "46": "LocationSearchFeedTest::::testSetLocationList_1()",
      "47": "LocationSearchFeedTest::::testSetLocationList_1()",
      "48": "LocationSearchFeedTest::::testSetLocationList_1()",
      "49": "LocationSearchFeedTest::::testSetLocationList_1()",
      "50": "LocationSearchFeedTest::::testSetLocationList_1()",
      "51": "LocationSearchFeedTest::::testSetLocationList_1()",
      "52": "LocationSearchFeedTest::::testSetLocationList_1()",
      "53": "LocationSearchFeedTest::::testSetLocationList_1()",
      "54": "LocationSearchFeedTest::::testSetLocationList_1()",
      "63": "LocationSearchFeedTest::::testToString_1()",
      "64": "LocationSearchFeedTest::::testToString_1()",
      "65": "LocationSearchFeedTest::::testToString_1()",
      "66": "LocationSearchFeedTest::::testToString_1()",
      "67": "LocationSearchFeedTest::::testToString_1()",
      "68": "LocationSearchFeedTest::::testToString_1()",
      "69": "LocationSearchFeedTest::::testToString_1()",
      "70": "LocationSearchFeedTest::::testToString_1()",
      "71": "LocationSearchFeedTest::::testToString_1()",
      "72": "LocationSearchFeedTest::::testToString_1()",
      "73": "LocationSearchFeedTest::::testToString_1()",
      "83": "LocationSearchFeedTest::::setUp()",
      "84": "LocationSearchFeedTest::::setUp()",
      "85": "LocationSearchFeedTest::::setUp()",
      "86": "LocationSearchFeedTest::::setUp()",
      "87": "LocationSearchFeedTest::::setUp()",
      "97": "LocationSearchFeedTest::::tearDown()",
      "98": "LocationSearchFeedTest::::tearDown()",
      "99": "LocationSearchFeedTest::::tearDown()",
      "100": "LocationSearchFeedTest::::tearDown()",
      "101": "LocationSearchFeedTest::::tearDown()",
      "110": "LocationSearchFeedTest::::main(java.lang.String[])",
      "111": "LocationSearchFeedTest::::main(java.lang.String[])",
      "112": "LocationSearchFeedTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          24,
          35
        ],
        "covered_lines": [
          10,
          19,
          27,
          28
        ],
        "label": "LocationSearchFeed::::getLocationList()"
      },
      {
        "test_lines": [
          44,
          54
        ],
        "covered_lines": [
          10,
          27,
          28
        ],
        "label": "LocationSearchFeed::::setLocationList(java.util.List<org.jinstagram.entity.common.Location>)"
      },
      {
        "test_lines": [
          63,
          73
        ],
        "covered_lines": [
          10,
          27,
          28,
          32
        ],
        "label": "LocationSearchFeed::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/locations/LocationInfo.java": {
    "class_content": [
      "package org.jinstagram.entity.locations;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Location;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class LocationInfo extends InstagramObject{\n",
      "\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate Location locationData;\n",
      "\n",
      "\tpublic Location getLocationData() {\n",
      "\t\treturn locationData;\n",
      "\t}\n",
      "\n",
      "\tpublic void setLocationData(Location locationData) {\n",
      "\t\tthis.locationData = locationData;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"LocationInfo [locationData=%s]\", locationData);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.locations;\n",
      "\n",
      "import org.jinstagram.entity.common.Location;\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>LocationInfoTest</code> contains tests for the class <code>{@link LocationInfo}</code>.\n",
      " *\n",
      " * @generatedBy CodePro at 31/01/16 15:05\n",
      " * @author SachinHandiekar\n",
      " * @version $Revision: 1.0 $\n",
      " */\n",
      "public class LocationInfoTest {\n",
      "\t/**\n",
      "\t * Run the Location getLocationData() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLocationData_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocationInfo fixture = new LocationInfo();\n",
      "\t\tfixture.setLocationData(new Location());\n",
      "\n",
      "\t\tLocation result = fixture.getLocationData();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0.0, result.getLatitude(), 1.0);\n",
      "\t\tassertEquals(0.0, result.getLongitude(), 1.0);\n",
      "\t\tassertEquals(\"Location [id=null, name=null, latitude=0.0, longitude=0.0]\", result.toString());\n",
      "\t\tassertEquals(null, result.getName());\n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLocationData(Location) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLocationData_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocationInfo fixture = new LocationInfo();\n",
      "\t\tfixture.setLocationData(new Location());\n",
      "\t\tLocation locationData = new Location();\n",
      "\n",
      "\t\tfixture.setLocationData(locationData);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tLocationInfo fixture = new LocationInfo();\n",
      "\t\tfixture.setLocationData(new Location());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"LocationInfo [locationData=Location [id=null, name=null, latitude=0.0, longitude=0.0]]\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the initialization fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp()\n",
      "\t\tthrows Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown()\n",
      "\t\tthrows Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args the command line arguments\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(LocationInfoTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {
      "LocationInfo::::getLocationData()": [
        13,
        15
      ],
      "LocationInfo::::setLocationData(org.jinstagram.entity.common.Location)": [
        17,
        19
      ],
      "LocationInfo::::toString()": [
        21,
        24
      ]
    },
    "test_method_lines_dic": {
      "LocationInfoTest::::testGetLocationData_1()": [
        22,
        37
      ],
      "LocationInfoTest::::testSetLocationData_1()": [
        46,
        56
      ],
      "LocationInfoTest::::testToString_1()": [
        65,
        75
      ],
      "LocationInfoTest::::setUp()": [
        85,
        89
      ],
      "LocationInfoTest::::tearDown()": [
        99,
        103
      ],
      "LocationInfoTest::::main(java.lang.String[])": [
        112,
        114
      ]
    },
    "reverse_method_lines_dic": {
      "13": "LocationInfo::::getLocationData()",
      "14": "LocationInfo::::getLocationData()",
      "15": "LocationInfo::::getLocationData()",
      "17": "LocationInfo::::setLocationData(org.jinstagram.entity.common.Location)",
      "18": "LocationInfo::::setLocationData(org.jinstagram.entity.common.Location)",
      "19": "LocationInfo::::setLocationData(org.jinstagram.entity.common.Location)",
      "21": "LocationInfo::::toString()",
      "22": "LocationInfo::::toString()",
      "23": "LocationInfo::::toString()",
      "24": "LocationInfo::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "22": "LocationInfoTest::::testGetLocationData_1()",
      "23": "LocationInfoTest::::testGetLocationData_1()",
      "24": "LocationInfoTest::::testGetLocationData_1()",
      "25": "LocationInfoTest::::testGetLocationData_1()",
      "26": "LocationInfoTest::::testGetLocationData_1()",
      "27": "LocationInfoTest::::testGetLocationData_1()",
      "28": "LocationInfoTest::::testGetLocationData_1()",
      "29": "LocationInfoTest::::testGetLocationData_1()",
      "30": "LocationInfoTest::::testGetLocationData_1()",
      "31": "LocationInfoTest::::testGetLocationData_1()",
      "32": "LocationInfoTest::::testGetLocationData_1()",
      "33": "LocationInfoTest::::testGetLocationData_1()",
      "34": "LocationInfoTest::::testGetLocationData_1()",
      "35": "LocationInfoTest::::testGetLocationData_1()",
      "36": "LocationInfoTest::::testGetLocationData_1()",
      "37": "LocationInfoTest::::testGetLocationData_1()",
      "46": "LocationInfoTest::::testSetLocationData_1()",
      "47": "LocationInfoTest::::testSetLocationData_1()",
      "48": "LocationInfoTest::::testSetLocationData_1()",
      "49": "LocationInfoTest::::testSetLocationData_1()",
      "50": "LocationInfoTest::::testSetLocationData_1()",
      "51": "LocationInfoTest::::testSetLocationData_1()",
      "52": "LocationInfoTest::::testSetLocationData_1()",
      "53": "LocationInfoTest::::testSetLocationData_1()",
      "54": "LocationInfoTest::::testSetLocationData_1()",
      "55": "LocationInfoTest::::testSetLocationData_1()",
      "56": "LocationInfoTest::::testSetLocationData_1()",
      "65": "LocationInfoTest::::testToString_1()",
      "66": "LocationInfoTest::::testToString_1()",
      "67": "LocationInfoTest::::testToString_1()",
      "68": "LocationInfoTest::::testToString_1()",
      "69": "LocationInfoTest::::testToString_1()",
      "70": "LocationInfoTest::::testToString_1()",
      "71": "LocationInfoTest::::testToString_1()",
      "72": "LocationInfoTest::::testToString_1()",
      "73": "LocationInfoTest::::testToString_1()",
      "74": "LocationInfoTest::::testToString_1()",
      "75": "LocationInfoTest::::testToString_1()",
      "85": "LocationInfoTest::::setUp()",
      "86": "LocationInfoTest::::setUp()",
      "87": "LocationInfoTest::::setUp()",
      "88": "LocationInfoTest::::setUp()",
      "89": "LocationInfoTest::::setUp()",
      "99": "LocationInfoTest::::tearDown()",
      "100": "LocationInfoTest::::tearDown()",
      "101": "LocationInfoTest::::tearDown()",
      "102": "LocationInfoTest::::tearDown()",
      "103": "LocationInfoTest::::tearDown()",
      "112": "LocationInfoTest::::main(java.lang.String[])",
      "113": "LocationInfoTest::::main(java.lang.String[])",
      "114": "LocationInfoTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          22,
          37
        ],
        "covered_lines": [
          8,
          14,
          18,
          19
        ],
        "label": "LocationInfo::::getLocationData()"
      },
      {
        "test_lines": [
          46,
          56
        ],
        "covered_lines": [
          8,
          18,
          19
        ],
        "label": "LocationInfo::::setLocationData(org.jinstagram.entity.common.Location)"
      },
      {
        "test_lines": [
          65,
          75
        ],
        "covered_lines": [
          8,
          18,
          19,
          23
        ],
        "label": "LocationInfo::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/tags/TagInfoData.java": {
    "class_content": [
      "package org.jinstagram.entity.tags;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class TagInfoData {\n",
      "\t@SerializedName(\"media_count\")\n",
      "\tprivate long mediaCount;\n",
      "\n",
      "\t@SerializedName(\"name\")\n",
      "\tprivate String tagName;\n",
      "\n",
      "\t/**\n",
      "\t * @return the mediaCount\n",
      "\t */\n",
      "\tpublic long getMediaCount() {\n",
      "\t\treturn mediaCount;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param mediaCount the mediaCount to set\n",
      "\t */\n",
      "\tpublic void setMediaCount(long mediaCount) {\n",
      "\t\tthis.mediaCount = mediaCount;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the tagName\n",
      "\t */\n",
      "\tpublic String getTagName() {\n",
      "\t\treturn tagName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param tagName the tagName to set\n",
      "\t */\n",
      "\tpublic void setTagName(String tagName) {\n",
      "\t\tthis.tagName = tagName;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"TagInfoData [mediaCount=%s, tagName=%s]\", mediaCount, tagName);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.tags;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>TagInfoDataTest</code> contains tests for the class\n",
      " * <code>{@link TagInfoData}</code>.\n",
      " */\n",
      "public class TagInfoDataTest {\n",
      "\t/**\n",
      "\t * Run the long getMediaCount() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMediaCount_1() throws Exception {\n",
      "\t\tTagInfoData fixture = new TagInfoData();\n",
      "\t\tfixture.setMediaCount(1L);\n",
      "\t\tfixture.setTagName(\"\");\n",
      "\n",
      "\t\tlong result = fixture.getMediaCount();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1L, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getTagName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetTagName_1() throws Exception {\n",
      "\t\tTagInfoData fixture = new TagInfoData();\n",
      "\t\tfixture.setMediaCount(1L);\n",
      "\t\tfixture.setTagName(\"\");\n",
      "\n",
      "\t\tString result = fixture.getTagName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMediaCount(long) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMediaCount_1() throws Exception {\n",
      "\t\tTagInfoData fixture = new TagInfoData();\n",
      "\t\tfixture.setMediaCount(1L);\n",
      "\t\tfixture.setTagName(\"\");\n",
      "\t\tlong mediaCount = 1L;\n",
      "\n",
      "\t\tfixture.setMediaCount(mediaCount);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setTagName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetTagName_1() throws Exception {\n",
      "\t\tTagInfoData fixture = new TagInfoData();\n",
      "\t\tfixture.setMediaCount(1L);\n",
      "\t\tfixture.setTagName(\"\");\n",
      "\t\tString tagName = \"\";\n",
      "\n",
      "\t\tfixture.setTagName(tagName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tTagInfoData fixture = new TagInfoData();\n",
      "\t\tfixture.setMediaCount(1L);\n",
      "\t\tfixture.setTagName(\"\");\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"TagInfoData [mediaCount=1, tagName=]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "TagInfoData::::getMediaCount()": [
        15,
        17
      ],
      "TagInfoData::::setMediaCount(long)": [
        22,
        24
      ],
      "TagInfoData::::getTagName()": [
        29,
        31
      ],
      "TagInfoData::::setTagName(java.lang.String)": [
        36,
        38
      ],
      "TagInfoData::::toString()": [
        40,
        43
      ]
    },
    "test_method_lines_dic": {
      "TagInfoDataTest::::testGetMediaCount_1()": [
        19,
        29
      ],
      "TagInfoDataTest::::testGetTagName_1()": [
        38,
        48
      ],
      "TagInfoDataTest::::testSetMediaCount_1()": [
        57,
        67
      ],
      "TagInfoDataTest::::testSetTagName_1()": [
        76,
        86
      ],
      "TagInfoDataTest::::testToString_1()": [
        95,
        105
      ]
    },
    "reverse_method_lines_dic": {
      "15": "TagInfoData::::getMediaCount()",
      "16": "TagInfoData::::getMediaCount()",
      "17": "TagInfoData::::getMediaCount()",
      "22": "TagInfoData::::setMediaCount(long)",
      "23": "TagInfoData::::setMediaCount(long)",
      "24": "TagInfoData::::setMediaCount(long)",
      "29": "TagInfoData::::getTagName()",
      "30": "TagInfoData::::getTagName()",
      "31": "TagInfoData::::getTagName()",
      "36": "TagInfoData::::setTagName(java.lang.String)",
      "37": "TagInfoData::::setTagName(java.lang.String)",
      "38": "TagInfoData::::setTagName(java.lang.String)",
      "40": "TagInfoData::::toString()",
      "41": "TagInfoData::::toString()",
      "42": "TagInfoData::::toString()",
      "43": "TagInfoData::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "19": "TagInfoDataTest::::testGetMediaCount_1()",
      "20": "TagInfoDataTest::::testGetMediaCount_1()",
      "21": "TagInfoDataTest::::testGetMediaCount_1()",
      "22": "TagInfoDataTest::::testGetMediaCount_1()",
      "23": "TagInfoDataTest::::testGetMediaCount_1()",
      "24": "TagInfoDataTest::::testGetMediaCount_1()",
      "25": "TagInfoDataTest::::testGetMediaCount_1()",
      "26": "TagInfoDataTest::::testGetMediaCount_1()",
      "27": "TagInfoDataTest::::testGetMediaCount_1()",
      "28": "TagInfoDataTest::::testGetMediaCount_1()",
      "29": "TagInfoDataTest::::testGetMediaCount_1()",
      "38": "TagInfoDataTest::::testGetTagName_1()",
      "39": "TagInfoDataTest::::testGetTagName_1()",
      "40": "TagInfoDataTest::::testGetTagName_1()",
      "41": "TagInfoDataTest::::testGetTagName_1()",
      "42": "TagInfoDataTest::::testGetTagName_1()",
      "43": "TagInfoDataTest::::testGetTagName_1()",
      "44": "TagInfoDataTest::::testGetTagName_1()",
      "45": "TagInfoDataTest::::testGetTagName_1()",
      "46": "TagInfoDataTest::::testGetTagName_1()",
      "47": "TagInfoDataTest::::testGetTagName_1()",
      "48": "TagInfoDataTest::::testGetTagName_1()",
      "57": "TagInfoDataTest::::testSetMediaCount_1()",
      "58": "TagInfoDataTest::::testSetMediaCount_1()",
      "59": "TagInfoDataTest::::testSetMediaCount_1()",
      "60": "TagInfoDataTest::::testSetMediaCount_1()",
      "61": "TagInfoDataTest::::testSetMediaCount_1()",
      "62": "TagInfoDataTest::::testSetMediaCount_1()",
      "63": "TagInfoDataTest::::testSetMediaCount_1()",
      "64": "TagInfoDataTest::::testSetMediaCount_1()",
      "65": "TagInfoDataTest::::testSetMediaCount_1()",
      "66": "TagInfoDataTest::::testSetMediaCount_1()",
      "67": "TagInfoDataTest::::testSetMediaCount_1()",
      "76": "TagInfoDataTest::::testSetTagName_1()",
      "77": "TagInfoDataTest::::testSetTagName_1()",
      "78": "TagInfoDataTest::::testSetTagName_1()",
      "79": "TagInfoDataTest::::testSetTagName_1()",
      "80": "TagInfoDataTest::::testSetTagName_1()",
      "81": "TagInfoDataTest::::testSetTagName_1()",
      "82": "TagInfoDataTest::::testSetTagName_1()",
      "83": "TagInfoDataTest::::testSetTagName_1()",
      "84": "TagInfoDataTest::::testSetTagName_1()",
      "85": "TagInfoDataTest::::testSetTagName_1()",
      "86": "TagInfoDataTest::::testSetTagName_1()",
      "95": "TagInfoDataTest::::testToString_1()",
      "96": "TagInfoDataTest::::testToString_1()",
      "97": "TagInfoDataTest::::testToString_1()",
      "98": "TagInfoDataTest::::testToString_1()",
      "99": "TagInfoDataTest::::testToString_1()",
      "100": "TagInfoDataTest::::testToString_1()",
      "101": "TagInfoDataTest::::testToString_1()",
      "102": "TagInfoDataTest::::testToString_1()",
      "103": "TagInfoDataTest::::testToString_1()",
      "104": "TagInfoDataTest::::testToString_1()",
      "105": "TagInfoDataTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          19,
          29
        ],
        "covered_lines": [
          5,
          16,
          23,
          24,
          37,
          38
        ],
        "label": "TagInfoData::::getMediaCount()"
      },
      {
        "test_lines": [
          38,
          48
        ],
        "covered_lines": [
          5,
          23,
          24,
          30,
          37,
          38
        ],
        "label": "TagInfoData::::getTagName()"
      },
      {
        "test_lines": [
          57,
          67
        ],
        "covered_lines": [
          5,
          23,
          24,
          37,
          38
        ],
        "label": "TagInfoData::::setMediaCount(long)"
      },
      {
        "test_lines": [
          76,
          86
        ],
        "covered_lines": [
          5,
          23,
          24,
          37,
          38
        ],
        "label": "TagInfoData::::setTagName(java.lang.String)"
      },
      {
        "test_lines": [
          95,
          105
        ],
        "covered_lines": [
          5,
          23,
          24,
          37,
          38,
          42
        ],
        "label": "TagInfoData::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/tags/TagInfoFeed.java": {
    "class_content": [
      "package org.jinstagram.entity.tags;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "\n",
      "public class TagInfoFeed extends InstagramObject{\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate TagInfoData tagInfo;\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\tpublic TagInfoData getTagInfo() {\n",
      "\t\treturn tagInfo;\n",
      "\t}\n",
      "\n",
      "\tpublic void setTagInfo(TagInfoData tagInfo) {\n",
      "\t\tthis.tagInfo = tagInfo;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"TagInfoFeed [meta=%s, tagInfo=%s]\", meta, tagInfo);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.tags;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>TagInfoFeedTest</code> contains tests for the class\n",
      " * <code>{@link TagInfoFeed}</code>.\n",
      " */\n",
      "public class TagInfoFeedTest {\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1() throws Exception {\n",
      "\t\tTagInfoFeed fixture = new TagInfoFeed();\n",
      "\t\tfixture.setTagInfo(new TagInfoData());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the TagInfoData getTagInfo() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetTagInfo_1() throws Exception {\n",
      "\t\tTagInfoFeed fixture = new TagInfoFeed();\n",
      "\t\tfixture.setTagInfo(new TagInfoData());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tTagInfoData result = fixture.getTagInfo();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"TagInfoData [mediaCount=0, tagName=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getTagName());\n",
      "\t\tassertEquals(0L, result.getMediaCount());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1() throws Exception {\n",
      "\t\tTagInfoFeed fixture = new TagInfoFeed();\n",
      "\t\tfixture.setTagInfo(new TagInfoData());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setTagInfo(TagInfoData) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetTagInfo_1() throws Exception {\n",
      "\t\tTagInfoFeed fixture = new TagInfoFeed();\n",
      "\t\tfixture.setTagInfo(new TagInfoData());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tTagInfoData tagInfo = new TagInfoData();\n",
      "\n",
      "\t\tfixture.setTagInfo(tagInfo);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tTagInfoFeed fixture = new TagInfoFeed();\n",
      "\t\tfixture.setTagInfo(new TagInfoData());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"TagInfoFeed [meta=Meta [code=0, errorMessage=null, errorType=null], tagInfo=TagInfoData [mediaCount=0, tagName=null]]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {
      "TagInfoFeed::::getMeta()": [
        18,
        20
      ],
      "TagInfoFeed::::setMeta(org.jinstagram.entity.common.Meta)": [
        25,
        27
      ],
      "TagInfoFeed::::getTagInfo()": [
        29,
        31
      ],
      "TagInfoFeed::::setTagInfo(org.jinstagram.entity.tags.TagInfoData)": [
        33,
        35
      ],
      "TagInfoFeed::::toString()": [
        37,
        40
      ]
    },
    "test_method_lines_dic": {
      "TagInfoFeedTest::::testGetMeta_1()": [
        21,
        35
      ],
      "TagInfoFeedTest::::testGetTagInfo_1()": [
        44,
        57
      ],
      "TagInfoFeedTest::::testSetMeta_1()": [
        66,
        76
      ],
      "TagInfoFeedTest::::testSetTagInfo_1()": [
        85,
        95
      ],
      "TagInfoFeedTest::::testToString_1()": [
        104,
        116
      ]
    },
    "reverse_method_lines_dic": {
      "18": "TagInfoFeed::::getMeta()",
      "19": "TagInfoFeed::::getMeta()",
      "20": "TagInfoFeed::::getMeta()",
      "25": "TagInfoFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "26": "TagInfoFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "27": "TagInfoFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "29": "TagInfoFeed::::getTagInfo()",
      "30": "TagInfoFeed::::getTagInfo()",
      "31": "TagInfoFeed::::getTagInfo()",
      "33": "TagInfoFeed::::setTagInfo(org.jinstagram.entity.tags.TagInfoData)",
      "34": "TagInfoFeed::::setTagInfo(org.jinstagram.entity.tags.TagInfoData)",
      "35": "TagInfoFeed::::setTagInfo(org.jinstagram.entity.tags.TagInfoData)",
      "37": "TagInfoFeed::::toString()",
      "38": "TagInfoFeed::::toString()",
      "39": "TagInfoFeed::::toString()",
      "40": "TagInfoFeed::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "21": "TagInfoFeedTest::::testGetMeta_1()",
      "22": "TagInfoFeedTest::::testGetMeta_1()",
      "23": "TagInfoFeedTest::::testGetMeta_1()",
      "24": "TagInfoFeedTest::::testGetMeta_1()",
      "25": "TagInfoFeedTest::::testGetMeta_1()",
      "26": "TagInfoFeedTest::::testGetMeta_1()",
      "27": "TagInfoFeedTest::::testGetMeta_1()",
      "28": "TagInfoFeedTest::::testGetMeta_1()",
      "29": "TagInfoFeedTest::::testGetMeta_1()",
      "30": "TagInfoFeedTest::::testGetMeta_1()",
      "31": "TagInfoFeedTest::::testGetMeta_1()",
      "32": "TagInfoFeedTest::::testGetMeta_1()",
      "33": "TagInfoFeedTest::::testGetMeta_1()",
      "34": "TagInfoFeedTest::::testGetMeta_1()",
      "35": "TagInfoFeedTest::::testGetMeta_1()",
      "44": "TagInfoFeedTest::::testGetTagInfo_1()",
      "45": "TagInfoFeedTest::::testGetTagInfo_1()",
      "46": "TagInfoFeedTest::::testGetTagInfo_1()",
      "47": "TagInfoFeedTest::::testGetTagInfo_1()",
      "48": "TagInfoFeedTest::::testGetTagInfo_1()",
      "49": "TagInfoFeedTest::::testGetTagInfo_1()",
      "50": "TagInfoFeedTest::::testGetTagInfo_1()",
      "51": "TagInfoFeedTest::::testGetTagInfo_1()",
      "52": "TagInfoFeedTest::::testGetTagInfo_1()",
      "53": "TagInfoFeedTest::::testGetTagInfo_1()",
      "54": "TagInfoFeedTest::::testGetTagInfo_1()",
      "55": "TagInfoFeedTest::::testGetTagInfo_1()",
      "56": "TagInfoFeedTest::::testGetTagInfo_1()",
      "57": "TagInfoFeedTest::::testGetTagInfo_1()",
      "66": "TagInfoFeedTest::::testSetMeta_1()",
      "67": "TagInfoFeedTest::::testSetMeta_1()",
      "68": "TagInfoFeedTest::::testSetMeta_1()",
      "69": "TagInfoFeedTest::::testSetMeta_1()",
      "70": "TagInfoFeedTest::::testSetMeta_1()",
      "71": "TagInfoFeedTest::::testSetMeta_1()",
      "72": "TagInfoFeedTest::::testSetMeta_1()",
      "73": "TagInfoFeedTest::::testSetMeta_1()",
      "74": "TagInfoFeedTest::::testSetMeta_1()",
      "75": "TagInfoFeedTest::::testSetMeta_1()",
      "76": "TagInfoFeedTest::::testSetMeta_1()",
      "85": "TagInfoFeedTest::::testSetTagInfo_1()",
      "86": "TagInfoFeedTest::::testSetTagInfo_1()",
      "87": "TagInfoFeedTest::::testSetTagInfo_1()",
      "88": "TagInfoFeedTest::::testSetTagInfo_1()",
      "89": "TagInfoFeedTest::::testSetTagInfo_1()",
      "90": "TagInfoFeedTest::::testSetTagInfo_1()",
      "91": "TagInfoFeedTest::::testSetTagInfo_1()",
      "92": "TagInfoFeedTest::::testSetTagInfo_1()",
      "93": "TagInfoFeedTest::::testSetTagInfo_1()",
      "94": "TagInfoFeedTest::::testSetTagInfo_1()",
      "95": "TagInfoFeedTest::::testSetTagInfo_1()",
      "104": "TagInfoFeedTest::::testToString_1()",
      "105": "TagInfoFeedTest::::testToString_1()",
      "106": "TagInfoFeedTest::::testToString_1()",
      "107": "TagInfoFeedTest::::testToString_1()",
      "108": "TagInfoFeedTest::::testToString_1()",
      "109": "TagInfoFeedTest::::testToString_1()",
      "110": "TagInfoFeedTest::::testToString_1()",
      "111": "TagInfoFeedTest::::testToString_1()",
      "112": "TagInfoFeedTest::::testToString_1()",
      "113": "TagInfoFeedTest::::testToString_1()",
      "114": "TagInfoFeedTest::::testToString_1()",
      "115": "TagInfoFeedTest::::testToString_1()",
      "116": "TagInfoFeedTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          35
        ],
        "covered_lines": [
          8,
          19,
          26,
          27,
          34,
          35
        ],
        "label": "TagInfoFeed::::getMeta()"
      },
      {
        "test_lines": [
          44,
          57
        ],
        "covered_lines": [
          8,
          26,
          27,
          30,
          34,
          35
        ],
        "label": "TagInfoFeed::::getTagInfo()"
      },
      {
        "test_lines": [
          66,
          76
        ],
        "covered_lines": [
          8,
          26,
          27,
          34,
          35
        ],
        "label": "TagInfoFeed::::setMeta(org.jinstagram.entity.common.Meta)"
      },
      {
        "test_lines": [
          85,
          95
        ],
        "covered_lines": [
          8,
          26,
          27,
          34,
          35
        ],
        "label": "TagInfoFeed::::setTagInfo(org.jinstagram.entity.tags.TagInfoData)"
      },
      {
        "test_lines": [
          104,
          116
        ],
        "covered_lines": [
          8,
          26,
          27,
          34,
          35,
          39
        ],
        "label": "TagInfoFeed::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/tags/TagMediaFeed.java": {
    "class_content": [
      "package org.jinstagram.entity.tags;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.jinstagram.entity.common.Pagination;\n",
      "import org.jinstagram.entity.users.feed.MediaFeedData;\n",
      "import org.jinstagram.entity.users.feed.MediaFeed;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * @deprecated This model is deprecated in favor of {@link MediaFeed}. {@link MediaFeed}\n",
      " * generalizes the media returned for both users and tags. In the next major version release\n",
      " * ({@code 2.0}), {@link TagMediaFeed} will be removed.\n",
      " */\n",
      "@Deprecated\n",
      "public class TagMediaFeed extends InstagramObject{\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate List<MediaFeedData> data;\n",
      "\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t@SerializedName(\"pagination\")\n",
      "\tprivate Pagination pagination;\n",
      "\n",
      "\t/**\n",
      "\t * @return the pagination\n",
      "\t */\n",
      "\tpublic Pagination getPagination() {\n",
      "\t\treturn pagination;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param pagination the pagination to set\n",
      "\t */\n",
      "\tpublic void setPagination(Pagination pagination) {\n",
      "\t\tthis.pagination = pagination;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the data\n",
      "\t */\n",
      "\tpublic List<MediaFeedData> getData() {\n",
      "\t\treturn data;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param data the data to set\n",
      "\t */\n",
      "\tpublic void setData(List<MediaFeedData> data) {\n",
      "\t\tthis.data = data;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"TagMediaFeed [data=%s, meta=%s, pagination=%s]\", data, meta, pagination);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.tags;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.jinstagram.entity.common.Pagination;\n",
      "import org.jinstagram.entity.users.feed.MediaFeedData;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>TagMediaFeedTest</code> contains tests for the class\n",
      " * <code>{@link TagMediaFeed}</code>.\n",
      " */\n",
      "public class TagMediaFeedTest {\n",
      "\t/**\n",
      "\t * Run the List<MediaFeedData> getData() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetData_1() throws Exception {\n",
      "\t\tTagMediaFeed fixture = new TagMediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\n",
      "\t\tList<MediaFeedData> result = fixture.getData();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1() throws Exception {\n",
      "\t\tTagMediaFeed fixture = new TagMediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Pagination getPagination() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetPagination_1() throws Exception {\n",
      "\t\tTagMediaFeed fixture = new TagMediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\n",
      "\t\tPagination result = fixture.getPagination();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextMaxTagId=null, nextMinId=null, nextUrl=null]\",\n",
      "\t\t\t\tresult.toString());\n",
      "\t\tassertEquals(null, result.getDepreciationWarning());\n",
      "\t\tassertEquals(null, result.getMinTagId());\n",
      "\t\tassertEquals(null, result.getNextMaxId());\n",
      "\t\tassertEquals(null, result.getNextCursor());\n",
      "\t\tassertEquals(null, result.getNextMinId());\n",
      "\t\tassertEquals(null, result.getNextMaxTagId());\n",
      "\t\tassertEquals(null, result.getNextUrl());\n",
      "\t\tassertEquals(false, result.hasNextPage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setData(List<MediaFeedData>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetData_1() throws Exception {\n",
      "\t\tTagMediaFeed fixture = new TagMediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tList<MediaFeedData> data = new ArrayList<MediaFeedData>();\n",
      "\n",
      "\t\tfixture.setData(data);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1() throws Exception {\n",
      "\t\tTagMediaFeed fixture = new TagMediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setPagination(Pagination) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetPagination_1() throws Exception {\n",
      "\t\tTagMediaFeed fixture = new TagMediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tPagination pagination = new Pagination();\n",
      "\n",
      "\t\tfixture.setPagination(pagination);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tTagMediaFeed fixture = new TagMediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"TagMediaFeed [data=[], meta=Meta [code=0, errorMessage=null, errorType=null], pagination=Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextMaxTagId=null, nextMinId=null, nextUrl=null]]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "TagMediaFeed::::getPagination()": [
        32,
        34
      ],
      "TagMediaFeed::::setPagination(org.jinstagram.entity.common.Pagination)": [
        39,
        41
      ],
      "TagMediaFeed::::getMeta()": [
        46,
        48
      ],
      "TagMediaFeed::::setMeta(org.jinstagram.entity.common.Meta)": [
        53,
        55
      ],
      "TagMediaFeed::::getData()": [
        60,
        62
      ],
      "TagMediaFeed::::setData(java.util.List<org.jinstagram.entity.users.feed.MediaFeedData>)": [
        67,
        69
      ],
      "TagMediaFeed::::toString()": [
        71,
        74
      ]
    },
    "test_method_lines_dic": {
      "TagMediaFeedTest::::testGetData_1()": [
        26,
        38
      ],
      "TagMediaFeedTest::::testGetMeta_1()": [
        47,
        62
      ],
      "TagMediaFeedTest::::testGetPagination_1()": [
        71,
        93
      ],
      "TagMediaFeedTest::::testSetData_1()": [
        102,
        113
      ],
      "TagMediaFeedTest::::testSetMeta_1()": [
        122,
        133
      ],
      "TagMediaFeedTest::::testSetPagination_1()": [
        142,
        153
      ],
      "TagMediaFeedTest::::testToString_1()": [
        162,
        175
      ]
    },
    "reverse_method_lines_dic": {
      "32": "TagMediaFeed::::getPagination()",
      "33": "TagMediaFeed::::getPagination()",
      "34": "TagMediaFeed::::getPagination()",
      "39": "TagMediaFeed::::setPagination(org.jinstagram.entity.common.Pagination)",
      "40": "TagMediaFeed::::setPagination(org.jinstagram.entity.common.Pagination)",
      "41": "TagMediaFeed::::setPagination(org.jinstagram.entity.common.Pagination)",
      "46": "TagMediaFeed::::getMeta()",
      "47": "TagMediaFeed::::getMeta()",
      "48": "TagMediaFeed::::getMeta()",
      "53": "TagMediaFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "54": "TagMediaFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "55": "TagMediaFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "60": "TagMediaFeed::::getData()",
      "61": "TagMediaFeed::::getData()",
      "62": "TagMediaFeed::::getData()",
      "67": "TagMediaFeed::::setData(java.util.List<org.jinstagram.entity.users.feed.MediaFeedData>)",
      "68": "TagMediaFeed::::setData(java.util.List<org.jinstagram.entity.users.feed.MediaFeedData>)",
      "69": "TagMediaFeed::::setData(java.util.List<org.jinstagram.entity.users.feed.MediaFeedData>)",
      "71": "TagMediaFeed::::toString()",
      "72": "TagMediaFeed::::toString()",
      "73": "TagMediaFeed::::toString()",
      "74": "TagMediaFeed::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "26": "TagMediaFeedTest::::testGetData_1()",
      "27": "TagMediaFeedTest::::testGetData_1()",
      "28": "TagMediaFeedTest::::testGetData_1()",
      "29": "TagMediaFeedTest::::testGetData_1()",
      "30": "TagMediaFeedTest::::testGetData_1()",
      "31": "TagMediaFeedTest::::testGetData_1()",
      "32": "TagMediaFeedTest::::testGetData_1()",
      "33": "TagMediaFeedTest::::testGetData_1()",
      "34": "TagMediaFeedTest::::testGetData_1()",
      "35": "TagMediaFeedTest::::testGetData_1()",
      "36": "TagMediaFeedTest::::testGetData_1()",
      "37": "TagMediaFeedTest::::testGetData_1()",
      "38": "TagMediaFeedTest::::testGetData_1()",
      "47": "TagMediaFeedTest::::testGetMeta_1()",
      "48": "TagMediaFeedTest::::testGetMeta_1()",
      "49": "TagMediaFeedTest::::testGetMeta_1()",
      "50": "TagMediaFeedTest::::testGetMeta_1()",
      "51": "TagMediaFeedTest::::testGetMeta_1()",
      "52": "TagMediaFeedTest::::testGetMeta_1()",
      "53": "TagMediaFeedTest::::testGetMeta_1()",
      "54": "TagMediaFeedTest::::testGetMeta_1()",
      "55": "TagMediaFeedTest::::testGetMeta_1()",
      "56": "TagMediaFeedTest::::testGetMeta_1()",
      "57": "TagMediaFeedTest::::testGetMeta_1()",
      "58": "TagMediaFeedTest::::testGetMeta_1()",
      "59": "TagMediaFeedTest::::testGetMeta_1()",
      "60": "TagMediaFeedTest::::testGetMeta_1()",
      "61": "TagMediaFeedTest::::testGetMeta_1()",
      "62": "TagMediaFeedTest::::testGetMeta_1()",
      "71": "TagMediaFeedTest::::testGetPagination_1()",
      "72": "TagMediaFeedTest::::testGetPagination_1()",
      "73": "TagMediaFeedTest::::testGetPagination_1()",
      "74": "TagMediaFeedTest::::testGetPagination_1()",
      "75": "TagMediaFeedTest::::testGetPagination_1()",
      "76": "TagMediaFeedTest::::testGetPagination_1()",
      "77": "TagMediaFeedTest::::testGetPagination_1()",
      "78": "TagMediaFeedTest::::testGetPagination_1()",
      "79": "TagMediaFeedTest::::testGetPagination_1()",
      "80": "TagMediaFeedTest::::testGetPagination_1()",
      "81": "TagMediaFeedTest::::testGetPagination_1()",
      "82": "TagMediaFeedTest::::testGetPagination_1()",
      "83": "TagMediaFeedTest::::testGetPagination_1()",
      "84": "TagMediaFeedTest::::testGetPagination_1()",
      "85": "TagMediaFeedTest::::testGetPagination_1()",
      "86": "TagMediaFeedTest::::testGetPagination_1()",
      "87": "TagMediaFeedTest::::testGetPagination_1()",
      "88": "TagMediaFeedTest::::testGetPagination_1()",
      "89": "TagMediaFeedTest::::testGetPagination_1()",
      "90": "TagMediaFeedTest::::testGetPagination_1()",
      "91": "TagMediaFeedTest::::testGetPagination_1()",
      "92": "TagMediaFeedTest::::testGetPagination_1()",
      "93": "TagMediaFeedTest::::testGetPagination_1()",
      "102": "TagMediaFeedTest::::testSetData_1()",
      "103": "TagMediaFeedTest::::testSetData_1()",
      "104": "TagMediaFeedTest::::testSetData_1()",
      "105": "TagMediaFeedTest::::testSetData_1()",
      "106": "TagMediaFeedTest::::testSetData_1()",
      "107": "TagMediaFeedTest::::testSetData_1()",
      "108": "TagMediaFeedTest::::testSetData_1()",
      "109": "TagMediaFeedTest::::testSetData_1()",
      "110": "TagMediaFeedTest::::testSetData_1()",
      "111": "TagMediaFeedTest::::testSetData_1()",
      "112": "TagMediaFeedTest::::testSetData_1()",
      "113": "TagMediaFeedTest::::testSetData_1()",
      "122": "TagMediaFeedTest::::testSetMeta_1()",
      "123": "TagMediaFeedTest::::testSetMeta_1()",
      "124": "TagMediaFeedTest::::testSetMeta_1()",
      "125": "TagMediaFeedTest::::testSetMeta_1()",
      "126": "TagMediaFeedTest::::testSetMeta_1()",
      "127": "TagMediaFeedTest::::testSetMeta_1()",
      "128": "TagMediaFeedTest::::testSetMeta_1()",
      "129": "TagMediaFeedTest::::testSetMeta_1()",
      "130": "TagMediaFeedTest::::testSetMeta_1()",
      "131": "TagMediaFeedTest::::testSetMeta_1()",
      "132": "TagMediaFeedTest::::testSetMeta_1()",
      "133": "TagMediaFeedTest::::testSetMeta_1()",
      "142": "TagMediaFeedTest::::testSetPagination_1()",
      "143": "TagMediaFeedTest::::testSetPagination_1()",
      "144": "TagMediaFeedTest::::testSetPagination_1()",
      "145": "TagMediaFeedTest::::testSetPagination_1()",
      "146": "TagMediaFeedTest::::testSetPagination_1()",
      "147": "TagMediaFeedTest::::testSetPagination_1()",
      "148": "TagMediaFeedTest::::testSetPagination_1()",
      "149": "TagMediaFeedTest::::testSetPagination_1()",
      "150": "TagMediaFeedTest::::testSetPagination_1()",
      "151": "TagMediaFeedTest::::testSetPagination_1()",
      "152": "TagMediaFeedTest::::testSetPagination_1()",
      "153": "TagMediaFeedTest::::testSetPagination_1()",
      "162": "TagMediaFeedTest::::testToString_1()",
      "163": "TagMediaFeedTest::::testToString_1()",
      "164": "TagMediaFeedTest::::testToString_1()",
      "165": "TagMediaFeedTest::::testToString_1()",
      "166": "TagMediaFeedTest::::testToString_1()",
      "167": "TagMediaFeedTest::::testToString_1()",
      "168": "TagMediaFeedTest::::testToString_1()",
      "169": "TagMediaFeedTest::::testToString_1()",
      "170": "TagMediaFeedTest::::testToString_1()",
      "171": "TagMediaFeedTest::::testToString_1()",
      "172": "TagMediaFeedTest::::testToString_1()",
      "173": "TagMediaFeedTest::::testToString_1()",
      "174": "TagMediaFeedTest::::testToString_1()",
      "175": "TagMediaFeedTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          26,
          38
        ],
        "covered_lines": [
          19,
          40,
          41,
          54,
          55,
          61,
          68,
          69
        ],
        "label": "TagMediaFeed::::getData()"
      },
      {
        "test_lines": [
          47,
          62
        ],
        "covered_lines": [
          19,
          40,
          41,
          47,
          54,
          55,
          68,
          69
        ],
        "label": "TagMediaFeed::::getMeta()"
      },
      {
        "test_lines": [
          71,
          93
        ],
        "covered_lines": [
          19,
          33,
          40,
          41,
          54,
          55,
          68,
          69
        ],
        "label": "TagMediaFeed::::getPagination()"
      },
      {
        "test_lines": [
          102,
          113
        ],
        "covered_lines": [
          19,
          40,
          41,
          54,
          55,
          68,
          69
        ],
        "label": "TagMediaFeed::::setData(java.util.List<org.jinstagram.entity.users.feed.MediaFeedData>)"
      },
      {
        "test_lines": [
          122,
          133
        ],
        "covered_lines": [
          19,
          40,
          41,
          54,
          55,
          68,
          69
        ],
        "label": "TagMediaFeed::::setMeta(org.jinstagram.entity.common.Meta)"
      },
      {
        "test_lines": [
          142,
          153
        ],
        "covered_lines": [
          19,
          40,
          41,
          54,
          55,
          68,
          69
        ],
        "label": "TagMediaFeed::::setPagination(org.jinstagram.entity.common.Pagination)"
      },
      {
        "test_lines": [
          162,
          175
        ],
        "covered_lines": [
          19,
          40,
          41,
          54,
          55,
          68,
          69,
          73
        ],
        "label": "TagMediaFeed::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/tags/TagSearchFeed.java": {
    "class_content": [
      "package org.jinstagram.entity.tags;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "public class TagSearchFeed extends InstagramObject{\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate List<TagInfoData> tagList;\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\tpublic List<TagInfoData> getTagList() {\n",
      "\t\treturn tagList;\n",
      "\t}\n",
      "\n",
      "\tpublic void setTagList(List<TagInfoData> tagList) {\n",
      "\t\tthis.tagList = tagList;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"TagSearchFeed [meta=%s, tagList=%s]\", meta, tagList);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.tags;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>TagSearchFeedTest</code> contains tests for the class\n",
      " * <code>{@link TagSearchFeed}</code>.\n",
      " */\n",
      "public class TagSearchFeedTest {\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1() throws Exception {\n",
      "\t\tTagSearchFeed fixture = new TagSearchFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setTagList(new ArrayList<TagInfoData>());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the List<TagInfoData> getTagList() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetTagList_1() throws Exception {\n",
      "\t\tTagSearchFeed fixture = new TagSearchFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setTagList(new ArrayList<TagInfoData>());\n",
      "\n",
      "\t\tList<TagInfoData> result = fixture.getTagList();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1() throws Exception {\n",
      "\t\tTagSearchFeed fixture = new TagSearchFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setTagList(new ArrayList<TagInfoData>());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setTagList(List<TagInfoData>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetTagList_1() throws Exception {\n",
      "\t\tTagSearchFeed fixture = new TagSearchFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setTagList(new ArrayList<TagInfoData>());\n",
      "\t\tList<TagInfoData> tagList = new ArrayList<TagInfoData>();\n",
      "\n",
      "\t\tfixture.setTagList(tagList);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tTagSearchFeed fixture = new TagSearchFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setTagList(new ArrayList<TagInfoData>());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"TagSearchFeed [meta=Meta [code=0, errorMessage=null, errorType=null], tagList=[]]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "TagSearchFeed::::getMeta()": [
        20,
        22
      ],
      "TagSearchFeed::::setMeta(org.jinstagram.entity.common.Meta)": [
        27,
        29
      ],
      "TagSearchFeed::::getTagList()": [
        31,
        33
      ],
      "TagSearchFeed::::setTagList(java.util.List<org.jinstagram.entity.tags.TagInfoData>)": [
        35,
        37
      ],
      "TagSearchFeed::::toString()": [
        39,
        42
      ]
    },
    "test_method_lines_dic": {
      "TagSearchFeedTest::::testGetMeta_1()": [
        24,
        38
      ],
      "TagSearchFeedTest::::testGetTagList_1()": [
        47,
        58
      ],
      "TagSearchFeedTest::::testSetMeta_1()": [
        67,
        77
      ],
      "TagSearchFeedTest::::testSetTagList_1()": [
        86,
        96
      ],
      "TagSearchFeedTest::::testToString_1()": [
        105,
        115
      ]
    },
    "reverse_method_lines_dic": {
      "20": "TagSearchFeed::::getMeta()",
      "21": "TagSearchFeed::::getMeta()",
      "22": "TagSearchFeed::::getMeta()",
      "27": "TagSearchFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "28": "TagSearchFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "29": "TagSearchFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "31": "TagSearchFeed::::getTagList()",
      "32": "TagSearchFeed::::getTagList()",
      "33": "TagSearchFeed::::getTagList()",
      "35": "TagSearchFeed::::setTagList(java.util.List<org.jinstagram.entity.tags.TagInfoData>)",
      "36": "TagSearchFeed::::setTagList(java.util.List<org.jinstagram.entity.tags.TagInfoData>)",
      "37": "TagSearchFeed::::setTagList(java.util.List<org.jinstagram.entity.tags.TagInfoData>)",
      "39": "TagSearchFeed::::toString()",
      "40": "TagSearchFeed::::toString()",
      "41": "TagSearchFeed::::toString()",
      "42": "TagSearchFeed::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "24": "TagSearchFeedTest::::testGetMeta_1()",
      "25": "TagSearchFeedTest::::testGetMeta_1()",
      "26": "TagSearchFeedTest::::testGetMeta_1()",
      "27": "TagSearchFeedTest::::testGetMeta_1()",
      "28": "TagSearchFeedTest::::testGetMeta_1()",
      "29": "TagSearchFeedTest::::testGetMeta_1()",
      "30": "TagSearchFeedTest::::testGetMeta_1()",
      "31": "TagSearchFeedTest::::testGetMeta_1()",
      "32": "TagSearchFeedTest::::testGetMeta_1()",
      "33": "TagSearchFeedTest::::testGetMeta_1()",
      "34": "TagSearchFeedTest::::testGetMeta_1()",
      "35": "TagSearchFeedTest::::testGetMeta_1()",
      "36": "TagSearchFeedTest::::testGetMeta_1()",
      "37": "TagSearchFeedTest::::testGetMeta_1()",
      "38": "TagSearchFeedTest::::testGetMeta_1()",
      "47": "TagSearchFeedTest::::testGetTagList_1()",
      "48": "TagSearchFeedTest::::testGetTagList_1()",
      "49": "TagSearchFeedTest::::testGetTagList_1()",
      "50": "TagSearchFeedTest::::testGetTagList_1()",
      "51": "TagSearchFeedTest::::testGetTagList_1()",
      "52": "TagSearchFeedTest::::testGetTagList_1()",
      "53": "TagSearchFeedTest::::testGetTagList_1()",
      "54": "TagSearchFeedTest::::testGetTagList_1()",
      "55": "TagSearchFeedTest::::testGetTagList_1()",
      "56": "TagSearchFeedTest::::testGetTagList_1()",
      "57": "TagSearchFeedTest::::testGetTagList_1()",
      "58": "TagSearchFeedTest::::testGetTagList_1()",
      "67": "TagSearchFeedTest::::testSetMeta_1()",
      "68": "TagSearchFeedTest::::testSetMeta_1()",
      "69": "TagSearchFeedTest::::testSetMeta_1()",
      "70": "TagSearchFeedTest::::testSetMeta_1()",
      "71": "TagSearchFeedTest::::testSetMeta_1()",
      "72": "TagSearchFeedTest::::testSetMeta_1()",
      "73": "TagSearchFeedTest::::testSetMeta_1()",
      "74": "TagSearchFeedTest::::testSetMeta_1()",
      "75": "TagSearchFeedTest::::testSetMeta_1()",
      "76": "TagSearchFeedTest::::testSetMeta_1()",
      "77": "TagSearchFeedTest::::testSetMeta_1()",
      "86": "TagSearchFeedTest::::testSetTagList_1()",
      "87": "TagSearchFeedTest::::testSetTagList_1()",
      "88": "TagSearchFeedTest::::testSetTagList_1()",
      "89": "TagSearchFeedTest::::testSetTagList_1()",
      "90": "TagSearchFeedTest::::testSetTagList_1()",
      "91": "TagSearchFeedTest::::testSetTagList_1()",
      "92": "TagSearchFeedTest::::testSetTagList_1()",
      "93": "TagSearchFeedTest::::testSetTagList_1()",
      "94": "TagSearchFeedTest::::testSetTagList_1()",
      "95": "TagSearchFeedTest::::testSetTagList_1()",
      "96": "TagSearchFeedTest::::testSetTagList_1()",
      "105": "TagSearchFeedTest::::testToString_1()",
      "106": "TagSearchFeedTest::::testToString_1()",
      "107": "TagSearchFeedTest::::testToString_1()",
      "108": "TagSearchFeedTest::::testToString_1()",
      "109": "TagSearchFeedTest::::testToString_1()",
      "110": "TagSearchFeedTest::::testToString_1()",
      "111": "TagSearchFeedTest::::testToString_1()",
      "112": "TagSearchFeedTest::::testToString_1()",
      "113": "TagSearchFeedTest::::testToString_1()",
      "114": "TagSearchFeedTest::::testToString_1()",
      "115": "TagSearchFeedTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          24,
          38
        ],
        "covered_lines": [
          10,
          21,
          28,
          29,
          36,
          37
        ],
        "label": "TagSearchFeed::::getMeta()"
      },
      {
        "test_lines": [
          47,
          58
        ],
        "covered_lines": [
          10,
          28,
          29,
          32,
          36,
          37
        ],
        "label": "TagSearchFeed::::getTagList()"
      },
      {
        "test_lines": [
          67,
          77
        ],
        "covered_lines": [
          10,
          28,
          29,
          36,
          37
        ],
        "label": "TagSearchFeed::::setMeta(org.jinstagram.entity.common.Meta)"
      },
      {
        "test_lines": [
          86,
          96
        ],
        "covered_lines": [
          10,
          28,
          29,
          36,
          37
        ],
        "label": "TagSearchFeed::::setTagList(java.util.List<org.jinstagram.entity.tags.TagInfoData>)"
      },
      {
        "test_lines": [
          105,
          115
        ],
        "covered_lines": [
          10,
          28,
          29,
          36,
          37,
          41
        ],
        "label": "TagSearchFeed::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/media/MediaInfoFeed.java": {
    "class_content": [
      "package org.jinstagram.entity.media;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.jinstagram.entity.users.feed.MediaFeedData;\n",
      "\n",
      "public class MediaInfoFeed extends InstagramObject{\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate MediaFeedData data;\n",
      "\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the data\n",
      "\t */\n",
      "\tpublic MediaFeedData getData() {\n",
      "\t\treturn data;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param data the data to set\n",
      "\t */\n",
      "\tpublic void setData(MediaFeedData data) {\n",
      "\t\tthis.data = data;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"MediaInfoFeed [data=%s, meta=%s]\", data, meta);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.media;\n",
      "\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.InputStreamReader;\n",
      "import java.io.Reader;\n",
      "import java.io.UnsupportedEncodingException;\n",
      "import java.util.List;\n",
      "\n",
      "import org.hamcrest.CoreMatchers;\n",
      "import org.jinstagram.InstagramBase;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.jinstagram.entity.users.feed.CarouselMedia;\n",
      "import org.jinstagram.entity.users.feed.MediaFeedData;\n",
      "import org.junit.*;\n",
      "\n",
      "/**\n",
      " * The class <code>MediaInfoFeedTest</code> contains tests for the class <code>{@link MediaInfoFeed}</code>.\n",
      " *\n",
      " * @generatedBy CodePro at 31/01/16 15:05\n",
      " * @author SachinHandiekar\n",
      " * @version $Revision: 1.0 $\n",
      " */\n",
      "public class MediaInfoFeedTest {\n",
      "\t/**\n",
      "\t * Run the MediaFeedData getData() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetData_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tMediaInfoFeed fixture = new MediaInfoFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new MediaFeedData());\n",
      "\n",
      "\t\tMediaFeedData result = fixture.getData();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(null, result.getImages());\n",
      "\t\tassertEquals(null, result.getTags());\n",
      "\t\tassertEquals(null, result.getUser());\n",
      "\t\tassertEquals(\"MediaFeedData [caption=null, comments=null, createdTime=null, id=null, imageFilter=null, images=null, likes=null, link=null, location=null, tags=null, type=null, user=null, userHasLiked=false, usersInPhoto=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getLocation());\n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t\tassertEquals(null, result.getType());\n",
      "\t\tassertEquals(false, result.isUserHasLiked());\n",
      "\t\tassertEquals(null, result.getVideos());\n",
      "\t\tassertEquals(null, result.getUsersInPhotoList());\n",
      "\t\tassertEquals(null, result.getImageFilter());\n",
      "\t\tassertEquals(null, result.getCreatedTime());\n",
      "\t\tassertEquals(null, result.getLikes());\n",
      "\t\tassertEquals(null, result.getCaption());\n",
      "\t\tassertEquals(null, result.getLink());\n",
      "\t\tassertEquals(null, result.getComments());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tMediaInfoFeed fixture = new MediaInfoFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new MediaFeedData());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setData(MediaFeedData) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetData_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tMediaInfoFeed fixture = new MediaInfoFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new MediaFeedData());\n",
      "\t\tMediaFeedData data = new MediaFeedData();\n",
      "\n",
      "\t\tfixture.setData(data);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tMediaInfoFeed fixture = new MediaInfoFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new MediaFeedData());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tMediaInfoFeed fixture = new MediaInfoFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setData(new MediaFeedData());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"MediaInfoFeed [data=MediaFeedData [caption=null, comments=null, createdTime=null, id=null, imageFilter=null, images=null, likes=null, link=null, location=null, tags=null, type=null, user=null, userHasLiked=false, usersInPhoto=null], meta=Meta [code=0, errorMessage=null, errorType=null]]\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Test correct deserialization of {@link CarouselMedia} videos.\n",
      "\t *\n",
      "\t * @throws Exception if an IO error is encountered deserializing the JSON file\n",
      "\t */\n",
      "\t@Test\n",
      "    public void testMediaCarouselVideos() throws IOException {\n",
      "\t    final String s = toString(\"media-carousel-videos-1455920561485265648_25025320.json\");\n",
      "\t    final MediaInfoFeed feed = InstagramBase.createObjectFromResponse(MediaInfoFeed.class, s);\n",
      "\t    final List<CarouselMedia> carousel = feed.getData().getCarouselMedia();\n",
      "\t    assertEquals(3, carousel.size());\n",
      "\t    for (CarouselMedia media : carousel) {\n",
      "\t\t    assertEquals(\"video\", media.getType());\n",
      "\t    }\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Test correct deserialization of {@link CarouselMedia} images.\n",
      "\t *\n",
      "\t * @throws Exception if an IO error is encountered deserializing the JSON file\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testMediaCarouselImages() throws IOException {\n",
      "\t\tfinal String s = toString(\"media-carousel-images-1477919811501485796_25025320.json\");\n",
      "\t\tfinal MediaInfoFeed feed = InstagramBase.createObjectFromResponse(MediaInfoFeed.class, s);\n",
      "\t\tfinal List<CarouselMedia> carousel = feed.getData().getCarouselMedia();\n",
      "\t\tassertEquals(4, carousel.size());\n",
      "\t\tfor (CarouselMedia media : carousel) {\n",
      "\t\t\tassertEquals(\"image\", media.getType());\n",
      "\t\t}\n",
      "\t}\n",
      "\n",
      "    static String toString(final String s) throws UnsupportedEncodingException, IOException {\n",
      "        Reader is = new InputStreamReader(MediaInfoFeedTest.class.getClassLoader().getResourceAsStream(s), \"utf-8\");\n",
      "        try {\n",
      "            final StringBuilder sb = new StringBuilder();\n",
      "            final char cb[] = new char[1024];\n",
      "\n",
      "            int n;\n",
      "            while(-1 != (n = is.read(cb)) && sb.length() < 120000){\n",
      "                if(n == -1) {\n",
      "                    break;\n",
      "                }\n",
      "                for(int i = 0 ; i < n; i++) {\n",
      "                    sb.append(cb[i]);\n",
      "                }\n",
      "            }\n",
      "            return sb.toString();\n",
      "        } finally {\n",
      "            is.close();\n",
      "        }\n",
      "    }\n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the initialization fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp()\n",
      "\t\tthrows Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown()\n",
      "\t\tthrows Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args the command line arguments\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:05\n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(MediaInfoFeedTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {
      "MediaInfoFeed::::getMeta()": [
        19,
        21
      ],
      "MediaInfoFeed::::setMeta(org.jinstagram.entity.common.Meta)": [
        26,
        28
      ],
      "MediaInfoFeed::::getData()": [
        33,
        35
      ],
      "MediaInfoFeed::::setData(org.jinstagram.entity.users.feed.MediaFeedData)": [
        40,
        42
      ],
      "MediaInfoFeed::::toString()": [
        44,
        47
      ]
    },
    "test_method_lines_dic": {
      "MediaInfoFeedTest::::testGetData_1()": [
        33,
        60
      ],
      "MediaInfoFeedTest::::testGetMeta_1()": [
        69,
        84
      ],
      "MediaInfoFeedTest::::testSetData_1()": [
        93,
        104
      ],
      "MediaInfoFeedTest::::testSetMeta_1()": [
        113,
        124
      ],
      "MediaInfoFeedTest::::testToString_1()": [
        133,
        144
      ],
      "MediaInfoFeedTest::::testMediaCarouselVideos()": [
        151,
        160
      ],
      "MediaInfoFeedTest::::testMediaCarouselImages()": [
        167,
        176
      ],
      "MediaInfoFeedTest::::toString(java.lang.String)": [
        178,
        197
      ],
      "MediaInfoFeedTest::::setUp()": [
        207,
        211
      ],
      "MediaInfoFeedTest::::tearDown()": [
        221,
        225
      ],
      "MediaInfoFeedTest::::main(java.lang.String[])": [
        234,
        236
      ]
    },
    "reverse_method_lines_dic": {
      "19": "MediaInfoFeed::::getMeta()",
      "20": "MediaInfoFeed::::getMeta()",
      "21": "MediaInfoFeed::::getMeta()",
      "26": "MediaInfoFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "27": "MediaInfoFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "28": "MediaInfoFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "33": "MediaInfoFeed::::getData()",
      "34": "MediaInfoFeed::::getData()",
      "35": "MediaInfoFeed::::getData()",
      "40": "MediaInfoFeed::::setData(org.jinstagram.entity.users.feed.MediaFeedData)",
      "41": "MediaInfoFeed::::setData(org.jinstagram.entity.users.feed.MediaFeedData)",
      "42": "MediaInfoFeed::::setData(org.jinstagram.entity.users.feed.MediaFeedData)",
      "44": "MediaInfoFeed::::toString()",
      "45": "MediaInfoFeed::::toString()",
      "46": "MediaInfoFeed::::toString()",
      "47": "MediaInfoFeed::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "33": "MediaInfoFeedTest::::testGetData_1()",
      "34": "MediaInfoFeedTest::::testGetData_1()",
      "35": "MediaInfoFeedTest::::testGetData_1()",
      "36": "MediaInfoFeedTest::::testGetData_1()",
      "37": "MediaInfoFeedTest::::testGetData_1()",
      "38": "MediaInfoFeedTest::::testGetData_1()",
      "39": "MediaInfoFeedTest::::testGetData_1()",
      "40": "MediaInfoFeedTest::::testGetData_1()",
      "41": "MediaInfoFeedTest::::testGetData_1()",
      "42": "MediaInfoFeedTest::::testGetData_1()",
      "43": "MediaInfoFeedTest::::testGetData_1()",
      "44": "MediaInfoFeedTest::::testGetData_1()",
      "45": "MediaInfoFeedTest::::testGetData_1()",
      "46": "MediaInfoFeedTest::::testGetData_1()",
      "47": "MediaInfoFeedTest::::testGetData_1()",
      "48": "MediaInfoFeedTest::::testGetData_1()",
      "49": "MediaInfoFeedTest::::testGetData_1()",
      "50": "MediaInfoFeedTest::::testGetData_1()",
      "51": "MediaInfoFeedTest::::testGetData_1()",
      "52": "MediaInfoFeedTest::::testGetData_1()",
      "53": "MediaInfoFeedTest::::testGetData_1()",
      "54": "MediaInfoFeedTest::::testGetData_1()",
      "55": "MediaInfoFeedTest::::testGetData_1()",
      "56": "MediaInfoFeedTest::::testGetData_1()",
      "57": "MediaInfoFeedTest::::testGetData_1()",
      "58": "MediaInfoFeedTest::::testGetData_1()",
      "59": "MediaInfoFeedTest::::testGetData_1()",
      "60": "MediaInfoFeedTest::::testGetData_1()",
      "69": "MediaInfoFeedTest::::testGetMeta_1()",
      "70": "MediaInfoFeedTest::::testGetMeta_1()",
      "71": "MediaInfoFeedTest::::testGetMeta_1()",
      "72": "MediaInfoFeedTest::::testGetMeta_1()",
      "73": "MediaInfoFeedTest::::testGetMeta_1()",
      "74": "MediaInfoFeedTest::::testGetMeta_1()",
      "75": "MediaInfoFeedTest::::testGetMeta_1()",
      "76": "MediaInfoFeedTest::::testGetMeta_1()",
      "77": "MediaInfoFeedTest::::testGetMeta_1()",
      "78": "MediaInfoFeedTest::::testGetMeta_1()",
      "79": "MediaInfoFeedTest::::testGetMeta_1()",
      "80": "MediaInfoFeedTest::::testGetMeta_1()",
      "81": "MediaInfoFeedTest::::testGetMeta_1()",
      "82": "MediaInfoFeedTest::::testGetMeta_1()",
      "83": "MediaInfoFeedTest::::testGetMeta_1()",
      "84": "MediaInfoFeedTest::::testGetMeta_1()",
      "93": "MediaInfoFeedTest::::testSetData_1()",
      "94": "MediaInfoFeedTest::::testSetData_1()",
      "95": "MediaInfoFeedTest::::testSetData_1()",
      "96": "MediaInfoFeedTest::::testSetData_1()",
      "97": "MediaInfoFeedTest::::testSetData_1()",
      "98": "MediaInfoFeedTest::::testSetData_1()",
      "99": "MediaInfoFeedTest::::testSetData_1()",
      "100": "MediaInfoFeedTest::::testSetData_1()",
      "101": "MediaInfoFeedTest::::testSetData_1()",
      "102": "MediaInfoFeedTest::::testSetData_1()",
      "103": "MediaInfoFeedTest::::testSetData_1()",
      "104": "MediaInfoFeedTest::::testSetData_1()",
      "113": "MediaInfoFeedTest::::testSetMeta_1()",
      "114": "MediaInfoFeedTest::::testSetMeta_1()",
      "115": "MediaInfoFeedTest::::testSetMeta_1()",
      "116": "MediaInfoFeedTest::::testSetMeta_1()",
      "117": "MediaInfoFeedTest::::testSetMeta_1()",
      "118": "MediaInfoFeedTest::::testSetMeta_1()",
      "119": "MediaInfoFeedTest::::testSetMeta_1()",
      "120": "MediaInfoFeedTest::::testSetMeta_1()",
      "121": "MediaInfoFeedTest::::testSetMeta_1()",
      "122": "MediaInfoFeedTest::::testSetMeta_1()",
      "123": "MediaInfoFeedTest::::testSetMeta_1()",
      "124": "MediaInfoFeedTest::::testSetMeta_1()",
      "133": "MediaInfoFeedTest::::testToString_1()",
      "134": "MediaInfoFeedTest::::testToString_1()",
      "135": "MediaInfoFeedTest::::testToString_1()",
      "136": "MediaInfoFeedTest::::testToString_1()",
      "137": "MediaInfoFeedTest::::testToString_1()",
      "138": "MediaInfoFeedTest::::testToString_1()",
      "139": "MediaInfoFeedTest::::testToString_1()",
      "140": "MediaInfoFeedTest::::testToString_1()",
      "141": "MediaInfoFeedTest::::testToString_1()",
      "142": "MediaInfoFeedTest::::testToString_1()",
      "143": "MediaInfoFeedTest::::testToString_1()",
      "144": "MediaInfoFeedTest::::testToString_1()",
      "151": "MediaInfoFeedTest::::testMediaCarouselVideos()",
      "152": "MediaInfoFeedTest::::testMediaCarouselVideos()",
      "153": "MediaInfoFeedTest::::testMediaCarouselVideos()",
      "154": "MediaInfoFeedTest::::testMediaCarouselVideos()",
      "155": "MediaInfoFeedTest::::testMediaCarouselVideos()",
      "156": "MediaInfoFeedTest::::testMediaCarouselVideos()",
      "157": "MediaInfoFeedTest::::testMediaCarouselVideos()",
      "158": "MediaInfoFeedTest::::testMediaCarouselVideos()",
      "159": "MediaInfoFeedTest::::testMediaCarouselVideos()",
      "160": "MediaInfoFeedTest::::testMediaCarouselVideos()",
      "167": "MediaInfoFeedTest::::testMediaCarouselImages()",
      "168": "MediaInfoFeedTest::::testMediaCarouselImages()",
      "169": "MediaInfoFeedTest::::testMediaCarouselImages()",
      "170": "MediaInfoFeedTest::::testMediaCarouselImages()",
      "171": "MediaInfoFeedTest::::testMediaCarouselImages()",
      "172": "MediaInfoFeedTest::::testMediaCarouselImages()",
      "173": "MediaInfoFeedTest::::testMediaCarouselImages()",
      "174": "MediaInfoFeedTest::::testMediaCarouselImages()",
      "175": "MediaInfoFeedTest::::testMediaCarouselImages()",
      "176": "MediaInfoFeedTest::::testMediaCarouselImages()",
      "178": "MediaInfoFeedTest::::toString(java.lang.String)",
      "179": "MediaInfoFeedTest::::toString(java.lang.String)",
      "180": "MediaInfoFeedTest::::toString(java.lang.String)",
      "181": "MediaInfoFeedTest::::toString(java.lang.String)",
      "182": "MediaInfoFeedTest::::toString(java.lang.String)",
      "183": "MediaInfoFeedTest::::toString(java.lang.String)",
      "184": "MediaInfoFeedTest::::toString(java.lang.String)",
      "185": "MediaInfoFeedTest::::toString(java.lang.String)",
      "186": "MediaInfoFeedTest::::toString(java.lang.String)",
      "187": "MediaInfoFeedTest::::toString(java.lang.String)",
      "188": "MediaInfoFeedTest::::toString(java.lang.String)",
      "189": "MediaInfoFeedTest::::toString(java.lang.String)",
      "190": "MediaInfoFeedTest::::toString(java.lang.String)",
      "191": "MediaInfoFeedTest::::toString(java.lang.String)",
      "192": "MediaInfoFeedTest::::toString(java.lang.String)",
      "193": "MediaInfoFeedTest::::toString(java.lang.String)",
      "194": "MediaInfoFeedTest::::toString(java.lang.String)",
      "195": "MediaInfoFeedTest::::toString(java.lang.String)",
      "196": "MediaInfoFeedTest::::toString(java.lang.String)",
      "197": "MediaInfoFeedTest::::toString(java.lang.String)",
      "207": "MediaInfoFeedTest::::setUp()",
      "208": "MediaInfoFeedTest::::setUp()",
      "209": "MediaInfoFeedTest::::setUp()",
      "210": "MediaInfoFeedTest::::setUp()",
      "211": "MediaInfoFeedTest::::setUp()",
      "221": "MediaInfoFeedTest::::tearDown()",
      "222": "MediaInfoFeedTest::::tearDown()",
      "223": "MediaInfoFeedTest::::tearDown()",
      "224": "MediaInfoFeedTest::::tearDown()",
      "225": "MediaInfoFeedTest::::tearDown()",
      "234": "MediaInfoFeedTest::::main(java.lang.String[])",
      "235": "MediaInfoFeedTest::::main(java.lang.String[])",
      "236": "MediaInfoFeedTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          33,
          60
        ],
        "covered_lines": [
          9,
          27,
          28,
          34,
          41,
          42
        ],
        "label": "MediaInfoFeed::::getData()"
      },
      {
        "test_lines": [
          69,
          84
        ],
        "covered_lines": [
          9,
          20,
          27,
          28,
          41,
          42
        ],
        "label": "MediaInfoFeed::::getMeta()"
      },
      {
        "test_lines": [
          93,
          104
        ],
        "covered_lines": [
          9,
          27,
          28,
          41,
          42
        ],
        "label": "MediaInfoFeed::::setData(org.jinstagram.entity.users.feed.MediaFeedData)"
      },
      {
        "test_lines": [
          113,
          124
        ],
        "covered_lines": [
          9,
          27,
          28,
          41,
          42
        ],
        "label": "MediaInfoFeed::::setMeta(org.jinstagram.entity.common.Meta)"
      },
      {
        "test_lines": [
          133,
          144
        ],
        "covered_lines": [
          9,
          27,
          28,
          41,
          42,
          46
        ],
        "label": "MediaInfoFeed::::toString()"
      },
      {
        "test_lines": [
          151,
          160
        ],
        "covered_lines": [
          9,
          34
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          167,
          176
        ],
        "covered_lines": [
          9,
          34
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/likes/LikesFeed.java": {
    "class_content": [
      "package org.jinstagram.entity.likes;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.jinstagram.entity.common.User;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class LikesFeed extends InstagramObject {\n",
      "\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate List<User> userList;\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta\n",
      "\t *            the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the userList\n",
      "\t */\n",
      "\tpublic List<User> getUserList() {\n",
      "\t\treturn userList;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param userList\n",
      "\t *            the userList to set\n",
      "\t */\n",
      "\tpublic void setUserList(List<User> userList) {\n",
      "\t\tthis.userList = userList;\n",
      "\t}\n",
      "\n",
      "\t@Override\n",
      "\tpublic String toString() {\n",
      "\t\treturn String.format(\"LikesFeed [meta=%s, userList=%s]\", meta, userList);\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.likes;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.jinstagram.entity.common.User;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>LikesFeedTest</code> contains tests for the class\n",
      " * <code>{@link LikesFeed}</code>.\n",
      " */\n",
      "public class LikesFeedTest {\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1() throws Exception {\n",
      "\t\tLikesFeed fixture = new LikesFeed();\n",
      "\t\tfixture.setUserList(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the List<User> getUserList() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUserList_1() throws Exception {\n",
      "\t\tLikesFeed fixture = new LikesFeed();\n",
      "\t\tfixture.setUserList(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tList<User> result = fixture.getUserList();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1() throws Exception {\n",
      "\t\tLikesFeed fixture = new LikesFeed();\n",
      "\t\tfixture.setUserList(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUserList(List<User>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUserList_1() throws Exception {\n",
      "\t\tLikesFeed fixture = new LikesFeed();\n",
      "\t\tfixture.setUserList(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tList<User> userList = new LinkedList();\n",
      "\n",
      "\t\tfixture.setUserList(userList);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tLikesFeed fixture = new LikesFeed();\n",
      "\t\tfixture.setUserList(new LinkedList());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"LikesFeed [meta=Meta [code=0, errorMessage=null, errorType=null], userList=[]]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "LikesFeed::::getMeta()": [
        22,
        24
      ],
      "LikesFeed::::setMeta(org.jinstagram.entity.common.Meta)": [
        30,
        32
      ],
      "LikesFeed::::getUserList()": [
        37,
        39
      ],
      "LikesFeed::::setUserList(java.util.List<org.jinstagram.entity.common.User>)": [
        45,
        47
      ],
      "LikesFeed::::toString()": [
        49,
        52
      ]
    },
    "test_method_lines_dic": {
      "LikesFeedTest::::testGetMeta_1()": [
        25,
        39
      ],
      "LikesFeedTest::::testGetUserList_1()": [
        48,
        59
      ],
      "LikesFeedTest::::testSetMeta_1()": [
        68,
        78
      ],
      "LikesFeedTest::::testSetUserList_1()": [
        87,
        97
      ],
      "LikesFeedTest::::testToString_1()": [
        106,
        116
      ]
    },
    "reverse_method_lines_dic": {
      "22": "LikesFeed::::getMeta()",
      "23": "LikesFeed::::getMeta()",
      "24": "LikesFeed::::getMeta()",
      "30": "LikesFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "31": "LikesFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "32": "LikesFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "37": "LikesFeed::::getUserList()",
      "38": "LikesFeed::::getUserList()",
      "39": "LikesFeed::::getUserList()",
      "45": "LikesFeed::::setUserList(java.util.List<org.jinstagram.entity.common.User>)",
      "46": "LikesFeed::::setUserList(java.util.List<org.jinstagram.entity.common.User>)",
      "47": "LikesFeed::::setUserList(java.util.List<org.jinstagram.entity.common.User>)",
      "49": "LikesFeed::::toString()",
      "50": "LikesFeed::::toString()",
      "51": "LikesFeed::::toString()",
      "52": "LikesFeed::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "25": "LikesFeedTest::::testGetMeta_1()",
      "26": "LikesFeedTest::::testGetMeta_1()",
      "27": "LikesFeedTest::::testGetMeta_1()",
      "28": "LikesFeedTest::::testGetMeta_1()",
      "29": "LikesFeedTest::::testGetMeta_1()",
      "30": "LikesFeedTest::::testGetMeta_1()",
      "31": "LikesFeedTest::::testGetMeta_1()",
      "32": "LikesFeedTest::::testGetMeta_1()",
      "33": "LikesFeedTest::::testGetMeta_1()",
      "34": "LikesFeedTest::::testGetMeta_1()",
      "35": "LikesFeedTest::::testGetMeta_1()",
      "36": "LikesFeedTest::::testGetMeta_1()",
      "37": "LikesFeedTest::::testGetMeta_1()",
      "38": "LikesFeedTest::::testGetMeta_1()",
      "39": "LikesFeedTest::::testGetMeta_1()",
      "48": "LikesFeedTest::::testGetUserList_1()",
      "49": "LikesFeedTest::::testGetUserList_1()",
      "50": "LikesFeedTest::::testGetUserList_1()",
      "51": "LikesFeedTest::::testGetUserList_1()",
      "52": "LikesFeedTest::::testGetUserList_1()",
      "53": "LikesFeedTest::::testGetUserList_1()",
      "54": "LikesFeedTest::::testGetUserList_1()",
      "55": "LikesFeedTest::::testGetUserList_1()",
      "56": "LikesFeedTest::::testGetUserList_1()",
      "57": "LikesFeedTest::::testGetUserList_1()",
      "58": "LikesFeedTest::::testGetUserList_1()",
      "59": "LikesFeedTest::::testGetUserList_1()",
      "68": "LikesFeedTest::::testSetMeta_1()",
      "69": "LikesFeedTest::::testSetMeta_1()",
      "70": "LikesFeedTest::::testSetMeta_1()",
      "71": "LikesFeedTest::::testSetMeta_1()",
      "72": "LikesFeedTest::::testSetMeta_1()",
      "73": "LikesFeedTest::::testSetMeta_1()",
      "74": "LikesFeedTest::::testSetMeta_1()",
      "75": "LikesFeedTest::::testSetMeta_1()",
      "76": "LikesFeedTest::::testSetMeta_1()",
      "77": "LikesFeedTest::::testSetMeta_1()",
      "78": "LikesFeedTest::::testSetMeta_1()",
      "87": "LikesFeedTest::::testSetUserList_1()",
      "88": "LikesFeedTest::::testSetUserList_1()",
      "89": "LikesFeedTest::::testSetUserList_1()",
      "90": "LikesFeedTest::::testSetUserList_1()",
      "91": "LikesFeedTest::::testSetUserList_1()",
      "92": "LikesFeedTest::::testSetUserList_1()",
      "93": "LikesFeedTest::::testSetUserList_1()",
      "94": "LikesFeedTest::::testSetUserList_1()",
      "95": "LikesFeedTest::::testSetUserList_1()",
      "96": "LikesFeedTest::::testSetUserList_1()",
      "97": "LikesFeedTest::::testSetUserList_1()",
      "106": "LikesFeedTest::::testToString_1()",
      "107": "LikesFeedTest::::testToString_1()",
      "108": "LikesFeedTest::::testToString_1()",
      "109": "LikesFeedTest::::testToString_1()",
      "110": "LikesFeedTest::::testToString_1()",
      "111": "LikesFeedTest::::testToString_1()",
      "112": "LikesFeedTest::::testToString_1()",
      "113": "LikesFeedTest::::testToString_1()",
      "114": "LikesFeedTest::::testToString_1()",
      "115": "LikesFeedTest::::testToString_1()",
      "116": "LikesFeedTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          25,
          39
        ],
        "covered_lines": [
          11,
          23,
          31,
          32,
          46,
          47
        ],
        "label": "LikesFeed::::getMeta()"
      },
      {
        "test_lines": [
          48,
          59
        ],
        "covered_lines": [
          11,
          31,
          32,
          38,
          46,
          47
        ],
        "label": "LikesFeed::::getUserList()"
      },
      {
        "test_lines": [
          68,
          78
        ],
        "covered_lines": [
          11,
          31,
          32,
          46,
          47
        ],
        "label": "LikesFeed::::setMeta(org.jinstagram.entity.common.Meta)"
      },
      {
        "test_lines": [
          87,
          97
        ],
        "covered_lines": [
          11,
          31,
          32,
          46,
          47
        ],
        "label": "LikesFeed::::setUserList(java.util.List<org.jinstagram.entity.common.User>)"
      },
      {
        "test_lines": [
          106,
          116
        ],
        "covered_lines": [
          11,
          31,
          32,
          46,
          47,
          51
        ],
        "label": "LikesFeed::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/users/feed/UserFeedData.java": {
    "class_content": [
      "package org.jinstagram.entity.users.feed;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class UserFeedData {\n",
      "\t@Deprecated\n",
      "\t@SerializedName(\"first_name\")\n",
      "\tprivate String firstName;\n",
      "\n",
      "\t@SerializedName(\"id\")\n",
      "\tprivate String id;\n",
      "\n",
      "\t@Deprecated\n",
      "\t@SerializedName(\"last_name\")\n",
      "\tprivate String lastName;\n",
      "\n",
      "\t@SerializedName(\"profile_picture\")\n",
      "\tprivate String profilePictureUrl;\n",
      "\n",
      "\t@SerializedName(\"username\")\n",
      "\tprivate String userName;\n",
      "\t\n",
      "\t@SerializedName(\"full_name\")\n",
      "\tprivate String fullName;\n",
      "\t\n",
      "\t@SerializedName(\"website\")\n",
      "\tprivate String website;\n",
      "\t\n",
      "\t@SerializedName(\"bio\")\n",
      "\tprivate String bio;\n",
      "\n",
      "\tpublic String getFullName() {\n",
      "\t\treturn fullName;\n",
      "\t}\n",
      "\n",
      "\tpublic void setFullName(String fullName) {\n",
      "\t\tthis.fullName = fullName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the userName\n",
      "\t */\n",
      "\tpublic String getUserName() {\n",
      "\t\treturn userName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param userName the userName to set\n",
      "\t */\n",
      "\tpublic void setUserName(String userName) {\n",
      "\t\tthis.userName = userName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the firstName\n",
      "\t */\n",
      "\t@Deprecated\n",
      "\tpublic String getFirstName() {\n",
      "\t\treturn firstName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param firstName the firstName to set\n",
      "\t */\n",
      "\t@Deprecated\n",
      "\tpublic void setFirstName(String firstName) {\n",
      "\t\tthis.firstName = firstName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the profilePictureUrl\n",
      "\t */\n",
      "\tpublic String getProfilePictureUrl() {\n",
      "\t\treturn profilePictureUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param profilePictureUrl the profilePictureUrl to set\n",
      "\t */\n",
      "\tpublic void setProfilePictureUrl(String profilePictureUrl) {\n",
      "\t\tthis.profilePictureUrl = profilePictureUrl;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the lastName\n",
      "\t */\n",
      "\t@Deprecated\n",
      "\tpublic String getLastName() {\n",
      "\t\treturn lastName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param lastName the lastName to set\n",
      "\t */\n",
      "\t@Deprecated\n",
      "\tpublic void setLastName(String lastName) {\n",
      "\t\tthis.lastName = lastName;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the id\n",
      "\t */\n",
      "\tpublic String getId() {\n",
      "\t\treturn id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param id the id to set\n",
      "\t */\n",
      "\tpublic void setId(String id) {\n",
      "\t\tthis.id = id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * \n",
      "\t * @return the website\n",
      "\t */\n",
      "    public String getWebsite() {\n",
      "        return website;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \n",
      "     * @param website the website to set\n",
      "     */\n",
      "    public void setWebsite(String website) {\n",
      "        this.website = website;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \n",
      "     * @return the bio\n",
      "     */\n",
      "    public String getBio() {\n",
      "        return bio;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \n",
      "     * @param bio the bio to set\n",
      "     */\n",
      "    public void setBio(String bio) {\n",
      "        this.bio = bio;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"UserFeedData [id=%s, profilePictureUrl=%s, userName=%s, fullName=%s, website=%s, bio=%s]\",\n",
      "                id, profilePictureUrl, userName, fullName, website, bio);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.users.feed;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>UserFeedDataTest</code> contains tests for the class\n",
      " * <code>{@link UserFeedData}</code>.\n",
      " */\n",
      "public class UserFeedDataTest {\n",
      "\t/**\n",
      "\t * Run the String getBio() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetBio_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getBio();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getFirstName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetFirstName_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getFirstName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getFullName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetFullName_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getFullName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetId_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getLastName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLastName_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getLastName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getProfilePictureUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetProfilePictureUrl_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getProfilePictureUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getUserName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUserName_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getUserName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getWebsite() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetWebsite_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getWebsite();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setBio(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetBio_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString bio = \"\";\n",
      "\n",
      "\t\tfixture.setBio(bio);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setFirstName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetFirstName_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString firstName = \"\";\n",
      "\n",
      "\t\tfixture.setFirstName(firstName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setFullName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetFullName_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString fullName = \"\";\n",
      "\n",
      "\t\tfixture.setFullName(fullName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetId_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString id = \"\";\n",
      "\n",
      "\t\tfixture.setId(id);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLastName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLastName_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString lastName = \"\";\n",
      "\n",
      "\t\tfixture.setLastName(lastName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setProfilePictureUrl(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetProfilePictureUrl_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString profilePictureUrl = \"\";\n",
      "\n",
      "\t\tfixture.setProfilePictureUrl(profilePictureUrl);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUserName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUserName_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString userName = \"\";\n",
      "\n",
      "\t\tfixture.setUserName(userName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setWebsite(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetWebsite_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString website = \"\";\n",
      "\n",
      "\t\tfixture.setWebsite(website);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tUserFeedData fixture = new UserFeedData();\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setLastName(\"\");\n",
      "\t\tfixture.setUserName(\"\");\n",
      "\t\tfixture.setProfilePictureUrl(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"UserFeedData [id=, profilePictureUrl=, userName=, fullName=, website=, bio=]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "UserFeedData::::getFullName()": [
        32,
        34
      ],
      "UserFeedData::::setFullName(java.lang.String)": [
        36,
        38
      ],
      "UserFeedData::::getUserName()": [
        43,
        45
      ],
      "UserFeedData::::setUserName(java.lang.String)": [
        50,
        52
      ],
      "UserFeedData::::getFirstName()": [
        57,
        60
      ],
      "UserFeedData::::setFirstName(java.lang.String)": [
        65,
        68
      ],
      "UserFeedData::::getProfilePictureUrl()": [
        73,
        75
      ],
      "UserFeedData::::setProfilePictureUrl(java.lang.String)": [
        80,
        82
      ],
      "UserFeedData::::getLastName()": [
        87,
        90
      ],
      "UserFeedData::::setLastName(java.lang.String)": [
        95,
        98
      ],
      "UserFeedData::::getId()": [
        103,
        105
      ],
      "UserFeedData::::setId(java.lang.String)": [
        110,
        112
      ],
      "UserFeedData::::getWebsite()": [
        118,
        120
      ],
      "UserFeedData::::setWebsite(java.lang.String)": [
        126,
        128
      ],
      "UserFeedData::::getBio()": [
        134,
        136
      ],
      "UserFeedData::::setBio(java.lang.String)": [
        142,
        144
      ],
      "UserFeedData::::toString()": [
        146,
        150
      ]
    },
    "test_method_lines_dic": {
      "UserFeedDataTest::::testGetBio_1()": [
        19,
        35
      ],
      "UserFeedDataTest::::testGetFirstName_1()": [
        44,
        60
      ],
      "UserFeedDataTest::::testGetFullName_1()": [
        69,
        85
      ],
      "UserFeedDataTest::::testGetId_1()": [
        94,
        110
      ],
      "UserFeedDataTest::::testGetLastName_1()": [
        119,
        135
      ],
      "UserFeedDataTest::::testGetProfilePictureUrl_1()": [
        144,
        160
      ],
      "UserFeedDataTest::::testGetUserName_1()": [
        169,
        185
      ],
      "UserFeedDataTest::::testGetWebsite_1()": [
        194,
        210
      ],
      "UserFeedDataTest::::testSetBio_1()": [
        219,
        235
      ],
      "UserFeedDataTest::::testSetFirstName_1()": [
        244,
        260
      ],
      "UserFeedDataTest::::testSetFullName_1()": [
        269,
        285
      ],
      "UserFeedDataTest::::testSetId_1()": [
        294,
        310
      ],
      "UserFeedDataTest::::testSetLastName_1()": [
        319,
        335
      ],
      "UserFeedDataTest::::testSetProfilePictureUrl_1()": [
        344,
        360
      ],
      "UserFeedDataTest::::testSetUserName_1()": [
        369,
        385
      ],
      "UserFeedDataTest::::testSetWebsite_1()": [
        394,
        410
      ],
      "UserFeedDataTest::::testToString_1()": [
        419,
        435
      ]
    },
    "reverse_method_lines_dic": {
      "32": "UserFeedData::::getFullName()",
      "33": "UserFeedData::::getFullName()",
      "34": "UserFeedData::::getFullName()",
      "36": "UserFeedData::::setFullName(java.lang.String)",
      "37": "UserFeedData::::setFullName(java.lang.String)",
      "38": "UserFeedData::::setFullName(java.lang.String)",
      "43": "UserFeedData::::getUserName()",
      "44": "UserFeedData::::getUserName()",
      "45": "UserFeedData::::getUserName()",
      "50": "UserFeedData::::setUserName(java.lang.String)",
      "51": "UserFeedData::::setUserName(java.lang.String)",
      "52": "UserFeedData::::setUserName(java.lang.String)",
      "57": "UserFeedData::::getFirstName()",
      "58": "UserFeedData::::getFirstName()",
      "59": "UserFeedData::::getFirstName()",
      "60": "UserFeedData::::getFirstName()",
      "65": "UserFeedData::::setFirstName(java.lang.String)",
      "66": "UserFeedData::::setFirstName(java.lang.String)",
      "67": "UserFeedData::::setFirstName(java.lang.String)",
      "68": "UserFeedData::::setFirstName(java.lang.String)",
      "73": "UserFeedData::::getProfilePictureUrl()",
      "74": "UserFeedData::::getProfilePictureUrl()",
      "75": "UserFeedData::::getProfilePictureUrl()",
      "80": "UserFeedData::::setProfilePictureUrl(java.lang.String)",
      "81": "UserFeedData::::setProfilePictureUrl(java.lang.String)",
      "82": "UserFeedData::::setProfilePictureUrl(java.lang.String)",
      "87": "UserFeedData::::getLastName()",
      "88": "UserFeedData::::getLastName()",
      "89": "UserFeedData::::getLastName()",
      "90": "UserFeedData::::getLastName()",
      "95": "UserFeedData::::setLastName(java.lang.String)",
      "96": "UserFeedData::::setLastName(java.lang.String)",
      "97": "UserFeedData::::setLastName(java.lang.String)",
      "98": "UserFeedData::::setLastName(java.lang.String)",
      "103": "UserFeedData::::getId()",
      "104": "UserFeedData::::getId()",
      "105": "UserFeedData::::getId()",
      "110": "UserFeedData::::setId(java.lang.String)",
      "111": "UserFeedData::::setId(java.lang.String)",
      "112": "UserFeedData::::setId(java.lang.String)",
      "118": "UserFeedData::::getWebsite()",
      "119": "UserFeedData::::getWebsite()",
      "120": "UserFeedData::::getWebsite()",
      "126": "UserFeedData::::setWebsite(java.lang.String)",
      "127": "UserFeedData::::setWebsite(java.lang.String)",
      "128": "UserFeedData::::setWebsite(java.lang.String)",
      "134": "UserFeedData::::getBio()",
      "135": "UserFeedData::::getBio()",
      "136": "UserFeedData::::getBio()",
      "142": "UserFeedData::::setBio(java.lang.String)",
      "143": "UserFeedData::::setBio(java.lang.String)",
      "144": "UserFeedData::::setBio(java.lang.String)",
      "146": "UserFeedData::::toString()",
      "147": "UserFeedData::::toString()",
      "148": "UserFeedData::::toString()",
      "149": "UserFeedData::::toString()",
      "150": "UserFeedData::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "19": "UserFeedDataTest::::testGetBio_1()",
      "20": "UserFeedDataTest::::testGetBio_1()",
      "21": "UserFeedDataTest::::testGetBio_1()",
      "22": "UserFeedDataTest::::testGetBio_1()",
      "23": "UserFeedDataTest::::testGetBio_1()",
      "24": "UserFeedDataTest::::testGetBio_1()",
      "25": "UserFeedDataTest::::testGetBio_1()",
      "26": "UserFeedDataTest::::testGetBio_1()",
      "27": "UserFeedDataTest::::testGetBio_1()",
      "28": "UserFeedDataTest::::testGetBio_1()",
      "29": "UserFeedDataTest::::testGetBio_1()",
      "30": "UserFeedDataTest::::testGetBio_1()",
      "31": "UserFeedDataTest::::testGetBio_1()",
      "32": "UserFeedDataTest::::testGetBio_1()",
      "33": "UserFeedDataTest::::testGetBio_1()",
      "34": "UserFeedDataTest::::testGetBio_1()",
      "35": "UserFeedDataTest::::testGetBio_1()",
      "44": "UserFeedDataTest::::testGetFirstName_1()",
      "45": "UserFeedDataTest::::testGetFirstName_1()",
      "46": "UserFeedDataTest::::testGetFirstName_1()",
      "47": "UserFeedDataTest::::testGetFirstName_1()",
      "48": "UserFeedDataTest::::testGetFirstName_1()",
      "49": "UserFeedDataTest::::testGetFirstName_1()",
      "50": "UserFeedDataTest::::testGetFirstName_1()",
      "51": "UserFeedDataTest::::testGetFirstName_1()",
      "52": "UserFeedDataTest::::testGetFirstName_1()",
      "53": "UserFeedDataTest::::testGetFirstName_1()",
      "54": "UserFeedDataTest::::testGetFirstName_1()",
      "55": "UserFeedDataTest::::testGetFirstName_1()",
      "56": "UserFeedDataTest::::testGetFirstName_1()",
      "57": "UserFeedDataTest::::testGetFirstName_1()",
      "58": "UserFeedDataTest::::testGetFirstName_1()",
      "59": "UserFeedDataTest::::testGetFirstName_1()",
      "60": "UserFeedDataTest::::testGetFirstName_1()",
      "69": "UserFeedDataTest::::testGetFullName_1()",
      "70": "UserFeedDataTest::::testGetFullName_1()",
      "71": "UserFeedDataTest::::testGetFullName_1()",
      "72": "UserFeedDataTest::::testGetFullName_1()",
      "73": "UserFeedDataTest::::testGetFullName_1()",
      "74": "UserFeedDataTest::::testGetFullName_1()",
      "75": "UserFeedDataTest::::testGetFullName_1()",
      "76": "UserFeedDataTest::::testGetFullName_1()",
      "77": "UserFeedDataTest::::testGetFullName_1()",
      "78": "UserFeedDataTest::::testGetFullName_1()",
      "79": "UserFeedDataTest::::testGetFullName_1()",
      "80": "UserFeedDataTest::::testGetFullName_1()",
      "81": "UserFeedDataTest::::testGetFullName_1()",
      "82": "UserFeedDataTest::::testGetFullName_1()",
      "83": "UserFeedDataTest::::testGetFullName_1()",
      "84": "UserFeedDataTest::::testGetFullName_1()",
      "85": "UserFeedDataTest::::testGetFullName_1()",
      "94": "UserFeedDataTest::::testGetId_1()",
      "95": "UserFeedDataTest::::testGetId_1()",
      "96": "UserFeedDataTest::::testGetId_1()",
      "97": "UserFeedDataTest::::testGetId_1()",
      "98": "UserFeedDataTest::::testGetId_1()",
      "99": "UserFeedDataTest::::testGetId_1()",
      "100": "UserFeedDataTest::::testGetId_1()",
      "101": "UserFeedDataTest::::testGetId_1()",
      "102": "UserFeedDataTest::::testGetId_1()",
      "103": "UserFeedDataTest::::testGetId_1()",
      "104": "UserFeedDataTest::::testGetId_1()",
      "105": "UserFeedDataTest::::testGetId_1()",
      "106": "UserFeedDataTest::::testGetId_1()",
      "107": "UserFeedDataTest::::testGetId_1()",
      "108": "UserFeedDataTest::::testGetId_1()",
      "109": "UserFeedDataTest::::testGetId_1()",
      "110": "UserFeedDataTest::::testGetId_1()",
      "119": "UserFeedDataTest::::testGetLastName_1()",
      "120": "UserFeedDataTest::::testGetLastName_1()",
      "121": "UserFeedDataTest::::testGetLastName_1()",
      "122": "UserFeedDataTest::::testGetLastName_1()",
      "123": "UserFeedDataTest::::testGetLastName_1()",
      "124": "UserFeedDataTest::::testGetLastName_1()",
      "125": "UserFeedDataTest::::testGetLastName_1()",
      "126": "UserFeedDataTest::::testGetLastName_1()",
      "127": "UserFeedDataTest::::testGetLastName_1()",
      "128": "UserFeedDataTest::::testGetLastName_1()",
      "129": "UserFeedDataTest::::testGetLastName_1()",
      "130": "UserFeedDataTest::::testGetLastName_1()",
      "131": "UserFeedDataTest::::testGetLastName_1()",
      "132": "UserFeedDataTest::::testGetLastName_1()",
      "133": "UserFeedDataTest::::testGetLastName_1()",
      "134": "UserFeedDataTest::::testGetLastName_1()",
      "135": "UserFeedDataTest::::testGetLastName_1()",
      "144": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "145": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "146": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "147": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "148": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "149": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "150": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "151": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "152": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "153": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "154": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "155": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "156": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "157": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "158": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "159": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "160": "UserFeedDataTest::::testGetProfilePictureUrl_1()",
      "169": "UserFeedDataTest::::testGetUserName_1()",
      "170": "UserFeedDataTest::::testGetUserName_1()",
      "171": "UserFeedDataTest::::testGetUserName_1()",
      "172": "UserFeedDataTest::::testGetUserName_1()",
      "173": "UserFeedDataTest::::testGetUserName_1()",
      "174": "UserFeedDataTest::::testGetUserName_1()",
      "175": "UserFeedDataTest::::testGetUserName_1()",
      "176": "UserFeedDataTest::::testGetUserName_1()",
      "177": "UserFeedDataTest::::testGetUserName_1()",
      "178": "UserFeedDataTest::::testGetUserName_1()",
      "179": "UserFeedDataTest::::testGetUserName_1()",
      "180": "UserFeedDataTest::::testGetUserName_1()",
      "181": "UserFeedDataTest::::testGetUserName_1()",
      "182": "UserFeedDataTest::::testGetUserName_1()",
      "183": "UserFeedDataTest::::testGetUserName_1()",
      "184": "UserFeedDataTest::::testGetUserName_1()",
      "185": "UserFeedDataTest::::testGetUserName_1()",
      "194": "UserFeedDataTest::::testGetWebsite_1()",
      "195": "UserFeedDataTest::::testGetWebsite_1()",
      "196": "UserFeedDataTest::::testGetWebsite_1()",
      "197": "UserFeedDataTest::::testGetWebsite_1()",
      "198": "UserFeedDataTest::::testGetWebsite_1()",
      "199": "UserFeedDataTest::::testGetWebsite_1()",
      "200": "UserFeedDataTest::::testGetWebsite_1()",
      "201": "UserFeedDataTest::::testGetWebsite_1()",
      "202": "UserFeedDataTest::::testGetWebsite_1()",
      "203": "UserFeedDataTest::::testGetWebsite_1()",
      "204": "UserFeedDataTest::::testGetWebsite_1()",
      "205": "UserFeedDataTest::::testGetWebsite_1()",
      "206": "UserFeedDataTest::::testGetWebsite_1()",
      "207": "UserFeedDataTest::::testGetWebsite_1()",
      "208": "UserFeedDataTest::::testGetWebsite_1()",
      "209": "UserFeedDataTest::::testGetWebsite_1()",
      "210": "UserFeedDataTest::::testGetWebsite_1()",
      "219": "UserFeedDataTest::::testSetBio_1()",
      "220": "UserFeedDataTest::::testSetBio_1()",
      "221": "UserFeedDataTest::::testSetBio_1()",
      "222": "UserFeedDataTest::::testSetBio_1()",
      "223": "UserFeedDataTest::::testSetBio_1()",
      "224": "UserFeedDataTest::::testSetBio_1()",
      "225": "UserFeedDataTest::::testSetBio_1()",
      "226": "UserFeedDataTest::::testSetBio_1()",
      "227": "UserFeedDataTest::::testSetBio_1()",
      "228": "UserFeedDataTest::::testSetBio_1()",
      "229": "UserFeedDataTest::::testSetBio_1()",
      "230": "UserFeedDataTest::::testSetBio_1()",
      "231": "UserFeedDataTest::::testSetBio_1()",
      "232": "UserFeedDataTest::::testSetBio_1()",
      "233": "UserFeedDataTest::::testSetBio_1()",
      "234": "UserFeedDataTest::::testSetBio_1()",
      "235": "UserFeedDataTest::::testSetBio_1()",
      "244": "UserFeedDataTest::::testSetFirstName_1()",
      "245": "UserFeedDataTest::::testSetFirstName_1()",
      "246": "UserFeedDataTest::::testSetFirstName_1()",
      "247": "UserFeedDataTest::::testSetFirstName_1()",
      "248": "UserFeedDataTest::::testSetFirstName_1()",
      "249": "UserFeedDataTest::::testSetFirstName_1()",
      "250": "UserFeedDataTest::::testSetFirstName_1()",
      "251": "UserFeedDataTest::::testSetFirstName_1()",
      "252": "UserFeedDataTest::::testSetFirstName_1()",
      "253": "UserFeedDataTest::::testSetFirstName_1()",
      "254": "UserFeedDataTest::::testSetFirstName_1()",
      "255": "UserFeedDataTest::::testSetFirstName_1()",
      "256": "UserFeedDataTest::::testSetFirstName_1()",
      "257": "UserFeedDataTest::::testSetFirstName_1()",
      "258": "UserFeedDataTest::::testSetFirstName_1()",
      "259": "UserFeedDataTest::::testSetFirstName_1()",
      "260": "UserFeedDataTest::::testSetFirstName_1()",
      "269": "UserFeedDataTest::::testSetFullName_1()",
      "270": "UserFeedDataTest::::testSetFullName_1()",
      "271": "UserFeedDataTest::::testSetFullName_1()",
      "272": "UserFeedDataTest::::testSetFullName_1()",
      "273": "UserFeedDataTest::::testSetFullName_1()",
      "274": "UserFeedDataTest::::testSetFullName_1()",
      "275": "UserFeedDataTest::::testSetFullName_1()",
      "276": "UserFeedDataTest::::testSetFullName_1()",
      "277": "UserFeedDataTest::::testSetFullName_1()",
      "278": "UserFeedDataTest::::testSetFullName_1()",
      "279": "UserFeedDataTest::::testSetFullName_1()",
      "280": "UserFeedDataTest::::testSetFullName_1()",
      "281": "UserFeedDataTest::::testSetFullName_1()",
      "282": "UserFeedDataTest::::testSetFullName_1()",
      "283": "UserFeedDataTest::::testSetFullName_1()",
      "284": "UserFeedDataTest::::testSetFullName_1()",
      "285": "UserFeedDataTest::::testSetFullName_1()",
      "294": "UserFeedDataTest::::testSetId_1()",
      "295": "UserFeedDataTest::::testSetId_1()",
      "296": "UserFeedDataTest::::testSetId_1()",
      "297": "UserFeedDataTest::::testSetId_1()",
      "298": "UserFeedDataTest::::testSetId_1()",
      "299": "UserFeedDataTest::::testSetId_1()",
      "300": "UserFeedDataTest::::testSetId_1()",
      "301": "UserFeedDataTest::::testSetId_1()",
      "302": "UserFeedDataTest::::testSetId_1()",
      "303": "UserFeedDataTest::::testSetId_1()",
      "304": "UserFeedDataTest::::testSetId_1()",
      "305": "UserFeedDataTest::::testSetId_1()",
      "306": "UserFeedDataTest::::testSetId_1()",
      "307": "UserFeedDataTest::::testSetId_1()",
      "308": "UserFeedDataTest::::testSetId_1()",
      "309": "UserFeedDataTest::::testSetId_1()",
      "310": "UserFeedDataTest::::testSetId_1()",
      "319": "UserFeedDataTest::::testSetLastName_1()",
      "320": "UserFeedDataTest::::testSetLastName_1()",
      "321": "UserFeedDataTest::::testSetLastName_1()",
      "322": "UserFeedDataTest::::testSetLastName_1()",
      "323": "UserFeedDataTest::::testSetLastName_1()",
      "324": "UserFeedDataTest::::testSetLastName_1()",
      "325": "UserFeedDataTest::::testSetLastName_1()",
      "326": "UserFeedDataTest::::testSetLastName_1()",
      "327": "UserFeedDataTest::::testSetLastName_1()",
      "328": "UserFeedDataTest::::testSetLastName_1()",
      "329": "UserFeedDataTest::::testSetLastName_1()",
      "330": "UserFeedDataTest::::testSetLastName_1()",
      "331": "UserFeedDataTest::::testSetLastName_1()",
      "332": "UserFeedDataTest::::testSetLastName_1()",
      "333": "UserFeedDataTest::::testSetLastName_1()",
      "334": "UserFeedDataTest::::testSetLastName_1()",
      "335": "UserFeedDataTest::::testSetLastName_1()",
      "344": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "345": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "346": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "347": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "348": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "349": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "350": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "351": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "352": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "353": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "354": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "355": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "356": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "357": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "358": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "359": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "360": "UserFeedDataTest::::testSetProfilePictureUrl_1()",
      "369": "UserFeedDataTest::::testSetUserName_1()",
      "370": "UserFeedDataTest::::testSetUserName_1()",
      "371": "UserFeedDataTest::::testSetUserName_1()",
      "372": "UserFeedDataTest::::testSetUserName_1()",
      "373": "UserFeedDataTest::::testSetUserName_1()",
      "374": "UserFeedDataTest::::testSetUserName_1()",
      "375": "UserFeedDataTest::::testSetUserName_1()",
      "376": "UserFeedDataTest::::testSetUserName_1()",
      "377": "UserFeedDataTest::::testSetUserName_1()",
      "378": "UserFeedDataTest::::testSetUserName_1()",
      "379": "UserFeedDataTest::::testSetUserName_1()",
      "380": "UserFeedDataTest::::testSetUserName_1()",
      "381": "UserFeedDataTest::::testSetUserName_1()",
      "382": "UserFeedDataTest::::testSetUserName_1()",
      "383": "UserFeedDataTest::::testSetUserName_1()",
      "384": "UserFeedDataTest::::testSetUserName_1()",
      "385": "UserFeedDataTest::::testSetUserName_1()",
      "394": "UserFeedDataTest::::testSetWebsite_1()",
      "395": "UserFeedDataTest::::testSetWebsite_1()",
      "396": "UserFeedDataTest::::testSetWebsite_1()",
      "397": "UserFeedDataTest::::testSetWebsite_1()",
      "398": "UserFeedDataTest::::testSetWebsite_1()",
      "399": "UserFeedDataTest::::testSetWebsite_1()",
      "400": "UserFeedDataTest::::testSetWebsite_1()",
      "401": "UserFeedDataTest::::testSetWebsite_1()",
      "402": "UserFeedDataTest::::testSetWebsite_1()",
      "403": "UserFeedDataTest::::testSetWebsite_1()",
      "404": "UserFeedDataTest::::testSetWebsite_1()",
      "405": "UserFeedDataTest::::testSetWebsite_1()",
      "406": "UserFeedDataTest::::testSetWebsite_1()",
      "407": "UserFeedDataTest::::testSetWebsite_1()",
      "408": "UserFeedDataTest::::testSetWebsite_1()",
      "409": "UserFeedDataTest::::testSetWebsite_1()",
      "410": "UserFeedDataTest::::testSetWebsite_1()",
      "419": "UserFeedDataTest::::testToString_1()",
      "420": "UserFeedDataTest::::testToString_1()",
      "421": "UserFeedDataTest::::testToString_1()",
      "422": "UserFeedDataTest::::testToString_1()",
      "423": "UserFeedDataTest::::testToString_1()",
      "424": "UserFeedDataTest::::testToString_1()",
      "425": "UserFeedDataTest::::testToString_1()",
      "426": "UserFeedDataTest::::testToString_1()",
      "427": "UserFeedDataTest::::testToString_1()",
      "428": "UserFeedDataTest::::testToString_1()",
      "429": "UserFeedDataTest::::testToString_1()",
      "430": "UserFeedDataTest::::testToString_1()",
      "431": "UserFeedDataTest::::testToString_1()",
      "432": "UserFeedDataTest::::testToString_1()",
      "433": "UserFeedDataTest::::testToString_1()",
      "434": "UserFeedDataTest::::testToString_1()",
      "435": "UserFeedDataTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          19,
          35
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          135,
          143,
          144
        ],
        "label": "UserFeedData::::getBio()"
      },
      {
        "test_lines": [
          44,
          60
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          59,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::getFirstName()"
      },
      {
        "test_lines": [
          69,
          85
        ],
        "covered_lines": [
          5,
          33,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::getFullName()"
      },
      {
        "test_lines": [
          94,
          110
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          104,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::getId()"
      },
      {
        "test_lines": [
          119,
          135
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          89,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::getLastName()"
      },
      {
        "test_lines": [
          144,
          160
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          74,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::getProfilePictureUrl()"
      },
      {
        "test_lines": [
          169,
          185
        ],
        "covered_lines": [
          5,
          37,
          38,
          44,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::getUserName()"
      },
      {
        "test_lines": [
          194,
          210
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          119,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::getWebsite()"
      },
      {
        "test_lines": [
          219,
          235
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::setBio(java.lang.String)"
      },
      {
        "test_lines": [
          244,
          260
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::setFirstName(java.lang.String)"
      },
      {
        "test_lines": [
          269,
          285
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::setFullName(java.lang.String)"
      },
      {
        "test_lines": [
          294,
          310
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::setId(java.lang.String)"
      },
      {
        "test_lines": [
          319,
          335
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::setLastName(java.lang.String)"
      },
      {
        "test_lines": [
          344,
          360
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::setProfilePictureUrl(java.lang.String)"
      },
      {
        "test_lines": [
          369,
          385
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::setUserName(java.lang.String)"
      },
      {
        "test_lines": [
          394,
          410
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144
        ],
        "label": "UserFeedData::::setWebsite(java.lang.String)"
      },
      {
        "test_lines": [
          419,
          435
        ],
        "covered_lines": [
          5,
          37,
          38,
          51,
          52,
          67,
          68,
          81,
          82,
          97,
          98,
          111,
          112,
          127,
          128,
          143,
          144,
          148
        ],
        "label": "UserFeedData::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/users/feed/MediaFeed.java": {
    "class_content": [
      "package org.jinstagram.entity.users.feed;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.jinstagram.entity.common.Pagination;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "public class MediaFeed extends InstagramObject{\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate List<MediaFeedData> data;\n",
      "\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t@SerializedName(\"pagination\")\n",
      "\tprivate Pagination pagination;\n",
      "\n",
      "\t/**\n",
      "\t * @return the pagination\n",
      "\t */\n",
      "\tpublic Pagination getPagination() {\n",
      "\t\treturn pagination;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param pagination the pagination to set\n",
      "\t */\n",
      "\tpublic void setPagination(Pagination pagination) {\n",
      "\t\tthis.pagination = pagination;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the data\n",
      "\t */\n",
      "\tpublic List<MediaFeedData> getData() {\n",
      "\t\treturn data;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param data the data to set\n",
      "\t */\n",
      "\tpublic void setData(List<MediaFeedData> data) {\n",
      "\t\tthis.data = data;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"MediaFeed [data=%s, meta=%s, pagination=%s]\", data, meta, pagination);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.users.feed;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.jinstagram.entity.common.Pagination;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>MediaFeedTest</code> contains tests for the class\n",
      " * <code>{@link MediaFeed}</code>.\n",
      " */\n",
      "public class MediaFeedTest {\n",
      "\t/**\n",
      "\t * Run the List<MediaFeedData> getData() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetData_1() throws Exception {\n",
      "\t\tMediaFeed fixture = new MediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tList<MediaFeedData> result = fixture.getData();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1() throws Exception {\n",
      "\t\tMediaFeed fixture = new MediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Pagination getPagination() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetPagination_1() throws Exception {\n",
      "\t\tMediaFeed fixture = new MediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tPagination result = fixture.getPagination();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextMaxTagId=null, nextMinId=null, nextUrl=null]\",\n",
      "\t\t\t\tresult.toString());\n",
      "\t\tassertEquals(null, result.getDepreciationWarning());\n",
      "\t\tassertEquals(null, result.getMinTagId());\n",
      "\t\tassertEquals(null, result.getNextMaxId());\n",
      "\t\tassertEquals(null, result.getNextCursor());\n",
      "\t\tassertEquals(null, result.getNextMinId());\n",
      "\t\tassertEquals(null, result.getNextMaxTagId());\n",
      "\t\tassertEquals(null, result.getNextUrl());\n",
      "\t\tassertEquals(false, result.hasNextPage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setData(List<MediaFeedData>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetData_1() throws Exception {\n",
      "\t\tMediaFeed fixture = new MediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tList<MediaFeedData> data = new ArrayList<MediaFeedData>();\n",
      "\n",
      "\t\tfixture.setData(data);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1() throws Exception {\n",
      "\t\tMediaFeed fixture = new MediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setPagination(Pagination) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetPagination_1() throws Exception {\n",
      "\t\tMediaFeed fixture = new MediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tPagination pagination = new Pagination();\n",
      "\n",
      "\t\tfixture.setPagination(pagination);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tMediaFeed fixture = new MediaFeed();\n",
      "\t\tfixture.setData(new ArrayList<MediaFeedData>());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"MediaFeed [data=[], meta=Meta [code=0, errorMessage=null, errorType=null], pagination=Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextMaxTagId=null, nextMinId=null, nextUrl=null]]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "MediaFeed::::getPagination()": [
        24,
        26
      ],
      "MediaFeed::::setPagination(org.jinstagram.entity.common.Pagination)": [
        31,
        33
      ],
      "MediaFeed::::getMeta()": [
        38,
        40
      ],
      "MediaFeed::::setMeta(org.jinstagram.entity.common.Meta)": [
        45,
        47
      ],
      "MediaFeed::::getData()": [
        52,
        54
      ],
      "MediaFeed::::setData(java.util.List<org.jinstagram.entity.users.feed.MediaFeedData>)": [
        59,
        61
      ],
      "MediaFeed::::toString()": [
        63,
        66
      ]
    },
    "test_method_lines_dic": {
      "MediaFeedTest::::testGetData_1()": [
        25,
        37
      ],
      "MediaFeedTest::::testGetMeta_1()": [
        46,
        61
      ],
      "MediaFeedTest::::testGetPagination_1()": [
        70,
        92
      ],
      "MediaFeedTest::::testSetData_1()": [
        101,
        112
      ],
      "MediaFeedTest::::testSetMeta_1()": [
        121,
        132
      ],
      "MediaFeedTest::::testSetPagination_1()": [
        141,
        152
      ],
      "MediaFeedTest::::testToString_1()": [
        161,
        174
      ]
    },
    "reverse_method_lines_dic": {
      "24": "MediaFeed::::getPagination()",
      "25": "MediaFeed::::getPagination()",
      "26": "MediaFeed::::getPagination()",
      "31": "MediaFeed::::setPagination(org.jinstagram.entity.common.Pagination)",
      "32": "MediaFeed::::setPagination(org.jinstagram.entity.common.Pagination)",
      "33": "MediaFeed::::setPagination(org.jinstagram.entity.common.Pagination)",
      "38": "MediaFeed::::getMeta()",
      "39": "MediaFeed::::getMeta()",
      "40": "MediaFeed::::getMeta()",
      "45": "MediaFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "46": "MediaFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "47": "MediaFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "52": "MediaFeed::::getData()",
      "53": "MediaFeed::::getData()",
      "54": "MediaFeed::::getData()",
      "59": "MediaFeed::::setData(java.util.List<org.jinstagram.entity.users.feed.MediaFeedData>)",
      "60": "MediaFeed::::setData(java.util.List<org.jinstagram.entity.users.feed.MediaFeedData>)",
      "61": "MediaFeed::::setData(java.util.List<org.jinstagram.entity.users.feed.MediaFeedData>)",
      "63": "MediaFeed::::toString()",
      "64": "MediaFeed::::toString()",
      "65": "MediaFeed::::toString()",
      "66": "MediaFeed::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "25": "MediaFeedTest::::testGetData_1()",
      "26": "MediaFeedTest::::testGetData_1()",
      "27": "MediaFeedTest::::testGetData_1()",
      "28": "MediaFeedTest::::testGetData_1()",
      "29": "MediaFeedTest::::testGetData_1()",
      "30": "MediaFeedTest::::testGetData_1()",
      "31": "MediaFeedTest::::testGetData_1()",
      "32": "MediaFeedTest::::testGetData_1()",
      "33": "MediaFeedTest::::testGetData_1()",
      "34": "MediaFeedTest::::testGetData_1()",
      "35": "MediaFeedTest::::testGetData_1()",
      "36": "MediaFeedTest::::testGetData_1()",
      "37": "MediaFeedTest::::testGetData_1()",
      "46": "MediaFeedTest::::testGetMeta_1()",
      "47": "MediaFeedTest::::testGetMeta_1()",
      "48": "MediaFeedTest::::testGetMeta_1()",
      "49": "MediaFeedTest::::testGetMeta_1()",
      "50": "MediaFeedTest::::testGetMeta_1()",
      "51": "MediaFeedTest::::testGetMeta_1()",
      "52": "MediaFeedTest::::testGetMeta_1()",
      "53": "MediaFeedTest::::testGetMeta_1()",
      "54": "MediaFeedTest::::testGetMeta_1()",
      "55": "MediaFeedTest::::testGetMeta_1()",
      "56": "MediaFeedTest::::testGetMeta_1()",
      "57": "MediaFeedTest::::testGetMeta_1()",
      "58": "MediaFeedTest::::testGetMeta_1()",
      "59": "MediaFeedTest::::testGetMeta_1()",
      "60": "MediaFeedTest::::testGetMeta_1()",
      "61": "MediaFeedTest::::testGetMeta_1()",
      "70": "MediaFeedTest::::testGetPagination_1()",
      "71": "MediaFeedTest::::testGetPagination_1()",
      "72": "MediaFeedTest::::testGetPagination_1()",
      "73": "MediaFeedTest::::testGetPagination_1()",
      "74": "MediaFeedTest::::testGetPagination_1()",
      "75": "MediaFeedTest::::testGetPagination_1()",
      "76": "MediaFeedTest::::testGetPagination_1()",
      "77": "MediaFeedTest::::testGetPagination_1()",
      "78": "MediaFeedTest::::testGetPagination_1()",
      "79": "MediaFeedTest::::testGetPagination_1()",
      "80": "MediaFeedTest::::testGetPagination_1()",
      "81": "MediaFeedTest::::testGetPagination_1()",
      "82": "MediaFeedTest::::testGetPagination_1()",
      "83": "MediaFeedTest::::testGetPagination_1()",
      "84": "MediaFeedTest::::testGetPagination_1()",
      "85": "MediaFeedTest::::testGetPagination_1()",
      "86": "MediaFeedTest::::testGetPagination_1()",
      "87": "MediaFeedTest::::testGetPagination_1()",
      "88": "MediaFeedTest::::testGetPagination_1()",
      "89": "MediaFeedTest::::testGetPagination_1()",
      "90": "MediaFeedTest::::testGetPagination_1()",
      "91": "MediaFeedTest::::testGetPagination_1()",
      "92": "MediaFeedTest::::testGetPagination_1()",
      "101": "MediaFeedTest::::testSetData_1()",
      "102": "MediaFeedTest::::testSetData_1()",
      "103": "MediaFeedTest::::testSetData_1()",
      "104": "MediaFeedTest::::testSetData_1()",
      "105": "MediaFeedTest::::testSetData_1()",
      "106": "MediaFeedTest::::testSetData_1()",
      "107": "MediaFeedTest::::testSetData_1()",
      "108": "MediaFeedTest::::testSetData_1()",
      "109": "MediaFeedTest::::testSetData_1()",
      "110": "MediaFeedTest::::testSetData_1()",
      "111": "MediaFeedTest::::testSetData_1()",
      "112": "MediaFeedTest::::testSetData_1()",
      "121": "MediaFeedTest::::testSetMeta_1()",
      "122": "MediaFeedTest::::testSetMeta_1()",
      "123": "MediaFeedTest::::testSetMeta_1()",
      "124": "MediaFeedTest::::testSetMeta_1()",
      "125": "MediaFeedTest::::testSetMeta_1()",
      "126": "MediaFeedTest::::testSetMeta_1()",
      "127": "MediaFeedTest::::testSetMeta_1()",
      "128": "MediaFeedTest::::testSetMeta_1()",
      "129": "MediaFeedTest::::testSetMeta_1()",
      "130": "MediaFeedTest::::testSetMeta_1()",
      "131": "MediaFeedTest::::testSetMeta_1()",
      "132": "MediaFeedTest::::testSetMeta_1()",
      "141": "MediaFeedTest::::testSetPagination_1()",
      "142": "MediaFeedTest::::testSetPagination_1()",
      "143": "MediaFeedTest::::testSetPagination_1()",
      "144": "MediaFeedTest::::testSetPagination_1()",
      "145": "MediaFeedTest::::testSetPagination_1()",
      "146": "MediaFeedTest::::testSetPagination_1()",
      "147": "MediaFeedTest::::testSetPagination_1()",
      "148": "MediaFeedTest::::testSetPagination_1()",
      "149": "MediaFeedTest::::testSetPagination_1()",
      "150": "MediaFeedTest::::testSetPagination_1()",
      "151": "MediaFeedTest::::testSetPagination_1()",
      "152": "MediaFeedTest::::testSetPagination_1()",
      "161": "MediaFeedTest::::testToString_1()",
      "162": "MediaFeedTest::::testToString_1()",
      "163": "MediaFeedTest::::testToString_1()",
      "164": "MediaFeedTest::::testToString_1()",
      "165": "MediaFeedTest::::testToString_1()",
      "166": "MediaFeedTest::::testToString_1()",
      "167": "MediaFeedTest::::testToString_1()",
      "168": "MediaFeedTest::::testToString_1()",
      "169": "MediaFeedTest::::testToString_1()",
      "170": "MediaFeedTest::::testToString_1()",
      "171": "MediaFeedTest::::testToString_1()",
      "172": "MediaFeedTest::::testToString_1()",
      "173": "MediaFeedTest::::testToString_1()",
      "174": "MediaFeedTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          25,
          37
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          53,
          60,
          61
        ],
        "label": "MediaFeed::::getData()"
      },
      {
        "test_lines": [
          46,
          61
        ],
        "covered_lines": [
          11,
          32,
          33,
          39,
          46,
          47,
          60,
          61
        ],
        "label": "MediaFeed::::getMeta()"
      },
      {
        "test_lines": [
          70,
          92
        ],
        "covered_lines": [
          11,
          25,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "MediaFeed::::getPagination()"
      },
      {
        "test_lines": [
          101,
          112
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "MediaFeed::::setData(java.util.List<org.jinstagram.entity.users.feed.MediaFeedData>)"
      },
      {
        "test_lines": [
          121,
          132
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "MediaFeed::::setMeta(org.jinstagram.entity.common.Meta)"
      },
      {
        "test_lines": [
          141,
          152
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "MediaFeed::::setPagination(org.jinstagram.entity.common.Pagination)"
      },
      {
        "test_lines": [
          161,
          174
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61,
          65
        ],
        "label": "MediaFeed::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/users/feed/MediaFeedData.java": {
    "class_content": [
      "package org.jinstagram.entity.users.feed;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.entity.common.Caption;\n",
      "import org.jinstagram.entity.common.Comments;\n",
      "import org.jinstagram.entity.common.Images;\n",
      "import org.jinstagram.entity.common.Likes;\n",
      "import org.jinstagram.entity.common.Location;\n",
      "import org.jinstagram.entity.common.User;\n",
      "import org.jinstagram.entity.common.UsersInPhoto;\n",
      "import org.jinstagram.entity.common.Videos;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class MediaFeedData {\n",
      "\t@SerializedName(\"caption\")\n",
      "\tprivate Caption caption;\n",
      "\n",
      "\t@SerializedName(\"comments\")\n",
      "\tprivate Comments comments;\n",
      "\n",
      "\t@SerializedName(\"created_time\")\n",
      "\tprivate String createdTime;\n",
      "\n",
      "\t@SerializedName(\"id\")\n",
      "\tprivate String id;\n",
      "\n",
      "\t@SerializedName(\"filter\")\n",
      "\tprivate String imageFilter;\n",
      "\n",
      "\t@SerializedName(\"images\")\n",
      "\tprivate Images images;\n",
      "\n",
      "\t@SerializedName(\"videos\")\n",
      "\tprivate Videos videos;\n",
      "\n",
      "\t@SerializedName(\"likes\")\n",
      "\tprivate Likes likes;\n",
      "\n",
      "\t@SerializedName(\"link\")\n",
      "\tprivate String link;\n",
      "\n",
      "\t@SerializedName(\"location\")\n",
      "\tprivate Location location;\n",
      "\n",
      "\t@SerializedName(\"tags\")\n",
      "\tprivate List<String> tags;\n",
      "\n",
      "\tpublic static final String TYPE_IMAGE = \"image\";\n",
      "\tpublic static final String TYPE_VIDEO = \"video\";\n",
      "\tpublic static final String TYPE_CAROUSEL = \"carousel\";\n",
      "\n",
      "\t@SerializedName(\"type\")\n",
      "\tprivate String type;\n",
      "\n",
      "\t@SerializedName(\"user\")\n",
      "\tprivate User user;\n",
      "\n",
      "\t@SerializedName(\"user_has_liked\")\n",
      "\tprivate boolean userHasLiked;\n",
      "\n",
      "\t@SerializedName(\"users_in_photo\")\n",
      "\tprivate List<UsersInPhoto> usersInPhotoList;\n",
      "\n",
      "\t@SerializedName(\"carousel_media\")\n",
      "\tprivate List<CarouselMedia> carouselMedia;\n",
      "\t\n",
      "\t/**\n",
      "\t * @return the location\n",
      "\t */\n",
      "\tpublic Location getLocation() {\n",
      "\t\treturn location;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param location the location to set\n",
      "\t */\n",
      "\tpublic void setLocation(Location location) {\n",
      "\t\tthis.location = location;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the comments\n",
      "\t */\n",
      "\tpublic Comments getComments() {\n",
      "\t\treturn comments;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param comments the comments to set\n",
      "\t */\n",
      "\tpublic void setComments(Comments comments) {\n",
      "\t\tthis.comments = comments;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the caption\n",
      "\t */\n",
      "\tpublic Caption getCaption() {\n",
      "\t\treturn caption;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param caption the caption to set\n",
      "\t */\n",
      "\tpublic void setCaption(Caption caption) {\n",
      "\t\tthis.caption = caption;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the link\n",
      "\t */\n",
      "\tpublic String getLink() {\n",
      "\t\treturn link;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param link the link to set\n",
      "\t */\n",
      "\tpublic void setLink(String link) {\n",
      "\t\tthis.link = link;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the likes\n",
      "\t */\n",
      "\tpublic Likes getLikes() {\n",
      "\t\treturn likes;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param likes the likes to set\n",
      "\t */\n",
      "\tpublic void setLikes(Likes likes) {\n",
      "\t\tthis.likes = likes;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the createdTime\n",
      "\t */\n",
      "\tpublic String getCreatedTime() {\n",
      "\t\treturn createdTime;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param createdTime the createdTime to set\n",
      "\t */\n",
      "\tpublic void setCreatedTime(String createdTime) {\n",
      "\t\tthis.createdTime = createdTime;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the images\n",
      "\t */\n",
      "\tpublic Images getImages() {\n",
      "\t\treturn images;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param images the images to set\n",
      "\t */\n",
      "\tpublic void setImages(Images images) {\n",
      "\t\tthis.images = images;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the imageFilter\n",
      "\t */\n",
      "\tpublic String getImageFilter() {\n",
      "\t\treturn imageFilter;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param imageFilter the imageFilter to set\n",
      "\t */\n",
      "\tpublic void setImageFilter(String imageFilter) {\n",
      "\t\tthis.imageFilter = imageFilter;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the id\n",
      "\t */\n",
      "\tpublic String getId() {\n",
      "\t\treturn id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param id the id to set\n",
      "\t */\n",
      "\tpublic void setId(String id) {\n",
      "\t\tthis.id = id;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the user\n",
      "\t */\n",
      "\tpublic User getUser() {\n",
      "\t\treturn user;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param user the user to set\n",
      "\t */\n",
      "\tpublic void setUser(User user) {\n",
      "\t\tthis.user = user;\n",
      "\t}\n",
      "\n",
      "\tpublic boolean isUserHasLiked() {\n",
      "\t\treturn userHasLiked;\n",
      "\t}\n",
      "\n",
      "\tpublic void setUserHasLiked(boolean userHasLiked) {\n",
      "\t\tthis.userHasLiked = userHasLiked;\n",
      "\t}\n",
      "\n",
      "\tpublic List<String> getTags() {\n",
      "\t\treturn tags;\n",
      "\t}\n",
      "\n",
      "\tpublic void setTags(List<String> tags) {\n",
      "\t\tthis.tags = tags;\n",
      "\t}\n",
      "\n",
      "\tpublic String getType() {\n",
      "\t\treturn type;\n",
      "\t}\n",
      "\n",
      "\tpublic void setType(String type) {\n",
      "\t\tthis.type = type;\n",
      "\t}\n",
      "\n",
      "\tpublic Videos getVideos() {\n",
      "\t\treturn videos;\n",
      "\t}\n",
      "\n",
      "\tpublic void setVideos(Videos videos) {\n",
      "\t\tthis.videos = videos;\n",
      "\t}\n",
      "\n",
      "\tpublic List<UsersInPhoto> getUsersInPhotoList() {\n",
      "\t\treturn usersInPhotoList;\n",
      "\t}\n",
      "\n",
      "\tpublic void setUsersInPhotoList(List<UsersInPhoto> usersInPhotoList) {\n",
      "\t\tthis.usersInPhotoList = usersInPhotoList;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Return the carousel media.\n",
      "\t *\n",
      "\t * @return {@link List} of {@link CarouselMedia} the carousel media\n",
      "\t */\n",
      "\tpublic List<CarouselMedia> getCarouselMedia() {\n",
      "        return carouselMedia;\n",
      "    }\n",
      "\n",
      "\t/**\n",
      "\t * Set the carousel media.\n",
      "\t *\n",
      "\t * @param carouselMedia {@link List} of {@link CarouselMedia} the carousel media\n",
      "\t */\n",
      "\tpublic void setCarouselMedia(List<CarouselMedia> carouselMedia) {\n",
      "        this.carouselMedia = carouselMedia;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "\tpublic String toString() {\n",
      "\t\treturn String\n",
      "\t\t\t\t.format(\"MediaFeedData [caption=%s, comments=%s, createdTime=%s, id=%s, imageFilter=%s, images=%s, likes=%s, link=%s, location=%s, tags=%s, type=%s, user=%s, userHasLiked=%s, usersInPhoto=%s]\",\n",
      "\t\t\t\t\t\tcaption, comments, createdTime, id, imageFilter, images, likes, link, location, tags, type,\n",
      "\t\t\t\t\t\tuser, userHasLiked, usersInPhotoList);\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.users.feed;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.entity.common.Caption;\n",
      "import org.jinstagram.entity.common.Comments;\n",
      "import org.jinstagram.entity.common.Images;\n",
      "import org.jinstagram.entity.common.Likes;\n",
      "import org.jinstagram.entity.common.Location;\n",
      "import org.jinstagram.entity.common.User;\n",
      "import org.jinstagram.entity.common.UsersInPhoto;\n",
      "import org.jinstagram.entity.common.Videos;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>MediaFeedDataTest</code> contains tests for the class\n",
      " * <code>{@link MediaFeedData}</code>.\n",
      " */\n",
      "public class MediaFeedDataTest {\n",
      "\t/**\n",
      "\t * Run the MediaFeedData() constructor test.\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testMediaFeedData_1() throws Exception {\n",
      "\t\tMediaFeedData result = new MediaFeedData();\n",
      "\t\tassertNotNull(result);\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Caption getCaption() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCaption_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tCaption result = fixture.getCaption();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Caption [createdTime=null, from=null, id=null, text=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t\tassertEquals(null, result.getFrom());\n",
      "\t\tassertEquals(null, result.getText());\n",
      "\t\tassertEquals(null, result.getCreatedTime());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Comments getComments() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetComments_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tComments result = fixture.getComments();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Comments [comments=null, count=0]\", result.toString());\n",
      "\t\tassertEquals(0, result.getCount());\n",
      "\t\tassertEquals(null, result.getComments());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getCreatedTime() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCreatedTime_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tString result = fixture.getCreatedTime();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetId_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tString result = fixture.getId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getImageFilter() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetImageFilter_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tString result = fixture.getImageFilter();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Images getImages() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetImages_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tImages result = fixture.getImages();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Images [lowResolution=null, standardResolution=null, thumbnail=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getStandardResolution());\n",
      "\t\tassertEquals(null, result.getThumbnail());\n",
      "\t\tassertEquals(null, result.getLowResolution());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Likes getLikes() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLikes_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tLikes result = fixture.getLikes();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Likes [count=0, likesUserList=null]\", result.toString());\n",
      "\t\tassertEquals(0, result.getCount());\n",
      "\t\tassertEquals(null, result.getLikesUserList());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getLink() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLink_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tString result = fixture.getLink();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Location getLocation() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLocation_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tLocation result = fixture.getLocation();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Location [id=null, name=null, latitude=0.0, longitude=0.0]\", result.toString());\n",
      "\t\tassertEquals(null, result.getName());\n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t\tassertEquals(0.0, result.getLongitude(), 1.0);\n",
      "\t\tassertEquals(0.0, result.getLatitude(), 1.0);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the List<String> getTags() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetTags_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tList<String> result = fixture.getTags();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getType() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetType_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tString result = fixture.getType();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the User getUser() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUser_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tUser result = fixture.getUser();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"User [bio=null, fullName=null, id=null, profilePictureUrl=null, userName=null, websiteUrl=null]\",\n",
      "\t\t\t\tresult.toString());\n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t\tassertEquals(null, result.getFullName());\n",
      "\t\tassertEquals(null, result.getProfilePictureUrl());\n",
      "\t\tassertEquals(null, result.getUserName());\n",
      "\t\tassertEquals(null, result.getBio());\n",
      "\t\tassertEquals(null, result.getWebsiteUrl());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the List<UsersInPhoto> getUsersInPhotoList() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUsersInPhotoList_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tList<UsersInPhoto> result = fixture.getUsersInPhotoList();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Videos getVideos() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetVideos_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tVideos result = fixture.getVideos();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Videos [lowResolution=null, standardResolution=null]\", result.toString());\n",
      "\t\tassertEquals(null, result.getStandardResolution());\n",
      "\t\tassertEquals(null, result.getLowResolution());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the boolean isUserHasLiked() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testIsUserHasLiked_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tboolean result = fixture.isUserHasLiked();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(true, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the boolean isUserHasLiked() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testIsUserHasLiked_2() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(false);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tboolean result = fixture.isUserHasLiked();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(false, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCaption(Caption) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCaption_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tCaption caption = new Caption();\n",
      "\n",
      "\t\tfixture.setCaption(caption);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setComments(Comments) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetComments_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tComments comments = new Comments();\n",
      "\n",
      "\t\tfixture.setComments(comments);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCreatedTime(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCreatedTime_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tString createdTime = \"\";\n",
      "\n",
      "\t\tfixture.setCreatedTime(createdTime);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetId_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tString id = \"\";\n",
      "\n",
      "\t\tfixture.setId(id);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setImageFilter(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetImageFilter_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tString imageFilter = \"\";\n",
      "\n",
      "\t\tfixture.setImageFilter(imageFilter);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setImages(Images) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetImages_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tImages images = new Images();\n",
      "\n",
      "\t\tfixture.setImages(images);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLikes(Likes) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLikes_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tLikes likes = new Likes();\n",
      "\n",
      "\t\tfixture.setLikes(likes);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLink(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLink_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tString link = \"\";\n",
      "\n",
      "\t\tfixture.setLink(link);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLocation(Location) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLocation_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tLocation location = new Location();\n",
      "\n",
      "\t\tfixture.setLocation(location);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setTags(List<String>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetTags_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tList<String> tags = new ArrayList<String>();\n",
      "\n",
      "\t\tfixture.setTags(tags);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setType(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetType_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tString type = \"\";\n",
      "\n",
      "\t\tfixture.setType(type);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUser(User) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUser_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tUser user = new User();\n",
      "\n",
      "\t\tfixture.setUser(user);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUserHasLiked(boolean) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUserHasLiked_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tboolean userHasLiked = true;\n",
      "\n",
      "\t\tfixture.setUserHasLiked(userHasLiked);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUsersInPhotoList(List<UsersInPhoto>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUsersInPhotoList_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tList<UsersInPhoto> usersInPhotoList = new ArrayList<UsersInPhoto>();\n",
      "\n",
      "\t\tfixture.setUsersInPhotoList(usersInPhotoList);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setVideos(Videos) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetVideos_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\t\tVideos videos = new Videos();\n",
      "\n",
      "\t\tfixture.setVideos(videos);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tMediaFeedData fixture = new MediaFeedData();\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setCreatedTime(\"\");\n",
      "\t\tfixture.setVideos(new Videos());\n",
      "\t\tfixture.setCaption(new Caption());\n",
      "\t\tfixture.setUser(new User());\n",
      "\t\tfixture.setImageFilter(\"\");\n",
      "\t\tfixture.setImages(new Images());\n",
      "\t\tfixture.setType(\"\");\n",
      "\t\tfixture.setTags(new ArrayList<String>());\n",
      "\t\tfixture.setLink(\"\");\n",
      "\t\tfixture.setUserHasLiked(true);\n",
      "\t\tfixture.setUsersInPhotoList(new ArrayList<UsersInPhoto>());\n",
      "\t\tfixture.setComments(new Comments());\n",
      "\t\tfixture.setLocation(new Location());\n",
      "\t\tfixture.setLikes(new Likes());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"MediaFeedData [caption=Caption [createdTime=null, from=null, id=null, text=null], comments=Comments [comments=null, count=0], createdTime=, id=, imageFilter=, images=Images [lowResolution=null, standardResolution=null, thumbnail=null], likes=Likes [count=0, likesUserList=null], link=, location=Location [id=null, name=null, latitude=0.0, longitude=0.0], tags=[], type=, user=User [bio=null, fullName=null, id=null, profilePictureUrl=null, userName=null, websiteUrl=null], userHasLiked=true, usersInPhoto=[]]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "MediaFeedData::::getLocation()": [
        72,
        74
      ],
      "MediaFeedData::::setLocation(org.jinstagram.entity.common.Location)": [
        79,
        81
      ],
      "MediaFeedData::::getComments()": [
        86,
        88
      ],
      "MediaFeedData::::setComments(org.jinstagram.entity.common.Comments)": [
        93,
        95
      ],
      "MediaFeedData::::getCaption()": [
        100,
        102
      ],
      "MediaFeedData::::setCaption(org.jinstagram.entity.common.Caption)": [
        107,
        109
      ],
      "MediaFeedData::::getLink()": [
        114,
        116
      ],
      "MediaFeedData::::setLink(java.lang.String)": [
        121,
        123
      ],
      "MediaFeedData::::getLikes()": [
        128,
        130
      ],
      "MediaFeedData::::setLikes(org.jinstagram.entity.common.Likes)": [
        135,
        137
      ],
      "MediaFeedData::::getCreatedTime()": [
        142,
        144
      ],
      "MediaFeedData::::setCreatedTime(java.lang.String)": [
        149,
        151
      ],
      "MediaFeedData::::getImages()": [
        156,
        158
      ],
      "MediaFeedData::::setImages(org.jinstagram.entity.common.Images)": [
        163,
        165
      ],
      "MediaFeedData::::getImageFilter()": [
        170,
        172
      ],
      "MediaFeedData::::setImageFilter(java.lang.String)": [
        177,
        179
      ],
      "MediaFeedData::::getId()": [
        184,
        186
      ],
      "MediaFeedData::::setId(java.lang.String)": [
        191,
        193
      ],
      "MediaFeedData::::getUser()": [
        198,
        200
      ],
      "MediaFeedData::::setUser(org.jinstagram.entity.common.User)": [
        205,
        207
      ],
      "MediaFeedData::::isUserHasLiked()": [
        209,
        211
      ],
      "MediaFeedData::::setUserHasLiked(boolean)": [
        213,
        215
      ],
      "MediaFeedData::::getTags()": [
        217,
        219
      ],
      "MediaFeedData::::setTags(java.util.List<java.lang.String>)": [
        221,
        223
      ],
      "MediaFeedData::::getType()": [
        225,
        227
      ],
      "MediaFeedData::::setType(java.lang.String)": [
        229,
        231
      ],
      "MediaFeedData::::getVideos()": [
        233,
        235
      ],
      "MediaFeedData::::setVideos(org.jinstagram.entity.common.Videos)": [
        237,
        239
      ],
      "MediaFeedData::::getUsersInPhotoList()": [
        241,
        243
      ],
      "MediaFeedData::::setUsersInPhotoList(java.util.List<org.jinstagram.entity.common.UsersInPhoto>)": [
        245,
        247
      ],
      "MediaFeedData::::getCarouselMedia()": [
        254,
        256
      ],
      "MediaFeedData::::setCarouselMedia(java.util.List<org.jinstagram.entity.users.feed.CarouselMedia>)": [
        263,
        265
      ],
      "MediaFeedData::::toString()": [
        267,
        273
      ]
    },
    "test_method_lines_dic": {
      "MediaFeedDataTest::::testMediaFeedData_1()": [
        29,
        34
      ],
      "MediaFeedDataTest::::testGetCaption_1()": [
        43,
        71
      ],
      "MediaFeedDataTest::::testGetComments_1()": [
        80,
        106
      ],
      "MediaFeedDataTest::::testGetCreatedTime_1()": [
        115,
        138
      ],
      "MediaFeedDataTest::::testGetId_1()": [
        147,
        170
      ],
      "MediaFeedDataTest::::testGetImageFilter_1()": [
        179,
        202
      ],
      "MediaFeedDataTest::::testGetImages_1()": [
        211,
        238
      ],
      "MediaFeedDataTest::::testGetLikes_1()": [
        247,
        273
      ],
      "MediaFeedDataTest::::testGetLink_1()": [
        282,
        305
      ],
      "MediaFeedDataTest::::testGetLocation_1()": [
        314,
        342
      ],
      "MediaFeedDataTest::::testGetTags_1()": [
        351,
        375
      ],
      "MediaFeedDataTest::::testGetType_1()": [
        384,
        407
      ],
      "MediaFeedDataTest::::testGetUser_1()": [
        416,
        447
      ],
      "MediaFeedDataTest::::testGetUsersInPhotoList_1()": [
        456,
        480
      ],
      "MediaFeedDataTest::::testGetVideos_1()": [
        489,
        515
      ],
      "MediaFeedDataTest::::testIsUserHasLiked_1()": [
        524,
        547
      ],
      "MediaFeedDataTest::::testIsUserHasLiked_2()": [
        556,
        579
      ],
      "MediaFeedDataTest::::testSetCaption_1()": [
        588,
        611
      ],
      "MediaFeedDataTest::::testSetComments_1()": [
        620,
        643
      ],
      "MediaFeedDataTest::::testSetCreatedTime_1()": [
        652,
        675
      ],
      "MediaFeedDataTest::::testSetId_1()": [
        684,
        707
      ],
      "MediaFeedDataTest::::testSetImageFilter_1()": [
        716,
        739
      ],
      "MediaFeedDataTest::::testSetImages_1()": [
        748,
        771
      ],
      "MediaFeedDataTest::::testSetLikes_1()": [
        780,
        803
      ],
      "MediaFeedDataTest::::testSetLink_1()": [
        812,
        835
      ],
      "MediaFeedDataTest::::testSetLocation_1()": [
        844,
        867
      ],
      "MediaFeedDataTest::::testSetTags_1()": [
        876,
        899
      ],
      "MediaFeedDataTest::::testSetType_1()": [
        908,
        931
      ],
      "MediaFeedDataTest::::testSetUser_1()": [
        940,
        963
      ],
      "MediaFeedDataTest::::testSetUserHasLiked_1()": [
        972,
        995
      ],
      "MediaFeedDataTest::::testSetUsersInPhotoList_1()": [
        1004,
        1027
      ],
      "MediaFeedDataTest::::testSetVideos_1()": [
        1036,
        1059
      ],
      "MediaFeedDataTest::::testToString_1()": [
        1068,
        1093
      ]
    },
    "reverse_method_lines_dic": {
      "72": "MediaFeedData::::getLocation()",
      "73": "MediaFeedData::::getLocation()",
      "74": "MediaFeedData::::getLocation()",
      "79": "MediaFeedData::::setLocation(org.jinstagram.entity.common.Location)",
      "80": "MediaFeedData::::setLocation(org.jinstagram.entity.common.Location)",
      "81": "MediaFeedData::::setLocation(org.jinstagram.entity.common.Location)",
      "86": "MediaFeedData::::getComments()",
      "87": "MediaFeedData::::getComments()",
      "88": "MediaFeedData::::getComments()",
      "93": "MediaFeedData::::setComments(org.jinstagram.entity.common.Comments)",
      "94": "MediaFeedData::::setComments(org.jinstagram.entity.common.Comments)",
      "95": "MediaFeedData::::setComments(org.jinstagram.entity.common.Comments)",
      "100": "MediaFeedData::::getCaption()",
      "101": "MediaFeedData::::getCaption()",
      "102": "MediaFeedData::::getCaption()",
      "107": "MediaFeedData::::setCaption(org.jinstagram.entity.common.Caption)",
      "108": "MediaFeedData::::setCaption(org.jinstagram.entity.common.Caption)",
      "109": "MediaFeedData::::setCaption(org.jinstagram.entity.common.Caption)",
      "114": "MediaFeedData::::getLink()",
      "115": "MediaFeedData::::getLink()",
      "116": "MediaFeedData::::getLink()",
      "121": "MediaFeedData::::setLink(java.lang.String)",
      "122": "MediaFeedData::::setLink(java.lang.String)",
      "123": "MediaFeedData::::setLink(java.lang.String)",
      "128": "MediaFeedData::::getLikes()",
      "129": "MediaFeedData::::getLikes()",
      "130": "MediaFeedData::::getLikes()",
      "135": "MediaFeedData::::setLikes(org.jinstagram.entity.common.Likes)",
      "136": "MediaFeedData::::setLikes(org.jinstagram.entity.common.Likes)",
      "137": "MediaFeedData::::setLikes(org.jinstagram.entity.common.Likes)",
      "142": "MediaFeedData::::getCreatedTime()",
      "143": "MediaFeedData::::getCreatedTime()",
      "144": "MediaFeedData::::getCreatedTime()",
      "149": "MediaFeedData::::setCreatedTime(java.lang.String)",
      "150": "MediaFeedData::::setCreatedTime(java.lang.String)",
      "151": "MediaFeedData::::setCreatedTime(java.lang.String)",
      "156": "MediaFeedData::::getImages()",
      "157": "MediaFeedData::::getImages()",
      "158": "MediaFeedData::::getImages()",
      "163": "MediaFeedData::::setImages(org.jinstagram.entity.common.Images)",
      "164": "MediaFeedData::::setImages(org.jinstagram.entity.common.Images)",
      "165": "MediaFeedData::::setImages(org.jinstagram.entity.common.Images)",
      "170": "MediaFeedData::::getImageFilter()",
      "171": "MediaFeedData::::getImageFilter()",
      "172": "MediaFeedData::::getImageFilter()",
      "177": "MediaFeedData::::setImageFilter(java.lang.String)",
      "178": "MediaFeedData::::setImageFilter(java.lang.String)",
      "179": "MediaFeedData::::setImageFilter(java.lang.String)",
      "184": "MediaFeedData::::getId()",
      "185": "MediaFeedData::::getId()",
      "186": "MediaFeedData::::getId()",
      "191": "MediaFeedData::::setId(java.lang.String)",
      "192": "MediaFeedData::::setId(java.lang.String)",
      "193": "MediaFeedData::::setId(java.lang.String)",
      "198": "MediaFeedData::::getUser()",
      "199": "MediaFeedData::::getUser()",
      "200": "MediaFeedData::::getUser()",
      "205": "MediaFeedData::::setUser(org.jinstagram.entity.common.User)",
      "206": "MediaFeedData::::setUser(org.jinstagram.entity.common.User)",
      "207": "MediaFeedData::::setUser(org.jinstagram.entity.common.User)",
      "209": "MediaFeedData::::isUserHasLiked()",
      "210": "MediaFeedData::::isUserHasLiked()",
      "211": "MediaFeedData::::isUserHasLiked()",
      "213": "MediaFeedData::::setUserHasLiked(boolean)",
      "214": "MediaFeedData::::setUserHasLiked(boolean)",
      "215": "MediaFeedData::::setUserHasLiked(boolean)",
      "217": "MediaFeedData::::getTags()",
      "218": "MediaFeedData::::getTags()",
      "219": "MediaFeedData::::getTags()",
      "221": "MediaFeedData::::setTags(java.util.List<java.lang.String>)",
      "222": "MediaFeedData::::setTags(java.util.List<java.lang.String>)",
      "223": "MediaFeedData::::setTags(java.util.List<java.lang.String>)",
      "225": "MediaFeedData::::getType()",
      "226": "MediaFeedData::::getType()",
      "227": "MediaFeedData::::getType()",
      "229": "MediaFeedData::::setType(java.lang.String)",
      "230": "MediaFeedData::::setType(java.lang.String)",
      "231": "MediaFeedData::::setType(java.lang.String)",
      "233": "MediaFeedData::::getVideos()",
      "234": "MediaFeedData::::getVideos()",
      "235": "MediaFeedData::::getVideos()",
      "237": "MediaFeedData::::setVideos(org.jinstagram.entity.common.Videos)",
      "238": "MediaFeedData::::setVideos(org.jinstagram.entity.common.Videos)",
      "239": "MediaFeedData::::setVideos(org.jinstagram.entity.common.Videos)",
      "241": "MediaFeedData::::getUsersInPhotoList()",
      "242": "MediaFeedData::::getUsersInPhotoList()",
      "243": "MediaFeedData::::getUsersInPhotoList()",
      "245": "MediaFeedData::::setUsersInPhotoList(java.util.List<org.jinstagram.entity.common.UsersInPhoto>)",
      "246": "MediaFeedData::::setUsersInPhotoList(java.util.List<org.jinstagram.entity.common.UsersInPhoto>)",
      "247": "MediaFeedData::::setUsersInPhotoList(java.util.List<org.jinstagram.entity.common.UsersInPhoto>)",
      "254": "MediaFeedData::::getCarouselMedia()",
      "255": "MediaFeedData::::getCarouselMedia()",
      "256": "MediaFeedData::::getCarouselMedia()",
      "263": "MediaFeedData::::setCarouselMedia(java.util.List<org.jinstagram.entity.users.feed.CarouselMedia>)",
      "264": "MediaFeedData::::setCarouselMedia(java.util.List<org.jinstagram.entity.users.feed.CarouselMedia>)",
      "265": "MediaFeedData::::setCarouselMedia(java.util.List<org.jinstagram.entity.users.feed.CarouselMedia>)",
      "267": "MediaFeedData::::toString()",
      "268": "MediaFeedData::::toString()",
      "269": "MediaFeedData::::toString()",
      "270": "MediaFeedData::::toString()",
      "271": "MediaFeedData::::toString()",
      "272": "MediaFeedData::::toString()",
      "273": "MediaFeedData::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "29": "MediaFeedDataTest::::testMediaFeedData_1()",
      "30": "MediaFeedDataTest::::testMediaFeedData_1()",
      "31": "MediaFeedDataTest::::testMediaFeedData_1()",
      "32": "MediaFeedDataTest::::testMediaFeedData_1()",
      "33": "MediaFeedDataTest::::testMediaFeedData_1()",
      "34": "MediaFeedDataTest::::testMediaFeedData_1()",
      "43": "MediaFeedDataTest::::testGetCaption_1()",
      "44": "MediaFeedDataTest::::testGetCaption_1()",
      "45": "MediaFeedDataTest::::testGetCaption_1()",
      "46": "MediaFeedDataTest::::testGetCaption_1()",
      "47": "MediaFeedDataTest::::testGetCaption_1()",
      "48": "MediaFeedDataTest::::testGetCaption_1()",
      "49": "MediaFeedDataTest::::testGetCaption_1()",
      "50": "MediaFeedDataTest::::testGetCaption_1()",
      "51": "MediaFeedDataTest::::testGetCaption_1()",
      "52": "MediaFeedDataTest::::testGetCaption_1()",
      "53": "MediaFeedDataTest::::testGetCaption_1()",
      "54": "MediaFeedDataTest::::testGetCaption_1()",
      "55": "MediaFeedDataTest::::testGetCaption_1()",
      "56": "MediaFeedDataTest::::testGetCaption_1()",
      "57": "MediaFeedDataTest::::testGetCaption_1()",
      "58": "MediaFeedDataTest::::testGetCaption_1()",
      "59": "MediaFeedDataTest::::testGetCaption_1()",
      "60": "MediaFeedDataTest::::testGetCaption_1()",
      "61": "MediaFeedDataTest::::testGetCaption_1()",
      "62": "MediaFeedDataTest::::testGetCaption_1()",
      "63": "MediaFeedDataTest::::testGetCaption_1()",
      "64": "MediaFeedDataTest::::testGetCaption_1()",
      "65": "MediaFeedDataTest::::testGetCaption_1()",
      "66": "MediaFeedDataTest::::testGetCaption_1()",
      "67": "MediaFeedDataTest::::testGetCaption_1()",
      "68": "MediaFeedDataTest::::testGetCaption_1()",
      "69": "MediaFeedDataTest::::testGetCaption_1()",
      "70": "MediaFeedDataTest::::testGetCaption_1()",
      "71": "MediaFeedDataTest::::testGetCaption_1()",
      "80": "MediaFeedDataTest::::testGetComments_1()",
      "81": "MediaFeedDataTest::::testGetComments_1()",
      "82": "MediaFeedDataTest::::testGetComments_1()",
      "83": "MediaFeedDataTest::::testGetComments_1()",
      "84": "MediaFeedDataTest::::testGetComments_1()",
      "85": "MediaFeedDataTest::::testGetComments_1()",
      "86": "MediaFeedDataTest::::testGetComments_1()",
      "87": "MediaFeedDataTest::::testGetComments_1()",
      "88": "MediaFeedDataTest::::testGetComments_1()",
      "89": "MediaFeedDataTest::::testGetComments_1()",
      "90": "MediaFeedDataTest::::testGetComments_1()",
      "91": "MediaFeedDataTest::::testGetComments_1()",
      "92": "MediaFeedDataTest::::testGetComments_1()",
      "93": "MediaFeedDataTest::::testGetComments_1()",
      "94": "MediaFeedDataTest::::testGetComments_1()",
      "95": "MediaFeedDataTest::::testGetComments_1()",
      "96": "MediaFeedDataTest::::testGetComments_1()",
      "97": "MediaFeedDataTest::::testGetComments_1()",
      "98": "MediaFeedDataTest::::testGetComments_1()",
      "99": "MediaFeedDataTest::::testGetComments_1()",
      "100": "MediaFeedDataTest::::testGetComments_1()",
      "101": "MediaFeedDataTest::::testGetComments_1()",
      "102": "MediaFeedDataTest::::testGetComments_1()",
      "103": "MediaFeedDataTest::::testGetComments_1()",
      "104": "MediaFeedDataTest::::testGetComments_1()",
      "105": "MediaFeedDataTest::::testGetComments_1()",
      "106": "MediaFeedDataTest::::testGetComments_1()",
      "115": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "116": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "117": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "118": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "119": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "120": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "121": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "122": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "123": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "124": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "125": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "126": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "127": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "128": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "129": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "130": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "131": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "132": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "133": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "134": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "135": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "136": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "137": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "138": "MediaFeedDataTest::::testGetCreatedTime_1()",
      "147": "MediaFeedDataTest::::testGetId_1()",
      "148": "MediaFeedDataTest::::testGetId_1()",
      "149": "MediaFeedDataTest::::testGetId_1()",
      "150": "MediaFeedDataTest::::testGetId_1()",
      "151": "MediaFeedDataTest::::testGetId_1()",
      "152": "MediaFeedDataTest::::testGetId_1()",
      "153": "MediaFeedDataTest::::testGetId_1()",
      "154": "MediaFeedDataTest::::testGetId_1()",
      "155": "MediaFeedDataTest::::testGetId_1()",
      "156": "MediaFeedDataTest::::testGetId_1()",
      "157": "MediaFeedDataTest::::testGetId_1()",
      "158": "MediaFeedDataTest::::testGetId_1()",
      "159": "MediaFeedDataTest::::testGetId_1()",
      "160": "MediaFeedDataTest::::testGetId_1()",
      "161": "MediaFeedDataTest::::testGetId_1()",
      "162": "MediaFeedDataTest::::testGetId_1()",
      "163": "MediaFeedDataTest::::testGetId_1()",
      "164": "MediaFeedDataTest::::testGetId_1()",
      "165": "MediaFeedDataTest::::testGetId_1()",
      "166": "MediaFeedDataTest::::testGetId_1()",
      "167": "MediaFeedDataTest::::testGetId_1()",
      "168": "MediaFeedDataTest::::testGetId_1()",
      "169": "MediaFeedDataTest::::testGetId_1()",
      "170": "MediaFeedDataTest::::testGetId_1()",
      "179": "MediaFeedDataTest::::testGetImageFilter_1()",
      "180": "MediaFeedDataTest::::testGetImageFilter_1()",
      "181": "MediaFeedDataTest::::testGetImageFilter_1()",
      "182": "MediaFeedDataTest::::testGetImageFilter_1()",
      "183": "MediaFeedDataTest::::testGetImageFilter_1()",
      "184": "MediaFeedDataTest::::testGetImageFilter_1()",
      "185": "MediaFeedDataTest::::testGetImageFilter_1()",
      "186": "MediaFeedDataTest::::testGetImageFilter_1()",
      "187": "MediaFeedDataTest::::testGetImageFilter_1()",
      "188": "MediaFeedDataTest::::testGetImageFilter_1()",
      "189": "MediaFeedDataTest::::testGetImageFilter_1()",
      "190": "MediaFeedDataTest::::testGetImageFilter_1()",
      "191": "MediaFeedDataTest::::testGetImageFilter_1()",
      "192": "MediaFeedDataTest::::testGetImageFilter_1()",
      "193": "MediaFeedDataTest::::testGetImageFilter_1()",
      "194": "MediaFeedDataTest::::testGetImageFilter_1()",
      "195": "MediaFeedDataTest::::testGetImageFilter_1()",
      "196": "MediaFeedDataTest::::testGetImageFilter_1()",
      "197": "MediaFeedDataTest::::testGetImageFilter_1()",
      "198": "MediaFeedDataTest::::testGetImageFilter_1()",
      "199": "MediaFeedDataTest::::testGetImageFilter_1()",
      "200": "MediaFeedDataTest::::testGetImageFilter_1()",
      "201": "MediaFeedDataTest::::testGetImageFilter_1()",
      "202": "MediaFeedDataTest::::testGetImageFilter_1()",
      "211": "MediaFeedDataTest::::testGetImages_1()",
      "212": "MediaFeedDataTest::::testGetImages_1()",
      "213": "MediaFeedDataTest::::testGetImages_1()",
      "214": "MediaFeedDataTest::::testGetImages_1()",
      "215": "MediaFeedDataTest::::testGetImages_1()",
      "216": "MediaFeedDataTest::::testGetImages_1()",
      "217": "MediaFeedDataTest::::testGetImages_1()",
      "218": "MediaFeedDataTest::::testGetImages_1()",
      "219": "MediaFeedDataTest::::testGetImages_1()",
      "220": "MediaFeedDataTest::::testGetImages_1()",
      "221": "MediaFeedDataTest::::testGetImages_1()",
      "222": "MediaFeedDataTest::::testGetImages_1()",
      "223": "MediaFeedDataTest::::testGetImages_1()",
      "224": "MediaFeedDataTest::::testGetImages_1()",
      "225": "MediaFeedDataTest::::testGetImages_1()",
      "226": "MediaFeedDataTest::::testGetImages_1()",
      "227": "MediaFeedDataTest::::testGetImages_1()",
      "228": "MediaFeedDataTest::::testGetImages_1()",
      "229": "MediaFeedDataTest::::testGetImages_1()",
      "230": "MediaFeedDataTest::::testGetImages_1()",
      "231": "MediaFeedDataTest::::testGetImages_1()",
      "232": "MediaFeedDataTest::::testGetImages_1()",
      "233": "MediaFeedDataTest::::testGetImages_1()",
      "234": "MediaFeedDataTest::::testGetImages_1()",
      "235": "MediaFeedDataTest::::testGetImages_1()",
      "236": "MediaFeedDataTest::::testGetImages_1()",
      "237": "MediaFeedDataTest::::testGetImages_1()",
      "238": "MediaFeedDataTest::::testGetImages_1()",
      "247": "MediaFeedDataTest::::testGetLikes_1()",
      "248": "MediaFeedDataTest::::testGetLikes_1()",
      "249": "MediaFeedDataTest::::testGetLikes_1()",
      "250": "MediaFeedDataTest::::testGetLikes_1()",
      "251": "MediaFeedDataTest::::testGetLikes_1()",
      "252": "MediaFeedDataTest::::testGetLikes_1()",
      "253": "MediaFeedDataTest::::testGetLikes_1()",
      "254": "MediaFeedDataTest::::testGetLikes_1()",
      "255": "MediaFeedDataTest::::testGetLikes_1()",
      "256": "MediaFeedDataTest::::testGetLikes_1()",
      "257": "MediaFeedDataTest::::testGetLikes_1()",
      "258": "MediaFeedDataTest::::testGetLikes_1()",
      "259": "MediaFeedDataTest::::testGetLikes_1()",
      "260": "MediaFeedDataTest::::testGetLikes_1()",
      "261": "MediaFeedDataTest::::testGetLikes_1()",
      "262": "MediaFeedDataTest::::testGetLikes_1()",
      "263": "MediaFeedDataTest::::testGetLikes_1()",
      "264": "MediaFeedDataTest::::testGetLikes_1()",
      "265": "MediaFeedDataTest::::testGetLikes_1()",
      "266": "MediaFeedDataTest::::testGetLikes_1()",
      "267": "MediaFeedDataTest::::testGetLikes_1()",
      "268": "MediaFeedDataTest::::testGetLikes_1()",
      "269": "MediaFeedDataTest::::testGetLikes_1()",
      "270": "MediaFeedDataTest::::testGetLikes_1()",
      "271": "MediaFeedDataTest::::testGetLikes_1()",
      "272": "MediaFeedDataTest::::testGetLikes_1()",
      "273": "MediaFeedDataTest::::testGetLikes_1()",
      "282": "MediaFeedDataTest::::testGetLink_1()",
      "283": "MediaFeedDataTest::::testGetLink_1()",
      "284": "MediaFeedDataTest::::testGetLink_1()",
      "285": "MediaFeedDataTest::::testGetLink_1()",
      "286": "MediaFeedDataTest::::testGetLink_1()",
      "287": "MediaFeedDataTest::::testGetLink_1()",
      "288": "MediaFeedDataTest::::testGetLink_1()",
      "289": "MediaFeedDataTest::::testGetLink_1()",
      "290": "MediaFeedDataTest::::testGetLink_1()",
      "291": "MediaFeedDataTest::::testGetLink_1()",
      "292": "MediaFeedDataTest::::testGetLink_1()",
      "293": "MediaFeedDataTest::::testGetLink_1()",
      "294": "MediaFeedDataTest::::testGetLink_1()",
      "295": "MediaFeedDataTest::::testGetLink_1()",
      "296": "MediaFeedDataTest::::testGetLink_1()",
      "297": "MediaFeedDataTest::::testGetLink_1()",
      "298": "MediaFeedDataTest::::testGetLink_1()",
      "299": "MediaFeedDataTest::::testGetLink_1()",
      "300": "MediaFeedDataTest::::testGetLink_1()",
      "301": "MediaFeedDataTest::::testGetLink_1()",
      "302": "MediaFeedDataTest::::testGetLink_1()",
      "303": "MediaFeedDataTest::::testGetLink_1()",
      "304": "MediaFeedDataTest::::testGetLink_1()",
      "305": "MediaFeedDataTest::::testGetLink_1()",
      "314": "MediaFeedDataTest::::testGetLocation_1()",
      "315": "MediaFeedDataTest::::testGetLocation_1()",
      "316": "MediaFeedDataTest::::testGetLocation_1()",
      "317": "MediaFeedDataTest::::testGetLocation_1()",
      "318": "MediaFeedDataTest::::testGetLocation_1()",
      "319": "MediaFeedDataTest::::testGetLocation_1()",
      "320": "MediaFeedDataTest::::testGetLocation_1()",
      "321": "MediaFeedDataTest::::testGetLocation_1()",
      "322": "MediaFeedDataTest::::testGetLocation_1()",
      "323": "MediaFeedDataTest::::testGetLocation_1()",
      "324": "MediaFeedDataTest::::testGetLocation_1()",
      "325": "MediaFeedDataTest::::testGetLocation_1()",
      "326": "MediaFeedDataTest::::testGetLocation_1()",
      "327": "MediaFeedDataTest::::testGetLocation_1()",
      "328": "MediaFeedDataTest::::testGetLocation_1()",
      "329": "MediaFeedDataTest::::testGetLocation_1()",
      "330": "MediaFeedDataTest::::testGetLocation_1()",
      "331": "MediaFeedDataTest::::testGetLocation_1()",
      "332": "MediaFeedDataTest::::testGetLocation_1()",
      "333": "MediaFeedDataTest::::testGetLocation_1()",
      "334": "MediaFeedDataTest::::testGetLocation_1()",
      "335": "MediaFeedDataTest::::testGetLocation_1()",
      "336": "MediaFeedDataTest::::testGetLocation_1()",
      "337": "MediaFeedDataTest::::testGetLocation_1()",
      "338": "MediaFeedDataTest::::testGetLocation_1()",
      "339": "MediaFeedDataTest::::testGetLocation_1()",
      "340": "MediaFeedDataTest::::testGetLocation_1()",
      "341": "MediaFeedDataTest::::testGetLocation_1()",
      "342": "MediaFeedDataTest::::testGetLocation_1()",
      "351": "MediaFeedDataTest::::testGetTags_1()",
      "352": "MediaFeedDataTest::::testGetTags_1()",
      "353": "MediaFeedDataTest::::testGetTags_1()",
      "354": "MediaFeedDataTest::::testGetTags_1()",
      "355": "MediaFeedDataTest::::testGetTags_1()",
      "356": "MediaFeedDataTest::::testGetTags_1()",
      "357": "MediaFeedDataTest::::testGetTags_1()",
      "358": "MediaFeedDataTest::::testGetTags_1()",
      "359": "MediaFeedDataTest::::testGetTags_1()",
      "360": "MediaFeedDataTest::::testGetTags_1()",
      "361": "MediaFeedDataTest::::testGetTags_1()",
      "362": "MediaFeedDataTest::::testGetTags_1()",
      "363": "MediaFeedDataTest::::testGetTags_1()",
      "364": "MediaFeedDataTest::::testGetTags_1()",
      "365": "MediaFeedDataTest::::testGetTags_1()",
      "366": "MediaFeedDataTest::::testGetTags_1()",
      "367": "MediaFeedDataTest::::testGetTags_1()",
      "368": "MediaFeedDataTest::::testGetTags_1()",
      "369": "MediaFeedDataTest::::testGetTags_1()",
      "370": "MediaFeedDataTest::::testGetTags_1()",
      "371": "MediaFeedDataTest::::testGetTags_1()",
      "372": "MediaFeedDataTest::::testGetTags_1()",
      "373": "MediaFeedDataTest::::testGetTags_1()",
      "374": "MediaFeedDataTest::::testGetTags_1()",
      "375": "MediaFeedDataTest::::testGetTags_1()",
      "384": "MediaFeedDataTest::::testGetType_1()",
      "385": "MediaFeedDataTest::::testGetType_1()",
      "386": "MediaFeedDataTest::::testGetType_1()",
      "387": "MediaFeedDataTest::::testGetType_1()",
      "388": "MediaFeedDataTest::::testGetType_1()",
      "389": "MediaFeedDataTest::::testGetType_1()",
      "390": "MediaFeedDataTest::::testGetType_1()",
      "391": "MediaFeedDataTest::::testGetType_1()",
      "392": "MediaFeedDataTest::::testGetType_1()",
      "393": "MediaFeedDataTest::::testGetType_1()",
      "394": "MediaFeedDataTest::::testGetType_1()",
      "395": "MediaFeedDataTest::::testGetType_1()",
      "396": "MediaFeedDataTest::::testGetType_1()",
      "397": "MediaFeedDataTest::::testGetType_1()",
      "398": "MediaFeedDataTest::::testGetType_1()",
      "399": "MediaFeedDataTest::::testGetType_1()",
      "400": "MediaFeedDataTest::::testGetType_1()",
      "401": "MediaFeedDataTest::::testGetType_1()",
      "402": "MediaFeedDataTest::::testGetType_1()",
      "403": "MediaFeedDataTest::::testGetType_1()",
      "404": "MediaFeedDataTest::::testGetType_1()",
      "405": "MediaFeedDataTest::::testGetType_1()",
      "406": "MediaFeedDataTest::::testGetType_1()",
      "407": "MediaFeedDataTest::::testGetType_1()",
      "416": "MediaFeedDataTest::::testGetUser_1()",
      "417": "MediaFeedDataTest::::testGetUser_1()",
      "418": "MediaFeedDataTest::::testGetUser_1()",
      "419": "MediaFeedDataTest::::testGetUser_1()",
      "420": "MediaFeedDataTest::::testGetUser_1()",
      "421": "MediaFeedDataTest::::testGetUser_1()",
      "422": "MediaFeedDataTest::::testGetUser_1()",
      "423": "MediaFeedDataTest::::testGetUser_1()",
      "424": "MediaFeedDataTest::::testGetUser_1()",
      "425": "MediaFeedDataTest::::testGetUser_1()",
      "426": "MediaFeedDataTest::::testGetUser_1()",
      "427": "MediaFeedDataTest::::testGetUser_1()",
      "428": "MediaFeedDataTest::::testGetUser_1()",
      "429": "MediaFeedDataTest::::testGetUser_1()",
      "430": "MediaFeedDataTest::::testGetUser_1()",
      "431": "MediaFeedDataTest::::testGetUser_1()",
      "432": "MediaFeedDataTest::::testGetUser_1()",
      "433": "MediaFeedDataTest::::testGetUser_1()",
      "434": "MediaFeedDataTest::::testGetUser_1()",
      "435": "MediaFeedDataTest::::testGetUser_1()",
      "436": "MediaFeedDataTest::::testGetUser_1()",
      "437": "MediaFeedDataTest::::testGetUser_1()",
      "438": "MediaFeedDataTest::::testGetUser_1()",
      "439": "MediaFeedDataTest::::testGetUser_1()",
      "440": "MediaFeedDataTest::::testGetUser_1()",
      "441": "MediaFeedDataTest::::testGetUser_1()",
      "442": "MediaFeedDataTest::::testGetUser_1()",
      "443": "MediaFeedDataTest::::testGetUser_1()",
      "444": "MediaFeedDataTest::::testGetUser_1()",
      "445": "MediaFeedDataTest::::testGetUser_1()",
      "446": "MediaFeedDataTest::::testGetUser_1()",
      "447": "MediaFeedDataTest::::testGetUser_1()",
      "456": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "457": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "458": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "459": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "460": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "461": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "462": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "463": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "464": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "465": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "466": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "467": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "468": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "469": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "470": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "471": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "472": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "473": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "474": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "475": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "476": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "477": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "478": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "479": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "480": "MediaFeedDataTest::::testGetUsersInPhotoList_1()",
      "489": "MediaFeedDataTest::::testGetVideos_1()",
      "490": "MediaFeedDataTest::::testGetVideos_1()",
      "491": "MediaFeedDataTest::::testGetVideos_1()",
      "492": "MediaFeedDataTest::::testGetVideos_1()",
      "493": "MediaFeedDataTest::::testGetVideos_1()",
      "494": "MediaFeedDataTest::::testGetVideos_1()",
      "495": "MediaFeedDataTest::::testGetVideos_1()",
      "496": "MediaFeedDataTest::::testGetVideos_1()",
      "497": "MediaFeedDataTest::::testGetVideos_1()",
      "498": "MediaFeedDataTest::::testGetVideos_1()",
      "499": "MediaFeedDataTest::::testGetVideos_1()",
      "500": "MediaFeedDataTest::::testGetVideos_1()",
      "501": "MediaFeedDataTest::::testGetVideos_1()",
      "502": "MediaFeedDataTest::::testGetVideos_1()",
      "503": "MediaFeedDataTest::::testGetVideos_1()",
      "504": "MediaFeedDataTest::::testGetVideos_1()",
      "505": "MediaFeedDataTest::::testGetVideos_1()",
      "506": "MediaFeedDataTest::::testGetVideos_1()",
      "507": "MediaFeedDataTest::::testGetVideos_1()",
      "508": "MediaFeedDataTest::::testGetVideos_1()",
      "509": "MediaFeedDataTest::::testGetVideos_1()",
      "510": "MediaFeedDataTest::::testGetVideos_1()",
      "511": "MediaFeedDataTest::::testGetVideos_1()",
      "512": "MediaFeedDataTest::::testGetVideos_1()",
      "513": "MediaFeedDataTest::::testGetVideos_1()",
      "514": "MediaFeedDataTest::::testGetVideos_1()",
      "515": "MediaFeedDataTest::::testGetVideos_1()",
      "524": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "525": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "526": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "527": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "528": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "529": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "530": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "531": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "532": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "533": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "534": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "535": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "536": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "537": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "538": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "539": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "540": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "541": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "542": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "543": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "544": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "545": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "546": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "547": "MediaFeedDataTest::::testIsUserHasLiked_1()",
      "556": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "557": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "558": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "559": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "560": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "561": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "562": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "563": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "564": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "565": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "566": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "567": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "568": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "569": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "570": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "571": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "572": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "573": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "574": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "575": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "576": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "577": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "578": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "579": "MediaFeedDataTest::::testIsUserHasLiked_2()",
      "588": "MediaFeedDataTest::::testSetCaption_1()",
      "589": "MediaFeedDataTest::::testSetCaption_1()",
      "590": "MediaFeedDataTest::::testSetCaption_1()",
      "591": "MediaFeedDataTest::::testSetCaption_1()",
      "592": "MediaFeedDataTest::::testSetCaption_1()",
      "593": "MediaFeedDataTest::::testSetCaption_1()",
      "594": "MediaFeedDataTest::::testSetCaption_1()",
      "595": "MediaFeedDataTest::::testSetCaption_1()",
      "596": "MediaFeedDataTest::::testSetCaption_1()",
      "597": "MediaFeedDataTest::::testSetCaption_1()",
      "598": "MediaFeedDataTest::::testSetCaption_1()",
      "599": "MediaFeedDataTest::::testSetCaption_1()",
      "600": "MediaFeedDataTest::::testSetCaption_1()",
      "601": "MediaFeedDataTest::::testSetCaption_1()",
      "602": "MediaFeedDataTest::::testSetCaption_1()",
      "603": "MediaFeedDataTest::::testSetCaption_1()",
      "604": "MediaFeedDataTest::::testSetCaption_1()",
      "605": "MediaFeedDataTest::::testSetCaption_1()",
      "606": "MediaFeedDataTest::::testSetCaption_1()",
      "607": "MediaFeedDataTest::::testSetCaption_1()",
      "608": "MediaFeedDataTest::::testSetCaption_1()",
      "609": "MediaFeedDataTest::::testSetCaption_1()",
      "610": "MediaFeedDataTest::::testSetCaption_1()",
      "611": "MediaFeedDataTest::::testSetCaption_1()",
      "620": "MediaFeedDataTest::::testSetComments_1()",
      "621": "MediaFeedDataTest::::testSetComments_1()",
      "622": "MediaFeedDataTest::::testSetComments_1()",
      "623": "MediaFeedDataTest::::testSetComments_1()",
      "624": "MediaFeedDataTest::::testSetComments_1()",
      "625": "MediaFeedDataTest::::testSetComments_1()",
      "626": "MediaFeedDataTest::::testSetComments_1()",
      "627": "MediaFeedDataTest::::testSetComments_1()",
      "628": "MediaFeedDataTest::::testSetComments_1()",
      "629": "MediaFeedDataTest::::testSetComments_1()",
      "630": "MediaFeedDataTest::::testSetComments_1()",
      "631": "MediaFeedDataTest::::testSetComments_1()",
      "632": "MediaFeedDataTest::::testSetComments_1()",
      "633": "MediaFeedDataTest::::testSetComments_1()",
      "634": "MediaFeedDataTest::::testSetComments_1()",
      "635": "MediaFeedDataTest::::testSetComments_1()",
      "636": "MediaFeedDataTest::::testSetComments_1()",
      "637": "MediaFeedDataTest::::testSetComments_1()",
      "638": "MediaFeedDataTest::::testSetComments_1()",
      "639": "MediaFeedDataTest::::testSetComments_1()",
      "640": "MediaFeedDataTest::::testSetComments_1()",
      "641": "MediaFeedDataTest::::testSetComments_1()",
      "642": "MediaFeedDataTest::::testSetComments_1()",
      "643": "MediaFeedDataTest::::testSetComments_1()",
      "652": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "653": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "654": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "655": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "656": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "657": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "658": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "659": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "660": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "661": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "662": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "663": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "664": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "665": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "666": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "667": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "668": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "669": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "670": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "671": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "672": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "673": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "674": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "675": "MediaFeedDataTest::::testSetCreatedTime_1()",
      "684": "MediaFeedDataTest::::testSetId_1()",
      "685": "MediaFeedDataTest::::testSetId_1()",
      "686": "MediaFeedDataTest::::testSetId_1()",
      "687": "MediaFeedDataTest::::testSetId_1()",
      "688": "MediaFeedDataTest::::testSetId_1()",
      "689": "MediaFeedDataTest::::testSetId_1()",
      "690": "MediaFeedDataTest::::testSetId_1()",
      "691": "MediaFeedDataTest::::testSetId_1()",
      "692": "MediaFeedDataTest::::testSetId_1()",
      "693": "MediaFeedDataTest::::testSetId_1()",
      "694": "MediaFeedDataTest::::testSetId_1()",
      "695": "MediaFeedDataTest::::testSetId_1()",
      "696": "MediaFeedDataTest::::testSetId_1()",
      "697": "MediaFeedDataTest::::testSetId_1()",
      "698": "MediaFeedDataTest::::testSetId_1()",
      "699": "MediaFeedDataTest::::testSetId_1()",
      "700": "MediaFeedDataTest::::testSetId_1()",
      "701": "MediaFeedDataTest::::testSetId_1()",
      "702": "MediaFeedDataTest::::testSetId_1()",
      "703": "MediaFeedDataTest::::testSetId_1()",
      "704": "MediaFeedDataTest::::testSetId_1()",
      "705": "MediaFeedDataTest::::testSetId_1()",
      "706": "MediaFeedDataTest::::testSetId_1()",
      "707": "MediaFeedDataTest::::testSetId_1()",
      "716": "MediaFeedDataTest::::testSetImageFilter_1()",
      "717": "MediaFeedDataTest::::testSetImageFilter_1()",
      "718": "MediaFeedDataTest::::testSetImageFilter_1()",
      "719": "MediaFeedDataTest::::testSetImageFilter_1()",
      "720": "MediaFeedDataTest::::testSetImageFilter_1()",
      "721": "MediaFeedDataTest::::testSetImageFilter_1()",
      "722": "MediaFeedDataTest::::testSetImageFilter_1()",
      "723": "MediaFeedDataTest::::testSetImageFilter_1()",
      "724": "MediaFeedDataTest::::testSetImageFilter_1()",
      "725": "MediaFeedDataTest::::testSetImageFilter_1()",
      "726": "MediaFeedDataTest::::testSetImageFilter_1()",
      "727": "MediaFeedDataTest::::testSetImageFilter_1()",
      "728": "MediaFeedDataTest::::testSetImageFilter_1()",
      "729": "MediaFeedDataTest::::testSetImageFilter_1()",
      "730": "MediaFeedDataTest::::testSetImageFilter_1()",
      "731": "MediaFeedDataTest::::testSetImageFilter_1()",
      "732": "MediaFeedDataTest::::testSetImageFilter_1()",
      "733": "MediaFeedDataTest::::testSetImageFilter_1()",
      "734": "MediaFeedDataTest::::testSetImageFilter_1()",
      "735": "MediaFeedDataTest::::testSetImageFilter_1()",
      "736": "MediaFeedDataTest::::testSetImageFilter_1()",
      "737": "MediaFeedDataTest::::testSetImageFilter_1()",
      "738": "MediaFeedDataTest::::testSetImageFilter_1()",
      "739": "MediaFeedDataTest::::testSetImageFilter_1()",
      "748": "MediaFeedDataTest::::testSetImages_1()",
      "749": "MediaFeedDataTest::::testSetImages_1()",
      "750": "MediaFeedDataTest::::testSetImages_1()",
      "751": "MediaFeedDataTest::::testSetImages_1()",
      "752": "MediaFeedDataTest::::testSetImages_1()",
      "753": "MediaFeedDataTest::::testSetImages_1()",
      "754": "MediaFeedDataTest::::testSetImages_1()",
      "755": "MediaFeedDataTest::::testSetImages_1()",
      "756": "MediaFeedDataTest::::testSetImages_1()",
      "757": "MediaFeedDataTest::::testSetImages_1()",
      "758": "MediaFeedDataTest::::testSetImages_1()",
      "759": "MediaFeedDataTest::::testSetImages_1()",
      "760": "MediaFeedDataTest::::testSetImages_1()",
      "761": "MediaFeedDataTest::::testSetImages_1()",
      "762": "MediaFeedDataTest::::testSetImages_1()",
      "763": "MediaFeedDataTest::::testSetImages_1()",
      "764": "MediaFeedDataTest::::testSetImages_1()",
      "765": "MediaFeedDataTest::::testSetImages_1()",
      "766": "MediaFeedDataTest::::testSetImages_1()",
      "767": "MediaFeedDataTest::::testSetImages_1()",
      "768": "MediaFeedDataTest::::testSetImages_1()",
      "769": "MediaFeedDataTest::::testSetImages_1()",
      "770": "MediaFeedDataTest::::testSetImages_1()",
      "771": "MediaFeedDataTest::::testSetImages_1()",
      "780": "MediaFeedDataTest::::testSetLikes_1()",
      "781": "MediaFeedDataTest::::testSetLikes_1()",
      "782": "MediaFeedDataTest::::testSetLikes_1()",
      "783": "MediaFeedDataTest::::testSetLikes_1()",
      "784": "MediaFeedDataTest::::testSetLikes_1()",
      "785": "MediaFeedDataTest::::testSetLikes_1()",
      "786": "MediaFeedDataTest::::testSetLikes_1()",
      "787": "MediaFeedDataTest::::testSetLikes_1()",
      "788": "MediaFeedDataTest::::testSetLikes_1()",
      "789": "MediaFeedDataTest::::testSetLikes_1()",
      "790": "MediaFeedDataTest::::testSetLikes_1()",
      "791": "MediaFeedDataTest::::testSetLikes_1()",
      "792": "MediaFeedDataTest::::testSetLikes_1()",
      "793": "MediaFeedDataTest::::testSetLikes_1()",
      "794": "MediaFeedDataTest::::testSetLikes_1()",
      "795": "MediaFeedDataTest::::testSetLikes_1()",
      "796": "MediaFeedDataTest::::testSetLikes_1()",
      "797": "MediaFeedDataTest::::testSetLikes_1()",
      "798": "MediaFeedDataTest::::testSetLikes_1()",
      "799": "MediaFeedDataTest::::testSetLikes_1()",
      "800": "MediaFeedDataTest::::testSetLikes_1()",
      "801": "MediaFeedDataTest::::testSetLikes_1()",
      "802": "MediaFeedDataTest::::testSetLikes_1()",
      "803": "MediaFeedDataTest::::testSetLikes_1()",
      "812": "MediaFeedDataTest::::testSetLink_1()",
      "813": "MediaFeedDataTest::::testSetLink_1()",
      "814": "MediaFeedDataTest::::testSetLink_1()",
      "815": "MediaFeedDataTest::::testSetLink_1()",
      "816": "MediaFeedDataTest::::testSetLink_1()",
      "817": "MediaFeedDataTest::::testSetLink_1()",
      "818": "MediaFeedDataTest::::testSetLink_1()",
      "819": "MediaFeedDataTest::::testSetLink_1()",
      "820": "MediaFeedDataTest::::testSetLink_1()",
      "821": "MediaFeedDataTest::::testSetLink_1()",
      "822": "MediaFeedDataTest::::testSetLink_1()",
      "823": "MediaFeedDataTest::::testSetLink_1()",
      "824": "MediaFeedDataTest::::testSetLink_1()",
      "825": "MediaFeedDataTest::::testSetLink_1()",
      "826": "MediaFeedDataTest::::testSetLink_1()",
      "827": "MediaFeedDataTest::::testSetLink_1()",
      "828": "MediaFeedDataTest::::testSetLink_1()",
      "829": "MediaFeedDataTest::::testSetLink_1()",
      "830": "MediaFeedDataTest::::testSetLink_1()",
      "831": "MediaFeedDataTest::::testSetLink_1()",
      "832": "MediaFeedDataTest::::testSetLink_1()",
      "833": "MediaFeedDataTest::::testSetLink_1()",
      "834": "MediaFeedDataTest::::testSetLink_1()",
      "835": "MediaFeedDataTest::::testSetLink_1()",
      "844": "MediaFeedDataTest::::testSetLocation_1()",
      "845": "MediaFeedDataTest::::testSetLocation_1()",
      "846": "MediaFeedDataTest::::testSetLocation_1()",
      "847": "MediaFeedDataTest::::testSetLocation_1()",
      "848": "MediaFeedDataTest::::testSetLocation_1()",
      "849": "MediaFeedDataTest::::testSetLocation_1()",
      "850": "MediaFeedDataTest::::testSetLocation_1()",
      "851": "MediaFeedDataTest::::testSetLocation_1()",
      "852": "MediaFeedDataTest::::testSetLocation_1()",
      "853": "MediaFeedDataTest::::testSetLocation_1()",
      "854": "MediaFeedDataTest::::testSetLocation_1()",
      "855": "MediaFeedDataTest::::testSetLocation_1()",
      "856": "MediaFeedDataTest::::testSetLocation_1()",
      "857": "MediaFeedDataTest::::testSetLocation_1()",
      "858": "MediaFeedDataTest::::testSetLocation_1()",
      "859": "MediaFeedDataTest::::testSetLocation_1()",
      "860": "MediaFeedDataTest::::testSetLocation_1()",
      "861": "MediaFeedDataTest::::testSetLocation_1()",
      "862": "MediaFeedDataTest::::testSetLocation_1()",
      "863": "MediaFeedDataTest::::testSetLocation_1()",
      "864": "MediaFeedDataTest::::testSetLocation_1()",
      "865": "MediaFeedDataTest::::testSetLocation_1()",
      "866": "MediaFeedDataTest::::testSetLocation_1()",
      "867": "MediaFeedDataTest::::testSetLocation_1()",
      "876": "MediaFeedDataTest::::testSetTags_1()",
      "877": "MediaFeedDataTest::::testSetTags_1()",
      "878": "MediaFeedDataTest::::testSetTags_1()",
      "879": "MediaFeedDataTest::::testSetTags_1()",
      "880": "MediaFeedDataTest::::testSetTags_1()",
      "881": "MediaFeedDataTest::::testSetTags_1()",
      "882": "MediaFeedDataTest::::testSetTags_1()",
      "883": "MediaFeedDataTest::::testSetTags_1()",
      "884": "MediaFeedDataTest::::testSetTags_1()",
      "885": "MediaFeedDataTest::::testSetTags_1()",
      "886": "MediaFeedDataTest::::testSetTags_1()",
      "887": "MediaFeedDataTest::::testSetTags_1()",
      "888": "MediaFeedDataTest::::testSetTags_1()",
      "889": "MediaFeedDataTest::::testSetTags_1()",
      "890": "MediaFeedDataTest::::testSetTags_1()",
      "891": "MediaFeedDataTest::::testSetTags_1()",
      "892": "MediaFeedDataTest::::testSetTags_1()",
      "893": "MediaFeedDataTest::::testSetTags_1()",
      "894": "MediaFeedDataTest::::testSetTags_1()",
      "895": "MediaFeedDataTest::::testSetTags_1()",
      "896": "MediaFeedDataTest::::testSetTags_1()",
      "897": "MediaFeedDataTest::::testSetTags_1()",
      "898": "MediaFeedDataTest::::testSetTags_1()",
      "899": "MediaFeedDataTest::::testSetTags_1()",
      "908": "MediaFeedDataTest::::testSetType_1()",
      "909": "MediaFeedDataTest::::testSetType_1()",
      "910": "MediaFeedDataTest::::testSetType_1()",
      "911": "MediaFeedDataTest::::testSetType_1()",
      "912": "MediaFeedDataTest::::testSetType_1()",
      "913": "MediaFeedDataTest::::testSetType_1()",
      "914": "MediaFeedDataTest::::testSetType_1()",
      "915": "MediaFeedDataTest::::testSetType_1()",
      "916": "MediaFeedDataTest::::testSetType_1()",
      "917": "MediaFeedDataTest::::testSetType_1()",
      "918": "MediaFeedDataTest::::testSetType_1()",
      "919": "MediaFeedDataTest::::testSetType_1()",
      "920": "MediaFeedDataTest::::testSetType_1()",
      "921": "MediaFeedDataTest::::testSetType_1()",
      "922": "MediaFeedDataTest::::testSetType_1()",
      "923": "MediaFeedDataTest::::testSetType_1()",
      "924": "MediaFeedDataTest::::testSetType_1()",
      "925": "MediaFeedDataTest::::testSetType_1()",
      "926": "MediaFeedDataTest::::testSetType_1()",
      "927": "MediaFeedDataTest::::testSetType_1()",
      "928": "MediaFeedDataTest::::testSetType_1()",
      "929": "MediaFeedDataTest::::testSetType_1()",
      "930": "MediaFeedDataTest::::testSetType_1()",
      "931": "MediaFeedDataTest::::testSetType_1()",
      "940": "MediaFeedDataTest::::testSetUser_1()",
      "941": "MediaFeedDataTest::::testSetUser_1()",
      "942": "MediaFeedDataTest::::testSetUser_1()",
      "943": "MediaFeedDataTest::::testSetUser_1()",
      "944": "MediaFeedDataTest::::testSetUser_1()",
      "945": "MediaFeedDataTest::::testSetUser_1()",
      "946": "MediaFeedDataTest::::testSetUser_1()",
      "947": "MediaFeedDataTest::::testSetUser_1()",
      "948": "MediaFeedDataTest::::testSetUser_1()",
      "949": "MediaFeedDataTest::::testSetUser_1()",
      "950": "MediaFeedDataTest::::testSetUser_1()",
      "951": "MediaFeedDataTest::::testSetUser_1()",
      "952": "MediaFeedDataTest::::testSetUser_1()",
      "953": "MediaFeedDataTest::::testSetUser_1()",
      "954": "MediaFeedDataTest::::testSetUser_1()",
      "955": "MediaFeedDataTest::::testSetUser_1()",
      "956": "MediaFeedDataTest::::testSetUser_1()",
      "957": "MediaFeedDataTest::::testSetUser_1()",
      "958": "MediaFeedDataTest::::testSetUser_1()",
      "959": "MediaFeedDataTest::::testSetUser_1()",
      "960": "MediaFeedDataTest::::testSetUser_1()",
      "961": "MediaFeedDataTest::::testSetUser_1()",
      "962": "MediaFeedDataTest::::testSetUser_1()",
      "963": "MediaFeedDataTest::::testSetUser_1()",
      "972": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "973": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "974": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "975": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "976": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "977": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "978": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "979": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "980": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "981": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "982": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "983": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "984": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "985": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "986": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "987": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "988": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "989": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "990": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "991": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "992": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "993": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "994": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "995": "MediaFeedDataTest::::testSetUserHasLiked_1()",
      "1004": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1005": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1006": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1007": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1008": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1009": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1010": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1011": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1012": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1013": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1014": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1015": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1016": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1017": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1018": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1019": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1020": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1021": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1022": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1023": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1024": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1025": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1026": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1027": "MediaFeedDataTest::::testSetUsersInPhotoList_1()",
      "1036": "MediaFeedDataTest::::testSetVideos_1()",
      "1037": "MediaFeedDataTest::::testSetVideos_1()",
      "1038": "MediaFeedDataTest::::testSetVideos_1()",
      "1039": "MediaFeedDataTest::::testSetVideos_1()",
      "1040": "MediaFeedDataTest::::testSetVideos_1()",
      "1041": "MediaFeedDataTest::::testSetVideos_1()",
      "1042": "MediaFeedDataTest::::testSetVideos_1()",
      "1043": "MediaFeedDataTest::::testSetVideos_1()",
      "1044": "MediaFeedDataTest::::testSetVideos_1()",
      "1045": "MediaFeedDataTest::::testSetVideos_1()",
      "1046": "MediaFeedDataTest::::testSetVideos_1()",
      "1047": "MediaFeedDataTest::::testSetVideos_1()",
      "1048": "MediaFeedDataTest::::testSetVideos_1()",
      "1049": "MediaFeedDataTest::::testSetVideos_1()",
      "1050": "MediaFeedDataTest::::testSetVideos_1()",
      "1051": "MediaFeedDataTest::::testSetVideos_1()",
      "1052": "MediaFeedDataTest::::testSetVideos_1()",
      "1053": "MediaFeedDataTest::::testSetVideos_1()",
      "1054": "MediaFeedDataTest::::testSetVideos_1()",
      "1055": "MediaFeedDataTest::::testSetVideos_1()",
      "1056": "MediaFeedDataTest::::testSetVideos_1()",
      "1057": "MediaFeedDataTest::::testSetVideos_1()",
      "1058": "MediaFeedDataTest::::testSetVideos_1()",
      "1059": "MediaFeedDataTest::::testSetVideos_1()",
      "1068": "MediaFeedDataTest::::testToString_1()",
      "1069": "MediaFeedDataTest::::testToString_1()",
      "1070": "MediaFeedDataTest::::testToString_1()",
      "1071": "MediaFeedDataTest::::testToString_1()",
      "1072": "MediaFeedDataTest::::testToString_1()",
      "1073": "MediaFeedDataTest::::testToString_1()",
      "1074": "MediaFeedDataTest::::testToString_1()",
      "1075": "MediaFeedDataTest::::testToString_1()",
      "1076": "MediaFeedDataTest::::testToString_1()",
      "1077": "MediaFeedDataTest::::testToString_1()",
      "1078": "MediaFeedDataTest::::testToString_1()",
      "1079": "MediaFeedDataTest::::testToString_1()",
      "1080": "MediaFeedDataTest::::testToString_1()",
      "1081": "MediaFeedDataTest::::testToString_1()",
      "1082": "MediaFeedDataTest::::testToString_1()",
      "1083": "MediaFeedDataTest::::testToString_1()",
      "1084": "MediaFeedDataTest::::testToString_1()",
      "1085": "MediaFeedDataTest::::testToString_1()",
      "1086": "MediaFeedDataTest::::testToString_1()",
      "1087": "MediaFeedDataTest::::testToString_1()",
      "1088": "MediaFeedDataTest::::testToString_1()",
      "1089": "MediaFeedDataTest::::testToString_1()",
      "1090": "MediaFeedDataTest::::testToString_1()",
      "1091": "MediaFeedDataTest::::testToString_1()",
      "1092": "MediaFeedDataTest::::testToString_1()",
      "1093": "MediaFeedDataTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          29,
          34
        ],
        "covered_lines": [
          16
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          43,
          71
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          101,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getCaption()"
      },
      {
        "test_lines": [
          80,
          106
        ],
        "covered_lines": [
          16,
          80,
          81,
          87,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getComments()"
      },
      {
        "test_lines": [
          115,
          138
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          143,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getCreatedTime()"
      },
      {
        "test_lines": [
          147,
          170
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          185,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getId()"
      },
      {
        "test_lines": [
          179,
          202
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          171,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getImageFilter()"
      },
      {
        "test_lines": [
          211,
          238
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          157,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getImages()"
      },
      {
        "test_lines": [
          247,
          273
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          129,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getLikes()"
      },
      {
        "test_lines": [
          282,
          305
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          115,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getLink()"
      },
      {
        "test_lines": [
          314,
          342
        ],
        "covered_lines": [
          16,
          73,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getLocation()"
      },
      {
        "test_lines": [
          351,
          375
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          218,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getTags()"
      },
      {
        "test_lines": [
          384,
          407
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          226,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getType()"
      },
      {
        "test_lines": [
          416,
          447
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          199,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getUser()"
      },
      {
        "test_lines": [
          456,
          480
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          242,
          246,
          247
        ],
        "label": "MediaFeedData::::getUsersInPhotoList()"
      },
      {
        "test_lines": [
          489,
          515
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          234,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::getVideos()"
      },
      {
        "test_lines": [
          524,
          547
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          210,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::isUserHasLiked()"
      },
      {
        "test_lines": [
          556,
          579
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          210,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::isUserHasLiked()"
      },
      {
        "test_lines": [
          588,
          611
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setCaption(org.jinstagram.entity.common.Caption)"
      },
      {
        "test_lines": [
          620,
          643
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setComments(org.jinstagram.entity.common.Comments)"
      },
      {
        "test_lines": [
          652,
          675
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setCreatedTime(java.lang.String)"
      },
      {
        "test_lines": [
          684,
          707
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setId(java.lang.String)"
      },
      {
        "test_lines": [
          716,
          739
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setImageFilter(java.lang.String)"
      },
      {
        "test_lines": [
          748,
          771
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setImages(org.jinstagram.entity.common.Images)"
      },
      {
        "test_lines": [
          780,
          803
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setLikes(org.jinstagram.entity.common.Likes)"
      },
      {
        "test_lines": [
          812,
          835
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setLink(java.lang.String)"
      },
      {
        "test_lines": [
          844,
          867
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setLocation(org.jinstagram.entity.common.Location)"
      },
      {
        "test_lines": [
          876,
          899
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setTags(java.util.List<java.lang.String>)"
      },
      {
        "test_lines": [
          908,
          931
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setType(java.lang.String)"
      },
      {
        "test_lines": [
          940,
          963
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setUser(org.jinstagram.entity.common.User)"
      },
      {
        "test_lines": [
          972,
          995
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setUserHasLiked(boolean)"
      },
      {
        "test_lines": [
          1004,
          1027
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setUsersInPhotoList(java.util.List<org.jinstagram.entity.common.UsersInPhoto>)"
      },
      {
        "test_lines": [
          1036,
          1059
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247
        ],
        "label": "MediaFeedData::::setVideos(org.jinstagram.entity.common.Videos)"
      },
      {
        "test_lines": [
          1068,
          1093
        ],
        "covered_lines": [
          16,
          80,
          81,
          94,
          95,
          108,
          109,
          122,
          123,
          136,
          137,
          150,
          151,
          164,
          165,
          178,
          179,
          192,
          193,
          206,
          207,
          214,
          215,
          222,
          223,
          230,
          231,
          238,
          239,
          246,
          247,
          269,
          270,
          272
        ],
        "label": "MediaFeedData::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/users/feed/UserFeed.java": {
    "class_content": [
      "package org.jinstagram.entity.users.feed;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.jinstagram.entity.common.Pagination;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "public class UserFeed extends InstagramObject{\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t@SerializedName(\"pagination\")\n",
      "\tprivate Pagination pagination;\n",
      "\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate List<UserFeedData> userList;\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the pagination\n",
      "\t */\n",
      "\tpublic Pagination getPagination() {\n",
      "\t\treturn pagination;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param pagination the pagination to set\n",
      "\t */\n",
      "\tpublic void setPagination(Pagination pagination) {\n",
      "\t\tthis.pagination = pagination;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @return the userList\n",
      "\t */\n",
      "\tpublic List<UserFeedData> getUserList() {\n",
      "\t\treturn userList;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param userList the userList to set\n",
      "\t */\n",
      "\tpublic void setUserList(List<UserFeedData> userList) {\n",
      "\t\tthis.userList = userList;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"UserFeed [meta=%s, pagination=%s, userList=%s]\", meta, pagination, userList);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.users.feed;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "import org.jinstagram.entity.common.Pagination;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>UserFeedTest</code> contains tests for the class\n",
      " * <code>{@link UserFeed}</code>.\n",
      " */\n",
      "public class UserFeedTest {\n",
      "\t/**\n",
      "\t * Run the Meta getMeta() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMeta_1() throws Exception {\n",
      "\t\tUserFeed fixture = new UserFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setUserList(new ArrayList<UserFeedData>());\n",
      "\n",
      "\t\tMeta result = fixture.getMeta();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Meta [code=0, errorMessage=null, errorType=null]\", result.toString());\n",
      "\t\tassertEquals(0, result.getCode());\n",
      "\t\tassertEquals(null, result.getErrorMessage());\n",
      "\t\tassertEquals(null, result.getErrorType());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Pagination getPagination() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetPagination_1() throws Exception {\n",
      "\t\tUserFeed fixture = new UserFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setUserList(new ArrayList<UserFeedData>());\n",
      "\n",
      "\t\tPagination result = fixture.getPagination();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextMaxTagId=null, nextMinId=null, nextUrl=null]\",\n",
      "\t\t\t\tresult.toString());\n",
      "\t\tassertEquals(null, result.getDepreciationWarning());\n",
      "\t\tassertEquals(null, result.getMinTagId());\n",
      "\t\tassertEquals(null, result.getNextMaxId());\n",
      "\t\tassertEquals(null, result.getNextCursor());\n",
      "\t\tassertEquals(null, result.getNextMinId());\n",
      "\t\tassertEquals(null, result.getNextMaxTagId());\n",
      "\t\tassertEquals(null, result.getNextUrl());\n",
      "\t\tassertEquals(false, result.hasNextPage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the List<UserFeedData> getUserList() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUserList_1() throws Exception {\n",
      "\t\tUserFeed fixture = new UserFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setUserList(new ArrayList<UserFeedData>());\n",
      "\n",
      "\t\tList<UserFeedData> result = fixture.getUserList();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMeta(Meta) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMeta_1() throws Exception {\n",
      "\t\tUserFeed fixture = new UserFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setUserList(new ArrayList<UserFeedData>());\n",
      "\t\tMeta meta = new Meta();\n",
      "\n",
      "\t\tfixture.setMeta(meta);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setPagination(Pagination) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetPagination_1() throws Exception {\n",
      "\t\tUserFeed fixture = new UserFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setUserList(new ArrayList<UserFeedData>());\n",
      "\t\tPagination pagination = new Pagination();\n",
      "\n",
      "\t\tfixture.setPagination(pagination);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUserList(List<UserFeedData>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUserList_1() throws Exception {\n",
      "\t\tUserFeed fixture = new UserFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setUserList(new ArrayList<UserFeedData>());\n",
      "\t\tList<UserFeedData> userList = new ArrayList<UserFeedData>();\n",
      "\n",
      "\t\tfixture.setUserList(userList);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tUserFeed fixture = new UserFeed();\n",
      "\t\tfixture.setMeta(new Meta());\n",
      "\t\tfixture.setPagination(new Pagination());\n",
      "\t\tfixture.setUserList(new ArrayList<UserFeedData>());\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\n",
      "\t\t\t\t\"UserFeed [meta=Meta [code=0, errorMessage=null, errorType=null], pagination=Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextMaxTagId=null, nextMinId=null, nextUrl=null], userList=[]]\",\n",
      "\t\t\t\tresult);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "UserFeed::::getMeta()": [
        24,
        26
      ],
      "UserFeed::::setMeta(org.jinstagram.entity.common.Meta)": [
        31,
        33
      ],
      "UserFeed::::getPagination()": [
        38,
        40
      ],
      "UserFeed::::setPagination(org.jinstagram.entity.common.Pagination)": [
        45,
        47
      ],
      "UserFeed::::getUserList()": [
        52,
        54
      ],
      "UserFeed::::setUserList(java.util.List<org.jinstagram.entity.users.feed.UserFeedData>)": [
        59,
        61
      ],
      "UserFeed::::toString()": [
        63,
        66
      ]
    },
    "test_method_lines_dic": {
      "UserFeedTest::::testGetMeta_1()": [
        25,
        40
      ],
      "UserFeedTest::::testGetPagination_1()": [
        49,
        71
      ],
      "UserFeedTest::::testGetUserList_1()": [
        80,
        92
      ],
      "UserFeedTest::::testSetMeta_1()": [
        101,
        112
      ],
      "UserFeedTest::::testSetPagination_1()": [
        121,
        132
      ],
      "UserFeedTest::::testSetUserList_1()": [
        141,
        152
      ],
      "UserFeedTest::::testToString_1()": [
        161,
        174
      ]
    },
    "reverse_method_lines_dic": {
      "24": "UserFeed::::getMeta()",
      "25": "UserFeed::::getMeta()",
      "26": "UserFeed::::getMeta()",
      "31": "UserFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "32": "UserFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "33": "UserFeed::::setMeta(org.jinstagram.entity.common.Meta)",
      "38": "UserFeed::::getPagination()",
      "39": "UserFeed::::getPagination()",
      "40": "UserFeed::::getPagination()",
      "45": "UserFeed::::setPagination(org.jinstagram.entity.common.Pagination)",
      "46": "UserFeed::::setPagination(org.jinstagram.entity.common.Pagination)",
      "47": "UserFeed::::setPagination(org.jinstagram.entity.common.Pagination)",
      "52": "UserFeed::::getUserList()",
      "53": "UserFeed::::getUserList()",
      "54": "UserFeed::::getUserList()",
      "59": "UserFeed::::setUserList(java.util.List<org.jinstagram.entity.users.feed.UserFeedData>)",
      "60": "UserFeed::::setUserList(java.util.List<org.jinstagram.entity.users.feed.UserFeedData>)",
      "61": "UserFeed::::setUserList(java.util.List<org.jinstagram.entity.users.feed.UserFeedData>)",
      "63": "UserFeed::::toString()",
      "64": "UserFeed::::toString()",
      "65": "UserFeed::::toString()",
      "66": "UserFeed::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "25": "UserFeedTest::::testGetMeta_1()",
      "26": "UserFeedTest::::testGetMeta_1()",
      "27": "UserFeedTest::::testGetMeta_1()",
      "28": "UserFeedTest::::testGetMeta_1()",
      "29": "UserFeedTest::::testGetMeta_1()",
      "30": "UserFeedTest::::testGetMeta_1()",
      "31": "UserFeedTest::::testGetMeta_1()",
      "32": "UserFeedTest::::testGetMeta_1()",
      "33": "UserFeedTest::::testGetMeta_1()",
      "34": "UserFeedTest::::testGetMeta_1()",
      "35": "UserFeedTest::::testGetMeta_1()",
      "36": "UserFeedTest::::testGetMeta_1()",
      "37": "UserFeedTest::::testGetMeta_1()",
      "38": "UserFeedTest::::testGetMeta_1()",
      "39": "UserFeedTest::::testGetMeta_1()",
      "40": "UserFeedTest::::testGetMeta_1()",
      "49": "UserFeedTest::::testGetPagination_1()",
      "50": "UserFeedTest::::testGetPagination_1()",
      "51": "UserFeedTest::::testGetPagination_1()",
      "52": "UserFeedTest::::testGetPagination_1()",
      "53": "UserFeedTest::::testGetPagination_1()",
      "54": "UserFeedTest::::testGetPagination_1()",
      "55": "UserFeedTest::::testGetPagination_1()",
      "56": "UserFeedTest::::testGetPagination_1()",
      "57": "UserFeedTest::::testGetPagination_1()",
      "58": "UserFeedTest::::testGetPagination_1()",
      "59": "UserFeedTest::::testGetPagination_1()",
      "60": "UserFeedTest::::testGetPagination_1()",
      "61": "UserFeedTest::::testGetPagination_1()",
      "62": "UserFeedTest::::testGetPagination_1()",
      "63": "UserFeedTest::::testGetPagination_1()",
      "64": "UserFeedTest::::testGetPagination_1()",
      "65": "UserFeedTest::::testGetPagination_1()",
      "66": "UserFeedTest::::testGetPagination_1()",
      "67": "UserFeedTest::::testGetPagination_1()",
      "68": "UserFeedTest::::testGetPagination_1()",
      "69": "UserFeedTest::::testGetPagination_1()",
      "70": "UserFeedTest::::testGetPagination_1()",
      "71": "UserFeedTest::::testGetPagination_1()",
      "80": "UserFeedTest::::testGetUserList_1()",
      "81": "UserFeedTest::::testGetUserList_1()",
      "82": "UserFeedTest::::testGetUserList_1()",
      "83": "UserFeedTest::::testGetUserList_1()",
      "84": "UserFeedTest::::testGetUserList_1()",
      "85": "UserFeedTest::::testGetUserList_1()",
      "86": "UserFeedTest::::testGetUserList_1()",
      "87": "UserFeedTest::::testGetUserList_1()",
      "88": "UserFeedTest::::testGetUserList_1()",
      "89": "UserFeedTest::::testGetUserList_1()",
      "90": "UserFeedTest::::testGetUserList_1()",
      "91": "UserFeedTest::::testGetUserList_1()",
      "92": "UserFeedTest::::testGetUserList_1()",
      "101": "UserFeedTest::::testSetMeta_1()",
      "102": "UserFeedTest::::testSetMeta_1()",
      "103": "UserFeedTest::::testSetMeta_1()",
      "104": "UserFeedTest::::testSetMeta_1()",
      "105": "UserFeedTest::::testSetMeta_1()",
      "106": "UserFeedTest::::testSetMeta_1()",
      "107": "UserFeedTest::::testSetMeta_1()",
      "108": "UserFeedTest::::testSetMeta_1()",
      "109": "UserFeedTest::::testSetMeta_1()",
      "110": "UserFeedTest::::testSetMeta_1()",
      "111": "UserFeedTest::::testSetMeta_1()",
      "112": "UserFeedTest::::testSetMeta_1()",
      "121": "UserFeedTest::::testSetPagination_1()",
      "122": "UserFeedTest::::testSetPagination_1()",
      "123": "UserFeedTest::::testSetPagination_1()",
      "124": "UserFeedTest::::testSetPagination_1()",
      "125": "UserFeedTest::::testSetPagination_1()",
      "126": "UserFeedTest::::testSetPagination_1()",
      "127": "UserFeedTest::::testSetPagination_1()",
      "128": "UserFeedTest::::testSetPagination_1()",
      "129": "UserFeedTest::::testSetPagination_1()",
      "130": "UserFeedTest::::testSetPagination_1()",
      "131": "UserFeedTest::::testSetPagination_1()",
      "132": "UserFeedTest::::testSetPagination_1()",
      "141": "UserFeedTest::::testSetUserList_1()",
      "142": "UserFeedTest::::testSetUserList_1()",
      "143": "UserFeedTest::::testSetUserList_1()",
      "144": "UserFeedTest::::testSetUserList_1()",
      "145": "UserFeedTest::::testSetUserList_1()",
      "146": "UserFeedTest::::testSetUserList_1()",
      "147": "UserFeedTest::::testSetUserList_1()",
      "148": "UserFeedTest::::testSetUserList_1()",
      "149": "UserFeedTest::::testSetUserList_1()",
      "150": "UserFeedTest::::testSetUserList_1()",
      "151": "UserFeedTest::::testSetUserList_1()",
      "152": "UserFeedTest::::testSetUserList_1()",
      "161": "UserFeedTest::::testToString_1()",
      "162": "UserFeedTest::::testToString_1()",
      "163": "UserFeedTest::::testToString_1()",
      "164": "UserFeedTest::::testToString_1()",
      "165": "UserFeedTest::::testToString_1()",
      "166": "UserFeedTest::::testToString_1()",
      "167": "UserFeedTest::::testToString_1()",
      "168": "UserFeedTest::::testToString_1()",
      "169": "UserFeedTest::::testToString_1()",
      "170": "UserFeedTest::::testToString_1()",
      "171": "UserFeedTest::::testToString_1()",
      "172": "UserFeedTest::::testToString_1()",
      "173": "UserFeedTest::::testToString_1()",
      "174": "UserFeedTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          25,
          40
        ],
        "covered_lines": [
          11,
          25,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "UserFeed::::getMeta()"
      },
      {
        "test_lines": [
          49,
          71
        ],
        "covered_lines": [
          11,
          32,
          33,
          39,
          46,
          47,
          60,
          61
        ],
        "label": "UserFeed::::getPagination()"
      },
      {
        "test_lines": [
          80,
          92
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          53,
          60,
          61
        ],
        "label": "UserFeed::::getUserList()"
      },
      {
        "test_lines": [
          101,
          112
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "UserFeed::::setMeta(org.jinstagram.entity.common.Meta)"
      },
      {
        "test_lines": [
          121,
          132
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "UserFeed::::setPagination(org.jinstagram.entity.common.Pagination)"
      },
      {
        "test_lines": [
          141,
          152
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61
        ],
        "label": "UserFeed::::setUserList(java.util.List<org.jinstagram.entity.users.feed.UserFeedData>)"
      },
      {
        "test_lines": [
          161,
          174
        ],
        "covered_lines": [
          11,
          32,
          33,
          46,
          47,
          60,
          61,
          65
        ],
        "label": "UserFeed::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/users/basicinfo/Counts.java": {
    "class_content": [
      "package org.jinstagram.entity.users.basicinfo;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class Counts {\n",
      "\t@SerializedName(\"follows\")\n",
      "\tprivate int follows;\n",
      "\n",
      "\t@SerializedName(\"followed_by\")\n",
      "\tprivate int followedBy;\n",
      "\n",
      "\t@SerializedName(\"media\")\n",
      "\tprivate int media;\n",
      "\n",
      "\tpublic int getMedia() {\n",
      "\t\treturn media;\n",
      "\t}\n",
      "\n",
      "\tpublic void setMedia(int media) {\n",
      "\t\tthis.media = media;\n",
      "\t}\n",
      "\n",
      "\tpublic int getFollows() {\n",
      "\t\treturn follows;\n",
      "\t}\n",
      "\n",
      "\tpublic void setFollows(int follows) {\n",
      "\t\tthis.follows = follows;\n",
      "\t}\n",
      "\n",
      "\tpublic int getFollowedBy() {\n",
      "\t\treturn followedBy;\n",
      "\t}\n",
      "\n",
      "\tpublic void setFollowedBy(int follwedBy) {\n",
      "\t\tthis.followedBy = follwedBy;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"Counts [follows=%s, followed_by=%s, media=%s]\", follows, followedBy, media);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.users.basicinfo;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "\n",
      "import org.junit.After;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>CountsTest</code> contains tests for the class\n",
      " * <code>{@link Counts}</code>.\n",
      " */\n",
      "public class CountsTest {\n",
      "\t/**\n",
      "\t * Run the int getFollowedBy() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetFollowedBy_1() throws Exception {\n",
      "\t\tCounts fixture = new Counts();\n",
      "\t\tfixture.setFollows(1);\n",
      "\t\tfixture.setMedia(1);\n",
      "\t\tfixture.setFollowedBy(1);\n",
      "\n",
      "\t\tint result = fixture.getFollowedBy();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the int getFollows() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetFollows_1() throws Exception {\n",
      "\t\tCounts fixture = new Counts();\n",
      "\t\tfixture.setFollows(1);\n",
      "\t\tfixture.setMedia(1);\n",
      "\t\tfixture.setFollowedBy(1);\n",
      "\n",
      "\t\tint result = fixture.getFollows();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the int getMedia() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetMedia_1() throws Exception {\n",
      "\t\tCounts fixture = new Counts();\n",
      "\t\tfixture.setFollows(1);\n",
      "\t\tfixture.setMedia(1);\n",
      "\t\tfixture.setFollowedBy(1);\n",
      "\n",
      "\t\tint result = fixture.getMedia();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(1, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setFollowedBy(int) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetFollowedBy_1() throws Exception {\n",
      "\t\tCounts fixture = new Counts();\n",
      "\t\tfixture.setFollows(1);\n",
      "\t\tfixture.setMedia(1);\n",
      "\t\tfixture.setFollowedBy(1);\n",
      "\t\tint follwedBy = 1;\n",
      "\n",
      "\t\tfixture.setFollowedBy(follwedBy);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setFollows(int) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetFollows_1() throws Exception {\n",
      "\t\tCounts fixture = new Counts();\n",
      "\t\tfixture.setFollows(1);\n",
      "\t\tfixture.setMedia(1);\n",
      "\t\tfixture.setFollowedBy(1);\n",
      "\t\tint follows = 1;\n",
      "\n",
      "\t\tfixture.setFollows(follows);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setMedia(int) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetMedia_1() throws Exception {\n",
      "\t\tCounts fixture = new Counts();\n",
      "\t\tfixture.setFollows(1);\n",
      "\t\tfixture.setMedia(1);\n",
      "\t\tfixture.setFollowedBy(1);\n",
      "\t\tint media = 1;\n",
      "\n",
      "\t\tfixture.setMedia(media);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tCounts fixture = new Counts();\n",
      "\t\tfixture.setFollows(1);\n",
      "\t\tfixture.setMedia(1);\n",
      "\t\tfixture.setFollowedBy(1);\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"Counts [follows=1, followed_by=1, media=1]\", result);\n",
      "\t}\n",
      "\n",
      " \n",
      "}"
    ],
    "method_lines_dic": {
      "Counts::::getMedia()": [
        15,
        17
      ],
      "Counts::::setMedia(int)": [
        19,
        21
      ],
      "Counts::::getFollows()": [
        23,
        25
      ],
      "Counts::::setFollows(int)": [
        27,
        29
      ],
      "Counts::::getFollowedBy()": [
        31,
        33
      ],
      "Counts::::setFollowedBy(int)": [
        35,
        37
      ],
      "Counts::::toString()": [
        39,
        42
      ]
    },
    "test_method_lines_dic": {
      "CountsTest::::testGetFollowedBy_1()": [
        21,
        32
      ],
      "CountsTest::::testGetFollows_1()": [
        41,
        52
      ],
      "CountsTest::::testGetMedia_1()": [
        61,
        72
      ],
      "CountsTest::::testSetFollowedBy_1()": [
        81,
        92
      ],
      "CountsTest::::testSetFollows_1()": [
        101,
        112
      ],
      "CountsTest::::testSetMedia_1()": [
        121,
        132
      ],
      "CountsTest::::testToString_1()": [
        141,
        152
      ]
    },
    "reverse_method_lines_dic": {
      "15": "Counts::::getMedia()",
      "16": "Counts::::getMedia()",
      "17": "Counts::::getMedia()",
      "19": "Counts::::setMedia(int)",
      "20": "Counts::::setMedia(int)",
      "21": "Counts::::setMedia(int)",
      "23": "Counts::::getFollows()",
      "24": "Counts::::getFollows()",
      "25": "Counts::::getFollows()",
      "27": "Counts::::setFollows(int)",
      "28": "Counts::::setFollows(int)",
      "29": "Counts::::setFollows(int)",
      "31": "Counts::::getFollowedBy()",
      "32": "Counts::::getFollowedBy()",
      "33": "Counts::::getFollowedBy()",
      "35": "Counts::::setFollowedBy(int)",
      "36": "Counts::::setFollowedBy(int)",
      "37": "Counts::::setFollowedBy(int)",
      "39": "Counts::::toString()",
      "40": "Counts::::toString()",
      "41": "Counts::::toString()",
      "42": "Counts::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "21": "CountsTest::::testGetFollowedBy_1()",
      "22": "CountsTest::::testGetFollowedBy_1()",
      "23": "CountsTest::::testGetFollowedBy_1()",
      "24": "CountsTest::::testGetFollowedBy_1()",
      "25": "CountsTest::::testGetFollowedBy_1()",
      "26": "CountsTest::::testGetFollowedBy_1()",
      "27": "CountsTest::::testGetFollowedBy_1()",
      "28": "CountsTest::::testGetFollowedBy_1()",
      "29": "CountsTest::::testGetFollowedBy_1()",
      "30": "CountsTest::::testGetFollowedBy_1()",
      "31": "CountsTest::::testGetFollowedBy_1()",
      "32": "CountsTest::::testGetFollowedBy_1()",
      "41": "CountsTest::::testGetFollows_1()",
      "42": "CountsTest::::testGetFollows_1()",
      "43": "CountsTest::::testGetFollows_1()",
      "44": "CountsTest::::testGetFollows_1()",
      "45": "CountsTest::::testGetFollows_1()",
      "46": "CountsTest::::testGetFollows_1()",
      "47": "CountsTest::::testGetFollows_1()",
      "48": "CountsTest::::testGetFollows_1()",
      "49": "CountsTest::::testGetFollows_1()",
      "50": "CountsTest::::testGetFollows_1()",
      "51": "CountsTest::::testGetFollows_1()",
      "52": "CountsTest::::testGetFollows_1()",
      "61": "CountsTest::::testGetMedia_1()",
      "62": "CountsTest::::testGetMedia_1()",
      "63": "CountsTest::::testGetMedia_1()",
      "64": "CountsTest::::testGetMedia_1()",
      "65": "CountsTest::::testGetMedia_1()",
      "66": "CountsTest::::testGetMedia_1()",
      "67": "CountsTest::::testGetMedia_1()",
      "68": "CountsTest::::testGetMedia_1()",
      "69": "CountsTest::::testGetMedia_1()",
      "70": "CountsTest::::testGetMedia_1()",
      "71": "CountsTest::::testGetMedia_1()",
      "72": "CountsTest::::testGetMedia_1()",
      "81": "CountsTest::::testSetFollowedBy_1()",
      "82": "CountsTest::::testSetFollowedBy_1()",
      "83": "CountsTest::::testSetFollowedBy_1()",
      "84": "CountsTest::::testSetFollowedBy_1()",
      "85": "CountsTest::::testSetFollowedBy_1()",
      "86": "CountsTest::::testSetFollowedBy_1()",
      "87": "CountsTest::::testSetFollowedBy_1()",
      "88": "CountsTest::::testSetFollowedBy_1()",
      "89": "CountsTest::::testSetFollowedBy_1()",
      "90": "CountsTest::::testSetFollowedBy_1()",
      "91": "CountsTest::::testSetFollowedBy_1()",
      "92": "CountsTest::::testSetFollowedBy_1()",
      "101": "CountsTest::::testSetFollows_1()",
      "102": "CountsTest::::testSetFollows_1()",
      "103": "CountsTest::::testSetFollows_1()",
      "104": "CountsTest::::testSetFollows_1()",
      "105": "CountsTest::::testSetFollows_1()",
      "106": "CountsTest::::testSetFollows_1()",
      "107": "CountsTest::::testSetFollows_1()",
      "108": "CountsTest::::testSetFollows_1()",
      "109": "CountsTest::::testSetFollows_1()",
      "110": "CountsTest::::testSetFollows_1()",
      "111": "CountsTest::::testSetFollows_1()",
      "112": "CountsTest::::testSetFollows_1()",
      "121": "CountsTest::::testSetMedia_1()",
      "122": "CountsTest::::testSetMedia_1()",
      "123": "CountsTest::::testSetMedia_1()",
      "124": "CountsTest::::testSetMedia_1()",
      "125": "CountsTest::::testSetMedia_1()",
      "126": "CountsTest::::testSetMedia_1()",
      "127": "CountsTest::::testSetMedia_1()",
      "128": "CountsTest::::testSetMedia_1()",
      "129": "CountsTest::::testSetMedia_1()",
      "130": "CountsTest::::testSetMedia_1()",
      "131": "CountsTest::::testSetMedia_1()",
      "132": "CountsTest::::testSetMedia_1()",
      "141": "CountsTest::::testToString_1()",
      "142": "CountsTest::::testToString_1()",
      "143": "CountsTest::::testToString_1()",
      "144": "CountsTest::::testToString_1()",
      "145": "CountsTest::::testToString_1()",
      "146": "CountsTest::::testToString_1()",
      "147": "CountsTest::::testToString_1()",
      "148": "CountsTest::::testToString_1()",
      "149": "CountsTest::::testToString_1()",
      "150": "CountsTest::::testToString_1()",
      "151": "CountsTest::::testToString_1()",
      "152": "CountsTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          32
        ],
        "covered_lines": [
          5,
          20,
          21,
          28,
          29,
          32,
          36,
          37
        ],
        "label": "Counts::::getFollowedBy()"
      },
      {
        "test_lines": [
          41,
          52
        ],
        "covered_lines": [
          5,
          20,
          21,
          24,
          28,
          29,
          36,
          37
        ],
        "label": "Counts::::getFollows()"
      },
      {
        "test_lines": [
          61,
          72
        ],
        "covered_lines": [
          5,
          16,
          20,
          21,
          28,
          29,
          36,
          37
        ],
        "label": "Counts::::getMedia()"
      },
      {
        "test_lines": [
          81,
          92
        ],
        "covered_lines": [
          5,
          20,
          21,
          28,
          29,
          36,
          37
        ],
        "label": "Counts::::setFollowedBy(int)"
      },
      {
        "test_lines": [
          101,
          112
        ],
        "covered_lines": [
          5,
          20,
          21,
          28,
          29,
          36,
          37
        ],
        "label": "Counts::::setFollows(int)"
      },
      {
        "test_lines": [
          121,
          132
        ],
        "covered_lines": [
          5,
          20,
          21,
          28,
          29,
          36,
          37
        ],
        "label": "Counts::::setMedia(int)"
      },
      {
        "test_lines": [
          141,
          152
        ],
        "covered_lines": [
          5,
          20,
          21,
          28,
          29,
          36,
          37,
          41
        ],
        "label": "Counts::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/users/basicinfo/UserInfo.java": {
    "class_content": [
      "package org.jinstagram.entity.users.basicinfo;\n",
      "\n",
      "import org.jinstagram.InstagramObject;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "import org.jinstagram.entity.common.Meta;\n",
      "\n",
      "public class UserInfo extends InstagramObject{\n",
      "\n",
      "\t@SerializedName(\"meta\")\n",
      "\tprivate Meta meta;\n",
      "\n",
      "\t@SerializedName(\"data\")\n",
      "\tprivate UserInfoData data;\n",
      "\n",
      "\t/**\n",
      "\t * @return the meta\n",
      "\t */\n",
      "\tpublic Meta getMeta() {\n",
      "\t\treturn meta;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param meta the meta to set\n",
      "\t */\n",
      "\tpublic void setMeta(Meta meta) {\n",
      "\t\tthis.meta = meta;\n",
      "\t}\n",
      "\n",
      "\tpublic UserInfoData getData() {\n",
      "\t\treturn data;\n",
      "\t}\n",
      "\n",
      "\tpublic void setData(UserInfoData data) {\n",
      "\t\tthis.data = data;\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return String.format(\"UserInfo [data=%s]\", data);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.entity.users.basicinfo;\n",
      "\n",
      "import org.junit.After;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "/**\n",
      " * The class <code>UserInfoTest</code> contains tests for the class\n",
      " * <code>{@link UserInfo}</code>.\n",
      " */\n",
      "public class UserInfoTest {\n",
      "\t/**\n",
      "\t * Run the UserInfoData getData() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetData_1() throws Exception {\n",
      "\t\tUserInfo fixture = new UserInfo();\n",
      "\t\tfixture.setData(new UserInfoData());\n",
      "\n",
      "\t\tUserInfoData result = fixture.getData();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(null, result.getFullName());\n",
      "\t\t \n",
      "\t\tassertEquals(null, result.getId());\n",
      "\t\tassertEquals(null, result.getFirstName());\n",
      "\t\tassertEquals(null, result.getUsername());\n",
      "\t\tassertEquals(null, result.getBio());\n",
      "\t\tassertEquals(null, result.getLastName());\n",
      "\t\tassertEquals(null, result.getWebsite());\n",
      "\t\tassertEquals(null, result.getProfilePicture());\n",
      "\t\tassertEquals(null, result.getCounts());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setData(UserInfoData) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetData_1() throws Exception {\n",
      "\t\tUserInfo fixture = new UserInfo();\n",
      "\t\tfixture.setData(new UserInfoData());\n",
      "\t\tUserInfoData data = new UserInfoData();\n",
      "\n",
      "\t\tfixture.setData(data);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t \n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if the initialization fails for some reason\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp() throws Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown() throws Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args\n",
      "\t *            the command line arguments\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(UserInfoTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {
      "UserInfo::::getMeta()": [
        19,
        21
      ],
      "UserInfo::::setMeta(org.jinstagram.entity.common.Meta)": [
        26,
        28
      ],
      "UserInfo::::getData()": [
        30,
        32
      ],
      "UserInfo::::setData(org.jinstagram.entity.users.basicinfo.UserInfoData)": [
        34,
        36
      ],
      "UserInfo::::toString()": [
        38,
        41
      ]
    },
    "test_method_lines_dic": {
      "UserInfoTest::::testGetData_1()": [
        22,
        41
      ],
      "UserInfoTest::::testSetData_1()": [
        50,
        59
      ],
      "UserInfoTest::::setUp()": [
        71,
        74
      ],
      "UserInfoTest::::tearDown()": [
        84,
        87
      ],
      "UserInfoTest::::main(java.lang.String[])": [
        97,
        99
      ]
    },
    "reverse_method_lines_dic": {
      "19": "UserInfo::::getMeta()",
      "20": "UserInfo::::getMeta()",
      "21": "UserInfo::::getMeta()",
      "26": "UserInfo::::setMeta(org.jinstagram.entity.common.Meta)",
      "27": "UserInfo::::setMeta(org.jinstagram.entity.common.Meta)",
      "28": "UserInfo::::setMeta(org.jinstagram.entity.common.Meta)",
      "30": "UserInfo::::getData()",
      "31": "UserInfo::::getData()",
      "32": "UserInfo::::getData()",
      "34": "UserInfo::::setData(org.jinstagram.entity.users.basicinfo.UserInfoData)",
      "35": "UserInfo::::setData(org.jinstagram.entity.users.basicinfo.UserInfoData)",
      "36": "UserInfo::::setData(org.jinstagram.entity.users.basicinfo.UserInfoData)",
      "38": "UserInfo::::toString()",
      "39": "UserInfo::::toString()",
      "40": "UserInfo::::toString()",
      "41": "UserInfo::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "22": "UserInfoTest::::testGetData_1()",
      "23": "UserInfoTest::::testGetData_1()",
      "24": "UserInfoTest::::testGetData_1()",
      "25": "UserInfoTest::::testGetData_1()",
      "26": "UserInfoTest::::testGetData_1()",
      "27": "UserInfoTest::::testGetData_1()",
      "28": "UserInfoTest::::testGetData_1()",
      "29": "UserInfoTest::::testGetData_1()",
      "30": "UserInfoTest::::testGetData_1()",
      "31": "UserInfoTest::::testGetData_1()",
      "32": "UserInfoTest::::testGetData_1()",
      "33": "UserInfoTest::::testGetData_1()",
      "34": "UserInfoTest::::testGetData_1()",
      "35": "UserInfoTest::::testGetData_1()",
      "36": "UserInfoTest::::testGetData_1()",
      "37": "UserInfoTest::::testGetData_1()",
      "38": "UserInfoTest::::testGetData_1()",
      "39": "UserInfoTest::::testGetData_1()",
      "40": "UserInfoTest::::testGetData_1()",
      "41": "UserInfoTest::::testGetData_1()",
      "50": "UserInfoTest::::testSetData_1()",
      "51": "UserInfoTest::::testSetData_1()",
      "52": "UserInfoTest::::testSetData_1()",
      "53": "UserInfoTest::::testSetData_1()",
      "54": "UserInfoTest::::testSetData_1()",
      "55": "UserInfoTest::::testSetData_1()",
      "56": "UserInfoTest::::testSetData_1()",
      "57": "UserInfoTest::::testSetData_1()",
      "58": "UserInfoTest::::testSetData_1()",
      "59": "UserInfoTest::::testSetData_1()",
      "71": "UserInfoTest::::setUp()",
      "72": "UserInfoTest::::setUp()",
      "73": "UserInfoTest::::setUp()",
      "74": "UserInfoTest::::setUp()",
      "84": "UserInfoTest::::tearDown()",
      "85": "UserInfoTest::::tearDown()",
      "86": "UserInfoTest::::tearDown()",
      "87": "UserInfoTest::::tearDown()",
      "97": "UserInfoTest::::main(java.lang.String[])",
      "98": "UserInfoTest::::main(java.lang.String[])",
      "99": "UserInfoTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          22,
          41
        ],
        "covered_lines": [
          8,
          31,
          35,
          36
        ],
        "label": "UserInfo::::getData()"
      },
      {
        "test_lines": [
          50,
          59
        ],
        "covered_lines": [
          8,
          35,
          36
        ],
        "label": "UserInfo::::setData(org.jinstagram.entity.users.basicinfo.UserInfoData)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/entity/users/basicinfo/UserInfoData.java": {
    "class_content": [
      "package org.jinstagram.entity.users.basicinfo;\n",
      "\n",
      "import com.google.gson.annotations.SerializedName;\n",
      "\n",
      "public class UserInfoData {\n",
      "\t@SerializedName(\"bio\")\n",
      "\tprivate String bio;\n",
      "\n",
      "\t@SerializedName(\"counts\")\n",
      "\tprivate Counts counts;\n",
      "\n",
      "\t@SerializedName(\"first_name\")\n",
      "\tprivate String firstName;\n",
      "\n",
      "\t@SerializedName(\"id\")\n",
      "\tprivate String id;\n",
      "\n",
      "\t@SerializedName(\"last_name\")\n",
      "\tprivate String lastName;\n",
      "\n",
      "\t@SerializedName(\"profile_picture\")\n",
      "\tprivate String profilePicture;\n",
      "\n",
      "\t@SerializedName(\"username\")\n",
      "\tprivate String username;\n",
      "\n",
      "\t@SerializedName(\"full_name\")\n",
      "\tprivate String fullName;\n",
      "\n",
      "\t@SerializedName(\"website\")\n",
      "\tprivate String website;\n",
      "\n",
      "\t@SerializedName(\"is_business\")\n",
      "\tprivate boolean isBusiness;\n",
      "\n",
      "\tpublic String getUsername() {\n",
      "\t\treturn username;\n",
      "\t}\n",
      "\n",
      "\tpublic void setUsername(String username) {\n",
      "\t\tthis.username = username;\n",
      "\t}\n",
      "\n",
      "\tpublic String getId() {\n",
      "\t\treturn id;\n",
      "\t}\n",
      "\n",
      "\tpublic void setId(String id) {\n",
      "\t\tthis.id = id;\n",
      "\t}\n",
      "\n",
      "\tpublic String getLastName() {\n",
      "\t\treturn lastName;\n",
      "\t}\n",
      "\n",
      "\tpublic void setLast_name(String last_name) {\n",
      "\t\tthis.lastName = last_name;\n",
      "\t}\n",
      "\n",
      "\tpublic String getFirstName() {\n",
      "\t\treturn firstName;\n",
      "\t}\n",
      "\n",
      "\tpublic void setFirstName(String firstName) {\n",
      "\t\tthis.firstName = firstName;\n",
      "\t}\n",
      "\n",
      "\tpublic String getProfilePicture() {\n",
      "\t\treturn profilePicture;\n",
      "\t}\n",
      "\n",
      "\tpublic void setProfilePicture(String profilePicture) {\n",
      "\t\tthis.profilePicture = profilePicture;\n",
      "\t}\n",
      "\n",
      "\tpublic String getBio() {\n",
      "\t\treturn bio;\n",
      "\t}\n",
      "\n",
      "\tpublic void setBio(String bio) {\n",
      "\t\tthis.bio = bio;\n",
      "\t}\n",
      "\n",
      "\tpublic String getWebsite() {\n",
      "\t\treturn website;\n",
      "\t}\n",
      "\n",
      "\tpublic void setWebsite(String website) {\n",
      "\t\tthis.website = website;\n",
      "\t}\n",
      "\n",
      "\tpublic Counts getCounts() {\n",
      "\t\treturn counts;\n",
      "\t}\n",
      "\n",
      "\tpublic void setCounts(Counts counts) {\n",
      "\t\tthis.counts = counts;\n",
      "\t}\n",
      "\n",
      "\tpublic String getFullName() {\n",
      "\t\treturn fullName;\n",
      "\t}\n",
      "\n",
      "\tpublic void setFullName(String fullName) {\n",
      "\t\tthis.fullName = fullName;\n",
      "\t}\n",
      "\t\n",
      "\tpublic boolean isBusiness() {\n",
      "\t\treturn isBusiness;\n",
      "\t}\n",
      "\n",
      "\tpublic void setBusiness(boolean isBusiness) {\n",
      "\t\tthis.isBusiness = isBusiness;\n",
      "\t}\n",
      "\n",
      "\t@Override\n",
      "\tpublic String toString() {\n",
      "\t\treturn String.format(\"UserInfoData [bio=%s, counts=%s, first_name=%s, id=%s, last_name=%s, profile_picture=%s, username=%s, fullName=%s, website=%s, isBusiness=%b]\",\n",
      "\t\t\t\tbio, counts, firstName, id, lastName, profilePicture, username, fullName, website, isBusiness);\n",
      "\t}\n",
      "}"
    ],
    "test_content": [
      "package org.jinstagram.entity.users.basicinfo;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "/**\n",
      " * The class <code>UserInfoDataTest</code> contains tests for the class\n",
      " * <code>{@link UserInfoData}</code>.\n",
      " *\n",
      " */\n",
      "public class UserInfoDataTest {\n",
      "\t/**\n",
      "\t * Run the String getBio() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetBio_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getBio();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Counts getCounts() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCounts_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tCounts result = fixture.getCounts();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.getFollows());\n",
      "\t\tassertEquals(\"Counts [follows=0, followed_by=0, media=0]\", result.toString());\n",
      "\t\tassertEquals(0, result.getMedia());\n",
      "\t\tassertEquals(0, result.getFollowedBy());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getFirstName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetFirstName_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getFirstName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getFullName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetFullName_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getFullName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getId() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetId_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getId();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getLastName() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetLastName_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getLastName();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getProfilePicture() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetProfilePicture_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getProfilePicture();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getUsername() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUsername_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getUsername();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getWebsite() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetWebsite_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\n",
      "\t\tString result = fixture.getWebsite();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setBio(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetBio_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString bio = \"\";\n",
      "\n",
      "\t\tfixture.setBio(bio);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCounts(Counts) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCounts_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tCounts counts = new Counts();\n",
      "\n",
      "\t\tfixture.setCounts(counts);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setFirstName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetFirstName_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString firstName = \"\";\n",
      "\n",
      "\t\tfixture.setFirstName(firstName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setFullName(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetFullName_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString fullName = \"\";\n",
      "\n",
      "\t\tfixture.setFullName(fullName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setId(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetId_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString id = \"\";\n",
      "\n",
      "\t\tfixture.setId(id);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setLast_name(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetLast_name_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString last_name = \"\";\n",
      "\n",
      "\t\tfixture.setLast_name(last_name);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setProfilePicture(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetProfilePicture_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString profilePicture = \"\";\n",
      "\n",
      "\t\tfixture.setProfilePicture(profilePicture);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setUsername(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetUsername_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString username = \"\";\n",
      "\n",
      "\t\tfixture.setUsername(username);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setWebsite(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetWebsite_1() throws Exception {\n",
      "\t\tUserInfoData fixture = new UserInfoData();\n",
      "\t\tfixture.setUsername(\"\");\n",
      "\t\tfixture.setFullName(\"\");\n",
      "\t\tfixture.setProfilePicture(\"\");\n",
      "\t\tfixture.setId(\"\");\n",
      "\t\tfixture.setLast_name(\"\");\n",
      "\t\tfixture.setCounts(new Counts());\n",
      "\t\tfixture.setFirstName(\"\");\n",
      "\t\tfixture.setBio(\"\");\n",
      "\t\tfixture.setWebsite(\"\");\n",
      "\t\tString website = \"\";\n",
      "\n",
      "\t\tfixture.setWebsite(website);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "UserInfoData::::getUsername()": [
        36,
        38
      ],
      "UserInfoData::::setUsername(java.lang.String)": [
        40,
        42
      ],
      "UserInfoData::::getId()": [
        44,
        46
      ],
      "UserInfoData::::setId(java.lang.String)": [
        48,
        50
      ],
      "UserInfoData::::getLastName()": [
        52,
        54
      ],
      "UserInfoData::::setLast_name(java.lang.String)": [
        56,
        58
      ],
      "UserInfoData::::getFirstName()": [
        60,
        62
      ],
      "UserInfoData::::setFirstName(java.lang.String)": [
        64,
        66
      ],
      "UserInfoData::::getProfilePicture()": [
        68,
        70
      ],
      "UserInfoData::::setProfilePicture(java.lang.String)": [
        72,
        74
      ],
      "UserInfoData::::getBio()": [
        76,
        78
      ],
      "UserInfoData::::setBio(java.lang.String)": [
        80,
        82
      ],
      "UserInfoData::::getWebsite()": [
        84,
        86
      ],
      "UserInfoData::::setWebsite(java.lang.String)": [
        88,
        90
      ],
      "UserInfoData::::getCounts()": [
        92,
        94
      ],
      "UserInfoData::::setCounts(org.jinstagram.entity.users.basicinfo.Counts)": [
        96,
        98
      ],
      "UserInfoData::::getFullName()": [
        100,
        102
      ],
      "UserInfoData::::setFullName(java.lang.String)": [
        104,
        106
      ],
      "UserInfoData::::isBusiness()": [
        108,
        110
      ],
      "UserInfoData::::setBusiness(boolean)": [
        112,
        114
      ],
      "UserInfoData::::toString()": [
        116,
        120
      ]
    },
    "test_method_lines_dic": {
      "UserInfoDataTest::::testGetBio_1()": [
        21,
        38
      ],
      "UserInfoDataTest::::testGetCounts_1()": [
        47,
        68
      ],
      "UserInfoDataTest::::testGetFirstName_1()": [
        77,
        94
      ],
      "UserInfoDataTest::::testGetFullName_1()": [
        103,
        120
      ],
      "UserInfoDataTest::::testGetId_1()": [
        129,
        146
      ],
      "UserInfoDataTest::::testGetLastName_1()": [
        155,
        172
      ],
      "UserInfoDataTest::::testGetProfilePicture_1()": [
        181,
        198
      ],
      "UserInfoDataTest::::testGetUsername_1()": [
        207,
        224
      ],
      "UserInfoDataTest::::testGetWebsite_1()": [
        233,
        250
      ],
      "UserInfoDataTest::::testSetBio_1()": [
        259,
        276
      ],
      "UserInfoDataTest::::testSetCounts_1()": [
        285,
        302
      ],
      "UserInfoDataTest::::testSetFirstName_1()": [
        311,
        328
      ],
      "UserInfoDataTest::::testSetFullName_1()": [
        337,
        354
      ],
      "UserInfoDataTest::::testSetId_1()": [
        363,
        380
      ],
      "UserInfoDataTest::::testSetLast_name_1()": [
        389,
        406
      ],
      "UserInfoDataTest::::testSetProfilePicture_1()": [
        415,
        432
      ],
      "UserInfoDataTest::::testSetUsername_1()": [
        441,
        458
      ],
      "UserInfoDataTest::::testSetWebsite_1()": [
        467,
        484
      ]
    },
    "reverse_method_lines_dic": {
      "36": "UserInfoData::::getUsername()",
      "37": "UserInfoData::::getUsername()",
      "38": "UserInfoData::::getUsername()",
      "40": "UserInfoData::::setUsername(java.lang.String)",
      "41": "UserInfoData::::setUsername(java.lang.String)",
      "42": "UserInfoData::::setUsername(java.lang.String)",
      "44": "UserInfoData::::getId()",
      "45": "UserInfoData::::getId()",
      "46": "UserInfoData::::getId()",
      "48": "UserInfoData::::setId(java.lang.String)",
      "49": "UserInfoData::::setId(java.lang.String)",
      "50": "UserInfoData::::setId(java.lang.String)",
      "52": "UserInfoData::::getLastName()",
      "53": "UserInfoData::::getLastName()",
      "54": "UserInfoData::::getLastName()",
      "56": "UserInfoData::::setLast_name(java.lang.String)",
      "57": "UserInfoData::::setLast_name(java.lang.String)",
      "58": "UserInfoData::::setLast_name(java.lang.String)",
      "60": "UserInfoData::::getFirstName()",
      "61": "UserInfoData::::getFirstName()",
      "62": "UserInfoData::::getFirstName()",
      "64": "UserInfoData::::setFirstName(java.lang.String)",
      "65": "UserInfoData::::setFirstName(java.lang.String)",
      "66": "UserInfoData::::setFirstName(java.lang.String)",
      "68": "UserInfoData::::getProfilePicture()",
      "69": "UserInfoData::::getProfilePicture()",
      "70": "UserInfoData::::getProfilePicture()",
      "72": "UserInfoData::::setProfilePicture(java.lang.String)",
      "73": "UserInfoData::::setProfilePicture(java.lang.String)",
      "74": "UserInfoData::::setProfilePicture(java.lang.String)",
      "76": "UserInfoData::::getBio()",
      "77": "UserInfoData::::getBio()",
      "78": "UserInfoData::::getBio()",
      "80": "UserInfoData::::setBio(java.lang.String)",
      "81": "UserInfoData::::setBio(java.lang.String)",
      "82": "UserInfoData::::setBio(java.lang.String)",
      "84": "UserInfoData::::getWebsite()",
      "85": "UserInfoData::::getWebsite()",
      "86": "UserInfoData::::getWebsite()",
      "88": "UserInfoData::::setWebsite(java.lang.String)",
      "89": "UserInfoData::::setWebsite(java.lang.String)",
      "90": "UserInfoData::::setWebsite(java.lang.String)",
      "92": "UserInfoData::::getCounts()",
      "93": "UserInfoData::::getCounts()",
      "94": "UserInfoData::::getCounts()",
      "96": "UserInfoData::::setCounts(org.jinstagram.entity.users.basicinfo.Counts)",
      "97": "UserInfoData::::setCounts(org.jinstagram.entity.users.basicinfo.Counts)",
      "98": "UserInfoData::::setCounts(org.jinstagram.entity.users.basicinfo.Counts)",
      "100": "UserInfoData::::getFullName()",
      "101": "UserInfoData::::getFullName()",
      "102": "UserInfoData::::getFullName()",
      "104": "UserInfoData::::setFullName(java.lang.String)",
      "105": "UserInfoData::::setFullName(java.lang.String)",
      "106": "UserInfoData::::setFullName(java.lang.String)",
      "108": "UserInfoData::::isBusiness()",
      "109": "UserInfoData::::isBusiness()",
      "110": "UserInfoData::::isBusiness()",
      "112": "UserInfoData::::setBusiness(boolean)",
      "113": "UserInfoData::::setBusiness(boolean)",
      "114": "UserInfoData::::setBusiness(boolean)",
      "116": "UserInfoData::::toString()",
      "117": "UserInfoData::::toString()",
      "118": "UserInfoData::::toString()",
      "119": "UserInfoData::::toString()",
      "120": "UserInfoData::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "21": "UserInfoDataTest::::testGetBio_1()",
      "22": "UserInfoDataTest::::testGetBio_1()",
      "23": "UserInfoDataTest::::testGetBio_1()",
      "24": "UserInfoDataTest::::testGetBio_1()",
      "25": "UserInfoDataTest::::testGetBio_1()",
      "26": "UserInfoDataTest::::testGetBio_1()",
      "27": "UserInfoDataTest::::testGetBio_1()",
      "28": "UserInfoDataTest::::testGetBio_1()",
      "29": "UserInfoDataTest::::testGetBio_1()",
      "30": "UserInfoDataTest::::testGetBio_1()",
      "31": "UserInfoDataTest::::testGetBio_1()",
      "32": "UserInfoDataTest::::testGetBio_1()",
      "33": "UserInfoDataTest::::testGetBio_1()",
      "34": "UserInfoDataTest::::testGetBio_1()",
      "35": "UserInfoDataTest::::testGetBio_1()",
      "36": "UserInfoDataTest::::testGetBio_1()",
      "37": "UserInfoDataTest::::testGetBio_1()",
      "38": "UserInfoDataTest::::testGetBio_1()",
      "47": "UserInfoDataTest::::testGetCounts_1()",
      "48": "UserInfoDataTest::::testGetCounts_1()",
      "49": "UserInfoDataTest::::testGetCounts_1()",
      "50": "UserInfoDataTest::::testGetCounts_1()",
      "51": "UserInfoDataTest::::testGetCounts_1()",
      "52": "UserInfoDataTest::::testGetCounts_1()",
      "53": "UserInfoDataTest::::testGetCounts_1()",
      "54": "UserInfoDataTest::::testGetCounts_1()",
      "55": "UserInfoDataTest::::testGetCounts_1()",
      "56": "UserInfoDataTest::::testGetCounts_1()",
      "57": "UserInfoDataTest::::testGetCounts_1()",
      "58": "UserInfoDataTest::::testGetCounts_1()",
      "59": "UserInfoDataTest::::testGetCounts_1()",
      "60": "UserInfoDataTest::::testGetCounts_1()",
      "61": "UserInfoDataTest::::testGetCounts_1()",
      "62": "UserInfoDataTest::::testGetCounts_1()",
      "63": "UserInfoDataTest::::testGetCounts_1()",
      "64": "UserInfoDataTest::::testGetCounts_1()",
      "65": "UserInfoDataTest::::testGetCounts_1()",
      "66": "UserInfoDataTest::::testGetCounts_1()",
      "67": "UserInfoDataTest::::testGetCounts_1()",
      "68": "UserInfoDataTest::::testGetCounts_1()",
      "77": "UserInfoDataTest::::testGetFirstName_1()",
      "78": "UserInfoDataTest::::testGetFirstName_1()",
      "79": "UserInfoDataTest::::testGetFirstName_1()",
      "80": "UserInfoDataTest::::testGetFirstName_1()",
      "81": "UserInfoDataTest::::testGetFirstName_1()",
      "82": "UserInfoDataTest::::testGetFirstName_1()",
      "83": "UserInfoDataTest::::testGetFirstName_1()",
      "84": "UserInfoDataTest::::testGetFirstName_1()",
      "85": "UserInfoDataTest::::testGetFirstName_1()",
      "86": "UserInfoDataTest::::testGetFirstName_1()",
      "87": "UserInfoDataTest::::testGetFirstName_1()",
      "88": "UserInfoDataTest::::testGetFirstName_1()",
      "89": "UserInfoDataTest::::testGetFirstName_1()",
      "90": "UserInfoDataTest::::testGetFirstName_1()",
      "91": "UserInfoDataTest::::testGetFirstName_1()",
      "92": "UserInfoDataTest::::testGetFirstName_1()",
      "93": "UserInfoDataTest::::testGetFirstName_1()",
      "94": "UserInfoDataTest::::testGetFirstName_1()",
      "103": "UserInfoDataTest::::testGetFullName_1()",
      "104": "UserInfoDataTest::::testGetFullName_1()",
      "105": "UserInfoDataTest::::testGetFullName_1()",
      "106": "UserInfoDataTest::::testGetFullName_1()",
      "107": "UserInfoDataTest::::testGetFullName_1()",
      "108": "UserInfoDataTest::::testGetFullName_1()",
      "109": "UserInfoDataTest::::testGetFullName_1()",
      "110": "UserInfoDataTest::::testGetFullName_1()",
      "111": "UserInfoDataTest::::testGetFullName_1()",
      "112": "UserInfoDataTest::::testGetFullName_1()",
      "113": "UserInfoDataTest::::testGetFullName_1()",
      "114": "UserInfoDataTest::::testGetFullName_1()",
      "115": "UserInfoDataTest::::testGetFullName_1()",
      "116": "UserInfoDataTest::::testGetFullName_1()",
      "117": "UserInfoDataTest::::testGetFullName_1()",
      "118": "UserInfoDataTest::::testGetFullName_1()",
      "119": "UserInfoDataTest::::testGetFullName_1()",
      "120": "UserInfoDataTest::::testGetFullName_1()",
      "129": "UserInfoDataTest::::testGetId_1()",
      "130": "UserInfoDataTest::::testGetId_1()",
      "131": "UserInfoDataTest::::testGetId_1()",
      "132": "UserInfoDataTest::::testGetId_1()",
      "133": "UserInfoDataTest::::testGetId_1()",
      "134": "UserInfoDataTest::::testGetId_1()",
      "135": "UserInfoDataTest::::testGetId_1()",
      "136": "UserInfoDataTest::::testGetId_1()",
      "137": "UserInfoDataTest::::testGetId_1()",
      "138": "UserInfoDataTest::::testGetId_1()",
      "139": "UserInfoDataTest::::testGetId_1()",
      "140": "UserInfoDataTest::::testGetId_1()",
      "141": "UserInfoDataTest::::testGetId_1()",
      "142": "UserInfoDataTest::::testGetId_1()",
      "143": "UserInfoDataTest::::testGetId_1()",
      "144": "UserInfoDataTest::::testGetId_1()",
      "145": "UserInfoDataTest::::testGetId_1()",
      "146": "UserInfoDataTest::::testGetId_1()",
      "155": "UserInfoDataTest::::testGetLastName_1()",
      "156": "UserInfoDataTest::::testGetLastName_1()",
      "157": "UserInfoDataTest::::testGetLastName_1()",
      "158": "UserInfoDataTest::::testGetLastName_1()",
      "159": "UserInfoDataTest::::testGetLastName_1()",
      "160": "UserInfoDataTest::::testGetLastName_1()",
      "161": "UserInfoDataTest::::testGetLastName_1()",
      "162": "UserInfoDataTest::::testGetLastName_1()",
      "163": "UserInfoDataTest::::testGetLastName_1()",
      "164": "UserInfoDataTest::::testGetLastName_1()",
      "165": "UserInfoDataTest::::testGetLastName_1()",
      "166": "UserInfoDataTest::::testGetLastName_1()",
      "167": "UserInfoDataTest::::testGetLastName_1()",
      "168": "UserInfoDataTest::::testGetLastName_1()",
      "169": "UserInfoDataTest::::testGetLastName_1()",
      "170": "UserInfoDataTest::::testGetLastName_1()",
      "171": "UserInfoDataTest::::testGetLastName_1()",
      "172": "UserInfoDataTest::::testGetLastName_1()",
      "181": "UserInfoDataTest::::testGetProfilePicture_1()",
      "182": "UserInfoDataTest::::testGetProfilePicture_1()",
      "183": "UserInfoDataTest::::testGetProfilePicture_1()",
      "184": "UserInfoDataTest::::testGetProfilePicture_1()",
      "185": "UserInfoDataTest::::testGetProfilePicture_1()",
      "186": "UserInfoDataTest::::testGetProfilePicture_1()",
      "187": "UserInfoDataTest::::testGetProfilePicture_1()",
      "188": "UserInfoDataTest::::testGetProfilePicture_1()",
      "189": "UserInfoDataTest::::testGetProfilePicture_1()",
      "190": "UserInfoDataTest::::testGetProfilePicture_1()",
      "191": "UserInfoDataTest::::testGetProfilePicture_1()",
      "192": "UserInfoDataTest::::testGetProfilePicture_1()",
      "193": "UserInfoDataTest::::testGetProfilePicture_1()",
      "194": "UserInfoDataTest::::testGetProfilePicture_1()",
      "195": "UserInfoDataTest::::testGetProfilePicture_1()",
      "196": "UserInfoDataTest::::testGetProfilePicture_1()",
      "197": "UserInfoDataTest::::testGetProfilePicture_1()",
      "198": "UserInfoDataTest::::testGetProfilePicture_1()",
      "207": "UserInfoDataTest::::testGetUsername_1()",
      "208": "UserInfoDataTest::::testGetUsername_1()",
      "209": "UserInfoDataTest::::testGetUsername_1()",
      "210": "UserInfoDataTest::::testGetUsername_1()",
      "211": "UserInfoDataTest::::testGetUsername_1()",
      "212": "UserInfoDataTest::::testGetUsername_1()",
      "213": "UserInfoDataTest::::testGetUsername_1()",
      "214": "UserInfoDataTest::::testGetUsername_1()",
      "215": "UserInfoDataTest::::testGetUsername_1()",
      "216": "UserInfoDataTest::::testGetUsername_1()",
      "217": "UserInfoDataTest::::testGetUsername_1()",
      "218": "UserInfoDataTest::::testGetUsername_1()",
      "219": "UserInfoDataTest::::testGetUsername_1()",
      "220": "UserInfoDataTest::::testGetUsername_1()",
      "221": "UserInfoDataTest::::testGetUsername_1()",
      "222": "UserInfoDataTest::::testGetUsername_1()",
      "223": "UserInfoDataTest::::testGetUsername_1()",
      "224": "UserInfoDataTest::::testGetUsername_1()",
      "233": "UserInfoDataTest::::testGetWebsite_1()",
      "234": "UserInfoDataTest::::testGetWebsite_1()",
      "235": "UserInfoDataTest::::testGetWebsite_1()",
      "236": "UserInfoDataTest::::testGetWebsite_1()",
      "237": "UserInfoDataTest::::testGetWebsite_1()",
      "238": "UserInfoDataTest::::testGetWebsite_1()",
      "239": "UserInfoDataTest::::testGetWebsite_1()",
      "240": "UserInfoDataTest::::testGetWebsite_1()",
      "241": "UserInfoDataTest::::testGetWebsite_1()",
      "242": "UserInfoDataTest::::testGetWebsite_1()",
      "243": "UserInfoDataTest::::testGetWebsite_1()",
      "244": "UserInfoDataTest::::testGetWebsite_1()",
      "245": "UserInfoDataTest::::testGetWebsite_1()",
      "246": "UserInfoDataTest::::testGetWebsite_1()",
      "247": "UserInfoDataTest::::testGetWebsite_1()",
      "248": "UserInfoDataTest::::testGetWebsite_1()",
      "249": "UserInfoDataTest::::testGetWebsite_1()",
      "250": "UserInfoDataTest::::testGetWebsite_1()",
      "259": "UserInfoDataTest::::testSetBio_1()",
      "260": "UserInfoDataTest::::testSetBio_1()",
      "261": "UserInfoDataTest::::testSetBio_1()",
      "262": "UserInfoDataTest::::testSetBio_1()",
      "263": "UserInfoDataTest::::testSetBio_1()",
      "264": "UserInfoDataTest::::testSetBio_1()",
      "265": "UserInfoDataTest::::testSetBio_1()",
      "266": "UserInfoDataTest::::testSetBio_1()",
      "267": "UserInfoDataTest::::testSetBio_1()",
      "268": "UserInfoDataTest::::testSetBio_1()",
      "269": "UserInfoDataTest::::testSetBio_1()",
      "270": "UserInfoDataTest::::testSetBio_1()",
      "271": "UserInfoDataTest::::testSetBio_1()",
      "272": "UserInfoDataTest::::testSetBio_1()",
      "273": "UserInfoDataTest::::testSetBio_1()",
      "274": "UserInfoDataTest::::testSetBio_1()",
      "275": "UserInfoDataTest::::testSetBio_1()",
      "276": "UserInfoDataTest::::testSetBio_1()",
      "285": "UserInfoDataTest::::testSetCounts_1()",
      "286": "UserInfoDataTest::::testSetCounts_1()",
      "287": "UserInfoDataTest::::testSetCounts_1()",
      "288": "UserInfoDataTest::::testSetCounts_1()",
      "289": "UserInfoDataTest::::testSetCounts_1()",
      "290": "UserInfoDataTest::::testSetCounts_1()",
      "291": "UserInfoDataTest::::testSetCounts_1()",
      "292": "UserInfoDataTest::::testSetCounts_1()",
      "293": "UserInfoDataTest::::testSetCounts_1()",
      "294": "UserInfoDataTest::::testSetCounts_1()",
      "295": "UserInfoDataTest::::testSetCounts_1()",
      "296": "UserInfoDataTest::::testSetCounts_1()",
      "297": "UserInfoDataTest::::testSetCounts_1()",
      "298": "UserInfoDataTest::::testSetCounts_1()",
      "299": "UserInfoDataTest::::testSetCounts_1()",
      "300": "UserInfoDataTest::::testSetCounts_1()",
      "301": "UserInfoDataTest::::testSetCounts_1()",
      "302": "UserInfoDataTest::::testSetCounts_1()",
      "311": "UserInfoDataTest::::testSetFirstName_1()",
      "312": "UserInfoDataTest::::testSetFirstName_1()",
      "313": "UserInfoDataTest::::testSetFirstName_1()",
      "314": "UserInfoDataTest::::testSetFirstName_1()",
      "315": "UserInfoDataTest::::testSetFirstName_1()",
      "316": "UserInfoDataTest::::testSetFirstName_1()",
      "317": "UserInfoDataTest::::testSetFirstName_1()",
      "318": "UserInfoDataTest::::testSetFirstName_1()",
      "319": "UserInfoDataTest::::testSetFirstName_1()",
      "320": "UserInfoDataTest::::testSetFirstName_1()",
      "321": "UserInfoDataTest::::testSetFirstName_1()",
      "322": "UserInfoDataTest::::testSetFirstName_1()",
      "323": "UserInfoDataTest::::testSetFirstName_1()",
      "324": "UserInfoDataTest::::testSetFirstName_1()",
      "325": "UserInfoDataTest::::testSetFirstName_1()",
      "326": "UserInfoDataTest::::testSetFirstName_1()",
      "327": "UserInfoDataTest::::testSetFirstName_1()",
      "328": "UserInfoDataTest::::testSetFirstName_1()",
      "337": "UserInfoDataTest::::testSetFullName_1()",
      "338": "UserInfoDataTest::::testSetFullName_1()",
      "339": "UserInfoDataTest::::testSetFullName_1()",
      "340": "UserInfoDataTest::::testSetFullName_1()",
      "341": "UserInfoDataTest::::testSetFullName_1()",
      "342": "UserInfoDataTest::::testSetFullName_1()",
      "343": "UserInfoDataTest::::testSetFullName_1()",
      "344": "UserInfoDataTest::::testSetFullName_1()",
      "345": "UserInfoDataTest::::testSetFullName_1()",
      "346": "UserInfoDataTest::::testSetFullName_1()",
      "347": "UserInfoDataTest::::testSetFullName_1()",
      "348": "UserInfoDataTest::::testSetFullName_1()",
      "349": "UserInfoDataTest::::testSetFullName_1()",
      "350": "UserInfoDataTest::::testSetFullName_1()",
      "351": "UserInfoDataTest::::testSetFullName_1()",
      "352": "UserInfoDataTest::::testSetFullName_1()",
      "353": "UserInfoDataTest::::testSetFullName_1()",
      "354": "UserInfoDataTest::::testSetFullName_1()",
      "363": "UserInfoDataTest::::testSetId_1()",
      "364": "UserInfoDataTest::::testSetId_1()",
      "365": "UserInfoDataTest::::testSetId_1()",
      "366": "UserInfoDataTest::::testSetId_1()",
      "367": "UserInfoDataTest::::testSetId_1()",
      "368": "UserInfoDataTest::::testSetId_1()",
      "369": "UserInfoDataTest::::testSetId_1()",
      "370": "UserInfoDataTest::::testSetId_1()",
      "371": "UserInfoDataTest::::testSetId_1()",
      "372": "UserInfoDataTest::::testSetId_1()",
      "373": "UserInfoDataTest::::testSetId_1()",
      "374": "UserInfoDataTest::::testSetId_1()",
      "375": "UserInfoDataTest::::testSetId_1()",
      "376": "UserInfoDataTest::::testSetId_1()",
      "377": "UserInfoDataTest::::testSetId_1()",
      "378": "UserInfoDataTest::::testSetId_1()",
      "379": "UserInfoDataTest::::testSetId_1()",
      "380": "UserInfoDataTest::::testSetId_1()",
      "389": "UserInfoDataTest::::testSetLast_name_1()",
      "390": "UserInfoDataTest::::testSetLast_name_1()",
      "391": "UserInfoDataTest::::testSetLast_name_1()",
      "392": "UserInfoDataTest::::testSetLast_name_1()",
      "393": "UserInfoDataTest::::testSetLast_name_1()",
      "394": "UserInfoDataTest::::testSetLast_name_1()",
      "395": "UserInfoDataTest::::testSetLast_name_1()",
      "396": "UserInfoDataTest::::testSetLast_name_1()",
      "397": "UserInfoDataTest::::testSetLast_name_1()",
      "398": "UserInfoDataTest::::testSetLast_name_1()",
      "399": "UserInfoDataTest::::testSetLast_name_1()",
      "400": "UserInfoDataTest::::testSetLast_name_1()",
      "401": "UserInfoDataTest::::testSetLast_name_1()",
      "402": "UserInfoDataTest::::testSetLast_name_1()",
      "403": "UserInfoDataTest::::testSetLast_name_1()",
      "404": "UserInfoDataTest::::testSetLast_name_1()",
      "405": "UserInfoDataTest::::testSetLast_name_1()",
      "406": "UserInfoDataTest::::testSetLast_name_1()",
      "415": "UserInfoDataTest::::testSetProfilePicture_1()",
      "416": "UserInfoDataTest::::testSetProfilePicture_1()",
      "417": "UserInfoDataTest::::testSetProfilePicture_1()",
      "418": "UserInfoDataTest::::testSetProfilePicture_1()",
      "419": "UserInfoDataTest::::testSetProfilePicture_1()",
      "420": "UserInfoDataTest::::testSetProfilePicture_1()",
      "421": "UserInfoDataTest::::testSetProfilePicture_1()",
      "422": "UserInfoDataTest::::testSetProfilePicture_1()",
      "423": "UserInfoDataTest::::testSetProfilePicture_1()",
      "424": "UserInfoDataTest::::testSetProfilePicture_1()",
      "425": "UserInfoDataTest::::testSetProfilePicture_1()",
      "426": "UserInfoDataTest::::testSetProfilePicture_1()",
      "427": "UserInfoDataTest::::testSetProfilePicture_1()",
      "428": "UserInfoDataTest::::testSetProfilePicture_1()",
      "429": "UserInfoDataTest::::testSetProfilePicture_1()",
      "430": "UserInfoDataTest::::testSetProfilePicture_1()",
      "431": "UserInfoDataTest::::testSetProfilePicture_1()",
      "432": "UserInfoDataTest::::testSetProfilePicture_1()",
      "441": "UserInfoDataTest::::testSetUsername_1()",
      "442": "UserInfoDataTest::::testSetUsername_1()",
      "443": "UserInfoDataTest::::testSetUsername_1()",
      "444": "UserInfoDataTest::::testSetUsername_1()",
      "445": "UserInfoDataTest::::testSetUsername_1()",
      "446": "UserInfoDataTest::::testSetUsername_1()",
      "447": "UserInfoDataTest::::testSetUsername_1()",
      "448": "UserInfoDataTest::::testSetUsername_1()",
      "449": "UserInfoDataTest::::testSetUsername_1()",
      "450": "UserInfoDataTest::::testSetUsername_1()",
      "451": "UserInfoDataTest::::testSetUsername_1()",
      "452": "UserInfoDataTest::::testSetUsername_1()",
      "453": "UserInfoDataTest::::testSetUsername_1()",
      "454": "UserInfoDataTest::::testSetUsername_1()",
      "455": "UserInfoDataTest::::testSetUsername_1()",
      "456": "UserInfoDataTest::::testSetUsername_1()",
      "457": "UserInfoDataTest::::testSetUsername_1()",
      "458": "UserInfoDataTest::::testSetUsername_1()",
      "467": "UserInfoDataTest::::testSetWebsite_1()",
      "468": "UserInfoDataTest::::testSetWebsite_1()",
      "469": "UserInfoDataTest::::testSetWebsite_1()",
      "470": "UserInfoDataTest::::testSetWebsite_1()",
      "471": "UserInfoDataTest::::testSetWebsite_1()",
      "472": "UserInfoDataTest::::testSetWebsite_1()",
      "473": "UserInfoDataTest::::testSetWebsite_1()",
      "474": "UserInfoDataTest::::testSetWebsite_1()",
      "475": "UserInfoDataTest::::testSetWebsite_1()",
      "476": "UserInfoDataTest::::testSetWebsite_1()",
      "477": "UserInfoDataTest::::testSetWebsite_1()",
      "478": "UserInfoDataTest::::testSetWebsite_1()",
      "479": "UserInfoDataTest::::testSetWebsite_1()",
      "480": "UserInfoDataTest::::testSetWebsite_1()",
      "481": "UserInfoDataTest::::testSetWebsite_1()",
      "482": "UserInfoDataTest::::testSetWebsite_1()",
      "483": "UserInfoDataTest::::testSetWebsite_1()",
      "484": "UserInfoDataTest::::testSetWebsite_1()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          38
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          77,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::getBio()"
      },
      {
        "test_lines": [
          47,
          68
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          93,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::getCounts()"
      },
      {
        "test_lines": [
          77,
          94
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          61,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::getFirstName()"
      },
      {
        "test_lines": [
          103,
          120
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          101,
          105,
          106
        ],
        "label": "UserInfoData::::getFullName()"
      },
      {
        "test_lines": [
          129,
          146
        ],
        "covered_lines": [
          5,
          41,
          42,
          45,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::getId()"
      },
      {
        "test_lines": [
          155,
          172
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          53,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::getLastName()"
      },
      {
        "test_lines": [
          181,
          198
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          69,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::getProfilePicture()"
      },
      {
        "test_lines": [
          207,
          224
        ],
        "covered_lines": [
          5,
          37,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::getUsername()"
      },
      {
        "test_lines": [
          233,
          250
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          85,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::getWebsite()"
      },
      {
        "test_lines": [
          259,
          276
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::setBio(java.lang.String)"
      },
      {
        "test_lines": [
          285,
          302
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::setCounts(org.jinstagram.entity.users.basicinfo.Counts)"
      },
      {
        "test_lines": [
          311,
          328
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::setFirstName(java.lang.String)"
      },
      {
        "test_lines": [
          337,
          354
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::setFullName(java.lang.String)"
      },
      {
        "test_lines": [
          363,
          380
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::setId(java.lang.String)"
      },
      {
        "test_lines": [
          389,
          406
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::setLast_name(java.lang.String)"
      },
      {
        "test_lines": [
          415,
          432
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::setProfilePicture(java.lang.String)"
      },
      {
        "test_lines": [
          441,
          458
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::setUsername(java.lang.String)"
      },
      {
        "test_lines": [
          467,
          484
        ],
        "covered_lines": [
          5,
          41,
          42,
          49,
          50,
          57,
          58,
          65,
          66,
          73,
          74,
          81,
          82,
          89,
          90,
          97,
          98,
          105,
          106
        ],
        "label": "UserInfoData::::setWebsite(java.lang.String)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/auth/InstagramApi.java": {
    "class_content": [
      "package org.jinstagram.auth;\n",
      "\n",
      "import static org.jinstagram.http.URLUtils.formURLEncode;\n",
      "\n",
      "import org.apache.commons.lang3.StringUtils;\n",
      "import org.jinstagram.auth.exceptions.OAuthException;\n",
      "import org.jinstagram.auth.model.Constants;\n",
      "import org.jinstagram.auth.model.OAuthConfig;\n",
      "import org.jinstagram.auth.model.Token;\n",
      "import org.jinstagram.auth.oauth.InstagramService;\n",
      "import org.jinstagram.http.Verbs;\n",
      "import org.jinstagram.utils.Preconditions;\n",
      "\n",
      "import com.google.gson.JsonObject;\n",
      "import com.google.gson.JsonParseException;\n",
      "import com.google.gson.JsonParser;\n",
      "\n",
      "public class InstagramApi {\n",
      "\tpublic String getAccessTokenEndpoint() {\n",
      "\t\treturn Constants.ACCESS_TOKEN_ENDPOINT;\n",
      "\t}\n",
      "\n",
      "\tpublic Verbs getAccessTokenVerb() {\n",
      "\t\treturn Verbs.POST;\n",
      "\t}\n",
      "\n",
      "\tpublic String getAuthorizationUrl(OAuthConfig config) {\n",
      "\t\tPreconditions.checkValidUrl(config.getCallback(),\n",
      "\t\t\t\t\"Must provide a valid url as callback. Instagram does not support OOB\");\n",
      "\n",
      "\t\t// Append scope if present\n",
      "\t\tif (config.hasScope()) {\n",
      "\t\t\treturn String.format(Constants.SCOPED_AUTHORIZE_URL, config.getApiKey(),\n",
      "\t\t\t\t\tformURLEncode(config.getCallback()), config.getScope());\n",
      "\t\t} else {\n",
      "\t\t\treturn String.format(Constants.AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()));\n",
      "\t\t}\n",
      "\t}\n",
      "\n",
      "\tpublic AccessTokenExtractor getAccessTokenExtractor() {\n",
      "\t\treturn new AccessTokenExtractor() {\n",
      "\t\t\t@Override\n",
      "\t\t\tpublic Token extract(String response) {\n",
      "\t\t\t\tPreconditions.checkEmptyString(response, \"Cannot extract a token from a null or empty String\");\n",
      "\n",
      "\t\t\t\ttry {\n",
      "\t\t\t\t\tJsonParser parser = new JsonParser();\n",
      "\t\t\t\t\tJsonObject obj = parser.parse(response).getAsJsonObject();\n",
      "\t\t\t\t\tString token = null;\n",
      "\n",
      "\t\t\t\t\tif(obj.has(\"access_token\")) {\n",
      "\t\t\t\t\t\ttoken = obj.get(\"access_token\").getAsString();\n",
      "\t\t\t\t\t}\n",
      "\n",
      "\t\t\t\t\tif(StringUtils.isEmpty(token)) {\n",
      "\t\t\t\t\t\tthrow new OAuthException(\"Cannot extract an access token. Response was: \" + response);\n",
      "\t\t\t\t\t}\n",
      "\t\t\t\t\treturn new Token(token, \"\", response);\n",
      "\t\t\t\t} catch(JsonParseException e) {\n",
      "\t\t\t\t\tthrow new OAuthException(\"Cannot extract an access token. Response was: \" + response);\n",
      "\t\t\t\t}\n",
      "\t\t\t}\n",
      "\t\t};\n",
      "\t}\n",
      "\n",
      "\tpublic InstagramService createService(OAuthConfig config) {\n",
      "\t\treturn new InstagramService(this, config);\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.auth;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.jinstagram.auth.model.OAuthConfig;\n",
      "import org.jinstagram.auth.oauth.InstagramService;\n",
      "import org.jinstagram.http.Verbs;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>InstagramApiTest</code> contains tests for the class\n",
      " * <code>{@link InstagramApi}</code>.\n",
      " * \n",
      " */\n",
      "public class InstagramApiTest {\n",
      "\t/**\n",
      "\t * Run the InstagramService createService(OAuthConfig) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testCreateService_1() throws Exception {\n",
      "\t\tInstagramApi fixture = new InstagramApi();\n",
      "\t\tOAuthConfig config = new OAuthConfig(\"\", \"\");\n",
      "\n",
      "\t\tInstagramService result = fixture.createService(config);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"1.0\", result.getVersion());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getAccessTokenEndpoint() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetAccessTokenEndpoint_1() throws Exception {\n",
      "\t\tInstagramApi fixture = new InstagramApi();\n",
      "\n",
      "\t\tString result = fixture.getAccessTokenEndpoint();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"https://api.instagram.com/oauth/access_token\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the AccessTokenExtractor getAccessTokenExtractor() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetAccessTokenExtractor_1() throws Exception {\n",
      "\t\tInstagramApi fixture = new InstagramApi();\n",
      "\n",
      "\t\tAccessTokenExtractor result = fixture.getAccessTokenExtractor();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Verbs getAccessTokenVerb() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetAccessTokenVerb_1() throws Exception {\n",
      "\t\tInstagramApi fixture = new InstagramApi();\n",
      "\n",
      "\t\tVerbs result = fixture.getAccessTokenVerb();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"POST\", result.name());\n",
      "\t\tassertEquals(\"POST\", result.toString());\n",
      "\t\tassertEquals(1, result.ordinal());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getAuthorizationUrl(OAuthConfig) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testGetAuthorizationUrl_1() throws Exception {\n",
      "\t\tInstagramApi fixture = new InstagramApi();\n",
      "\t\tOAuthConfig config = new OAuthConfig(\"\", \"\", \"\", \"\", \"\");\n",
      "\n",
      "\t\tString result = fixture.getAuthorizationUrl(config);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getAuthorizationUrl(OAuthConfig) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testGetAuthorizationUrl_2() throws Exception {\n",
      "\t\tInstagramApi fixture = new InstagramApi();\n",
      "\t\tOAuthConfig config = new OAuthConfig(\"\", \"\", \"\", \"\", \"\");\n",
      "\n",
      "\t\tString result = fixture.getAuthorizationUrl(config);\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\t\n",
      "\t/**\n",
      "\t * Run the String getAuthorizationUrl(OAuthConfig) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetAuthorizationUrlWithScope() throws Exception {\n",
      "\t\tInstagramApi fixture = new InstagramApi();\n",
      "\t\tOAuthConfig config = new OAuthConfig(\"dc5cb05605435cf4abaa5a1f17b7d457\", \"4c587a5ff4565989907177c11fda9999\", \"http://localhost\", \"likes+comments\");\n",
      "\t\tString result = fixture.getAuthorizationUrl(config);\n",
      "\t\tassertEquals(\"https://api.instagram.com/oauth/authorize/?client_id=dc5cb05605435cf4abaa5a1f17b7d457&redirect_uri=http%3A%2F%2Flocalhost&response_type=code&scope=likes+comments\",result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "InstagramApi::::getAccessTokenEndpoint()": [
        19,
        21
      ],
      "InstagramApi::::getAccessTokenVerb()": [
        23,
        25
      ],
      "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)": [
        27,
        38
      ],
      "InstagramApi::::getAccessTokenExtractor()": [
        40,
        64
      ],
      "InstagramApi::::createService(org.jinstagram.auth.model.OAuthConfig)": [
        66,
        68
      ]
    },
    "test_method_lines_dic": {
      "InstagramApiTest::::testCreateService_1()": [
        24,
        34
      ],
      "InstagramApiTest::::testGetAccessTokenEndpoint_1()": [
        43,
        51
      ],
      "InstagramApiTest::::testGetAccessTokenExtractor_1()": [
        60,
        68
      ],
      "InstagramApiTest::::testGetAccessTokenVerb_1()": [
        77,
        88
      ],
      "InstagramApiTest::::testGetAuthorizationUrl_1()": [
        97,
        105
      ],
      "InstagramApiTest::::testGetAuthorizationUrl_2()": [
        114,
        121
      ],
      "InstagramApiTest::::testGetAuthorizationUrlWithScope()": [
        130,
        136
      ]
    },
    "reverse_method_lines_dic": {
      "19": "InstagramApi::::getAccessTokenEndpoint()",
      "20": "InstagramApi::::getAccessTokenEndpoint()",
      "21": "InstagramApi::::getAccessTokenEndpoint()",
      "23": "InstagramApi::::getAccessTokenVerb()",
      "24": "InstagramApi::::getAccessTokenVerb()",
      "25": "InstagramApi::::getAccessTokenVerb()",
      "27": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "28": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "29": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "30": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "31": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "32": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "33": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "34": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "35": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "36": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "37": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "38": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)",
      "40": "InstagramApi::::getAccessTokenExtractor()",
      "41": "InstagramApi::::getAccessTokenExtractor()",
      "42": "InstagramApi::::getAccessTokenExtractor()",
      "43": "InstagramApi::::getAccessTokenExtractor()",
      "44": "InstagramApi::::getAccessTokenExtractor()",
      "45": "InstagramApi::::getAccessTokenExtractor()",
      "46": "InstagramApi::::getAccessTokenExtractor()",
      "47": "InstagramApi::::getAccessTokenExtractor()",
      "48": "InstagramApi::::getAccessTokenExtractor()",
      "49": "InstagramApi::::getAccessTokenExtractor()",
      "50": "InstagramApi::::getAccessTokenExtractor()",
      "51": "InstagramApi::::getAccessTokenExtractor()",
      "52": "InstagramApi::::getAccessTokenExtractor()",
      "53": "InstagramApi::::getAccessTokenExtractor()",
      "54": "InstagramApi::::getAccessTokenExtractor()",
      "55": "InstagramApi::::getAccessTokenExtractor()",
      "56": "InstagramApi::::getAccessTokenExtractor()",
      "57": "InstagramApi::::getAccessTokenExtractor()",
      "58": "InstagramApi::::getAccessTokenExtractor()",
      "59": "InstagramApi::::getAccessTokenExtractor()",
      "60": "InstagramApi::::getAccessTokenExtractor()",
      "61": "InstagramApi::::getAccessTokenExtractor()",
      "62": "InstagramApi::::getAccessTokenExtractor()",
      "63": "InstagramApi::::getAccessTokenExtractor()",
      "64": "InstagramApi::::getAccessTokenExtractor()",
      "66": "InstagramApi::::createService(org.jinstagram.auth.model.OAuthConfig)",
      "67": "InstagramApi::::createService(org.jinstagram.auth.model.OAuthConfig)",
      "68": "InstagramApi::::createService(org.jinstagram.auth.model.OAuthConfig)"
    },
    "test_reverse_method_lines_dic": {
      "24": "InstagramApiTest::::testCreateService_1()",
      "25": "InstagramApiTest::::testCreateService_1()",
      "26": "InstagramApiTest::::testCreateService_1()",
      "27": "InstagramApiTest::::testCreateService_1()",
      "28": "InstagramApiTest::::testCreateService_1()",
      "29": "InstagramApiTest::::testCreateService_1()",
      "30": "InstagramApiTest::::testCreateService_1()",
      "31": "InstagramApiTest::::testCreateService_1()",
      "32": "InstagramApiTest::::testCreateService_1()",
      "33": "InstagramApiTest::::testCreateService_1()",
      "34": "InstagramApiTest::::testCreateService_1()",
      "43": "InstagramApiTest::::testGetAccessTokenEndpoint_1()",
      "44": "InstagramApiTest::::testGetAccessTokenEndpoint_1()",
      "45": "InstagramApiTest::::testGetAccessTokenEndpoint_1()",
      "46": "InstagramApiTest::::testGetAccessTokenEndpoint_1()",
      "47": "InstagramApiTest::::testGetAccessTokenEndpoint_1()",
      "48": "InstagramApiTest::::testGetAccessTokenEndpoint_1()",
      "49": "InstagramApiTest::::testGetAccessTokenEndpoint_1()",
      "50": "InstagramApiTest::::testGetAccessTokenEndpoint_1()",
      "51": "InstagramApiTest::::testGetAccessTokenEndpoint_1()",
      "60": "InstagramApiTest::::testGetAccessTokenExtractor_1()",
      "61": "InstagramApiTest::::testGetAccessTokenExtractor_1()",
      "62": "InstagramApiTest::::testGetAccessTokenExtractor_1()",
      "63": "InstagramApiTest::::testGetAccessTokenExtractor_1()",
      "64": "InstagramApiTest::::testGetAccessTokenExtractor_1()",
      "65": "InstagramApiTest::::testGetAccessTokenExtractor_1()",
      "66": "InstagramApiTest::::testGetAccessTokenExtractor_1()",
      "67": "InstagramApiTest::::testGetAccessTokenExtractor_1()",
      "68": "InstagramApiTest::::testGetAccessTokenExtractor_1()",
      "77": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "78": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "79": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "80": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "81": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "82": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "83": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "84": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "85": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "86": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "87": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "88": "InstagramApiTest::::testGetAccessTokenVerb_1()",
      "97": "InstagramApiTest::::testGetAuthorizationUrl_1()",
      "98": "InstagramApiTest::::testGetAuthorizationUrl_1()",
      "99": "InstagramApiTest::::testGetAuthorizationUrl_1()",
      "100": "InstagramApiTest::::testGetAuthorizationUrl_1()",
      "101": "InstagramApiTest::::testGetAuthorizationUrl_1()",
      "102": "InstagramApiTest::::testGetAuthorizationUrl_1()",
      "103": "InstagramApiTest::::testGetAuthorizationUrl_1()",
      "104": "InstagramApiTest::::testGetAuthorizationUrl_1()",
      "105": "InstagramApiTest::::testGetAuthorizationUrl_1()",
      "114": "InstagramApiTest::::testGetAuthorizationUrl_2()",
      "115": "InstagramApiTest::::testGetAuthorizationUrl_2()",
      "116": "InstagramApiTest::::testGetAuthorizationUrl_2()",
      "117": "InstagramApiTest::::testGetAuthorizationUrl_2()",
      "118": "InstagramApiTest::::testGetAuthorizationUrl_2()",
      "119": "InstagramApiTest::::testGetAuthorizationUrl_2()",
      "120": "InstagramApiTest::::testGetAuthorizationUrl_2()",
      "121": "InstagramApiTest::::testGetAuthorizationUrl_2()",
      "130": "InstagramApiTest::::testGetAuthorizationUrlWithScope()",
      "131": "InstagramApiTest::::testGetAuthorizationUrlWithScope()",
      "132": "InstagramApiTest::::testGetAuthorizationUrlWithScope()",
      "133": "InstagramApiTest::::testGetAuthorizationUrlWithScope()",
      "134": "InstagramApiTest::::testGetAuthorizationUrlWithScope()",
      "135": "InstagramApiTest::::testGetAuthorizationUrlWithScope()",
      "136": "InstagramApiTest::::testGetAuthorizationUrlWithScope()"
    },
    "tests": [
      {
        "test_lines": [
          24,
          34
        ],
        "covered_lines": [
          18,
          67
        ],
        "label": "InstagramApi::::createService(org.jinstagram.auth.model.OAuthConfig)"
      },
      {
        "test_lines": [
          43,
          51
        ],
        "covered_lines": [
          18,
          20
        ],
        "label": "InstagramApi::::getAccessTokenEndpoint()"
      },
      {
        "test_lines": [
          60,
          68
        ],
        "covered_lines": [
          18,
          41
        ],
        "label": "InstagramApi::::getAccessTokenExtractor()"
      },
      {
        "test_lines": [
          77,
          88
        ],
        "covered_lines": [
          18,
          24
        ],
        "label": "InstagramApi::::getAccessTokenVerb()"
      },
      {
        "test_lines": [
          97,
          105
        ],
        "covered_lines": [
          18
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          114,
          121
        ],
        "covered_lines": [
          18
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          130,
          136
        ],
        "covered_lines": [
          18,
          28,
          32,
          33,
          34
        ],
        "label": "InstagramApi::::getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/auth/InstagramAuthService.java": {
    "class_content": [
      "package org.jinstagram.auth;\n",
      "\n",
      "import java.net.Proxy;\n",
      "\n",
      "import org.jinstagram.auth.model.OAuthConfig;\n",
      "import org.jinstagram.auth.model.OAuthConstants;\n",
      "import org.jinstagram.auth.oauth.InstagramService;\n",
      "import org.jinstagram.auth.oauth.OAuthService;\n",
      "import org.jinstagram.utils.Preconditions;\n",
      "\n",
      "public class InstagramAuthService {\n",
      "\tprivate String apiKey;\n",
      "\n",
      "\tprivate String apiSecret;\n",
      "\n",
      "\tprivate String callback;\n",
      "\n",
      "\tprivate String display;\n",
      "\n",
      "\tprivate String scope;\n",
      "\n",
      "\tprivate Proxy requestProxy;\n",
      "\n",
      "\t/**\n",
      "\t * Default constructor\n",
      "\t */\n",
      "\tpublic InstagramAuthService() {\n",
      "\t\tthis.callback = OAuthConstants.OUT_OF_BAND;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Adds an OAuth callback url\n",
      "\t * \n",
      "\t * @param callback callback url. Must be a valid url or 'oob' for out of\n",
      "\t * band OAuth\n",
      "\t * @return the {@link InstagramAuthService} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramAuthService callback(String callback) {\n",
      "\t\tPreconditions.checkValidOAuthCallback(callback, \"Callback must be a valid URL or 'oob'\");\n",
      "\n",
      "\t\tthis.callback = callback;\n",
      "\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configures the api key\n",
      "\t * \n",
      "\t * @param apiKey The api key for your application\n",
      "\t * @return the {@link InstagramAuthService} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramAuthService apiKey(String apiKey) {\n",
      "\t\tPreconditions.checkEmptyString(apiKey, \"Invalid Api key\");\n",
      "\n",
      "\t\tthis.apiKey = apiKey;\n",
      "\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configures the api secret\n",
      "\t * \n",
      "\t * @param apiSecret The api secret for your application\n",
      "\t * @return the {@link InstagramAuthService} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramAuthService apiSecret(String apiSecret) {\n",
      "\t\tPreconditions.checkEmptyString(apiSecret, \"Invalid Api secret\");\n",
      "\n",
      "\t\tthis.apiSecret = apiSecret;\n",
      "\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configures the OAuth scope. This is only necessary in some APIs (like\n",
      "\t * Google's).\n",
      "\t * \n",
      "\t * @param scope The OAuth scope\n",
      "\t * @return the {@link InstagramAuthService} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramAuthService scope(String scope) {\n",
      "\t\tPreconditions.checkEmptyString(scope, \"Invalid OAuth scope\");\n",
      "\n",
      "\t\tthis.scope = scope;\n",
      "\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configures the Display parameter ; if you want a mobile-optimized\n",
      "\t * authorization screen\n",
      "\t * \n",
      "\t * @param display The Display parameter for mobile devices\n",
      "\t * @return the {@link InstagramAuthService} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramAuthService display(String display) {\n",
      "\t\tPreconditions.checkEmptyString(display, \"Invalid Display scope\");\n",
      "\n",
      "\t\tthis.display = display;\n",
      "\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Configures the Display parameter ; if you want a mobile-optimized\n",
      "\t * authorization screen\n",
      "\t *\n",
      "\t * @param requestProxy The {@link Proxy} object to be used by the OAuthRequest\n",
      "\t * @return the {@link InstagramAuthService} instance for method chaining\n",
      "\t */\n",
      "\tpublic InstagramAuthService proxy(Proxy requestProxy) {\n",
      "\t\t//TODO Add Preconditions check here\n",
      "\n",
      "\t\tthis.requestProxy = requestProxy;\n",
      "\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Returns the fully configured {@link OAuthService}\n",
      "\t * \n",
      "\t * @return fully configured {@link OAuthService}\n",
      "\t */\n",
      "\tpublic InstagramService build() {\n",
      "\t\tInstagramApi api = new InstagramApi();\n",
      "\t\tOAuthConfig config;\n",
      "\n",
      "\t\tPreconditions.checkEmptyString(apiKey, \"You must provide an api key\");\n",
      "\t\tPreconditions.checkEmptyString(apiSecret, \"You must provide an api secret\");\n",
      "\n",
      "\t\tconfig = new OAuthConfig(apiKey, apiSecret, callback, scope, display);\n",
      "\n",
      "\t\tif (this.requestProxy != null) {\n",
      "\t\t\tconfig.setRequestProxy(this.requestProxy);\n",
      "\t\t}\n",
      "\n",
      "\t\treturn api.createService(config);\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.auth;\n",
      "\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.net.InetSocketAddress;\n",
      "import java.net.Proxy;\n",
      "\n",
      "import org.jinstagram.auth.oauth.InstagramService;\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>InstagramAuthServiceTest</code> contains tests for the class\n",
      " * <code>{@link InstagramAuthService}</code>.\n",
      " * \n",
      " */\n",
      "public class InstagramAuthServiceTest {\n",
      "\t/**\n",
      "\t * Run the InstagramAuthService() constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramAuthService() throws Exception {\n",
      "\n",
      "\t\tInstagramAuthService result = new InstagramAuthService();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramAuthService apiKey(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testApiKey() throws Exception {\n",
      "\t\tInstagramAuthService fixture = new InstagramAuthService();\n",
      "\t\tfixture.apiSecret(\"\");\n",
      "\t\tfixture.callback(\"\");\n",
      "\t\tfixture.scope(\"\");\n",
      "\t\tfixture.proxy(new Proxy(java.net.Proxy.Type.DIRECT, new InetSocketAddress(1)));\n",
      "\t\tfixture.apiKey(\"\");\n",
      "\t\tfixture.display(\"\");\n",
      "\t\tString apiKey = \"\";\n",
      "\n",
      "\t\tInstagramAuthService result = fixture.apiKey(apiKey);\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramAuthService apiSecret(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testApiSecret() throws Exception {\n",
      "\t\tInstagramAuthService fixture = new InstagramAuthService();\n",
      "\t\tfixture.apiSecret(\"\");\n",
      "\t\tfixture.callback(\"\");\n",
      "\t\tfixture.scope(\"\");\n",
      "\t\tfixture.proxy(new Proxy(java.net.Proxy.Type.DIRECT, new InetSocketAddress(1)));\n",
      "\t\tfixture.apiKey(\"\");\n",
      "\t\tfixture.display(\"\");\n",
      "\t\tString apiSecret = \"\";\n",
      "\n",
      "\t\tInstagramAuthService result = fixture.apiSecret(apiSecret);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: Invalid Api secret\n",
      "\t\t// at org.jinstagram.utils.Preconditions.check(Preconditions.java:116)\n",
      "\t\t// at\n",
      "\t\t// org.jinstagram.utils.Preconditions.checkEmptyString(Preconditions.java:48)\n",
      "\t\t// at\n",
      "\t\t// org.jinstagram.auth.InstagramAuthService.apiSecret(InstagramAuthService.java:67)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramService build() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testBuild() throws Exception {\n",
      "\t\tInstagramAuthService fixture = new InstagramAuthService();\n",
      "\t\tfixture.apiSecret(\"\");\n",
      "\t\tfixture.callback(\"\");\n",
      "\t\tfixture.scope(\"\");\n",
      "\t\tfixture.proxy(new Proxy(java.net.Proxy.Type.DIRECT, new InetSocketAddress(1)));\n",
      "\t\tfixture.apiKey(\"\");\n",
      "\t\tfixture.display(\"\");\n",
      "\n",
      "\t\tInstagramService result = fixture.build();\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramService build() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testBuild_2() throws Exception {\n",
      "\t\tInstagramAuthService fixture = new InstagramAuthService();\n",
      "\t\tfixture.apiSecret(\"\");\n",
      "\t\tfixture.callback(\"\");\n",
      "\t\tfixture.scope(\"\");\n",
      "\t\tfixture.proxy((Proxy) null);\n",
      "\t\tfixture.apiKey(\"\");\n",
      "\t\tfixture.display(\"\");\n",
      "\n",
      "\t\tInstagramService result = fixture.build();\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramAuthService callback(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testCallback() throws Exception {\n",
      "\t\tInstagramAuthService fixture = new InstagramAuthService();\n",
      "\t\tfixture.apiSecret(\"\");\n",
      "\t\tfixture.callback(\"\");\n",
      "\t\tfixture.scope(\"\");\n",
      "\t\tfixture.proxy(new Proxy(java.net.Proxy.Type.DIRECT, new InetSocketAddress(1)));\n",
      "\t\tfixture.apiKey(\"\");\n",
      "\t\tfixture.display(\"\");\n",
      "\t\tString callback = \"\";\n",
      "\n",
      "\t\tInstagramAuthService result = fixture.callback(callback);\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramAuthService display(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testDisplay() throws Exception {\n",
      "\t\tInstagramAuthService fixture = new InstagramAuthService();\n",
      "\t\tfixture.apiSecret(\"\");\n",
      "\t\tfixture.callback(\"\");\n",
      "\t\tfixture.scope(\"\");\n",
      "\t\tfixture.proxy(new Proxy(java.net.Proxy.Type.DIRECT, new InetSocketAddress(1)));\n",
      "\t\tfixture.apiKey(\"\");\n",
      "\t\tfixture.display(\"\");\n",
      "\t\tString display = \"\";\n",
      "\n",
      "\t\tInstagramAuthService result = fixture.display(display);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramAuthService proxy(Proxy) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testProxy() throws Exception {\n",
      "\t\tInstagramAuthService fixture = new InstagramAuthService();\n",
      "\t\tfixture.apiSecret(\"\");\n",
      "\t\tfixture.callback(\"\");\n",
      "\t\tfixture.scope(\"\");\n",
      "\t\tfixture.proxy(new Proxy(java.net.Proxy.Type.DIRECT, new InetSocketAddress(1)));\n",
      "\t\tfixture.apiKey(\"\");\n",
      "\t\tfixture.display(\"\");\n",
      "\t\tProxy requestProxy = new Proxy(java.net.Proxy.Type.DIRECT, new InetSocketAddress(1));\n",
      "\n",
      "\t\tInstagramAuthService result = fixture.proxy(requestProxy);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramAuthService scope(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalArgumentException.class)\n",
      "\tpublic void testScope() throws Exception {\n",
      "\t\tInstagramAuthService fixture = new InstagramAuthService();\n",
      "\t\tfixture.apiSecret(\"\");\n",
      "\t\tfixture.callback(\"\");\n",
      "\t\tfixture.scope(\"\");\n",
      "\t\tfixture.proxy(new Proxy(java.net.Proxy.Type.DIRECT, new InetSocketAddress(1)));\n",
      "\t\tfixture.apiKey(\"\");\n",
      "\t\tfixture.display(\"\");\n",
      "\t\tString scope = \"\";\n",
      "\n",
      "\t\tInstagramAuthService result = fixture.scope(scope);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "InstagramAuthService::::callback(java.lang.String)": [
        38,
        44
      ],
      "InstagramAuthService::::apiKey(java.lang.String)": [
        52,
        58
      ],
      "InstagramAuthService::::apiSecret(java.lang.String)": [
        66,
        72
      ],
      "InstagramAuthService::::scope(java.lang.String)": [
        81,
        87
      ],
      "InstagramAuthService::::display(java.lang.String)": [
        96,
        102
      ],
      "InstagramAuthService::::proxy(java.net.Proxy)": [
        111,
        117
      ],
      "InstagramAuthService::::build()": [
        124,
        138
      ]
    },
    "test_method_lines_dic": {
      "InstagramAuthServiceTest::::testInstagramAuthService()": [
        24,
        31
      ],
      "InstagramAuthServiceTest::::testApiKey()": [
        40,
        53
      ],
      "InstagramAuthServiceTest::::testApiSecret()": [
        62,
        85
      ],
      "InstagramAuthServiceTest::::testBuild()": [
        94,
        107
      ],
      "InstagramAuthServiceTest::::testBuild_2()": [
        116,
        128
      ],
      "InstagramAuthServiceTest::::testCallback()": [
        137,
        150
      ],
      "InstagramAuthServiceTest::::testDisplay()": [
        159,
        173
      ],
      "InstagramAuthServiceTest::::testProxy()": [
        182,
        196
      ],
      "InstagramAuthServiceTest::::testScope()": [
        205,
        219
      ]
    },
    "reverse_method_lines_dic": {
      "38": "InstagramAuthService::::callback(java.lang.String)",
      "39": "InstagramAuthService::::callback(java.lang.String)",
      "40": "InstagramAuthService::::callback(java.lang.String)",
      "41": "InstagramAuthService::::callback(java.lang.String)",
      "42": "InstagramAuthService::::callback(java.lang.String)",
      "43": "InstagramAuthService::::callback(java.lang.String)",
      "44": "InstagramAuthService::::callback(java.lang.String)",
      "52": "InstagramAuthService::::apiKey(java.lang.String)",
      "53": "InstagramAuthService::::apiKey(java.lang.String)",
      "54": "InstagramAuthService::::apiKey(java.lang.String)",
      "55": "InstagramAuthService::::apiKey(java.lang.String)",
      "56": "InstagramAuthService::::apiKey(java.lang.String)",
      "57": "InstagramAuthService::::apiKey(java.lang.String)",
      "58": "InstagramAuthService::::apiKey(java.lang.String)",
      "66": "InstagramAuthService::::apiSecret(java.lang.String)",
      "67": "InstagramAuthService::::apiSecret(java.lang.String)",
      "68": "InstagramAuthService::::apiSecret(java.lang.String)",
      "69": "InstagramAuthService::::apiSecret(java.lang.String)",
      "70": "InstagramAuthService::::apiSecret(java.lang.String)",
      "71": "InstagramAuthService::::apiSecret(java.lang.String)",
      "72": "InstagramAuthService::::apiSecret(java.lang.String)",
      "81": "InstagramAuthService::::scope(java.lang.String)",
      "82": "InstagramAuthService::::scope(java.lang.String)",
      "83": "InstagramAuthService::::scope(java.lang.String)",
      "84": "InstagramAuthService::::scope(java.lang.String)",
      "85": "InstagramAuthService::::scope(java.lang.String)",
      "86": "InstagramAuthService::::scope(java.lang.String)",
      "87": "InstagramAuthService::::scope(java.lang.String)",
      "96": "InstagramAuthService::::display(java.lang.String)",
      "97": "InstagramAuthService::::display(java.lang.String)",
      "98": "InstagramAuthService::::display(java.lang.String)",
      "99": "InstagramAuthService::::display(java.lang.String)",
      "100": "InstagramAuthService::::display(java.lang.String)",
      "101": "InstagramAuthService::::display(java.lang.String)",
      "102": "InstagramAuthService::::display(java.lang.String)",
      "111": "InstagramAuthService::::proxy(java.net.Proxy)",
      "112": "InstagramAuthService::::proxy(java.net.Proxy)",
      "113": "InstagramAuthService::::proxy(java.net.Proxy)",
      "114": "InstagramAuthService::::proxy(java.net.Proxy)",
      "115": "InstagramAuthService::::proxy(java.net.Proxy)",
      "116": "InstagramAuthService::::proxy(java.net.Proxy)",
      "117": "InstagramAuthService::::proxy(java.net.Proxy)",
      "124": "InstagramAuthService::::build()",
      "125": "InstagramAuthService::::build()",
      "126": "InstagramAuthService::::build()",
      "127": "InstagramAuthService::::build()",
      "128": "InstagramAuthService::::build()",
      "129": "InstagramAuthService::::build()",
      "130": "InstagramAuthService::::build()",
      "131": "InstagramAuthService::::build()",
      "132": "InstagramAuthService::::build()",
      "133": "InstagramAuthService::::build()",
      "134": "InstagramAuthService::::build()",
      "135": "InstagramAuthService::::build()",
      "136": "InstagramAuthService::::build()",
      "137": "InstagramAuthService::::build()",
      "138": "InstagramAuthService::::build()"
    },
    "test_reverse_method_lines_dic": {
      "24": "InstagramAuthServiceTest::::testInstagramAuthService()",
      "25": "InstagramAuthServiceTest::::testInstagramAuthService()",
      "26": "InstagramAuthServiceTest::::testInstagramAuthService()",
      "27": "InstagramAuthServiceTest::::testInstagramAuthService()",
      "28": "InstagramAuthServiceTest::::testInstagramAuthService()",
      "29": "InstagramAuthServiceTest::::testInstagramAuthService()",
      "30": "InstagramAuthServiceTest::::testInstagramAuthService()",
      "31": "InstagramAuthServiceTest::::testInstagramAuthService()",
      "40": "InstagramAuthServiceTest::::testApiKey()",
      "41": "InstagramAuthServiceTest::::testApiKey()",
      "42": "InstagramAuthServiceTest::::testApiKey()",
      "43": "InstagramAuthServiceTest::::testApiKey()",
      "44": "InstagramAuthServiceTest::::testApiKey()",
      "45": "InstagramAuthServiceTest::::testApiKey()",
      "46": "InstagramAuthServiceTest::::testApiKey()",
      "47": "InstagramAuthServiceTest::::testApiKey()",
      "48": "InstagramAuthServiceTest::::testApiKey()",
      "49": "InstagramAuthServiceTest::::testApiKey()",
      "50": "InstagramAuthServiceTest::::testApiKey()",
      "51": "InstagramAuthServiceTest::::testApiKey()",
      "52": "InstagramAuthServiceTest::::testApiKey()",
      "53": "InstagramAuthServiceTest::::testApiKey()",
      "62": "InstagramAuthServiceTest::::testApiSecret()",
      "63": "InstagramAuthServiceTest::::testApiSecret()",
      "64": "InstagramAuthServiceTest::::testApiSecret()",
      "65": "InstagramAuthServiceTest::::testApiSecret()",
      "66": "InstagramAuthServiceTest::::testApiSecret()",
      "67": "InstagramAuthServiceTest::::testApiSecret()",
      "68": "InstagramAuthServiceTest::::testApiSecret()",
      "69": "InstagramAuthServiceTest::::testApiSecret()",
      "70": "InstagramAuthServiceTest::::testApiSecret()",
      "71": "InstagramAuthServiceTest::::testApiSecret()",
      "72": "InstagramAuthServiceTest::::testApiSecret()",
      "73": "InstagramAuthServiceTest::::testApiSecret()",
      "74": "InstagramAuthServiceTest::::testApiSecret()",
      "75": "InstagramAuthServiceTest::::testApiSecret()",
      "76": "InstagramAuthServiceTest::::testApiSecret()",
      "77": "InstagramAuthServiceTest::::testApiSecret()",
      "78": "InstagramAuthServiceTest::::testApiSecret()",
      "79": "InstagramAuthServiceTest::::testApiSecret()",
      "80": "InstagramAuthServiceTest::::testApiSecret()",
      "81": "InstagramAuthServiceTest::::testApiSecret()",
      "82": "InstagramAuthServiceTest::::testApiSecret()",
      "83": "InstagramAuthServiceTest::::testApiSecret()",
      "84": "InstagramAuthServiceTest::::testApiSecret()",
      "85": "InstagramAuthServiceTest::::testApiSecret()",
      "94": "InstagramAuthServiceTest::::testBuild()",
      "95": "InstagramAuthServiceTest::::testBuild()",
      "96": "InstagramAuthServiceTest::::testBuild()",
      "97": "InstagramAuthServiceTest::::testBuild()",
      "98": "InstagramAuthServiceTest::::testBuild()",
      "99": "InstagramAuthServiceTest::::testBuild()",
      "100": "InstagramAuthServiceTest::::testBuild()",
      "101": "InstagramAuthServiceTest::::testBuild()",
      "102": "InstagramAuthServiceTest::::testBuild()",
      "103": "InstagramAuthServiceTest::::testBuild()",
      "104": "InstagramAuthServiceTest::::testBuild()",
      "105": "InstagramAuthServiceTest::::testBuild()",
      "106": "InstagramAuthServiceTest::::testBuild()",
      "107": "InstagramAuthServiceTest::::testBuild()",
      "116": "InstagramAuthServiceTest::::testBuild_2()",
      "117": "InstagramAuthServiceTest::::testBuild_2()",
      "118": "InstagramAuthServiceTest::::testBuild_2()",
      "119": "InstagramAuthServiceTest::::testBuild_2()",
      "120": "InstagramAuthServiceTest::::testBuild_2()",
      "121": "InstagramAuthServiceTest::::testBuild_2()",
      "122": "InstagramAuthServiceTest::::testBuild_2()",
      "123": "InstagramAuthServiceTest::::testBuild_2()",
      "124": "InstagramAuthServiceTest::::testBuild_2()",
      "125": "InstagramAuthServiceTest::::testBuild_2()",
      "126": "InstagramAuthServiceTest::::testBuild_2()",
      "127": "InstagramAuthServiceTest::::testBuild_2()",
      "128": "InstagramAuthServiceTest::::testBuild_2()",
      "137": "InstagramAuthServiceTest::::testCallback()",
      "138": "InstagramAuthServiceTest::::testCallback()",
      "139": "InstagramAuthServiceTest::::testCallback()",
      "140": "InstagramAuthServiceTest::::testCallback()",
      "141": "InstagramAuthServiceTest::::testCallback()",
      "142": "InstagramAuthServiceTest::::testCallback()",
      "143": "InstagramAuthServiceTest::::testCallback()",
      "144": "InstagramAuthServiceTest::::testCallback()",
      "145": "InstagramAuthServiceTest::::testCallback()",
      "146": "InstagramAuthServiceTest::::testCallback()",
      "147": "InstagramAuthServiceTest::::testCallback()",
      "148": "InstagramAuthServiceTest::::testCallback()",
      "149": "InstagramAuthServiceTest::::testCallback()",
      "150": "InstagramAuthServiceTest::::testCallback()",
      "159": "InstagramAuthServiceTest::::testDisplay()",
      "160": "InstagramAuthServiceTest::::testDisplay()",
      "161": "InstagramAuthServiceTest::::testDisplay()",
      "162": "InstagramAuthServiceTest::::testDisplay()",
      "163": "InstagramAuthServiceTest::::testDisplay()",
      "164": "InstagramAuthServiceTest::::testDisplay()",
      "165": "InstagramAuthServiceTest::::testDisplay()",
      "166": "InstagramAuthServiceTest::::testDisplay()",
      "167": "InstagramAuthServiceTest::::testDisplay()",
      "168": "InstagramAuthServiceTest::::testDisplay()",
      "169": "InstagramAuthServiceTest::::testDisplay()",
      "170": "InstagramAuthServiceTest::::testDisplay()",
      "171": "InstagramAuthServiceTest::::testDisplay()",
      "172": "InstagramAuthServiceTest::::testDisplay()",
      "173": "InstagramAuthServiceTest::::testDisplay()",
      "182": "InstagramAuthServiceTest::::testProxy()",
      "183": "InstagramAuthServiceTest::::testProxy()",
      "184": "InstagramAuthServiceTest::::testProxy()",
      "185": "InstagramAuthServiceTest::::testProxy()",
      "186": "InstagramAuthServiceTest::::testProxy()",
      "187": "InstagramAuthServiceTest::::testProxy()",
      "188": "InstagramAuthServiceTest::::testProxy()",
      "189": "InstagramAuthServiceTest::::testProxy()",
      "190": "InstagramAuthServiceTest::::testProxy()",
      "191": "InstagramAuthServiceTest::::testProxy()",
      "192": "InstagramAuthServiceTest::::testProxy()",
      "193": "InstagramAuthServiceTest::::testProxy()",
      "194": "InstagramAuthServiceTest::::testProxy()",
      "195": "InstagramAuthServiceTest::::testProxy()",
      "196": "InstagramAuthServiceTest::::testProxy()",
      "205": "InstagramAuthServiceTest::::testScope()",
      "206": "InstagramAuthServiceTest::::testScope()",
      "207": "InstagramAuthServiceTest::::testScope()",
      "208": "InstagramAuthServiceTest::::testScope()",
      "209": "InstagramAuthServiceTest::::testScope()",
      "210": "InstagramAuthServiceTest::::testScope()",
      "211": "InstagramAuthServiceTest::::testScope()",
      "212": "InstagramAuthServiceTest::::testScope()",
      "213": "InstagramAuthServiceTest::::testScope()",
      "214": "InstagramAuthServiceTest::::testScope()",
      "215": "InstagramAuthServiceTest::::testScope()",
      "216": "InstagramAuthServiceTest::::testScope()",
      "217": "InstagramAuthServiceTest::::testScope()",
      "218": "InstagramAuthServiceTest::::testScope()",
      "219": "InstagramAuthServiceTest::::testScope()"
    },
    "tests": [
      {
        "test_lines": [
          24,
          31
        ],
        "covered_lines": [
          27,
          28,
          29
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          40,
          53
        ],
        "covered_lines": [
          27,
          28,
          29
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          62,
          85
        ],
        "covered_lines": [
          27,
          28,
          29
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          94,
          107
        ],
        "covered_lines": [
          27,
          28,
          29
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          116,
          128
        ],
        "covered_lines": [
          27,
          28,
          29
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          137,
          150
        ],
        "covered_lines": [
          27,
          28,
          29
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          159,
          173
        ],
        "covered_lines": [
          27,
          28,
          29
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          182,
          196
        ],
        "covered_lines": [
          27,
          28,
          29
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          205,
          219
        ],
        "covered_lines": [
          27,
          28,
          29
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/auth/exceptions/OAuthParametersMissingException.java": {
    "class_content": [
      "package org.jinstagram.auth.exceptions;\n",
      "\n",
      "import org.jinstagram.auth.model.OAuthRequest;\n",
      "\n",
      "/**\n",
      " * Specialized exception that represents a missing OAuth parameter.\n",
      " */\n",
      "public class OAuthParametersMissingException extends OAuthException {\n",
      "\tprivate static final String MSG = \"Could not find oauth parameters in request: %s. \"\n",
      "\t\t\t+ \"OAuth parameters must be specified with the addOAuthParameter() method\";\n",
      "\n",
      "\tprivate static final long serialVersionUID = 1745308760111976671L;\n",
      "\n",
      "\t/**\n",
      "\t * Default constructor.\n",
      "\t *\n",
      "\t * @param request\n",
      "\t *            OAuthRequest that caused the error\n",
      "\t */\n",
      "\tpublic OAuthParametersMissingException(OAuthRequest request) {\n",
      "\t\tsuper(String.format(MSG, request));\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.auth.exceptions;\n",
      "\n",
      "import org.jinstagram.auth.model.OAuthRequest;\n",
      "import org.jinstagram.http.Verbs;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "/**\n",
      " * The class <code>OAuthParametersMissingExceptionTest</code> contains tests for the class <code>{@link OAuthParametersMissingException}</code>.\n",
      " */\n",
      "public class OAuthParametersMissingExceptionTest {\n",
      "    /**\n",
      "     * Run the OAuthParametersMissingException(OAuthRequest) constructor test.\n",
      "     *\n",
      "     * @throws Exception\n",
      "     */\n",
      "    @Test\n",
      "    public void testOAuthParametersMissingException_1()\n",
      "            throws Exception {\n",
      "        OAuthRequest request = new OAuthRequest(Verbs.DELETE, \"\");\n",
      "\n",
      "        OAuthParametersMissingException result = new OAuthParametersMissingException(request);\n",
      "\n",
      "        assertNotNull(result);\n",
      "        assertEquals(null, result.getCause());\n",
      "        assertEquals(\"org.jinstagram.auth.exceptions.OAuthParametersMissingException: Could not find oauth parameters in request: @OAuthRequest(DELETE, ). OAuth parameters must be specified with the addOAuthParameter() method\", result.toString());\n",
      "        assertEquals(\"Could not find oauth parameters in request: @OAuthRequest(DELETE, ). OAuth parameters must be specified with the addOAuthParameter() method\", result.getLocalizedMessage());\n",
      "        assertEquals(\"Could not find oauth parameters in request: @OAuthRequest(DELETE, ). OAuth parameters must be specified with the addOAuthParameter() method\", result.getMessage());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()": [
        19,
        31
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "19": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "20": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "21": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "22": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "23": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "24": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "25": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "26": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "27": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "28": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "29": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "30": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()",
      "31": "OAuthParametersMissingExceptionTest::::testOAuthParametersMissingException_1()"
    },
    "tests": [
      {
        "test_lines": [
          19,
          31
        ],
        "covered_lines": [
          21,
          22
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/auth/exceptions/OAuthException.java": {
    "class_content": [
      "package org.jinstagram.auth.exceptions;\n",
      "\n",
      "/**\n",
      " * Represents a problem in the OAuth signing process\n",
      " */\n",
      "public class OAuthException extends RuntimeException {\n",
      "\tprivate static final long serialVersionUID = 1L;\n",
      "\n",
      "\t/**\n",
      "\t * No-exception constructor. Used when there is no original exception\n",
      "\t *\n",
      "\t * @param message message explaining what went wrong\n",
      "\t */\n",
      "\tpublic OAuthException(String message) {\n",
      "\t\tsuper(message, null);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Default constructor\n",
      "\t * @param message message explaining what went wrong\n",
      "\t * @param e original exception\n",
      "\t */\n",
      "\tpublic OAuthException(String message, Exception e) {\n",
      "\t\tsuper(message, e);\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.auth.exceptions;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "/**\n",
      " * The class <code>OAuthExceptionTest</code> contains tests for the class\n",
      " * <code>{@link OAuthException}</code>.\n",
      " *\n",
      " * @author Sachin Handiekar\n",
      " */\n",
      "public class OAuthExceptionTest {\n",
      "    /**\n",
      "     * Run the OAuthException(String) constructor test.\n",
      "     *\n",
      "     * @throws Exception if any error occurs\n",
      "     */\n",
      "    @Test\n",
      "    public void testOAuthExceptionWithMessage() throws Exception {\n",
      "        String message = \"customMessage\";\n",
      "\n",
      "        OAuthException oauthException = new OAuthException(message);\n",
      "\n",
      "        // add additional test code here\n",
      "        assertNotNull(oauthException);\n",
      "        assertEquals(null, oauthException.getCause());\n",
      "        assertEquals(\"org.jinstagram.auth.exceptions.OAuthException: \" + message, oauthException.toString());\n",
      "        assertEquals(message, oauthException.getLocalizedMessage());\n",
      "        assertEquals(message, oauthException.getMessage());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Run the OAuthException(String,Exception) constructor test.\n",
      "     *\n",
      "     * @throws Exception\n",
      "     */\n",
      "    @Test\n",
      "    public void testOAuthExceptionWithMessageAndException() throws Exception {\n",
      "        String customErrorMessage = \"customError\";\n",
      "        Exception customException = new Exception();\n",
      "\n",
      "        OAuthException oauthException = new OAuthException(customErrorMessage, customException);\n",
      "\n",
      "        // add additional test code here\n",
      "        assertNotNull(oauthException);\n",
      "        assertEquals(\"org.jinstagram.auth.exceptions.OAuthException: \" + customErrorMessage, oauthException.toString());\n",
      "        assertEquals(customErrorMessage, oauthException.getLocalizedMessage());\n",
      "        assertEquals(customErrorMessage, oauthException.getMessage());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "OAuthExceptionTest::::testOAuthExceptionWithMessage()": [
        20,
        32
      ],
      "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()": [
        39,
        51
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "20": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "21": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "22": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "23": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "24": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "25": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "26": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "27": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "28": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "29": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "30": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "31": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "32": "OAuthExceptionTest::::testOAuthExceptionWithMessage()",
      "39": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "40": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "41": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "42": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "43": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "44": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "45": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "46": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "47": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "48": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "49": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "50": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()",
      "51": "OAuthExceptionTest::::testOAuthExceptionWithMessageAndException()"
    },
    "tests": [
      {
        "test_lines": [
          20,
          32
        ],
        "covered_lines": [
          15,
          16
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          39,
          51
        ],
        "covered_lines": [
          24,
          25
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/auth/model/Token.java": {
    "class_content": [
      "package org.jinstagram.auth.model;\n",
      "\n",
      "import java.io.Serializable;\n",
      "\n",
      "/**\n",
      " * Represents an OAuth token (either request or access token) and its secret\n",
      " */\n",
      "public class Token implements Serializable {\n",
      "\tprivate static final long serialVersionUID = 715000866082812683L;\n",
      "\n",
      "\tprivate final String rawResponse;\n",
      "\n",
      "\tprivate final String secret;\n",
      "\n",
      "\tprivate final String token;\n",
      "\n",
      "\t/**\n",
      "\t * Default constructor\n",
      "\t * \n",
      "\t * @param token token value\n",
      "\t * @param secret token secret\n",
      "\t */\n",
      "\tpublic Token(String token, String secret) {\n",
      "\t\tthis(token, secret, null);\n",
      "\t}\n",
      "\n",
      "\tpublic Token(String token, String secret, String rawResponse) {\n",
      "\t\tthis.token = token;\n",
      "\t\tthis.secret = secret;\n",
      "\t\tthis.rawResponse = rawResponse;\n",
      "\t}\n",
      "\n",
      "\tpublic String getToken() {\n",
      "\t\treturn token;\n",
      "\t}\n",
      "\n",
      "\tpublic String getSecret() {\n",
      "\t\treturn secret;\n",
      "\t}\n",
      "\n",
      "\tpublic String getRawResponse() {\n",
      "\t\tif (rawResponse == null) {\n",
      "\t\t\tthrow new IllegalStateException(\"This token object was not constructed \"\n",
      "                    + \"by jInstagramAuthService and does not have a rawResponse\");\n",
      "\t\t}\n",
      "\n",
      "\t\treturn rawResponse;\n",
      "\t}\n",
      "\n",
      "\t@Override\n",
      "\tpublic String toString() {\n",
      "\t\treturn String.format(\"Token[%s , %s]\", token, secret);\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.auth.model;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>TokenTest</code> contains tests for the class\n",
      " * <code>{@link Token}</code>.\n",
      " */\n",
      "public class TokenTest {\n",
      "\t/**\n",
      "\t * Run the Token(String,String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToken() throws Exception {\n",
      "\t\tString token = \"\";\n",
      "\t\tString secret = \"\";\n",
      "\n",
      "\t\tToken result = new Token(token, secret);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"Token[ , ]\", result.toString());\n",
      "\t\tassertEquals(\"\", result.getToken());\n",
      "\t\tassertEquals(\"\", result.getSecret());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Token(String,String,String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToken_2() throws Exception {\n",
      "\t\tString token = \"\";\n",
      "\t\tString secret = \"\";\n",
      "\t\tString rawResponse = \"\";\n",
      "\n",
      "\t\tToken result = new Token(token, secret, rawResponse);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"\", result.getRawResponse());\n",
      "\t\tassertEquals(\"Token[ , ]\", result.toString());\n",
      "\t\tassertEquals(\"\", result.getToken());\n",
      "\t\tassertEquals(\"\", result.getSecret());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getRawResponse() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = java.lang.IllegalStateException.class)\n",
      "\tpublic void testGetRawResponse() throws Exception {\n",
      "\t\tToken fixture = new Token(\"\", \"\", (String) null);\n",
      "\n",
      "\t\tString result = fixture.getRawResponse();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getSecret() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetSecret() throws Exception {\n",
      "\t\tToken fixture = new Token(\"\", \"\", \"\");\n",
      "\n",
      "\t\tString result = fixture.getSecret();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getToken() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetToken() throws Exception {\n",
      "\t\tToken fixture = new Token(\"\", \"\", \"\");\n",
      "\n",
      "\t\tString result = fixture.getToken();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString() throws Exception {\n",
      "\t\tToken fixture = new Token(\"\", \"\", \"\");\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"Token[ , ]\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "Token::::getToken()": [
        33,
        35
      ],
      "Token::::getSecret()": [
        37,
        39
      ],
      "Token::::getRawResponse()": [
        41,
        48
      ],
      "Token::::toString()": [
        50,
        53
      ]
    },
    "test_method_lines_dic": {
      "TokenTest::::testToken()": [
        17,
        29
      ],
      "TokenTest::::testToken_2()": [
        37,
        51
      ],
      "TokenTest::::testGetRawResponse()": [
        61,
        69
      ],
      "TokenTest::::testGetSecret()": [
        79,
        87
      ],
      "TokenTest::::testGetToken()": [
        97,
        105
      ],
      "TokenTest::::testToString()": [
        115,
        123
      ]
    },
    "reverse_method_lines_dic": {
      "33": "Token::::getToken()",
      "34": "Token::::getToken()",
      "35": "Token::::getToken()",
      "37": "Token::::getSecret()",
      "38": "Token::::getSecret()",
      "39": "Token::::getSecret()",
      "41": "Token::::getRawResponse()",
      "42": "Token::::getRawResponse()",
      "43": "Token::::getRawResponse()",
      "44": "Token::::getRawResponse()",
      "45": "Token::::getRawResponse()",
      "46": "Token::::getRawResponse()",
      "47": "Token::::getRawResponse()",
      "48": "Token::::getRawResponse()",
      "50": "Token::::toString()",
      "51": "Token::::toString()",
      "52": "Token::::toString()",
      "53": "Token::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "17": "TokenTest::::testToken()",
      "18": "TokenTest::::testToken()",
      "19": "TokenTest::::testToken()",
      "20": "TokenTest::::testToken()",
      "21": "TokenTest::::testToken()",
      "22": "TokenTest::::testToken()",
      "23": "TokenTest::::testToken()",
      "24": "TokenTest::::testToken()",
      "25": "TokenTest::::testToken()",
      "26": "TokenTest::::testToken()",
      "27": "TokenTest::::testToken()",
      "28": "TokenTest::::testToken()",
      "29": "TokenTest::::testToken()",
      "37": "TokenTest::::testToken_2()",
      "38": "TokenTest::::testToken_2()",
      "39": "TokenTest::::testToken_2()",
      "40": "TokenTest::::testToken_2()",
      "41": "TokenTest::::testToken_2()",
      "42": "TokenTest::::testToken_2()",
      "43": "TokenTest::::testToken_2()",
      "44": "TokenTest::::testToken_2()",
      "45": "TokenTest::::testToken_2()",
      "46": "TokenTest::::testToken_2()",
      "47": "TokenTest::::testToken_2()",
      "48": "TokenTest::::testToken_2()",
      "49": "TokenTest::::testToken_2()",
      "50": "TokenTest::::testToken_2()",
      "51": "TokenTest::::testToken_2()",
      "61": "TokenTest::::testGetRawResponse()",
      "62": "TokenTest::::testGetRawResponse()",
      "63": "TokenTest::::testGetRawResponse()",
      "64": "TokenTest::::testGetRawResponse()",
      "65": "TokenTest::::testGetRawResponse()",
      "66": "TokenTest::::testGetRawResponse()",
      "67": "TokenTest::::testGetRawResponse()",
      "68": "TokenTest::::testGetRawResponse()",
      "69": "TokenTest::::testGetRawResponse()",
      "79": "TokenTest::::testGetSecret()",
      "80": "TokenTest::::testGetSecret()",
      "81": "TokenTest::::testGetSecret()",
      "82": "TokenTest::::testGetSecret()",
      "83": "TokenTest::::testGetSecret()",
      "84": "TokenTest::::testGetSecret()",
      "85": "TokenTest::::testGetSecret()",
      "86": "TokenTest::::testGetSecret()",
      "87": "TokenTest::::testGetSecret()",
      "97": "TokenTest::::testGetToken()",
      "98": "TokenTest::::testGetToken()",
      "99": "TokenTest::::testGetToken()",
      "100": "TokenTest::::testGetToken()",
      "101": "TokenTest::::testGetToken()",
      "102": "TokenTest::::testGetToken()",
      "103": "TokenTest::::testGetToken()",
      "104": "TokenTest::::testGetToken()",
      "105": "TokenTest::::testGetToken()",
      "115": "TokenTest::::testToString()",
      "116": "TokenTest::::testToString()",
      "117": "TokenTest::::testToString()",
      "118": "TokenTest::::testToString()",
      "119": "TokenTest::::testToString()",
      "120": "TokenTest::::testToString()",
      "121": "TokenTest::::testToString()",
      "122": "TokenTest::::testToString()",
      "123": "TokenTest::::testToString()"
    },
    "tests": [
      {
        "test_lines": [
          17,
          29
        ],
        "covered_lines": [
          24,
          25,
          27,
          28,
          29,
          30,
          31,
          34,
          38,
          52
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          37,
          51
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          34,
          38,
          42,
          47,
          52
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          61,
          69
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          42,
          43
        ],
        "label": "Token::::getRawResponse()"
      },
      {
        "test_lines": [
          79,
          87
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          38
        ],
        "label": "Token::::getSecret()"
      },
      {
        "test_lines": [
          97,
          105
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          34
        ],
        "label": "Token::::getToken()"
      },
      {
        "test_lines": [
          115,
          123
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          52
        ],
        "label": "Token::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/auth/model/OAuthRequest.java": {
    "class_content": [
      "package org.jinstagram.auth.model;\n",
      "\n",
      "import org.jinstagram.http.Request;\n",
      "import org.jinstagram.http.Verbs;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "/**\n",
      " * The representation of an OAuth HttpRequest.\n",
      " * \n",
      " * Adds OAuth-related functionality to the {@link Request}\n",
      " */\n",
      "public class OAuthRequest extends Request {\n",
      "\tprivate static final String OAUTH_PREFIX = \"oauth_\";\n",
      "\n",
      "\tprivate Map<String, String> oauthParameters;\n",
      "\n",
      "\t/**\n",
      "\t * Default constructor.\n",
      "\t * \n",
      "\t * @param verb Http verb/method\n",
      "\t * @param url resource URL\n",
      "\t */\n",
      "\tpublic OAuthRequest(Verbs verb, String url) {\n",
      "\t\tsuper(verb, url);\n",
      "\n",
      "\t\tthis.oauthParameters = new HashMap<String, String>();\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Adds an OAuth parameter.\n",
      "\t * \n",
      "\t * @param key name of the parameter\n",
      "\t * @param value value of the parameter\n",
      "\t * \n",
      "\t * @throws IllegalArgumentException if the parameter is not an OAuth\n",
      "\t * parameter\n",
      "\t */\n",
      "\tpublic void addOAuthParameter(String key, String value) {\n",
      "\t\toauthParameters.put(checkKey(key), value);\n",
      "\t}\n",
      "\n",
      "\tprivate static String checkKey(String key) {\n",
      "\t\tif (key.startsWith(OAUTH_PREFIX) || key.equals(OAuthConstants.SCOPE)) {\n",
      "\t\t\treturn key;\n",
      "\t\t}\n",
      "\t\telse {\n",
      "\t\t\tthrow new IllegalArgumentException(String.format(\n",
      "\t\t\t\t\t\"OAuth parameters must either be '%s' or start with '%s'\",\n",
      "\t\t\t\t\tOAuthConstants.SCOPE, OAUTH_PREFIX));\n",
      "\t\t}\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Returns the {@link Map} containing the key-value pair of parameters.\n",
      "\t * \n",
      "\t * @return parameters as map\n",
      "\t */\n",
      "\tpublic Map<String, String> getOauthParameters() {\n",
      "\t\treturn oauthParameters;\n",
      "\t}\n",
      "\n",
      "\t@Override\n",
      "\tpublic String toString() {\n",
      "\t\treturn String.format(\"@OAuthRequest(%s, %s)\", getVerb(), getUrl());\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.auth.model;\n",
      "\n",
      "import org.jinstagram.http.Verbs;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "\n",
      "public class OAuthRequestTest {\n",
      "\n",
      "    private OAuthRequest request;\n",
      "\n",
      "    @Before\n",
      "    public void setup() {\n",
      "        request = new OAuthRequest(Verbs.GET, \"http://example.com\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void shouldAddOAuthParamters() {\n",
      "        request.addOAuthParameter(OAuthConstants.SCOPE, \"scope\");\n",
      "\n",
      "        assertEquals(1, request.getOauthParameters().size());\n",
      "    }\n",
      "\n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldThrowExceptionIfParameterIsNotOAuth() {\n",
      "        request.addOAuthParameter(\"otherParam\", \"value\");\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "OAuthRequest::::addOAuthParameter(java.lang.String,java.lang.String)": [
        40,
        42
      ],
      "OAuthRequest::::checkKey(java.lang.String)": [
        44,
        53
      ],
      "OAuthRequest::::getOauthParameters()": [
        60,
        62
      ],
      "OAuthRequest::::toString()": [
        64,
        67
      ]
    },
    "test_method_lines_dic": {
      "OAuthRequestTest::::setup()": [
        13,
        16
      ],
      "OAuthRequestTest::::shouldAddOAuthParamters()": [
        18,
        23
      ],
      "OAuthRequestTest::::shouldThrowExceptionIfParameterIsNotOAuth()": [
        25,
        28
      ]
    },
    "reverse_method_lines_dic": {
      "40": "OAuthRequest::::addOAuthParameter(java.lang.String,java.lang.String)",
      "41": "OAuthRequest::::addOAuthParameter(java.lang.String,java.lang.String)",
      "42": "OAuthRequest::::addOAuthParameter(java.lang.String,java.lang.String)",
      "44": "OAuthRequest::::checkKey(java.lang.String)",
      "45": "OAuthRequest::::checkKey(java.lang.String)",
      "46": "OAuthRequest::::checkKey(java.lang.String)",
      "47": "OAuthRequest::::checkKey(java.lang.String)",
      "48": "OAuthRequest::::checkKey(java.lang.String)",
      "49": "OAuthRequest::::checkKey(java.lang.String)",
      "50": "OAuthRequest::::checkKey(java.lang.String)",
      "51": "OAuthRequest::::checkKey(java.lang.String)",
      "52": "OAuthRequest::::checkKey(java.lang.String)",
      "53": "OAuthRequest::::checkKey(java.lang.String)",
      "60": "OAuthRequest::::getOauthParameters()",
      "61": "OAuthRequest::::getOauthParameters()",
      "62": "OAuthRequest::::getOauthParameters()",
      "64": "OAuthRequest::::toString()",
      "65": "OAuthRequest::::toString()",
      "66": "OAuthRequest::::toString()",
      "67": "OAuthRequest::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "13": "OAuthRequestTest::::setup()",
      "14": "OAuthRequestTest::::setup()",
      "15": "OAuthRequestTest::::setup()",
      "16": "OAuthRequestTest::::setup()",
      "18": "OAuthRequestTest::::shouldAddOAuthParamters()",
      "19": "OAuthRequestTest::::shouldAddOAuthParamters()",
      "20": "OAuthRequestTest::::shouldAddOAuthParamters()",
      "21": "OAuthRequestTest::::shouldAddOAuthParamters()",
      "22": "OAuthRequestTest::::shouldAddOAuthParamters()",
      "23": "OAuthRequestTest::::shouldAddOAuthParamters()",
      "25": "OAuthRequestTest::::shouldThrowExceptionIfParameterIsNotOAuth()",
      "26": "OAuthRequestTest::::shouldThrowExceptionIfParameterIsNotOAuth()",
      "27": "OAuthRequestTest::::shouldThrowExceptionIfParameterIsNotOAuth()",
      "28": "OAuthRequestTest::::shouldThrowExceptionIfParameterIsNotOAuth()"
    },
    "tests": [
      {
        "test_lines": [
          18,
          23
        ],
        "covered_lines": [
          26,
          28,
          29,
          41,
          42,
          45,
          46,
          61
        ],
        "label": "OAuthRequest::::addOAuthParameter(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          25,
          28
        ],
        "covered_lines": [
          26,
          28,
          29,
          45,
          49
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/auth/model/OAuthConfig.java": {
    "class_content": [
      "package org.jinstagram.auth.model;\n",
      "\n",
      "import java.net.Proxy;\n",
      "\n",
      "public class OAuthConfig {\n",
      "\tprivate final String apiKey;\n",
      "\n",
      "\tprivate final String apiSecret;\n",
      "\n",
      "\tprivate final String callback;\n",
      "\n",
      "\tprivate final String display;\n",
      "\n",
      "\tprivate final String scope;\n",
      "\n",
      "\tprivate Proxy requestProxy;\n",
      "\n",
      "\tpublic OAuthConfig(String key, String secret) {\n",
      "\t\tthis(key, secret, null, null);\n",
      "\t}\n",
      "\n",
      "\tpublic OAuthConfig(String key, String secret, String callback, String scope) {\n",
      "\t\tthis(key, secret, callback, scope, null);\n",
      "\t}\n",
      "\n",
      "\tpublic OAuthConfig(String key, String secret, String callback, String scope, String display) {\n",
      "\t\tthis.apiKey = key;\n",
      "\t\tthis.apiSecret = secret;\n",
      "\t\tthis.callback = (callback != null) ? callback : OAuthConstants.OUT_OF_BAND;\n",
      "\t\tthis.scope = scope;\n",
      "\t\tthis.display = display;\n",
      "\t}\n",
      "\n",
      "\tpublic String getApiKey() {\n",
      "\t\treturn apiKey;\n",
      "\t}\n",
      "\n",
      "\tpublic String getApiSecret() {\n",
      "\t\treturn apiSecret;\n",
      "\t}\n",
      "\n",
      "\tpublic String getCallback() {\n",
      "\t\treturn callback;\n",
      "\t}\n",
      "\n",
      "\tpublic String getScope() {\n",
      "\t\treturn scope;\n",
      "\t}\n",
      "\n",
      "\tpublic boolean hasScope() {\n",
      "\t\treturn scope != null;\n",
      "\t}\n",
      "\n",
      "\tpublic String getDisplay() {\n",
      "\t\treturn display;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * @param requestProxy the proxy to set\n",
      "\t */\n",
      "\tpublic void setRequestProxy(Proxy requestProxy) {\n",
      "\t\tthis.requestProxy = requestProxy;\n",
      "\t}\n",
      "\n",
      "\tpublic Proxy getRequestProxy() {\n",
      "\t\treturn requestProxy;\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.auth.model;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "import static org.junit.Assert.assertTrue;\n",
      "\n",
      "import java.net.InetSocketAddress;\n",
      "import java.net.Proxy;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>OAuthConfigTest</code> contains tests for the class\n",
      " * <code>{@link OAuthConfig}</code>.\n",
      " *\n",
      " */\n",
      "public class OAuthConfigTest {\n",
      "\n",
      "\tprivate static final Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"0.0.0.0\", 8080));\n",
      "\n",
      "\t/**\n",
      "\t * Run the OAuthConfig(String,String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testOAuthConfig_1() throws Exception {\n",
      "\t\tString key = \"key\";\n",
      "\t\tString secret = \"secret\";\n",
      "\n",
      "\t\tOAuthConfig result = new OAuthConfig(key, secret);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(null, result.getScope());\n",
      "\t\tassertEquals(null, result.getDisplay());\n",
      "\t\tassertEquals(\"oob\", result.getCallback());\n",
      "\t\tassertEquals(\"secret\", result.getApiSecret());\n",
      "\t\tassertEquals(\"key\", result.getApiKey());\n",
      "\t\tassertEquals(false, result.hasScope());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the OAuthConfig(String,String,String,String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testOAuthConfig_2() throws Exception {\n",
      "\t\tString key = \"\";\n",
      "\t\tString secret = \"\";\n",
      "\t\tString callback = \"\";\n",
      "\t\tString scope = \"\";\n",
      "\n",
      "\t\tOAuthConfig result = new OAuthConfig(key, secret, callback, scope);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"\", result.getScope());\n",
      "\t\tassertEquals(null, result.getDisplay());\n",
      "\t\tassertEquals(\"\", result.getCallback());\n",
      "\t\tassertEquals(\"\", result.getApiSecret());\n",
      "\t\tassertEquals(\"\", result.getApiKey());\n",
      "\t\tassertEquals(true, result.hasScope());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the OAuthConfig(String,String,String,String,String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testOAuthConfig_3() throws Exception {\n",
      "\t\tString key = \"\";\n",
      "\t\tString secret = \"\";\n",
      "\t\tString callback = null;\n",
      "\t\tString scope = \"\";\n",
      "\t\tString display = \"\";\n",
      "\n",
      "\t\tOAuthConfig result = new OAuthConfig(key, secret, callback, scope, display);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"\", result.getScope());\n",
      "\t\tassertEquals(\"\", result.getDisplay());\n",
      "\t\tassertEquals(\"oob\", result.getCallback());\n",
      "\t\tassertEquals(\"\", result.getApiSecret());\n",
      "\t\tassertEquals(\"\", result.getApiKey());\n",
      "\t\tassertEquals(true, result.hasScope());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the OAuthConfig(String,String,String,String,String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testOAuthConfig_4() throws Exception {\n",
      "\t\tString key = \"\";\n",
      "\t\tString secret = \"\";\n",
      "\t\tString callback = \"\";\n",
      "\t\tString scope = \"\";\n",
      "\t\tString display = \"\";\n",
      "\n",
      "\t\tOAuthConfig result = new OAuthConfig(key, secret, callback, scope, display);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"\", result.getScope());\n",
      "\t\tassertEquals(\"\", result.getDisplay());\n",
      "\t\tassertEquals(\"\", result.getCallback());\n",
      "\t\tassertEquals(\"\", result.getApiSecret());\n",
      "\t\tassertEquals(\"\", result.getApiKey());\n",
      "\t\tassertEquals(true, result.hasScope());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getApiKey() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetApiKey_1() throws Exception {\n",
      "\t\tOAuthConfig fixture = new OAuthConfig(\"key\", \"secret\", \"callback\", \"scope\", \"display\");\n",
      "\t\tfixture.setRequestProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getApiKey();\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getApiSecret() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetApiSecret_1() throws Exception {\n",
      "\t\tOAuthConfig fixture = new OAuthConfig(\"key\", \"secret\", \"callback\", \"scope\", \"display\");\n",
      "\t\tfixture.setRequestProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getApiSecret();\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getCallback() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCallback_1() throws Exception {\n",
      "\t\tOAuthConfig fixture = new OAuthConfig(\"key\", \"secret\", \"callback\", \"scope\", \"display\");\n",
      "\t\tfixture.setRequestProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getCallback();\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getDisplay() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetDisplay_1() throws Exception {\n",
      "\t\tOAuthConfig fixture = new OAuthConfig(\"key\", \"secret\", \"callback\", \"scope\", \"display\");\n",
      "\t\tfixture.setRequestProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getDisplay();\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getScope() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetScope_1() throws Exception {\n",
      "\t\tOAuthConfig fixture = new OAuthConfig(\"key\", \"secret\", \"callback\", \"scope\", \"display\");\n",
      "\t\tfixture.setRequestProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getScope();\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the boolean hasScope() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testHasScope_1() throws Exception {\n",
      "\t\tOAuthConfig fixture = new OAuthConfig(\"key\", \"secret\", \"callback\", \"scope\", \"display\");\n",
      "\t\tfixture.setRequestProxy(proxy);\n",
      "\n",
      "\t\tboolean result = fixture.hasScope();\n",
      "\n",
      "\t\tassertTrue(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setRequestProxy(Proxy) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetRequestProxy_1() throws Exception {\n",
      "\t\tOAuthConfig fixture = new OAuthConfig(\"key\", \"secret\", \"callback\", \"scope\", \"display\");\n",
      "\n",
      "\t\tfixture.setRequestProxy(proxy);\n",
      "\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "OAuthConfig::::getApiKey()": [
        34,
        36
      ],
      "OAuthConfig::::getApiSecret()": [
        38,
        40
      ],
      "OAuthConfig::::getCallback()": [
        42,
        44
      ],
      "OAuthConfig::::getScope()": [
        46,
        48
      ],
      "OAuthConfig::::hasScope()": [
        50,
        52
      ],
      "OAuthConfig::::getDisplay()": [
        54,
        56
      ],
      "OAuthConfig::::setRequestProxy(java.net.Proxy)": [
        61,
        63
      ],
      "OAuthConfig::::getRequestProxy()": [
        65,
        67
      ]
    },
    "test_method_lines_dic": {
      "OAuthConfigTest::::testOAuthConfig_1()": [
        27,
        42
      ],
      "OAuthConfigTest::::testOAuthConfig_2()": [
        50,
        67
      ],
      "OAuthConfigTest::::testOAuthConfig_3()": [
        75,
        93
      ],
      "OAuthConfigTest::::testOAuthConfig_4()": [
        101,
        119
      ],
      "OAuthConfigTest::::testGetApiKey_1()": [
        127,
        135
      ],
      "OAuthConfigTest::::testGetApiSecret_1()": [
        145,
        153
      ],
      "OAuthConfigTest::::testGetCallback_1()": [
        161,
        169
      ],
      "OAuthConfigTest::::testGetDisplay_1()": [
        177,
        184
      ],
      "OAuthConfigTest::::testGetScope_1()": [
        192,
        200
      ],
      "OAuthConfigTest::::testHasScope_1()": [
        208,
        216
      ],
      "OAuthConfigTest::::testSetRequestProxy_1()": [
        224,
        230
      ]
    },
    "reverse_method_lines_dic": {
      "34": "OAuthConfig::::getApiKey()",
      "35": "OAuthConfig::::getApiKey()",
      "36": "OAuthConfig::::getApiKey()",
      "38": "OAuthConfig::::getApiSecret()",
      "39": "OAuthConfig::::getApiSecret()",
      "40": "OAuthConfig::::getApiSecret()",
      "42": "OAuthConfig::::getCallback()",
      "43": "OAuthConfig::::getCallback()",
      "44": "OAuthConfig::::getCallback()",
      "46": "OAuthConfig::::getScope()",
      "47": "OAuthConfig::::getScope()",
      "48": "OAuthConfig::::getScope()",
      "50": "OAuthConfig::::hasScope()",
      "51": "OAuthConfig::::hasScope()",
      "52": "OAuthConfig::::hasScope()",
      "54": "OAuthConfig::::getDisplay()",
      "55": "OAuthConfig::::getDisplay()",
      "56": "OAuthConfig::::getDisplay()",
      "61": "OAuthConfig::::setRequestProxy(java.net.Proxy)",
      "62": "OAuthConfig::::setRequestProxy(java.net.Proxy)",
      "63": "OAuthConfig::::setRequestProxy(java.net.Proxy)",
      "65": "OAuthConfig::::getRequestProxy()",
      "66": "OAuthConfig::::getRequestProxy()",
      "67": "OAuthConfig::::getRequestProxy()"
    },
    "test_reverse_method_lines_dic": {
      "27": "OAuthConfigTest::::testOAuthConfig_1()",
      "28": "OAuthConfigTest::::testOAuthConfig_1()",
      "29": "OAuthConfigTest::::testOAuthConfig_1()",
      "30": "OAuthConfigTest::::testOAuthConfig_1()",
      "31": "OAuthConfigTest::::testOAuthConfig_1()",
      "32": "OAuthConfigTest::::testOAuthConfig_1()",
      "33": "OAuthConfigTest::::testOAuthConfig_1()",
      "34": "OAuthConfigTest::::testOAuthConfig_1()",
      "35": "OAuthConfigTest::::testOAuthConfig_1()",
      "36": "OAuthConfigTest::::testOAuthConfig_1()",
      "37": "OAuthConfigTest::::testOAuthConfig_1()",
      "38": "OAuthConfigTest::::testOAuthConfig_1()",
      "39": "OAuthConfigTest::::testOAuthConfig_1()",
      "40": "OAuthConfigTest::::testOAuthConfig_1()",
      "41": "OAuthConfigTest::::testOAuthConfig_1()",
      "42": "OAuthConfigTest::::testOAuthConfig_1()",
      "50": "OAuthConfigTest::::testOAuthConfig_2()",
      "51": "OAuthConfigTest::::testOAuthConfig_2()",
      "52": "OAuthConfigTest::::testOAuthConfig_2()",
      "53": "OAuthConfigTest::::testOAuthConfig_2()",
      "54": "OAuthConfigTest::::testOAuthConfig_2()",
      "55": "OAuthConfigTest::::testOAuthConfig_2()",
      "56": "OAuthConfigTest::::testOAuthConfig_2()",
      "57": "OAuthConfigTest::::testOAuthConfig_2()",
      "58": "OAuthConfigTest::::testOAuthConfig_2()",
      "59": "OAuthConfigTest::::testOAuthConfig_2()",
      "60": "OAuthConfigTest::::testOAuthConfig_2()",
      "61": "OAuthConfigTest::::testOAuthConfig_2()",
      "62": "OAuthConfigTest::::testOAuthConfig_2()",
      "63": "OAuthConfigTest::::testOAuthConfig_2()",
      "64": "OAuthConfigTest::::testOAuthConfig_2()",
      "65": "OAuthConfigTest::::testOAuthConfig_2()",
      "66": "OAuthConfigTest::::testOAuthConfig_2()",
      "67": "OAuthConfigTest::::testOAuthConfig_2()",
      "75": "OAuthConfigTest::::testOAuthConfig_3()",
      "76": "OAuthConfigTest::::testOAuthConfig_3()",
      "77": "OAuthConfigTest::::testOAuthConfig_3()",
      "78": "OAuthConfigTest::::testOAuthConfig_3()",
      "79": "OAuthConfigTest::::testOAuthConfig_3()",
      "80": "OAuthConfigTest::::testOAuthConfig_3()",
      "81": "OAuthConfigTest::::testOAuthConfig_3()",
      "82": "OAuthConfigTest::::testOAuthConfig_3()",
      "83": "OAuthConfigTest::::testOAuthConfig_3()",
      "84": "OAuthConfigTest::::testOAuthConfig_3()",
      "85": "OAuthConfigTest::::testOAuthConfig_3()",
      "86": "OAuthConfigTest::::testOAuthConfig_3()",
      "87": "OAuthConfigTest::::testOAuthConfig_3()",
      "88": "OAuthConfigTest::::testOAuthConfig_3()",
      "89": "OAuthConfigTest::::testOAuthConfig_3()",
      "90": "OAuthConfigTest::::testOAuthConfig_3()",
      "91": "OAuthConfigTest::::testOAuthConfig_3()",
      "92": "OAuthConfigTest::::testOAuthConfig_3()",
      "93": "OAuthConfigTest::::testOAuthConfig_3()",
      "101": "OAuthConfigTest::::testOAuthConfig_4()",
      "102": "OAuthConfigTest::::testOAuthConfig_4()",
      "103": "OAuthConfigTest::::testOAuthConfig_4()",
      "104": "OAuthConfigTest::::testOAuthConfig_4()",
      "105": "OAuthConfigTest::::testOAuthConfig_4()",
      "106": "OAuthConfigTest::::testOAuthConfig_4()",
      "107": "OAuthConfigTest::::testOAuthConfig_4()",
      "108": "OAuthConfigTest::::testOAuthConfig_4()",
      "109": "OAuthConfigTest::::testOAuthConfig_4()",
      "110": "OAuthConfigTest::::testOAuthConfig_4()",
      "111": "OAuthConfigTest::::testOAuthConfig_4()",
      "112": "OAuthConfigTest::::testOAuthConfig_4()",
      "113": "OAuthConfigTest::::testOAuthConfig_4()",
      "114": "OAuthConfigTest::::testOAuthConfig_4()",
      "115": "OAuthConfigTest::::testOAuthConfig_4()",
      "116": "OAuthConfigTest::::testOAuthConfig_4()",
      "117": "OAuthConfigTest::::testOAuthConfig_4()",
      "118": "OAuthConfigTest::::testOAuthConfig_4()",
      "119": "OAuthConfigTest::::testOAuthConfig_4()",
      "127": "OAuthConfigTest::::testGetApiKey_1()",
      "128": "OAuthConfigTest::::testGetApiKey_1()",
      "129": "OAuthConfigTest::::testGetApiKey_1()",
      "130": "OAuthConfigTest::::testGetApiKey_1()",
      "131": "OAuthConfigTest::::testGetApiKey_1()",
      "132": "OAuthConfigTest::::testGetApiKey_1()",
      "133": "OAuthConfigTest::::testGetApiKey_1()",
      "134": "OAuthConfigTest::::testGetApiKey_1()",
      "135": "OAuthConfigTest::::testGetApiKey_1()",
      "145": "OAuthConfigTest::::testGetApiSecret_1()",
      "146": "OAuthConfigTest::::testGetApiSecret_1()",
      "147": "OAuthConfigTest::::testGetApiSecret_1()",
      "148": "OAuthConfigTest::::testGetApiSecret_1()",
      "149": "OAuthConfigTest::::testGetApiSecret_1()",
      "150": "OAuthConfigTest::::testGetApiSecret_1()",
      "151": "OAuthConfigTest::::testGetApiSecret_1()",
      "152": "OAuthConfigTest::::testGetApiSecret_1()",
      "153": "OAuthConfigTest::::testGetApiSecret_1()",
      "161": "OAuthConfigTest::::testGetCallback_1()",
      "162": "OAuthConfigTest::::testGetCallback_1()",
      "163": "OAuthConfigTest::::testGetCallback_1()",
      "164": "OAuthConfigTest::::testGetCallback_1()",
      "165": "OAuthConfigTest::::testGetCallback_1()",
      "166": "OAuthConfigTest::::testGetCallback_1()",
      "167": "OAuthConfigTest::::testGetCallback_1()",
      "168": "OAuthConfigTest::::testGetCallback_1()",
      "169": "OAuthConfigTest::::testGetCallback_1()",
      "177": "OAuthConfigTest::::testGetDisplay_1()",
      "178": "OAuthConfigTest::::testGetDisplay_1()",
      "179": "OAuthConfigTest::::testGetDisplay_1()",
      "180": "OAuthConfigTest::::testGetDisplay_1()",
      "181": "OAuthConfigTest::::testGetDisplay_1()",
      "182": "OAuthConfigTest::::testGetDisplay_1()",
      "183": "OAuthConfigTest::::testGetDisplay_1()",
      "184": "OAuthConfigTest::::testGetDisplay_1()",
      "192": "OAuthConfigTest::::testGetScope_1()",
      "193": "OAuthConfigTest::::testGetScope_1()",
      "194": "OAuthConfigTest::::testGetScope_1()",
      "195": "OAuthConfigTest::::testGetScope_1()",
      "196": "OAuthConfigTest::::testGetScope_1()",
      "197": "OAuthConfigTest::::testGetScope_1()",
      "198": "OAuthConfigTest::::testGetScope_1()",
      "199": "OAuthConfigTest::::testGetScope_1()",
      "200": "OAuthConfigTest::::testGetScope_1()",
      "208": "OAuthConfigTest::::testHasScope_1()",
      "209": "OAuthConfigTest::::testHasScope_1()",
      "210": "OAuthConfigTest::::testHasScope_1()",
      "211": "OAuthConfigTest::::testHasScope_1()",
      "212": "OAuthConfigTest::::testHasScope_1()",
      "213": "OAuthConfigTest::::testHasScope_1()",
      "214": "OAuthConfigTest::::testHasScope_1()",
      "215": "OAuthConfigTest::::testHasScope_1()",
      "216": "OAuthConfigTest::::testHasScope_1()",
      "224": "OAuthConfigTest::::testSetRequestProxy_1()",
      "225": "OAuthConfigTest::::testSetRequestProxy_1()",
      "226": "OAuthConfigTest::::testSetRequestProxy_1()",
      "227": "OAuthConfigTest::::testSetRequestProxy_1()",
      "228": "OAuthConfigTest::::testSetRequestProxy_1()",
      "229": "OAuthConfigTest::::testSetRequestProxy_1()",
      "230": "OAuthConfigTest::::testSetRequestProxy_1()"
    },
    "tests": [
      {
        "test_lines": [
          27,
          42
        ],
        "covered_lines": [
          19,
          20,
          23,
          24,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          35,
          39,
          43,
          47,
          51,
          55
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          50,
          67
        ],
        "covered_lines": [
          23,
          24,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          35,
          39,
          43,
          47,
          51,
          55
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          75,
          93
        ],
        "covered_lines": [
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          35,
          39,
          43,
          47,
          51,
          55
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          101,
          119
        ],
        "covered_lines": [
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          35,
          39,
          43,
          47,
          51,
          55
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          127,
          135
        ],
        "covered_lines": [
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          35,
          62,
          63
        ],
        "label": "OAuthConfig::::getApiKey()"
      },
      {
        "test_lines": [
          145,
          153
        ],
        "covered_lines": [
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          39,
          62,
          63
        ],
        "label": "OAuthConfig::::getApiSecret()"
      },
      {
        "test_lines": [
          161,
          169
        ],
        "covered_lines": [
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          43,
          62,
          63
        ],
        "label": "OAuthConfig::::getCallback()"
      },
      {
        "test_lines": [
          177,
          184
        ],
        "covered_lines": [
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          55,
          62,
          63
        ],
        "label": "OAuthConfig::::getDisplay()"
      },
      {
        "test_lines": [
          192,
          200
        ],
        "covered_lines": [
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          47,
          62,
          63
        ],
        "label": "OAuthConfig::::getScope()"
      },
      {
        "test_lines": [
          208,
          216
        ],
        "covered_lines": [
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          51,
          62,
          63
        ],
        "label": "OAuthConfig::::hasScope()"
      },
      {
        "test_lines": [
          224,
          230
        ],
        "covered_lines": [
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          62,
          63
        ],
        "label": "OAuthConfig::::setRequestProxy(java.net.Proxy)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/auth/model/Verifier.java": {
    "class_content": [
      "package org.jinstagram.auth.model;\n",
      "\n",
      "import org.jinstagram.utils.Preconditions;\n",
      "\n",
      "/**\n",
      " * Represents an OAuth verifier code.\n",
      " */\n",
      "public class Verifier {\n",
      "\tprivate final String value;\n",
      "\n",
      "\t/**\n",
      "\t * Default constructor.\n",
      "\t * \n",
      "\t * @param value verifier value\n",
      "\t */\n",
      "\tpublic Verifier(String value) {\n",
      "\t\tPreconditions.checkNotNull(value, \"Must provide a valid string as verifier\");\n",
      "\n",
      "\t\tthis.value = value;\n",
      "\t}\n",
      "\n",
      "\tpublic String getValue() {\n",
      "\t\treturn value;\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.auth.model;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>VerifierTest</code> contains tests for the class\n",
      " * <code>{@link Verifier}</code>.\n",
      " * \n",
      " */\n",
      "public class VerifierTest {\n",
      "\t/**\n",
      "\t * Run the Verifier(String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testVerifier() throws Exception {\n",
      "\t\tString value = \"verifierCode\";\n",
      "\n",
      "\t\tVerifier result = new Verifier(value);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"verifierCode\", result.getValue());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getValue() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetValue() throws Exception {\n",
      "\t\tVerifier fixture = new Verifier(\"verifierCode\");\n",
      "\n",
      "\t\tString result = fixture.getValue();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"verifierCode\", result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "Verifier::::getValue()": [
        22,
        24
      ]
    },
    "test_method_lines_dic": {
      "VerifierTest::::testVerifier()": [
        20,
        28
      ],
      "VerifierTest::::testGetValue()": [
        36,
        44
      ]
    },
    "reverse_method_lines_dic": {
      "22": "Verifier::::getValue()",
      "23": "Verifier::::getValue()",
      "24": "Verifier::::getValue()"
    },
    "test_reverse_method_lines_dic": {
      "20": "VerifierTest::::testVerifier()",
      "21": "VerifierTest::::testVerifier()",
      "22": "VerifierTest::::testVerifier()",
      "23": "VerifierTest::::testVerifier()",
      "24": "VerifierTest::::testVerifier()",
      "25": "VerifierTest::::testVerifier()",
      "26": "VerifierTest::::testVerifier()",
      "27": "VerifierTest::::testVerifier()",
      "28": "VerifierTest::::testVerifier()",
      "36": "VerifierTest::::testGetValue()",
      "37": "VerifierTest::::testGetValue()",
      "38": "VerifierTest::::testGetValue()",
      "39": "VerifierTest::::testGetValue()",
      "40": "VerifierTest::::testGetValue()",
      "41": "VerifierTest::::testGetValue()",
      "42": "VerifierTest::::testGetValue()",
      "43": "VerifierTest::::testGetValue()",
      "44": "VerifierTest::::testGetValue()"
    },
    "tests": [
      {
        "test_lines": [
          20,
          28
        ],
        "covered_lines": [
          16,
          17,
          19,
          20,
          23
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          36,
          44
        ],
        "covered_lines": [
          16,
          17,
          19,
          20,
          23
        ],
        "label": "Verifier::::getValue()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/exceptions/InstagramRateLimitException.java": {
    "class_content": [
      "package org.jinstagram.exceptions;\n",
      "\n",
      "import java.util.Map;\n",
      "\n",
      "public class InstagramRateLimitException extends InstagramException {\n",
      "\tprivate static final long serialVersionUID = 1L;\n",
      "\n",
      "\t/**\n",
      "\t * No-exception constructor. Used when there is no original exception\n",
      "\t *\n",
      "\t * @param message message explaining what went wrong\n",
      "\t */\n",
      "\tpublic InstagramRateLimitException(String message) {\n",
      "\t\tsuper(message);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * No-exception constructor with response headers. \n",
      "\t * Used when there is no original exception\n",
      "\t * \n",
      "\t * @param message message explaining what went wrong\n",
      "\t * @param responseHeaders the headers obtained from Instagram http response\n",
      "\t */\n",
      "\tpublic InstagramRateLimitException(String message, Map<String, String> responseHeaders) {\n",
      "\t\tsuper(message, responseHeaders);\n",
      "\t}\n",
      "\n",
      "    /**\n",
      "     * No-exception constructor with response headers.\n",
      "     * Used when there is no original exception\n",
      "     *\n",
      "     * @param message message explaining what went wrong\n",
      "     * @param responseHeaders the headers obtained from Instagram http response\n",
      "     */\n",
      "    public InstagramRateLimitException(String exceptionType, String message, Map<String, String> responseHeaders) {\n",
      "        super(exceptionType, message, responseHeaders);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "\t * Default constructor\n",
      "\t *\n",
      "\t * @param message message explaining what went wrong\n",
      "\t * @param e original exception\n",
      "\t */\n",
      "\tpublic InstagramRateLimitException(String message, Exception e) {\n",
      "\t\tsuper(message, e);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Constructor with response headers\n",
      "\t * @param message message explaining what went wrong\n",
      "\t * @param e original exception\n",
      "\t * @param responseHeaders the headers obtained from Instagram http response\n",
      "\t */\n",
      "\tpublic InstagramRateLimitException(String message, Exception e, Map<String, String> responseHeaders) {\n",
      "\t\tsuper(message, e, responseHeaders);\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.exceptions;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>InstagramRateLimitExceptionTest</code> contains tests for the\n",
      " * class <code>{@link InstagramRateLimitException}</code>.\n",
      " *\n",
      " */\n",
      "public class InstagramRateLimitExceptionTest {\n",
      "\t/**\n",
      "\t * Run the InstagramRateLimitException(String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramRateLimitException_1() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\n",
      "\t\tInstagramRateLimitException result = new InstagramRateLimitException(message);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(null, result.getCause());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramRateLimitException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramRateLimitException(String,Exception) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramRateLimitException_2() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\t\tException e = new Exception();\n",
      "\n",
      "\t\tInstagramRateLimitException result = new InstagramRateLimitException(message, e);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramRateLimitException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramRateLimitException(String,Map<String,String>)\n",
      "\t * constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramRateLimitException_3() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\t\tMap<String, String> responseHeaders = new HashMap<String, String>();\n",
      "\n",
      "\t\tInstagramRateLimitException result = new InstagramRateLimitException(message, responseHeaders);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(null, result.getCause());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramRateLimitException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramRateLimitException(String,Exception,Map<String,String>)\n",
      "\t * constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramRateLimitException_4() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\t\tException e = new Exception();\n",
      "\t\tMap<String, String> responseHeaders = new HashMap<String, String>();\n",
      "\n",
      "\t\tInstagramRateLimitException result = new InstagramRateLimitException(message, e, responseHeaders);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramRateLimitException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()": [
        22,
        36
      ],
      "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()": [
        45,
        59
      ],
      "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()": [
        69,
        84
      ],
      "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()": [
        94,
        109
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "22": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "23": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "24": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "25": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "26": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "27": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "28": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "29": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "30": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "31": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "32": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "33": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "34": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "35": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "36": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_1()",
      "45": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "46": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "47": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "48": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "49": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "50": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "51": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "52": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "53": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "54": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "55": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "56": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "57": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "58": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "59": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_2()",
      "69": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "70": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "71": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "72": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "73": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "74": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "75": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "76": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "77": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "78": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "79": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "80": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "81": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "82": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "83": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "84": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_3()",
      "94": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "95": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "96": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "97": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "98": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "99": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "100": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "101": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "102": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "103": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "104": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "105": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "106": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "107": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "108": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()",
      "109": "InstagramRateLimitExceptionTest::::testInstagramRateLimitException_4()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          36
        ],
        "covered_lines": [
          14,
          15
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          45,
          59
        ],
        "covered_lines": [
          46,
          47
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          69,
          84
        ],
        "covered_lines": [
          25,
          26
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          94,
          109
        ],
        "covered_lines": [
          56,
          57
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/exceptions/InstagramBadRequestException.java": {
    "class_content": [
      "package org.jinstagram.exceptions;\n",
      "\n",
      "import java.util.Map;\n",
      "\n",
      "/**\n",
      " * An exception class to deal with a bad request.\n",
      " */\n",
      "public class InstagramBadRequestException extends InstagramException {\n",
      "\tprivate static final long serialVersionUID = 1L;\n",
      "\n",
      "\t/**\n",
      "\t * No-exception constructor. Used when there is no original exception\n",
      "\t *\n",
      "\t * @param message message explaining what went wrong\n",
      "\t */\n",
      "\tpublic InstagramBadRequestException(String message) {\n",
      "\t\tsuper(message);\n",
      "\t}\n",
      "\n",
      "    /**\n",
      "     * No-exception constructor with response headers.\n",
      "     * Used when there is no original exception\n",
      "     *\n",
      "     * @param message message explaining what went wrong\n",
      "     * @param responseHeaders the headers obtained from Instagram http response\n",
      "     */\n",
      "    public InstagramBadRequestException(String message, Map<String, String> responseHeaders) {\n",
      "        super(message, responseHeaders);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * No-exception constructor with response headers.\n",
      "     * Used when there is no original exception\n",
      "     *\n",
      "     * @param message message explaining what went wrong\n",
      "     * @param responseHeaders the headers obtained from Instagram http response\n",
      "     */\n",
      "    public InstagramBadRequestException(String exceptionType, String message, Map<String, String> responseHeaders) {\n",
      "        super(exceptionType, message, responseHeaders);\n",
      "    }\n",
      "\n",
      "\n",
      "\t/**\n",
      "\t * Default constructor\n",
      "\t *\n",
      "\t * @param message message explaining what went wrong\n",
      "\t * @param e original exception\n",
      "\t */\n",
      "\tpublic InstagramBadRequestException(String message, Exception e) {\n",
      "\t\tsuper(message, e);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Constructor with response headers\n",
      "\t * @param message message explaining what went wrong\n",
      "\t * @param e original exception\n",
      "\t * @param responseHeaders the headers obtained from Instagram http response\n",
      "\t */\n",
      "\tpublic InstagramBadRequestException(String message, Exception e, Map<String, String> responseHeaders) {\n",
      "\t\tsuper(message, e, responseHeaders);\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.exceptions;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>InstagramBadRequestExceptionTest</code> contains tests for\n",
      " * the class <code>{@link InstagramBadRequestException}</code>.\n",
      " */\n",
      "public class InstagramBadRequestExceptionTest {\n",
      "\t/**\n",
      "\t * Run the InstagramBadRequestException(String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramBadRequestException_1() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\n",
      "\t\tInstagramBadRequestException result = new InstagramBadRequestException(message);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(null, result.getCause());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramBadRequestException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramBadRequestException(String,Exception) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramBadRequestException_2() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\t\tException e = new Exception();\n",
      "\n",
      "\t\tInstagramBadRequestException result = new InstagramBadRequestException(message, e);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramBadRequestException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramBadRequestException(String,Map<String,String>)\n",
      "\t * constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramBadRequestException_3() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\t\tMap<String, String> responseHeaders = new HashMap<String, String>();\n",
      "\n",
      "\t\tInstagramBadRequestException result = new InstagramBadRequestException(message, responseHeaders);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(null, result.getCause());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramBadRequestException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramBadRequestException(String,Exception,Map<String,String>)\n",
      "\t * constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramBadRequestException_4() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\t\tException e = new Exception();\n",
      "\t\tMap<String, String> responseHeaders = new HashMap<String, String>();\n",
      "\n",
      "\t\tInstagramBadRequestException result = new InstagramBadRequestException(message, e, responseHeaders);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramBadRequestException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()": [
        21,
        35
      ],
      "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()": [
        44,
        58
      ],
      "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()": [
        68,
        83
      ],
      "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()": [
        93,
        108
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "21": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "22": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "23": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "24": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "25": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "26": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "27": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "28": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "29": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "30": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "31": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "32": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "33": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "34": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "35": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_1()",
      "44": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "45": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "46": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "47": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "48": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "49": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "50": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "51": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "52": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "53": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "54": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "55": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "56": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "57": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "58": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_2()",
      "68": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "69": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "70": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "71": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "72": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "73": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "74": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "75": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "76": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "77": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "78": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "79": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "80": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "81": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "82": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "83": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_3()",
      "93": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "94": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "95": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "96": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "97": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "98": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "99": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "100": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "101": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "102": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "103": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "104": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "105": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "106": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "107": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()",
      "108": "InstagramBadRequestExceptionTest::::testInstagramBadRequestException_4()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          35
        ],
        "covered_lines": [
          17,
          18
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          44,
          58
        ],
        "covered_lines": [
          50,
          51
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          68,
          83
        ],
        "covered_lines": [
          28,
          29
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          93,
          108
        ],
        "covered_lines": [
          60,
          61
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/exceptions/InstagramException.java": {
    "class_content": [
      "package org.jinstagram.exceptions;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.jinstagram.InstagramResponse;\n",
      "import org.jinstagram.http.APILimitUtils;\n",
      "\n",
      "public class InstagramException extends IOException implements InstagramResponse {\n",
      "\tprivate static final long serialVersionUID = 942488788539151888L;\n",
      "\n",
      "\tprivate final Map<String, String> headers;\n",
      "\n",
      "    private final String errorType;\n",
      "\n",
      "\t/**\n",
      "\t * No-exception constructor. Used when there is no original exception\n",
      "\t * \n",
      "\t * @param message message explaining what went wrong\n",
      "\t */\n",
      "\tpublic InstagramException(String message) {\n",
      "\t\tsuper(message, null);\n",
      "\t\tthis.headers = null;\n",
      "        this.errorType = null;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * No-exception constructor with response headers. \n",
      "\t * Used when there is no original exception\n",
      "\t * \n",
      "\t * @param message message explaining what went wrong\n",
      "\t * @param responseHeaders the headers obtained from Instagram http response\n",
      "\t */\n",
      "\tpublic InstagramException(String message, Map<String, String> responseHeaders) {\n",
      "\t\tsuper(message, null);\n",
      "\t\tthis.headers = responseHeaders;\n",
      "        this.errorType = null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * No-exception constructor with response headers.\n",
      "     * Used when there is no original exception\n",
      "     *\n",
      "     * @param message message explaining what went wrong\n",
      "     * @param responseHeaders the headers obtained from Instagram http response\n",
      "     */\n",
      "    public InstagramException(String exceptionType, String message, Map<String, String> responseHeaders) {\n",
      "        super(message, null);\n",
      "        this.headers = responseHeaders;\n",
      "        this.errorType = exceptionType;\n",
      "    }\n",
      "\n",
      "\t/**\n",
      "\t * Default constructor\n",
      "\t * \n",
      "\t * @param message message explaining what went wrong\n",
      "\t * @param e original exception\n",
      "\t */\n",
      "\tpublic InstagramException(String message, Exception e) {\n",
      "\t\tsuper(message, e);\n",
      "\t\tthis.headers = null;\n",
      "        this.errorType = null;\n",
      "\n",
      "    }\n",
      "\n",
      "\t/**\n",
      "\t * Constructor with response headers\n",
      "\t * @param message message explaining what went wrong\n",
      "\t * @param e original exception\n",
      "\t * @param responseHeaders the headers obtained from Instagram http response\n",
      "\t */\n",
      "\tpublic InstagramException(String message, Exception e, Map<String, String> responseHeaders) {\n",
      "\t\tsuper(message, e);\n",
      "\t\tthis.headers = responseHeaders;\n",
      "        this.errorType = null;\n",
      "    }\n",
      "\n",
      "    public String getErrorType() {\n",
      "        return errorType;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "\tpublic int getAPILimitStatus() {\n",
      "\t\tif (headers == null) {\n",
      "\t\t\treturn -1;\n",
      "\t\t} else {\n",
      "\t\t\treturn APILimitUtils.getAPILimitStatus(this.headers);\n",
      "\t\t}\n",
      "\t}\n",
      "\n",
      "    @Override\n",
      "    public int getRemainingLimitStatus() {\n",
      "        if (headers == null) {\n",
      "            return -1;\n",
      "        } else {\n",
      "            return APILimitUtils.getRemainingLimitStatus(this.headers);\n",
      "        }\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.exceptions;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "/**\n",
      " * The class <code>InstagramExceptionTest</code> contains tests for the class\n",
      " * <code>{@link InstagramException}</code>.\n",
      " */\n",
      "public class InstagramExceptionTest {\n",
      "\t/**\n",
      "\t * Run the InstagramException(String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramException_1() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\n",
      "\t\tInstagramException result = new InstagramException(message);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(null, result.getCause());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramException(String,Exception) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramException_2() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\t\tException e = new Exception();\n",
      "\n",
      "\t\tInstagramException result = new InstagramException(message, e);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramException(String,Map<String,String>) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramException_3() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\t\tMap<String, String> responseHeaders = new HashMap<String, String>();\n",
      "\n",
      "\t\tInstagramException result = new InstagramException(message, responseHeaders);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(null, result.getCause());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InstagramException(String,Exception,Map<String,String>)\n",
      "\t * constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testInstagramException_4() throws Exception {\n",
      "\t\tString message = \"\";\n",
      "\t\tException e = new Exception();\n",
      "\t\tMap<String, String> responseHeaders = new HashMap<String, String>();\n",
      "\n",
      "\t\tInstagramException result = new InstagramException(message, e, responseHeaders);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(-1, result.getAPILimitStatus());\n",
      "\t\tassertEquals(-1, result.getRemainingLimitStatus());\n",
      "\t\tassertEquals(\"org.jinstagram.exceptions.InstagramException: \", result.toString());\n",
      "\t\tassertEquals(\"\", result.getLocalizedMessage());\n",
      "\t\tassertEquals(\"\", result.getMessage());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the int getAPILimitStatus() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetAPILimitStatus_1() throws Exception {\n",
      "\t\tInstagramException fixture = new InstagramException(\"\", new Exception(), null);\n",
      "\n",
      "\t\tint result = fixture.getAPILimitStatus();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(-1, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the int getRemainingLimitStatus() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetRemainingLimitStatus_1() throws Exception {\n",
      "\t\tInstagramException fixture = new InstagramException(\"\", new Exception(), null);\n",
      "\n",
      "\t\tint result = fixture.getRemainingLimitStatus();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(-1, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the int getErrorType() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetErrorType() throws Exception {\n",
      "\t\tInstagramException fixture = new InstagramException(\n",
      "\t\t\t\"APINotAllowedError\",\n",
      "\t\t\t\"APINotAllowedError: you cannot view this resource\",\n",
      "\t\t\tnull\n",
      "\t\t);\n",
      "\n",
      "\t\tassertEquals(\"APINotAllowedError\", fixture.getErrorType());\n",
      "\t\tassertEquals(\"APINotAllowedError: you cannot view this resource\", fixture.getMessage());\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "InstagramException::::getErrorType()": [
        78,
        80
      ],
      "InstagramException::::getAPILimitStatus()": [
        82,
        89
      ],
      "InstagramException::::getRemainingLimitStatus()": [
        91,
        98
      ]
    },
    "test_method_lines_dic": {
      "InstagramExceptionTest::::testInstagramException_1()": [
        22,
        36
      ],
      "InstagramExceptionTest::::testInstagramException_2()": [
        44,
        58
      ],
      "InstagramExceptionTest::::testInstagramException_3()": [
        66,
        81
      ],
      "InstagramExceptionTest::::testInstagramException_4()": [
        90,
        105
      ],
      "InstagramExceptionTest::::testGetAPILimitStatus_1()": [
        113,
        121
      ],
      "InstagramExceptionTest::::testGetRemainingLimitStatus_1()": [
        129,
        137
      ],
      "InstagramExceptionTest::::testGetErrorType()": [
        145,
        155
      ]
    },
    "reverse_method_lines_dic": {
      "78": "InstagramException::::getErrorType()",
      "79": "InstagramException::::getErrorType()",
      "80": "InstagramException::::getErrorType()",
      "82": "InstagramException::::getAPILimitStatus()",
      "83": "InstagramException::::getAPILimitStatus()",
      "84": "InstagramException::::getAPILimitStatus()",
      "85": "InstagramException::::getAPILimitStatus()",
      "86": "InstagramException::::getAPILimitStatus()",
      "87": "InstagramException::::getAPILimitStatus()",
      "88": "InstagramException::::getAPILimitStatus()",
      "89": "InstagramException::::getAPILimitStatus()",
      "91": "InstagramException::::getRemainingLimitStatus()",
      "92": "InstagramException::::getRemainingLimitStatus()",
      "93": "InstagramException::::getRemainingLimitStatus()",
      "94": "InstagramException::::getRemainingLimitStatus()",
      "95": "InstagramException::::getRemainingLimitStatus()",
      "96": "InstagramException::::getRemainingLimitStatus()",
      "97": "InstagramException::::getRemainingLimitStatus()",
      "98": "InstagramException::::getRemainingLimitStatus()"
    },
    "test_reverse_method_lines_dic": {
      "22": "InstagramExceptionTest::::testInstagramException_1()",
      "23": "InstagramExceptionTest::::testInstagramException_1()",
      "24": "InstagramExceptionTest::::testInstagramException_1()",
      "25": "InstagramExceptionTest::::testInstagramException_1()",
      "26": "InstagramExceptionTest::::testInstagramException_1()",
      "27": "InstagramExceptionTest::::testInstagramException_1()",
      "28": "InstagramExceptionTest::::testInstagramException_1()",
      "29": "InstagramExceptionTest::::testInstagramException_1()",
      "30": "InstagramExceptionTest::::testInstagramException_1()",
      "31": "InstagramExceptionTest::::testInstagramException_1()",
      "32": "InstagramExceptionTest::::testInstagramException_1()",
      "33": "InstagramExceptionTest::::testInstagramException_1()",
      "34": "InstagramExceptionTest::::testInstagramException_1()",
      "35": "InstagramExceptionTest::::testInstagramException_1()",
      "36": "InstagramExceptionTest::::testInstagramException_1()",
      "44": "InstagramExceptionTest::::testInstagramException_2()",
      "45": "InstagramExceptionTest::::testInstagramException_2()",
      "46": "InstagramExceptionTest::::testInstagramException_2()",
      "47": "InstagramExceptionTest::::testInstagramException_2()",
      "48": "InstagramExceptionTest::::testInstagramException_2()",
      "49": "InstagramExceptionTest::::testInstagramException_2()",
      "50": "InstagramExceptionTest::::testInstagramException_2()",
      "51": "InstagramExceptionTest::::testInstagramException_2()",
      "52": "InstagramExceptionTest::::testInstagramException_2()",
      "53": "InstagramExceptionTest::::testInstagramException_2()",
      "54": "InstagramExceptionTest::::testInstagramException_2()",
      "55": "InstagramExceptionTest::::testInstagramException_2()",
      "56": "InstagramExceptionTest::::testInstagramException_2()",
      "57": "InstagramExceptionTest::::testInstagramException_2()",
      "58": "InstagramExceptionTest::::testInstagramException_2()",
      "66": "InstagramExceptionTest::::testInstagramException_3()",
      "67": "InstagramExceptionTest::::testInstagramException_3()",
      "68": "InstagramExceptionTest::::testInstagramException_3()",
      "69": "InstagramExceptionTest::::testInstagramException_3()",
      "70": "InstagramExceptionTest::::testInstagramException_3()",
      "71": "InstagramExceptionTest::::testInstagramException_3()",
      "72": "InstagramExceptionTest::::testInstagramException_3()",
      "73": "InstagramExceptionTest::::testInstagramException_3()",
      "74": "InstagramExceptionTest::::testInstagramException_3()",
      "75": "InstagramExceptionTest::::testInstagramException_3()",
      "76": "InstagramExceptionTest::::testInstagramException_3()",
      "77": "InstagramExceptionTest::::testInstagramException_3()",
      "78": "InstagramExceptionTest::::testInstagramException_3()",
      "79": "InstagramExceptionTest::::testInstagramException_3()",
      "80": "InstagramExceptionTest::::testInstagramException_3()",
      "81": "InstagramExceptionTest::::testInstagramException_3()",
      "90": "InstagramExceptionTest::::testInstagramException_4()",
      "91": "InstagramExceptionTest::::testInstagramException_4()",
      "92": "InstagramExceptionTest::::testInstagramException_4()",
      "93": "InstagramExceptionTest::::testInstagramException_4()",
      "94": "InstagramExceptionTest::::testInstagramException_4()",
      "95": "InstagramExceptionTest::::testInstagramException_4()",
      "96": "InstagramExceptionTest::::testInstagramException_4()",
      "97": "InstagramExceptionTest::::testInstagramException_4()",
      "98": "InstagramExceptionTest::::testInstagramException_4()",
      "99": "InstagramExceptionTest::::testInstagramException_4()",
      "100": "InstagramExceptionTest::::testInstagramException_4()",
      "101": "InstagramExceptionTest::::testInstagramException_4()",
      "102": "InstagramExceptionTest::::testInstagramException_4()",
      "103": "InstagramExceptionTest::::testInstagramException_4()",
      "104": "InstagramExceptionTest::::testInstagramException_4()",
      "105": "InstagramExceptionTest::::testInstagramException_4()",
      "113": "InstagramExceptionTest::::testGetAPILimitStatus_1()",
      "114": "InstagramExceptionTest::::testGetAPILimitStatus_1()",
      "115": "InstagramExceptionTest::::testGetAPILimitStatus_1()",
      "116": "InstagramExceptionTest::::testGetAPILimitStatus_1()",
      "117": "InstagramExceptionTest::::testGetAPILimitStatus_1()",
      "118": "InstagramExceptionTest::::testGetAPILimitStatus_1()",
      "119": "InstagramExceptionTest::::testGetAPILimitStatus_1()",
      "120": "InstagramExceptionTest::::testGetAPILimitStatus_1()",
      "121": "InstagramExceptionTest::::testGetAPILimitStatus_1()",
      "129": "InstagramExceptionTest::::testGetRemainingLimitStatus_1()",
      "130": "InstagramExceptionTest::::testGetRemainingLimitStatus_1()",
      "131": "InstagramExceptionTest::::testGetRemainingLimitStatus_1()",
      "132": "InstagramExceptionTest::::testGetRemainingLimitStatus_1()",
      "133": "InstagramExceptionTest::::testGetRemainingLimitStatus_1()",
      "134": "InstagramExceptionTest::::testGetRemainingLimitStatus_1()",
      "135": "InstagramExceptionTest::::testGetRemainingLimitStatus_1()",
      "136": "InstagramExceptionTest::::testGetRemainingLimitStatus_1()",
      "137": "InstagramExceptionTest::::testGetRemainingLimitStatus_1()",
      "145": "InstagramExceptionTest::::testGetErrorType()",
      "146": "InstagramExceptionTest::::testGetErrorType()",
      "147": "InstagramExceptionTest::::testGetErrorType()",
      "148": "InstagramExceptionTest::::testGetErrorType()",
      "149": "InstagramExceptionTest::::testGetErrorType()",
      "150": "InstagramExceptionTest::::testGetErrorType()",
      "151": "InstagramExceptionTest::::testGetErrorType()",
      "152": "InstagramExceptionTest::::testGetErrorType()",
      "153": "InstagramExceptionTest::::testGetErrorType()",
      "154": "InstagramExceptionTest::::testGetErrorType()",
      "155": "InstagramExceptionTest::::testGetErrorType()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          36
        ],
        "covered_lines": [
          22,
          23,
          24,
          25,
          84,
          85,
          93,
          94
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          44,
          58
        ],
        "covered_lines": [
          60,
          61,
          62,
          64,
          84,
          85,
          93,
          94
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          66,
          81
        ],
        "covered_lines": [
          35,
          36,
          37,
          38,
          84,
          87,
          93,
          96
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          90,
          105
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          84,
          87,
          93,
          96
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      },
      {
        "test_lines": [
          113,
          121
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          84,
          85
        ],
        "label": "InstagramException::::getAPILimitStatus()"
      },
      {
        "test_lines": [
          129,
          137
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          93,
          94
        ],
        "label": "InstagramException::::getRemainingLimitStatus()"
      },
      {
        "test_lines": [
          145,
          155
        ],
        "covered_lines": [
          48,
          49,
          50,
          51,
          79
        ],
        "label": "InstagramException::::getErrorType()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/model/Relationship.java": {
    "class_content": [
      "package org.jinstagram.model;\n",
      "\n",
      "public enum Relationship {\n",
      "\tFOLLOW, UNFOLLOW, BLOCK, UNBLOCK, APPROVE, DENY;\n",
      "\n",
      "\t@Override\n",
      "\tpublic String toString() {\n",
      "\t\treturn super.toString().toLowerCase();\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.model;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>RelationshipTest</code> contains tests for the class <code>{@link Relationship}</code>.\n",
      " *\n",
      " * @generatedBy CodePro at 31/08/15 16:48\n",
      " * @author sachin.handiekar\n",
      " * @version $Revision: 1.0 $\n",
      " */\n",
      "public class RelationshipTest {\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tRelationship fixture = Relationship.APPROVE;\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"approve\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the initialization fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp()\n",
      "\t\tthrows Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown()\n",
      "\t\tthrows Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args the command line arguments\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(RelationshipTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {
      "Relationship::::toString()": [
        6,
        9
      ]
    },
    "test_method_lines_dic": {
      "RelationshipTest::::testToString_1()": [
        21,
        30
      ],
      "RelationshipTest::::setUp()": [
        40,
        44
      ],
      "RelationshipTest::::tearDown()": [
        54,
        58
      ],
      "RelationshipTest::::main(java.lang.String[])": [
        67,
        69
      ]
    },
    "reverse_method_lines_dic": {
      "6": "Relationship::::toString()",
      "7": "Relationship::::toString()",
      "8": "Relationship::::toString()",
      "9": "Relationship::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "21": "RelationshipTest::::testToString_1()",
      "22": "RelationshipTest::::testToString_1()",
      "23": "RelationshipTest::::testToString_1()",
      "24": "RelationshipTest::::testToString_1()",
      "25": "RelationshipTest::::testToString_1()",
      "26": "RelationshipTest::::testToString_1()",
      "27": "RelationshipTest::::testToString_1()",
      "28": "RelationshipTest::::testToString_1()",
      "29": "RelationshipTest::::testToString_1()",
      "30": "RelationshipTest::::testToString_1()",
      "40": "RelationshipTest::::setUp()",
      "41": "RelationshipTest::::setUp()",
      "42": "RelationshipTest::::setUp()",
      "43": "RelationshipTest::::setUp()",
      "44": "RelationshipTest::::setUp()",
      "54": "RelationshipTest::::tearDown()",
      "55": "RelationshipTest::::tearDown()",
      "56": "RelationshipTest::::tearDown()",
      "57": "RelationshipTest::::tearDown()",
      "58": "RelationshipTest::::tearDown()",
      "67": "RelationshipTest::::main(java.lang.String[])",
      "68": "RelationshipTest::::main(java.lang.String[])",
      "69": "RelationshipTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          21,
          30
        ],
        "covered_lines": [
          3,
          4,
          8
        ],
        "label": "Relationship::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/model/Constants.java": {
    "class_content": [
      "package org.jinstagram.model;\n",
      "\n",
      "public final class Constants {\n",
      "\tpublic static final String BASE_URI = \"https://api.instagram.com\";\n",
      "\n",
      "\tpublic static final String VERSION = \"v1\";\n",
      "\n",
      "\tpublic static final String API_URL = String.format(\"%s/%s\", BASE_URI, VERSION);\n",
      "\n",
      "\tpublic static final String OEMBED_URL = BASE_URI;\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.model;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>ConstantsTest</code> contains tests for the class <code>{@link Constants}</code>.\n",
      " *\n",
      " * @generatedBy CodePro at 31/08/15 16:48\n",
      " * @author sachin.handiekar\n",
      " * @version $Revision: 1.0 $\n",
      " */\n",
      "public class ConstantsTest {\n",
      "\t/**\n",
      "\t * Run the Constants() constructor test.\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testConstants_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tConstants result = new Constants();\n",
      "\t\tassertNotNull(result);\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the initialization fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp()\n",
      "\t\tthrows Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown()\n",
      "\t\tthrows Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args the command line arguments\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(ConstantsTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "ConstantsTest::::testConstants_1()": [
        19,
        25
      ],
      "ConstantsTest::::setUp()": [
        35,
        39
      ],
      "ConstantsTest::::tearDown()": [
        49,
        53
      ],
      "ConstantsTest::::main(java.lang.String[])": [
        62,
        64
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "19": "ConstantsTest::::testConstants_1()",
      "20": "ConstantsTest::::testConstants_1()",
      "21": "ConstantsTest::::testConstants_1()",
      "22": "ConstantsTest::::testConstants_1()",
      "23": "ConstantsTest::::testConstants_1()",
      "24": "ConstantsTest::::testConstants_1()",
      "25": "ConstantsTest::::testConstants_1()",
      "35": "ConstantsTest::::setUp()",
      "36": "ConstantsTest::::setUp()",
      "37": "ConstantsTest::::setUp()",
      "38": "ConstantsTest::::setUp()",
      "39": "ConstantsTest::::setUp()",
      "49": "ConstantsTest::::tearDown()",
      "50": "ConstantsTest::::tearDown()",
      "51": "ConstantsTest::::tearDown()",
      "52": "ConstantsTest::::tearDown()",
      "53": "ConstantsTest::::tearDown()",
      "62": "ConstantsTest::::main(java.lang.String[])",
      "63": "ConstantsTest::::main(java.lang.String[])",
      "64": "ConstantsTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          19,
          25
        ],
        "covered_lines": [
          3,
          8
        ],
        "label": "<<UNRECOGNISED_METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/model/Scope.java": {
    "class_content": [
      "package org.jinstagram.model;\n",
      "\n",
      "public enum Scope {\n",
      "\n",
      "\t/**\n",
      "\t * A field to denote the scope 'basic'\n",
      "\t *\n",
      "\t * basic - Be able to read all data related to a user: Following/Followed-By\n",
      "\t * Lists, Photos, etc. (granted by default)\n",
      "\t */\n",
      "\tBASIC,\n",
      "\n",
      "\t/**\n",
      "\t * A field to denote the scope 'comments'\n",
      "\t *\n",
      "\t * comments - Be able to create or delete comments on a user's behalf\n",
      "\t */\n",
      "\tCOMMENTS,\n",
      "\n",
      "\t/**\n",
      "\t * A field to denote the scope 'likes'\n",
      "\t *\n",
      "\t * likes - Be able to like and unlike items on a user's behalf\n",
      "\t */\n",
      "\tLIKES,\n",
      "\n",
      "\t/**\n",
      "\t * A field to denote the scope 'relationships'\n",
      "\t *\n",
      "\t * relationships - Be able to follow and unfollow users on a user's behalf\n",
      "\t */\n",
      "\tRELATIONSHIPS;\n",
      "\n",
      "\t@Override\n",
      "\tpublic String toString() {\n",
      "\t\treturn super.toString().toLowerCase();\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.model;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>ScopeTest</code> contains tests for the class <code>{@link Scope}</code>.\n",
      " *\n",
      " * @generatedBy CodePro at 31/08/15 16:48\n",
      " * @author sachin.handiekar\n",
      " * @version $Revision: 1.0 $\n",
      " */\n",
      "public class ScopeTest {\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tScope fixture = Scope.BASIC;\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"basic\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the initialization fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp()\n",
      "\t\tthrows Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown()\n",
      "\t\tthrows Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args the command line arguments\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(ScopeTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {
      "Scope::::toString()": [
        34,
        37
      ]
    },
    "test_method_lines_dic": {
      "ScopeTest::::testToString_1()": [
        21,
        30
      ],
      "ScopeTest::::setUp()": [
        40,
        44
      ],
      "ScopeTest::::tearDown()": [
        54,
        58
      ],
      "ScopeTest::::main(java.lang.String[])": [
        67,
        69
      ]
    },
    "reverse_method_lines_dic": {
      "34": "Scope::::toString()",
      "35": "Scope::::toString()",
      "36": "Scope::::toString()",
      "37": "Scope::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "21": "ScopeTest::::testToString_1()",
      "22": "ScopeTest::::testToString_1()",
      "23": "ScopeTest::::testToString_1()",
      "24": "ScopeTest::::testToString_1()",
      "25": "ScopeTest::::testToString_1()",
      "26": "ScopeTest::::testToString_1()",
      "27": "ScopeTest::::testToString_1()",
      "28": "ScopeTest::::testToString_1()",
      "29": "ScopeTest::::testToString_1()",
      "30": "ScopeTest::::testToString_1()",
      "40": "ScopeTest::::setUp()",
      "41": "ScopeTest::::setUp()",
      "42": "ScopeTest::::setUp()",
      "43": "ScopeTest::::setUp()",
      "44": "ScopeTest::::setUp()",
      "54": "ScopeTest::::tearDown()",
      "55": "ScopeTest::::tearDown()",
      "56": "ScopeTest::::tearDown()",
      "57": "ScopeTest::::tearDown()",
      "58": "ScopeTest::::tearDown()",
      "67": "ScopeTest::::main(java.lang.String[])",
      "68": "ScopeTest::::main(java.lang.String[])",
      "69": "ScopeTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          21,
          30
        ],
        "covered_lines": [
          3,
          11,
          18,
          25,
          32,
          36
        ],
        "label": "Scope::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/model/Methods.java": {
    "class_content": [
      "package org.jinstagram.model;\n",
      "\n",
      "public final class Methods {\n",
      "\n",
      "\t/**\n",
      "\t * Remove a comment either on the authenticated user's media or authored by\n",
      "\t * the authenticated user.\n",
      "\t *\n",
      "\t * Required scope: comments\n",
      "\t *\n",
      "\t * DELETE /media/{id}/comments/{id}\n",
      "\t */\n",
      "\tpublic static final String DELETE_MEDIA_COMMENTS = \"/media/%s/comments/%s\";\n",
      "\n",
      "\t/**\n",
      "\t * Get most recent media from a geography subscription that you created.\n",
      "\t * Note: you can only access Geographies that were explicitly created by\n",
      "\t * your OAuth client.\n",
      "\t */\n",
      "    @Deprecated\n",
      "\tpublic static final String GEOGRAPHIES_RECENT_MEDIA_BY_ID = \"/geographies/%s/media/recent\";\n",
      "\n",
      "\t/**\n",
      "\t * Get a list of users who have liked this media.\n",
      "\t *\n",
      "\t * Required scope : likes\n",
      "\t */\n",
      "\tpublic static final String LIKES_BY_MEDIA_ID = \"/media/%s/likes\";\n",
      "\n",
      "\t/**\n",
      "\t * Get information about a location.\n",
      "\t */\n",
      "\tpublic static final String LOCATIONS_BY_ID = \"/locations/%s\";\n",
      "\n",
      "\t/**\n",
      "\t * Get a list of recent media objects from a given location.\n",
      "\t */\n",
      "\tpublic static final String LOCATIONS_RECENT_MEDIA_BY_ID = \"/locations/%s/media/recent\";\n",
      "\n",
      "\t/**\n",
      "\t * Search for a location by geographic coordinate.\n",
      "\t */\n",
      "\tpublic static final String LOCATIONS_SEARCH = \"/locations/search\";\n",
      "\n",
      "\t/**\n",
      "\t * Get information about a media object.\n",
      "\t */\n",
      "\tpublic static final String MEDIA_BY_ID = \"/media/%s\";\n",
      "\n",
      "    /**\n",
      "     * Get information about a media object.\n",
      "     */\n",
      "    public static final String MEDIA_BY_SHORTCODE = \"/media/shortcode/%s\";\n",
      "\n",
      "\t/**\n",
      "\t * Get a full list of comments on a media.\n",
      "\t *\n",
      "\t * Required scope: comments\n",
      "\t */\n",
      "\tpublic static final String MEDIA_COMMENTS = \"/media/%s/comments\";\n",
      "\n",
      "\t/**\n",
      "\t * Get a list of what media is most popular at the moment.\n",
      "\t */\n",
      "    @Deprecated\n",
      "\tpublic static final String MEDIA_POPULAR = \"/media/popular\";\n",
      "\n",
      "\t/**\n",
      "\t * Search for media in a given area.\n",
      "\t */\n",
      "\tpublic static final String MEDIA_SEARCH = \"/media/search\";\n",
      "\n",
      "\n",
      "\t/**\n",
      "\t * Get information about a tag object.\n",
      "\t */\n",
      "\tpublic static final String TAGS_BY_NAME = \"/tags/%s\";\n",
      "\n",
      "\t/**\n",
      "\t * Get a list of recently tagged media. Note that this media is ordered by\n",
      "\t * when the media was tagged with this tag, rather than the order it was\n",
      "\t * posted. Use the max_tag_id and min_tag_id parameters in the pagination\n",
      "\t * response to paginate through these objects.\n",
      "\t */\n",
      "\tpublic static final String TAGS_RECENT_MEDIA = \"/tags/%s/media/recent\";\n",
      "\n",
      "\t/**\n",
      "\t * Search for tags by name - results are ordered first as an exact match,\n",
      "\t * then by popularity.\n",
      "\t */\n",
      "\tpublic static final String TAGS_SEARCH = \"/tags/search\";\n",
      "\n",
      "\t/**\n",
      "\t * Get the list of users this user is followed by.\n",
      "\t *\n",
      "\t * Required scope: relationships\n",
      "\t */\n",
      "\tpublic static final String USERS_ID_FOLLOWED_BY = \"/users/%s/followed-by\";\n",
      "\n",
      "\t/**\n",
      "\t * Get the list of users this user follows.\n",
      "\t *\n",
      "\t * Required scope: relationships\n",
      "\t */\n",
      "\tpublic static final String USERS_ID_FOLLOWS = \"/users/%s/follows\";\n",
      "\n",
      "\t/**\n",
      "\t * Get information about the current user's relationship\n",
      "\t * (follow/following/etc) to another user.\n",
      "\t *\n",
      "\t * Required scope: relationships\n",
      "\t */\n",
      "\tpublic static final String USERS_ID_RELATIONSHIP = \"/users/%s/relationship\";\n",
      "\n",
      "\t/**\n",
      "\t * Get the most recent media published by a user.\n",
      "\t */\n",
      "\tpublic static final String USERS_RECENT_MEDIA = \"/users/%s/media/recent\";\n",
      "\n",
      "\t/**\n",
      "\t * Search for a user by name.\n",
      "\t */\n",
      "\tpublic static final String USERS_SEARCH = \"/users/search\";\n",
      "\n",
      "\t/**\n",
      "\t * Get basic information about a user (self).\n",
      "\t */\n",
      "\tpublic static final String USERS_SELF = \"/users/self\";\n",
      "\n",
      "\t/**\n",
      "\t * See the authenticated user's feed.\n",
      "\t */\n",
      "    @Deprecated\n",
      "\tpublic static final String USERS_SELF_FEED = \"/users/self/feed\";\n",
      "\n",
      "    /*\n",
      "     * Get the most recent media published by the owner of the access_token.\n",
      "     */\n",
      "    public static final String USERS_SELF_RECENT_MEDIA = \"/users/self/media/recent\";\n",
      "\n",
      "\t/**\n",
      "\t * See the authenticated user's list of media they've liked. Note that this\n",
      "\t * list is ordered by the order in which the user liked the media. Private\n",
      "\t * media is returned as long as the authenticated user has permission to\n",
      "\t * view that media. Liked media lists are only available for the currently\n",
      "\t * authenticated user.\n",
      "\t */\n",
      "\tpublic static final String USERS_SELF_LIKED_MEDIA = \"/users/self/media/liked\";\n",
      "\n",
      "\t/**\n",
      "\t * List the users who have requested this user's permission to follow\n",
      "\t *\n",
      "\t * Required scope: relationships\n",
      "\t */\n",
      "\tpublic static final String USERS_SELF_REQUESTED_BY = \"/users/self/requested-by\";\n",
      "\n",
      "\t/**\n",
      "\t * Get basic information about a user.\n",
      "\t */\n",
      "\tpublic static final String USERS_WITH_ID = \"/users/%s\";\n",
      "\n",
      "    /**\n",
      "     * Given a short link, returns information about the media associated with\n",
      "     * that link.\n",
      "     */\n",
      "    public static final String OEMBED_INFORMATION = \"/oembed?url=%s\";\n",
      "    \n",
      "    /**\n",
      "     * CRUD Real-time  subscriptions\n",
      "     */\n",
      "    public static final String SUBSCRIPTIONS = \"/subscriptions\";\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.model;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>MethodsTest</code> contains tests for the class <code>{@link Methods}</code>.\n",
      " *\n",
      " * @generatedBy CodePro at 31/08/15 16:48\n",
      " * @author sachin.handiekar\n",
      " * @version $Revision: 1.0 $\n",
      " */\n",
      "public class MethodsTest {\n",
      "\t/**\n",
      "\t * Run the Methods() constructor test.\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testMethods_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tMethods result = new Methods();\n",
      "\t\tassertNotNull(result);\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the initialization fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp()\n",
      "\t\tthrows Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown()\n",
      "\t\tthrows Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args the command line arguments\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(MethodsTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "MethodsTest::::testMethods_1()": [
        19,
        25
      ],
      "MethodsTest::::setUp()": [
        35,
        39
      ],
      "MethodsTest::::tearDown()": [
        49,
        53
      ],
      "MethodsTest::::main(java.lang.String[])": [
        62,
        64
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "19": "MethodsTest::::testMethods_1()",
      "20": "MethodsTest::::testMethods_1()",
      "21": "MethodsTest::::testMethods_1()",
      "22": "MethodsTest::::testMethods_1()",
      "23": "MethodsTest::::testMethods_1()",
      "24": "MethodsTest::::testMethods_1()",
      "25": "MethodsTest::::testMethods_1()",
      "35": "MethodsTest::::setUp()",
      "36": "MethodsTest::::setUp()",
      "37": "MethodsTest::::setUp()",
      "38": "MethodsTest::::setUp()",
      "39": "MethodsTest::::setUp()",
      "49": "MethodsTest::::tearDown()",
      "50": "MethodsTest::::tearDown()",
      "51": "MethodsTest::::tearDown()",
      "52": "MethodsTest::::tearDown()",
      "53": "MethodsTest::::tearDown()",
      "62": "MethodsTest::::main(java.lang.String[])",
      "63": "MethodsTest::::main(java.lang.String[])",
      "64": "MethodsTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          19,
          25
        ],
        "covered_lines": [
          3
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/model/QueryParam.java": {
    "class_content": [
      "package org.jinstagram.model;\n",
      "\n",
      "public final class QueryParam {\n",
      "\tpublic static final String ACTION = \"action\";\n",
      "\n",
      "\tpublic static final String COUNT = \"count\";\n",
      "\n",
      "\tpublic static final String DISTANCE = \"distance\";\n",
      "\n",
      "\tpublic static final String FOURSQUARE_ID = \"foursquare_id\";\n",
      "\n",
      "\tpublic static final String FOURSQUARE_V2_ID = \"foursquare_v2_id\";\n",
      "\n",
      "\tpublic static final String FACEBOOK_PLACES_ID = \"facebook_places_id\";\n",
      "\n",
      "\tpublic static final String LATITUDE = \"lat\";\n",
      "\n",
      "\tpublic static final String LONGITUDE = \"lng\";\n",
      "\n",
      "\tpublic static final String MAX_ID = \"max_id\";\n",
      "\n",
      "\tpublic static final String MAX_LIKE_ID = \"max_like_id\";\n",
      "\n",
      "\tpublic static final String MAX_TIMESTAMP = \"max_timestamp\";\n",
      "\n",
      "\tpublic static final String MIN_ID = \"min_id\";\n",
      "\n",
      "\tpublic static final String MIN_TIMESTAMP = \"min_timestamp\";\n",
      "\n",
      "\tpublic static final String SEARCH_QUERY = \"q\";\n",
      "\n",
      "\tpublic static final String TEXT = \"text\";\n",
      "\n",
      "    public static final String MAX_TAG_ID = \"max_tag_id\";\n",
      "\n",
      "    public static final String MIN_TAG_ID = \"min_tag_id\";\n",
      "\n",
      "\tpublic static final String SIGNATURE = \"sig\";\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.model;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>QueryParamTest</code> contains tests for the class <code>{@link QueryParam}</code>.\n",
      " *\n",
      " * @generatedBy CodePro at 31/08/15 16:48\n",
      " * @author sachin.handiekar\n",
      " * @version $Revision: 1.0 $\n",
      " */\n",
      "public class QueryParamTest {\n",
      "\t/**\n",
      "\t * Run the QueryParam() constructor test.\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testQueryParam_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tQueryParam result = new QueryParam();\n",
      "\t\tassertNotNull(result);\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the initialization fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp()\n",
      "\t\tthrows Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown()\n",
      "\t\tthrows Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args the command line arguments\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/08/15 16:48\n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(QueryParamTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "QueryParamTest::::testQueryParam_1()": [
        19,
        25
      ],
      "QueryParamTest::::setUp()": [
        35,
        39
      ],
      "QueryParamTest::::tearDown()": [
        49,
        53
      ],
      "QueryParamTest::::main(java.lang.String[])": [
        62,
        64
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "19": "QueryParamTest::::testQueryParam_1()",
      "20": "QueryParamTest::::testQueryParam_1()",
      "21": "QueryParamTest::::testQueryParam_1()",
      "22": "QueryParamTest::::testQueryParam_1()",
      "23": "QueryParamTest::::testQueryParam_1()",
      "24": "QueryParamTest::::testQueryParam_1()",
      "25": "QueryParamTest::::testQueryParam_1()",
      "35": "QueryParamTest::::setUp()",
      "36": "QueryParamTest::::setUp()",
      "37": "QueryParamTest::::setUp()",
      "38": "QueryParamTest::::setUp()",
      "39": "QueryParamTest::::setUp()",
      "49": "QueryParamTest::::tearDown()",
      "50": "QueryParamTest::::tearDown()",
      "51": "QueryParamTest::::tearDown()",
      "52": "QueryParamTest::::tearDown()",
      "53": "QueryParamTest::::tearDown()",
      "62": "QueryParamTest::::main(java.lang.String[])",
      "63": "QueryParamTest::::main(java.lang.String[])",
      "64": "QueryParamTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          19,
          25
        ],
        "covered_lines": [
          3
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/http/Response.java": {
    "class_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "\n",
      "import java.net.HttpURLConnection;\n",
      "import java.net.UnknownHostException;\n",
      "\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.TreeMap;\n",
      "\n",
      "/**\n",
      " * Represents an HTTP Response.\n",
      " */\n",
      "public class Response {\n",
      "\tprivate static final String EMPTY_RESPONSE = \"\";\n",
      "\n",
      "\tprivate String body;\n",
      "\n",
      "\tprivate int code;\n",
      "\n",
      "\tprivate Map<String, String> headers;\n",
      "\n",
      "\tprivate InputStream stream;\n",
      "\t\n",
      "\tprivate String url;\n",
      "\n",
      "    Response(HttpURLConnection connection) throws IOException {\n",
      "        try {\n",
      "            connection.connect();\n",
      "\n",
      "            url = connection.getURL().toString();\n",
      "            code = connection.getResponseCode();\n",
      "            headers = parseHeaders(connection);\n",
      "            stream = wasSuccessful() ? connection.getInputStream() : connection.getErrorStream();\n",
      "        } catch (UnknownHostException e) {\n",
      "            code = HttpStatus.NOT_FOUND.value();\n",
      "            body = EMPTY_RESPONSE;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public String getURL() {\n",
      "\t\treturn url;\n",
      "\t}\n",
      "\n",
      "\tprivate String parseBodyContents() {\n",
      "\t\treturn StreamUtils.getStreamContents(getStream());\n",
      "\t}\n",
      "\n",
      "\tprivate Map<String, String> parseHeaders(HttpURLConnection conn) {\n",
      "\t\tMap<String, String> headers = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);\n",
      "\n",
      "\t\tfor (java.util.Map.Entry<String,List<String>> entry : conn.getHeaderFields().entrySet()) {\n",
      "\t\t\tString key= entry.getKey();\n",
      "\t\t\tList<String> valueList= entry.getValue();\n",
      "\t\t\tif (key!=null && valueList!=null && valueList.size()>0) {\n",
      "\t\t\t\tString value= valueList.get(0);\n",
      "\t\t\t\tif (value!=null) {\n",
      "\t\t\t\t\theaders.put(key, value);\n",
      "\t\t\t\t}\n",
      "\t\t\t}\n",
      "\t\t}\n",
      "\t\treturn headers;\n",
      "\t}\n",
      "\n",
      "\tprivate boolean wasSuccessful() {\n",
      "\t\treturn (getCode() >= 200) && (getCode() < 400);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Obtains the HTTP Response body\n",
      "\t * \n",
      "\t * @return response body\n",
      "\t */\n",
      "\tpublic String getBody() {\n",
      "\t\tif (body == null) {\n",
      "\t\t\tbody = parseBodyContents();\n",
      "\t\t}\n",
      "\t\treturn body;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Obtains the meaningful stream of the HttpUrlConnection, either\n",
      "\t * inputStream or errorInputStream, depending on the status code\n",
      "\t * \n",
      "\t * @return input stream / error stream\n",
      "\t */\n",
      "\tpublic InputStream getStream() {\n",
      "\t\treturn stream;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Obtains the HTTP status code\n",
      "\t * \n",
      "\t * @return the status code\n",
      "\t */\n",
      "\tpublic int getCode() {\n",
      "\t\treturn code;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Obtains a {@link Map} containing the HTTP Response Headers\n",
      "\t * \n",
      "\t * @return headers\n",
      "\t */\n",
      "\tpublic Map<String, String> getHeaders() {\n",
      "\t\treturn headers;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Obtains a single HTTP Header value, or null if undefined\n",
      "\t * \n",
      "\t * @param headerName name of the header\n",
      "\t * \n",
      "\t * @return header value or null\n",
      "\t */\n",
      "\tpublic String getHeader(String headerName) {\n",
      "\t\treturn headers.get(headerName);\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "import java.io.ByteArrayInputStream;\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.io.OutputStream;\n",
      "import java.net.HttpURLConnection;\n",
      "import java.net.URL;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "import org.junit.runner.RunWith;\n",
      "import org.mockito.Mock;\n",
      "import org.mockito.runners.MockitoJUnitRunner;\n",
      "\n",
      "/**\n",
      " * The class <code>ResponseTest</code> contains tests for the class\n",
      " * <code>{@link Response}</code>.\n",
      " * \n",
      " */\n",
      "@RunWith(MockitoJUnitRunner.class)\n",
      "public class ResponseTest {\n",
      "\n",
      "\t@Mock\n",
      "\tprivate HttpURLConnection mockHttpConnection;\n",
      "\n",
      "\t@Mock\n",
      "\tprivate OutputStream mockOutStream;\n",
      "\n",
      "\t@Mock\n",
      "\tprivate InputStream mockInputStream;\n",
      "\n",
      "\t@Mock\n",
      "\tprivate InputStream mockErrStream;\n",
      "\n",
      "\t//\n",
      "\t@Before\n",
      "\tpublic void init() {\n",
      "\n",
      "\t\ttry {\n",
      "\t\t\twhen(mockHttpConnection.getErrorStream()).thenReturn(mockErrStream);\n",
      "\n",
      "\t\t\tURL url = new URL(\"http://mock.url/to/test\");\n",
      "\t\t\twhen(mockHttpConnection.getURL()).thenReturn(url);\n",
      "\n",
      "\t\t} catch (IOException e) {\n",
      "\t\t\t// TODO Auto-generated catch block\n",
      "\t\t\te.printStackTrace();\n",
      "\t\t}\n",
      "\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Response(HttpURLConnection) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *             if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testResponse() throws Exception {\n",
      "\t\tResponse result = new Response(mockHttpConnection);\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getBody() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test(expected = IllegalStateException.class)\n",
      "\tpublic void testGetBody() throws Exception {\n",
      "\t\tResponse fixture = new Response(mockHttpConnection);\n",
      "\n",
      "\t\tString result = fixture.getBody();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.NullPointerException\n",
      "\t\t// at org.jinstagram.http.Response.<init>(Response.java:30)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the int getCode() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCode() throws Exception {\n",
      "\t\tResponse fixture = new Response(mockHttpConnection);\n",
      "\n",
      "\t\tint result = fixture.getCode();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.NullPointerException\n",
      "\t\t// at org.jinstagram.http.Response.<init>(Response.java:30)\n",
      "\t\tassertEquals(0, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getHeader(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetHeader() throws Exception {\n",
      "\t\tResponse fixture = new Response(mockHttpConnection);\n",
      "\t\tString headerName = \"header\";\n",
      "\n",
      "\t\tString value = fixture.getHeader(headerName);\n",
      "\t\tSystem.out.println(value);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Map<String, String> getHeaders() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetHeaders() throws Exception {\n",
      "\t\tResponse fixture = new Response(mockHttpConnection);\n",
      "\n",
      "\t\tMap<String, String> result = fixture.getHeaders();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.NullPointerException\n",
      "\t\t// at org.jinstagram.http.Response.<init>(Response.java:30)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the InputStream getStream() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetStream() throws Exception {\n",
      "\t\tResponse fixture = new Response(mockHttpConnection);\n",
      "\n",
      "\t\tInputStream result = fixture.getStream();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.NullPointerException\n",
      "\t\t// at org.jinstagram.http.Response.<init>(Response.java:30)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getURL() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetURL() throws Exception {\n",
      "\t\tResponse fixture = new Response(mockHttpConnection);\n",
      "\n",
      "\t\tString result = fixture.getURL();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.NullPointerException\n",
      "\t\t// at org.jinstagram.http.Response.<init>(Response.java:30)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "Response::::getURL()": [
        43,
        45
      ],
      "Response::::parseBodyContents()": [
        47,
        49
      ],
      "Response::::parseHeaders(java.net.HttpURLConnection)": [
        51,
        65
      ],
      "Response::::wasSuccessful()": [
        67,
        69
      ],
      "Response::::getBody()": [
        76,
        81
      ],
      "Response::::getStream()": [
        89,
        91
      ],
      "Response::::getCode()": [
        98,
        100
      ],
      "Response::::getHeaders()": [
        107,
        109
      ],
      "Response::::getHeader(java.lang.String)": [
        118,
        120
      ]
    },
    "test_method_lines_dic": {
      "ResponseTest::::init()": [
        42,
        56
      ],
      "ResponseTest::::testResponse()": [
        64,
        68
      ],
      "ResponseTest::::testGetBody()": [
        77,
        89
      ],
      "ResponseTest::::testGetCode()": [
        98,
        110
      ],
      "ResponseTest::::testGetHeader()": [
        119,
        126
      ],
      "ResponseTest::::testGetHeaders()": [
        135,
        147
      ],
      "ResponseTest::::testGetStream()": [
        156,
        168
      ],
      "ResponseTest::::testGetURL()": [
        177,
        189
      ]
    },
    "reverse_method_lines_dic": {
      "43": "Response::::getURL()",
      "44": "Response::::getURL()",
      "45": "Response::::getURL()",
      "47": "Response::::parseBodyContents()",
      "48": "Response::::parseBodyContents()",
      "49": "Response::::parseBodyContents()",
      "51": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "52": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "53": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "54": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "55": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "56": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "57": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "58": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "59": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "60": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "61": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "62": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "63": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "64": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "65": "Response::::parseHeaders(java.net.HttpURLConnection)",
      "67": "Response::::wasSuccessful()",
      "68": "Response::::wasSuccessful()",
      "69": "Response::::wasSuccessful()",
      "76": "Response::::getBody()",
      "77": "Response::::getBody()",
      "78": "Response::::getBody()",
      "79": "Response::::getBody()",
      "80": "Response::::getBody()",
      "81": "Response::::getBody()",
      "89": "Response::::getStream()",
      "90": "Response::::getStream()",
      "91": "Response::::getStream()",
      "98": "Response::::getCode()",
      "99": "Response::::getCode()",
      "100": "Response::::getCode()",
      "107": "Response::::getHeaders()",
      "108": "Response::::getHeaders()",
      "109": "Response::::getHeaders()",
      "118": "Response::::getHeader(java.lang.String)",
      "119": "Response::::getHeader(java.lang.String)",
      "120": "Response::::getHeader(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "42": "ResponseTest::::init()",
      "43": "ResponseTest::::init()",
      "44": "ResponseTest::::init()",
      "45": "ResponseTest::::init()",
      "46": "ResponseTest::::init()",
      "47": "ResponseTest::::init()",
      "48": "ResponseTest::::init()",
      "49": "ResponseTest::::init()",
      "50": "ResponseTest::::init()",
      "51": "ResponseTest::::init()",
      "52": "ResponseTest::::init()",
      "53": "ResponseTest::::init()",
      "54": "ResponseTest::::init()",
      "55": "ResponseTest::::init()",
      "56": "ResponseTest::::init()",
      "64": "ResponseTest::::testResponse()",
      "65": "ResponseTest::::testResponse()",
      "66": "ResponseTest::::testResponse()",
      "67": "ResponseTest::::testResponse()",
      "68": "ResponseTest::::testResponse()",
      "77": "ResponseTest::::testGetBody()",
      "78": "ResponseTest::::testGetBody()",
      "79": "ResponseTest::::testGetBody()",
      "80": "ResponseTest::::testGetBody()",
      "81": "ResponseTest::::testGetBody()",
      "82": "ResponseTest::::testGetBody()",
      "83": "ResponseTest::::testGetBody()",
      "84": "ResponseTest::::testGetBody()",
      "85": "ResponseTest::::testGetBody()",
      "86": "ResponseTest::::testGetBody()",
      "87": "ResponseTest::::testGetBody()",
      "88": "ResponseTest::::testGetBody()",
      "89": "ResponseTest::::testGetBody()",
      "98": "ResponseTest::::testGetCode()",
      "99": "ResponseTest::::testGetCode()",
      "100": "ResponseTest::::testGetCode()",
      "101": "ResponseTest::::testGetCode()",
      "102": "ResponseTest::::testGetCode()",
      "103": "ResponseTest::::testGetCode()",
      "104": "ResponseTest::::testGetCode()",
      "105": "ResponseTest::::testGetCode()",
      "106": "ResponseTest::::testGetCode()",
      "107": "ResponseTest::::testGetCode()",
      "108": "ResponseTest::::testGetCode()",
      "109": "ResponseTest::::testGetCode()",
      "110": "ResponseTest::::testGetCode()",
      "119": "ResponseTest::::testGetHeader()",
      "120": "ResponseTest::::testGetHeader()",
      "121": "ResponseTest::::testGetHeader()",
      "122": "ResponseTest::::testGetHeader()",
      "123": "ResponseTest::::testGetHeader()",
      "124": "ResponseTest::::testGetHeader()",
      "125": "ResponseTest::::testGetHeader()",
      "126": "ResponseTest::::testGetHeader()",
      "135": "ResponseTest::::testGetHeaders()",
      "136": "ResponseTest::::testGetHeaders()",
      "137": "ResponseTest::::testGetHeaders()",
      "138": "ResponseTest::::testGetHeaders()",
      "139": "ResponseTest::::testGetHeaders()",
      "140": "ResponseTest::::testGetHeaders()",
      "141": "ResponseTest::::testGetHeaders()",
      "142": "ResponseTest::::testGetHeaders()",
      "143": "ResponseTest::::testGetHeaders()",
      "144": "ResponseTest::::testGetHeaders()",
      "145": "ResponseTest::::testGetHeaders()",
      "146": "ResponseTest::::testGetHeaders()",
      "147": "ResponseTest::::testGetHeaders()",
      "156": "ResponseTest::::testGetStream()",
      "157": "ResponseTest::::testGetStream()",
      "158": "ResponseTest::::testGetStream()",
      "159": "ResponseTest::::testGetStream()",
      "160": "ResponseTest::::testGetStream()",
      "161": "ResponseTest::::testGetStream()",
      "162": "ResponseTest::::testGetStream()",
      "163": "ResponseTest::::testGetStream()",
      "164": "ResponseTest::::testGetStream()",
      "165": "ResponseTest::::testGetStream()",
      "166": "ResponseTest::::testGetStream()",
      "167": "ResponseTest::::testGetStream()",
      "168": "ResponseTest::::testGetStream()",
      "177": "ResponseTest::::testGetURL()",
      "178": "ResponseTest::::testGetURL()",
      "179": "ResponseTest::::testGetURL()",
      "180": "ResponseTest::::testGetURL()",
      "181": "ResponseTest::::testGetURL()",
      "182": "ResponseTest::::testGetURL()",
      "183": "ResponseTest::::testGetURL()",
      "184": "ResponseTest::::testGetURL()",
      "185": "ResponseTest::::testGetURL()",
      "186": "ResponseTest::::testGetURL()",
      "187": "ResponseTest::::testGetURL()",
      "188": "ResponseTest::::testGetURL()",
      "189": "ResponseTest::::testGetURL()"
    },
    "tests": [
      {
        "test_lines": [
          64,
          68
        ],
        "covered_lines": [
          29,
          31,
          33,
          34,
          35,
          36,
          40,
          41,
          52,
          54,
          64,
          68,
          99
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          77,
          89
        ],
        "covered_lines": [
          29,
          31,
          33,
          34,
          35,
          36,
          40,
          41,
          52,
          54,
          64,
          68,
          77,
          90,
          99
        ],
        "label": "Response::::getBody()"
      },
      {
        "test_lines": [
          98,
          110
        ],
        "covered_lines": [
          29,
          31,
          33,
          34,
          35,
          36,
          40,
          41,
          52,
          54,
          64,
          68,
          99
        ],
        "label": "Response::::getCode()"
      },
      {
        "test_lines": [
          119,
          126
        ],
        "covered_lines": [
          29,
          31,
          33,
          34,
          35,
          36,
          40,
          41,
          52,
          54,
          64,
          68,
          99,
          119
        ],
        "label": "Response::::getHeader(java.lang.String)"
      },
      {
        "test_lines": [
          135,
          147
        ],
        "covered_lines": [
          29,
          31,
          33,
          34,
          35,
          36,
          40,
          41,
          52,
          54,
          64,
          68,
          99,
          108
        ],
        "label": "Response::::getHeaders()"
      },
      {
        "test_lines": [
          156,
          168
        ],
        "covered_lines": [
          29,
          31,
          33,
          34,
          35,
          36,
          40,
          41,
          52,
          54,
          64,
          68,
          90,
          99
        ],
        "label": "Response::::getStream()"
      },
      {
        "test_lines": [
          177,
          189
        ],
        "covered_lines": [
          29,
          31,
          33,
          34,
          35,
          36,
          40,
          41,
          44,
          52,
          54,
          64,
          68,
          99
        ],
        "label": "Response::::getURL()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/http/HttpStatus.java": {
    "class_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "/**\n",
      " * @author Sachin Handiekar\n",
      " */\n",
      "public enum HttpStatus {\n",
      "\n",
      "    // 2xx Success\n",
      "\n",
      "    /**\n",
      "     * {@code 200 OK}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.3.1\">HTTP/1.1: Semantics and Content, section 6.3.1</a>\n",
      "     */\n",
      "    OK(200, \"OK\"),\n",
      "    /**\n",
      "     * {@code 201 Created}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.3.2\">HTTP/1.1: Semantics and Content, section 6.3.2</a>\n",
      "     */\n",
      "    CREATED(201, \"Created\"),\n",
      "    /**\n",
      "     * {@code 202 Accepted}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.3.3\">HTTP/1.1: Semantics and Content, section 6.3.3</a>\n",
      "     */\n",
      "    ACCEPTED(202, \"Accepted\"),\n",
      "    /**\n",
      "     * {@code 203 Non-Authoritative Information}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.3.4\">HTTP/1.1: Semantics and Content, section 6.3.4</a>\n",
      "     */\n",
      "    NON_AUTHORITATIVE_INFORMATION(203, \"Non-Authoritative Information\"),\n",
      "    /**\n",
      "     * {@code 204 No Content}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.3.5\">HTTP/1.1: Semantics and Content, section 6.3.5</a>\n",
      "     */\n",
      "    NO_CONTENT(204, \"No Content\"),\n",
      "    /**\n",
      "     * {@code 205 Reset Content}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.3.6\">HTTP/1.1: Semantics and Content, section 6.3.6</a>\n",
      "     */\n",
      "    RESET_CONTENT(205, \"Reset Content\"),\n",
      "    /**\n",
      "     * {@code 206 Partial Content}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7233#section-4.1\">HTTP/1.1: Range Requests, section 4.1</a>\n",
      "     */\n",
      "    PARTIAL_CONTENT(206, \"Partial Content\"),\n",
      "    /**\n",
      "     * {@code 207 Multi-Status}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc4918#section-13\">WebDAV</a>\n",
      "     */\n",
      "    MULTI_STATUS(207, \"Multi-Status\"),\n",
      "    /**\n",
      "     * {@code 208 Already Reported}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc5842#section-7.1\">WebDAV Binding Extensions</a>\n",
      "     */\n",
      "    ALREADY_REPORTED(208, \"Already Reported\"),\n",
      "    /**\n",
      "     * {@code 226 IM Used}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc3229#section-10.4.1\">Delta encoding in HTTP</a>\n",
      "     */\n",
      "    IM_USED(226, \"IM Used\"),\n",
      "\n",
      "    // 3xx Redirection\n",
      "\n",
      "    /**\n",
      "     * {@code 300 Multiple Choices}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.4.1\">HTTP/1.1: Semantics and Content, section 6.4.1</a>\n",
      "     */\n",
      "    MULTIPLE_CHOICES(300, \"Multiple Choices\"),\n",
      "    /**\n",
      "     * {@code 301 Moved Permanently}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.4.2\">HTTP/1.1: Semantics and Content, section 6.4.2</a>\n",
      "     */\n",
      "    MOVED_PERMANENTLY(301, \"Moved Permanently\"),\n",
      "    /**\n",
      "     * {@code 302 Found}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.4.3\">HTTP/1.1: Semantics and Content, section 6.4.3</a>\n",
      "     */\n",
      "    FOUND(302, \"Found\"),\n",
      "    /**\n",
      "     * {@code 302 Moved Temporarily}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc1945#section-9.3\">HTTP/1.0, section 9.3</a>\n",
      "     * @deprecated In favor of {@link #FOUND} which will be returned from {@code HttpStatus.valueOf(302)}\n",
      "     */\n",
      "    @Deprecated\n",
      "    MOVED_TEMPORARILY(302, \"Moved Temporarily\"),\n",
      "    /**\n",
      "     * {@code 303 See Other}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.4.4\">HTTP/1.1: Semantics and Content, section 6.4.4</a>\n",
      "     */\n",
      "    SEE_OTHER(303, \"See Other\"),\n",
      "    /**\n",
      "     * {@code 304 Not Modified}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7232#section-4.1\">HTTP/1.1: Conditional Requests, section 4.1</a>\n",
      "     */\n",
      "    NOT_MODIFIED(304, \"Not Modified\"),\n",
      "    /**\n",
      "     * {@code 305 Use Proxy}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.4.5\">HTTP/1.1: Semantics and Content, section 6.4.5</a>\n",
      "     * @deprecated due to security concerns regarding in-band configuration of a proxy\n",
      "     */\n",
      "    @Deprecated\n",
      "    USE_PROXY(305, \"Use Proxy\"),\n",
      "    /**\n",
      "     * {@code 307 Temporary Redirect}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.4.7\">HTTP/1.1: Semantics and Content, section 6.4.7</a>\n",
      "     */\n",
      "    TEMPORARY_REDIRECT(307, \"Temporary Redirect\"),\n",
      "    /**\n",
      "     * {@code 308 Permanent Redirect}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7238\">RFC 7238</a>\n",
      "     */\n",
      "    PERMANENT_REDIRECT(308, \"Permanent Redirect\"),\n",
      "\n",
      "    // --- 4xx Client Error ---\n",
      "\n",
      "    /**\n",
      "     * {@code 400 Bad Request}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.1\">HTTP/1.1: Semantics and Content, section 6.5.1</a>\n",
      "     */\n",
      "    BAD_REQUEST(400, \"Bad Request\"),\n",
      "    /**\n",
      "     * {@code 401 Unauthorized}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7235#section-3.1\">HTTP/1.1: Authentication, section 3.1</a>\n",
      "     */\n",
      "    UNAUTHORIZED(401, \"Unauthorized\"),\n",
      "    /**\n",
      "     * {@code 402 Payment Required}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.2\">HTTP/1.1: Semantics and Content, section 6.5.2</a>\n",
      "     */\n",
      "    PAYMENT_REQUIRED(402, \"Payment Required\"),\n",
      "    /**\n",
      "     * {@code 403 Forbidden}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.3\">HTTP/1.1: Semantics and Content, section 6.5.3</a>\n",
      "     */\n",
      "    FORBIDDEN(403, \"Forbidden\"),\n",
      "    /**\n",
      "     * {@code 404 Not Found}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.4\">HTTP/1.1: Semantics and Content, section 6.5.4</a>\n",
      "     */\n",
      "    NOT_FOUND(404, \"Not Found\"),\n",
      "    /**\n",
      "     * {@code 405 Method Not Allowed}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.5\">HTTP/1.1: Semantics and Content, section 6.5.5</a>\n",
      "     */\n",
      "    METHOD_NOT_ALLOWED(405, \"Method Not Allowed\"),\n",
      "    /**\n",
      "     * {@code 406 Not Acceptable}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.6\">HTTP/1.1: Semantics and Content, section 6.5.6</a>\n",
      "     */\n",
      "    NOT_ACCEPTABLE(406, \"Not Acceptable\"),\n",
      "    /**\n",
      "     * {@code 407 Proxy Authentication Required}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7235#section-3.2\">HTTP/1.1: Authentication, section 3.2</a>\n",
      "     */\n",
      "    PROXY_AUTHENTICATION_REQUIRED(407, \"Proxy Authentication Required\"),\n",
      "    /**\n",
      "     * {@code 408 Request Timeout}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.7\">HTTP/1.1: Semantics and Content, section 6.5.7</a>\n",
      "     */\n",
      "    REQUEST_TIMEOUT(408, \"Request Timeout\"),\n",
      "    /**\n",
      "     * {@code 409 Conflict}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.8\">HTTP/1.1: Semantics and Content, section 6.5.8</a>\n",
      "     */\n",
      "    CONFLICT(409, \"Conflict\"),\n",
      "    /**\n",
      "     * {@code 410 Gone}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.9\">HTTP/1.1: Semantics and Content, section 6.5.9</a>\n",
      "     */\n",
      "    GONE(410, \"Gone\"),\n",
      "    /**\n",
      "     * {@code 411 Length Required}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.10\">HTTP/1.1: Semantics and Content, section 6.5.10</a>\n",
      "     */\n",
      "    LENGTH_REQUIRED(411, \"Length Required\"),\n",
      "    /**\n",
      "     * {@code 412 Precondition failed}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7232#section-4.2\">HTTP/1.1: Conditional Requests, section 4.2</a>\n",
      "     */\n",
      "    PRECONDITION_FAILED(412, \"Precondition Failed\"),\n",
      "    /**\n",
      "     * {@code 413 Payload Too Large}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.11\">HTTP/1.1: Semantics and Content, section 6.5.11</a>\n",
      "     * @since 4.1\n",
      "     */\n",
      "    PAYLOAD_TOO_LARGE(413, \"Payload Too Large\"),\n",
      "    /**\n",
      "     * {@code 413 Request Entity Too Large}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc2616#section-10.4.14\">HTTP/1.1, section 10.4.14</a>\n",
      "     * @deprecated In favor of {@link #PAYLOAD_TOO_LARGE} which will be returned from {@code HttpStatus.valueOf(413)}\n",
      "     */\n",
      "    @Deprecated\n",
      "    REQUEST_ENTITY_TOO_LARGE(413, \"Request Entity Too Large\"),\n",
      "    /**\n",
      "     * {@code 414 URI Too Long}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.12\">HTTP/1.1: Semantics and Content, section 6.5.12</a>\n",
      "     * @since 4.1\n",
      "     */\n",
      "    URI_TOO_LONG(414, \"URI Too Long\"),\n",
      "    /**\n",
      "     * {@code 414 Request-URI Too Long}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc2616#section-10.4.15\">HTTP/1.1, section 10.4.15</a>\n",
      "     * @deprecated In favor of {@link #URI_TOO_LONG} which will be returned from {@code HttpStatus.valueOf(414)}\n",
      "     */\n",
      "    @Deprecated\n",
      "    REQUEST_URI_TOO_LONG(414, \"Request-URI Too Long\"),\n",
      "    /**\n",
      "     * {@code 415 Unsupported Media Type}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.13\">HTTP/1.1: Semantics and Content, section 6.5.13</a>\n",
      "     */\n",
      "    UNSUPPORTED_MEDIA_TYPE(415, \"Unsupported Media Type\"),\n",
      "    /**\n",
      "     * {@code 416 Requested Range Not Satisfiable}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7233#section-4.4\">HTTP/1.1: Range Requests, section 4.4</a>\n",
      "     */\n",
      "    REQUESTED_RANGE_NOT_SATISFIABLE(416, \"Requested range not satisfiable\"),\n",
      "    /**\n",
      "     * {@code 417 Expectation Failed}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.5.14\">HTTP/1.1: Semantics and Content, section 6.5.14</a>\n",
      "     */\n",
      "    EXPECTATION_FAILED(417, \"Expectation Failed\"),\n",
      "    /**\n",
      "     * {@code 418 I'm a teapot}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc2324#section-2.3.2\">HTCPCP/1.0</a>\n",
      "     */\n",
      "    I_AM_A_TEAPOT(418, \"I'm a teapot\"),\n",
      "    /**\n",
      "     * @deprecated See <a href=\"http://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt\">WebDAV Draft Changes</a>\n",
      "     */\n",
      "    @Deprecated\n",
      "    INSUFFICIENT_SPACE_ON_RESOURCE(419, \"Insufficient Space On Resource\"),\n",
      "    /**\n",
      "     * @deprecated See <a href=\"http://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt\">WebDAV Draft Changes</a>\n",
      "     */\n",
      "    @Deprecated\n",
      "    METHOD_FAILURE(420, \"Method Failure\"),\n",
      "    /**\n",
      "     * @deprecated See <a href=\"http://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt\">WebDAV Draft Changes</a>\n",
      "     */\n",
      "    @Deprecated\n",
      "    DESTINATION_LOCKED(421, \"Destination Locked\"),\n",
      "    /**\n",
      "     * {@code 422 Unprocessable Entity}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc4918#section-11.2\">WebDAV</a>\n",
      "     */\n",
      "    UNPROCESSABLE_ENTITY(422, \"Unprocessable Entity\"),\n",
      "    /**\n",
      "     * {@code 423 Locked}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc4918#section-11.3\">WebDAV</a>\n",
      "     */\n",
      "    LOCKED(423, \"Locked\"),\n",
      "    /**\n",
      "     * {@code 424 Failed Dependency}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc4918#section-11.4\">WebDAV</a>\n",
      "     */\n",
      "    FAILED_DEPENDENCY(424, \"Failed Dependency\"),\n",
      "    /**\n",
      "     * {@code 426 Upgrade Required}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc2817#section-6\">Upgrading to TLS Within HTTP/1.1</a>\n",
      "     */\n",
      "    UPGRADE_REQUIRED(426, \"Upgrade Required\"),\n",
      "    /**\n",
      "     * {@code 428 Precondition Required}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc6585#section-3\">Additional HTTP Status Codes</a>\n",
      "     */\n",
      "    PRECONDITION_REQUIRED(428, \"Precondition Required\"),\n",
      "    /**\n",
      "     * {@code 429 Too Many Requests}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc6585#section-4\">Additional HTTP Status Codes</a>\n",
      "     */\n",
      "    TOO_MANY_REQUESTS(429, \"Too Many Requests\"),\n",
      "    /**\n",
      "     * {@code 431 Request Header Fields Too Large}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc6585#section-5\">Additional HTTP Status Codes</a>\n",
      "     */\n",
      "    REQUEST_HEADER_FIELDS_TOO_LARGE(431, \"Request Header Fields Too Large\"),\n",
      "\n",
      "    // --- 5xx Server Error ---\n",
      "\n",
      "    /**\n",
      "     * {@code 500 Internal Server Error}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.6.1\">HTTP/1.1: Semantics and Content, section 6.6.1</a>\n",
      "     */\n",
      "    INTERNAL_SERVER_ERROR(500, \"Internal Server Error\"),\n",
      "    /**\n",
      "     * {@code 501 Not Implemented}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.6.2\">HTTP/1.1: Semantics and Content, section 6.6.2</a>\n",
      "     */\n",
      "    NOT_IMPLEMENTED(501, \"Not Implemented\"),\n",
      "    /**\n",
      "     * {@code 502 Bad Gateway}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.6.3\">HTTP/1.1: Semantics and Content, section 6.6.3</a>\n",
      "     */\n",
      "    BAD_GATEWAY(502, \"Bad Gateway\"),\n",
      "    /**\n",
      "     * {@code 503 Service Unavailable}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.6.4\">HTTP/1.1: Semantics and Content, section 6.6.4</a>\n",
      "     */\n",
      "    SERVICE_UNAVAILABLE(503, \"Service Unavailable\"),\n",
      "    /**\n",
      "     * {@code 504 Gateway Timeout}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.6.5\">HTTP/1.1: Semantics and Content, section 6.6.5</a>\n",
      "     */\n",
      "    GATEWAY_TIMEOUT(504, \"Gateway Timeout\"),\n",
      "    /**\n",
      "     * {@code 505 HTTP Version Not Supported}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc7231#section-6.6.6\">HTTP/1.1: Semantics and Content, section 6.6.6</a>\n",
      "     */\n",
      "    HTTP_VERSION_NOT_SUPPORTED(505, \"HTTP Version not supported\"),\n",
      "    /**\n",
      "     * {@code 506 Variant Also Negotiates}\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc2295#section-8.1\">Transparent Content Negotiation</a>\n",
      "     */\n",
      "    VARIANT_ALSO_NEGOTIATES(506, \"Variant Also Negotiates\"),\n",
      "    /**\n",
      "     * {@code 507 Insufficient Storage}\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc4918#section-11.5\">WebDAV</a>\n",
      "     */\n",
      "    INSUFFICIENT_STORAGE(507, \"Insufficient Storage\"),\n",
      "    /**\n",
      "     * {@code 508 Loop Detected}\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc5842#section-7.2\">WebDAV Binding Extensions</a>\n",
      "     */\n",
      "    LOOP_DETECTED(508, \"Loop Detected\"),\n",
      "    /**\n",
      "     * {@code 509 Bandwidth Limit Exceeded}\n",
      "     */\n",
      "    BANDWIDTH_LIMIT_EXCEEDED(509, \"Bandwidth Limit Exceeded\"),\n",
      "    /**\n",
      "     * {@code 510 Not Extended}\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc2774#section-7\">HTTP Extension Framework</a>\n",
      "     */\n",
      "    NOT_EXTENDED(510, \"Not Extended\"),\n",
      "    /**\n",
      "     * {@code 511 Network Authentication Required}.\n",
      "     *\n",
      "     * @see <a href=\"http://tools.ietf.org/html/rfc6585#section-6\">Additional HTTP Status Codes</a>\n",
      "     */\n",
      "    NETWORK_AUTHENTICATION_REQUIRED(511, \"Network Authentication Required\");\n",
      "\n",
      "    private final int value;\n",
      "\n",
      "    private final String reasonPhrase;\n",
      "\n",
      "    private HttpStatus(int value, String reasonPhrase) {\n",
      "        this.value = value;\n",
      "        this.reasonPhrase = reasonPhrase;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Return the integer value of this status code.\n",
      "     */\n",
      "    public int value() {\n",
      "        return this.value;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Return the reason phrase of this status code.\n",
      "     */\n",
      "    public String getReasonPhrase() {\n",
      "        return reasonPhrase;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import org.junit.*;\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "/**\n",
      " * The class <code>HttpStatusTest</code> contains tests for the class <code>{@link HttpStatus}</code>.\n",
      " */\n",
      "public class HttpStatusTest {\n",
      "\t/**\n",
      "\t * Run the String getReasonPhrase() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:08\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetReasonPhrase_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tHttpStatus fixture = HttpStatus.ACCEPTED;\n",
      "\n",
      "\t\tString result = fixture.getReasonPhrase();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"Accepted\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the int value() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:08\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testValue_1()\n",
      "\t\tthrows Exception {\n",
      "\t\tHttpStatus fixture = HttpStatus.ACCEPTED;\n",
      "\n",
      "\t\tint result = fixture.value();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(202, result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform pre-test initialization.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the initialization fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:08\n",
      "\t */\n",
      "\t@Before\n",
      "\tpublic void setUp()\n",
      "\t\tthrows Exception {\n",
      "\t\t// add additional set up code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Perform post-test clean-up.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *         if the clean-up fails for some reason\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:08\n",
      "\t */\n",
      "\t@After\n",
      "\tpublic void tearDown()\n",
      "\t\tthrows Exception {\n",
      "\t\t// Add additional tear down code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Launch the test.\n",
      "\t *\n",
      "\t * @param args the command line arguments\n",
      "\t *\n",
      "\t * @generatedBy CodePro at 31/01/16 15:08\n",
      "\t */\n",
      "\tpublic static void main(String[] args) {\n",
      "\t\tnew org.junit.runner.JUnitCore().run(HttpStatusTest.class);\n",
      "\t}\n",
      "}"
    ],
    "method_lines_dic": {
      "HttpStatus::::value()": [
        409,
        411
      ],
      "HttpStatus::::getReasonPhrase()": [
        416,
        418
      ]
    },
    "test_method_lines_dic": {
      "HttpStatusTest::::testGetReasonPhrase_1()": [
        17,
        26
      ],
      "HttpStatusTest::::testValue_1()": [
        35,
        44
      ],
      "HttpStatusTest::::setUp()": [
        54,
        58
      ],
      "HttpStatusTest::::tearDown()": [
        68,
        72
      ],
      "HttpStatusTest::::main(java.lang.String[])": [
        81,
        83
      ]
    },
    "reverse_method_lines_dic": {
      "409": "HttpStatus::::value()",
      "410": "HttpStatus::::value()",
      "411": "HttpStatus::::value()",
      "416": "HttpStatus::::getReasonPhrase()",
      "417": "HttpStatus::::getReasonPhrase()",
      "418": "HttpStatus::::getReasonPhrase()"
    },
    "test_reverse_method_lines_dic": {
      "17": "HttpStatusTest::::testGetReasonPhrase_1()",
      "18": "HttpStatusTest::::testGetReasonPhrase_1()",
      "19": "HttpStatusTest::::testGetReasonPhrase_1()",
      "20": "HttpStatusTest::::testGetReasonPhrase_1()",
      "21": "HttpStatusTest::::testGetReasonPhrase_1()",
      "22": "HttpStatusTest::::testGetReasonPhrase_1()",
      "23": "HttpStatusTest::::testGetReasonPhrase_1()",
      "24": "HttpStatusTest::::testGetReasonPhrase_1()",
      "25": "HttpStatusTest::::testGetReasonPhrase_1()",
      "26": "HttpStatusTest::::testGetReasonPhrase_1()",
      "35": "HttpStatusTest::::testValue_1()",
      "36": "HttpStatusTest::::testValue_1()",
      "37": "HttpStatusTest::::testValue_1()",
      "38": "HttpStatusTest::::testValue_1()",
      "39": "HttpStatusTest::::testValue_1()",
      "40": "HttpStatusTest::::testValue_1()",
      "41": "HttpStatusTest::::testValue_1()",
      "42": "HttpStatusTest::::testValue_1()",
      "43": "HttpStatusTest::::testValue_1()",
      "44": "HttpStatusTest::::testValue_1()",
      "54": "HttpStatusTest::::setUp()",
      "55": "HttpStatusTest::::setUp()",
      "56": "HttpStatusTest::::setUp()",
      "57": "HttpStatusTest::::setUp()",
      "58": "HttpStatusTest::::setUp()",
      "68": "HttpStatusTest::::tearDown()",
      "69": "HttpStatusTest::::tearDown()",
      "70": "HttpStatusTest::::tearDown()",
      "71": "HttpStatusTest::::tearDown()",
      "72": "HttpStatusTest::::tearDown()",
      "81": "HttpStatusTest::::main(java.lang.String[])",
      "82": "HttpStatusTest::::main(java.lang.String[])",
      "83": "HttpStatusTest::::main(java.lang.String[])"
    },
    "tests": [
      {
        "test_lines": [
          17,
          26
        ],
        "covered_lines": [
          6,
          15,
          21,
          27,
          33,
          39,
          45,
          51,
          57,
          63,
          69,
          78,
          84,
          90,
          97,
          104,
          110,
          117,
          124,
          130,
          139,
          145,
          151,
          157,
          163,
          169,
          175,
          181,
          187,
          193,
          199,
          205,
          211,
          218,
          225,
          233,
          240,
          247,
          253,
          259,
          265,
          269,
          274,
          279,
          286,
          292,
          298,
          304,
          310,
          316,
          322,
          331,
          337,
          343,
          349,
          355,
          361,
          367,
          373,
          379,
          383,
          389,
          395,
          401,
          402,
          403,
          404,
          417
        ],
        "label": "HttpStatus::::getReasonPhrase()"
      },
      {
        "test_lines": [
          35,
          44
        ],
        "covered_lines": [
          6,
          15,
          21,
          27,
          33,
          39,
          45,
          51,
          57,
          63,
          69,
          78,
          84,
          90,
          97,
          104,
          110,
          117,
          124,
          130,
          139,
          145,
          151,
          157,
          163,
          169,
          175,
          181,
          187,
          193,
          199,
          205,
          211,
          218,
          225,
          233,
          240,
          247,
          253,
          259,
          265,
          269,
          274,
          279,
          286,
          292,
          298,
          304,
          310,
          316,
          322,
          331,
          337,
          343,
          349,
          355,
          361,
          367,
          373,
          379,
          383,
          389,
          395,
          401,
          402,
          403,
          404,
          410
        ],
        "label": "HttpStatus::::value()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/http/Request.java": {
    "class_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.UnsupportedEncodingException;\n",
      "import java.net.HttpURLConnection;\n",
      "import java.net.MalformedURLException;\n",
      "import java.net.Proxy;\n",
      "import java.net.URL;\n",
      "import java.nio.charset.Charset;\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.TimeUnit;\n",
      "\n",
      "import org.jinstagram.auth.exceptions.OAuthException;\n",
      "\n",
      "/**\n",
      " * Represents an HTTP Request object\n",
      " */\n",
      "public class Request {\n",
      "\tprivate static final String CONTENT_LENGTH = \"Content-Length\";\n",
      "\n",
      "\tprivate String payload = null;\n",
      "\n",
      "\tprivate boolean connectionKeepAlive = false;\n",
      "\n",
      "\tprivate Map<String, String> bodyParams;\n",
      "\n",
      "\tprivate String charset;\n",
      "\n",
      "\tprivate HttpURLConnection connection;\n",
      "\n",
      "\tprivate Map<String, String> headers;\n",
      "\n",
      "\tprivate Map<String, String> querystringParams;\n",
      "\n",
      "\tprivate String url;\n",
      "\n",
      "\tprivate Verbs verb;\n",
      "\n",
      "\tprivate int connectTimeout;\n",
      "\n",
      "\tprivate int readTimeout;\n",
      "\n",
      "\tprivate Proxy proxy;\n",
      "\n",
      "\t/**\n",
      "\t * Creates a new Http Request\n",
      "\t *\n",
      "\t * @param verb Http Verb (GET, POST, etc)\n",
      "\t * @param url url with optional querystring parameters.\n",
      "\t */\n",
      "\tpublic Request(Verbs verb, String url) {\n",
      "\t\tthis.verb = verb;\n",
      "\t\tthis.url = url;\n",
      "\t\tthis.querystringParams = new HashMap<String, String>();\n",
      "\t\tthis.bodyParams = new HashMap<String, String>();\n",
      "\t\tthis.headers = new HashMap<String, String>();\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Execute the request and return a {@link Response}\n",
      "\t *\n",
      "\t * @return Http Response\n",
      "\t * @throws RuntimeException if the connection cannot be created.\n",
      "\t */\n",
      "\tpublic Response send() throws IOException {\n",
      "\t\tcreateConnection();\n",
      "\n",
      "\t\treturn doSend();\n",
      "\t}\n",
      "\n",
      "\tprivate void createConnection() throws IOException {\n",
      "\t\tString effectiveUrl = URLUtils.appendParametersToQueryString(url, querystringParams);\n",
      "\n",
      "\t\tif (connection == null) {\n",
      "\t\t\tSystem.setProperty(\"http.keepAlive\", connectionKeepAlive ? \"true\" : \"false\");\n",
      "\n",
      "\t\t\tURL url = new URL(effectiveUrl);\n",
      "\t\t\tconnection = (HttpURLConnection) (proxy == null ?\n",
      "\t\t\t\t\turl.openConnection() : url.openConnection(proxy));\n",
      "\n",
      "\t\t\tconnection.setConnectTimeout(connectTimeout);\n",
      "\t\t\tconnection.setReadTimeout(readTimeout);\n",
      "\t\t}\n",
      "\t}\n",
      "\n",
      "\tResponse doSend() throws IOException {\n",
      "\t\tconnection.setRequestMethod(this.verb.name());\n",
      "\t\taddHeaders(connection);\n",
      "\n",
      "\t\tif (verb.equals(Verbs.PUT) || verb.equals(Verbs.POST)) {\n",
      "\t\t\taddBody(connection, getByteBodyContents());\n",
      "\t\t}\n",
      "\n",
      "\t\treturn new Response(connection);\n",
      "\t}\n",
      "\n",
      "\tvoid addHeaders(HttpURLConnection conn) {\n",
      "\t\tfor (Map.Entry<String, String> entry : headers.entrySet()) {\n",
      "\t\t\tconn.setRequestProperty(entry.getKey(), entry.getValue());\n",
      "\t\t}\n",
      "\t}\n",
      "\n",
      "\tvoid addBody(HttpURLConnection conn, byte[] content) throws IOException {\n",
      "\t\tconn.setRequestProperty(CONTENT_LENGTH, String.valueOf(content.length));\n",
      "\t\tconn.setDoOutput(true);\n",
      "\t\tconn.getOutputStream().write(content);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Add an HTTP Header to the Request\n",
      "\t *\n",
      "\t * @param key the header name\n",
      "\t * @param value the header value\n",
      "\t */\n",
      "\tpublic void addHeader(String key, String value) {\n",
      "\t\tthis.headers.put(key, value);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Add a body Parameter (for POST/ PUT Requests)\n",
      "\t *\n",
      "\t * @param key the parameter name\n",
      "\t * @param value the parameter value\n",
      "\t */\n",
      "\tpublic void addBodyParameter(String key, String value) {\n",
      "\t\tthis.bodyParams.put(key, value);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Add a QueryString parameter\n",
      "\t *\n",
      "\t * @param key the parameter name\n",
      "\t * @param value the parameter value\n",
      "\t */\n",
      "\tpublic void addQuerystringParameter(String key, String value) {\n",
      "\t\tthis.querystringParams.put(key, value);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Add body payload.\n",
      "\t *\n",
      "\t * This method is used when the HTTP body is not a form-url-encoded string,\n",
      "\t * but another thing. Like for example XML.\n",
      "\t *\n",
      "\t * Note: The contents are not part of the OAuth signature\n",
      "\t *\n",
      "\t * @param payload the body of the request\n",
      "\t */\n",
      "\tpublic void addPayload(String payload) {\n",
      "\t\tthis.payload = payload;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Get a {@link Map} of the query string parameters.\n",
      "\t *\n",
      "\t * @return a map containing the query string parameters\n",
      "\t * @throws OAuthException if the URL is not valid\n",
      "\t */\n",
      "\tpublic Map<String, String> getQueryStringParams() {\n",
      "\t\ttry {\n",
      "\t\t\tMap<String, String> params = new HashMap<String, String>();\n",
      "\t\t\tString queryString = new URL(url).getQuery();\n",
      "\n",
      "\t\t\tparams.putAll(URLUtils.queryStringToMap(queryString));\n",
      "\t\t\tparams.putAll(this.querystringParams);\n",
      "\n",
      "\t\t\treturn params;\n",
      "\t\t} catch (MalformedURLException mue) {\n",
      "\t\t\tthrow new OAuthException(\"Malformed URL\", mue);\n",
      "\t\t}\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Obtains a {@link Map} of the body parameters.\n",
      "\t *\n",
      "\t * @return a map containing the body parameters.\n",
      "\t */\n",
      "\tpublic Map<String, String> getBodyParams() {\n",
      "\t\treturn bodyParams;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Obtains the URL of the HTTP Request.\n",
      "\t *\n",
      "\t * @return the original URL of the HTTP Request\n",
      "\t */\n",
      "\tpublic String getUrl() {\n",
      "\t\treturn url;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Returns the URL without the port and the query string part.\n",
      "\t *\n",
      "\t * @return the OAuth-sanitized URL\n",
      "\t */\n",
      "\tpublic String getSanitizedUrl() {\n",
      "\t\treturn url.replaceAll(\"\\\\?.*\", \"\").replace(\"\\\\:\\\\d{4}\", \"\");\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Returns the body of the request\n",
      "\t *\n",
      "\t * @return form encoded string\n",
      "\t * @throws OAuthException if the charset chosen is not supported\n",
      "\t */\n",
      "\tpublic String getBodyContents() {\n",
      "\t\ttry {\n",
      "\t\t\treturn new String(getByteBodyContents(), getCharset());\n",
      "\t\t} catch (UnsupportedEncodingException uee) {\n",
      "\t\t\tthrow new OAuthException(\"Unsupported Charset: \" + charset, uee);\n",
      "\t\t}\n",
      "\t}\n",
      "\n",
      "\tbyte[] getByteBodyContents() {\n",
      "\n",
      "\t\tString body = (payload != null) ? payload : URLUtils.formURLEncodeMap(bodyParams);\n",
      "\n",
      "\t\ttry {\n",
      "\t\t\treturn body.getBytes(getCharset());\n",
      "\t\t} catch (UnsupportedEncodingException uee) {\n",
      "\t\t\tthrow new OAuthException(\"Unsupported Charset: \" + getCharset(), uee);\n",
      "\t\t}\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Returns the HTTP Verb\n",
      "\t *\n",
      "\t * @return the verb\n",
      "\t */\n",
      "\tpublic Verbs getVerb() {\n",
      "\t\treturn verb;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Returns the connection headers as a {@link Map}\n",
      "\t *\n",
      "\t * @return map of headers\n",
      "\t */\n",
      "\tpublic Map<String, String> getHeaders() {\n",
      "\t\treturn headers;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Returns the connection charset. Defaults to {@link Charset}\n",
      "\t * defaultCharset if not set\n",
      "\t *\n",
      "\t * @return charset\n",
      "\t */\n",
      "\tpublic String getCharset() {\n",
      "\t\treturn (charset == null) ? Charset.defaultCharset().name() : charset;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Sets the connect timeout for the underlying {@link HttpURLConnection}\n",
      "\t *\n",
      "\t * @param duration duration of the timeout\n",
      "\t *\n",
      "\t * @param unit unit of time (milliseconds, seconds, etc)\n",
      "\t */\n",
      "\tpublic void setConnectTimeout(int duration, TimeUnit unit) {\n",
      "\t\tthis.connectTimeout = (int) unit.toMillis(duration);\n",
      "\t}\n",
      "\t\n",
      "\t/**\n",
      "\t * Gets the connect timeout in millisecond units\n",
      "\t */\n",
      "\tpublic int getConnectTimeoutInMillis() {\n",
      "\t    return connectTimeout;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Sets the read timeout for the underlying {@link HttpURLConnection}\n",
      "\t *\n",
      "\t * @param duration duration of the timeout\n",
      "\t *\n",
      "\t * @param unit unit of time (milliseconds, seconds, etc)\n",
      "\t */\n",
      "\tpublic void setReadTimeout(int duration, TimeUnit unit) {\n",
      "\t\tthis.readTimeout = (int) unit.toMillis(duration);\n",
      "\t}\n",
      "\t\n",
      "\t/**\n",
      "\t * Gets the read timeout in millisecond units\n",
      "\t */\n",
      "\tpublic int getReadTimeoutInMillis() {\n",
      "\t    return readTimeout;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Set the charset of the body of the request\n",
      "\t *\n",
      "\t * @param charsetName name of the charset of the request\n",
      "\t */\n",
      "\tpublic void setCharset(String charsetName) {\n",
      "\t\tthis.charset = charsetName;\n",
      "\t}\n",
      "\t\n",
      "\t\n",
      "\t/**\n",
      "\t * Sets wether the underlying Http Connection is persistent or not.\n",
      "\t *\n",
      "\t * @see http://download.oracle.com/javase/1.5.0/docs/guide/net/http-keepalive.html\n",
      "\t * @param connectionKeepAlive\n",
      "\t */\n",
      "\tpublic void setConnectionKeepAlive(boolean connectionKeepAlive) {\n",
      "\t\tthis.connectionKeepAlive = connectionKeepAlive;\n",
      "\t}\n",
      "\t\n",
      "\t/**\n",
      "\t * Returns the connection keepalive setting\n",
      "\t */\n",
      "\tpublic boolean getConnectionKeepAlive() {\n",
      "\t    return connectionKeepAlive;\n",
      "\t}\n",
      "\n",
      "\t/*\n",
      "\t * We need this in order to stub the connection object for test cases\n",
      "\t */\n",
      "\tvoid setConnection(HttpURLConnection connection) {\n",
      "\t\tthis.connection = connection;\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Set the proxy that will be used for the rquest\n",
      "\t * @param proxy proxy to be used\n",
      "\t */\n",
      "\tpublic void setProxy(Proxy proxy) {\n",
      "\t\tthis.proxy = proxy;\n",
      "\t}\n",
      "\t\n",
      "\t/**\n",
      "\t * Return the request proxy\n",
      "\t */\n",
      "\tpublic Proxy getProxy() {\n",
      "\t    return proxy;\n",
      "\t}\n",
      "\n",
      "\t@Override\n",
      "\tpublic String toString() {\n",
      "\t\treturn String.format(\"@Request(%s %s)\", getVerb(), getUrl());\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.io.OutputStream;\n",
      "import java.net.HttpURLConnection;\n",
      "import java.net.InetSocketAddress;\n",
      "import java.net.Proxy;\n",
      "import java.net.URL;\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.TimeUnit;\n",
      "\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "import org.junit.runner.RunWith;\n",
      "import org.mockito.Mock;\n",
      "import org.mockito.Mockito;\n",
      "import org.mockito.runners.MockitoJUnitRunner;\n",
      "\n",
      "import static org.mockito.Mockito.*;\n",
      "\n",
      "/**\n",
      " * The class <code>RequestTest</code> contains tests for the class\n",
      " * <code>{@link Request}</code>.\n",
      " */\n",
      "@RunWith(MockitoJUnitRunner.class)\n",
      "public class RequestTest {\n",
      "\n",
      "\tprivate static final Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"0.0.0.0\", 8080));\n",
      "\n",
      "\t@Mock\n",
      "\tprivate HttpURLConnection mockHttpConnection;\n",
      "\t\n",
      "\t@Mock\n",
      "\tprivate OutputStream mockOut;\n",
      "\n",
      "\t@Mock\n",
      "\tprivate InputStream mockInput;\n",
      "\n",
      "\t@Mock\n",
      "\tprivate InputStream mockErrStream;\n",
      "\n",
      "\t@Before\n",
      "\tpublic void init() {\n",
      "\n",
      "\t\ttry {\n",
      "\t\t\twhen(mockHttpConnection.getOutputStream()).thenReturn(mockOut);\n",
      "\t\t\twhen(mockHttpConnection.getErrorStream()).thenReturn(mockErrStream);\n",
      "\n",
      "\t\t\tURL url = new URL(\"http://mock.url/to/test\");\n",
      "\t\t\twhen(mockHttpConnection.getURL()).thenReturn(url);\n",
      "\n",
      "\t\t} catch (IOException e) {\n",
      "\t\t\t// TODO Auto-generated catch block\n",
      "\t\t\te.printStackTrace();\n",
      "\t\t}\n",
      "\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Request(Verbs,String) constructor test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testRequest_1() throws Exception {\n",
      "\t\tVerbs verb = Verbs.DELETE;\n",
      "\t\tString url = \"\";\n",
      "\n",
      "\t\tRequest result = new Request(verb, url);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(\"UTF-8\", result.getCharset());\n",
      "\t\tassertEquals(\"\", result.getUrl());\n",
      "\t\tassertEquals(\"@Request(DELETE )\", result.toString());\n",
      "\t\tassertEquals(\"\", result.getSanitizedUrl());\n",
      "\t\tassertEquals(\"\", result.getBodyContents());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void addBody(HttpURLConnection,byte[]) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAddBody_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tbyte[] content = \"Dummy Payload\".getBytes();\n",
      "\n",
      "\t\tHttpURLConnection mockConn = Mockito.mock(HttpURLConnection.class);\n",
      "\n",
      "\t\tOutputStream mockOut = Mockito.mock(OutputStream.class);\n",
      "\t\tMockito.when(mockConn.getOutputStream()).thenReturn(mockOut);\n",
      "\n",
      "\t\tSystem.out.println(mockConn);\n",
      "\t\tfixture.addBody(mockConn, content);\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void addBody(HttpURLConnection,byte[]) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAddBody_2() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tbyte[] content = \"Dummy Payload\".getBytes();\n",
      "\n",
      "\t\tfixture.addBody(mockHttpConnection, content);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void addBody(HttpURLConnection,byte[]) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAddBody_3() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\tbyte[] content = \"Dummy Payload\".getBytes();\n",
      "\n",
      "\t\tfixture.addBody(mockHttpConnection, content);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void addBodyParameter(String,String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAddBodyParameter_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\tString key = \"\";\n",
      "\t\tString value = \"\";\n",
      "\n",
      "\t\tfixture.addBodyParameter(key, value);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void addHeader(String,String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAddHeader_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\tString key = \"\";\n",
      "\t\tString value = \"\";\n",
      "\n",
      "\t\tfixture.addHeader(key, value);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void addHeaders(HttpURLConnection) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAddHeaders_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tfixture.addHeaders(mockHttpConnection);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void addHeaders(HttpURLConnection) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAddHeaders_2() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tfixture.addHeaders(mockHttpConnection);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void addPayload(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAddPayload_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\tString payload = \"\";\n",
      "\n",
      "\t\tfixture.addPayload(payload);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void addQuerystringParameter(String,String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAddQuerystringParameter_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\tString key = \"\";\n",
      "\t\tString value = \"\";\n",
      "\n",
      "\t\tfixture.addQuerystringParameter(key, value);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Response doSend() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testDoSend_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tResponse result = fixture.doSend();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Response doSend() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testDoSend_2() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tResponse result = fixture.doSend();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Response doSend() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testDoSend_3() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tResponse result = fixture.doSend();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Response doSend() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testDoSend_4() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tResponse result = fixture.doSend();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getBodyContents() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetBodyContents_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getBodyContents();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getBodyContents() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetBodyContents_2() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getBodyContents();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Map<String, String> getBodyParams() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetBodyParams_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tMap<String, String> result = fixture.getBodyParams();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the byte[] getByteBodyContents() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetByteBodyContents_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tbyte[] result = fixture.getByteBodyContents();\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the byte[] getByteBodyContents() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetByteBodyContents_2() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload((String) null);\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tbyte[] result = fixture.getByteBodyContents();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getCharset() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCharset_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getCharset();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getCharset() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetCharset_2() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset((String) null);\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getCharset();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Map<String, String> getHeaders() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetHeaders_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tMap<String, String> result = fixture.getHeaders();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Map<String, String> getQueryStringParams() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetQueryStringParams_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"http://mock.url/?key1=value1&key2=value2\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tMap<String, String> result = fixture.getQueryStringParams();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Map<String, String> getQueryStringParams() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetQueryStringParams_2() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"http://mock.url/?key1=value1&key2=value2\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tMap<String, String> result = fixture.getQueryStringParams();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getSanitizedUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetSanitizedUrl_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getSanitizedUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getUrl() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetUrl_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.getUrl();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Verbs getVerb() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetVerb_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tVerbs result = fixture.getVerb();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Response send() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSend_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tResponse result = fixture.send();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Response send() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSend_2() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tResponse result = fixture.send();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Response send() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSend_3() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tResponse result = fixture.send();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setCharset(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetCharset_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\tString charsetName = \"\";\n",
      "\n",
      "\t\tfixture.setCharset(charsetName);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setConnectTimeout(int,TimeUnit) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetConnectTimeout_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\tint duration = 1;\n",
      "\t\tTimeUnit unit = TimeUnit.DAYS;\n",
      "\n",
      "\t\tfixture.setConnectTimeout(duration, unit);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setConnection(HttpURLConnection) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetConnection_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\tHttpURLConnection connection = null;\n",
      "\n",
      "\t\tfixture.setConnection(connection);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setConnectionKeepAlive(boolean) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetConnectionKeepAlive_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\tboolean connectionKeepAlive = true;\n",
      "\n",
      "\t\tfixture.setConnectionKeepAlive(connectionKeepAlive);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setProxy(Proxy) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetProxy_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\t// Proxy proxy = proxy;\n",
      "\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the void setReadTimeout(int,TimeUnit) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testSetReadTimeout_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\t\tint duration = 1;\n",
      "\t\tTimeUnit unit = TimeUnit.DAYS;\n",
      "\n",
      "\t\tfixture.setReadTimeout(duration, unit);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String toString() method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testToString_1() throws Exception {\n",
      "\t\tRequest fixture = new Request(Verbs.DELETE, \"\");\n",
      "\t\tfixture.setConnectionKeepAlive(true);\n",
      "\t\tfixture.setCharset(\"UTF-8\");\n",
      "\t\tfixture.addPayload(\"Dummy payload\");\n",
      "\t\tfixture.setConnection(mockHttpConnection);\n",
      "\t\tfixture.setProxy(proxy);\n",
      "\n",
      "\t\tString result = fixture.toString();\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.IllegalArgumentException: type DIRECT is not compatible\n",
      "\t\t// with address 0.0.0.0/0.0.0.0:1\n",
      "\t\t// at java.net.Proxy.<init>(Proxy.java:95)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "Request::::send()": [
        66,
        70
      ],
      "Request::::createConnection()": [
        72,
        85
      ],
      "Request::::doSend()": [
        87,
        96
      ],
      "Request::::addHeaders(java.net.HttpURLConnection)": [
        98,
        102
      ],
      "Request::::addBody(java.net.HttpURLConnection,byte[])": [
        104,
        108
      ],
      "Request::::addHeader(java.lang.String,java.lang.String)": [
        116,
        118
      ],
      "Request::::addBodyParameter(java.lang.String,java.lang.String)": [
        126,
        128
      ],
      "Request::::addQuerystringParameter(java.lang.String,java.lang.String)": [
        136,
        138
      ],
      "Request::::addPayload(java.lang.String)": [
        150,
        152
      ],
      "Request::::getQueryStringParams()": [
        160,
        172
      ],
      "Request::::getBodyParams()": [
        179,
        181
      ],
      "Request::::getUrl()": [
        188,
        190
      ],
      "Request::::getSanitizedUrl()": [
        197,
        199
      ],
      "Request::::getBodyContents()": [
        207,
        213
      ],
      "Request::::getByteBodyContents()": [
        215,
        224
      ],
      "Request::::getVerb()": [
        231,
        233
      ],
      "Request::::getHeaders()": [
        240,
        242
      ],
      "Request::::getCharset()": [
        250,
        252
      ],
      "Request::::setConnectTimeout(int,java.util.concurrent.TimeUnit)": [
        261,
        263
      ],
      "Request::::getConnectTimeoutInMillis()": [
        268,
        270
      ],
      "Request::::setReadTimeout(int,java.util.concurrent.TimeUnit)": [
        279,
        281
      ],
      "Request::::getReadTimeoutInMillis()": [
        286,
        288
      ],
      "Request::::setCharset(java.lang.String)": [
        295,
        297
      ],
      "Request::::setConnectionKeepAlive(boolean)": [
        306,
        308
      ],
      "Request::::getConnectionKeepAlive()": [
        313,
        315
      ],
      "Request::::setConnection(java.net.HttpURLConnection)": [
        320,
        322
      ],
      "Request::::setProxy(java.net.Proxy)": [
        328,
        330
      ],
      "Request::::getProxy()": [
        335,
        337
      ],
      "Request::::toString()": [
        339,
        342
      ]
    },
    "test_method_lines_dic": {
      "RequestTest::::init()": [
        46,
        61
      ],
      "RequestTest::::testRequest_1()": [
        70,
        84
      ],
      "RequestTest::::testAddBody_1()": [
        93,
        117
      ],
      "RequestTest::::testAddBody_2()": [
        126,
        145
      ],
      "RequestTest::::testAddBody_3()": [
        154,
        172
      ],
      "RequestTest::::testAddBodyParameter_1()": [
        181,
        200
      ],
      "RequestTest::::testAddHeader_1()": [
        209,
        228
      ],
      "RequestTest::::testAddHeaders_1()": [
        237,
        254
      ],
      "RequestTest::::testAddHeaders_2()": [
        263,
        280
      ],
      "RequestTest::::testAddPayload_1()": [
        289,
        307
      ],
      "RequestTest::::testAddQuerystringParameter_1()": [
        316,
        335
      ],
      "RequestTest::::testDoSend_1()": [
        344,
        362
      ],
      "RequestTest::::testDoSend_2()": [
        371,
        389
      ],
      "RequestTest::::testDoSend_3()": [
        398,
        416
      ],
      "RequestTest::::testDoSend_4()": [
        425,
        443
      ],
      "RequestTest::::testGetBodyContents_1()": [
        452,
        470
      ],
      "RequestTest::::testGetBodyContents_2()": [
        479,
        497
      ],
      "RequestTest::::testGetBodyParams_1()": [
        506,
        524
      ],
      "RequestTest::::testGetByteBodyContents_1()": [
        533,
        545
      ],
      "RequestTest::::testGetByteBodyContents_2()": [
        554,
        572
      ],
      "RequestTest::::testGetCharset_1()": [
        581,
        599
      ],
      "RequestTest::::testGetCharset_2()": [
        608,
        626
      ],
      "RequestTest::::testGetHeaders_1()": [
        635,
        653
      ],
      "RequestTest::::testGetQueryStringParams_1()": [
        662,
        681
      ],
      "RequestTest::::testGetQueryStringParams_2()": [
        690,
        708
      ],
      "RequestTest::::testGetSanitizedUrl_1()": [
        717,
        735
      ],
      "RequestTest::::testGetUrl_1()": [
        744,
        763
      ],
      "RequestTest::::testGetVerb_1()": [
        772,
        790
      ],
      "RequestTest::::testSend_1()": [
        799,
        817
      ],
      "RequestTest::::testSend_2()": [
        826,
        844
      ],
      "RequestTest::::testSend_3()": [
        853,
        871
      ],
      "RequestTest::::testSetCharset_1()": [
        880,
        898
      ],
      "RequestTest::::testSetConnectTimeout_1()": [
        907,
        926
      ],
      "RequestTest::::testSetConnection_1()": [
        935,
        953
      ],
      "RequestTest::::testSetConnectionKeepAlive_1()": [
        962,
        980
      ],
      "RequestTest::::testSetProxy_1()": [
        989,
        1007
      ],
      "RequestTest::::testSetReadTimeout_1()": [
        1016,
        1035
      ],
      "RequestTest::::testToString_1()": [
        1044,
        1062
      ]
    },
    "reverse_method_lines_dic": {
      "66": "Request::::send()",
      "67": "Request::::send()",
      "68": "Request::::send()",
      "69": "Request::::send()",
      "70": "Request::::send()",
      "72": "Request::::createConnection()",
      "73": "Request::::createConnection()",
      "74": "Request::::createConnection()",
      "75": "Request::::createConnection()",
      "76": "Request::::createConnection()",
      "77": "Request::::createConnection()",
      "78": "Request::::createConnection()",
      "79": "Request::::createConnection()",
      "80": "Request::::createConnection()",
      "81": "Request::::createConnection()",
      "82": "Request::::createConnection()",
      "83": "Request::::createConnection()",
      "84": "Request::::createConnection()",
      "85": "Request::::createConnection()",
      "87": "Request::::doSend()",
      "88": "Request::::doSend()",
      "89": "Request::::doSend()",
      "90": "Request::::doSend()",
      "91": "Request::::doSend()",
      "92": "Request::::doSend()",
      "93": "Request::::doSend()",
      "94": "Request::::doSend()",
      "95": "Request::::doSend()",
      "96": "Request::::doSend()",
      "98": "Request::::addHeaders(java.net.HttpURLConnection)",
      "99": "Request::::addHeaders(java.net.HttpURLConnection)",
      "100": "Request::::addHeaders(java.net.HttpURLConnection)",
      "101": "Request::::addHeaders(java.net.HttpURLConnection)",
      "102": "Request::::addHeaders(java.net.HttpURLConnection)",
      "104": "Request::::addBody(java.net.HttpURLConnection,byte[])",
      "105": "Request::::addBody(java.net.HttpURLConnection,byte[])",
      "106": "Request::::addBody(java.net.HttpURLConnection,byte[])",
      "107": "Request::::addBody(java.net.HttpURLConnection,byte[])",
      "108": "Request::::addBody(java.net.HttpURLConnection,byte[])",
      "116": "Request::::addHeader(java.lang.String,java.lang.String)",
      "117": "Request::::addHeader(java.lang.String,java.lang.String)",
      "118": "Request::::addHeader(java.lang.String,java.lang.String)",
      "126": "Request::::addBodyParameter(java.lang.String,java.lang.String)",
      "127": "Request::::addBodyParameter(java.lang.String,java.lang.String)",
      "128": "Request::::addBodyParameter(java.lang.String,java.lang.String)",
      "136": "Request::::addQuerystringParameter(java.lang.String,java.lang.String)",
      "137": "Request::::addQuerystringParameter(java.lang.String,java.lang.String)",
      "138": "Request::::addQuerystringParameter(java.lang.String,java.lang.String)",
      "150": "Request::::addPayload(java.lang.String)",
      "151": "Request::::addPayload(java.lang.String)",
      "152": "Request::::addPayload(java.lang.String)",
      "160": "Request::::getQueryStringParams()",
      "161": "Request::::getQueryStringParams()",
      "162": "Request::::getQueryStringParams()",
      "163": "Request::::getQueryStringParams()",
      "164": "Request::::getQueryStringParams()",
      "165": "Request::::getQueryStringParams()",
      "166": "Request::::getQueryStringParams()",
      "167": "Request::::getQueryStringParams()",
      "168": "Request::::getQueryStringParams()",
      "169": "Request::::getQueryStringParams()",
      "170": "Request::::getQueryStringParams()",
      "171": "Request::::getQueryStringParams()",
      "172": "Request::::getQueryStringParams()",
      "179": "Request::::getBodyParams()",
      "180": "Request::::getBodyParams()",
      "181": "Request::::getBodyParams()",
      "188": "Request::::getUrl()",
      "189": "Request::::getUrl()",
      "190": "Request::::getUrl()",
      "197": "Request::::getSanitizedUrl()",
      "198": "Request::::getSanitizedUrl()",
      "199": "Request::::getSanitizedUrl()",
      "207": "Request::::getBodyContents()",
      "208": "Request::::getBodyContents()",
      "209": "Request::::getBodyContents()",
      "210": "Request::::getBodyContents()",
      "211": "Request::::getBodyContents()",
      "212": "Request::::getBodyContents()",
      "213": "Request::::getBodyContents()",
      "215": "Request::::getByteBodyContents()",
      "216": "Request::::getByteBodyContents()",
      "217": "Request::::getByteBodyContents()",
      "218": "Request::::getByteBodyContents()",
      "219": "Request::::getByteBodyContents()",
      "220": "Request::::getByteBodyContents()",
      "221": "Request::::getByteBodyContents()",
      "222": "Request::::getByteBodyContents()",
      "223": "Request::::getByteBodyContents()",
      "224": "Request::::getByteBodyContents()",
      "231": "Request::::getVerb()",
      "232": "Request::::getVerb()",
      "233": "Request::::getVerb()",
      "240": "Request::::getHeaders()",
      "241": "Request::::getHeaders()",
      "242": "Request::::getHeaders()",
      "250": "Request::::getCharset()",
      "251": "Request::::getCharset()",
      "252": "Request::::getCharset()",
      "261": "Request::::setConnectTimeout(int,java.util.concurrent.TimeUnit)",
      "262": "Request::::setConnectTimeout(int,java.util.concurrent.TimeUnit)",
      "263": "Request::::setConnectTimeout(int,java.util.concurrent.TimeUnit)",
      "268": "Request::::getConnectTimeoutInMillis()",
      "269": "Request::::getConnectTimeoutInMillis()",
      "270": "Request::::getConnectTimeoutInMillis()",
      "279": "Request::::setReadTimeout(int,java.util.concurrent.TimeUnit)",
      "280": "Request::::setReadTimeout(int,java.util.concurrent.TimeUnit)",
      "281": "Request::::setReadTimeout(int,java.util.concurrent.TimeUnit)",
      "286": "Request::::getReadTimeoutInMillis()",
      "287": "Request::::getReadTimeoutInMillis()",
      "288": "Request::::getReadTimeoutInMillis()",
      "295": "Request::::setCharset(java.lang.String)",
      "296": "Request::::setCharset(java.lang.String)",
      "297": "Request::::setCharset(java.lang.String)",
      "306": "Request::::setConnectionKeepAlive(boolean)",
      "307": "Request::::setConnectionKeepAlive(boolean)",
      "308": "Request::::setConnectionKeepAlive(boolean)",
      "313": "Request::::getConnectionKeepAlive()",
      "314": "Request::::getConnectionKeepAlive()",
      "315": "Request::::getConnectionKeepAlive()",
      "320": "Request::::setConnection(java.net.HttpURLConnection)",
      "321": "Request::::setConnection(java.net.HttpURLConnection)",
      "322": "Request::::setConnection(java.net.HttpURLConnection)",
      "328": "Request::::setProxy(java.net.Proxy)",
      "329": "Request::::setProxy(java.net.Proxy)",
      "330": "Request::::setProxy(java.net.Proxy)",
      "335": "Request::::getProxy()",
      "336": "Request::::getProxy()",
      "337": "Request::::getProxy()",
      "339": "Request::::toString()",
      "340": "Request::::toString()",
      "341": "Request::::toString()",
      "342": "Request::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "46": "RequestTest::::init()",
      "47": "RequestTest::::init()",
      "48": "RequestTest::::init()",
      "49": "RequestTest::::init()",
      "50": "RequestTest::::init()",
      "51": "RequestTest::::init()",
      "52": "RequestTest::::init()",
      "53": "RequestTest::::init()",
      "54": "RequestTest::::init()",
      "55": "RequestTest::::init()",
      "56": "RequestTest::::init()",
      "57": "RequestTest::::init()",
      "58": "RequestTest::::init()",
      "59": "RequestTest::::init()",
      "60": "RequestTest::::init()",
      "61": "RequestTest::::init()",
      "70": "RequestTest::::testRequest_1()",
      "71": "RequestTest::::testRequest_1()",
      "72": "RequestTest::::testRequest_1()",
      "73": "RequestTest::::testRequest_1()",
      "74": "RequestTest::::testRequest_1()",
      "75": "RequestTest::::testRequest_1()",
      "76": "RequestTest::::testRequest_1()",
      "77": "RequestTest::::testRequest_1()",
      "78": "RequestTest::::testRequest_1()",
      "79": "RequestTest::::testRequest_1()",
      "80": "RequestTest::::testRequest_1()",
      "81": "RequestTest::::testRequest_1()",
      "82": "RequestTest::::testRequest_1()",
      "83": "RequestTest::::testRequest_1()",
      "84": "RequestTest::::testRequest_1()",
      "93": "RequestTest::::testAddBody_1()",
      "94": "RequestTest::::testAddBody_1()",
      "95": "RequestTest::::testAddBody_1()",
      "96": "RequestTest::::testAddBody_1()",
      "97": "RequestTest::::testAddBody_1()",
      "98": "RequestTest::::testAddBody_1()",
      "99": "RequestTest::::testAddBody_1()",
      "100": "RequestTest::::testAddBody_1()",
      "101": "RequestTest::::testAddBody_1()",
      "102": "RequestTest::::testAddBody_1()",
      "103": "RequestTest::::testAddBody_1()",
      "104": "RequestTest::::testAddBody_1()",
      "105": "RequestTest::::testAddBody_1()",
      "106": "RequestTest::::testAddBody_1()",
      "107": "RequestTest::::testAddBody_1()",
      "108": "RequestTest::::testAddBody_1()",
      "109": "RequestTest::::testAddBody_1()",
      "110": "RequestTest::::testAddBody_1()",
      "111": "RequestTest::::testAddBody_1()",
      "112": "RequestTest::::testAddBody_1()",
      "113": "RequestTest::::testAddBody_1()",
      "114": "RequestTest::::testAddBody_1()",
      "115": "RequestTest::::testAddBody_1()",
      "116": "RequestTest::::testAddBody_1()",
      "117": "RequestTest::::testAddBody_1()",
      "126": "RequestTest::::testAddBody_2()",
      "127": "RequestTest::::testAddBody_2()",
      "128": "RequestTest::::testAddBody_2()",
      "129": "RequestTest::::testAddBody_2()",
      "130": "RequestTest::::testAddBody_2()",
      "131": "RequestTest::::testAddBody_2()",
      "132": "RequestTest::::testAddBody_2()",
      "133": "RequestTest::::testAddBody_2()",
      "134": "RequestTest::::testAddBody_2()",
      "135": "RequestTest::::testAddBody_2()",
      "136": "RequestTest::::testAddBody_2()",
      "137": "RequestTest::::testAddBody_2()",
      "138": "RequestTest::::testAddBody_2()",
      "139": "RequestTest::::testAddBody_2()",
      "140": "RequestTest::::testAddBody_2()",
      "141": "RequestTest::::testAddBody_2()",
      "142": "RequestTest::::testAddBody_2()",
      "143": "RequestTest::::testAddBody_2()",
      "144": "RequestTest::::testAddBody_2()",
      "145": "RequestTest::::testAddBody_2()",
      "154": "RequestTest::::testAddBody_3()",
      "155": "RequestTest::::testAddBody_3()",
      "156": "RequestTest::::testAddBody_3()",
      "157": "RequestTest::::testAddBody_3()",
      "158": "RequestTest::::testAddBody_3()",
      "159": "RequestTest::::testAddBody_3()",
      "160": "RequestTest::::testAddBody_3()",
      "161": "RequestTest::::testAddBody_3()",
      "162": "RequestTest::::testAddBody_3()",
      "163": "RequestTest::::testAddBody_3()",
      "164": "RequestTest::::testAddBody_3()",
      "165": "RequestTest::::testAddBody_3()",
      "166": "RequestTest::::testAddBody_3()",
      "167": "RequestTest::::testAddBody_3()",
      "168": "RequestTest::::testAddBody_3()",
      "169": "RequestTest::::testAddBody_3()",
      "170": "RequestTest::::testAddBody_3()",
      "171": "RequestTest::::testAddBody_3()",
      "172": "RequestTest::::testAddBody_3()",
      "181": "RequestTest::::testAddBodyParameter_1()",
      "182": "RequestTest::::testAddBodyParameter_1()",
      "183": "RequestTest::::testAddBodyParameter_1()",
      "184": "RequestTest::::testAddBodyParameter_1()",
      "185": "RequestTest::::testAddBodyParameter_1()",
      "186": "RequestTest::::testAddBodyParameter_1()",
      "187": "RequestTest::::testAddBodyParameter_1()",
      "188": "RequestTest::::testAddBodyParameter_1()",
      "189": "RequestTest::::testAddBodyParameter_1()",
      "190": "RequestTest::::testAddBodyParameter_1()",
      "191": "RequestTest::::testAddBodyParameter_1()",
      "192": "RequestTest::::testAddBodyParameter_1()",
      "193": "RequestTest::::testAddBodyParameter_1()",
      "194": "RequestTest::::testAddBodyParameter_1()",
      "195": "RequestTest::::testAddBodyParameter_1()",
      "196": "RequestTest::::testAddBodyParameter_1()",
      "197": "RequestTest::::testAddBodyParameter_1()",
      "198": "RequestTest::::testAddBodyParameter_1()",
      "199": "RequestTest::::testAddBodyParameter_1()",
      "200": "RequestTest::::testAddBodyParameter_1()",
      "209": "RequestTest::::testAddHeader_1()",
      "210": "RequestTest::::testAddHeader_1()",
      "211": "RequestTest::::testAddHeader_1()",
      "212": "RequestTest::::testAddHeader_1()",
      "213": "RequestTest::::testAddHeader_1()",
      "214": "RequestTest::::testAddHeader_1()",
      "215": "RequestTest::::testAddHeader_1()",
      "216": "RequestTest::::testAddHeader_1()",
      "217": "RequestTest::::testAddHeader_1()",
      "218": "RequestTest::::testAddHeader_1()",
      "219": "RequestTest::::testAddHeader_1()",
      "220": "RequestTest::::testAddHeader_1()",
      "221": "RequestTest::::testAddHeader_1()",
      "222": "RequestTest::::testAddHeader_1()",
      "223": "RequestTest::::testAddHeader_1()",
      "224": "RequestTest::::testAddHeader_1()",
      "225": "RequestTest::::testAddHeader_1()",
      "226": "RequestTest::::testAddHeader_1()",
      "227": "RequestTest::::testAddHeader_1()",
      "228": "RequestTest::::testAddHeader_1()",
      "237": "RequestTest::::testAddHeaders_1()",
      "238": "RequestTest::::testAddHeaders_1()",
      "239": "RequestTest::::testAddHeaders_1()",
      "240": "RequestTest::::testAddHeaders_1()",
      "241": "RequestTest::::testAddHeaders_1()",
      "242": "RequestTest::::testAddHeaders_1()",
      "243": "RequestTest::::testAddHeaders_1()",
      "244": "RequestTest::::testAddHeaders_1()",
      "245": "RequestTest::::testAddHeaders_1()",
      "246": "RequestTest::::testAddHeaders_1()",
      "247": "RequestTest::::testAddHeaders_1()",
      "248": "RequestTest::::testAddHeaders_1()",
      "249": "RequestTest::::testAddHeaders_1()",
      "250": "RequestTest::::testAddHeaders_1()",
      "251": "RequestTest::::testAddHeaders_1()",
      "252": "RequestTest::::testAddHeaders_1()",
      "253": "RequestTest::::testAddHeaders_1()",
      "254": "RequestTest::::testAddHeaders_1()",
      "263": "RequestTest::::testAddHeaders_2()",
      "264": "RequestTest::::testAddHeaders_2()",
      "265": "RequestTest::::testAddHeaders_2()",
      "266": "RequestTest::::testAddHeaders_2()",
      "267": "RequestTest::::testAddHeaders_2()",
      "268": "RequestTest::::testAddHeaders_2()",
      "269": "RequestTest::::testAddHeaders_2()",
      "270": "RequestTest::::testAddHeaders_2()",
      "271": "RequestTest::::testAddHeaders_2()",
      "272": "RequestTest::::testAddHeaders_2()",
      "273": "RequestTest::::testAddHeaders_2()",
      "274": "RequestTest::::testAddHeaders_2()",
      "275": "RequestTest::::testAddHeaders_2()",
      "276": "RequestTest::::testAddHeaders_2()",
      "277": "RequestTest::::testAddHeaders_2()",
      "278": "RequestTest::::testAddHeaders_2()",
      "279": "RequestTest::::testAddHeaders_2()",
      "280": "RequestTest::::testAddHeaders_2()",
      "289": "RequestTest::::testAddPayload_1()",
      "290": "RequestTest::::testAddPayload_1()",
      "291": "RequestTest::::testAddPayload_1()",
      "292": "RequestTest::::testAddPayload_1()",
      "293": "RequestTest::::testAddPayload_1()",
      "294": "RequestTest::::testAddPayload_1()",
      "295": "RequestTest::::testAddPayload_1()",
      "296": "RequestTest::::testAddPayload_1()",
      "297": "RequestTest::::testAddPayload_1()",
      "298": "RequestTest::::testAddPayload_1()",
      "299": "RequestTest::::testAddPayload_1()",
      "300": "RequestTest::::testAddPayload_1()",
      "301": "RequestTest::::testAddPayload_1()",
      "302": "RequestTest::::testAddPayload_1()",
      "303": "RequestTest::::testAddPayload_1()",
      "304": "RequestTest::::testAddPayload_1()",
      "305": "RequestTest::::testAddPayload_1()",
      "306": "RequestTest::::testAddPayload_1()",
      "307": "RequestTest::::testAddPayload_1()",
      "316": "RequestTest::::testAddQuerystringParameter_1()",
      "317": "RequestTest::::testAddQuerystringParameter_1()",
      "318": "RequestTest::::testAddQuerystringParameter_1()",
      "319": "RequestTest::::testAddQuerystringParameter_1()",
      "320": "RequestTest::::testAddQuerystringParameter_1()",
      "321": "RequestTest::::testAddQuerystringParameter_1()",
      "322": "RequestTest::::testAddQuerystringParameter_1()",
      "323": "RequestTest::::testAddQuerystringParameter_1()",
      "324": "RequestTest::::testAddQuerystringParameter_1()",
      "325": "RequestTest::::testAddQuerystringParameter_1()",
      "326": "RequestTest::::testAddQuerystringParameter_1()",
      "327": "RequestTest::::testAddQuerystringParameter_1()",
      "328": "RequestTest::::testAddQuerystringParameter_1()",
      "329": "RequestTest::::testAddQuerystringParameter_1()",
      "330": "RequestTest::::testAddQuerystringParameter_1()",
      "331": "RequestTest::::testAddQuerystringParameter_1()",
      "332": "RequestTest::::testAddQuerystringParameter_1()",
      "333": "RequestTest::::testAddQuerystringParameter_1()",
      "334": "RequestTest::::testAddQuerystringParameter_1()",
      "335": "RequestTest::::testAddQuerystringParameter_1()",
      "344": "RequestTest::::testDoSend_1()",
      "345": "RequestTest::::testDoSend_1()",
      "346": "RequestTest::::testDoSend_1()",
      "347": "RequestTest::::testDoSend_1()",
      "348": "RequestTest::::testDoSend_1()",
      "349": "RequestTest::::testDoSend_1()",
      "350": "RequestTest::::testDoSend_1()",
      "351": "RequestTest::::testDoSend_1()",
      "352": "RequestTest::::testDoSend_1()",
      "353": "RequestTest::::testDoSend_1()",
      "354": "RequestTest::::testDoSend_1()",
      "355": "RequestTest::::testDoSend_1()",
      "356": "RequestTest::::testDoSend_1()",
      "357": "RequestTest::::testDoSend_1()",
      "358": "RequestTest::::testDoSend_1()",
      "359": "RequestTest::::testDoSend_1()",
      "360": "RequestTest::::testDoSend_1()",
      "361": "RequestTest::::testDoSend_1()",
      "362": "RequestTest::::testDoSend_1()",
      "371": "RequestTest::::testDoSend_2()",
      "372": "RequestTest::::testDoSend_2()",
      "373": "RequestTest::::testDoSend_2()",
      "374": "RequestTest::::testDoSend_2()",
      "375": "RequestTest::::testDoSend_2()",
      "376": "RequestTest::::testDoSend_2()",
      "377": "RequestTest::::testDoSend_2()",
      "378": "RequestTest::::testDoSend_2()",
      "379": "RequestTest::::testDoSend_2()",
      "380": "RequestTest::::testDoSend_2()",
      "381": "RequestTest::::testDoSend_2()",
      "382": "RequestTest::::testDoSend_2()",
      "383": "RequestTest::::testDoSend_2()",
      "384": "RequestTest::::testDoSend_2()",
      "385": "RequestTest::::testDoSend_2()",
      "386": "RequestTest::::testDoSend_2()",
      "387": "RequestTest::::testDoSend_2()",
      "388": "RequestTest::::testDoSend_2()",
      "389": "RequestTest::::testDoSend_2()",
      "398": "RequestTest::::testDoSend_3()",
      "399": "RequestTest::::testDoSend_3()",
      "400": "RequestTest::::testDoSend_3()",
      "401": "RequestTest::::testDoSend_3()",
      "402": "RequestTest::::testDoSend_3()",
      "403": "RequestTest::::testDoSend_3()",
      "404": "RequestTest::::testDoSend_3()",
      "405": "RequestTest::::testDoSend_3()",
      "406": "RequestTest::::testDoSend_3()",
      "407": "RequestTest::::testDoSend_3()",
      "408": "RequestTest::::testDoSend_3()",
      "409": "RequestTest::::testDoSend_3()",
      "410": "RequestTest::::testDoSend_3()",
      "411": "RequestTest::::testDoSend_3()",
      "412": "RequestTest::::testDoSend_3()",
      "413": "RequestTest::::testDoSend_3()",
      "414": "RequestTest::::testDoSend_3()",
      "415": "RequestTest::::testDoSend_3()",
      "416": "RequestTest::::testDoSend_3()",
      "425": "RequestTest::::testDoSend_4()",
      "426": "RequestTest::::testDoSend_4()",
      "427": "RequestTest::::testDoSend_4()",
      "428": "RequestTest::::testDoSend_4()",
      "429": "RequestTest::::testDoSend_4()",
      "430": "RequestTest::::testDoSend_4()",
      "431": "RequestTest::::testDoSend_4()",
      "432": "RequestTest::::testDoSend_4()",
      "433": "RequestTest::::testDoSend_4()",
      "434": "RequestTest::::testDoSend_4()",
      "435": "RequestTest::::testDoSend_4()",
      "436": "RequestTest::::testDoSend_4()",
      "437": "RequestTest::::testDoSend_4()",
      "438": "RequestTest::::testDoSend_4()",
      "439": "RequestTest::::testDoSend_4()",
      "440": "RequestTest::::testDoSend_4()",
      "441": "RequestTest::::testDoSend_4()",
      "442": "RequestTest::::testDoSend_4()",
      "443": "RequestTest::::testDoSend_4()",
      "452": "RequestTest::::testGetBodyContents_1()",
      "453": "RequestTest::::testGetBodyContents_1()",
      "454": "RequestTest::::testGetBodyContents_1()",
      "455": "RequestTest::::testGetBodyContents_1()",
      "456": "RequestTest::::testGetBodyContents_1()",
      "457": "RequestTest::::testGetBodyContents_1()",
      "458": "RequestTest::::testGetBodyContents_1()",
      "459": "RequestTest::::testGetBodyContents_1()",
      "460": "RequestTest::::testGetBodyContents_1()",
      "461": "RequestTest::::testGetBodyContents_1()",
      "462": "RequestTest::::testGetBodyContents_1()",
      "463": "RequestTest::::testGetBodyContents_1()",
      "464": "RequestTest::::testGetBodyContents_1()",
      "465": "RequestTest::::testGetBodyContents_1()",
      "466": "RequestTest::::testGetBodyContents_1()",
      "467": "RequestTest::::testGetBodyContents_1()",
      "468": "RequestTest::::testGetBodyContents_1()",
      "469": "RequestTest::::testGetBodyContents_1()",
      "470": "RequestTest::::testGetBodyContents_1()",
      "479": "RequestTest::::testGetBodyContents_2()",
      "480": "RequestTest::::testGetBodyContents_2()",
      "481": "RequestTest::::testGetBodyContents_2()",
      "482": "RequestTest::::testGetBodyContents_2()",
      "483": "RequestTest::::testGetBodyContents_2()",
      "484": "RequestTest::::testGetBodyContents_2()",
      "485": "RequestTest::::testGetBodyContents_2()",
      "486": "RequestTest::::testGetBodyContents_2()",
      "487": "RequestTest::::testGetBodyContents_2()",
      "488": "RequestTest::::testGetBodyContents_2()",
      "489": "RequestTest::::testGetBodyContents_2()",
      "490": "RequestTest::::testGetBodyContents_2()",
      "491": "RequestTest::::testGetBodyContents_2()",
      "492": "RequestTest::::testGetBodyContents_2()",
      "493": "RequestTest::::testGetBodyContents_2()",
      "494": "RequestTest::::testGetBodyContents_2()",
      "495": "RequestTest::::testGetBodyContents_2()",
      "496": "RequestTest::::testGetBodyContents_2()",
      "497": "RequestTest::::testGetBodyContents_2()",
      "506": "RequestTest::::testGetBodyParams_1()",
      "507": "RequestTest::::testGetBodyParams_1()",
      "508": "RequestTest::::testGetBodyParams_1()",
      "509": "RequestTest::::testGetBodyParams_1()",
      "510": "RequestTest::::testGetBodyParams_1()",
      "511": "RequestTest::::testGetBodyParams_1()",
      "512": "RequestTest::::testGetBodyParams_1()",
      "513": "RequestTest::::testGetBodyParams_1()",
      "514": "RequestTest::::testGetBodyParams_1()",
      "515": "RequestTest::::testGetBodyParams_1()",
      "516": "RequestTest::::testGetBodyParams_1()",
      "517": "RequestTest::::testGetBodyParams_1()",
      "518": "RequestTest::::testGetBodyParams_1()",
      "519": "RequestTest::::testGetBodyParams_1()",
      "520": "RequestTest::::testGetBodyParams_1()",
      "521": "RequestTest::::testGetBodyParams_1()",
      "522": "RequestTest::::testGetBodyParams_1()",
      "523": "RequestTest::::testGetBodyParams_1()",
      "524": "RequestTest::::testGetBodyParams_1()",
      "533": "RequestTest::::testGetByteBodyContents_1()",
      "534": "RequestTest::::testGetByteBodyContents_1()",
      "535": "RequestTest::::testGetByteBodyContents_1()",
      "536": "RequestTest::::testGetByteBodyContents_1()",
      "537": "RequestTest::::testGetByteBodyContents_1()",
      "538": "RequestTest::::testGetByteBodyContents_1()",
      "539": "RequestTest::::testGetByteBodyContents_1()",
      "540": "RequestTest::::testGetByteBodyContents_1()",
      "541": "RequestTest::::testGetByteBodyContents_1()",
      "542": "RequestTest::::testGetByteBodyContents_1()",
      "543": "RequestTest::::testGetByteBodyContents_1()",
      "544": "RequestTest::::testGetByteBodyContents_1()",
      "545": "RequestTest::::testGetByteBodyContents_1()",
      "554": "RequestTest::::testGetByteBodyContents_2()",
      "555": "RequestTest::::testGetByteBodyContents_2()",
      "556": "RequestTest::::testGetByteBodyContents_2()",
      "557": "RequestTest::::testGetByteBodyContents_2()",
      "558": "RequestTest::::testGetByteBodyContents_2()",
      "559": "RequestTest::::testGetByteBodyContents_2()",
      "560": "RequestTest::::testGetByteBodyContents_2()",
      "561": "RequestTest::::testGetByteBodyContents_2()",
      "562": "RequestTest::::testGetByteBodyContents_2()",
      "563": "RequestTest::::testGetByteBodyContents_2()",
      "564": "RequestTest::::testGetByteBodyContents_2()",
      "565": "RequestTest::::testGetByteBodyContents_2()",
      "566": "RequestTest::::testGetByteBodyContents_2()",
      "567": "RequestTest::::testGetByteBodyContents_2()",
      "568": "RequestTest::::testGetByteBodyContents_2()",
      "569": "RequestTest::::testGetByteBodyContents_2()",
      "570": "RequestTest::::testGetByteBodyContents_2()",
      "571": "RequestTest::::testGetByteBodyContents_2()",
      "572": "RequestTest::::testGetByteBodyContents_2()",
      "581": "RequestTest::::testGetCharset_1()",
      "582": "RequestTest::::testGetCharset_1()",
      "583": "RequestTest::::testGetCharset_1()",
      "584": "RequestTest::::testGetCharset_1()",
      "585": "RequestTest::::testGetCharset_1()",
      "586": "RequestTest::::testGetCharset_1()",
      "587": "RequestTest::::testGetCharset_1()",
      "588": "RequestTest::::testGetCharset_1()",
      "589": "RequestTest::::testGetCharset_1()",
      "590": "RequestTest::::testGetCharset_1()",
      "591": "RequestTest::::testGetCharset_1()",
      "592": "RequestTest::::testGetCharset_1()",
      "593": "RequestTest::::testGetCharset_1()",
      "594": "RequestTest::::testGetCharset_1()",
      "595": "RequestTest::::testGetCharset_1()",
      "596": "RequestTest::::testGetCharset_1()",
      "597": "RequestTest::::testGetCharset_1()",
      "598": "RequestTest::::testGetCharset_1()",
      "599": "RequestTest::::testGetCharset_1()",
      "608": "RequestTest::::testGetCharset_2()",
      "609": "RequestTest::::testGetCharset_2()",
      "610": "RequestTest::::testGetCharset_2()",
      "611": "RequestTest::::testGetCharset_2()",
      "612": "RequestTest::::testGetCharset_2()",
      "613": "RequestTest::::testGetCharset_2()",
      "614": "RequestTest::::testGetCharset_2()",
      "615": "RequestTest::::testGetCharset_2()",
      "616": "RequestTest::::testGetCharset_2()",
      "617": "RequestTest::::testGetCharset_2()",
      "618": "RequestTest::::testGetCharset_2()",
      "619": "RequestTest::::testGetCharset_2()",
      "620": "RequestTest::::testGetCharset_2()",
      "621": "RequestTest::::testGetCharset_2()",
      "622": "RequestTest::::testGetCharset_2()",
      "623": "RequestTest::::testGetCharset_2()",
      "624": "RequestTest::::testGetCharset_2()",
      "625": "RequestTest::::testGetCharset_2()",
      "626": "RequestTest::::testGetCharset_2()",
      "635": "RequestTest::::testGetHeaders_1()",
      "636": "RequestTest::::testGetHeaders_1()",
      "637": "RequestTest::::testGetHeaders_1()",
      "638": "RequestTest::::testGetHeaders_1()",
      "639": "RequestTest::::testGetHeaders_1()",
      "640": "RequestTest::::testGetHeaders_1()",
      "641": "RequestTest::::testGetHeaders_1()",
      "642": "RequestTest::::testGetHeaders_1()",
      "643": "RequestTest::::testGetHeaders_1()",
      "644": "RequestTest::::testGetHeaders_1()",
      "645": "RequestTest::::testGetHeaders_1()",
      "646": "RequestTest::::testGetHeaders_1()",
      "647": "RequestTest::::testGetHeaders_1()",
      "648": "RequestTest::::testGetHeaders_1()",
      "649": "RequestTest::::testGetHeaders_1()",
      "650": "RequestTest::::testGetHeaders_1()",
      "651": "RequestTest::::testGetHeaders_1()",
      "652": "RequestTest::::testGetHeaders_1()",
      "653": "RequestTest::::testGetHeaders_1()",
      "662": "RequestTest::::testGetQueryStringParams_1()",
      "663": "RequestTest::::testGetQueryStringParams_1()",
      "664": "RequestTest::::testGetQueryStringParams_1()",
      "665": "RequestTest::::testGetQueryStringParams_1()",
      "666": "RequestTest::::testGetQueryStringParams_1()",
      "667": "RequestTest::::testGetQueryStringParams_1()",
      "668": "RequestTest::::testGetQueryStringParams_1()",
      "669": "RequestTest::::testGetQueryStringParams_1()",
      "670": "RequestTest::::testGetQueryStringParams_1()",
      "671": "RequestTest::::testGetQueryStringParams_1()",
      "672": "RequestTest::::testGetQueryStringParams_1()",
      "673": "RequestTest::::testGetQueryStringParams_1()",
      "674": "RequestTest::::testGetQueryStringParams_1()",
      "675": "RequestTest::::testGetQueryStringParams_1()",
      "676": "RequestTest::::testGetQueryStringParams_1()",
      "677": "RequestTest::::testGetQueryStringParams_1()",
      "678": "RequestTest::::testGetQueryStringParams_1()",
      "679": "RequestTest::::testGetQueryStringParams_1()",
      "680": "RequestTest::::testGetQueryStringParams_1()",
      "681": "RequestTest::::testGetQueryStringParams_1()",
      "690": "RequestTest::::testGetQueryStringParams_2()",
      "691": "RequestTest::::testGetQueryStringParams_2()",
      "692": "RequestTest::::testGetQueryStringParams_2()",
      "693": "RequestTest::::testGetQueryStringParams_2()",
      "694": "RequestTest::::testGetQueryStringParams_2()",
      "695": "RequestTest::::testGetQueryStringParams_2()",
      "696": "RequestTest::::testGetQueryStringParams_2()",
      "697": "RequestTest::::testGetQueryStringParams_2()",
      "698": "RequestTest::::testGetQueryStringParams_2()",
      "699": "RequestTest::::testGetQueryStringParams_2()",
      "700": "RequestTest::::testGetQueryStringParams_2()",
      "701": "RequestTest::::testGetQueryStringParams_2()",
      "702": "RequestTest::::testGetQueryStringParams_2()",
      "703": "RequestTest::::testGetQueryStringParams_2()",
      "704": "RequestTest::::testGetQueryStringParams_2()",
      "705": "RequestTest::::testGetQueryStringParams_2()",
      "706": "RequestTest::::testGetQueryStringParams_2()",
      "707": "RequestTest::::testGetQueryStringParams_2()",
      "708": "RequestTest::::testGetQueryStringParams_2()",
      "717": "RequestTest::::testGetSanitizedUrl_1()",
      "718": "RequestTest::::testGetSanitizedUrl_1()",
      "719": "RequestTest::::testGetSanitizedUrl_1()",
      "720": "RequestTest::::testGetSanitizedUrl_1()",
      "721": "RequestTest::::testGetSanitizedUrl_1()",
      "722": "RequestTest::::testGetSanitizedUrl_1()",
      "723": "RequestTest::::testGetSanitizedUrl_1()",
      "724": "RequestTest::::testGetSanitizedUrl_1()",
      "725": "RequestTest::::testGetSanitizedUrl_1()",
      "726": "RequestTest::::testGetSanitizedUrl_1()",
      "727": "RequestTest::::testGetSanitizedUrl_1()",
      "728": "RequestTest::::testGetSanitizedUrl_1()",
      "729": "RequestTest::::testGetSanitizedUrl_1()",
      "730": "RequestTest::::testGetSanitizedUrl_1()",
      "731": "RequestTest::::testGetSanitizedUrl_1()",
      "732": "RequestTest::::testGetSanitizedUrl_1()",
      "733": "RequestTest::::testGetSanitizedUrl_1()",
      "734": "RequestTest::::testGetSanitizedUrl_1()",
      "735": "RequestTest::::testGetSanitizedUrl_1()",
      "744": "RequestTest::::testGetUrl_1()",
      "745": "RequestTest::::testGetUrl_1()",
      "746": "RequestTest::::testGetUrl_1()",
      "747": "RequestTest::::testGetUrl_1()",
      "748": "RequestTest::::testGetUrl_1()",
      "749": "RequestTest::::testGetUrl_1()",
      "750": "RequestTest::::testGetUrl_1()",
      "751": "RequestTest::::testGetUrl_1()",
      "752": "RequestTest::::testGetUrl_1()",
      "753": "RequestTest::::testGetUrl_1()",
      "754": "RequestTest::::testGetUrl_1()",
      "755": "RequestTest::::testGetUrl_1()",
      "756": "RequestTest::::testGetUrl_1()",
      "757": "RequestTest::::testGetUrl_1()",
      "758": "RequestTest::::testGetUrl_1()",
      "759": "RequestTest::::testGetUrl_1()",
      "760": "RequestTest::::testGetUrl_1()",
      "761": "RequestTest::::testGetUrl_1()",
      "762": "RequestTest::::testGetUrl_1()",
      "763": "RequestTest::::testGetUrl_1()",
      "772": "RequestTest::::testGetVerb_1()",
      "773": "RequestTest::::testGetVerb_1()",
      "774": "RequestTest::::testGetVerb_1()",
      "775": "RequestTest::::testGetVerb_1()",
      "776": "RequestTest::::testGetVerb_1()",
      "777": "RequestTest::::testGetVerb_1()",
      "778": "RequestTest::::testGetVerb_1()",
      "779": "RequestTest::::testGetVerb_1()",
      "780": "RequestTest::::testGetVerb_1()",
      "781": "RequestTest::::testGetVerb_1()",
      "782": "RequestTest::::testGetVerb_1()",
      "783": "RequestTest::::testGetVerb_1()",
      "784": "RequestTest::::testGetVerb_1()",
      "785": "RequestTest::::testGetVerb_1()",
      "786": "RequestTest::::testGetVerb_1()",
      "787": "RequestTest::::testGetVerb_1()",
      "788": "RequestTest::::testGetVerb_1()",
      "789": "RequestTest::::testGetVerb_1()",
      "790": "RequestTest::::testGetVerb_1()",
      "799": "RequestTest::::testSend_1()",
      "800": "RequestTest::::testSend_1()",
      "801": "RequestTest::::testSend_1()",
      "802": "RequestTest::::testSend_1()",
      "803": "RequestTest::::testSend_1()",
      "804": "RequestTest::::testSend_1()",
      "805": "RequestTest::::testSend_1()",
      "806": "RequestTest::::testSend_1()",
      "807": "RequestTest::::testSend_1()",
      "808": "RequestTest::::testSend_1()",
      "809": "RequestTest::::testSend_1()",
      "810": "RequestTest::::testSend_1()",
      "811": "RequestTest::::testSend_1()",
      "812": "RequestTest::::testSend_1()",
      "813": "RequestTest::::testSend_1()",
      "814": "RequestTest::::testSend_1()",
      "815": "RequestTest::::testSend_1()",
      "816": "RequestTest::::testSend_1()",
      "817": "RequestTest::::testSend_1()",
      "826": "RequestTest::::testSend_2()",
      "827": "RequestTest::::testSend_2()",
      "828": "RequestTest::::testSend_2()",
      "829": "RequestTest::::testSend_2()",
      "830": "RequestTest::::testSend_2()",
      "831": "RequestTest::::testSend_2()",
      "832": "RequestTest::::testSend_2()",
      "833": "RequestTest::::testSend_2()",
      "834": "RequestTest::::testSend_2()",
      "835": "RequestTest::::testSend_2()",
      "836": "RequestTest::::testSend_2()",
      "837": "RequestTest::::testSend_2()",
      "838": "RequestTest::::testSend_2()",
      "839": "RequestTest::::testSend_2()",
      "840": "RequestTest::::testSend_2()",
      "841": "RequestTest::::testSend_2()",
      "842": "RequestTest::::testSend_2()",
      "843": "RequestTest::::testSend_2()",
      "844": "RequestTest::::testSend_2()",
      "853": "RequestTest::::testSend_3()",
      "854": "RequestTest::::testSend_3()",
      "855": "RequestTest::::testSend_3()",
      "856": "RequestTest::::testSend_3()",
      "857": "RequestTest::::testSend_3()",
      "858": "RequestTest::::testSend_3()",
      "859": "RequestTest::::testSend_3()",
      "860": "RequestTest::::testSend_3()",
      "861": "RequestTest::::testSend_3()",
      "862": "RequestTest::::testSend_3()",
      "863": "RequestTest::::testSend_3()",
      "864": "RequestTest::::testSend_3()",
      "865": "RequestTest::::testSend_3()",
      "866": "RequestTest::::testSend_3()",
      "867": "RequestTest::::testSend_3()",
      "868": "RequestTest::::testSend_3()",
      "869": "RequestTest::::testSend_3()",
      "870": "RequestTest::::testSend_3()",
      "871": "RequestTest::::testSend_3()",
      "880": "RequestTest::::testSetCharset_1()",
      "881": "RequestTest::::testSetCharset_1()",
      "882": "RequestTest::::testSetCharset_1()",
      "883": "RequestTest::::testSetCharset_1()",
      "884": "RequestTest::::testSetCharset_1()",
      "885": "RequestTest::::testSetCharset_1()",
      "886": "RequestTest::::testSetCharset_1()",
      "887": "RequestTest::::testSetCharset_1()",
      "888": "RequestTest::::testSetCharset_1()",
      "889": "RequestTest::::testSetCharset_1()",
      "890": "RequestTest::::testSetCharset_1()",
      "891": "RequestTest::::testSetCharset_1()",
      "892": "RequestTest::::testSetCharset_1()",
      "893": "RequestTest::::testSetCharset_1()",
      "894": "RequestTest::::testSetCharset_1()",
      "895": "RequestTest::::testSetCharset_1()",
      "896": "RequestTest::::testSetCharset_1()",
      "897": "RequestTest::::testSetCharset_1()",
      "898": "RequestTest::::testSetCharset_1()",
      "907": "RequestTest::::testSetConnectTimeout_1()",
      "908": "RequestTest::::testSetConnectTimeout_1()",
      "909": "RequestTest::::testSetConnectTimeout_1()",
      "910": "RequestTest::::testSetConnectTimeout_1()",
      "911": "RequestTest::::testSetConnectTimeout_1()",
      "912": "RequestTest::::testSetConnectTimeout_1()",
      "913": "RequestTest::::testSetConnectTimeout_1()",
      "914": "RequestTest::::testSetConnectTimeout_1()",
      "915": "RequestTest::::testSetConnectTimeout_1()",
      "916": "RequestTest::::testSetConnectTimeout_1()",
      "917": "RequestTest::::testSetConnectTimeout_1()",
      "918": "RequestTest::::testSetConnectTimeout_1()",
      "919": "RequestTest::::testSetConnectTimeout_1()",
      "920": "RequestTest::::testSetConnectTimeout_1()",
      "921": "RequestTest::::testSetConnectTimeout_1()",
      "922": "RequestTest::::testSetConnectTimeout_1()",
      "923": "RequestTest::::testSetConnectTimeout_1()",
      "924": "RequestTest::::testSetConnectTimeout_1()",
      "925": "RequestTest::::testSetConnectTimeout_1()",
      "926": "RequestTest::::testSetConnectTimeout_1()",
      "935": "RequestTest::::testSetConnection_1()",
      "936": "RequestTest::::testSetConnection_1()",
      "937": "RequestTest::::testSetConnection_1()",
      "938": "RequestTest::::testSetConnection_1()",
      "939": "RequestTest::::testSetConnection_1()",
      "940": "RequestTest::::testSetConnection_1()",
      "941": "RequestTest::::testSetConnection_1()",
      "942": "RequestTest::::testSetConnection_1()",
      "943": "RequestTest::::testSetConnection_1()",
      "944": "RequestTest::::testSetConnection_1()",
      "945": "RequestTest::::testSetConnection_1()",
      "946": "RequestTest::::testSetConnection_1()",
      "947": "RequestTest::::testSetConnection_1()",
      "948": "RequestTest::::testSetConnection_1()",
      "949": "RequestTest::::testSetConnection_1()",
      "950": "RequestTest::::testSetConnection_1()",
      "951": "RequestTest::::testSetConnection_1()",
      "952": "RequestTest::::testSetConnection_1()",
      "953": "RequestTest::::testSetConnection_1()",
      "962": "RequestTest::::testSetConnectionKeepAlive_1()",
      "963": "RequestTest::::testSetConnectionKeepAlive_1()",
      "964": "RequestTest::::testSetConnectionKeepAlive_1()",
      "965": "RequestTest::::testSetConnectionKeepAlive_1()",
      "966": "RequestTest::::testSetConnectionKeepAlive_1()",
      "967": "RequestTest::::testSetConnectionKeepAlive_1()",
      "968": "RequestTest::::testSetConnectionKeepAlive_1()",
      "969": "RequestTest::::testSetConnectionKeepAlive_1()",
      "970": "RequestTest::::testSetConnectionKeepAlive_1()",
      "971": "RequestTest::::testSetConnectionKeepAlive_1()",
      "972": "RequestTest::::testSetConnectionKeepAlive_1()",
      "973": "RequestTest::::testSetConnectionKeepAlive_1()",
      "974": "RequestTest::::testSetConnectionKeepAlive_1()",
      "975": "RequestTest::::testSetConnectionKeepAlive_1()",
      "976": "RequestTest::::testSetConnectionKeepAlive_1()",
      "977": "RequestTest::::testSetConnectionKeepAlive_1()",
      "978": "RequestTest::::testSetConnectionKeepAlive_1()",
      "979": "RequestTest::::testSetConnectionKeepAlive_1()",
      "980": "RequestTest::::testSetConnectionKeepAlive_1()",
      "989": "RequestTest::::testSetProxy_1()",
      "990": "RequestTest::::testSetProxy_1()",
      "991": "RequestTest::::testSetProxy_1()",
      "992": "RequestTest::::testSetProxy_1()",
      "993": "RequestTest::::testSetProxy_1()",
      "994": "RequestTest::::testSetProxy_1()",
      "995": "RequestTest::::testSetProxy_1()",
      "996": "RequestTest::::testSetProxy_1()",
      "997": "RequestTest::::testSetProxy_1()",
      "998": "RequestTest::::testSetProxy_1()",
      "999": "RequestTest::::testSetProxy_1()",
      "1000": "RequestTest::::testSetProxy_1()",
      "1001": "RequestTest::::testSetProxy_1()",
      "1002": "RequestTest::::testSetProxy_1()",
      "1003": "RequestTest::::testSetProxy_1()",
      "1004": "RequestTest::::testSetProxy_1()",
      "1005": "RequestTest::::testSetProxy_1()",
      "1006": "RequestTest::::testSetProxy_1()",
      "1007": "RequestTest::::testSetProxy_1()",
      "1016": "RequestTest::::testSetReadTimeout_1()",
      "1017": "RequestTest::::testSetReadTimeout_1()",
      "1018": "RequestTest::::testSetReadTimeout_1()",
      "1019": "RequestTest::::testSetReadTimeout_1()",
      "1020": "RequestTest::::testSetReadTimeout_1()",
      "1021": "RequestTest::::testSetReadTimeout_1()",
      "1022": "RequestTest::::testSetReadTimeout_1()",
      "1023": "RequestTest::::testSetReadTimeout_1()",
      "1024": "RequestTest::::testSetReadTimeout_1()",
      "1025": "RequestTest::::testSetReadTimeout_1()",
      "1026": "RequestTest::::testSetReadTimeout_1()",
      "1027": "RequestTest::::testSetReadTimeout_1()",
      "1028": "RequestTest::::testSetReadTimeout_1()",
      "1029": "RequestTest::::testSetReadTimeout_1()",
      "1030": "RequestTest::::testSetReadTimeout_1()",
      "1031": "RequestTest::::testSetReadTimeout_1()",
      "1032": "RequestTest::::testSetReadTimeout_1()",
      "1033": "RequestTest::::testSetReadTimeout_1()",
      "1034": "RequestTest::::testSetReadTimeout_1()",
      "1035": "RequestTest::::testSetReadTimeout_1()",
      "1044": "RequestTest::::testToString_1()",
      "1045": "RequestTest::::testToString_1()",
      "1046": "RequestTest::::testToString_1()",
      "1047": "RequestTest::::testToString_1()",
      "1048": "RequestTest::::testToString_1()",
      "1049": "RequestTest::::testToString_1()",
      "1050": "RequestTest::::testToString_1()",
      "1051": "RequestTest::::testToString_1()",
      "1052": "RequestTest::::testToString_1()",
      "1053": "RequestTest::::testToString_1()",
      "1054": "RequestTest::::testToString_1()",
      "1055": "RequestTest::::testToString_1()",
      "1056": "RequestTest::::testToString_1()",
      "1057": "RequestTest::::testToString_1()",
      "1058": "RequestTest::::testToString_1()",
      "1059": "RequestTest::::testToString_1()",
      "1060": "RequestTest::::testToString_1()",
      "1061": "RequestTest::::testToString_1()",
      "1062": "RequestTest::::testToString_1()"
    },
    "tests": [
      {
        "test_lines": [
          70,
          84
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          189,
          198,
          209,
          217,
          220,
          232,
          251,
          341
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          93,
          117
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          105,
          106,
          107,
          108,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::addBody(java.net.HttpURLConnection,byte[])"
      },
      {
        "test_lines": [
          126,
          145
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          105,
          106,
          107,
          108,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::addBody(java.net.HttpURLConnection,byte[])"
      },
      {
        "test_lines": [
          154,
          172
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          105,
          106,
          107,
          108,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::addBody(java.net.HttpURLConnection,byte[])"
      },
      {
        "test_lines": [
          181,
          200
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          127,
          128,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::addBodyParameter(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          209,
          228
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          117,
          118,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::addHeader(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          237,
          254
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          99,
          102,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::addHeaders(java.net.HttpURLConnection)"
      },
      {
        "test_lines": [
          263,
          280
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          99,
          102,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::addHeaders(java.net.HttpURLConnection)"
      },
      {
        "test_lines": [
          289,
          307
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::addPayload(java.lang.String)"
      },
      {
        "test_lines": [
          316,
          335
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          137,
          138,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::addQuerystringParameter(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          344,
          362
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          88,
          89,
          91,
          95,
          99,
          102,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::doSend()"
      },
      {
        "test_lines": [
          371,
          389
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          88,
          89,
          91,
          95,
          99,
          102,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::doSend()"
      },
      {
        "test_lines": [
          398,
          416
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          88,
          89,
          91,
          95,
          99,
          102,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::doSend()"
      },
      {
        "test_lines": [
          425,
          443
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          88,
          89,
          91,
          95,
          99,
          102,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::doSend()"
      },
      {
        "test_lines": [
          452,
          470
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          209,
          217,
          220,
          251,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getBodyContents()"
      },
      {
        "test_lines": [
          479,
          497
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          209,
          217,
          220,
          251,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getBodyContents()"
      },
      {
        "test_lines": [
          506,
          524
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          180,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getBodyParams()"
      },
      {
        "test_lines": [
          533,
          545
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          217,
          220,
          251,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getByteBodyContents()"
      },
      {
        "test_lines": [
          554,
          572
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          217,
          220,
          251,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getByteBodyContents()"
      },
      {
        "test_lines": [
          581,
          599
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          251,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getCharset()"
      },
      {
        "test_lines": [
          608,
          626
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          251,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getCharset()"
      },
      {
        "test_lines": [
          635,
          653
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          241,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getHeaders()"
      },
      {
        "test_lines": [
          662,
          681
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          162,
          163,
          165,
          166,
          168,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getQueryStringParams()"
      },
      {
        "test_lines": [
          690,
          708
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          162,
          163,
          165,
          166,
          168,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getQueryStringParams()"
      },
      {
        "test_lines": [
          717,
          735
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          198,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getSanitizedUrl()"
      },
      {
        "test_lines": [
          744,
          763
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          189,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getUrl()"
      },
      {
        "test_lines": [
          772,
          790
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          232,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::getVerb()"
      },
      {
        "test_lines": [
          799,
          817
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          67,
          69,
          73,
          75,
          85,
          88,
          89,
          91,
          95,
          99,
          102,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::send()"
      },
      {
        "test_lines": [
          826,
          844
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          67,
          69,
          73,
          75,
          85,
          88,
          89,
          91,
          95,
          99,
          102,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::send()"
      },
      {
        "test_lines": [
          853,
          871
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          67,
          69,
          73,
          75,
          85,
          88,
          89,
          91,
          95,
          99,
          102,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::send()"
      },
      {
        "test_lines": [
          880,
          898
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::setCharset(java.lang.String)"
      },
      {
        "test_lines": [
          907,
          926
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          262,
          263,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::setConnectTimeout(int,java.util.concurrent.TimeUnit)"
      },
      {
        "test_lines": [
          935,
          953
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::setConnection(java.net.HttpURLConnection)"
      },
      {
        "test_lines": [
          962,
          980
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::setConnectionKeepAlive(boolean)"
      },
      {
        "test_lines": [
          989,
          1007
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::setProxy(java.net.Proxy)"
      },
      {
        "test_lines": [
          1016,
          1035
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          280,
          281,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330
        ],
        "label": "Request::::setReadTimeout(int,java.util.concurrent.TimeUnit)"
      },
      {
        "test_lines": [
          1044,
          1062
        ],
        "covered_lines": [
          22,
          24,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          151,
          152,
          189,
          232,
          296,
          297,
          307,
          308,
          321,
          322,
          329,
          330,
          341
        ],
        "label": "Request::::toString()"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/http/Verbs.java": {
    "class_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "/**\n",
      " * An enumeration containing the most common HTTP Verbs.\n",
      " */\n",
      "public enum Verbs {\n",
      "\tGET, POST, PUT, DELETE\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>VerbsTest</code> contains tests for the class\n",
      " * <code>{@link Verbs}</code>.\n",
      " */\n",
      "public class VerbsTest {\n",
      "\n",
      "\t@Test\n",
      "\tpublic void testVerbs() {\n",
      "\n",
      "\t\tString value = Verbs.POST.toString();\n",
      "\t\tassertNotNull(value);\n",
      "\n",
      "\t\tvalue = Verbs.GET.toString();\n",
      "\t\tassertNotNull(value);\n",
      "\n",
      "\t\tvalue = Verbs.PUT.toString();\n",
      "\t\tassertNotNull(value);\n",
      "\n",
      "\t\tvalue = Verbs.DELETE.toString();\n",
      "\t\tassertNotNull(value);\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "VerbsTest::::testVerbs()": [
        13,
        27
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "13": "VerbsTest::::testVerbs()",
      "14": "VerbsTest::::testVerbs()",
      "15": "VerbsTest::::testVerbs()",
      "16": "VerbsTest::::testVerbs()",
      "17": "VerbsTest::::testVerbs()",
      "18": "VerbsTest::::testVerbs()",
      "19": "VerbsTest::::testVerbs()",
      "20": "VerbsTest::::testVerbs()",
      "21": "VerbsTest::::testVerbs()",
      "22": "VerbsTest::::testVerbs()",
      "23": "VerbsTest::::testVerbs()",
      "24": "VerbsTest::::testVerbs()",
      "25": "VerbsTest::::testVerbs()",
      "26": "VerbsTest::::testVerbs()",
      "27": "VerbsTest::::testVerbs()"
    },
    "tests": [
      {
        "test_lines": [
          13,
          27
        ],
        "covered_lines": [
          6,
          7
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/http/URLUtils.java": {
    "class_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import org.jinstagram.utils.Preconditions;\n",
      "\n",
      "import java.io.UnsupportedEncodingException;\n",
      "\n",
      "import java.net.URLDecoder;\n",
      "import java.net.URLEncoder;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.HashMap;\n",
      "import java.util.HashSet;\n",
      "import java.util.Map;\n",
      "import java.util.Set;\n",
      "\n",
      "/**\n",
      " * Utils to deal with URL and url-encodings\n",
      " * \n",
      " */\n",
      "public class URLUtils {\n",
      "    private static final String EMPTY_STRING = \"\";\n",
      "\n",
      "    private static final String PAIR_SEPARATOR = \"=\";\n",
      "\n",
      "    private static final String PARAM_SEPARATOR = \"&\";\n",
      "\n",
      "    private static final char QUERY_STRING_SEPARATOR = '?';\n",
      "\n",
      "    private static final String UTF_8 = \"UTF-8\";\n",
      "\n",
      "    private static final String ERROR_MSG = String.format(\"Cannot find specified encoding: %s\", UTF_8);\n",
      "\n",
      "    private static final Set<EncodingRule> ENCODING_RULES;\n",
      "\n",
      "    static {\n",
      "        Set<EncodingRule> rules = new HashSet<EncodingRule>();\n",
      "\n",
      "        rules.add(new EncodingRule(\"*\", \"%2A\"));\n",
      "        rules.add(new EncodingRule(\"+\", \"%20\"));\n",
      "        rules.add(new EncodingRule(\"%7E\", \"~\"));\n",
      "\n",
      "        ENCODING_RULES = Collections.unmodifiableSet(rules);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Encodes the passed String as UTF-8 using an algorithm that's compatible\n",
      "     * with JavaScript's <code>encodeURIComponent</code> function. Returns\n",
      "     * <code>null</code> if the String is <code>null</code>.\n",
      "     *\n",
      "     * @param s The String to be encoded\n",
      "     * @return the encoded String\n",
      "     *\n",
      "     * (from: http://stackoverflow.com/questions/607176/java-equivalent-to-javascripts-encodeuricomponent-that-produces-identical-outpu)\n",
      "     */\n",
      "    public static String encodeURIComponent(String s)\n",
      "    {\n",
      "        String result = null;\n",
      "\n",
      "        try\n",
      "        {\n",
      "            result = URLEncoder.encode(s, \"UTF-8\")\n",
      "                    .replaceAll(\"\\\\+\", \"%20\")\n",
      "                    .replaceAll(\"\\\\%21\", \"!\")\n",
      "                    .replaceAll(\"\\\\%27\", \"'\")\n",
      "                    .replaceAll(\"\\\\%28\", \"(\")\n",
      "                    .replaceAll(\"\\\\%29\", \")\")\n",
      "                    .replaceAll(\"\\\\%7E\", \"~\");\n",
      "        }\n",
      "\n",
      "        // This exception should never occur.\n",
      "        catch (UnsupportedEncodingException e)\n",
      "        {\n",
      "            result = s;\n",
      "        }\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Decodes the passed-in String as UTF-8 using an algorithm that's compatible\n",
      "     * with JavaScript's <code>decodeURIComponent</code> function. Returns\n",
      "     * <code>null</code> if the String is <code>null</code>.\n",
      "     *\n",
      "     * @param s The String to be decoded\n",
      "     * @return the decoded String\n",
      "     *\n",
      "     * (from: http://stackoverflow.com/questions/607176/java-equivalent-to-javascripts-encodeuricomponent-that-produces-identical-outpu)\n",
      "     */\n",
      "    public static  String decodeURIComponent(String s) {\n",
      "        String result = null;\n",
      "\n",
      "        try {\n",
      "          result = URLDecoder.decode(s, \"UTF-8\");\n",
      "        }\n",
      "\n",
      "        // This exception should never occur.\n",
      "        catch (UnsupportedEncodingException e) {\n",
      "          result = s;\n",
      "        }\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Turns a map into a form-urlencoded string\n",
      "     * \n",
      "     * @param map any map\n",
      "     * @return form-url-encoded string\n",
      "     */\n",
      "    public static String formURLEncodeMap(Map<String, String> map) {\n",
      "        Preconditions.checkNotNull(map, \"Cannot url-encode a null object\");\n",
      "\n",
      "        return (map.size() <= 0) ? EMPTY_STRING : doFormUrlEncode(map);\n",
      "    }\n",
      "\n",
      "    private static String doFormUrlEncode(Map<String, String> map) {\n",
      "        StringBuffer encodedString = new StringBuffer(map.size() * 20);\n",
      "\n",
      "        for (Map.Entry<String, String> entry : map.entrySet()) {\n",
      "            encodedString.append(PARAM_SEPARATOR).append(formURLEncode(entry.getKey()));\n",
      "\n",
      "            if (entry.getValue() != null) {\n",
      "                encodedString.append(PAIR_SEPARATOR).append(formURLEncode(entry.getValue()));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return encodedString.toString().substring(1);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Percent encodes a string\n",
      "     * \n",
      "     * @param string plain string\n",
      "     * @return percent encoded string\n",
      "     */\n",
      "    public static String percentEncode(String string) {\n",
      "        String encoded = formURLEncode(string);\n",
      "\n",
      "        for (EncodingRule rule : ENCODING_RULES) {\n",
      "            encoded = rule.apply(encoded);\n",
      "        }\n",
      "\n",
      "        return encoded;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Translates a string into application/x-www-form-urlencoded format\n",
      "     * \n",
      "     * @param plain\n",
      "     * @return form-urlencoded string\n",
      "     */\n",
      "    public static String formURLEncode(String string) {\n",
      "        Preconditions.checkNotNull(string, \"Cannot encode null string\");\n",
      "\n",
      "        try {\n",
      "            return URLEncoder.encode(string, UTF_8);\n",
      "        } catch (UnsupportedEncodingException uee) {\n",
      "            throw new IllegalStateException(ERROR_MSG, uee);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Decodes a application/x-www-form-urlencoded string\n",
      "     * \n",
      "     * @param string form-urlencoded string\n",
      "     * @return plain string\n",
      "     */\n",
      "    public static String formURLDecode(String string) {\n",
      "        Preconditions.checkNotNull(string, \"Cannot decode null string\");\n",
      "\n",
      "        try {\n",
      "            return URLDecoder.decode(string, UTF_8);\n",
      "        } catch (UnsupportedEncodingException uee) {\n",
      "            throw new IllegalStateException(ERROR_MSG, uee);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Append given parameters to the query string of the url\n",
      "     * \n",
      "     * @param url the url to append parameters to\n",
      "     * @param params any map\n",
      "     * @return new url with parameters on query string\n",
      "     */\n",
      "    public static String appendParametersToQueryString(String url, Map<String, String> params) {\n",
      "        Preconditions.checkNotNull(url, \"Cannot append to null URL\");\n",
      "\n",
      "        String queryString = URLUtils.formURLEncodeMap(params);\n",
      "\n",
      "        if (queryString.equals(EMPTY_STRING)) {\n",
      "            return url;\n",
      "        } else {\n",
      "            url += (url.indexOf(QUERY_STRING_SEPARATOR) != -1) ? PARAM_SEPARATOR : QUERY_STRING_SEPARATOR;\n",
      "            url += queryString;\n",
      "\n",
      "            return url;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Concats a key-value map into a querystring-like String\n",
      "     * \n",
      "     * @param params key-value map\n",
      "     * @return querystring-like String\n",
      "     */\n",
      "    public static String concatSortedPercentEncodedParams(Map<String, String> params) {\n",
      "        StringBuilder result = new StringBuilder();\n",
      "\n",
      "        for (Map.Entry<String, String> entry : params.entrySet()) {\n",
      "            result.append(entry.getKey()).append(PAIR_SEPARATOR);\n",
      "            result.append(entry.getValue()).append(PARAM_SEPARATOR);\n",
      "        }\n",
      "\n",
      "        return result.toString().substring(0, result.length() - 1);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Parses and form-urldecodes a querystring-like string into a map\n",
      "     * \n",
      "     * @param queryString querystring-like String\n",
      "     * @return a map with the form-urldecoded parameters\n",
      "     */\n",
      "    public static Map<String, String> queryStringToMap(String queryString) {\n",
      "        Map<String, String> result = new HashMap<String, String>();\n",
      "\n",
      "        if ((queryString != null) && (queryString.length() > 0)) {\n",
      "            for (String param : queryString.split(PARAM_SEPARATOR)) {\n",
      "                String pair[] = param.split(PAIR_SEPARATOR);\n",
      "                String key = formURLDecode(pair[0]);\n",
      "                String value = (pair.length > 1) ? formURLDecode(pair[1]) : EMPTY_STRING;\n",
      "\n",
      "                result.put(key, value);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    private static final class EncodingRule {\n",
      "        private final String ch;\n",
      "\n",
      "        private final String toCh;\n",
      "\n",
      "        EncodingRule(String ch, String toCh) {\n",
      "            this.ch = ch;\n",
      "            this.toCh = toCh;\n",
      "        }\n",
      "\n",
      "        String apply(String string) {\n",
      "            return string.replace(ch, toCh);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import static org.junit.Assert.assertEquals;\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>URLUtilsTest</code> contains tests for the class\n",
      " * <code>{@link URLUtils}</code>.\n",
      " *\n",
      " */\n",
      "public class URLUtilsTest {\n",
      "\t/**\n",
      "\t * Run the URLUtils() constructor test.\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testURLUtils_1() throws Exception {\n",
      "\t\tURLUtils result = new URLUtils();\n",
      "\t\tassertNotNull(result);\n",
      "\t\t// add additional test code here\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String appendParametersToQueryString(String,Map<String,String>)\n",
      "\t * method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAppendParametersToQueryString_1() throws Exception {\n",
      "\t\tString url = \"\";\n",
      "\t\tMap<String, String> params = new HashMap();\n",
      "\n",
      "\t\tString result = URLUtils.appendParametersToQueryString(url, params);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String appendParametersToQueryString(String,Map<String,String>)\n",
      "\t * method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAppendParametersToQueryString_2() throws Exception {\n",
      "\t\tString url = \"\";\n",
      "\t\tMap<String, String> params = new HashMap();\n",
      "\n",
      "\t\tString result = URLUtils.appendParametersToQueryString(url, params);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String appendParametersToQueryString(String,Map<String,String>)\n",
      "\t * method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testAppendParametersToQueryString_3() throws Exception {\n",
      "\t\tString url = \"\";\n",
      "\t\tMap<String, String> params = new HashMap();\n",
      "\n",
      "\t\tString result = URLUtils.appendParametersToQueryString(url, params);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String concatSortedPercentEncodedParams(Map<String,String>)\n",
      "\t * method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testConcatSortedPercentEncodedParams_1() throws Exception {\n",
      "\t\tMap<String, String> params = new HashMap<String,String>();\n",
      "\n",
      "\t\tparams.put(\"key1\", \"value1\");\n",
      "\t\tparams.put(\"key2\", \"value2\");\n",
      "\t\tparams.put(\"key3\", \"value3\");\n",
      "\t\t\n",
      "\t\tString result = URLUtils.concatSortedPercentEncodedParams(params);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.StringIndexOutOfBoundsException: String index out of range:\n",
      "\t\t// -1\n",
      "\t\t// at java.lang.String.substring(String.java:1954)\n",
      "\t\t// at\n",
      "\t\t// org.jinstagram.http.URLUtils.concatSortedPercentEncodedParams(URLUtils.java:189)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String concatSortedPercentEncodedParams(Map<String,String>)\n",
      "\t * method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testConcatSortedPercentEncodedParams_2() throws Exception {\n",
      "\t\tMap<String, String> params = new HashMap<String,String>();\n",
      "\n",
      "\t\tparams.put(\"key1\", \"value1\");\n",
      "\t\tparams.put(\"key2\", \"value2\");\n",
      "\t\tparams.put(\"key3\", \"value3\");\n",
      "\t\t\n",
      "\t\t\n",
      "\t\tString result = URLUtils.concatSortedPercentEncodedParams(params);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\t// An unexpected exception was thrown in user code while executing this\n",
      "\t\t// test:\n",
      "\t\t// java.lang.StringIndexOutOfBoundsException: String index out of range:\n",
      "\t\t// -1\n",
      "\t\t// at java.lang.String.substring(String.java:1954)\n",
      "\t\t// at\n",
      "\t\t// org.jinstagram.http.URLUtils.concatSortedPercentEncodedParams(URLUtils.java:189)\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String encodeURIComponent(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testEncodeURIComponent_1() throws Exception {\n",
      "\t\tString s = \"\";\n",
      "\n",
      "\t\tString result = URLUtils.encodeURIComponent(s);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String formURLDecode(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testFormURLDecode_1() throws Exception {\n",
      "\t\tString string = \"\";\n",
      "\n",
      "\t\tString result = URLUtils.formURLDecode(string);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String formURLDecode(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testFormURLDecode_2() throws Exception {\n",
      "\t\tString string = \"\";\n",
      "\n",
      "\t\tString result = URLUtils.formURLDecode(string);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String formURLEncode(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testFormURLEncode_1() throws Exception {\n",
      "\t\tString string = \"\";\n",
      "\n",
      "\t\tString result = URLUtils.formURLEncode(string);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String formURLEncode(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testFormURLEncode_2() throws Exception {\n",
      "\t\tString string = \"\";\n",
      "\n",
      "\t\tString result = URLUtils.formURLEncode(string);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String formURLEncodeMap(Map<String,String>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testFormURLEncodeMap_1() throws Exception {\n",
      "\t\tMap<String, String> map = new HashMap();\n",
      "\n",
      "\t\tString result = URLUtils.formURLEncodeMap(map);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String formURLEncodeMap(Map<String,String>) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testFormURLEncodeMap_2() throws Exception {\n",
      "\t\tMap<String, String> map = new HashMap();\n",
      "\n",
      "\t\tString result = URLUtils.formURLEncodeMap(map);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String percentEncode(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testPercentEncode_1() throws Exception {\n",
      "\t\tString string = \"\";\n",
      "\n",
      "\t\tString result = URLUtils.percentEncode(string);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String percentEncode(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testPercentEncode_2() throws Exception {\n",
      "\t\tString string = \"\";\n",
      "\n",
      "\t\tString result = URLUtils.percentEncode(string);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertEquals(\"\", result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Map<String, String> queryStringToMap(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testQueryStringToMap_1() throws Exception {\n",
      "\t\tString queryString = \"a\";\n",
      "\n",
      "\t\tMap<String, String> result = URLUtils.queryStringToMap(queryString);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(1, result.size());\n",
      "\t\tassertEquals(\"\", result.get(\"a\"));\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Map<String, String> queryStringToMap(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testQueryStringToMap_2() throws Exception {\n",
      "\t\tString queryString = \"a\";\n",
      "\n",
      "\t\tMap<String, String> result = URLUtils.queryStringToMap(queryString);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(1, result.size());\n",
      "\t\tassertEquals(\"\", result.get(\"a\"));\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Map<String, String> queryStringToMap(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testQueryStringToMap_3() throws Exception {\n",
      "\t\tString queryString = \"a\";\n",
      "\n",
      "\t\tMap<String, String> result = URLUtils.queryStringToMap(queryString);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(1, result.size());\n",
      "\t\tassertEquals(\"\", result.get(\"a\"));\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Map<String, String> queryStringToMap(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testQueryStringToMap_4() throws Exception {\n",
      "\t\tString queryString = null;\n",
      "\n",
      "\t\tMap<String, String> result = URLUtils.queryStringToMap(queryString);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the Map<String, String> queryStringToMap(String) method test.\n",
      "\t *\n",
      "\t * @throws Exception\n",
      "\t *\n",
      "\t * \n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testQueryStringToMap_5() throws Exception {\n",
      "\t\tString queryString = \"\";\n",
      "\n",
      "\t\tMap<String, String> result = URLUtils.queryStringToMap(queryString);\n",
      "\n",
      "\t\t// add additional test code here\n",
      "\t\tassertNotNull(result);\n",
      "\t\tassertEquals(0, result.size());\n",
      "\t}\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "URLUtils::::encodeURIComponent(java.lang.String)": [
        55,
        77
      ],
      "URLUtils::::decodeURIComponent(java.lang.String)": [
        89,
        102
      ],
      "URLUtils::::formURLEncodeMap(java.util.Map<java.lang.String, java.lang.String>)": [
        110,
        114
      ],
      "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)": [
        116,
        128
      ],
      "URLUtils::::percentEncode(java.lang.String)": [
        136,
        144
      ],
      "URLUtils::::formURLEncode(java.lang.String)": [
        152,
        160
      ],
      "URLUtils::::formURLDecode(java.lang.String)": [
        168,
        176
      ],
      "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)": [
        185,
        198
      ],
      "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)": [
        206,
        215
      ],
      "URLUtils::::queryStringToMap(java.lang.String)": [
        223,
        237
      ],
      "URLUtils.EncodingRule::::apply(java.lang.String)": [
        249,
        251
      ]
    },
    "test_method_lines_dic": {
      "URLUtilsTest::::testURLUtils_1()": [
        22,
        27
      ],
      "URLUtilsTest::::testAppendParametersToQueryString_1()": [
        37,
        46
      ],
      "URLUtilsTest::::testAppendParametersToQueryString_2()": [
        56,
        65
      ],
      "URLUtilsTest::::testAppendParametersToQueryString_3()": [
        75,
        84
      ],
      "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()": [
        94,
        113
      ],
      "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()": [
        123,
        143
      ],
      "URLUtilsTest::::testEncodeURIComponent_1()": [
        152,
        160
      ],
      "URLUtilsTest::::testFormURLDecode_1()": [
        169,
        177
      ],
      "URLUtilsTest::::testFormURLDecode_2()": [
        186,
        194
      ],
      "URLUtilsTest::::testFormURLEncode_1()": [
        203,
        211
      ],
      "URLUtilsTest::::testFormURLEncode_2()": [
        220,
        228
      ],
      "URLUtilsTest::::testFormURLEncodeMap_1()": [
        237,
        245
      ],
      "URLUtilsTest::::testFormURLEncodeMap_2()": [
        254,
        262
      ],
      "URLUtilsTest::::testPercentEncode_1()": [
        271,
        279
      ],
      "URLUtilsTest::::testPercentEncode_2()": [
        288,
        296
      ],
      "URLUtilsTest::::testQueryStringToMap_1()": [
        305,
        315
      ],
      "URLUtilsTest::::testQueryStringToMap_2()": [
        324,
        334
      ],
      "URLUtilsTest::::testQueryStringToMap_3()": [
        343,
        353
      ],
      "URLUtilsTest::::testQueryStringToMap_4()": [
        362,
        371
      ],
      "URLUtilsTest::::testQueryStringToMap_5()": [
        380,
        389
      ]
    },
    "reverse_method_lines_dic": {
      "55": "URLUtils::::encodeURIComponent(java.lang.String)",
      "56": "URLUtils::::encodeURIComponent(java.lang.String)",
      "57": "URLUtils::::encodeURIComponent(java.lang.String)",
      "58": "URLUtils::::encodeURIComponent(java.lang.String)",
      "59": "URLUtils::::encodeURIComponent(java.lang.String)",
      "60": "URLUtils::::encodeURIComponent(java.lang.String)",
      "61": "URLUtils::::encodeURIComponent(java.lang.String)",
      "62": "URLUtils::::encodeURIComponent(java.lang.String)",
      "63": "URLUtils::::encodeURIComponent(java.lang.String)",
      "64": "URLUtils::::encodeURIComponent(java.lang.String)",
      "65": "URLUtils::::encodeURIComponent(java.lang.String)",
      "66": "URLUtils::::encodeURIComponent(java.lang.String)",
      "67": "URLUtils::::encodeURIComponent(java.lang.String)",
      "68": "URLUtils::::encodeURIComponent(java.lang.String)",
      "69": "URLUtils::::encodeURIComponent(java.lang.String)",
      "70": "URLUtils::::encodeURIComponent(java.lang.String)",
      "71": "URLUtils::::encodeURIComponent(java.lang.String)",
      "72": "URLUtils::::encodeURIComponent(java.lang.String)",
      "73": "URLUtils::::encodeURIComponent(java.lang.String)",
      "74": "URLUtils::::encodeURIComponent(java.lang.String)",
      "75": "URLUtils::::encodeURIComponent(java.lang.String)",
      "76": "URLUtils::::encodeURIComponent(java.lang.String)",
      "77": "URLUtils::::encodeURIComponent(java.lang.String)",
      "89": "URLUtils::::decodeURIComponent(java.lang.String)",
      "90": "URLUtils::::decodeURIComponent(java.lang.String)",
      "91": "URLUtils::::decodeURIComponent(java.lang.String)",
      "92": "URLUtils::::decodeURIComponent(java.lang.String)",
      "93": "URLUtils::::decodeURIComponent(java.lang.String)",
      "94": "URLUtils::::decodeURIComponent(java.lang.String)",
      "95": "URLUtils::::decodeURIComponent(java.lang.String)",
      "96": "URLUtils::::decodeURIComponent(java.lang.String)",
      "97": "URLUtils::::decodeURIComponent(java.lang.String)",
      "98": "URLUtils::::decodeURIComponent(java.lang.String)",
      "99": "URLUtils::::decodeURIComponent(java.lang.String)",
      "100": "URLUtils::::decodeURIComponent(java.lang.String)",
      "101": "URLUtils::::decodeURIComponent(java.lang.String)",
      "102": "URLUtils::::decodeURIComponent(java.lang.String)",
      "110": "URLUtils::::formURLEncodeMap(java.util.Map<java.lang.String, java.lang.String>)",
      "111": "URLUtils::::formURLEncodeMap(java.util.Map<java.lang.String, java.lang.String>)",
      "112": "URLUtils::::formURLEncodeMap(java.util.Map<java.lang.String, java.lang.String>)",
      "113": "URLUtils::::formURLEncodeMap(java.util.Map<java.lang.String, java.lang.String>)",
      "114": "URLUtils::::formURLEncodeMap(java.util.Map<java.lang.String, java.lang.String>)",
      "116": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "117": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "118": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "119": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "120": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "121": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "122": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "123": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "124": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "125": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "126": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "127": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "128": "URLUtils::::doFormUrlEncode(java.util.Map<java.lang.String, java.lang.String>)",
      "136": "URLUtils::::percentEncode(java.lang.String)",
      "137": "URLUtils::::percentEncode(java.lang.String)",
      "138": "URLUtils::::percentEncode(java.lang.String)",
      "139": "URLUtils::::percentEncode(java.lang.String)",
      "140": "URLUtils::::percentEncode(java.lang.String)",
      "141": "URLUtils::::percentEncode(java.lang.String)",
      "142": "URLUtils::::percentEncode(java.lang.String)",
      "143": "URLUtils::::percentEncode(java.lang.String)",
      "144": "URLUtils::::percentEncode(java.lang.String)",
      "152": "URLUtils::::formURLEncode(java.lang.String)",
      "153": "URLUtils::::formURLEncode(java.lang.String)",
      "154": "URLUtils::::formURLEncode(java.lang.String)",
      "155": "URLUtils::::formURLEncode(java.lang.String)",
      "156": "URLUtils::::formURLEncode(java.lang.String)",
      "157": "URLUtils::::formURLEncode(java.lang.String)",
      "158": "URLUtils::::formURLEncode(java.lang.String)",
      "159": "URLUtils::::formURLEncode(java.lang.String)",
      "160": "URLUtils::::formURLEncode(java.lang.String)",
      "168": "URLUtils::::formURLDecode(java.lang.String)",
      "169": "URLUtils::::formURLDecode(java.lang.String)",
      "170": "URLUtils::::formURLDecode(java.lang.String)",
      "171": "URLUtils::::formURLDecode(java.lang.String)",
      "172": "URLUtils::::formURLDecode(java.lang.String)",
      "173": "URLUtils::::formURLDecode(java.lang.String)",
      "174": "URLUtils::::formURLDecode(java.lang.String)",
      "175": "URLUtils::::formURLDecode(java.lang.String)",
      "176": "URLUtils::::formURLDecode(java.lang.String)",
      "185": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "186": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "187": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "188": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "189": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "190": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "191": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "192": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "193": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "194": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "195": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "196": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "197": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "198": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)",
      "206": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)",
      "207": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)",
      "208": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)",
      "209": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)",
      "210": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)",
      "211": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)",
      "212": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)",
      "213": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)",
      "214": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)",
      "215": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)",
      "223": "URLUtils::::queryStringToMap(java.lang.String)",
      "224": "URLUtils::::queryStringToMap(java.lang.String)",
      "225": "URLUtils::::queryStringToMap(java.lang.String)",
      "226": "URLUtils::::queryStringToMap(java.lang.String)",
      "227": "URLUtils::::queryStringToMap(java.lang.String)",
      "228": "URLUtils::::queryStringToMap(java.lang.String)",
      "229": "URLUtils::::queryStringToMap(java.lang.String)",
      "230": "URLUtils::::queryStringToMap(java.lang.String)",
      "231": "URLUtils::::queryStringToMap(java.lang.String)",
      "232": "URLUtils::::queryStringToMap(java.lang.String)",
      "233": "URLUtils::::queryStringToMap(java.lang.String)",
      "234": "URLUtils::::queryStringToMap(java.lang.String)",
      "235": "URLUtils::::queryStringToMap(java.lang.String)",
      "236": "URLUtils::::queryStringToMap(java.lang.String)",
      "237": "URLUtils::::queryStringToMap(java.lang.String)",
      "249": "URLUtils.EncodingRule::::apply(java.lang.String)",
      "250": "URLUtils.EncodingRule::::apply(java.lang.String)",
      "251": "URLUtils.EncodingRule::::apply(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "22": "URLUtilsTest::::testURLUtils_1()",
      "23": "URLUtilsTest::::testURLUtils_1()",
      "24": "URLUtilsTest::::testURLUtils_1()",
      "25": "URLUtilsTest::::testURLUtils_1()",
      "26": "URLUtilsTest::::testURLUtils_1()",
      "27": "URLUtilsTest::::testURLUtils_1()",
      "37": "URLUtilsTest::::testAppendParametersToQueryString_1()",
      "38": "URLUtilsTest::::testAppendParametersToQueryString_1()",
      "39": "URLUtilsTest::::testAppendParametersToQueryString_1()",
      "40": "URLUtilsTest::::testAppendParametersToQueryString_1()",
      "41": "URLUtilsTest::::testAppendParametersToQueryString_1()",
      "42": "URLUtilsTest::::testAppendParametersToQueryString_1()",
      "43": "URLUtilsTest::::testAppendParametersToQueryString_1()",
      "44": "URLUtilsTest::::testAppendParametersToQueryString_1()",
      "45": "URLUtilsTest::::testAppendParametersToQueryString_1()",
      "46": "URLUtilsTest::::testAppendParametersToQueryString_1()",
      "56": "URLUtilsTest::::testAppendParametersToQueryString_2()",
      "57": "URLUtilsTest::::testAppendParametersToQueryString_2()",
      "58": "URLUtilsTest::::testAppendParametersToQueryString_2()",
      "59": "URLUtilsTest::::testAppendParametersToQueryString_2()",
      "60": "URLUtilsTest::::testAppendParametersToQueryString_2()",
      "61": "URLUtilsTest::::testAppendParametersToQueryString_2()",
      "62": "URLUtilsTest::::testAppendParametersToQueryString_2()",
      "63": "URLUtilsTest::::testAppendParametersToQueryString_2()",
      "64": "URLUtilsTest::::testAppendParametersToQueryString_2()",
      "65": "URLUtilsTest::::testAppendParametersToQueryString_2()",
      "75": "URLUtilsTest::::testAppendParametersToQueryString_3()",
      "76": "URLUtilsTest::::testAppendParametersToQueryString_3()",
      "77": "URLUtilsTest::::testAppendParametersToQueryString_3()",
      "78": "URLUtilsTest::::testAppendParametersToQueryString_3()",
      "79": "URLUtilsTest::::testAppendParametersToQueryString_3()",
      "80": "URLUtilsTest::::testAppendParametersToQueryString_3()",
      "81": "URLUtilsTest::::testAppendParametersToQueryString_3()",
      "82": "URLUtilsTest::::testAppendParametersToQueryString_3()",
      "83": "URLUtilsTest::::testAppendParametersToQueryString_3()",
      "84": "URLUtilsTest::::testAppendParametersToQueryString_3()",
      "94": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "95": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "96": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "97": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "98": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "99": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "100": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "101": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "102": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "103": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "104": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "105": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "106": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "107": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "108": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "109": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "110": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "111": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "112": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "113": "URLUtilsTest::::testConcatSortedPercentEncodedParams_1()",
      "123": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "124": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "125": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "126": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "127": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "128": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "129": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "130": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "131": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "132": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "133": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "134": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "135": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "136": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "137": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "138": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "139": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "140": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "141": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "142": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "143": "URLUtilsTest::::testConcatSortedPercentEncodedParams_2()",
      "152": "URLUtilsTest::::testEncodeURIComponent_1()",
      "153": "URLUtilsTest::::testEncodeURIComponent_1()",
      "154": "URLUtilsTest::::testEncodeURIComponent_1()",
      "155": "URLUtilsTest::::testEncodeURIComponent_1()",
      "156": "URLUtilsTest::::testEncodeURIComponent_1()",
      "157": "URLUtilsTest::::testEncodeURIComponent_1()",
      "158": "URLUtilsTest::::testEncodeURIComponent_1()",
      "159": "URLUtilsTest::::testEncodeURIComponent_1()",
      "160": "URLUtilsTest::::testEncodeURIComponent_1()",
      "169": "URLUtilsTest::::testFormURLDecode_1()",
      "170": "URLUtilsTest::::testFormURLDecode_1()",
      "171": "URLUtilsTest::::testFormURLDecode_1()",
      "172": "URLUtilsTest::::testFormURLDecode_1()",
      "173": "URLUtilsTest::::testFormURLDecode_1()",
      "174": "URLUtilsTest::::testFormURLDecode_1()",
      "175": "URLUtilsTest::::testFormURLDecode_1()",
      "176": "URLUtilsTest::::testFormURLDecode_1()",
      "177": "URLUtilsTest::::testFormURLDecode_1()",
      "186": "URLUtilsTest::::testFormURLDecode_2()",
      "187": "URLUtilsTest::::testFormURLDecode_2()",
      "188": "URLUtilsTest::::testFormURLDecode_2()",
      "189": "URLUtilsTest::::testFormURLDecode_2()",
      "190": "URLUtilsTest::::testFormURLDecode_2()",
      "191": "URLUtilsTest::::testFormURLDecode_2()",
      "192": "URLUtilsTest::::testFormURLDecode_2()",
      "193": "URLUtilsTest::::testFormURLDecode_2()",
      "194": "URLUtilsTest::::testFormURLDecode_2()",
      "203": "URLUtilsTest::::testFormURLEncode_1()",
      "204": "URLUtilsTest::::testFormURLEncode_1()",
      "205": "URLUtilsTest::::testFormURLEncode_1()",
      "206": "URLUtilsTest::::testFormURLEncode_1()",
      "207": "URLUtilsTest::::testFormURLEncode_1()",
      "208": "URLUtilsTest::::testFormURLEncode_1()",
      "209": "URLUtilsTest::::testFormURLEncode_1()",
      "210": "URLUtilsTest::::testFormURLEncode_1()",
      "211": "URLUtilsTest::::testFormURLEncode_1()",
      "220": "URLUtilsTest::::testFormURLEncode_2()",
      "221": "URLUtilsTest::::testFormURLEncode_2()",
      "222": "URLUtilsTest::::testFormURLEncode_2()",
      "223": "URLUtilsTest::::testFormURLEncode_2()",
      "224": "URLUtilsTest::::testFormURLEncode_2()",
      "225": "URLUtilsTest::::testFormURLEncode_2()",
      "226": "URLUtilsTest::::testFormURLEncode_2()",
      "227": "URLUtilsTest::::testFormURLEncode_2()",
      "228": "URLUtilsTest::::testFormURLEncode_2()",
      "237": "URLUtilsTest::::testFormURLEncodeMap_1()",
      "238": "URLUtilsTest::::testFormURLEncodeMap_1()",
      "239": "URLUtilsTest::::testFormURLEncodeMap_1()",
      "240": "URLUtilsTest::::testFormURLEncodeMap_1()",
      "241": "URLUtilsTest::::testFormURLEncodeMap_1()",
      "242": "URLUtilsTest::::testFormURLEncodeMap_1()",
      "243": "URLUtilsTest::::testFormURLEncodeMap_1()",
      "244": "URLUtilsTest::::testFormURLEncodeMap_1()",
      "245": "URLUtilsTest::::testFormURLEncodeMap_1()",
      "254": "URLUtilsTest::::testFormURLEncodeMap_2()",
      "255": "URLUtilsTest::::testFormURLEncodeMap_2()",
      "256": "URLUtilsTest::::testFormURLEncodeMap_2()",
      "257": "URLUtilsTest::::testFormURLEncodeMap_2()",
      "258": "URLUtilsTest::::testFormURLEncodeMap_2()",
      "259": "URLUtilsTest::::testFormURLEncodeMap_2()",
      "260": "URLUtilsTest::::testFormURLEncodeMap_2()",
      "261": "URLUtilsTest::::testFormURLEncodeMap_2()",
      "262": "URLUtilsTest::::testFormURLEncodeMap_2()",
      "271": "URLUtilsTest::::testPercentEncode_1()",
      "272": "URLUtilsTest::::testPercentEncode_1()",
      "273": "URLUtilsTest::::testPercentEncode_1()",
      "274": "URLUtilsTest::::testPercentEncode_1()",
      "275": "URLUtilsTest::::testPercentEncode_1()",
      "276": "URLUtilsTest::::testPercentEncode_1()",
      "277": "URLUtilsTest::::testPercentEncode_1()",
      "278": "URLUtilsTest::::testPercentEncode_1()",
      "279": "URLUtilsTest::::testPercentEncode_1()",
      "288": "URLUtilsTest::::testPercentEncode_2()",
      "289": "URLUtilsTest::::testPercentEncode_2()",
      "290": "URLUtilsTest::::testPercentEncode_2()",
      "291": "URLUtilsTest::::testPercentEncode_2()",
      "292": "URLUtilsTest::::testPercentEncode_2()",
      "293": "URLUtilsTest::::testPercentEncode_2()",
      "294": "URLUtilsTest::::testPercentEncode_2()",
      "295": "URLUtilsTest::::testPercentEncode_2()",
      "296": "URLUtilsTest::::testPercentEncode_2()",
      "305": "URLUtilsTest::::testQueryStringToMap_1()",
      "306": "URLUtilsTest::::testQueryStringToMap_1()",
      "307": "URLUtilsTest::::testQueryStringToMap_1()",
      "308": "URLUtilsTest::::testQueryStringToMap_1()",
      "309": "URLUtilsTest::::testQueryStringToMap_1()",
      "310": "URLUtilsTest::::testQueryStringToMap_1()",
      "311": "URLUtilsTest::::testQueryStringToMap_1()",
      "312": "URLUtilsTest::::testQueryStringToMap_1()",
      "313": "URLUtilsTest::::testQueryStringToMap_1()",
      "314": "URLUtilsTest::::testQueryStringToMap_1()",
      "315": "URLUtilsTest::::testQueryStringToMap_1()",
      "324": "URLUtilsTest::::testQueryStringToMap_2()",
      "325": "URLUtilsTest::::testQueryStringToMap_2()",
      "326": "URLUtilsTest::::testQueryStringToMap_2()",
      "327": "URLUtilsTest::::testQueryStringToMap_2()",
      "328": "URLUtilsTest::::testQueryStringToMap_2()",
      "329": "URLUtilsTest::::testQueryStringToMap_2()",
      "330": "URLUtilsTest::::testQueryStringToMap_2()",
      "331": "URLUtilsTest::::testQueryStringToMap_2()",
      "332": "URLUtilsTest::::testQueryStringToMap_2()",
      "333": "URLUtilsTest::::testQueryStringToMap_2()",
      "334": "URLUtilsTest::::testQueryStringToMap_2()",
      "343": "URLUtilsTest::::testQueryStringToMap_3()",
      "344": "URLUtilsTest::::testQueryStringToMap_3()",
      "345": "URLUtilsTest::::testQueryStringToMap_3()",
      "346": "URLUtilsTest::::testQueryStringToMap_3()",
      "347": "URLUtilsTest::::testQueryStringToMap_3()",
      "348": "URLUtilsTest::::testQueryStringToMap_3()",
      "349": "URLUtilsTest::::testQueryStringToMap_3()",
      "350": "URLUtilsTest::::testQueryStringToMap_3()",
      "351": "URLUtilsTest::::testQueryStringToMap_3()",
      "352": "URLUtilsTest::::testQueryStringToMap_3()",
      "353": "URLUtilsTest::::testQueryStringToMap_3()",
      "362": "URLUtilsTest::::testQueryStringToMap_4()",
      "363": "URLUtilsTest::::testQueryStringToMap_4()",
      "364": "URLUtilsTest::::testQueryStringToMap_4()",
      "365": "URLUtilsTest::::testQueryStringToMap_4()",
      "366": "URLUtilsTest::::testQueryStringToMap_4()",
      "367": "URLUtilsTest::::testQueryStringToMap_4()",
      "368": "URLUtilsTest::::testQueryStringToMap_4()",
      "369": "URLUtilsTest::::testQueryStringToMap_4()",
      "370": "URLUtilsTest::::testQueryStringToMap_4()",
      "371": "URLUtilsTest::::testQueryStringToMap_4()",
      "380": "URLUtilsTest::::testQueryStringToMap_5()",
      "381": "URLUtilsTest::::testQueryStringToMap_5()",
      "382": "URLUtilsTest::::testQueryStringToMap_5()",
      "383": "URLUtilsTest::::testQueryStringToMap_5()",
      "384": "URLUtilsTest::::testQueryStringToMap_5()",
      "385": "URLUtilsTest::::testQueryStringToMap_5()",
      "386": "URLUtilsTest::::testQueryStringToMap_5()",
      "387": "URLUtilsTest::::testQueryStringToMap_5()",
      "388": "URLUtilsTest::::testQueryStringToMap_5()",
      "389": "URLUtilsTest::::testQueryStringToMap_5()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          27
        ],
        "covered_lines": [
          20,
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          244,
          245,
          246,
          247
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          37,
          46
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          111,
          113,
          186,
          188,
          190,
          191,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          56,
          65
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          111,
          113,
          186,
          188,
          190,
          191,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          75,
          84
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          111,
          113,
          186,
          188,
          190,
          191,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::appendParametersToQueryString(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          94,
          113
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          207,
          209,
          210,
          211,
          212,
          214,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          123,
          143
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          207,
          209,
          210,
          211,
          212,
          214,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::concatSortedPercentEncodedParams(java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          152,
          160
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          57,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          74,
          76,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::encodeURIComponent(java.lang.String)"
      },
      {
        "test_lines": [
          169,
          177
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          169,
          172,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::formURLDecode(java.lang.String)"
      },
      {
        "test_lines": [
          186,
          194
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          169,
          172,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::formURLDecode(java.lang.String)"
      },
      {
        "test_lines": [
          203,
          211
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          153,
          156,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::formURLEncode(java.lang.String)"
      },
      {
        "test_lines": [
          220,
          228
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          153,
          156,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::formURLEncode(java.lang.String)"
      },
      {
        "test_lines": [
          237,
          245
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          111,
          113,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::formURLEncodeMap(java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          254,
          262
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          111,
          113,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::formURLEncodeMap(java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          271,
          279
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          137,
          139,
          140,
          141,
          143,
          153,
          156,
          244,
          245,
          246,
          247,
          250
        ],
        "label": "URLUtils::::percentEncode(java.lang.String)"
      },
      {
        "test_lines": [
          288,
          296
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          137,
          139,
          140,
          141,
          143,
          153,
          156,
          244,
          245,
          246,
          247,
          250
        ],
        "label": "URLUtils::::percentEncode(java.lang.String)"
      },
      {
        "test_lines": [
          305,
          315
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          169,
          172,
          224,
          226,
          227,
          228,
          229,
          230,
          232,
          236,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::queryStringToMap(java.lang.String)"
      },
      {
        "test_lines": [
          324,
          334
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          169,
          172,
          224,
          226,
          227,
          228,
          229,
          230,
          232,
          236,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::queryStringToMap(java.lang.String)"
      },
      {
        "test_lines": [
          343,
          353
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          169,
          172,
          224,
          226,
          227,
          228,
          229,
          230,
          232,
          236,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::queryStringToMap(java.lang.String)"
      },
      {
        "test_lines": [
          362,
          371
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          224,
          226,
          236,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::queryStringToMap(java.lang.String)"
      },
      {
        "test_lines": [
          380,
          389
        ],
        "covered_lines": [
          31,
          36,
          38,
          39,
          40,
          42,
          43,
          224,
          226,
          236,
          244,
          245,
          246,
          247
        ],
        "label": "URLUtils::::queryStringToMap(java.lang.String)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/http/APILimitUtils.java": {
    "class_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import java.util.Map;\n",
      "\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "/**\n",
      " * Helper class to process the HTTP headers from a Response object \n",
      " * and get the available and remaining API limit status\n",
      " * \n",
      " * @author Arinto Murdopo\n",
      " */\n",
      "public final class APILimitUtils {\n",
      "\n",
      "    private static final Logger logger = LoggerFactory.getLogger(APILimitUtils.class);\n",
      "\n",
      "    protected static final String LIMIT_HEADER_KEY = \"X-Ratelimit-Limit\";\n",
      "\n",
      "    protected static final String REMAINING_HEADER_KEY = \"X-Ratelimit-Remaining\";\n",
      "\n",
      "    private APILimitUtils() {}\n",
      "\n",
      "    /**\n",
      "     * Get the available API limit. It correspond to the value of \n",
      "     * X-Ratelimit-Limit key in HTTP response headers. For Instagram \n",
      "     * v1 API, this method should return 5000.\n",
      "     * @param headers HTTP headers from a Response object\n",
      "     * @return Available API limit. -1 if response header is invalid or does not contains the API \n",
      "     * limit information\n",
      "     */\n",
      "    public static int getAPILimitStatus(Map<String, String> headers) {\n",
      "        return APILimitUtils.getIntegerValue(headers, LIMIT_HEADER_KEY);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get the remaining API limit. It correspond to the value of \n",
      "     * X-Ratelimit-Remaining key in HTTP response headers.\n",
      "     * @param headers HTTP headers from a Response object\n",
      "     * @return Remaining API limit. -1 if response header is invalid or does not contains the remaining \n",
      "     * limit information\n",
      "     */\n",
      "    public static int getRemainingLimitStatus(Map<String, String> headers) {\n",
      "        return APILimitUtils.getIntegerValue(headers, REMAINING_HEADER_KEY);\n",
      "    }\n",
      "\n",
      "    private static int getIntegerValue(Map<String, String> header, String key) {\n",
      "        String intValueStr = header.get(key);\n",
      "        if (intValueStr == null) {\n",
      "            intValueStr = header.get(key.toLowerCase());\n",
      "        }\n",
      "        int value = -1;\n",
      "\n",
      "        try {\n",
      "            value = Integer.valueOf(intValueStr);\n",
      "        } catch (NumberFormatException e) {\n",
      "            logger.error(\"Invalid Integer value for key: \" + key + \", value :\" + intValueStr);\n",
      "        }\n",
      "        return value;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import static org.junit.Assert.*;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "public class APILimitUtilsTest {\n",
      "\n",
      "    @Test\n",
      "    public void remainingBetweenMinAndMax() {\n",
      "        int limitValue = 5000;\n",
      "        int remainingValue = 3999;\n",
      "        \n",
      "        Map<String, String> headers = new HashMap<String, String>();\n",
      "        headers.put(APILimitUtils.LIMIT_HEADER_KEY, String.valueOf(limitValue));\n",
      "        headers.put(APILimitUtils.REMAINING_HEADER_KEY, String.valueOf(remainingValue));\n",
      "       \n",
      "        assertTrue(limitValue == Integer.valueOf(APILimitUtils.getAPILimitStatus(headers)));\n",
      "        assertTrue(remainingValue == Integer.valueOf(APILimitUtils.getRemainingLimitStatus(headers)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void remainingBetweenMax() {\n",
      "        int limitValue = 5000;\n",
      "        int remainingValue = limitValue;\n",
      "        \n",
      "        Map<String, String> headers = new HashMap<String, String>();\n",
      "        headers.put(APILimitUtils.LIMIT_HEADER_KEY, String.valueOf(limitValue));\n",
      "        headers.put(APILimitUtils.REMAINING_HEADER_KEY, String.valueOf(remainingValue));\n",
      "       \n",
      "        assertTrue(limitValue == APILimitUtils.getAPILimitStatus(headers));\n",
      "        assertTrue(remainingValue == APILimitUtils.getRemainingLimitStatus(headers)); \n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void remainingZero() {\n",
      "        int limitValue = 5000;\n",
      "        int remainingValue = 0;\n",
      "        \n",
      "        Map<String, String> headers = new HashMap<String, String>();\n",
      "        headers.put(APILimitUtils.LIMIT_HEADER_KEY, String.valueOf(limitValue));\n",
      "        headers.put(APILimitUtils.REMAINING_HEADER_KEY, String.valueOf(remainingValue));\n",
      "       \n",
      "        assertTrue(limitValue == APILimitUtils.getAPILimitStatus(headers));\n",
      "        assertTrue(remainingValue == APILimitUtils.getRemainingLimitStatus(headers)); \n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void emptyHeader() {\n",
      "        int defaultErrorValue = -1;\n",
      "        Map<String, String> headers = new HashMap<String, String>();\n",
      "       \n",
      "        assertTrue(defaultErrorValue == APILimitUtils.getAPILimitStatus(headers));\n",
      "        assertTrue(defaultErrorValue == APILimitUtils.getRemainingLimitStatus(headers)); \n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void lowerCase() {\n",
      "        int limitValue = 5000;\n",
      "        int remainingValue = 3999;\n",
      "\n",
      "        Map<String, String> headers = new HashMap<String, String>();\n",
      "        headers.put(APILimitUtils.LIMIT_HEADER_KEY.toLowerCase(), String.valueOf(limitValue));\n",
      "        headers.put(APILimitUtils.REMAINING_HEADER_KEY.toLowerCase(), String.valueOf(remainingValue));\n",
      "\n",
      "        assertTrue(limitValue == APILimitUtils.getAPILimitStatus(headers));\n",
      "        assertTrue(remainingValue == APILimitUtils.getRemainingLimitStatus(headers));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "APILimitUtils::::getAPILimitStatus(java.util.Map<java.lang.String, java.lang.String>)": [
        32,
        34
      ],
      "APILimitUtils::::getRemainingLimitStatus(java.util.Map<java.lang.String, java.lang.String>)": [
        43,
        45
      ],
      "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)": [
        47,
        60
      ]
    },
    "test_method_lines_dic": {
      "APILimitUtilsTest::::remainingBetweenMinAndMax()": [
        12,
        23
      ],
      "APILimitUtilsTest::::remainingBetweenMax()": [
        25,
        36
      ],
      "APILimitUtilsTest::::remainingZero()": [
        38,
        49
      ],
      "APILimitUtilsTest::::emptyHeader()": [
        51,
        58
      ],
      "APILimitUtilsTest::::lowerCase()": [
        60,
        71
      ]
    },
    "reverse_method_lines_dic": {
      "32": "APILimitUtils::::getAPILimitStatus(java.util.Map<java.lang.String, java.lang.String>)",
      "33": "APILimitUtils::::getAPILimitStatus(java.util.Map<java.lang.String, java.lang.String>)",
      "34": "APILimitUtils::::getAPILimitStatus(java.util.Map<java.lang.String, java.lang.String>)",
      "43": "APILimitUtils::::getRemainingLimitStatus(java.util.Map<java.lang.String, java.lang.String>)",
      "44": "APILimitUtils::::getRemainingLimitStatus(java.util.Map<java.lang.String, java.lang.String>)",
      "45": "APILimitUtils::::getRemainingLimitStatus(java.util.Map<java.lang.String, java.lang.String>)",
      "47": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "48": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "49": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "50": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "51": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "52": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "53": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "54": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "55": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "56": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "57": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "58": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "59": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "60": "APILimitUtils::::getIntegerValue(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "12": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "13": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "14": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "15": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "16": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "17": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "18": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "19": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "20": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "21": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "22": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "23": "APILimitUtilsTest::::remainingBetweenMinAndMax()",
      "25": "APILimitUtilsTest::::remainingBetweenMax()",
      "26": "APILimitUtilsTest::::remainingBetweenMax()",
      "27": "APILimitUtilsTest::::remainingBetweenMax()",
      "28": "APILimitUtilsTest::::remainingBetweenMax()",
      "29": "APILimitUtilsTest::::remainingBetweenMax()",
      "30": "APILimitUtilsTest::::remainingBetweenMax()",
      "31": "APILimitUtilsTest::::remainingBetweenMax()",
      "32": "APILimitUtilsTest::::remainingBetweenMax()",
      "33": "APILimitUtilsTest::::remainingBetweenMax()",
      "34": "APILimitUtilsTest::::remainingBetweenMax()",
      "35": "APILimitUtilsTest::::remainingBetweenMax()",
      "36": "APILimitUtilsTest::::remainingBetweenMax()",
      "38": "APILimitUtilsTest::::remainingZero()",
      "39": "APILimitUtilsTest::::remainingZero()",
      "40": "APILimitUtilsTest::::remainingZero()",
      "41": "APILimitUtilsTest::::remainingZero()",
      "42": "APILimitUtilsTest::::remainingZero()",
      "43": "APILimitUtilsTest::::remainingZero()",
      "44": "APILimitUtilsTest::::remainingZero()",
      "45": "APILimitUtilsTest::::remainingZero()",
      "46": "APILimitUtilsTest::::remainingZero()",
      "47": "APILimitUtilsTest::::remainingZero()",
      "48": "APILimitUtilsTest::::remainingZero()",
      "49": "APILimitUtilsTest::::remainingZero()",
      "51": "APILimitUtilsTest::::emptyHeader()",
      "52": "APILimitUtilsTest::::emptyHeader()",
      "53": "APILimitUtilsTest::::emptyHeader()",
      "54": "APILimitUtilsTest::::emptyHeader()",
      "55": "APILimitUtilsTest::::emptyHeader()",
      "56": "APILimitUtilsTest::::emptyHeader()",
      "57": "APILimitUtilsTest::::emptyHeader()",
      "58": "APILimitUtilsTest::::emptyHeader()",
      "60": "APILimitUtilsTest::::lowerCase()",
      "61": "APILimitUtilsTest::::lowerCase()",
      "62": "APILimitUtilsTest::::lowerCase()",
      "63": "APILimitUtilsTest::::lowerCase()",
      "64": "APILimitUtilsTest::::lowerCase()",
      "65": "APILimitUtilsTest::::lowerCase()",
      "66": "APILimitUtilsTest::::lowerCase()",
      "67": "APILimitUtilsTest::::lowerCase()",
      "68": "APILimitUtilsTest::::lowerCase()",
      "69": "APILimitUtilsTest::::lowerCase()",
      "70": "APILimitUtilsTest::::lowerCase()",
      "71": "APILimitUtilsTest::::lowerCase()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          23
        ],
        "covered_lines": [
          16,
          33,
          44,
          48,
          49,
          52,
          55,
          58,
          59
        ],
        "label": "APILimitUtils::::getRemainingLimitStatus(java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          25,
          36
        ],
        "covered_lines": [
          16,
          33,
          44,
          48,
          49,
          52,
          55,
          58,
          59
        ],
        "label": "APILimitUtils::::getRemainingLimitStatus(java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          38,
          49
        ],
        "covered_lines": [
          16,
          33,
          44,
          48,
          49,
          52,
          55,
          58,
          59
        ],
        "label": "APILimitUtils::::getRemainingLimitStatus(java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          51,
          58
        ],
        "covered_lines": [
          16,
          33,
          44,
          48,
          49,
          50,
          52,
          56,
          57,
          59
        ],
        "label": "APILimitUtils::::getRemainingLimitStatus(java.util.Map<java.lang.String, java.lang.String>)"
      },
      {
        "test_lines": [
          60,
          71
        ],
        "covered_lines": [
          16,
          33,
          44,
          48,
          49,
          50,
          52,
          55,
          58,
          59
        ],
        "label": "APILimitUtils::::getRemainingLimitStatus(java.util.Map<java.lang.String, java.lang.String>)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/http/StreamUtils.java": {
    "class_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import org.jinstagram.utils.Preconditions;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.io.InputStreamReader;\n",
      "import java.io.Reader;\n",
      "\n",
      "/**\n",
      " * An utility class to deal with the HttpStream\n",
      " */\n",
      "public final class StreamUtils {\n",
      "\n",
      "    private StreamUtils() {}\n",
      "\n",
      "    /**\n",
      "     * Returns the stream contents as an UTF-8 encoded string\n",
      "     * \n",
      "     * @param is input stream\n",
      "     * @return string contents\n",
      "     */\n",
      "    public static String getStreamContents(InputStream is) {\n",
      "        Preconditions.checkNotNull(is, \"Cannot get String from a null object\");\n",
      "\n",
      "        try {\n",
      "            final char[] buffer = new char[0x10000];\n",
      "            StringBuilder out = new StringBuilder();\n",
      "            Reader in = new InputStreamReader(is, \"UTF-8\");\n",
      "            int read;\n",
      "\n",
      "            do {\n",
      "                read = in.read(buffer, 0, buffer.length);\n",
      "\n",
      "                if (read > 0) {\n",
      "                    out.append(buffer, 0, read);\n",
      "                }\n",
      "            } while (read >= 0);\n",
      "\n",
      "            in.close();\n",
      "\n",
      "            return out.toString();\n",
      "        } catch (IOException ioe) {\n",
      "            throw new IllegalStateException(\"Error while reading response body\", ioe);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.http;\n",
      "\n",
      "import static org.junit.Assert.assertNotNull;\n",
      "\n",
      "import java.io.ByteArrayInputStream;\n",
      "import java.io.InputStream;\n",
      "import java.io.PipedInputStream;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "/**\n",
      " * The class <code>StreamUtilsTest</code> contains tests for the class\n",
      " * <code>{@link StreamUtils}</code>.\n",
      " *\n",
      " */\n",
      "public class StreamUtilsTest {\n",
      "\t/**\n",
      "\t * Run the String getStreamContents(InputStream) method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t */\n",
      "\t@Test\n",
      "\tpublic void testGetStreamContents() throws Exception {\n",
      "\t\tByteArrayInputStream is = new ByteArrayInputStream(\"Mock Content\".getBytes());\n",
      "\n",
      "\t\tString result = StreamUtils.getStreamContents(is);\n",
      "\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Run the String getStreamContents(InputStream) method test.\n",
      "\t *\n",
      "\t * @throws Exception if any error occurs\n",
      "\t */\n",
      "\t@Test(expected = java.lang.IllegalStateException.class)\n",
      "\tpublic void testGetStreamContentsWithIllegalStateException() throws Exception {\n",
      "\t\tInputStream is = new PipedInputStream();\n",
      "\t\tString result = StreamUtils.getStreamContents(is);\n",
      "\t\tassertNotNull(result);\n",
      "\t}\n",
      " \n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "StreamUtils::::getStreamContents(java.io.InputStream)": [
        23,
        46
      ]
    },
    "test_method_lines_dic": {
      "StreamUtilsTest::::testGetStreamContents()": [
        22,
        29
      ],
      "StreamUtilsTest::::testGetStreamContentsWithIllegalStateException()": [
        36,
        41
      ]
    },
    "reverse_method_lines_dic": {
      "23": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "24": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "25": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "26": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "27": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "28": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "29": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "30": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "31": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "32": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "33": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "34": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "35": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "36": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "37": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "38": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "39": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "40": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "41": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "42": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "43": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "44": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "45": "StreamUtils::::getStreamContents(java.io.InputStream)",
      "46": "StreamUtils::::getStreamContents(java.io.InputStream)"
    },
    "test_reverse_method_lines_dic": {
      "22": "StreamUtilsTest::::testGetStreamContents()",
      "23": "StreamUtilsTest::::testGetStreamContents()",
      "24": "StreamUtilsTest::::testGetStreamContents()",
      "25": "StreamUtilsTest::::testGetStreamContents()",
      "26": "StreamUtilsTest::::testGetStreamContents()",
      "27": "StreamUtilsTest::::testGetStreamContents()",
      "28": "StreamUtilsTest::::testGetStreamContents()",
      "29": "StreamUtilsTest::::testGetStreamContents()",
      "36": "StreamUtilsTest::::testGetStreamContentsWithIllegalStateException()",
      "37": "StreamUtilsTest::::testGetStreamContentsWithIllegalStateException()",
      "38": "StreamUtilsTest::::testGetStreamContentsWithIllegalStateException()",
      "39": "StreamUtilsTest::::testGetStreamContentsWithIllegalStateException()",
      "40": "StreamUtilsTest::::testGetStreamContentsWithIllegalStateException()",
      "41": "StreamUtilsTest::::testGetStreamContentsWithIllegalStateException()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          29
        ],
        "covered_lines": [
          24,
          27,
          28,
          29,
          33,
          35,
          36,
          38,
          40,
          42
        ],
        "label": "StreamUtils::::getStreamContents(java.io.InputStream)"
      },
      {
        "test_lines": [
          36,
          41
        ],
        "covered_lines": [
          24,
          27,
          28,
          29,
          43,
          44
        ],
        "label": "StreamUtils::::getStreamContents(java.io.InputStream)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/utils/EnforceSignedRequestUtils.java": {
    "class_content": [
      "package org.jinstagram.utils;\n",
      "\n",
      "import java.nio.charset.Charset;\n",
      "import java.security.InvalidKeyException;\n",
      "import java.security.NoSuchAlgorithmException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "\n",
      "import javax.crypto.Mac;\n",
      "import javax.crypto.spec.SecretKeySpec;\n",
      "\n",
      "import org.apache.commons.codec.binary.Hex;\n",
      "import org.apache.commons.lang3.StringUtils;\n",
      "import org.jinstagram.exceptions.InstagramException;\n",
      "\n",
      "public class EnforceSignedRequestUtils {\n",
      "\n",
      "    private static final String HMAC_SHA256 = \"HmacSHA256\";\n",
      "\n",
      "    private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n",
      "\n",
      "    /**\n",
      "     * signature returns the HmacSHA256 encoded signature used for signed Instagram requests\n",
      "     * @param endpoint The endpoint\n",
      "     * @param params   The query parameters\n",
      "     * @param clientSecret The client application secret\n",
      "     * @return encoded signature String\n",
      "     * @throws InstagramException\n",
      "     */\n",
      "    public static String signature(String endpoint, Map<String, String> params, String clientSecret) throws InstagramException {\n",
      "        SecretKeySpec keySpec = new SecretKeySpec(clientSecret.getBytes(UTF_8), HMAC_SHA256);\n",
      "\n",
      "        // ensure we iterate through the keys in sorted order\n",
      "        List<String> values = new ArrayList<String>(params.size());\n",
      "        for (String key : MapUtils.getSortedKeys(params)) {\n",
      "            values.add(String.format(\"%s=%s\", key, params.get(key)));\n",
      "        }\n",
      "\n",
      "        // the sig string to sign in the form \"endpoint|key1=value1|key2=value2|....\"\n",
      "        String sig = String.format(\"%s|%s\", endpoint, StringUtils.join(values, '|'));\n",
      "\n",
      "        try {\n",
      "            Mac mac = Mac.getInstance(HMAC_SHA256);\n",
      "            mac.init(keySpec);\n",
      "            byte[] result = mac.doFinal(sig.getBytes(UTF_8));\n",
      "            return Hex.encodeHexString(result);\n",
      "        } catch (NoSuchAlgorithmException e) {\n",
      "            throw new InstagramException(\"Invalid algorithm name!\", e);\n",
      "        } catch (InvalidKeyException e) {\n",
      "            throw new InstagramException(\"Invalid key: \" + clientSecret, e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.utils;\n",
      "\n",
      "import org.jinstagram.exceptions.InstagramException;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "public class EnforceSignedRequestUtilsTest {\n",
      "\n",
      "    // Using the examples from Instagram's website to ensure functionality.\n",
      "    // https://instagram.com/developer/secure-api-requests/#examples\n",
      "\n",
      "    @Test\n",
      "    public void testSignatureSingleParam() throws InstagramException {\n",
      "        String endpoint = \"/users/self\";\n",
      "        Map<String, String> query = new HashMap<String, String>() {{\n",
      "            put(\"access_token\", \"fb2e77d.47a0479900504cb3ab4a1f626d174d2d\");\n",
      "        }};\n",
      "        String clientSecret = \"6dc1787668c64c939929c17683d7cb74\";\n",
      "        String expectedSignature = \"cbf5a1f41db44412506cb6563a3218b50f45a710c7a8a65a3e9b18315bb338bf\";\n",
      "\n",
      "        String signature = EnforceSignedRequestUtils.signature(endpoint, query, clientSecret);\n",
      "        Assert.assertEquals(expectedSignature, signature);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSignatureMultipleParams() throws InstagramException {\n",
      "        String endpoint = \"/media/657988443280050001_25025320\";\n",
      "        Map<String, String> query = new HashMap<String, String>() {{\n",
      "            put(\"access_token\", \"fb2e77d.47a0479900504cb3ab4a1f626d174d2d\");\n",
      "            put(\"count\", \"10\");\n",
      "        }};\n",
      "        String clientSecret = \"6dc1787668c64c939929c17683d7cb74\";\n",
      "        String expectedSignature = \"260634b241a6cfef5e4644c205fb30246ff637591142781b86e2075faf1b163a\";\n",
      "\n",
      "        String signature = EnforceSignedRequestUtils.signature(endpoint, query, clientSecret);\n",
      "        Assert.assertEquals(expectedSignature, signature);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)": [
        31,
        53
      ]
    },
    "test_method_lines_dic": {
      "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()": [
        15,
        26
      ],
      "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()": [
        28,
        40
      ]
    },
    "reverse_method_lines_dic": {
      "31": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "32": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "33": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "34": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "35": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "36": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "37": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "38": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "39": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "40": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "41": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "42": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "43": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "44": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "45": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "46": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "47": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "48": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "49": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "50": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "51": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "52": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "53": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "15": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "16": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "17": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "18": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "19": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "20": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "21": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "22": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "23": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "24": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "25": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "26": "EnforceSignedRequestUtilsTest::::testSignatureSingleParam()",
      "28": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "29": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "30": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "31": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "32": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "33": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "34": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "35": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "36": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "37": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "38": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "39": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()",
      "40": "EnforceSignedRequestUtilsTest::::testSignatureMultipleParams()"
    },
    "tests": [
      {
        "test_lines": [
          15,
          26
        ],
        "covered_lines": [
          21,
          32,
          35,
          36,
          37,
          38,
          41,
          44,
          45,
          46,
          47
        ],
        "label": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)"
      },
      {
        "test_lines": [
          28,
          40
        ],
        "covered_lines": [
          21,
          32,
          35,
          36,
          37,
          38,
          41,
          44,
          45,
          46,
          47
        ],
        "label": "EnforceSignedRequestUtils::::signature(java.lang.String,java.util.Map<java.lang.String, java.lang.String>,java.lang.String)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/utils/Preconditions.java": {
    "class_content": [
      "package org.jinstagram.utils;\n",
      "\n",
      "import java.util.regex.Pattern;\n",
      "\n",
      "import org.apache.commons.lang3.StringUtils;\n",
      "import org.jinstagram.auth.model.OAuthConstants;\n",
      "\n",
      "/**\n",
      " * Utils for checking preconditions and invariants\n",
      " */\n",
      "public class Preconditions {\n",
      "\tprivate static final String DEFAULT_MESSAGE = \"Received an invalid parameter\";\n",
      "\n",
      "\tprivate static final Pattern URL_PATTERN = Pattern.compile(\"^[a-zA-Z][a-zA-Z0-9+.-]*://\\\\S+\");\n",
      "\tprivate static final Pattern LAT_LONG_PATTERN = Pattern.compile(\"(-)?[0-9]+(\\\\.)?[0-9]*\");\n",
      "\tprivate static final Pattern NUMERIC_PATTERN = Pattern.compile(\"[0-9]+\");\n",
      "\n",
      "\t/**\n",
      "\t * Checks that an object is not null.\n",
      "\t *\n",
      "\t * @param object   any object\n",
      "\t * @param errorMsg error message\n",
      "\t * @throws IllegalArgumentException if the object is null\n",
      "\t */\n",
      "\tpublic static void checkNotNull(Object object, String errorMsg) {\n",
      "\t\tcheck(object != null, errorMsg);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Checks that at least one of object1 or object2 is not null\n",
      "\t *\n",
      "\t * @param object1 any object\n",
      "\t * @param object2 any object\n",
      "\t * @param errorMsg error message\n",
      "\t * @throws IllegalArgumentException if both object1 and object2 are null\n",
      "\t */\n",
      "\tpublic static void checkBothNotNull(Object object1, Object object2, String errorMsg) {\n",
      "\t\tcheck(!(object1 == null && object2 == null), errorMsg);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Checks that a string is not null or empty\n",
      "\t * @param string   any string\n",
      "\t * @param errorMsg error message\n",
      "\t * @throws IllegalArgumentException if the string is null or empty\n",
      "\t */\n",
      "\tpublic static void checkEmptyString(String string, String errorMsg) {\n",
      "\t\tcheck(StringUtils.isNotBlank(string), errorMsg);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Checks that a URL is valid\n",
      "\t *\n",
      "\t * @param url      any string\n",
      "\t * @param errorMsg error message\n",
      "\t */\n",
      "\tpublic static void checkValidUrl(String url, String errorMsg) {\n",
      "\t\tcheckEmptyString(url, errorMsg);\n",
      "\t\tcheck(isUrl(url), errorMsg);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Checks that a URL is a valid OAuth callback\n",
      "\t *\n",
      "\t * @param url      any string\n",
      "\t * @param errorMsg error message\n",
      "\t */\n",
      "\tpublic static void checkValidOAuthCallback(String url, String errorMsg) {\n",
      "\t\tcheckEmptyString(url, errorMsg);\n",
      "\n",
      "\t\tif (url.toLowerCase().compareToIgnoreCase(OAuthConstants.OUT_OF_BAND) != 0) {\n",
      "\t\t\tcheck(isUrl(url), errorMsg);\n",
      "\t\t}\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Checks that a string is a valid longitude or latitude value ('lat' and 'lng') \n",
      "\t * as shown in <a href=\"http://instagram.com/developer/realtime/\">Instagram Developer real time section</a>\n",
      "\t * \n",
      "\t * @param latOrLong any string\n",
      "\t * @param errorMsg error message\n",
      "\t */\n",
      "\tpublic static void checkValidLatLong(String latOrLong, String errorMsg) {\n",
      "\t\tcheckEmptyString(latOrLong, errorMsg);\n",
      "\t\tcheck(isLatLong(latOrLong), errorMsg);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Check that a string is a valid radius value ('radius') \n",
      "\t * as shown in <a href=\"http://instagram.com/developer/realtime/\">Instagram Developer real time section</a>\n",
      "\t * \n",
      "\t * @param radiusString any string that is supposed to be a radius\n",
      "\t * @param errorMsg error message\n",
      "\t */\n",
      "\tpublic static void checkValidRadius(String radiusString, String errorMsg) {\n",
      "\t\tcheckEmptyString(radiusString, errorMsg);\n",
      "\t\tcheck(isNumeric(radiusString), errorMsg);\n",
      "\t}\n",
      "\n",
      "\tprivate static boolean isUrl(String url) {\n",
      "\t\treturn URL_PATTERN.matcher(url).matches();\n",
      "\t}\n",
      "\n",
      "\tprivate static boolean isLatLong(String latOrLong) {\n",
      "\t\treturn LAT_LONG_PATTERN.matcher(latOrLong).matches();\n",
      "\t}\n",
      "\n",
      "\tprivate static boolean isNumeric(String numericString) {\n",
      "\t\treturn NUMERIC_PATTERN.matcher(numericString).matches();\n",
      "\t}\n",
      "\n",
      "\tprivate static void check(boolean requirements, String error) {\n",
      "\t\tString message = StringUtils.isBlank(error) ? DEFAULT_MESSAGE : error;\n",
      "\n",
      "\t\tif (!requirements) {\n",
      "\t\t\tthrow new IllegalArgumentException(message);\n",
      "\t\t}\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.utils;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "public class PreconditionsTest {\n",
      "\n",
      "    private static final String ERROR_MSG = \"\";\n",
      "\n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldThrowExceptionForNullObjects() {\n",
      "        Preconditions.checkNotNull(null, ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldThrowExceptionForNullStrings() {\n",
      "        Preconditions.checkEmptyString(null, ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldThrowExceptionForEmptyStrings() {\n",
      "        Preconditions.checkEmptyString(\"\", ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldThrowExceptionForSpacesOnlyStrings() {\n",
      "        Preconditions.checkEmptyString(\"               \", ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldThrowExceptionForInvalidUrls() {\n",
      "        Preconditions.checkValidUrl(\"this/is/not/a/valid/url\", ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldThrowExceptionForNullUrls() {\n",
      "        Preconditions.checkValidUrl(null, ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void shouldAllowValidUrls() {\n",
      "        Preconditions.checkValidUrl(\"http://www.example.com\", ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void shouldAllowSSLUrls() {\n",
      "        Preconditions.checkValidUrl(\"https://www.example.com\", ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void shouldAllowSpecialCharsInScheme() {\n",
      "        Preconditions.checkValidUrl(\"custom+9.3-1://www.example.com\", ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void shouldAllowNonStandarProtocolsForAndroid() {\n",
      "        Preconditions.checkValidUrl(\"x-url-custom://www.example.com\", ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowStrangeProtocolNames() {\n",
      "        Preconditions.checkValidUrl(\"$weird*://www.example.com\", ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowUnderscoreInScheme() {\n",
      "        Preconditions.checkValidUrl(\"http_custom://www.example.com\", ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void shouldAllowOutOfBandAsValidCallbackValue() {\n",
      "        Preconditions.checkValidOAuthCallback(\"oob\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void shouldAllowValidLatLong(){\n",
      "    \tPreconditions.checkValidLatLong(\"35.89421911\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void shouldAllowValidLatLongThreeDigits(){\n",
      "    \tPreconditions.checkValidLatLong(\"139.94637467\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void shouldAllowValidLatLongWithoutDecimal(){\n",
      "    \tPreconditions.checkValidLatLong(\"139\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void shouldAllowValidNegativeLatLong(){\n",
      "    \tPreconditions.checkValidLatLong(\"-35.89421911\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void shouldAllowValidNegativeLatLongThreeDigits(){\n",
      "    \tPreconditions.checkValidLatLong(\"-139.94637467\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void shouldAllowValidNegativeLatLongWithoutDecimal(){\n",
      "    \tPreconditions.checkValidLatLong(\"-139\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowEmptyString(){\n",
      "    \tPreconditions.checkValidLatLong(\"    \", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowLatLongWithCharAtTheFirstPart(){\n",
      "    \tPreconditions.checkValidLatLong(\"1f3.894121\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowLatLongWithCharAtTheSecondPart(){\n",
      "    \tPreconditions.checkValidLatLong(\"123.89f121\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowLatLongWithStrangeCharactersFirstPart(){\n",
      "    \tPreconditions.checkValidLatLong(\"1!@#%3.83121\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowLatLongWithStrangeCharactersSecondPart(){\n",
      "    \tPreconditions.checkValidLatLong(\"123.89@#$#$121\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowLatLongWithWhiteSpaceAtBeginning(){\n",
      "    \tPreconditions.checkValidLatLong(\"  123.45678\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowLatLongWithWhiteSpaceAtTheEnd(){\n",
      "    \tPreconditions.checkValidLatLong(\"123.45678  \", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowLatLongWithWhiteSpaceAtTheMiddle(){\n",
      "    \tPreconditions.checkValidLatLong(\"123.  45678\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void shouldAllowValidRadiusValue(){\n",
      "    \tPreconditions.checkValidRadius(\"12345\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowRadiusWithAlphabet(){\n",
      "    \tPreconditions.checkValidRadius(\"12e345\", ERROR_MSG);\n",
      "    }\n",
      "\n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowRadiusWithStrangeCharacter(){\n",
      "    \tPreconditions.checkValidRadius(\"12#@$%@#%345\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowRadiusWithWhiteSpaceAtBeginning(){\n",
      "    \tPreconditions.checkValidRadius(\"  12345\", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowRadiusWithWhiteSpaceAtTheEnd(){\n",
      "    \tPreconditions.checkValidRadius(\"12378  \", ERROR_MSG);\n",
      "    }\n",
      "    \n",
      "    @Test(expected = IllegalArgumentException.class)\n",
      "    public void shouldNotAllowRadiusWithWhiteSpaceAtTheMiddle(){\n",
      "    \tPreconditions.checkValidRadius(\"123  4567\", ERROR_MSG);\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "Preconditions::::checkNotNull(java.lang.Object,java.lang.String)": [
        25,
        27
      ],
      "Preconditions::::checkBothNotNull(java.lang.Object,java.lang.Object,java.lang.String)": [
        37,
        39
      ],
      "Preconditions::::checkEmptyString(java.lang.String,java.lang.String)": [
        47,
        49
      ],
      "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)": [
        57,
        60
      ],
      "Preconditions::::checkValidOAuthCallback(java.lang.String,java.lang.String)": [
        68,
        74
      ],
      "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)": [
        83,
        86
      ],
      "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)": [
        95,
        98
      ],
      "Preconditions::::isUrl(java.lang.String)": [
        100,
        102
      ],
      "Preconditions::::isLatLong(java.lang.String)": [
        104,
        106
      ],
      "Preconditions::::isNumeric(java.lang.String)": [
        108,
        110
      ],
      "Preconditions::::check(boolean,java.lang.String)": [
        112,
        118
      ]
    },
    "test_method_lines_dic": {
      "PreconditionsTest::::shouldThrowExceptionForNullObjects()": [
        9,
        12
      ],
      "PreconditionsTest::::shouldThrowExceptionForNullStrings()": [
        14,
        17
      ],
      "PreconditionsTest::::shouldThrowExceptionForEmptyStrings()": [
        19,
        22
      ],
      "PreconditionsTest::::shouldThrowExceptionForSpacesOnlyStrings()": [
        24,
        27
      ],
      "PreconditionsTest::::shouldThrowExceptionForInvalidUrls()": [
        29,
        32
      ],
      "PreconditionsTest::::shouldThrowExceptionForNullUrls()": [
        34,
        37
      ],
      "PreconditionsTest::::shouldAllowValidUrls()": [
        39,
        42
      ],
      "PreconditionsTest::::shouldAllowSSLUrls()": [
        44,
        47
      ],
      "PreconditionsTest::::shouldAllowSpecialCharsInScheme()": [
        49,
        52
      ],
      "PreconditionsTest::::shouldAllowNonStandarProtocolsForAndroid()": [
        54,
        57
      ],
      "PreconditionsTest::::shouldNotAllowStrangeProtocolNames()": [
        59,
        62
      ],
      "PreconditionsTest::::shouldNotAllowUnderscoreInScheme()": [
        64,
        67
      ],
      "PreconditionsTest::::shouldAllowOutOfBandAsValidCallbackValue()": [
        69,
        72
      ],
      "PreconditionsTest::::shouldAllowValidLatLong()": [
        74,
        77
      ],
      "PreconditionsTest::::shouldAllowValidLatLongThreeDigits()": [
        79,
        82
      ],
      "PreconditionsTest::::shouldAllowValidLatLongWithoutDecimal()": [
        84,
        87
      ],
      "PreconditionsTest::::shouldAllowValidNegativeLatLong()": [
        89,
        92
      ],
      "PreconditionsTest::::shouldAllowValidNegativeLatLongThreeDigits()": [
        94,
        97
      ],
      "PreconditionsTest::::shouldAllowValidNegativeLatLongWithoutDecimal()": [
        99,
        102
      ],
      "PreconditionsTest::::shouldNotAllowEmptyString()": [
        104,
        107
      ],
      "PreconditionsTest::::shouldNotAllowLatLongWithCharAtTheFirstPart()": [
        109,
        112
      ],
      "PreconditionsTest::::shouldNotAllowLatLongWithCharAtTheSecondPart()": [
        114,
        117
      ],
      "PreconditionsTest::::shouldNotAllowLatLongWithStrangeCharactersFirstPart()": [
        119,
        122
      ],
      "PreconditionsTest::::shouldNotAllowLatLongWithStrangeCharactersSecondPart()": [
        124,
        127
      ],
      "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtBeginning()": [
        129,
        132
      ],
      "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtTheEnd()": [
        134,
        137
      ],
      "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtTheMiddle()": [
        139,
        142
      ],
      "PreconditionsTest::::shouldAllowValidRadiusValue()": [
        144,
        147
      ],
      "PreconditionsTest::::shouldNotAllowRadiusWithAlphabet()": [
        149,
        152
      ],
      "PreconditionsTest::::shouldNotAllowRadiusWithStrangeCharacter()": [
        154,
        157
      ],
      "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtBeginning()": [
        159,
        162
      ],
      "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtTheEnd()": [
        164,
        167
      ],
      "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtTheMiddle()": [
        169,
        172
      ]
    },
    "reverse_method_lines_dic": {
      "25": "Preconditions::::checkNotNull(java.lang.Object,java.lang.String)",
      "26": "Preconditions::::checkNotNull(java.lang.Object,java.lang.String)",
      "27": "Preconditions::::checkNotNull(java.lang.Object,java.lang.String)",
      "37": "Preconditions::::checkBothNotNull(java.lang.Object,java.lang.Object,java.lang.String)",
      "38": "Preconditions::::checkBothNotNull(java.lang.Object,java.lang.Object,java.lang.String)",
      "39": "Preconditions::::checkBothNotNull(java.lang.Object,java.lang.Object,java.lang.String)",
      "47": "Preconditions::::checkEmptyString(java.lang.String,java.lang.String)",
      "48": "Preconditions::::checkEmptyString(java.lang.String,java.lang.String)",
      "49": "Preconditions::::checkEmptyString(java.lang.String,java.lang.String)",
      "57": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)",
      "58": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)",
      "59": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)",
      "60": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)",
      "68": "Preconditions::::checkValidOAuthCallback(java.lang.String,java.lang.String)",
      "69": "Preconditions::::checkValidOAuthCallback(java.lang.String,java.lang.String)",
      "70": "Preconditions::::checkValidOAuthCallback(java.lang.String,java.lang.String)",
      "71": "Preconditions::::checkValidOAuthCallback(java.lang.String,java.lang.String)",
      "72": "Preconditions::::checkValidOAuthCallback(java.lang.String,java.lang.String)",
      "73": "Preconditions::::checkValidOAuthCallback(java.lang.String,java.lang.String)",
      "74": "Preconditions::::checkValidOAuthCallback(java.lang.String,java.lang.String)",
      "83": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)",
      "84": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)",
      "85": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)",
      "86": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)",
      "95": "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)",
      "96": "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)",
      "97": "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)",
      "98": "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)",
      "100": "Preconditions::::isUrl(java.lang.String)",
      "101": "Preconditions::::isUrl(java.lang.String)",
      "102": "Preconditions::::isUrl(java.lang.String)",
      "104": "Preconditions::::isLatLong(java.lang.String)",
      "105": "Preconditions::::isLatLong(java.lang.String)",
      "106": "Preconditions::::isLatLong(java.lang.String)",
      "108": "Preconditions::::isNumeric(java.lang.String)",
      "109": "Preconditions::::isNumeric(java.lang.String)",
      "110": "Preconditions::::isNumeric(java.lang.String)",
      "112": "Preconditions::::check(boolean,java.lang.String)",
      "113": "Preconditions::::check(boolean,java.lang.String)",
      "114": "Preconditions::::check(boolean,java.lang.String)",
      "115": "Preconditions::::check(boolean,java.lang.String)",
      "116": "Preconditions::::check(boolean,java.lang.String)",
      "117": "Preconditions::::check(boolean,java.lang.String)",
      "118": "Preconditions::::check(boolean,java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "9": "PreconditionsTest::::shouldThrowExceptionForNullObjects()",
      "10": "PreconditionsTest::::shouldThrowExceptionForNullObjects()",
      "11": "PreconditionsTest::::shouldThrowExceptionForNullObjects()",
      "12": "PreconditionsTest::::shouldThrowExceptionForNullObjects()",
      "14": "PreconditionsTest::::shouldThrowExceptionForNullStrings()",
      "15": "PreconditionsTest::::shouldThrowExceptionForNullStrings()",
      "16": "PreconditionsTest::::shouldThrowExceptionForNullStrings()",
      "17": "PreconditionsTest::::shouldThrowExceptionForNullStrings()",
      "19": "PreconditionsTest::::shouldThrowExceptionForEmptyStrings()",
      "20": "PreconditionsTest::::shouldThrowExceptionForEmptyStrings()",
      "21": "PreconditionsTest::::shouldThrowExceptionForEmptyStrings()",
      "22": "PreconditionsTest::::shouldThrowExceptionForEmptyStrings()",
      "24": "PreconditionsTest::::shouldThrowExceptionForSpacesOnlyStrings()",
      "25": "PreconditionsTest::::shouldThrowExceptionForSpacesOnlyStrings()",
      "26": "PreconditionsTest::::shouldThrowExceptionForSpacesOnlyStrings()",
      "27": "PreconditionsTest::::shouldThrowExceptionForSpacesOnlyStrings()",
      "29": "PreconditionsTest::::shouldThrowExceptionForInvalidUrls()",
      "30": "PreconditionsTest::::shouldThrowExceptionForInvalidUrls()",
      "31": "PreconditionsTest::::shouldThrowExceptionForInvalidUrls()",
      "32": "PreconditionsTest::::shouldThrowExceptionForInvalidUrls()",
      "34": "PreconditionsTest::::shouldThrowExceptionForNullUrls()",
      "35": "PreconditionsTest::::shouldThrowExceptionForNullUrls()",
      "36": "PreconditionsTest::::shouldThrowExceptionForNullUrls()",
      "37": "PreconditionsTest::::shouldThrowExceptionForNullUrls()",
      "39": "PreconditionsTest::::shouldAllowValidUrls()",
      "40": "PreconditionsTest::::shouldAllowValidUrls()",
      "41": "PreconditionsTest::::shouldAllowValidUrls()",
      "42": "PreconditionsTest::::shouldAllowValidUrls()",
      "44": "PreconditionsTest::::shouldAllowSSLUrls()",
      "45": "PreconditionsTest::::shouldAllowSSLUrls()",
      "46": "PreconditionsTest::::shouldAllowSSLUrls()",
      "47": "PreconditionsTest::::shouldAllowSSLUrls()",
      "49": "PreconditionsTest::::shouldAllowSpecialCharsInScheme()",
      "50": "PreconditionsTest::::shouldAllowSpecialCharsInScheme()",
      "51": "PreconditionsTest::::shouldAllowSpecialCharsInScheme()",
      "52": "PreconditionsTest::::shouldAllowSpecialCharsInScheme()",
      "54": "PreconditionsTest::::shouldAllowNonStandarProtocolsForAndroid()",
      "55": "PreconditionsTest::::shouldAllowNonStandarProtocolsForAndroid()",
      "56": "PreconditionsTest::::shouldAllowNonStandarProtocolsForAndroid()",
      "57": "PreconditionsTest::::shouldAllowNonStandarProtocolsForAndroid()",
      "59": "PreconditionsTest::::shouldNotAllowStrangeProtocolNames()",
      "60": "PreconditionsTest::::shouldNotAllowStrangeProtocolNames()",
      "61": "PreconditionsTest::::shouldNotAllowStrangeProtocolNames()",
      "62": "PreconditionsTest::::shouldNotAllowStrangeProtocolNames()",
      "64": "PreconditionsTest::::shouldNotAllowUnderscoreInScheme()",
      "65": "PreconditionsTest::::shouldNotAllowUnderscoreInScheme()",
      "66": "PreconditionsTest::::shouldNotAllowUnderscoreInScheme()",
      "67": "PreconditionsTest::::shouldNotAllowUnderscoreInScheme()",
      "69": "PreconditionsTest::::shouldAllowOutOfBandAsValidCallbackValue()",
      "70": "PreconditionsTest::::shouldAllowOutOfBandAsValidCallbackValue()",
      "71": "PreconditionsTest::::shouldAllowOutOfBandAsValidCallbackValue()",
      "72": "PreconditionsTest::::shouldAllowOutOfBandAsValidCallbackValue()",
      "74": "PreconditionsTest::::shouldAllowValidLatLong()",
      "75": "PreconditionsTest::::shouldAllowValidLatLong()",
      "76": "PreconditionsTest::::shouldAllowValidLatLong()",
      "77": "PreconditionsTest::::shouldAllowValidLatLong()",
      "79": "PreconditionsTest::::shouldAllowValidLatLongThreeDigits()",
      "80": "PreconditionsTest::::shouldAllowValidLatLongThreeDigits()",
      "81": "PreconditionsTest::::shouldAllowValidLatLongThreeDigits()",
      "82": "PreconditionsTest::::shouldAllowValidLatLongThreeDigits()",
      "84": "PreconditionsTest::::shouldAllowValidLatLongWithoutDecimal()",
      "85": "PreconditionsTest::::shouldAllowValidLatLongWithoutDecimal()",
      "86": "PreconditionsTest::::shouldAllowValidLatLongWithoutDecimal()",
      "87": "PreconditionsTest::::shouldAllowValidLatLongWithoutDecimal()",
      "89": "PreconditionsTest::::shouldAllowValidNegativeLatLong()",
      "90": "PreconditionsTest::::shouldAllowValidNegativeLatLong()",
      "91": "PreconditionsTest::::shouldAllowValidNegativeLatLong()",
      "92": "PreconditionsTest::::shouldAllowValidNegativeLatLong()",
      "94": "PreconditionsTest::::shouldAllowValidNegativeLatLongThreeDigits()",
      "95": "PreconditionsTest::::shouldAllowValidNegativeLatLongThreeDigits()",
      "96": "PreconditionsTest::::shouldAllowValidNegativeLatLongThreeDigits()",
      "97": "PreconditionsTest::::shouldAllowValidNegativeLatLongThreeDigits()",
      "99": "PreconditionsTest::::shouldAllowValidNegativeLatLongWithoutDecimal()",
      "100": "PreconditionsTest::::shouldAllowValidNegativeLatLongWithoutDecimal()",
      "101": "PreconditionsTest::::shouldAllowValidNegativeLatLongWithoutDecimal()",
      "102": "PreconditionsTest::::shouldAllowValidNegativeLatLongWithoutDecimal()",
      "104": "PreconditionsTest::::shouldNotAllowEmptyString()",
      "105": "PreconditionsTest::::shouldNotAllowEmptyString()",
      "106": "PreconditionsTest::::shouldNotAllowEmptyString()",
      "107": "PreconditionsTest::::shouldNotAllowEmptyString()",
      "109": "PreconditionsTest::::shouldNotAllowLatLongWithCharAtTheFirstPart()",
      "110": "PreconditionsTest::::shouldNotAllowLatLongWithCharAtTheFirstPart()",
      "111": "PreconditionsTest::::shouldNotAllowLatLongWithCharAtTheFirstPart()",
      "112": "PreconditionsTest::::shouldNotAllowLatLongWithCharAtTheFirstPart()",
      "114": "PreconditionsTest::::shouldNotAllowLatLongWithCharAtTheSecondPart()",
      "115": "PreconditionsTest::::shouldNotAllowLatLongWithCharAtTheSecondPart()",
      "116": "PreconditionsTest::::shouldNotAllowLatLongWithCharAtTheSecondPart()",
      "117": "PreconditionsTest::::shouldNotAllowLatLongWithCharAtTheSecondPart()",
      "119": "PreconditionsTest::::shouldNotAllowLatLongWithStrangeCharactersFirstPart()",
      "120": "PreconditionsTest::::shouldNotAllowLatLongWithStrangeCharactersFirstPart()",
      "121": "PreconditionsTest::::shouldNotAllowLatLongWithStrangeCharactersFirstPart()",
      "122": "PreconditionsTest::::shouldNotAllowLatLongWithStrangeCharactersFirstPart()",
      "124": "PreconditionsTest::::shouldNotAllowLatLongWithStrangeCharactersSecondPart()",
      "125": "PreconditionsTest::::shouldNotAllowLatLongWithStrangeCharactersSecondPart()",
      "126": "PreconditionsTest::::shouldNotAllowLatLongWithStrangeCharactersSecondPart()",
      "127": "PreconditionsTest::::shouldNotAllowLatLongWithStrangeCharactersSecondPart()",
      "129": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtBeginning()",
      "130": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtBeginning()",
      "131": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtBeginning()",
      "132": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtBeginning()",
      "134": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtTheEnd()",
      "135": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtTheEnd()",
      "136": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtTheEnd()",
      "137": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtTheEnd()",
      "139": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtTheMiddle()",
      "140": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtTheMiddle()",
      "141": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtTheMiddle()",
      "142": "PreconditionsTest::::shouldNotAllowLatLongWithWhiteSpaceAtTheMiddle()",
      "144": "PreconditionsTest::::shouldAllowValidRadiusValue()",
      "145": "PreconditionsTest::::shouldAllowValidRadiusValue()",
      "146": "PreconditionsTest::::shouldAllowValidRadiusValue()",
      "147": "PreconditionsTest::::shouldAllowValidRadiusValue()",
      "149": "PreconditionsTest::::shouldNotAllowRadiusWithAlphabet()",
      "150": "PreconditionsTest::::shouldNotAllowRadiusWithAlphabet()",
      "151": "PreconditionsTest::::shouldNotAllowRadiusWithAlphabet()",
      "152": "PreconditionsTest::::shouldNotAllowRadiusWithAlphabet()",
      "154": "PreconditionsTest::::shouldNotAllowRadiusWithStrangeCharacter()",
      "155": "PreconditionsTest::::shouldNotAllowRadiusWithStrangeCharacter()",
      "156": "PreconditionsTest::::shouldNotAllowRadiusWithStrangeCharacter()",
      "157": "PreconditionsTest::::shouldNotAllowRadiusWithStrangeCharacter()",
      "159": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtBeginning()",
      "160": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtBeginning()",
      "161": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtBeginning()",
      "162": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtBeginning()",
      "164": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtTheEnd()",
      "165": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtTheEnd()",
      "166": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtTheEnd()",
      "167": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtTheEnd()",
      "169": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtTheMiddle()",
      "170": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtTheMiddle()",
      "171": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtTheMiddle()",
      "172": "PreconditionsTest::::shouldNotAllowRadiusWithWhiteSpaceAtTheMiddle()"
    },
    "tests": [
      {
        "test_lines": [
          9,
          12
        ],
        "covered_lines": [
          14,
          15,
          16,
          26,
          113,
          115,
          116
        ],
        "label": "Preconditions::::checkNotNull(java.lang.Object,java.lang.String)"
      },
      {
        "test_lines": [
          14,
          17
        ],
        "covered_lines": [
          14,
          15,
          16,
          113,
          115,
          116
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          19,
          22
        ],
        "covered_lines": [
          14,
          15,
          16,
          113,
          115,
          116
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          24,
          27
        ],
        "covered_lines": [
          14,
          15,
          16,
          113,
          115,
          116
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          29,
          32
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          58,
          101,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          34,
          37
        ],
        "covered_lines": [
          14,
          15,
          16,
          113,
          115,
          116
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          39,
          42
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          58,
          59,
          60,
          101,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          44,
          47
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          58,
          59,
          60,
          101,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          49,
          52
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          58,
          59,
          60,
          101,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          54,
          57
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          58,
          59,
          60,
          101,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          59,
          62
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          58,
          101,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          64,
          67
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          58,
          101,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidUrl(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          69,
          72
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          69,
          71,
          74,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidOAuthCallback(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          74,
          77
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          85,
          86,
          105,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          79,
          82
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          85,
          86,
          105,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          84,
          87
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          85,
          86,
          105,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          89,
          92
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          85,
          86,
          105,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          94,
          97
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          85,
          86,
          105,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          99,
          102
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          85,
          86,
          105,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          104,
          107
        ],
        "covered_lines": [
          14,
          15,
          16,
          113,
          115,
          116
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          109,
          112
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          105,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          114,
          117
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          105,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          119,
          122
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          105,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          124,
          127
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          105,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          129,
          132
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          105,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          134,
          137
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          105,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          139,
          142
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          84,
          105,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidLatLong(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          144,
          147
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          96,
          97,
          98,
          109,
          113,
          115,
          118
        ],
        "label": "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          149,
          152
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          96,
          109,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          154,
          157
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          96,
          109,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          159,
          162
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          96,
          109,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          164,
          167
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          96,
          109,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)"
      },
      {
        "test_lines": [
          169,
          172
        ],
        "covered_lines": [
          14,
          15,
          16,
          48,
          49,
          96,
          109,
          113,
          115,
          116,
          118
        ],
        "label": "Preconditions::::checkValidRadius(java.lang.String,java.lang.String)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/utils/MapUtils.java": {
    "class_content": [
      "package org.jinstagram.utils;\n",
      "\n",
      "import org.jinstagram.http.URLUtils;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.LinkedHashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Map.Entry;\n",
      "\n",
      "/**\n",
      " * Utils for {@link Map} manipulation\n",
      " */\n",
      "public class MapUtils {\n",
      "\n",
      "    /**\n",
      "     * Sorts a Map\n",
      "     *\n",
      "     * @param map unsorted map\n",
      "     * @return sorted map\n",
      "     */\n",
      "    public static Map<String, String> sort(Map<String, String> map) {\n",
      "        Preconditions.checkNotNull(map, \"Cannot sort a null object.\");\n",
      "\n",
      "        Map<String, String> sorted = new LinkedHashMap<String, String>();\n",
      "\n",
      "        for (String key : getSortedKeys(map)) {\n",
      "            sorted.put(key, map.get(key));\n",
      "        }\n",
      "\n",
      "        return sorted;\n",
      "    }\n",
      "\n",
      "    /*package private*/ static List<String> getSortedKeys(Map<String, String> map) {\n",
      "        List<String> keys = new ArrayList<String>(map.keySet());\n",
      "\n",
      "        Collections.sort(keys);\n",
      "\n",
      "        return keys;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Form-urlDecodes and appends all keys from the source {@link Map} to the\n",
      "     * target {@link Map}\n",
      "     *\n",
      "     * @param source Map from where the keys get copied and decoded\n",
      "     * @param target Map where the decoded keys are copied to\n",
      "     */\n",
      "    public static void decodeAndAppendEntries(Map<String, String> source,\n",
      "                                              Map<String, String> target) {\n",
      "        for (Entry<String, String> entry : source.entrySet()) {\n",
      "            target.put(URLUtils.percentEncode(entry.getKey()),\n",
      "                    URLUtils.percentEncode(entry.getValue()));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static <K, V> String toString(Map<K, V> map) {\n",
      "        if (map == null) {\n",
      "            return \"\";\n",
      "        }\n",
      "        if (map.isEmpty()) {\n",
      "            return \"{}\";\n",
      "        }\n",
      "\n",
      "        StringBuilder result = new StringBuilder();\n",
      "        for (Map.Entry<K, V> entry : map.entrySet()) {\n",
      "            result.append(\n",
      "                    String.format(\", %s -> %s \", entry.getKey().toString(), entry.getValue().toString()));\n",
      "        }\n",
      "        return \"{\" + result.substring(1) + \"}\";\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.utils;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "\n",
      "public class MapUtilsTest {\n",
      "\n",
      "    @Test\n",
      "    public void shouldPrettyPrintMap() {\n",
      "        Map<Integer, String> map = new HashMap<Integer, String>();\n",
      "        map.put(1, \"one\");\n",
      "        map.put(2, \"two\");\n",
      "        map.put(3, \"three\");\n",
      "        map.put(4, \"four\");\n",
      "        Assert.assertEquals(\"{ 1 -> one , 2 -> two , 3 -> three , 4 -> four }\", MapUtils.toString(map));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void shouldHandleEmptyMap() {\n",
      "        Map<Integer, String> map = new HashMap<Integer, String>();\n",
      "        Assert.assertEquals(\"{}\", MapUtils.toString(map));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void shouldHandleNullInputs() {\n",
      "        Assert.assertEquals(\"\", MapUtils.toString(null));\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)": [
        23,
        33
      ],
      "MapUtils::::getSortedKeys(java.util.Map<java.lang.String, java.lang.String>)": [
        35,
        41
      ],
      "MapUtils::::decodeAndAppendEntries(java.util.Map<java.lang.String, java.lang.String>,java.util.Map<java.lang.String, java.lang.String>)": [
        50,
        56
      ],
      "MapUtils::::toString(java.util.Map<K, V>)": [
        58,
        72
      ]
    },
    "test_method_lines_dic": {
      "MapUtilsTest::::shouldPrettyPrintMap()": [
        11,
        19
      ],
      "MapUtilsTest::::shouldHandleEmptyMap()": [
        21,
        25
      ],
      "MapUtilsTest::::shouldHandleNullInputs()": [
        27,
        30
      ]
    },
    "reverse_method_lines_dic": {
      "23": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "24": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "25": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "26": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "27": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "28": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "29": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "30": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "31": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "32": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "33": "MapUtils::::sort(java.util.Map<java.lang.String, java.lang.String>)",
      "35": "MapUtils::::getSortedKeys(java.util.Map<java.lang.String, java.lang.String>)",
      "36": "MapUtils::::getSortedKeys(java.util.Map<java.lang.String, java.lang.String>)",
      "37": "MapUtils::::getSortedKeys(java.util.Map<java.lang.String, java.lang.String>)",
      "38": "MapUtils::::getSortedKeys(java.util.Map<java.lang.String, java.lang.String>)",
      "39": "MapUtils::::getSortedKeys(java.util.Map<java.lang.String, java.lang.String>)",
      "40": "MapUtils::::getSortedKeys(java.util.Map<java.lang.String, java.lang.String>)",
      "41": "MapUtils::::getSortedKeys(java.util.Map<java.lang.String, java.lang.String>)",
      "50": "MapUtils::::decodeAndAppendEntries(java.util.Map<java.lang.String, java.lang.String>,java.util.Map<java.lang.String, java.lang.String>)",
      "51": "MapUtils::::decodeAndAppendEntries(java.util.Map<java.lang.String, java.lang.String>,java.util.Map<java.lang.String, java.lang.String>)",
      "52": "MapUtils::::decodeAndAppendEntries(java.util.Map<java.lang.String, java.lang.String>,java.util.Map<java.lang.String, java.lang.String>)",
      "53": "MapUtils::::decodeAndAppendEntries(java.util.Map<java.lang.String, java.lang.String>,java.util.Map<java.lang.String, java.lang.String>)",
      "54": "MapUtils::::decodeAndAppendEntries(java.util.Map<java.lang.String, java.lang.String>,java.util.Map<java.lang.String, java.lang.String>)",
      "55": "MapUtils::::decodeAndAppendEntries(java.util.Map<java.lang.String, java.lang.String>,java.util.Map<java.lang.String, java.lang.String>)",
      "56": "MapUtils::::decodeAndAppendEntries(java.util.Map<java.lang.String, java.lang.String>,java.util.Map<java.lang.String, java.lang.String>)",
      "58": "MapUtils::::toString(java.util.Map<K, V>)",
      "59": "MapUtils::::toString(java.util.Map<K, V>)",
      "60": "MapUtils::::toString(java.util.Map<K, V>)",
      "61": "MapUtils::::toString(java.util.Map<K, V>)",
      "62": "MapUtils::::toString(java.util.Map<K, V>)",
      "63": "MapUtils::::toString(java.util.Map<K, V>)",
      "64": "MapUtils::::toString(java.util.Map<K, V>)",
      "65": "MapUtils::::toString(java.util.Map<K, V>)",
      "66": "MapUtils::::toString(java.util.Map<K, V>)",
      "67": "MapUtils::::toString(java.util.Map<K, V>)",
      "68": "MapUtils::::toString(java.util.Map<K, V>)",
      "69": "MapUtils::::toString(java.util.Map<K, V>)",
      "70": "MapUtils::::toString(java.util.Map<K, V>)",
      "71": "MapUtils::::toString(java.util.Map<K, V>)",
      "72": "MapUtils::::toString(java.util.Map<K, V>)"
    },
    "test_reverse_method_lines_dic": {
      "11": "MapUtilsTest::::shouldPrettyPrintMap()",
      "12": "MapUtilsTest::::shouldPrettyPrintMap()",
      "13": "MapUtilsTest::::shouldPrettyPrintMap()",
      "14": "MapUtilsTest::::shouldPrettyPrintMap()",
      "15": "MapUtilsTest::::shouldPrettyPrintMap()",
      "16": "MapUtilsTest::::shouldPrettyPrintMap()",
      "17": "MapUtilsTest::::shouldPrettyPrintMap()",
      "18": "MapUtilsTest::::shouldPrettyPrintMap()",
      "19": "MapUtilsTest::::shouldPrettyPrintMap()",
      "21": "MapUtilsTest::::shouldHandleEmptyMap()",
      "22": "MapUtilsTest::::shouldHandleEmptyMap()",
      "23": "MapUtilsTest::::shouldHandleEmptyMap()",
      "24": "MapUtilsTest::::shouldHandleEmptyMap()",
      "25": "MapUtilsTest::::shouldHandleEmptyMap()",
      "27": "MapUtilsTest::::shouldHandleNullInputs()",
      "28": "MapUtilsTest::::shouldHandleNullInputs()",
      "29": "MapUtilsTest::::shouldHandleNullInputs()",
      "30": "MapUtilsTest::::shouldHandleNullInputs()"
    },
    "tests": [
      {
        "test_lines": [
          11,
          19
        ],
        "covered_lines": [
          59,
          62,
          66,
          67,
          68,
          69,
          70,
          71
        ],
        "label": "MapUtils::::toString(java.util.Map<K, V>)"
      },
      {
        "test_lines": [
          21,
          25
        ],
        "covered_lines": [
          59,
          62,
          63
        ],
        "label": "MapUtils::::toString(java.util.Map<K, V>)"
      },
      {
        "test_lines": [
          27,
          30
        ],
        "covered_lines": [
          59,
          60
        ],
        "label": "MapUtils::::toString(java.util.Map<K, V>)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/jInstagram/src/main/java/org/jinstagram/utils/EnforceSignedHeaderUtils.java": {
    "class_content": [
      "package org.jinstagram.utils;\n",
      "\n",
      "import java.nio.charset.Charset;\n",
      "import java.security.InvalidKeyException;\n",
      "import java.security.NoSuchAlgorithmException;\n",
      "import java.lang.NullPointerException;\n",
      "\n",
      "import javax.crypto.Mac;\n",
      "import javax.crypto.spec.SecretKeySpec;\n",
      "\n",
      "import org.apache.commons.codec.binary.Hex;\n",
      "import org.jinstagram.exceptions.InstagramException;\n",
      "\n",
      "@Deprecated\n",
      "public class EnforceSignedHeaderUtils {\n",
      "\n",
      "    public static final String ENFORCE_SIGNED_HEADER = \"X-Insta-Forwarded-For\";\n",
      "    \n",
      "    private static final String HMAC_SHA256 = \"HmacSHA256\";\n",
      "\n",
      "    @Deprecated\n",
      "    public static String signature(String clientSecret, String message) throws InstagramException {\n",
      "        try {\n",
      "            SecretKeySpec keySpec = new SecretKeySpec(clientSecret.getBytes(Charset.forName(\"UTF-8\")), HMAC_SHA256);\n",
      "            Mac mac = Mac.getInstance(HMAC_SHA256);\n",
      "            mac.init(keySpec);\n",
      "            byte[] result = mac.doFinal(message.getBytes(Charset.forName(\"UTF-8\")));\n",
      "            return Hex.encodeHexString(result);\n",
      "        } catch (NoSuchAlgorithmException e) {\n",
      "            throw new InstagramException(\"Invalid algorithm name!\", e);\n",
      "        } catch (InvalidKeyException e) {\n",
      "            throw new InstagramException(\"Invalid key: \" + clientSecret, e);\n",
      "        } catch (NullPointerException e) {\n",
      "            throw new InstagramException(\"Key is null!\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.jinstagram.utils;\n",
      "\n",
      "import org.jinstagram.exceptions.InstagramException;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "\n",
      "public class EnforceSignedHeaderUtilsTest {\n",
      "\n",
      "    @Test\n",
      "    public void testSignature() throws InstagramException {\n",
      "        String signature1 = EnforceSignedHeaderUtils.signature(\"6dc1787668c64c939929c17683d7cb74\", \"200.15.1.1\");\n",
      "        Assert.assertEquals(\"7e3c45bc34f56fd8e762ee4590a53c8c2bbce27e967a85484712e5faa0191688\", signature1);\n",
      "        String signature2 = EnforceSignedHeaderUtils.signature(\"6dc1787668c64c939929c17683d7cb74\", \"200.15.1.1,131.51.1.35\");\n",
      "        Assert.assertEquals(\"13cb27eee318a5c88f4456bae149d806437fb37ba9f52fac0b1b7d8c234e6cee\", signature2);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)": [
        21,
        36
      ]
    },
    "test_method_lines_dic": {
      "EnforceSignedHeaderUtilsTest::::testSignature()": [
        9,
        15
      ]
    },
    "reverse_method_lines_dic": {
      "21": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "22": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "23": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "24": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "25": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "26": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "27": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "28": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "29": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "30": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "31": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "32": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "33": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "34": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "35": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)",
      "36": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "9": "EnforceSignedHeaderUtilsTest::::testSignature()",
      "10": "EnforceSignedHeaderUtilsTest::::testSignature()",
      "11": "EnforceSignedHeaderUtilsTest::::testSignature()",
      "12": "EnforceSignedHeaderUtilsTest::::testSignature()",
      "13": "EnforceSignedHeaderUtilsTest::::testSignature()",
      "14": "EnforceSignedHeaderUtilsTest::::testSignature()",
      "15": "EnforceSignedHeaderUtilsTest::::testSignature()"
    },
    "tests": [
      {
        "test_lines": [
          9,
          15
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          28
        ],
        "label": "EnforceSignedHeaderUtils::::signature(java.lang.String,java.lang.String)"
      }
    ]
  }
}